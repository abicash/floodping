
**** Build of configuration Release for project bma020-tiny2313 ****

make all 
Building file: ../bma.c
Invoking: AVR Compiler
avr-gcc -Wall -Os -fpack-struct -fshort-enums -std=gnu99 -funsigned-char -funsigned-bitfields -mmcu=attiny2313 -DF_CPU=8000000UL -MMD -MP -MF"bma.d" -MT"bma.d" -c -o "bma.o" "../bma.c"
Finished building: ../bma.c
 
Building file: ../main.c
Invoking: AVR Compiler
avr-gcc -Wall -Os -fpack-struct -fshort-enums -std=gnu99 -funsigned-char -funsigned-bitfields -mmcu=attiny2313 -DF_CPU=8000000UL -MMD -MP -MF"main.d" -MT"main.d" -c -o "main.o" "../main.c"
Finished building: ../main.c
 
Building file: ../rf12.c
Invoking: AVR Compiler
avr-gcc -Wall -Os -fpack-struct -fshort-enums -std=gnu99 -funsigned-char -funsigned-bitfields -mmcu=attiny2313 -DF_CPU=8000000UL -MMD -MP -MF"rf12.d" -MT"rf12.d" -c -o "rf12.o" "../rf12.c"
Finished building: ../rf12.c
 
Building target: bma020-tiny2313.elf
Invoking: AVR C Linker
avr-gcc -Wl,-Map,bma020-tiny2313.map -mmcu=attiny2313 -o "bma020-tiny2313.elf"  ./bma.o ./main.o ./rf12.o   
Finished building target: bma020-tiny2313.elf
 
Invoking: AVR Create Extended Listing
avr-objdump -h -S bma020-tiny2313.elf  >"bma020-tiny2313.lss"
Finished building: bma020-tiny2313.lss
 
Create Flash image (ihex format)
avr-objcopy -R .eeprom -O ihex bma020-tiny2313.elf  "bma020-tiny2313.hex"
Finished building: bma020-tiny2313.hex
 
Create eeprom image (ihex format)
avr-objcopy -j .eeprom --no-change-warnings --change-section-lma .eeprom=0 -O ihex bma020-tiny2313.elf  "bma020-tiny2313.eep"
Finished building: bma020-tiny2313.eep
 
Invoking: Print Size
avr-size --format=avr --mcu=attiny2313 bma020-tiny2313.elf
AVR Memory Usage
----------------
Device: attiny2313

Program:    1796 bytes (87.7% Full)
(.text + .data + .bootloader)

Data:         20 bytes (15.6% Full)
(.data + .bss + .noinit)


Finished building: sizedummy
 
Invoking: AVRDude
/usr/bin/avrdude -pt2313 -cusbasp -F -u -Uflash:w:bma020-tiny2313.hex:a -Ulfuse:w:0xc4:m -Uhfuse:w:0xdf:m -Uefuse:w:0xff:m

avrdude: warning: cannot set sck period. please check for usbasp firmware update.
avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.00s

avrdude: Device signature = 0x1e910a
avrdude: NOTE: FLASH memory has been specified, an erase cycle will be performed
         To disable this feature, specify the -D option.
avrdude: erasing chip
avrdude: warning: cannot set sck period. please check for usbasp firmware update.
avrdude: reading input file "bma020-tiny2313.hex"
avrdude: input file bma020-tiny2313.hex auto detected as Intel Hex
avrdude: writing flash (1796 bytes):

Writing | ################################################## | 100% 1.40s

avrdude: 1796 bytes of flash written
avrdude: verifying flash memory against bma020-tiny2313.hex:
avrdude: load data flash data from input file bma020-tiny2313.hex:
avrdude: input file bma020-tiny2313.hex auto detected as Intel Hex
avrdude: input file bma020-tiny2313.hex contains 1796 bytes
avrdude: reading on-chip flash data:

Reading | ################################################## | 100% 0.92s

avrdude: verifying ...
avrdude: 1796 bytes of flash verified
avrdude: reading input file "0xc4"
avrdude: writing lfuse (1 bytes):

Writing | ################################################## | 100% 0.01s

avrdude: 1 bytes of lfuse written
avrdude: verifying lfuse memory against 0xc4:
avrdude: load data lfuse data from input file 0xc4:
avrdude: input file 0xc4 contains 1 bytes
avrdude: reading on-chip lfuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of lfuse verified
avrdude: reading input file "0xdf"
avrdude: writing hfuse (1 bytes):

Writing | ################################################## | 100% 0.00s
Finished building: avrdudedummy

avrdude: 1 bytes of hfuse written
avrdude: verifying hfuse memory against 0xdf:
 
avrdude: load data hfuse data from input file 0xdf:
avrdude: input file 0xdf contains 1 bytes
avrdude: reading on-chip hfuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of hfuse verified
avrdude: reading input file "0xff"
avrdude: writing efuse (1 bytes):

Writing | ################################################## | 100% 0.00s

avrdude: 1 bytes of efuse written
avrdude: verifying efuse memory against 0xff:
avrdude: load data efuse data from input file 0xff:
avrdude: input file 0xff contains 1 bytes
avrdude: reading on-chip efuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of efuse verified

avrdude done.  Thank you.


**** Build Finished ****
