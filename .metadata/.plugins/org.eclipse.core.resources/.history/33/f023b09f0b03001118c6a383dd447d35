/*---------------------------------------------------------------------------------------------------------------------------------------------------
 * main.c - demo main module to test irmp decoder
 *
 * Copyright (c) 2009-2010 Frank Meyer - frank(at)fli4l.de
 *
 * ATMEGA88 @ 8 MHz
 *
 * Fuses: lfuse: 0xE2 hfuse: 0xDC efuse: 0xF9
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */

#include <inttypes.h>
#include <avr/io.h>
#include <avr/wdt.h>
#include <util/delay.h>
#include <avr/pgmspace.h>
#include <avr/interrupt.h>
//#include "irmp.h"

//####################################################################### Macros

#define uniq(LOW,HEIGHT)        ((HEIGHT << 8)|LOW)                       // Create 16 bit number from two bytes
#define LOW_BYTE(x)             (x & 0xff)                                          // Get low byte from 16 bit number
#define HIGH_BYTE(x)            ((x >> 8) & 0xff)                         // Get high byte from 16 bit number
#define sbi(ADDRESS,BIT)        ((ADDRESS) |= (1<<(BIT)))       // Set bit
#define cbi(ADDRESS,BIT)        ((ADDRESS) &= ~(1<<(BIT)))// Clear bit
#define toggle(ADDRESS,BIT)     ((ADDRESS) ^= (1<<BIT)) // Toggle bit
#define bis(ADDRESS,BIT)        (ADDRESS & (1<<BIT))              // Is bit set?
#define bic(ADDRESS,BIT)        (!(ADDRESS & (1<<BIT)))         // Is bit clear?
//#################################################################### Variables

uint8_t byte1, byte2;
uint16_t buffer;
uint8_t high, low = 0; // Variables used with uniq (high and low byte)

#ifndef F_CPU
#error F_CPU unkown
#endif

//#define F_INTERRUPT   10000                                                     // 10000 interrupts per second
//void timer_init(void) {
//#define PRESCALER 8
//	TCCR0A = (1 << WGM01); /* IR polling timer */
//	TCCR0B = (1 << CS01); // switch CTC Mode on, set prescaler to 1
//
//	// may adjust IR polling rate here to optimize IR receiving:
//	OCR0A = (F_CPU / F_INTERRUPT / PRESCALER) - 1; // compare value: 1/10000 of CPU frequency
//
//	// enable Timer1 for IR polling
//	TIMSK = 1 << OCIE0A; // Timer0A ISR activate
//}

///*---------------------------------------------------------------------------------------------------------------------------------------------------
// * timer 1 compare handler, should be called every 1/10000 sec
// *---------------------------------------------------------------------------------------------------------------------------------------------------
// */
//void TIMER0_COMPA_vect(void) __attribute__((interrupt));
//void TIMER0_COMPA_vect(void) {
//	irmp_ISR();
//}

uint16_t adc_read(void) {
	uint16_t temp;
	ADCSRA |= (1 << ADSC);
	while (ADCSRA & (1 << ADSC))
		;

	temp = ADCL + (ADCH << 8);

	return temp;
}

uint16_t adc_read_avg(uint8_t average) {
	uint16_t temp = 0;
	uint8_t i;

	for (i = 0; i < average; ++i)
		temp += adc_read();

	return (temp / average);
}

/*---------------------------------------------------------------------------------------------------------------------------------------------------
 * MAIN: main routine
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
int main(void) {

	wdt_reset();
	WDTCR = (1 << WDP3) | (1 << WDP0) | (1 << WDE);

	cli();

//	IRMP_DATA irmp_data;
//	irmp_init(); // initialize rc5
//	timer_init();

	DDRB = (1 << PB0);

	TCCR1 = (1 << PWM1A) | (1 << COM1A0) | (1 << CS10);
	OCR1A = 240;

	ADMUX = (1 << MUX0) | (1 << MUX1);
	ADCSRA = (1 << ADEN) | (1 << ADSC);

	sei ();

	int uiIst = 255;

	for (;;) {

		wdt_reset();

#define STEP_OFF     700
#define STEP_1       600
#define STEP_2       500

		int uiSoll = 255;

		int iRes = adc_read_avg(4);
		if (iRes > STEP_OFF)
		{
			uiSoll =255;
			uiIst =255;
		} else if (iRes > STEP_1)
		{
			uiSoll = 100;
		} else if (iRes > STEP_2)
		{
			uiSoll = 220;
		} else {
			uiSoll = 252;
		}

		if (uiSoll < uiIst)
		{
			if(uiIst>=220)
			{
			  uiIst = 0;
			}
			else
			{
				uiIst--;
			}
		} else if (uiSoll> uiIst)
		{
		  uiIst++;
		}

		OCR1A = uiIst;
		_delay_ms(40);

//		if (irmp_get_data(&irmp_data)) {
//			switch (irmp_data.address) {
//			case 0b1110111100000000:
//				switch (irmp_data.command) {
//				case 20:
//					bOn = bOn ? 0 : 1;
//					break;
//				}
//				break;
//			}
//			_delay_ms(500);
//		}
	}
	return 0;
}
