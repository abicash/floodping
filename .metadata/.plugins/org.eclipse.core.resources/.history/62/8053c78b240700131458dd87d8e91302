#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <avr/eeprom.h>
#include <avr/sleep.h>
#include <avr/wdt.h>
#include <stdlib.h>
#include <string.h>
#include "global.h"
#include "rf12.h"
#include "bma.h"
#include "main.h"

#include <util/delay.h>

#define AIRID "0101"

unsigned int volatile WDTcounter = 0;

ISR(WDT_OVERFLOW_vect) {
	cli();
	WDTCSR |= _BV(WDIE);// | _BV(WDP2) | _BV(WDP1) | _BV(WDP0);
	WDTcounter++;
	sei();
}

signed int x;
signed int y;
signed int z;

void measure() {
	int l = (BMA_trans(0x8200));

	l = l >> 6;

	int m = (BMA_trans(0x8300));
	m = m << 2;

	x = ( m | l);

	l = (BMA_trans(0x8400) >> 6);
	m = (BMA_trans(0x8500) << 2);
	y = ( m | l);

	l = (BMA_trans(0x8600) >> 6);
	m = (BMA_trans(0x8700) << 2);
	z = ( m | l);

	if (x & 0x0200) {
		x |= 0xfe00;
	}
	if (y & 0x0200) {
		y |= 0xfe00;
	}
	if (z & 0x0200) {
		z |= 0xfe00;
	}

//	x -= 36;
//	y += 32;
//	z -= 8;
}

void send() {
  char buf[16];// = "g123456789012345678901234567890\0\0\0";
  buf[0] = 'g';
  memcpy(buf + 1, &x, 2);
  memcpy(buf + 3, &y, 2);
  memcpy(buf + 5, &z, 2);
  buf[7] = 0;
  memcpy(buf + 8, &x, 2);
  memcpy(buf + 10, &y, 2);
  memcpy(buf + 12, &z, 2);
  buf[14] = 0;

  rf12_init();
  rf12_setall(RF12FREQ868(868.3), 4, 1, 4, 666, 0, 6);

  rf12_txdata(buf, 15);

  rf12_trans(0x8201);
  rf12_trans(0x0);
}

//#define MAXCOUNT 30
//
//int
//main111111111111(void)
//{
//  rf12_preinit(AIRID);
//
//  send();
//
//  cli();
//  wdt_reset();
//  wdt_enable (WDTO_1S);
//  WDTCSR |= _BV(WDIE) | _BV(WDP2) | _BV(WDP1) | _BV(WDP0);
//  sei();
//
//  for (;;)
//  {
//    if (WDTcounter >= MAXCOUNT)
//    {
//      send();
//      WDTcounter = 0;
//    }
//
//    wdt_reset();
//
//    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
//    sleep_enable();
//
//    sleep_cpu ();
//    sleep_disable ();
//    wdt_reset();
//  }
//}
//

void InitUART(unsigned char baudrate) {
	_delay_ms(10);
	UBRRL = baudrate;
	UCSRB = (1 << TXEN);
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0);
}

void TransmitByte(unsigned char data) {
	while (!(UCSRA & (1 << UDRE)))
		;
	UDR = data;
	_delay_ms(10);
}

void TransmitIntAsAscii(unsigned int data)
{
	int e1 = data % 10;
	data /= 10;
	int e10 = data % 10;
	data /= 10;
	int e100 = data % 10;
	data /= 10;
	int e1000 = data % 10;
	data /= 10;
	int e10000 = data % 10;

	TransmitByte(e10000 + '0');
	TransmitByte(e1000 + '0');
	TransmitByte(e100 + '0');
	TransmitByte(e10 + '0');
	TransmitByte(e1 + '0');
	TransmitByte(' ');
}

#define c_State_Boot 0
#define c_State_Idle 1
#define c_State_DoSend_Init 2
#define c_State_DoSend_Init2 3
#define c_State_DoSend_Measure 4
#define c_State_DoSend_Send 5

int uiState;

int main(void) {
	InitUART(95); //95 = 9600 bei 14,7         12 = 38400 bei 8mhz

	BMA_uninit(0);
	uiState = c_State_Boot;
	rf12_preinit(AIRID);

	cli();
	wdt_reset();
	WDTCSR |= _BV(WDIE);// | _BV(WDP2) | _BV(WDP1) | _BV(WDP0);
	sei();

	for (;;) {
		if (uiState == c_State_Boot) {
			if (WDTcounter >= 100) {
				uiState = c_State_DoSend_Init;
			}
		}

		if (uiState == c_State_DoSend_Init) {
			BMA_init();
			uiState = c_State_DoSend_Init2;
		} else if (uiState == c_State_DoSend_Init2) {
			BMA_init2();
			uiState = c_State_DoSend_Measure;
		} else if (uiState == c_State_DoSend_Measure) {
			measure();
			TransmitIntAsAscii (x);
			_delay_ms(100);
			measure();
			TransmitIntAsAscii (x);
			_delay_ms(100);
			measure();
			TransmitIntAsAscii (x);
			BMA_uninit(1);
			uiState = c_State_DoSend_Send;

		}

		if (uiState == c_State_DoSend_Send) {
			send();
			uiState = c_State_Idle;
			WDTcounter = 0;
		}

		if (uiState == c_State_Idle) {
			if (WDTcounter >= 5000) {
				uiState = c_State_DoSend_Init;
				WDTcounter = 0;
			}
		}

		wdt_reset();
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
		sleep_enable();
		sleep_cpu ();
		sleep_disable ();
		wdt_reset();
	}
}
