Archive member included because of file (symbol)

/opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_udivmodqi4.o)
                              ./main.o (__udivmodqi4)
/opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_exit.o)
                              /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o (exit)
/opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_copy_data.o)
                              ./main.o (__do_copy_data)
/opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_clear_bss.o)
                              ./main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

sec_flag            0x1               ./main.o
key_flag            0x1               ./main.o
time_setup_cnt0     0x1               ./main.o
second              0x1               ./main.o
col_cnt             0x1               ./main.o
minute              0x1               ./main.o
button_mem          0x1               ./main.o
led                 0x18              ./main.o
c                   0x1               ./main.o
hour                0x1               ./main.o
col                 0x2               ./main.o
loop_cnt            0x2               ./main.o
e_SetupState        0x1               ./main.o
time_setup_cnt1     0x1               ./main.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o
LOAD ./main.o
LOAD ./uart.o
LOAD /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a
LOAD /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/libc.a
LOAD /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0xe1c
 *(.vectors)
 .vectors       0x0000000000000000       0x26 /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0000000000000026       0x42 ./main.o
                0x0000000000000068                . = ALIGN (0x2)
                0x0000000000000068                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000068        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000068                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000068                __ctors_start = .
 *(.ctors)
                0x0000000000000068                __ctors_end = .
                0x0000000000000068                __dtors_start = .
 *(.dtors)
                0x0000000000000068                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000068        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000068                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000068        0xc /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000074       0x16 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_copy_data.o)
                0x0000000000000074                __do_copy_data
 .init4         0x000000000000008a       0x10 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_clear_bss.o)
                0x000000000000008a                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000000000009a        0x4 /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x000000000000009e        0x2 /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o
                0x000000000000009e                __vector_1
                0x000000000000009e                __vector_12
                0x000000000000009e                __bad_interrupt
                0x000000000000009e                __vector_3
                0x000000000000009e                __vector_11
                0x000000000000009e                __vector_13
                0x000000000000009e                __vector_17
                0x000000000000009e                __vector_7
                0x000000000000009e                __vector_5
                0x000000000000009e                __vector_9
                0x000000000000009e                __vector_2
                0x000000000000009e                __vector_15
                0x000000000000009e                __vector_8
                0x000000000000009e                __vector_14
                0x000000000000009e                __vector_10
                0x000000000000009e                __vector_16
                0x000000000000009e                __vector_18
 .text          0x00000000000000a0      0xd08 ./main.o
                0x0000000000000be8                __vector_6
                0x00000000000000a0                draw_time
                0x0000000000000c80                main
                0x0000000000000b94                __vector_4
 .text          0x0000000000000da8       0x58 ./uart.o
                0x0000000000000dd0                uart_puts
                0x0000000000000da8                uart_init
                0x0000000000000de4                uart_puts_P
                0x0000000000000df8                uart_getc
                0x0000000000000dc8                uart_putc
                0x0000000000000dc2                uart_kbhit
 .text          0x0000000000000e00        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_udivmodqi4.o)
 .text          0x0000000000000e00        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_exit.o)
 .text          0x0000000000000e00        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_copy_data.o)
 .text          0x0000000000000e00        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_clear_bss.o)
                0x0000000000000e00                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x0000000000000e00       0x18 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_udivmodqi4.o)
                0x0000000000000e00                __udivmodqi4
 .text.libgcc   0x0000000000000e18        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000e18        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000e18        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_clear_bss.o)
                0x0000000000000e18                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000e18        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_exit.o)
                0x0000000000000e18                exit
                0x0000000000000e18                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000e18        0x4 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000000e1c                _etext = .

.data           0x0000000000800060       0x28 load address 0x0000000000000e1c
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o
 .data          0x0000000000800060       0x28 ./main.o
                0x0000000000800060                font
 .data          0x0000000000800088        0x0 ./uart.o
 .data          0x0000000000800088        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_udivmodqi4.o)
 .data          0x0000000000800088        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_exit.o)
 .data          0x0000000000800088        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_copy_data.o)
 .data          0x0000000000800088        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800088                . = ALIGN (0x2)
                0x0000000000800088                _edata = .
                0x0000000000800088                PROVIDE (__data_end, .)

.bss            0x0000000000800088       0x27
                0x0000000000800088                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800088        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o
 .bss           0x0000000000800088        0x0 ./main.o
 .bss           0x0000000000800088        0x0 ./uart.o
 .bss           0x0000000000800088        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_udivmodqi4.o)
 .bss           0x0000000000800088        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_exit.o)
 .bss           0x0000000000800088        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_copy_data.o)
 .bss           0x0000000000800088        0x0 /opt/cross/avr/lib/gcc/avr/4.3.3/avr4/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800088       0x27 ./main.o
                0x0000000000800088                sec_flag
                0x0000000000800089                key_flag
                0x000000000080008a                time_setup_cnt0
                0x000000000080008b                second
                0x000000000080008c                col_cnt
                0x000000000080008d                minute
                0x000000000080008e                button_mem
                0x000000000080008f                led
                0x00000000008000a7                c
                0x00000000008000a8                hour
                0x00000000008000a9                col
                0x00000000008000ab                loop_cnt
                0x00000000008000ad                e_SetupState
                0x00000000008000ae                time_setup_cnt1
                0x00000000008000af                PROVIDE (__bss_end, .)
                0x0000000000000e1c                __data_load_start = LOADADDR (.data)
                0x0000000000000e44                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00000000008000af        0x0
                0x00000000008000af                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00000000008000af                PROVIDE (__noinit_end, .)
                0x00000000008000af                _end = .
                0x00000000008000af                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000      0x6cc
 *(.stab)
 .stab          0x0000000000000000      0x6cc /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o

.stabstr        0x0000000000000000       0x54
 *(.stabstr)
 .stabstr       0x0000000000000000       0x54 /opt/cross/avr/lib/gcc/avr/4.3.3/../../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(MiniWordClock.elf elf32-avr)
LOAD linker stubs
