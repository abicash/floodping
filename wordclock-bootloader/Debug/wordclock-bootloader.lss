
wordclock-bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001a9a  00001b2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  0080008c  0080008c  00001b5a  2**0
                  ALLOC
  3 .stab         00001500  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d55  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004061  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007944  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000084ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_13>
      38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3d       	cpi	r26, 0xD1	; 209
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 02 	call	0x508	; 0x508 <main>
      8a:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	9f 93       	push	r25
      a0:	ef 93       	push	r30
      a2:	ff 93       	push	r31
      a4:	df 93       	push	r29
      a6:	cf 93       	push	r28
      a8:	00 d0       	rcall	.+0      	; 0xaa <__vector_13+0x18>
      aa:	00 d0       	rcall	.+0      	; 0xac <__vector_13+0x1a>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
      b0:	eb e2       	ldi	r30, 0x2B	; 43
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
      b8:	ec e2       	ldi	r30, 0x2C	; 44
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
      c0:	8a 81       	ldd	r24, Y+2	; 0x02
      c2:	88 71       	andi	r24, 0x18	; 24
      c4:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
      c6:	80 91 ce 00 	lds	r24, 0x00CE
      ca:	8f 5f       	subi	r24, 0xFF	; 255
      cc:	8f 71       	andi	r24, 0x1F	; 31
      ce:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
      d0:	90 91 cf 00 	lds	r25, 0x00CF
      d4:	8c 81       	ldd	r24, Y+4	; 0x04
      d6:	89 17       	cp	r24, r25
      d8:	19 f4       	brne	.+6      	; 0xe0 <__vector_13+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
      da:	82 e0       	ldi	r24, 0x02	; 2
      dc:	89 83       	std	Y+1, r24	; 0x01
      de:	0b c0       	rjmp	.+22     	; 0xf6 <__vector_13+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
      e0:	8c 81       	ldd	r24, Y+4	; 0x04
      e2:	80 93 ce 00 	sts	0x00CE, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
      e6:	8c 81       	ldd	r24, Y+4	; 0x04
      e8:	88 2f       	mov	r24, r24
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	fc 01       	movw	r30, r24
      ee:	e4 55       	subi	r30, 0x54	; 84
      f0:	ff 4f       	sbci	r31, 0xFF	; 255
      f2:	8b 81       	ldd	r24, Y+3	; 0x03
      f4:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;   
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	80 93 d0 00 	sts	0x00D0, r24
}
      fc:	0f 90       	pop	r0
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	0f 90       	pop	r0
     104:	cf 91       	pop	r28
     106:	df 91       	pop	r29
     108:	ff 91       	pop	r31
     10a:	ef 91       	pop	r30
     10c:	9f 91       	pop	r25
     10e:	8f 91       	pop	r24
     110:	0f 90       	pop	r0
     112:	0f be       	out	0x3f, r0	; 63
     114:	0f 90       	pop	r0
     116:	1f 90       	pop	r1
     118:	18 95       	reti

0000011a <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     11a:	1f 92       	push	r1
     11c:	0f 92       	push	r0
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	0f 92       	push	r0
     122:	11 24       	eor	r1, r1
     124:	8f 93       	push	r24
     126:	9f 93       	push	r25
     128:	af 93       	push	r26
     12a:	bf 93       	push	r27
     12c:	ef 93       	push	r30
     12e:	ff 93       	push	r31
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	0f 92       	push	r0
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     13a:	90 91 cc 00 	lds	r25, 0x00CC
     13e:	80 91 cd 00 	lds	r24, 0x00CD
     142:	98 17       	cp	r25, r24
     144:	99 f0       	breq	.+38     	; 0x16c <__vector_14+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     146:	80 91 cd 00 	lds	r24, 0x00CD
     14a:	8f 5f       	subi	r24, 0xFF	; 255
     14c:	8f 71       	andi	r24, 0x1F	; 31
     14e:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	80 93 cd 00 	sts	0x00CD, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     156:	ac e2       	ldi	r26, 0x2C	; 44
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	88 2f       	mov	r24, r24
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	fc 01       	movw	r30, r24
     162:	e4 57       	subi	r30, 0x74	; 116
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	80 81       	ld	r24, Z
     168:	8c 93       	st	X, r24
     16a:	07 c0       	rjmp	.+14     	; 0x17a <__vector_14+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     16c:	aa e2       	ldi	r26, 0x2A	; 42
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ea e2       	ldi	r30, 0x2A	; 42
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	8f 7d       	andi	r24, 0xDF	; 223
     178:	8c 93       	st	X, r24
    }
}
     17a:	0f 90       	pop	r0
     17c:	cf 91       	pop	r28
     17e:	df 91       	pop	r29
     180:	ff 91       	pop	r31
     182:	ef 91       	pop	r30
     184:	bf 91       	pop	r27
     186:	af 91       	pop	r26
     188:	9f 91       	pop	r25
     18a:	8f 91       	pop	r24
     18c:	0f 90       	pop	r0
     18e:	0f be       	out	0x3f, r0	; 63
     190:	0f 90       	pop	r0
     192:	1f 90       	pop	r1
     194:	18 95       	reti

00000196 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	00 d0       	rcall	.+0      	; 0x19c <uart_init+0x6>
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	9a 83       	std	Y+2, r25	; 0x02
     1a2:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
     1a4:	10 92 cc 00 	sts	0x00CC, r1
    UART_TxTail = 0;
     1a8:	10 92 cd 00 	sts	0x00CD, r1
    UART_RxHead = 0;
     1ac:	10 92 ce 00 	sts	0x00CE, r1
    UART_RxTail = 0;
     1b0:	10 92 cf 00 	sts	0x00CF, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	9a 81       	ldd	r25, Y+2	; 0x02
     1b8:	99 23       	and	r25, r25
     1ba:	4c f4       	brge	.+18     	; 0x1ce <uart_init+0x38>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
     1bc:	eb e2       	ldi	r30, 0x2B	; 43
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	80 83       	st	Z, r24
    	 baudrate &= ~0x8000;
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	9a 81       	ldd	r25, Y+2	; 0x02
     1c8:	9f 77       	andi	r25, 0x7F	; 127
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
     1ce:	e0 e4       	ldi	r30, 0x40	; 64
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	89 2f       	mov	r24, r25
     1d8:	99 27       	eor	r25, r25
     1da:	80 83       	st	Z, r24
    UBRRL = (unsigned char) baudrate;
     1dc:	e9 e2       	ldi	r30, 0x29	; 41
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	80 83       	st	Z, r24
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
     1e4:	ea e2       	ldi	r30, 0x2A	; 42
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	88 e9       	ldi	r24, 0x98	; 152
     1ea:	80 83       	st	Z, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
     1ec:	e0 e4       	ldi	r30, 0x40	; 64
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	86 e8       	ldi	r24, 0x86	; 134
     1f2:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	cf 91       	pop	r28
     1fa:	df 91       	pop	r29
     1fc:	08 95       	ret

000001fe <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
     1fe:	df 93       	push	r29
     200:	cf 93       	push	r28
     202:	00 d0       	rcall	.+0      	; 0x204 <uart_getc+0x6>
     204:	00 d0       	rcall	.+0      	; 0x206 <uart_getc+0x8>
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     20a:	90 91 ce 00 	lds	r25, 0x00CE
     20e:	80 91 cf 00 	lds	r24, 0x00CF
     212:	98 17       	cp	r25, r24
     214:	29 f4       	brne	.+10     	; 0x220 <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	9c 83       	std	Y+4, r25	; 0x04
     21c:	8b 83       	std	Y+3, r24	; 0x03
     21e:	1d c0       	rjmp	.+58     	; 0x25a <uart_getc+0x5c>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     220:	80 91 cf 00 	lds	r24, 0x00CF
     224:	8f 5f       	subi	r24, 0xFF	; 255
     226:	8f 71       	andi	r24, 0x1F	; 31
     228:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
     22a:	8a 81       	ldd	r24, Y+2	; 0x02
     22c:	80 93 cf 00 	sts	0x00CF, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     230:	8a 81       	ldd	r24, Y+2	; 0x02
     232:	88 2f       	mov	r24, r24
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	fc 01       	movw	r30, r24
     238:	e4 55       	subi	r30, 0x54	; 84
     23a:	ff 4f       	sbci	r31, 0xFF	; 255
     23c:	80 81       	ld	r24, Z
     23e:	89 83       	std	Y+1, r24	; 0x01
    
    return (UART_LastRxError << 8) + data;
     240:	80 91 d0 00 	lds	r24, 0x00D0
     244:	88 2f       	mov	r24, r24
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	38 2f       	mov	r19, r24
     24a:	22 27       	eor	r18, r18
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	88 2f       	mov	r24, r24
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	82 0f       	add	r24, r18
     254:	93 1f       	adc	r25, r19
     256:	9c 83       	std	Y+4, r25	; 0x04
     258:	8b 83       	std	Y+3, r24	; 0x03
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	cf 91       	pop	r28
     268:	df 91       	pop	r29
     26a:	08 95       	ret

0000026c <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	00 d0       	rcall	.+0      	; 0x272 <uart_putc+0x6>
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     278:	80 91 cc 00 	lds	r24, 0x00CC
     27c:	8f 5f       	subi	r24, 0xFF	; 255
     27e:	8f 71       	andi	r24, 0x1F	; 31
     280:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
     282:	90 91 cd 00 	lds	r25, 0x00CD
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	89 17       	cp	r24, r25
     28a:	d9 f3       	breq	.-10     	; 0x282 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	88 2f       	mov	r24, r24
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	fc 01       	movw	r30, r24
     294:	e4 57       	subi	r30, 0x74	; 116
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	80 93 cc 00 	sts	0x00CC, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     2a2:	aa e2       	ldi	r26, 0x2A	; 42
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	ea e2       	ldi	r30, 0x2A	; 42
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	80 62       	ori	r24, 0x20	; 32
     2ae:	8c 93       	st	X, r24

}/* uart_putc */
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	cf 91       	pop	r28
     2b6:	df 91       	pop	r29
     2b8:	08 95       	ret

000002ba <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     2ba:	df 93       	push	r29
     2bc:	cf 93       	push	r28
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <uart_puts+0x6>
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	9a 83       	std	Y+2, r25	; 0x02
     2c6:	89 83       	std	Y+1, r24	; 0x01
     2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <uart_puts+0x26>
    while (*s) 
      uart_putc(*s++);
     2ca:	e9 81       	ldd	r30, Y+1	; 0x01
     2cc:	fa 81       	ldd	r31, Y+2	; 0x02
     2ce:	20 81       	ld	r18, Z
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	9a 83       	std	Y+2, r25	; 0x02
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	82 2f       	mov	r24, r18
     2dc:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     2e0:	e9 81       	ldd	r30, Y+1	; 0x01
     2e2:	fa 81       	ldd	r31, Y+2	; 0x02
     2e4:	80 81       	ld	r24, Z
     2e6:	88 23       	and	r24, r24
     2e8:	81 f7       	brne	.-32     	; 0x2ca <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	cf 91       	pop	r28
     2f0:	df 91       	pop	r29
     2f2:	08 95       	ret

000002f4 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     2f4:	df 93       	push	r29
     2f6:	cf 93       	push	r28
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <uart_puts_p+0x6>
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <uart_puts_p+0x8>
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <uart_puts_p+0xa>
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
     302:	9d 83       	std	Y+5, r25	; 0x05
     304:	8c 83       	std	Y+4, r24	; 0x04
     306:	03 c0       	rjmp	.+6      	; 0x30e <uart_puts_p+0x1a>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     308:	8e 81       	ldd	r24, Y+6	; 0x06
     30a:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     30e:	8c 81       	ldd	r24, Y+4	; 0x04
     310:	9d 81       	ldd	r25, Y+5	; 0x05
     312:	9b 83       	std	Y+3, r25	; 0x03
     314:	8a 83       	std	Y+2, r24	; 0x02
     316:	8c 81       	ldd	r24, Y+4	; 0x04
     318:	9d 81       	ldd	r25, Y+5	; 0x05
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	9d 83       	std	Y+5, r25	; 0x05
     31e:	8c 83       	std	Y+4, r24	; 0x04
     320:	ea 81       	ldd	r30, Y+2	; 0x02
     322:	fb 81       	ldd	r31, Y+3	; 0x03
     324:	84 91       	lpm	r24, Z+
     326:	89 83       	std	Y+1, r24	; 0x01
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	8e 83       	std	Y+6, r24	; 0x06
     32c:	8e 81       	ldd	r24, Y+6	; 0x06
     32e:	88 23       	and	r24, r24
     330:	59 f7       	brne	.-42     	; 0x308 <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
     332:	26 96       	adiw	r28, 0x06	; 6
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	08 95       	ret

00000344 <program_page>:
#define PARSER_STATE_CHECKSUM   5
#define PARSER_STATE_ERROR      6

void
program_page(uint32_t page, uint8_t *buf)
{
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	2b 97       	sbiw	r28, 0x0b	; 11
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	de bf       	out	0x3e, r29	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	cd bf       	out	0x3d, r28	; 61
     358:	6e 83       	std	Y+6, r22	; 0x06
     35a:	7f 83       	std	Y+7, r23	; 0x07
     35c:	88 87       	std	Y+8, r24	; 0x08
     35e:	99 87       	std	Y+9, r25	; 0x09
     360:	5b 87       	std	Y+11, r21	; 0x0b
     362:	4a 87       	std	Y+10, r20	; 0x0a
  uint16_t i;
  uint8_t sreg;

  /* Disable interrupts */
  sreg = SREG;
     364:	ef e5       	ldi	r30, 0x5F	; 95
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	8b 83       	std	Y+3, r24	; 0x03
  cli();
     36c:	f8 94       	cli

  eeprom_busy_wait ();
     36e:	ec e3       	ldi	r30, 0x3C	; 60
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	88 2f       	mov	r24, r24
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	82 70       	andi	r24, 0x02	; 2
     37a:	90 70       	andi	r25, 0x00	; 0
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	b9 f7       	brne	.-18     	; 0x36e <program_page+0x2a>

  boot_page_erase (page);
     380:	ee 81       	ldd	r30, Y+6	; 0x06
     382:	ff 81       	ldd	r31, Y+7	; 0x07
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	80 93 57 00 	sts	0x0057, r24
     38a:	e8 95       	spm
  boot_spm_busy_wait (); /* Wait until the memory is erased. */
     38c:	e7 e5       	ldi	r30, 0x57	; 87
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	88 2f       	mov	r24, r24
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	81 70       	andi	r24, 0x01	; 1
     398:	90 70       	andi	r25, 0x00	; 0
     39a:	88 23       	and	r24, r24
     39c:	b9 f7       	brne	.-18     	; 0x38c <program_page+0x48>

  for (i = 0; i < SPM_PAGESIZE; i += 2)
     39e:	1d 82       	std	Y+5, r1	; 0x05
     3a0:	1c 82       	std	Y+4, r1	; 0x04
     3a2:	33 c0       	rjmp	.+102    	; 0x40a <program_page+0xc6>
  {
    /* Set up little-endian word. */
    uint16_t w = *buf++;
     3a4:	ea 85       	ldd	r30, Y+10	; 0x0a
     3a6:	fb 85       	ldd	r31, Y+11	; 0x0b
     3a8:	80 81       	ld	r24, Z
     3aa:	88 2f       	mov	r24, r24
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	9a 83       	std	Y+2, r25	; 0x02
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     3b4:	9b 85       	ldd	r25, Y+11	; 0x0b
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	9b 87       	std	Y+11, r25	; 0x0b
     3ba:	8a 87       	std	Y+10, r24	; 0x0a
    w += (*buf++) << 8;
     3bc:	ea 85       	ldd	r30, Y+10	; 0x0a
     3be:	fb 85       	ldd	r31, Y+11	; 0x0b
     3c0:	80 81       	ld	r24, Z
     3c2:	88 2f       	mov	r24, r24
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	98 2f       	mov	r25, r24
     3c8:	88 27       	eor	r24, r24
     3ca:	9c 01       	movw	r18, r24
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	82 0f       	add	r24, r18
     3d2:	93 1f       	adc	r25, r19
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	8a 85       	ldd	r24, Y+10	; 0x0a
     3da:	9b 85       	ldd	r25, Y+11	; 0x0b
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	9b 87       	std	Y+11, r25	; 0x0b
     3e0:	8a 87       	std	Y+10, r24	; 0x0a

    boot_page_fill (page + i, w);
     3e2:	2e 81       	ldd	r18, Y+6	; 0x06
     3e4:	3f 81       	ldd	r19, Y+7	; 0x07
     3e6:	8c 81       	ldd	r24, Y+4	; 0x04
     3e8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ea:	f9 01       	movw	r30, r18
     3ec:	e8 0f       	add	r30, r24
     3ee:	f9 1f       	adc	r31, r25
     3f0:	21 e0       	ldi	r18, 0x01	; 1
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	9a 81       	ldd	r25, Y+2	; 0x02
     3f6:	0c 01       	movw	r0, r24
     3f8:	20 93 57 00 	sts	0x0057, r18
     3fc:	e8 95       	spm
     3fe:	11 24       	eor	r1, r1
  eeprom_busy_wait ();

  boot_page_erase (page);
  boot_spm_busy_wait (); /* Wait until the memory is erased. */

  for (i = 0; i < SPM_PAGESIZE; i += 2)
     400:	8c 81       	ldd	r24, Y+4	; 0x04
     402:	9d 81       	ldd	r25, Y+5	; 0x05
     404:	02 96       	adiw	r24, 0x02	; 2
     406:	9d 83       	std	Y+5, r25	; 0x05
     408:	8c 83       	std	Y+4, r24	; 0x04
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	9d 81       	ldd	r25, Y+5	; 0x05
     40e:	80 38       	cpi	r24, 0x80	; 128
     410:	91 05       	cpc	r25, r1
     412:	40 f2       	brcs	.-112    	; 0x3a4 <program_page+0x60>
    w += (*buf++) << 8;

    boot_page_fill (page + i, w);
  }

  boot_page_write (page); /* Store buffer in flash page.    */
     414:	ee 81       	ldd	r30, Y+6	; 0x06
     416:	ff 81       	ldd	r31, Y+7	; 0x07
     418:	85 e0       	ldi	r24, 0x05	; 5
     41a:	80 93 57 00 	sts	0x0057, r24
     41e:	e8 95       	spm
  boot_spm_busy_wait(); /* Wait until the memory is written.*/
     420:	e7 e5       	ldi	r30, 0x57	; 87
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	88 2f       	mov	r24, r24
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	81 70       	andi	r24, 0x01	; 1
     42c:	90 70       	andi	r25, 0x00	; 0
     42e:	88 23       	and	r24, r24
     430:	b9 f7       	brne	.-18     	; 0x420 <program_page+0xdc>

  /* Reenable RWW-section again. We need this if we want to jump back */
  /* to the application after bootloading. */
  boot_rww_enable ();
     432:	81 e1       	ldi	r24, 0x11	; 17
     434:	80 93 57 00 	sts	0x0057, r24
     438:	e8 95       	spm

  /* Re-enable interrupts (if they were ever enabled). */
  SREG = sreg;
     43a:	ef e5       	ldi	r30, 0x5F	; 95
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	8b 81       	ldd	r24, Y+3	; 0x03
     440:	80 83       	st	Z, r24
}
     442:	2b 96       	adiw	r28, 0x0b	; 11
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	cf 91       	pop	r28
     450:	df 91       	pop	r29
     452:	08 95       	ret

00000454 <hex2num>:

static uint16_t
hex2num(const uint8_t * ascii, uint8_t num)
{
     454:	df 93       	push	r29
     456:	cf 93       	push	r28
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	27 97       	sbiw	r28, 0x07	; 7
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	9e 83       	std	Y+6, r25	; 0x06
     46a:	8d 83       	std	Y+5, r24	; 0x05
     46c:	6f 83       	std	Y+7, r22	; 0x07
  uint8_t i;
  uint16_t val = 0;
     46e:	1b 82       	std	Y+3, r1	; 0x03
     470:	1a 82       	std	Y+2, r1	; 0x02

  for (i = 0; i < num; i++)
     472:	1c 82       	std	Y+4, r1	; 0x04
     474:	3a c0       	rjmp	.+116    	; 0x4ea <hex2num+0x96>
  {
    uint8_t c = ascii[i];
     476:	8c 81       	ldd	r24, Y+4	; 0x04
     478:	28 2f       	mov	r18, r24
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	8d 81       	ldd	r24, Y+5	; 0x05
     47e:	9e 81       	ldd	r25, Y+6	; 0x06
     480:	fc 01       	movw	r30, r24
     482:	e2 0f       	add	r30, r18
     484:	f3 1f       	adc	r31, r19
     486:	80 81       	ld	r24, Z
     488:	89 83       	std	Y+1, r24	; 0x01

    /* Hex-Ziffer auf ihren Wert abbilden */
    if (c >= '0' && c <= '9')
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	80 33       	cpi	r24, 0x30	; 48
     48e:	38 f0       	brcs	.+14     	; 0x49e <hex2num+0x4a>
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	8a 33       	cpi	r24, 0x3A	; 58
     494:	20 f4       	brcc	.+8      	; 0x49e <hex2num+0x4a>
      c -= '0';
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	80 53       	subi	r24, 0x30	; 48
     49a:	89 83       	std	Y+1, r24	; 0x01
     49c:	13 c0       	rjmp	.+38     	; 0x4c4 <hex2num+0x70>
    else if (c >= 'A' && c <= 'F')
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	81 34       	cpi	r24, 0x41	; 65
     4a2:	38 f0       	brcs	.+14     	; 0x4b2 <hex2num+0x5e>
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	87 34       	cpi	r24, 0x47	; 71
     4a8:	20 f4       	brcc	.+8      	; 0x4b2 <hex2num+0x5e>
      c -= 'A' - 10;
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	87 53       	subi	r24, 0x37	; 55
     4ae:	89 83       	std	Y+1, r24	; 0x01
     4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <hex2num+0x70>
    else if (c >= 'a' && c <= 'f')
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	81 36       	cpi	r24, 0x61	; 97
     4b6:	30 f0       	brcs	.+12     	; 0x4c4 <hex2num+0x70>
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	87 36       	cpi	r24, 0x67	; 103
     4bc:	18 f4       	brcc	.+6      	; 0x4c4 <hex2num+0x70>
      c -= 'a' - 10;
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	87 55       	subi	r24, 0x57	; 87
     4c2:	89 83       	std	Y+1, r24	; 0x01

    val = 16 * val + c;
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
     4c6:	9b 81       	ldd	r25, Y+3	; 0x03
     4c8:	9c 01       	movw	r18, r24
     4ca:	22 95       	swap	r18
     4cc:	32 95       	swap	r19
     4ce:	30 7f       	andi	r19, 0xF0	; 240
     4d0:	32 27       	eor	r19, r18
     4d2:	20 7f       	andi	r18, 0xF0	; 240
     4d4:	32 27       	eor	r19, r18
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	88 2f       	mov	r24, r24
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	82 0f       	add	r24, r18
     4de:	93 1f       	adc	r25, r19
     4e0:	9b 83       	std	Y+3, r25	; 0x03
     4e2:	8a 83       	std	Y+2, r24	; 0x02
hex2num(const uint8_t * ascii, uint8_t num)
{
  uint8_t i;
  uint16_t val = 0;

  for (i = 0; i < num; i++)
     4e4:	8c 81       	ldd	r24, Y+4	; 0x04
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	8c 83       	std	Y+4, r24	; 0x04
     4ea:	9c 81       	ldd	r25, Y+4	; 0x04
     4ec:	8f 81       	ldd	r24, Y+7	; 0x07
     4ee:	98 17       	cp	r25, r24
     4f0:	10 f2       	brcs	.-124    	; 0x476 <hex2num+0x22>
      c -= 'a' - 10;

    val = 16 * val + c;
  }

  return val;
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     4f6:	27 96       	adiw	r28, 0x07	; 7
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
     502:	cf 91       	pop	r28
     504:	df 91       	pop	r29
     506:	08 95       	ret

00000508 <main>:

int
main()
{
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	c8 5d       	subi	r28, 0xD8	; 216
     516:	d0 40       	sbci	r29, 0x00	; 0
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
  /* Empfangenes Zeichen + Statuscode */
  uint16_t c = 0,
     522:	fe 01       	movw	r30, r28
     524:	e4 5b       	subi	r30, 0xB4	; 180
     526:	ff 4f       	sbci	r31, 0xFF	; 255
     528:	11 82       	std	Z+1, r1	; 0x01
     52a:	10 82       	st	Z, r1
  /* Intel-HEX Zieladresse */
  hex_addr = 0,
     52c:	fe 01       	movw	r30, r28
     52e:	e6 5b       	subi	r30, 0xB6	; 182
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	11 82       	std	Z+1, r1	; 0x01
     534:	10 82       	st	Z, r1
  /* Zu schreibende Flash-Page */
  flash_page = 0,
     536:	fe 01       	movw	r30, r28
     538:	e8 5b       	subi	r30, 0xB8	; 184
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	11 82       	std	Z+1, r1	; 0x01
     53e:	10 82       	st	Z, r1
  /* Intel-HEX Checksumme zum Überprüfen des Daten */
  hex_check = 0,
     540:	fe 01       	movw	r30, r28
     542:	ea 5b       	subi	r30, 0xBA	; 186
     544:	ff 4f       	sbci	r31, 0xFF	; 255
     546:	11 82       	std	Z+1, r1	; 0x01
     548:	10 82       	st	Z, r1
  /* Positions zum Schreiben in der Datenpuffer */
  flash_cnt = 0;
     54a:	fe 01       	movw	r30, r28
     54c:	ec 5b       	subi	r30, 0xBC	; 188
     54e:	ff 4f       	sbci	r31, 0xFF	; 255
     550:	11 82       	std	Z+1, r1	; 0x01
     552:	10 82       	st	Z, r1
  /* temporäre Variable */
  uint8_t temp,
  /* Flag zum steuern des Programmiermodus */
  boot_state = BOOT_STATE_EXIT,
     554:	fe 01       	movw	r30, r28
     556:	ee 5b       	subi	r30, 0xBE	; 190
     558:	ff 4f       	sbci	r31, 0xFF	; 255
     55a:	10 82       	st	Z, r1
  /* Empfangszustandssteuerung */
  parser_state = PARSER_STATE_START,
     55c:	fe 01       	movw	r30, r28
     55e:	ef 5b       	subi	r30, 0xBF	; 191
     560:	ff 4f       	sbci	r31, 0xFF	; 255
     562:	10 82       	st	Z, r1
  /* Flag zum ermitteln einer neuen Flash-Page */
  flash_page_flag = 1,
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	fe 01       	movw	r30, r28
     568:	e0 5c       	subi	r30, 0xC0	; 192
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	80 83       	st	Z, r24
  /* Datenpuffer für die Hexdaten*/
  flash_data[SPM_PAGESIZE],
  /* Position zum Schreiben in den HEX-Puffer */
  hex_cnt = 0,
     56e:	1f ae       	std	Y+63, r1	; 0x3f
  /* Puffer für die Umwandlung der ASCII in Binärdaten */
  hex_buffer[5],
  /* Intel-HEX Datenlänge */
  hex_size = 0,
     570:	1e ae       	std	Y+62, r1	; 0x3e
  /* Zähler für die empfangenen HEX-Daten einer Zeile */
  hex_data_cnt = 0,
     572:	1d ae       	std	Y+61, r1	; 0x3d
  /* Intel-HEX Recordtype */
  hex_type = 0,
     574:	1c ae       	std	Y+60, r1	; 0x3c
  /* empfangene HEX-Checksumme */
  hex_checksum = 0;
     576:	1b ae       	std	Y+59, r1	; 0x3b
  /* Funktionspointer auf 0x0000 */
  void
  (*start)(void) = 0x0000;
     578:	1a ae       	std	Y+58, r1	; 0x3a
     57a:	19 ae       	std	Y+57, r1	; 0x39

  /* Füllen der Puffer mit definierten Werten */
  memset(hex_buffer, 0x00, sizeof(hex_buffer));
     57c:	ce 01       	movw	r24, r28
     57e:	82 53       	subi	r24, 0x32	; 50
     580:	9f 4f       	sbci	r25, 0xFF	; 255
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	45 e0       	ldi	r20, 0x05	; 5
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <memset>
  memset(flash_data, 0xFF, sizeof(flash_data));
     58e:	ce 01       	movw	r24, r28
     590:	82 5b       	subi	r24, 0xB2	; 178
     592:	9f 4f       	sbci	r25, 0xFF	; 255
     594:	6f ef       	ldi	r22, 0xFF	; 255
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	40 e8       	ldi	r20, 0x80	; 128
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <memset>

  /* Interrupt Vektoren verbiegen */
  temp = MCUCR;
     5a0:	e5 e5       	ldi	r30, 0x55	; 85
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	de 01       	movw	r26, r28
     5a6:	ad 5b       	subi	r26, 0xBD	; 189
     5a8:	bf 4f       	sbci	r27, 0xFF	; 255
     5aa:	80 81       	ld	r24, Z
     5ac:	8c 93       	st	X, r24
  MCUCR = temp | (1 << IVCE);
     5ae:	a5 e5       	ldi	r26, 0x55	; 85
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	fe 01       	movw	r30, r28
     5b4:	ed 5b       	subi	r30, 0xBD	; 189
     5b6:	ff 4f       	sbci	r31, 0xFF	; 255
     5b8:	80 81       	ld	r24, Z
     5ba:	81 60       	ori	r24, 0x01	; 1
     5bc:	8c 93       	st	X, r24
  MCUCR = temp | (1 << IVSEL);
     5be:	a5 e5       	ldi	r26, 0x55	; 85
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	fe 01       	movw	r30, r28
     5c4:	ed 5b       	subi	r30, 0xBD	; 189
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	80 81       	ld	r24, Z
     5ca:	82 60       	ori	r24, 0x02	; 2
     5cc:	8c 93       	st	X, r24

  /* Einstellen der Baudrate und aktivieren der Interrupts */
  uart_init(UART_BAUD_SELECT(BOOT_UART_BAUD_RATE,F_CPU));
     5ce:	87 e0       	ldi	r24, 0x07	; 7
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 cb 00 	call	0x196	; 0x196 <uart_init>
  sei();
     5d6:	78 94       	sei

  uart_puts("Bootloader\n\r");
     5d8:	80 e6       	ldi	r24, 0x60	; 96
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <uart_puts>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	aa ef       	ldi	r26, 0xFA	; 250
     5e6:	b4 e4       	ldi	r27, 0x44	; 68
     5e8:	8d ab       	std	Y+53, r24	; 0x35
     5ea:	9e ab       	std	Y+54, r25	; 0x36
     5ec:	af ab       	std	Y+55, r26	; 0x37
     5ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5f0:	6d a9       	ldd	r22, Y+53	; 0x35
     5f2:	7e a9       	ldd	r23, Y+54	; 0x36
     5f4:	8f a9       	ldd	r24, Y+55	; 0x37
     5f6:	98 ad       	ldd	r25, Y+56	; 0x38
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	4a e7       	ldi	r20, 0x7A	; 122
     5fe:	55 e4       	ldi	r21, 0x45	; 69
     600:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	89 ab       	std	Y+49, r24	; 0x31
     60a:	9a ab       	std	Y+50, r25	; 0x32
     60c:	ab ab       	std	Y+51, r26	; 0x33
     60e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     610:	69 a9       	ldd	r22, Y+49	; 0x31
     612:	7a a9       	ldd	r23, Y+50	; 0x32
     614:	8b a9       	ldd	r24, Y+51	; 0x33
     616:	9c a9       	ldd	r25, Y+52	; 0x34
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e8       	ldi	r20, 0x80	; 128
     61e:	5f e3       	ldi	r21, 0x3F	; 63
     620:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__ltsf2>
     624:	88 23       	and	r24, r24
     626:	2c f4       	brge	.+10     	; 0x632 <main+0x12a>
		__ticks = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	98 ab       	std	Y+48, r25	; 0x30
     62e:	8f a7       	std	Y+47, r24	; 0x2f
     630:	3f c0       	rjmp	.+126    	; 0x6b0 <main+0x1a8>
	else if (__tmp > 65535)
     632:	69 a9       	ldd	r22, Y+49	; 0x31
     634:	7a a9       	ldd	r23, Y+50	; 0x32
     636:	8b a9       	ldd	r24, Y+51	; 0x33
     638:	9c a9       	ldd	r25, Y+52	; 0x34
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	3f ef       	ldi	r19, 0xFF	; 255
     63e:	4f e7       	ldi	r20, 0x7F	; 127
     640:	57 e4       	ldi	r21, 0x47	; 71
     642:	0e 94 83 0a 	call	0x1506	; 0x1506 <__gtsf2>
     646:	18 16       	cp	r1, r24
     648:	4c f5       	brge	.+82     	; 0x69c <main+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     64a:	6d a9       	ldd	r22, Y+53	; 0x35
     64c:	7e a9       	ldd	r23, Y+54	; 0x36
     64e:	8f a9       	ldd	r24, Y+55	; 0x37
     650:	98 ad       	ldd	r25, Y+56	; 0x38
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e2       	ldi	r20, 0x20	; 32
     658:	51 e4       	ldi	r21, 0x41	; 65
     65a:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	bc 01       	movw	r22, r24
     664:	cd 01       	movw	r24, r26
     666:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fixunssfsi>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	98 ab       	std	Y+48, r25	; 0x30
     670:	8f a7       	std	Y+47, r24	; 0x2f
     672:	0f c0       	rjmp	.+30     	; 0x692 <main+0x18a>
     674:	80 e9       	ldi	r24, 0x90	; 144
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	9e a7       	std	Y+46, r25	; 0x2e
     67a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     67c:	8d a5       	ldd	r24, Y+45	; 0x2d
     67e:	9e a5       	ldd	r25, Y+46	; 0x2e
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	f1 f7       	brne	.-4      	; 0x680 <main+0x178>
     684:	9e a7       	std	Y+46, r25	; 0x2e
     686:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     688:	8f a5       	ldd	r24, Y+47	; 0x2f
     68a:	98 a9       	ldd	r25, Y+48	; 0x30
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	98 ab       	std	Y+48, r25	; 0x30
     690:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     692:	8f a5       	ldd	r24, Y+47	; 0x2f
     694:	98 a9       	ldd	r25, Y+48	; 0x30
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	69 f7       	brne	.-38     	; 0x674 <main+0x16c>
     69a:	14 c0       	rjmp	.+40     	; 0x6c4 <main+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     69c:	69 a9       	ldd	r22, Y+49	; 0x31
     69e:	7a a9       	ldd	r23, Y+50	; 0x32
     6a0:	8b a9       	ldd	r24, Y+51	; 0x33
     6a2:	9c a9       	ldd	r25, Y+52	; 0x34
     6a4:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fixunssfsi>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	98 ab       	std	Y+48, r25	; 0x30
     6ae:	8f a7       	std	Y+47, r24	; 0x2f
     6b0:	8f a5       	ldd	r24, Y+47	; 0x2f
     6b2:	98 a9       	ldd	r25, Y+48	; 0x30
     6b4:	9c a7       	std	Y+44, r25	; 0x2c
     6b6:	8b a7       	std	Y+43, r24	; 0x2b
     6b8:	8b a5       	ldd	r24, Y+43	; 0x2b
     6ba:	9c a5       	ldd	r25, Y+44	; 0x2c
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <main+0x1b4>
     6c0:	9c a7       	std	Y+44, r25	; 0x2c
     6c2:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(2000);

  do
  {
    c = uart_getc();
     6c4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <uart_getc>
     6c8:	fe 01       	movw	r30, r28
     6ca:	e4 5b       	subi	r30, 0xB4	; 180
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	91 83       	std	Z+1, r25	; 0x01
     6d0:	80 83       	st	Z, r24
    if (!(c & UART_NO_DATA))
     6d2:	fe 01       	movw	r30, r28
     6d4:	e4 5b       	subi	r30, 0xB4	; 180
     6d6:	ff 4f       	sbci	r31, 0xFF	; 255
     6d8:	80 81       	ld	r24, Z
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	80 70       	andi	r24, 0x00	; 0
     6de:	91 70       	andi	r25, 0x01	; 1
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <main+0x1de>
     6e4:	9f c3       	rjmp	.+1854   	; 0xe24 <__stack+0x5c5>
    {
      /* Programmzustand: Parser */
      if (boot_state == BOOT_STATE_PARSER)
     6e6:	fe 01       	movw	r30, r28
     6e8:	ee 5b       	subi	r30, 0xBE	; 190
     6ea:	ff 4f       	sbci	r31, 0xFF	; 255
     6ec:	80 81       	ld	r24, Z
     6ee:	81 30       	cpi	r24, 0x01	; 1
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <main+0x1ec>
     6f2:	61 c3       	rjmp	.+1730   	; 0xdb6 <__stack+0x557>
      {
        switch (parser_state)
     6f4:	fe 01       	movw	r30, r28
     6f6:	ef 5b       	subi	r30, 0xBF	; 191
     6f8:	ff 4f       	sbci	r31, 0xFF	; 255
     6fa:	80 81       	ld	r24, Z
     6fc:	28 2f       	mov	r18, r24
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	c9 52       	subi	r28, 0x29	; 41
     702:	df 4f       	sbci	r29, 0xFF	; 255
     704:	39 83       	std	Y+1, r19	; 0x01
     706:	28 83       	st	Y, r18
     708:	c7 5d       	subi	r28, 0xD7	; 215
     70a:	d0 40       	sbci	r29, 0x00	; 0
     70c:	c9 52       	subi	r28, 0x29	; 41
     70e:	df 4f       	sbci	r29, 0xFF	; 255
     710:	88 81       	ld	r24, Y
     712:	99 81       	ldd	r25, Y+1	; 0x01
     714:	c7 5d       	subi	r28, 0xD7	; 215
     716:	d0 40       	sbci	r29, 0x00	; 0
     718:	83 30       	cpi	r24, 0x03	; 3
     71a:	91 05       	cpc	r25, r1
     71c:	09 f4       	brne	.+2      	; 0x720 <main+0x218>
     71e:	00 c1       	rjmp	.+512    	; 0x920 <__stack+0xc1>
     720:	c9 52       	subi	r28, 0x29	; 41
     722:	df 4f       	sbci	r29, 0xFF	; 255
     724:	28 81       	ld	r18, Y
     726:	39 81       	ldd	r19, Y+1	; 0x01
     728:	c7 5d       	subi	r28, 0xD7	; 215
     72a:	d0 40       	sbci	r29, 0x00	; 0
     72c:	24 30       	cpi	r18, 0x04	; 4
     72e:	31 05       	cpc	r19, r1
     730:	ec f4       	brge	.+58     	; 0x76c <main+0x264>
     732:	c9 52       	subi	r28, 0x29	; 41
     734:	df 4f       	sbci	r29, 0xFF	; 255
     736:	88 81       	ld	r24, Y
     738:	99 81       	ldd	r25, Y+1	; 0x01
     73a:	c7 5d       	subi	r28, 0xD7	; 215
     73c:	d0 40       	sbci	r29, 0x00	; 0
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	91 05       	cpc	r25, r1
     742:	09 f4       	brne	.+2      	; 0x746 <main+0x23e>
     744:	4b c0       	rjmp	.+150    	; 0x7dc <main+0x2d4>
     746:	c9 52       	subi	r28, 0x29	; 41
     748:	df 4f       	sbci	r29, 0xFF	; 255
     74a:	28 81       	ld	r18, Y
     74c:	39 81       	ldd	r19, Y+1	; 0x01
     74e:	c7 5d       	subi	r28, 0xD7	; 215
     750:	d0 40       	sbci	r29, 0x00	; 0
     752:	22 30       	cpi	r18, 0x02	; 2
     754:	31 05       	cpc	r19, r1
     756:	0c f0       	brlt	.+2      	; 0x75a <main+0x252>
     758:	79 c0       	rjmp	.+242    	; 0x84c <main+0x344>
     75a:	c9 52       	subi	r28, 0x29	; 41
     75c:	df 4f       	sbci	r29, 0xFF	; 255
     75e:	88 81       	ld	r24, Y
     760:	99 81       	ldd	r25, Y+1	; 0x01
     762:	c7 5d       	subi	r28, 0xD7	; 215
     764:	d0 40       	sbci	r29, 0x00	; 0
     766:	00 97       	sbiw	r24, 0x00	; 0
     768:	01 f1       	breq	.+64     	; 0x7aa <main+0x2a2>
     76a:	5c c3       	rjmp	.+1720   	; 0xe24 <__stack+0x5c5>
     76c:	c9 52       	subi	r28, 0x29	; 41
     76e:	df 4f       	sbci	r29, 0xFF	; 255
     770:	28 81       	ld	r18, Y
     772:	39 81       	ldd	r19, Y+1	; 0x01
     774:	c7 5d       	subi	r28, 0xD7	; 215
     776:	d0 40       	sbci	r29, 0x00	; 0
     778:	25 30       	cpi	r18, 0x05	; 5
     77a:	31 05       	cpc	r19, r1
     77c:	09 f4       	brne	.+2      	; 0x780 <main+0x278>
     77e:	3a c2       	rjmp	.+1140   	; 0xbf4 <__stack+0x395>
     780:	c9 52       	subi	r28, 0x29	; 41
     782:	df 4f       	sbci	r29, 0xFF	; 255
     784:	88 81       	ld	r24, Y
     786:	99 81       	ldd	r25, Y+1	; 0x01
     788:	c7 5d       	subi	r28, 0xD7	; 215
     78a:	d0 40       	sbci	r29, 0x00	; 0
     78c:	85 30       	cpi	r24, 0x05	; 5
     78e:	91 05       	cpc	r25, r1
     790:	0c f4       	brge	.+2      	; 0x794 <main+0x28c>
     792:	27 c1       	rjmp	.+590    	; 0x9e2 <__stack+0x183>
     794:	c9 52       	subi	r28, 0x29	; 41
     796:	df 4f       	sbci	r29, 0xFF	; 255
     798:	28 81       	ld	r18, Y
     79a:	39 81       	ldd	r19, Y+1	; 0x01
     79c:	c7 5d       	subi	r28, 0xD7	; 215
     79e:	d0 40       	sbci	r29, 0x00	; 0
     7a0:	26 30       	cpi	r18, 0x06	; 6
     7a2:	31 05       	cpc	r19, r1
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <main+0x2a0>
     7a6:	03 c3       	rjmp	.+1542   	; 0xdae <__stack+0x54f>
     7a8:	3d c3       	rjmp	.+1658   	; 0xe24 <__stack+0x5c5>
        {
        /* Warte auf Zeilen-Startzeichen */
        case PARSER_STATE_START:
          if ((uint8_t) c == START_SIGN)
     7aa:	fe 01       	movw	r30, r28
     7ac:	e4 5b       	subi	r30, 0xB4	; 180
     7ae:	ff 4f       	sbci	r31, 0xFF	; 255
     7b0:	80 81       	ld	r24, Z
     7b2:	8a 33       	cpi	r24, 0x3A	; 58
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <main+0x2b0>
     7b6:	36 c3       	rjmp	.+1644   	; 0xe24 <__stack+0x5c5>
          {
            uart_putc(XOFF);
     7b8:	83 e1       	ldi	r24, 0x13	; 19
     7ba:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
            parser_state = PARSER_STATE_SIZE;
     7be:	fe 01       	movw	r30, r28
     7c0:	ef 5b       	subi	r30, 0xBF	; 191
     7c2:	ff 4f       	sbci	r31, 0xFF	; 255
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 83       	st	Z, r24
            hex_cnt = 0;
     7c8:	1f ae       	std	Y+63, r1	; 0x3f
            hex_check = 0;
     7ca:	fe 01       	movw	r30, r28
     7cc:	ea 5b       	subi	r30, 0xBA	; 186
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	11 82       	std	Z+1, r1	; 0x01
     7d2:	10 82       	st	Z, r1
            uart_putc(XON);
     7d4:	81 e1       	ldi	r24, 0x11	; 17
     7d6:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
     7da:	24 c3       	rjmp	.+1608   	; 0xe24 <__stack+0x5c5>
          }
          break;
          /* Parse Datengröße */
        case PARSER_STATE_SIZE:
          hex_buffer[hex_cnt++] = (uint8_t) c;
     7dc:	8f ad       	ldd	r24, Y+63	; 0x3f
     7de:	28 2f       	mov	r18, r24
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	fe 01       	movw	r30, r28
     7e4:	e4 5b       	subi	r30, 0xB4	; 180
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	40 81       	ld	r20, Z
     7ea:	ce 01       	movw	r24, r28
     7ec:	82 53       	subi	r24, 0x32	; 50
     7ee:	9f 4f       	sbci	r25, 0xFF	; 255
     7f0:	fc 01       	movw	r30, r24
     7f2:	e2 0f       	add	r30, r18
     7f4:	f3 1f       	adc	r31, r19
     7f6:	40 83       	st	Z, r20
     7f8:	8f ad       	ldd	r24, Y+63	; 0x3f
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	8f af       	std	Y+63, r24	; 0x3f
          if (hex_cnt == 2)
     7fe:	8f ad       	ldd	r24, Y+63	; 0x3f
     800:	82 30       	cpi	r24, 0x02	; 2
     802:	09 f0       	breq	.+2      	; 0x806 <main+0x2fe>
     804:	0f c3       	rjmp	.+1566   	; 0xe24 <__stack+0x5c5>
          {
            uart_putc(XOFF);
     806:	83 e1       	ldi	r24, 0x13	; 19
     808:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
            parser_state = PARSER_STATE_ADDRESS;
     80c:	fe 01       	movw	r30, r28
     80e:	ef 5b       	subi	r30, 0xBF	; 191
     810:	ff 4f       	sbci	r31, 0xFF	; 255
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	80 83       	st	Z, r24
            hex_cnt = 0;
     816:	1f ae       	std	Y+63, r1	; 0x3f
            hex_size = (uint8_t) hex2num(hex_buffer, 2);
     818:	ce 01       	movw	r24, r28
     81a:	82 53       	subi	r24, 0x32	; 50
     81c:	9f 4f       	sbci	r25, 0xFF	; 255
     81e:	62 e0       	ldi	r22, 0x02	; 2
     820:	0e 94 2a 02 	call	0x454	; 0x454 <hex2num>
     824:	8e af       	std	Y+62, r24	; 0x3e
            hex_check += hex_size;
     826:	8e ad       	ldd	r24, Y+62	; 0x3e
     828:	28 2f       	mov	r18, r24
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	de 01       	movw	r26, r28
     82e:	aa 5b       	subi	r26, 0xBA	; 186
     830:	bf 4f       	sbci	r27, 0xFF	; 255
     832:	fe 01       	movw	r30, r28
     834:	ea 5b       	subi	r30, 0xBA	; 186
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	80 81       	ld	r24, Z
     83a:	91 81       	ldd	r25, Z+1	; 0x01
     83c:	82 0f       	add	r24, r18
     83e:	93 1f       	adc	r25, r19
     840:	8d 93       	st	X+, r24
     842:	9c 93       	st	X, r25
            uart_putc(XON);
     844:	81 e1       	ldi	r24, 0x11	; 17
     846:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
     84a:	ec c2       	rjmp	.+1496   	; 0xe24 <__stack+0x5c5>
          }
          break;
          /* Parse Zieladresse */
        case PARSER_STATE_ADDRESS:
          hex_buffer[hex_cnt++] = (uint8_t) c;
     84c:	8f ad       	ldd	r24, Y+63	; 0x3f
     84e:	28 2f       	mov	r18, r24
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	fe 01       	movw	r30, r28
     854:	e4 5b       	subi	r30, 0xB4	; 180
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	40 81       	ld	r20, Z
     85a:	ce 01       	movw	r24, r28
     85c:	82 53       	subi	r24, 0x32	; 50
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	fc 01       	movw	r30, r24
     862:	e2 0f       	add	r30, r18
     864:	f3 1f       	adc	r31, r19
     866:	40 83       	st	Z, r20
     868:	8f ad       	ldd	r24, Y+63	; 0x3f
     86a:	8f 5f       	subi	r24, 0xFF	; 255
     86c:	8f af       	std	Y+63, r24	; 0x3f
          if (hex_cnt == 4)
     86e:	8f ad       	ldd	r24, Y+63	; 0x3f
     870:	84 30       	cpi	r24, 0x04	; 4
     872:	09 f0       	breq	.+2      	; 0x876 <__stack+0x17>
     874:	d7 c2       	rjmp	.+1454   	; 0xe24 <__stack+0x5c5>
          {
            uart_putc(XOFF);
     876:	83 e1       	ldi	r24, 0x13	; 19
     878:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
            parser_state = PARSER_STATE_TYPE;
     87c:	fe 01       	movw	r30, r28
     87e:	ef 5b       	subi	r30, 0xBF	; 191
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	83 e0       	ldi	r24, 0x03	; 3
     884:	80 83       	st	Z, r24
            hex_cnt = 0;
     886:	1f ae       	std	Y+63, r1	; 0x3f
            hex_addr = hex2num(hex_buffer, 4);
     888:	ce 01       	movw	r24, r28
     88a:	82 53       	subi	r24, 0x32	; 50
     88c:	9f 4f       	sbci	r25, 0xFF	; 255
     88e:	64 e0       	ldi	r22, 0x04	; 4
     890:	0e 94 2a 02 	call	0x454	; 0x454 <hex2num>
     894:	fe 01       	movw	r30, r28
     896:	e6 5b       	subi	r30, 0xB6	; 182
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	80 83       	st	Z, r24
            hex_check += (uint8_t) hex_addr;
     89e:	fe 01       	movw	r30, r28
     8a0:	e6 5b       	subi	r30, 0xB6	; 182
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	80 81       	ld	r24, Z
     8a6:	28 2f       	mov	r18, r24
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	de 01       	movw	r26, r28
     8ac:	aa 5b       	subi	r26, 0xBA	; 186
     8ae:	bf 4f       	sbci	r27, 0xFF	; 255
     8b0:	fe 01       	movw	r30, r28
     8b2:	ea 5b       	subi	r30, 0xBA	; 186
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	82 0f       	add	r24, r18
     8bc:	93 1f       	adc	r25, r19
     8be:	8d 93       	st	X+, r24
     8c0:	9c 93       	st	X, r25
            hex_check += (uint8_t) (hex_addr >> 8);
     8c2:	fe 01       	movw	r30, r28
     8c4:	e6 5b       	subi	r30, 0xB6	; 182
     8c6:	ff 4f       	sbci	r31, 0xFF	; 255
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	89 2f       	mov	r24, r25
     8ce:	99 27       	eor	r25, r25
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	de 01       	movw	r26, r28
     8d6:	aa 5b       	subi	r26, 0xBA	; 186
     8d8:	bf 4f       	sbci	r27, 0xFF	; 255
     8da:	fe 01       	movw	r30, r28
     8dc:	ea 5b       	subi	r30, 0xBA	; 186
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	80 81       	ld	r24, Z
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	82 0f       	add	r24, r18
     8e6:	93 1f       	adc	r25, r19
     8e8:	11 96       	adiw	r26, 0x01	; 1
     8ea:	9c 93       	st	X, r25
     8ec:	8e 93       	st	-X, r24
            if (flash_page_flag)
     8ee:	fe 01       	movw	r30, r28
     8f0:	e0 5c       	subi	r30, 0xC0	; 192
     8f2:	ff 4f       	sbci	r31, 0xFF	; 255
     8f4:	80 81       	ld	r24, Z
     8f6:	88 23       	and	r24, r24
     8f8:	79 f0       	breq	.+30     	; 0x918 <__stack+0xb9>
            {
              flash_page = hex_addr - hex_addr % SPM_PAGESIZE;
     8fa:	de 01       	movw	r26, r28
     8fc:	a8 5b       	subi	r26, 0xB8	; 184
     8fe:	bf 4f       	sbci	r27, 0xFF	; 255
     900:	fe 01       	movw	r30, r28
     902:	e6 5b       	subi	r30, 0xB6	; 182
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	80 81       	ld	r24, Z
     908:	91 81       	ldd	r25, Z+1	; 0x01
     90a:	80 78       	andi	r24, 0x80	; 128
     90c:	8d 93       	st	X+, r24
     90e:	9c 93       	st	X, r25
              flash_page_flag = 0;
     910:	fe 01       	movw	r30, r28
     912:	e0 5c       	subi	r30, 0xC0	; 192
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	10 82       	st	Z, r1
            }
            uart_putc(XON);
     918:	81 e1       	ldi	r24, 0x11	; 17
     91a:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
     91e:	82 c2       	rjmp	.+1284   	; 0xe24 <__stack+0x5c5>
          }
          break;
          /* Parse Zeilentyp */
        case PARSER_STATE_TYPE:
          hex_buffer[hex_cnt++] = (uint8_t) c;
     920:	8f ad       	ldd	r24, Y+63	; 0x3f
     922:	28 2f       	mov	r18, r24
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	fe 01       	movw	r30, r28
     928:	e4 5b       	subi	r30, 0xB4	; 180
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	40 81       	ld	r20, Z
     92e:	ce 01       	movw	r24, r28
     930:	82 53       	subi	r24, 0x32	; 50
     932:	9f 4f       	sbci	r25, 0xFF	; 255
     934:	fc 01       	movw	r30, r24
     936:	e2 0f       	add	r30, r18
     938:	f3 1f       	adc	r31, r19
     93a:	40 83       	st	Z, r20
     93c:	8f ad       	ldd	r24, Y+63	; 0x3f
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	8f af       	std	Y+63, r24	; 0x3f
          if (hex_cnt == 2)
     942:	8f ad       	ldd	r24, Y+63	; 0x3f
     944:	82 30       	cpi	r24, 0x02	; 2
     946:	09 f0       	breq	.+2      	; 0x94a <__stack+0xeb>
     948:	6d c2       	rjmp	.+1242   	; 0xe24 <__stack+0x5c5>
          {
            uart_putc(XOFF);
     94a:	83 e1       	ldi	r24, 0x13	; 19
     94c:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
            hex_cnt = 0;
     950:	1f ae       	std	Y+63, r1	; 0x3f
            hex_data_cnt = 0;
     952:	1d ae       	std	Y+61, r1	; 0x3d
            hex_type = (uint8_t) hex2num(hex_buffer, 2);
     954:	ce 01       	movw	r24, r28
     956:	82 53       	subi	r24, 0x32	; 50
     958:	9f 4f       	sbci	r25, 0xFF	; 255
     95a:	62 e0       	ldi	r22, 0x02	; 2
     95c:	0e 94 2a 02 	call	0x454	; 0x454 <hex2num>
     960:	8c af       	std	Y+60, r24	; 0x3c
            hex_check += hex_type;
     962:	8c ad       	ldd	r24, Y+60	; 0x3c
     964:	28 2f       	mov	r18, r24
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	de 01       	movw	r26, r28
     96a:	aa 5b       	subi	r26, 0xBA	; 186
     96c:	bf 4f       	sbci	r27, 0xFF	; 255
     96e:	fe 01       	movw	r30, r28
     970:	ea 5b       	subi	r30, 0xBA	; 186
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	82 0f       	add	r24, r18
     97a:	93 1f       	adc	r25, r19
     97c:	11 96       	adiw	r26, 0x01	; 1
     97e:	9c 93       	st	X, r25
     980:	8e 93       	st	-X, r24
            switch (hex_type)
     982:	8c ad       	ldd	r24, Y+60	; 0x3c
     984:	28 2f       	mov	r18, r24
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	cb 52       	subi	r28, 0x2B	; 43
     98a:	df 4f       	sbci	r29, 0xFF	; 255
     98c:	39 83       	std	Y+1, r19	; 0x01
     98e:	28 83       	st	Y, r18
     990:	c5 5d       	subi	r28, 0xD5	; 213
     992:	d0 40       	sbci	r29, 0x00	; 0
     994:	cb 52       	subi	r28, 0x2B	; 43
     996:	df 4f       	sbci	r29, 0xFF	; 255
     998:	88 81       	ld	r24, Y
     99a:	99 81       	ldd	r25, Y+1	; 0x01
     99c:	c5 5d       	subi	r28, 0xD5	; 213
     99e:	d0 40       	sbci	r29, 0x00	; 0
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	51 f0       	breq	.+20     	; 0x9b8 <__stack+0x159>
     9a4:	cb 52       	subi	r28, 0x2B	; 43
     9a6:	df 4f       	sbci	r29, 0xFF	; 255
     9a8:	28 81       	ld	r18, Y
     9aa:	39 81       	ldd	r19, Y+1	; 0x01
     9ac:	c5 5d       	subi	r28, 0xD5	; 213
     9ae:	d0 40       	sbci	r29, 0x00	; 0
     9b0:	21 30       	cpi	r18, 0x01	; 1
     9b2:	31 05       	cpc	r19, r1
     9b4:	39 f0       	breq	.+14     	; 0x9c4 <__stack+0x165>
     9b6:	0c c0       	rjmp	.+24     	; 0x9d0 <__stack+0x171>
            {
            case 0:
              parser_state = PARSER_STATE_DATA;
     9b8:	fe 01       	movw	r30, r28
     9ba:	ef 5b       	subi	r30, 0xBF	; 191
     9bc:	ff 4f       	sbci	r31, 0xFF	; 255
     9be:	84 e0       	ldi	r24, 0x04	; 4
     9c0:	80 83       	st	Z, r24
     9c2:	0b c0       	rjmp	.+22     	; 0x9da <__stack+0x17b>
              break;
            case 1:
              parser_state = PARSER_STATE_CHECKSUM;
     9c4:	fe 01       	movw	r30, r28
     9c6:	ef 5b       	subi	r30, 0xBF	; 191
     9c8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ca:	85 e0       	ldi	r24, 0x05	; 5
     9cc:	80 83       	st	Z, r24
     9ce:	05 c0       	rjmp	.+10     	; 0x9da <__stack+0x17b>
              break;
            default:
              parser_state = PARSER_STATE_DATA;
     9d0:	fe 01       	movw	r30, r28
     9d2:	ef 5b       	subi	r30, 0xBF	; 191
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	80 83       	st	Z, r24
              break;
            }
            uart_putc(XON);
     9da:	81 e1       	ldi	r24, 0x11	; 17
     9dc:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
     9e0:	21 c2       	rjmp	.+1090   	; 0xe24 <__stack+0x5c5>
          }
          break;
          /* Parse Flash-Daten */
        case PARSER_STATE_DATA:
          hex_buffer[hex_cnt++] = (uint8_t) c;
     9e2:	8f ad       	ldd	r24, Y+63	; 0x3f
     9e4:	28 2f       	mov	r18, r24
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	fe 01       	movw	r30, r28
     9ea:	e4 5b       	subi	r30, 0xB4	; 180
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	40 81       	ld	r20, Z
     9f0:	ce 01       	movw	r24, r28
     9f2:	82 53       	subi	r24, 0x32	; 50
     9f4:	9f 4f       	sbci	r25, 0xFF	; 255
     9f6:	fc 01       	movw	r30, r24
     9f8:	e2 0f       	add	r30, r18
     9fa:	f3 1f       	adc	r31, r19
     9fc:	40 83       	st	Z, r20
     9fe:	8f ad       	ldd	r24, Y+63	; 0x3f
     a00:	8f 5f       	subi	r24, 0xFF	; 255
     a02:	8f af       	std	Y+63, r24	; 0x3f
          if (hex_cnt == 2)
     a04:	8f ad       	ldd	r24, Y+63	; 0x3f
     a06:	82 30       	cpi	r24, 0x02	; 2
     a08:	09 f0       	breq	.+2      	; 0xa0c <__stack+0x1ad>
     a0a:	0c c2       	rjmp	.+1048   	; 0xe24 <__stack+0x5c5>
          {
            uart_putc(XOFF);
     a0c:	83 e1       	ldi	r24, 0x13	; 19
     a0e:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
            uart_putc('.');
     a12:	8e e2       	ldi	r24, 0x2E	; 46
     a14:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
            hex_cnt = 0;
     a18:	1f ae       	std	Y+63, r1	; 0x3f
            flash_data[flash_cnt] = (uint8_t) hex2num(hex_buffer, 2);
     a1a:	fe 01       	movw	r30, r28
     a1c:	ec 5b       	subi	r30, 0xBC	; 188
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	00 81       	ld	r16, Z
     a22:	11 81       	ldd	r17, Z+1	; 0x01
     a24:	ce 01       	movw	r24, r28
     a26:	82 53       	subi	r24, 0x32	; 50
     a28:	9f 4f       	sbci	r25, 0xFF	; 255
     a2a:	62 e0       	ldi	r22, 0x02	; 2
     a2c:	0e 94 2a 02 	call	0x454	; 0x454 <hex2num>
     a30:	28 2f       	mov	r18, r24
     a32:	ce 01       	movw	r24, r28
     a34:	82 5b       	subi	r24, 0xB2	; 178
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	fc 01       	movw	r30, r24
     a3a:	e0 0f       	add	r30, r16
     a3c:	f1 1f       	adc	r31, r17
     a3e:	20 83       	st	Z, r18
            hex_check += flash_data[flash_cnt];
     a40:	fe 01       	movw	r30, r28
     a42:	ec 5b       	subi	r30, 0xBC	; 188
     a44:	ff 4f       	sbci	r31, 0xFF	; 255
     a46:	20 81       	ld	r18, Z
     a48:	31 81       	ldd	r19, Z+1	; 0x01
     a4a:	ce 01       	movw	r24, r28
     a4c:	82 5b       	subi	r24, 0xB2	; 178
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	fc 01       	movw	r30, r24
     a52:	e2 0f       	add	r30, r18
     a54:	f3 1f       	adc	r31, r19
     a56:	80 81       	ld	r24, Z
     a58:	28 2f       	mov	r18, r24
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	de 01       	movw	r26, r28
     a5e:	aa 5b       	subi	r26, 0xBA	; 186
     a60:	bf 4f       	sbci	r27, 0xFF	; 255
     a62:	fe 01       	movw	r30, r28
     a64:	ea 5b       	subi	r30, 0xBA	; 186
     a66:	ff 4f       	sbci	r31, 0xFF	; 255
     a68:	80 81       	ld	r24, Z
     a6a:	91 81       	ldd	r25, Z+1	; 0x01
     a6c:	82 0f       	add	r24, r18
     a6e:	93 1f       	adc	r25, r19
     a70:	8d 93       	st	X+, r24
     a72:	9c 93       	st	X, r25
            flash_cnt++;
     a74:	de 01       	movw	r26, r28
     a76:	ac 5b       	subi	r26, 0xBC	; 188
     a78:	bf 4f       	sbci	r27, 0xFF	; 255
     a7a:	fe 01       	movw	r30, r28
     a7c:	ec 5b       	subi	r30, 0xBC	; 188
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	11 96       	adiw	r26, 0x01	; 1
     a88:	9c 93       	st	X, r25
     a8a:	8e 93       	st	-X, r24
            hex_data_cnt++;
     a8c:	8d ad       	ldd	r24, Y+61	; 0x3d
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	8d af       	std	Y+61, r24	; 0x3d
            if (hex_data_cnt == hex_size)
     a92:	9d ad       	ldd	r25, Y+61	; 0x3d
     a94:	8e ad       	ldd	r24, Y+62	; 0x3e
     a96:	98 17       	cp	r25, r24
     a98:	39 f4       	brne	.+14     	; 0xaa8 <__stack+0x249>
            {
              parser_state = PARSER_STATE_CHECKSUM;
     a9a:	fe 01       	movw	r30, r28
     a9c:	ef 5b       	subi	r30, 0xBF	; 191
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	80 83       	st	Z, r24
              hex_data_cnt = 0;
     aa4:	1d ae       	std	Y+61, r1	; 0x3d
              hex_cnt = 0;
     aa6:	1f ae       	std	Y+63, r1	; 0x3f
            }
            /* Puffer voll -> schreibe Page */
            if (flash_cnt == SPM_PAGESIZE)
     aa8:	fe 01       	movw	r30, r28
     aaa:	ec 5b       	subi	r30, 0xBC	; 188
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	80 81       	ld	r24, Z
     ab0:	91 81       	ldd	r25, Z+1	; 0x01
     ab2:	80 38       	cpi	r24, 0x80	; 128
     ab4:	91 05       	cpc	r25, r1
     ab6:	09 f0       	breq	.+2      	; 0xaba <__stack+0x25b>
     ab8:	99 c0       	rjmp	.+306    	; 0xbec <__stack+0x38d>
            {
              uart_puts("P\n\r");
     aba:	8d e6       	ldi	r24, 0x6D	; 109
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 5d 01 	call	0x2ba	; 0x2ba <uart_puts>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a8 ec       	ldi	r26, 0xC8	; 200
     ac8:	b2 e4       	ldi	r27, 0x42	; 66
     aca:	8f a3       	std	Y+39, r24	; 0x27
     acc:	98 a7       	std	Y+40, r25	; 0x28
     ace:	a9 a7       	std	Y+41, r26	; 0x29
     ad0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ad2:	6f a1       	ldd	r22, Y+39	; 0x27
     ad4:	78 a5       	ldd	r23, Y+40	; 0x28
     ad6:	89 a5       	ldd	r24, Y+41	; 0x29
     ad8:	9a a5       	ldd	r25, Y+42	; 0x2a
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	4a e7       	ldi	r20, 0x7A	; 122
     ae0:	55 e4       	ldi	r21, 0x45	; 69
     ae2:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	8b a3       	std	Y+35, r24	; 0x23
     aec:	9c a3       	std	Y+36, r25	; 0x24
     aee:	ad a3       	std	Y+37, r26	; 0x25
     af0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     af2:	6b a1       	ldd	r22, Y+35	; 0x23
     af4:	7c a1       	ldd	r23, Y+36	; 0x24
     af6:	8d a1       	ldd	r24, Y+37	; 0x25
     af8:	9e a1       	ldd	r25, Y+38	; 0x26
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	5f e3       	ldi	r21, 0x3F	; 63
     b02:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__ltsf2>
     b06:	88 23       	and	r24, r24
     b08:	2c f4       	brge	.+10     	; 0xb14 <__stack+0x2b5>
		__ticks = 1;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	9a a3       	std	Y+34, r25	; 0x22
     b10:	89 a3       	std	Y+33, r24	; 0x21
     b12:	3f c0       	rjmp	.+126    	; 0xb92 <__stack+0x333>
	else if (__tmp > 65535)
     b14:	6b a1       	ldd	r22, Y+35	; 0x23
     b16:	7c a1       	ldd	r23, Y+36	; 0x24
     b18:	8d a1       	ldd	r24, Y+37	; 0x25
     b1a:	9e a1       	ldd	r25, Y+38	; 0x26
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	3f ef       	ldi	r19, 0xFF	; 255
     b20:	4f e7       	ldi	r20, 0x7F	; 127
     b22:	57 e4       	ldi	r21, 0x47	; 71
     b24:	0e 94 83 0a 	call	0x1506	; 0x1506 <__gtsf2>
     b28:	18 16       	cp	r1, r24
     b2a:	4c f5       	brge	.+82     	; 0xb7e <__stack+0x31f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b2c:	6f a1       	ldd	r22, Y+39	; 0x27
     b2e:	78 a5       	ldd	r23, Y+40	; 0x28
     b30:	89 a5       	ldd	r24, Y+41	; 0x29
     b32:	9a a5       	ldd	r25, Y+42	; 0x2a
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e2       	ldi	r20, 0x20	; 32
     b3a:	51 e4       	ldi	r21, 0x41	; 65
     b3c:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	bc 01       	movw	r22, r24
     b46:	cd 01       	movw	r24, r26
     b48:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fixunssfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	9a a3       	std	Y+34, r25	; 0x22
     b52:	89 a3       	std	Y+33, r24	; 0x21
     b54:	0f c0       	rjmp	.+30     	; 0xb74 <__stack+0x315>
     b56:	80 e9       	ldi	r24, 0x90	; 144
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	98 a3       	std	Y+32, r25	; 0x20
     b5c:	8f 8f       	std	Y+31, r24	; 0x1f
     b5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b60:	98 a1       	ldd	r25, Y+32	; 0x20
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <__stack+0x303>
     b66:	98 a3       	std	Y+32, r25	; 0x20
     b68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b6a:	89 a1       	ldd	r24, Y+33	; 0x21
     b6c:	9a a1       	ldd	r25, Y+34	; 0x22
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	9a a3       	std	Y+34, r25	; 0x22
     b72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b74:	89 a1       	ldd	r24, Y+33	; 0x21
     b76:	9a a1       	ldd	r25, Y+34	; 0x22
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	69 f7       	brne	.-38     	; 0xb56 <__stack+0x2f7>
     b7c:	14 c0       	rjmp	.+40     	; 0xba6 <__stack+0x347>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7e:	6b a1       	ldd	r22, Y+35	; 0x23
     b80:	7c a1       	ldd	r23, Y+36	; 0x24
     b82:	8d a1       	ldd	r24, Y+37	; 0x25
     b84:	9e a1       	ldd	r25, Y+38	; 0x26
     b86:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fixunssfsi>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	9a a3       	std	Y+34, r25	; 0x22
     b90:	89 a3       	std	Y+33, r24	; 0x21
     b92:	89 a1       	ldd	r24, Y+33	; 0x21
     b94:	9a a1       	ldd	r25, Y+34	; 0x22
     b96:	9e 8f       	std	Y+30, r25	; 0x1e
     b98:	8d 8f       	std	Y+29, r24	; 0x1d
     b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <__stack+0x33f>
     ba2:	9e 8f       	std	Y+30, r25	; 0x1e
     ba4:	8d 8f       	std	Y+29, r24	; 0x1d
              _delay_ms(100);
              program_page((uint16_t) flash_page, flash_data);
     ba6:	fe 01       	movw	r30, r28
     ba8:	e8 5b       	subi	r30, 0xB8	; 184
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	cc 01       	movw	r24, r24
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	9e 01       	movw	r18, r28
     bb8:	22 5b       	subi	r18, 0xB2	; 178
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	a9 01       	movw	r20, r18
     bc2:	0e 94 a2 01 	call	0x344	; 0x344 <program_page>
              memset(flash_data, 0xFF, sizeof(flash_data));
     bc6:	ce 01       	movw	r24, r28
     bc8:	82 5b       	subi	r24, 0xB2	; 178
     bca:	9f 4f       	sbci	r25, 0xFF	; 255
     bcc:	6f ef       	ldi	r22, 0xFF	; 255
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	40 e8       	ldi	r20, 0x80	; 128
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <memset>
              flash_cnt = 0;
     bd8:	fe 01       	movw	r30, r28
     bda:	ec 5b       	subi	r30, 0xBC	; 188
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	11 82       	std	Z+1, r1	; 0x01
     be0:	10 82       	st	Z, r1
              flash_page_flag = 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	fe 01       	movw	r30, r28
     be6:	e0 5c       	subi	r30, 0xC0	; 192
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	80 83       	st	Z, r24
            }
            uart_putc(XON);
     bec:	81 e1       	ldi	r24, 0x11	; 17
     bee:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
     bf2:	18 c1       	rjmp	.+560    	; 0xe24 <__stack+0x5c5>
          }
          break;
          /* Parse Checksumme */
        case PARSER_STATE_CHECKSUM:
          hex_buffer[hex_cnt++] = (uint8_t) c;
     bf4:	8f ad       	ldd	r24, Y+63	; 0x3f
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	fe 01       	movw	r30, r28
     bfc:	e4 5b       	subi	r30, 0xB4	; 180
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	40 81       	ld	r20, Z
     c02:	ce 01       	movw	r24, r28
     c04:	82 53       	subi	r24, 0x32	; 50
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	fc 01       	movw	r30, r24
     c0a:	e2 0f       	add	r30, r18
     c0c:	f3 1f       	adc	r31, r19
     c0e:	40 83       	st	Z, r20
     c10:	8f ad       	ldd	r24, Y+63	; 0x3f
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	8f af       	std	Y+63, r24	; 0x3f
          if (hex_cnt == 2)
     c16:	8f ad       	ldd	r24, Y+63	; 0x3f
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	09 f0       	breq	.+2      	; 0xc1e <__stack+0x3bf>
     c1c:	03 c1       	rjmp	.+518    	; 0xe24 <__stack+0x5c5>
          {
            uart_putc(XOFF);
     c1e:	83 e1       	ldi	r24, 0x13	; 19
     c20:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
            hex_checksum = (uint8_t) hex2num(hex_buffer, 2);
     c24:	ce 01       	movw	r24, r28
     c26:	82 53       	subi	r24, 0x32	; 50
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	62 e0       	ldi	r22, 0x02	; 2
     c2c:	0e 94 2a 02 	call	0x454	; 0x454 <hex2num>
     c30:	8b af       	std	Y+59, r24	; 0x3b
            hex_check += hex_checksum;
     c32:	8b ad       	ldd	r24, Y+59	; 0x3b
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	de 01       	movw	r26, r28
     c3a:	aa 5b       	subi	r26, 0xBA	; 186
     c3c:	bf 4f       	sbci	r27, 0xFF	; 255
     c3e:	fe 01       	movw	r30, r28
     c40:	ea 5b       	subi	r30, 0xBA	; 186
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	82 0f       	add	r24, r18
     c4a:	93 1f       	adc	r25, r19
     c4c:	8d 93       	st	X+, r24
     c4e:	9c 93       	st	X, r25
            hex_check &= 0x00FF;
     c50:	de 01       	movw	r26, r28
     c52:	aa 5b       	subi	r26, 0xBA	; 186
     c54:	bf 4f       	sbci	r27, 0xFF	; 255
     c56:	fe 01       	movw	r30, r28
     c58:	ea 5b       	subi	r30, 0xBA	; 186
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	9c 93       	st	X, r25
     c66:	8e 93       	st	-X, r24
            /* Dateiende -> schreibe Restdaten */
            if (hex_type == 1)
     c68:	8c ad       	ldd	r24, Y+60	; 0x3c
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	09 f0       	breq	.+2      	; 0xc70 <__stack+0x411>
     c6e:	8a c0       	rjmp	.+276    	; 0xd84 <__stack+0x525>
            {
              uart_puts("P\n\r");
     c70:	8d e6       	ldi	r24, 0x6D	; 109
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 5d 01 	call	0x2ba	; 0x2ba <uart_puts>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a8 ec       	ldi	r26, 0xC8	; 200
     c7e:	b2 e4       	ldi	r27, 0x42	; 66
     c80:	89 8f       	std	Y+25, r24	; 0x19
     c82:	9a 8f       	std	Y+26, r25	; 0x1a
     c84:	ab 8f       	std	Y+27, r26	; 0x1b
     c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c88:	69 8d       	ldd	r22, Y+25	; 0x19
     c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	4a e7       	ldi	r20, 0x7A	; 122
     c96:	55 e4       	ldi	r21, 0x45	; 69
     c98:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	8d 8b       	std	Y+21, r24	; 0x15
     ca2:	9e 8b       	std	Y+22, r25	; 0x16
     ca4:	af 8b       	std	Y+23, r26	; 0x17
     ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ca8:	6d 89       	ldd	r22, Y+21	; 0x15
     caa:	7e 89       	ldd	r23, Y+22	; 0x16
     cac:	8f 89       	ldd	r24, Y+23	; 0x17
     cae:	98 8d       	ldd	r25, Y+24	; 0x18
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e8       	ldi	r20, 0x80	; 128
     cb6:	5f e3       	ldi	r21, 0x3F	; 63
     cb8:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__ltsf2>
     cbc:	88 23       	and	r24, r24
     cbe:	2c f4       	brge	.+10     	; 0xcca <__stack+0x46b>
		__ticks = 1;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	9c 8b       	std	Y+20, r25	; 0x14
     cc6:	8b 8b       	std	Y+19, r24	; 0x13
     cc8:	3f c0       	rjmp	.+126    	; 0xd48 <__stack+0x4e9>
	else if (__tmp > 65535)
     cca:	6d 89       	ldd	r22, Y+21	; 0x15
     ccc:	7e 89       	ldd	r23, Y+22	; 0x16
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	98 8d       	ldd	r25, Y+24	; 0x18
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	3f ef       	ldi	r19, 0xFF	; 255
     cd6:	4f e7       	ldi	r20, 0x7F	; 127
     cd8:	57 e4       	ldi	r21, 0x47	; 71
     cda:	0e 94 83 0a 	call	0x1506	; 0x1506 <__gtsf2>
     cde:	18 16       	cp	r1, r24
     ce0:	4c f5       	brge	.+82     	; 0xd34 <__stack+0x4d5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce2:	69 8d       	ldd	r22, Y+25	; 0x19
     ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e2       	ldi	r20, 0x20	; 32
     cf0:	51 e4       	ldi	r21, 0x41	; 65
     cf2:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	bc 01       	movw	r22, r24
     cfc:	cd 01       	movw	r24, r26
     cfe:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	9c 8b       	std	Y+20, r25	; 0x14
     d08:	8b 8b       	std	Y+19, r24	; 0x13
     d0a:	0f c0       	rjmp	.+30     	; 0xd2a <__stack+0x4cb>
     d0c:	80 e9       	ldi	r24, 0x90	; 144
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	9a 8b       	std	Y+18, r25	; 0x12
     d12:	89 8b       	std	Y+17, r24	; 0x11
     d14:	89 89       	ldd	r24, Y+17	; 0x11
     d16:	9a 89       	ldd	r25, Y+18	; 0x12
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <__stack+0x4b9>
     d1c:	9a 8b       	std	Y+18, r25	; 0x12
     d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d20:	8b 89       	ldd	r24, Y+19	; 0x13
     d22:	9c 89       	ldd	r25, Y+20	; 0x14
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	9c 8b       	std	Y+20, r25	; 0x14
     d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2a:	8b 89       	ldd	r24, Y+19	; 0x13
     d2c:	9c 89       	ldd	r25, Y+20	; 0x14
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	69 f7       	brne	.-38     	; 0xd0c <__stack+0x4ad>
     d32:	14 c0       	rjmp	.+40     	; 0xd5c <__stack+0x4fd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d34:	6d 89       	ldd	r22, Y+21	; 0x15
     d36:	7e 89       	ldd	r23, Y+22	; 0x16
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	98 8d       	ldd	r25, Y+24	; 0x18
     d3c:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	9c 8b       	std	Y+20, r25	; 0x14
     d46:	8b 8b       	std	Y+19, r24	; 0x13
     d48:	8b 89       	ldd	r24, Y+19	; 0x13
     d4a:	9c 89       	ldd	r25, Y+20	; 0x14
     d4c:	98 8b       	std	Y+16, r25	; 0x10
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
     d50:	8f 85       	ldd	r24, Y+15	; 0x0f
     d52:	98 89       	ldd	r25, Y+16	; 0x10
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <__stack+0x4f5>
     d58:	98 8b       	std	Y+16, r25	; 0x10
     d5a:	8f 87       	std	Y+15, r24	; 0x0f
              _delay_ms(100);
              program_page((uint16_t) flash_page, flash_data);
     d5c:	fe 01       	movw	r30, r28
     d5e:	e8 5b       	subi	r30, 0xB8	; 184
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	cc 01       	movw	r24, r24
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	9e 01       	movw	r18, r28
     d6e:	22 5b       	subi	r18, 0xB2	; 178
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	a9 01       	movw	r20, r18
     d78:	0e 94 a2 01 	call	0x344	; 0x344 <program_page>
              boot_state = BOOT_STATE_EXIT;
     d7c:	fe 01       	movw	r30, r28
     d7e:	ee 5b       	subi	r30, 0xBE	; 190
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	10 82       	st	Z, r1
            }
            /* Überprüfe Checksumme -> muss '0' sein */
            if (hex_check == 0)
     d84:	fe 01       	movw	r30, r28
     d86:	ea 5b       	subi	r30, 0xBA	; 186
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	29 f4       	brne	.+10     	; 0xd9c <__stack+0x53d>
              parser_state = PARSER_STATE_START;
     d92:	fe 01       	movw	r30, r28
     d94:	ef 5b       	subi	r30, 0xBF	; 191
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	10 82       	st	Z, r1
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <__stack+0x547>
            else
              parser_state = PARSER_STATE_ERROR;
     d9c:	fe 01       	movw	r30, r28
     d9e:	ef 5b       	subi	r30, 0xBF	; 191
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	80 83       	st	Z, r24
            uart_putc(XON);
     da6:	81 e1       	ldi	r24, 0x11	; 17
     da8:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
     dac:	3b c0       	rjmp	.+118    	; 0xe24 <__stack+0x5c5>
          }
          break;
          /* Parserfehler (falsche Checksumme) */
        case PARSER_STATE_ERROR:
          uart_putc('#');
     dae:	83 e2       	ldi	r24, 0x23	; 35
     db0:	0e 94 36 01 	call	0x26c	; 0x26c <uart_putc>
     db4:	37 c0       	rjmp	.+110    	; 0xe24 <__stack+0x5c5>
        default:
          break;
        }
      }
      /* Programmzustand: UART Kommunikation */
      else if (boot_state != BOOT_STATE_PARSER)
     db6:	fe 01       	movw	r30, r28
     db8:	ee 5b       	subi	r30, 0xBE	; 190
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	80 81       	ld	r24, Z
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	89 f1       	breq	.+98     	; 0xe24 <__stack+0x5c5>
      {
        switch ((uint8_t) c)
     dc2:	fe 01       	movw	r30, r28
     dc4:	e4 5b       	subi	r30, 0xB4	; 180
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	cd 52       	subi	r28, 0x2D	; 45
     dd0:	df 4f       	sbci	r29, 0xFF	; 255
     dd2:	39 83       	std	Y+1, r19	; 0x01
     dd4:	28 83       	st	Y, r18
     dd6:	c3 5d       	subi	r28, 0xD3	; 211
     dd8:	d0 40       	sbci	r29, 0x00	; 0
     dda:	cd 52       	subi	r28, 0x2D	; 45
     ddc:	df 4f       	sbci	r29, 0xFF	; 255
     dde:	88 81       	ld	r24, Y
     de0:	99 81       	ldd	r25, Y+1	; 0x01
     de2:	c3 5d       	subi	r28, 0xD3	; 211
     de4:	d0 40       	sbci	r29, 0x00	; 0
     de6:	80 37       	cpi	r24, 0x70	; 112
     de8:	91 05       	cpc	r25, r1
     dea:	51 f0       	breq	.+20     	; 0xe00 <__stack+0x5a1>
     dec:	cd 52       	subi	r28, 0x2D	; 45
     dee:	df 4f       	sbci	r29, 0xFF	; 255
     df0:	28 81       	ld	r18, Y
     df2:	39 81       	ldd	r19, Y+1	; 0x01
     df4:	c3 5d       	subi	r28, 0xD3	; 211
     df6:	d0 40       	sbci	r29, 0x00	; 0
     df8:	21 37       	cpi	r18, 0x71	; 113
     dfa:	31 05       	cpc	r19, r1
     dfc:	59 f0       	breq	.+22     	; 0xe14 <__stack+0x5b5>
     dfe:	12 c0       	rjmp	.+36     	; 0xe24 <__stack+0x5c5>
        {
        case 'p':
          boot_state = BOOT_STATE_PARSER;
     e00:	fe 01       	movw	r30, r28
     e02:	ee 5b       	subi	r30, 0xBE	; 190
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	80 83       	st	Z, r24
          uart_puts("Program!\n\r");
     e0a:	81 e7       	ldi	r24, 0x71	; 113
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <uart_puts>
     e12:	08 c0       	rjmp	.+16     	; 0xe24 <__stack+0x5c5>
          break;
        case 'q':
          boot_state = BOOT_STATE_EXIT;
     e14:	fe 01       	movw	r30, r28
     e16:	ee 5b       	subi	r30, 0xBE	; 190
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	10 82       	st	Z, r1
          uart_puts("Exit!\n\r");
     e1c:	8c e7       	ldi	r24, 0x7C	; 124
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 5d 01 	call	0x2ba	; 0x2ba <uart_puts>
          break;
        }
      }
    }
  }
  while (boot_state != BOOT_STATE_EXIT);
     e24:	fe 01       	movw	r30, r28
     e26:	ee 5b       	subi	r30, 0xBE	; 190
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	80 81       	ld	r24, Z
     e2c:	88 23       	and	r24, r24
     e2e:	09 f0       	breq	.+2      	; 0xe32 <__stack+0x5d3>
     e30:	49 cc       	rjmp	.-1902   	; 0x6c4 <main+0x1bc>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a8 ec       	ldi	r26, 0xC8	; 200
     e38:	b2 e4       	ldi	r27, 0x42	; 66
     e3a:	8b 87       	std	Y+11, r24	; 0x0b
     e3c:	9c 87       	std	Y+12, r25	; 0x0c
     e3e:	ad 87       	std	Y+13, r26	; 0x0d
     e40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e42:	6b 85       	ldd	r22, Y+11	; 0x0b
     e44:	7c 85       	ldd	r23, Y+12	; 0x0c
     e46:	8d 85       	ldd	r24, Y+13	; 0x0d
     e48:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	4a e7       	ldi	r20, 0x7A	; 122
     e50:	55 e4       	ldi	r21, 0x45	; 69
     e52:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	8f 83       	std	Y+7, r24	; 0x07
     e5c:	98 87       	std	Y+8, r25	; 0x08
     e5e:	a9 87       	std	Y+9, r26	; 0x09
     e60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__ltsf2>
     e76:	88 23       	and	r24, r24
     e78:	2c f4       	brge	.+10     	; 0xe84 <__stack+0x625>
		__ticks = 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9e 83       	std	Y+6, r25	; 0x06
     e80:	8d 83       	std	Y+5, r24	; 0x05
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <__stack+0x6a3>
	else if (__tmp > 65535)
     e84:	6f 81       	ldd	r22, Y+7	; 0x07
     e86:	78 85       	ldd	r23, Y+8	; 0x08
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	3f ef       	ldi	r19, 0xFF	; 255
     e90:	4f e7       	ldi	r20, 0x7F	; 127
     e92:	57 e4       	ldi	r21, 0x47	; 71
     e94:	0e 94 83 0a 	call	0x1506	; 0x1506 <__gtsf2>
     e98:	18 16       	cp	r1, r24
     e9a:	4c f5       	brge	.+82     	; 0xeee <__stack+0x68f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e2       	ldi	r20, 0x20	; 32
     eaa:	51 e4       	ldi	r21, 0x41	; 65
     eac:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	9e 83       	std	Y+6, r25	; 0x06
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	0f c0       	rjmp	.+30     	; 0xee4 <__stack+0x685>
     ec6:	80 e9       	ldi	r24, 0x90	; 144
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <__stack+0x673>
     ed6:	9c 83       	std	Y+4, r25	; 0x04
     ed8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	69 f7       	brne	.-38     	; 0xec6 <__stack+0x667>
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <__stack+0x6b7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eee:	6f 81       	ldd	r22, Y+7	; 0x07
     ef0:	78 85       	ldd	r23, Y+8	; 0x08
     ef2:	89 85       	ldd	r24, Y+9	; 0x09
     ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef6:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <__stack+0x6af>
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01

  _delay_ms(100);

  /* Interrupt Vektoren wieder gerade biegen */
  temp = MCUCR;
     f16:	e5 e5       	ldi	r30, 0x55	; 85
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	de 01       	movw	r26, r28
     f1c:	ad 5b       	subi	r26, 0xBD	; 189
     f1e:	bf 4f       	sbci	r27, 0xFF	; 255
     f20:	80 81       	ld	r24, Z
     f22:	8c 93       	st	X, r24
  MCUCR = temp | (1 << IVCE);
     f24:	a5 e5       	ldi	r26, 0x55	; 85
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	fe 01       	movw	r30, r28
     f2a:	ed 5b       	subi	r30, 0xBD	; 189
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	80 81       	ld	r24, Z
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	8c 93       	st	X, r24
  MCUCR = temp & ~(1 << IVSEL);
     f34:	a5 e5       	ldi	r26, 0x55	; 85
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	fe 01       	movw	r30, r28
     f3a:	ed 5b       	subi	r30, 0xBD	; 189
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 81       	ld	r24, Z
     f40:	8d 7f       	andi	r24, 0xFD	; 253
     f42:	8c 93       	st	X, r24

  /* Reset */
  start();
     f44:	e9 ad       	ldd	r30, Y+57	; 0x39
     f46:	fa ad       	ldd	r31, Y+58	; 0x3a
     f48:	09 95       	icall

  return 0;
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
}
     f4e:	c8 52       	subi	r28, 0x28	; 40
     f50:	df 4f       	sbci	r29, 0xFF	; 255
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <__fixunssfsi>:
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	7b 01       	movw	r14, r22
     f70:	8c 01       	movw	r16, r24
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	5f e4       	ldi	r21, 0x4F	; 79
     f7a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__gesf2>
     f7e:	88 23       	and	r24, r24
     f80:	8c f0       	brlt	.+34     	; 0xfa4 <__fixunssfsi+0x3e>
     f82:	c8 01       	movw	r24, r16
     f84:	b7 01       	movw	r22, r14
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	5f e4       	ldi	r21, 0x4F	; 79
     f8e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__subsf3>
     f92:	0e 94 13 0b 	call	0x1626	; 0x1626 <__fixsfsi>
     f96:	9b 01       	movw	r18, r22
     f98:	ac 01       	movw	r20, r24
     f9a:	20 50       	subi	r18, 0x00	; 0
     f9c:	30 40       	sbci	r19, 0x00	; 0
     f9e:	40 40       	sbci	r20, 0x00	; 0
     fa0:	50 48       	sbci	r21, 0x80	; 128
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <__fixunssfsi+0x4a>
     fa4:	c8 01       	movw	r24, r16
     fa6:	b7 01       	movw	r22, r14
     fa8:	0e 94 13 0b 	call	0x1626	; 0x1626 <__fixsfsi>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	b9 01       	movw	r22, r18
     fb2:	ca 01       	movw	r24, r20
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	08 95       	ret

00000fbe <_fpadd_parts>:
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e5 ee       	ldi	r30, 0xE5	; 229
     fc4:	f7 e0       	ldi	r31, 0x07	; 7
     fc6:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__prologue_saves__>
     fca:	dc 01       	movw	r26, r24
     fcc:	2b 01       	movw	r4, r22
     fce:	fa 01       	movw	r30, r20
     fd0:	9c 91       	ld	r25, X
     fd2:	92 30       	cpi	r25, 0x02	; 2
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <_fpadd_parts+0x1a>
     fd6:	39 c1       	rjmp	.+626    	; 0x124a <_fpadd_parts+0x28c>
     fd8:	eb 01       	movw	r28, r22
     fda:	88 81       	ld	r24, Y
     fdc:	82 30       	cpi	r24, 0x02	; 2
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <_fpadd_parts+0x24>
     fe0:	33 c1       	rjmp	.+614    	; 0x1248 <_fpadd_parts+0x28a>
     fe2:	94 30       	cpi	r25, 0x04	; 4
     fe4:	69 f4       	brne	.+26     	; 0x1000 <_fpadd_parts+0x42>
     fe6:	84 30       	cpi	r24, 0x04	; 4
     fe8:	09 f0       	breq	.+2      	; 0xfec <_fpadd_parts+0x2e>
     fea:	2f c1       	rjmp	.+606    	; 0x124a <_fpadd_parts+0x28c>
     fec:	11 96       	adiw	r26, 0x01	; 1
     fee:	9c 91       	ld	r25, X
     ff0:	11 97       	sbiw	r26, 0x01	; 1
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	98 17       	cp	r25, r24
     ff6:	09 f4       	brne	.+2      	; 0xffa <_fpadd_parts+0x3c>
     ff8:	28 c1       	rjmp	.+592    	; 0x124a <_fpadd_parts+0x28c>
     ffa:	a4 e8       	ldi	r26, 0x84	; 132
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	25 c1       	rjmp	.+586    	; 0x124a <_fpadd_parts+0x28c>
    1000:	84 30       	cpi	r24, 0x04	; 4
    1002:	09 f4       	brne	.+2      	; 0x1006 <_fpadd_parts+0x48>
    1004:	21 c1       	rjmp	.+578    	; 0x1248 <_fpadd_parts+0x28a>
    1006:	82 30       	cpi	r24, 0x02	; 2
    1008:	a9 f4       	brne	.+42     	; 0x1034 <_fpadd_parts+0x76>
    100a:	92 30       	cpi	r25, 0x02	; 2
    100c:	09 f0       	breq	.+2      	; 0x1010 <_fpadd_parts+0x52>
    100e:	1d c1       	rjmp	.+570    	; 0x124a <_fpadd_parts+0x28c>
    1010:	9a 01       	movw	r18, r20
    1012:	ad 01       	movw	r20, r26
    1014:	88 e0       	ldi	r24, 0x08	; 8
    1016:	ea 01       	movw	r28, r20
    1018:	09 90       	ld	r0, Y+
    101a:	ae 01       	movw	r20, r28
    101c:	e9 01       	movw	r28, r18
    101e:	09 92       	st	Y+, r0
    1020:	9e 01       	movw	r18, r28
    1022:	81 50       	subi	r24, 0x01	; 1
    1024:	c1 f7       	brne	.-16     	; 0x1016 <_fpadd_parts+0x58>
    1026:	e2 01       	movw	r28, r4
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	11 96       	adiw	r26, 0x01	; 1
    102c:	9c 91       	ld	r25, X
    102e:	89 23       	and	r24, r25
    1030:	81 83       	std	Z+1, r24	; 0x01
    1032:	08 c1       	rjmp	.+528    	; 0x1244 <_fpadd_parts+0x286>
    1034:	92 30       	cpi	r25, 0x02	; 2
    1036:	09 f4       	brne	.+2      	; 0x103a <_fpadd_parts+0x7c>
    1038:	07 c1       	rjmp	.+526    	; 0x1248 <_fpadd_parts+0x28a>
    103a:	12 96       	adiw	r26, 0x02	; 2
    103c:	2d 90       	ld	r2, X+
    103e:	3c 90       	ld	r3, X
    1040:	13 97       	sbiw	r26, 0x03	; 3
    1042:	eb 01       	movw	r28, r22
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	9b 81       	ldd	r25, Y+3	; 0x03
    1048:	14 96       	adiw	r26, 0x04	; 4
    104a:	ad 90       	ld	r10, X+
    104c:	bd 90       	ld	r11, X+
    104e:	cd 90       	ld	r12, X+
    1050:	dc 90       	ld	r13, X
    1052:	17 97       	sbiw	r26, 0x07	; 7
    1054:	ec 80       	ldd	r14, Y+4	; 0x04
    1056:	fd 80       	ldd	r15, Y+5	; 0x05
    1058:	0e 81       	ldd	r16, Y+6	; 0x06
    105a:	1f 81       	ldd	r17, Y+7	; 0x07
    105c:	91 01       	movw	r18, r2
    105e:	28 1b       	sub	r18, r24
    1060:	39 0b       	sbc	r19, r25
    1062:	b9 01       	movw	r22, r18
    1064:	37 ff       	sbrs	r19, 7
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <_fpadd_parts+0xb2>
    1068:	66 27       	eor	r22, r22
    106a:	77 27       	eor	r23, r23
    106c:	62 1b       	sub	r22, r18
    106e:	73 0b       	sbc	r23, r19
    1070:	60 32       	cpi	r22, 0x20	; 32
    1072:	71 05       	cpc	r23, r1
    1074:	0c f0       	brlt	.+2      	; 0x1078 <_fpadd_parts+0xba>
    1076:	61 c0       	rjmp	.+194    	; 0x113a <_fpadd_parts+0x17c>
    1078:	12 16       	cp	r1, r18
    107a:	13 06       	cpc	r1, r19
    107c:	6c f5       	brge	.+90     	; 0x10d8 <_fpadd_parts+0x11a>
    107e:	37 01       	movw	r6, r14
    1080:	48 01       	movw	r8, r16
    1082:	06 2e       	mov	r0, r22
    1084:	04 c0       	rjmp	.+8      	; 0x108e <_fpadd_parts+0xd0>
    1086:	96 94       	lsr	r9
    1088:	87 94       	ror	r8
    108a:	77 94       	ror	r7
    108c:	67 94       	ror	r6
    108e:	0a 94       	dec	r0
    1090:	d2 f7       	brpl	.-12     	; 0x1086 <_fpadd_parts+0xc8>
    1092:	21 e0       	ldi	r18, 0x01	; 1
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <_fpadd_parts+0xe6>
    109c:	22 0f       	add	r18, r18
    109e:	33 1f       	adc	r19, r19
    10a0:	44 1f       	adc	r20, r20
    10a2:	55 1f       	adc	r21, r21
    10a4:	6a 95       	dec	r22
    10a6:	d2 f7       	brpl	.-12     	; 0x109c <_fpadd_parts+0xde>
    10a8:	21 50       	subi	r18, 0x01	; 1
    10aa:	30 40       	sbci	r19, 0x00	; 0
    10ac:	40 40       	sbci	r20, 0x00	; 0
    10ae:	50 40       	sbci	r21, 0x00	; 0
    10b0:	2e 21       	and	r18, r14
    10b2:	3f 21       	and	r19, r15
    10b4:	40 23       	and	r20, r16
    10b6:	51 23       	and	r21, r17
    10b8:	21 15       	cp	r18, r1
    10ba:	31 05       	cpc	r19, r1
    10bc:	41 05       	cpc	r20, r1
    10be:	51 05       	cpc	r21, r1
    10c0:	21 f0       	breq	.+8      	; 0x10ca <_fpadd_parts+0x10c>
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	79 01       	movw	r14, r18
    10cc:	8a 01       	movw	r16, r20
    10ce:	e6 28       	or	r14, r6
    10d0:	f7 28       	or	r15, r7
    10d2:	08 29       	or	r16, r8
    10d4:	19 29       	or	r17, r9
    10d6:	3c c0       	rjmp	.+120    	; 0x1150 <_fpadd_parts+0x192>
    10d8:	23 2b       	or	r18, r19
    10da:	d1 f1       	breq	.+116    	; 0x1150 <_fpadd_parts+0x192>
    10dc:	26 0e       	add	r2, r22
    10de:	37 1e       	adc	r3, r23
    10e0:	35 01       	movw	r6, r10
    10e2:	46 01       	movw	r8, r12
    10e4:	06 2e       	mov	r0, r22
    10e6:	04 c0       	rjmp	.+8      	; 0x10f0 <_fpadd_parts+0x132>
    10e8:	96 94       	lsr	r9
    10ea:	87 94       	ror	r8
    10ec:	77 94       	ror	r7
    10ee:	67 94       	ror	r6
    10f0:	0a 94       	dec	r0
    10f2:	d2 f7       	brpl	.-12     	; 0x10e8 <_fpadd_parts+0x12a>
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <_fpadd_parts+0x148>
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	44 1f       	adc	r20, r20
    1104:	55 1f       	adc	r21, r21
    1106:	6a 95       	dec	r22
    1108:	d2 f7       	brpl	.-12     	; 0x10fe <_fpadd_parts+0x140>
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	30 40       	sbci	r19, 0x00	; 0
    110e:	40 40       	sbci	r20, 0x00	; 0
    1110:	50 40       	sbci	r21, 0x00	; 0
    1112:	2a 21       	and	r18, r10
    1114:	3b 21       	and	r19, r11
    1116:	4c 21       	and	r20, r12
    1118:	5d 21       	and	r21, r13
    111a:	21 15       	cp	r18, r1
    111c:	31 05       	cpc	r19, r1
    111e:	41 05       	cpc	r20, r1
    1120:	51 05       	cpc	r21, r1
    1122:	21 f0       	breq	.+8      	; 0x112c <_fpadd_parts+0x16e>
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	59 01       	movw	r10, r18
    112e:	6a 01       	movw	r12, r20
    1130:	a6 28       	or	r10, r6
    1132:	b7 28       	or	r11, r7
    1134:	c8 28       	or	r12, r8
    1136:	d9 28       	or	r13, r9
    1138:	0b c0       	rjmp	.+22     	; 0x1150 <_fpadd_parts+0x192>
    113a:	82 15       	cp	r24, r2
    113c:	93 05       	cpc	r25, r3
    113e:	2c f0       	brlt	.+10     	; 0x114a <_fpadd_parts+0x18c>
    1140:	1c 01       	movw	r2, r24
    1142:	aa 24       	eor	r10, r10
    1144:	bb 24       	eor	r11, r11
    1146:	65 01       	movw	r12, r10
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <_fpadd_parts+0x192>
    114a:	ee 24       	eor	r14, r14
    114c:	ff 24       	eor	r15, r15
    114e:	87 01       	movw	r16, r14
    1150:	11 96       	adiw	r26, 0x01	; 1
    1152:	9c 91       	ld	r25, X
    1154:	d2 01       	movw	r26, r4
    1156:	11 96       	adiw	r26, 0x01	; 1
    1158:	8c 91       	ld	r24, X
    115a:	98 17       	cp	r25, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <_fpadd_parts+0x1a2>
    115e:	45 c0       	rjmp	.+138    	; 0x11ea <_fpadd_parts+0x22c>
    1160:	99 23       	and	r25, r25
    1162:	39 f0       	breq	.+14     	; 0x1172 <_fpadd_parts+0x1b4>
    1164:	a8 01       	movw	r20, r16
    1166:	97 01       	movw	r18, r14
    1168:	2a 19       	sub	r18, r10
    116a:	3b 09       	sbc	r19, r11
    116c:	4c 09       	sbc	r20, r12
    116e:	5d 09       	sbc	r21, r13
    1170:	06 c0       	rjmp	.+12     	; 0x117e <_fpadd_parts+0x1c0>
    1172:	a6 01       	movw	r20, r12
    1174:	95 01       	movw	r18, r10
    1176:	2e 19       	sub	r18, r14
    1178:	3f 09       	sbc	r19, r15
    117a:	40 0b       	sbc	r20, r16
    117c:	51 0b       	sbc	r21, r17
    117e:	57 fd       	sbrc	r21, 7
    1180:	08 c0       	rjmp	.+16     	; 0x1192 <_fpadd_parts+0x1d4>
    1182:	11 82       	std	Z+1, r1	; 0x01
    1184:	33 82       	std	Z+3, r3	; 0x03
    1186:	22 82       	std	Z+2, r2	; 0x02
    1188:	24 83       	std	Z+4, r18	; 0x04
    118a:	35 83       	std	Z+5, r19	; 0x05
    118c:	46 83       	std	Z+6, r20	; 0x06
    118e:	57 83       	std	Z+7, r21	; 0x07
    1190:	1d c0       	rjmp	.+58     	; 0x11cc <_fpadd_parts+0x20e>
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	81 83       	std	Z+1, r24	; 0x01
    1196:	33 82       	std	Z+3, r3	; 0x03
    1198:	22 82       	std	Z+2, r2	; 0x02
    119a:	88 27       	eor	r24, r24
    119c:	99 27       	eor	r25, r25
    119e:	dc 01       	movw	r26, r24
    11a0:	82 1b       	sub	r24, r18
    11a2:	93 0b       	sbc	r25, r19
    11a4:	a4 0b       	sbc	r26, r20
    11a6:	b5 0b       	sbc	r27, r21
    11a8:	84 83       	std	Z+4, r24	; 0x04
    11aa:	95 83       	std	Z+5, r25	; 0x05
    11ac:	a6 83       	std	Z+6, r26	; 0x06
    11ae:	b7 83       	std	Z+7, r27	; 0x07
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <_fpadd_parts+0x20e>
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	44 1f       	adc	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	24 83       	std	Z+4, r18	; 0x04
    11bc:	35 83       	std	Z+5, r19	; 0x05
    11be:	46 83       	std	Z+6, r20	; 0x06
    11c0:	57 83       	std	Z+7, r21	; 0x07
    11c2:	82 81       	ldd	r24, Z+2	; 0x02
    11c4:	93 81       	ldd	r25, Z+3	; 0x03
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	93 83       	std	Z+3, r25	; 0x03
    11ca:	82 83       	std	Z+2, r24	; 0x02
    11cc:	24 81       	ldd	r18, Z+4	; 0x04
    11ce:	35 81       	ldd	r19, Z+5	; 0x05
    11d0:	46 81       	ldd	r20, Z+6	; 0x06
    11d2:	57 81       	ldd	r21, Z+7	; 0x07
    11d4:	da 01       	movw	r26, r20
    11d6:	c9 01       	movw	r24, r18
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	a1 09       	sbc	r26, r1
    11dc:	b1 09       	sbc	r27, r1
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	af 4f       	sbci	r26, 0xFF	; 255
    11e4:	bf 43       	sbci	r27, 0x3F	; 63
    11e6:	28 f3       	brcs	.-54     	; 0x11b2 <_fpadd_parts+0x1f4>
    11e8:	0b c0       	rjmp	.+22     	; 0x1200 <_fpadd_parts+0x242>
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	33 82       	std	Z+3, r3	; 0x03
    11ee:	22 82       	std	Z+2, r2	; 0x02
    11f0:	ea 0c       	add	r14, r10
    11f2:	fb 1c       	adc	r15, r11
    11f4:	0c 1d       	adc	r16, r12
    11f6:	1d 1d       	adc	r17, r13
    11f8:	e4 82       	std	Z+4, r14	; 0x04
    11fa:	f5 82       	std	Z+5, r15	; 0x05
    11fc:	06 83       	std	Z+6, r16	; 0x06
    11fe:	17 83       	std	Z+7, r17	; 0x07
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	80 83       	st	Z, r24
    1204:	24 81       	ldd	r18, Z+4	; 0x04
    1206:	35 81       	ldd	r19, Z+5	; 0x05
    1208:	46 81       	ldd	r20, Z+6	; 0x06
    120a:	57 81       	ldd	r21, Z+7	; 0x07
    120c:	57 ff       	sbrs	r21, 7
    120e:	1a c0       	rjmp	.+52     	; 0x1244 <_fpadd_parts+0x286>
    1210:	c9 01       	movw	r24, r18
    1212:	aa 27       	eor	r26, r26
    1214:	97 fd       	sbrc	r25, 7
    1216:	a0 95       	com	r26
    1218:	ba 2f       	mov	r27, r26
    121a:	81 70       	andi	r24, 0x01	; 1
    121c:	90 70       	andi	r25, 0x00	; 0
    121e:	a0 70       	andi	r26, 0x00	; 0
    1220:	b0 70       	andi	r27, 0x00	; 0
    1222:	56 95       	lsr	r21
    1224:	47 95       	ror	r20
    1226:	37 95       	ror	r19
    1228:	27 95       	ror	r18
    122a:	82 2b       	or	r24, r18
    122c:	93 2b       	or	r25, r19
    122e:	a4 2b       	or	r26, r20
    1230:	b5 2b       	or	r27, r21
    1232:	84 83       	std	Z+4, r24	; 0x04
    1234:	95 83       	std	Z+5, r25	; 0x05
    1236:	a6 83       	std	Z+6, r26	; 0x06
    1238:	b7 83       	std	Z+7, r27	; 0x07
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	93 83       	std	Z+3, r25	; 0x03
    1242:	82 83       	std	Z+2, r24	; 0x02
    1244:	df 01       	movw	r26, r30
    1246:	01 c0       	rjmp	.+2      	; 0x124a <_fpadd_parts+0x28c>
    1248:	d2 01       	movw	r26, r4
    124a:	cd 01       	movw	r24, r26
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	e2 e1       	ldi	r30, 0x12	; 18
    1252:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__epilogue_restores__>

00001256 <__subsf3>:
    1256:	a0 e2       	ldi	r26, 0x20	; 32
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e1 e3       	ldi	r30, 0x31	; 49
    125c:	f9 e0       	ldi	r31, 0x09	; 9
    125e:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__prologue_saves__+0x18>
    1262:	69 83       	std	Y+1, r22	; 0x01
    1264:	7a 83       	std	Y+2, r23	; 0x02
    1266:	8b 83       	std	Y+3, r24	; 0x03
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	2d 83       	std	Y+5, r18	; 0x05
    126c:	3e 83       	std	Y+6, r19	; 0x06
    126e:	4f 83       	std	Y+7, r20	; 0x07
    1270:	58 87       	std	Y+8, r21	; 0x08
    1272:	e9 e0       	ldi	r30, 0x09	; 9
    1274:	ee 2e       	mov	r14, r30
    1276:	f1 2c       	mov	r15, r1
    1278:	ec 0e       	add	r14, r28
    127a:	fd 1e       	adc	r15, r29
    127c:	ce 01       	movw	r24, r28
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	b7 01       	movw	r22, r14
    1282:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    1286:	8e 01       	movw	r16, r28
    1288:	0f 5e       	subi	r16, 0xEF	; 239
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	ce 01       	movw	r24, r28
    128e:	05 96       	adiw	r24, 0x05	; 5
    1290:	b8 01       	movw	r22, r16
    1292:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    1296:	8a 89       	ldd	r24, Y+18	; 0x12
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	89 27       	eor	r24, r25
    129c:	8a 8b       	std	Y+18, r24	; 0x12
    129e:	c7 01       	movw	r24, r14
    12a0:	b8 01       	movw	r22, r16
    12a2:	ae 01       	movw	r20, r28
    12a4:	47 5e       	subi	r20, 0xE7	; 231
    12a6:	5f 4f       	sbci	r21, 0xFF	; 255
    12a8:	0e 94 df 07 	call	0xfbe	; 0xfbe <_fpadd_parts>
    12ac:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__pack_f>
    12b0:	a0 96       	adiw	r28, 0x20	; 32
    12b2:	e6 e0       	ldi	r30, 0x06	; 6
    12b4:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__epilogue_restores__+0x18>

000012b8 <__addsf3>:
    12b8:	a0 e2       	ldi	r26, 0x20	; 32
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e2 e6       	ldi	r30, 0x62	; 98
    12be:	f9 e0       	ldi	r31, 0x09	; 9
    12c0:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__prologue_saves__+0x18>
    12c4:	69 83       	std	Y+1, r22	; 0x01
    12c6:	7a 83       	std	Y+2, r23	; 0x02
    12c8:	8b 83       	std	Y+3, r24	; 0x03
    12ca:	9c 83       	std	Y+4, r25	; 0x04
    12cc:	2d 83       	std	Y+5, r18	; 0x05
    12ce:	3e 83       	std	Y+6, r19	; 0x06
    12d0:	4f 83       	std	Y+7, r20	; 0x07
    12d2:	58 87       	std	Y+8, r21	; 0x08
    12d4:	f9 e0       	ldi	r31, 0x09	; 9
    12d6:	ef 2e       	mov	r14, r31
    12d8:	f1 2c       	mov	r15, r1
    12da:	ec 0e       	add	r14, r28
    12dc:	fd 1e       	adc	r15, r29
    12de:	ce 01       	movw	r24, r28
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	b7 01       	movw	r22, r14
    12e4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    12e8:	8e 01       	movw	r16, r28
    12ea:	0f 5e       	subi	r16, 0xEF	; 239
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	ce 01       	movw	r24, r28
    12f0:	05 96       	adiw	r24, 0x05	; 5
    12f2:	b8 01       	movw	r22, r16
    12f4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    12f8:	c7 01       	movw	r24, r14
    12fa:	b8 01       	movw	r22, r16
    12fc:	ae 01       	movw	r20, r28
    12fe:	47 5e       	subi	r20, 0xE7	; 231
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	0e 94 df 07 	call	0xfbe	; 0xfbe <_fpadd_parts>
    1306:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__pack_f>
    130a:	a0 96       	adiw	r28, 0x20	; 32
    130c:	e6 e0       	ldi	r30, 0x06	; 6
    130e:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__epilogue_restores__+0x18>

00001312 <__mulsf3>:
    1312:	a0 e2       	ldi	r26, 0x20	; 32
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ef e8       	ldi	r30, 0x8F	; 143
    1318:	f9 e0       	ldi	r31, 0x09	; 9
    131a:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__prologue_saves__>
    131e:	69 83       	std	Y+1, r22	; 0x01
    1320:	7a 83       	std	Y+2, r23	; 0x02
    1322:	8b 83       	std	Y+3, r24	; 0x03
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	2d 83       	std	Y+5, r18	; 0x05
    1328:	3e 83       	std	Y+6, r19	; 0x06
    132a:	4f 83       	std	Y+7, r20	; 0x07
    132c:	58 87       	std	Y+8, r21	; 0x08
    132e:	ce 01       	movw	r24, r28
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	be 01       	movw	r22, r28
    1334:	67 5f       	subi	r22, 0xF7	; 247
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    133c:	ce 01       	movw	r24, r28
    133e:	05 96       	adiw	r24, 0x05	; 5
    1340:	be 01       	movw	r22, r28
    1342:	6f 5e       	subi	r22, 0xEF	; 239
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    134a:	99 85       	ldd	r25, Y+9	; 0x09
    134c:	92 30       	cpi	r25, 0x02	; 2
    134e:	88 f0       	brcs	.+34     	; 0x1372 <__mulsf3+0x60>
    1350:	89 89       	ldd	r24, Y+17	; 0x11
    1352:	82 30       	cpi	r24, 0x02	; 2
    1354:	c8 f0       	brcs	.+50     	; 0x1388 <__mulsf3+0x76>
    1356:	94 30       	cpi	r25, 0x04	; 4
    1358:	19 f4       	brne	.+6      	; 0x1360 <__mulsf3+0x4e>
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	51 f4       	brne	.+20     	; 0x1372 <__mulsf3+0x60>
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <__mulsf3+0x56>
    1360:	84 30       	cpi	r24, 0x04	; 4
    1362:	29 f4       	brne	.+10     	; 0x136e <__mulsf3+0x5c>
    1364:	92 30       	cpi	r25, 0x02	; 2
    1366:	81 f4       	brne	.+32     	; 0x1388 <__mulsf3+0x76>
    1368:	84 e8       	ldi	r24, 0x84	; 132
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	c6 c0       	rjmp	.+396    	; 0x14fa <__mulsf3+0x1e8>
    136e:	92 30       	cpi	r25, 0x02	; 2
    1370:	49 f4       	brne	.+18     	; 0x1384 <__mulsf3+0x72>
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	8a 89       	ldd	r24, Y+18	; 0x12
    1378:	98 13       	cpse	r25, r24
    137a:	21 e0       	ldi	r18, 0x01	; 1
    137c:	2a 87       	std	Y+10, r18	; 0x0a
    137e:	ce 01       	movw	r24, r28
    1380:	09 96       	adiw	r24, 0x09	; 9
    1382:	bb c0       	rjmp	.+374    	; 0x14fa <__mulsf3+0x1e8>
    1384:	82 30       	cpi	r24, 0x02	; 2
    1386:	49 f4       	brne	.+18     	; 0x139a <__mulsf3+0x88>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	8a 89       	ldd	r24, Y+18	; 0x12
    138e:	98 13       	cpse	r25, r24
    1390:	21 e0       	ldi	r18, 0x01	; 1
    1392:	2a 8b       	std	Y+18, r18	; 0x12
    1394:	ce 01       	movw	r24, r28
    1396:	41 96       	adiw	r24, 0x11	; 17
    1398:	b0 c0       	rjmp	.+352    	; 0x14fa <__mulsf3+0x1e8>
    139a:	2d 84       	ldd	r2, Y+13	; 0x0d
    139c:	3e 84       	ldd	r3, Y+14	; 0x0e
    139e:	4f 84       	ldd	r4, Y+15	; 0x0f
    13a0:	58 88       	ldd	r5, Y+16	; 0x10
    13a2:	6d 88       	ldd	r6, Y+21	; 0x15
    13a4:	7e 88       	ldd	r7, Y+22	; 0x16
    13a6:	8f 88       	ldd	r8, Y+23	; 0x17
    13a8:	98 8c       	ldd	r9, Y+24	; 0x18
    13aa:	ee 24       	eor	r14, r14
    13ac:	ff 24       	eor	r15, r15
    13ae:	87 01       	movw	r16, r14
    13b0:	aa 24       	eor	r10, r10
    13b2:	bb 24       	eor	r11, r11
    13b4:	65 01       	movw	r12, r10
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	e0 e0       	ldi	r30, 0x00	; 0
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	c1 01       	movw	r24, r2
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	90 70       	andi	r25, 0x00	; 0
    13c8:	89 2b       	or	r24, r25
    13ca:	e9 f0       	breq	.+58     	; 0x1406 <__mulsf3+0xf4>
    13cc:	e6 0c       	add	r14, r6
    13ce:	f7 1c       	adc	r15, r7
    13d0:	08 1d       	adc	r16, r8
    13d2:	19 1d       	adc	r17, r9
    13d4:	9a 01       	movw	r18, r20
    13d6:	ab 01       	movw	r20, r22
    13d8:	2a 0d       	add	r18, r10
    13da:	3b 1d       	adc	r19, r11
    13dc:	4c 1d       	adc	r20, r12
    13de:	5d 1d       	adc	r21, r13
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a0 e0       	ldi	r26, 0x00	; 0
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e6 14       	cp	r14, r6
    13ea:	f7 04       	cpc	r15, r7
    13ec:	08 05       	cpc	r16, r8
    13ee:	19 05       	cpc	r17, r9
    13f0:	20 f4       	brcc	.+8      	; 0x13fa <__mulsf3+0xe8>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a0 e0       	ldi	r26, 0x00	; 0
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ba 01       	movw	r22, r20
    13fc:	a9 01       	movw	r20, r18
    13fe:	48 0f       	add	r20, r24
    1400:	59 1f       	adc	r21, r25
    1402:	6a 1f       	adc	r22, r26
    1404:	7b 1f       	adc	r23, r27
    1406:	aa 0c       	add	r10, r10
    1408:	bb 1c       	adc	r11, r11
    140a:	cc 1c       	adc	r12, r12
    140c:	dd 1c       	adc	r13, r13
    140e:	97 fe       	sbrs	r9, 7
    1410:	08 c0       	rjmp	.+16     	; 0x1422 <__mulsf3+0x110>
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e0       	ldi	r26, 0x00	; 0
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	a8 2a       	or	r10, r24
    141c:	b9 2a       	or	r11, r25
    141e:	ca 2a       	or	r12, r26
    1420:	db 2a       	or	r13, r27
    1422:	31 96       	adiw	r30, 0x01	; 1
    1424:	e0 32       	cpi	r30, 0x20	; 32
    1426:	f1 05       	cpc	r31, r1
    1428:	49 f0       	breq	.+18     	; 0x143c <__mulsf3+0x12a>
    142a:	66 0c       	add	r6, r6
    142c:	77 1c       	adc	r7, r7
    142e:	88 1c       	adc	r8, r8
    1430:	99 1c       	adc	r9, r9
    1432:	56 94       	lsr	r5
    1434:	47 94       	ror	r4
    1436:	37 94       	ror	r3
    1438:	27 94       	ror	r2
    143a:	c3 cf       	rjmp	.-122    	; 0x13c2 <__mulsf3+0xb0>
    143c:	fa 85       	ldd	r31, Y+10	; 0x0a
    143e:	ea 89       	ldd	r30, Y+18	; 0x12
    1440:	2b 89       	ldd	r18, Y+19	; 0x13
    1442:	3c 89       	ldd	r19, Y+20	; 0x14
    1444:	8b 85       	ldd	r24, Y+11	; 0x0b
    1446:	9c 85       	ldd	r25, Y+12	; 0x0c
    1448:	28 0f       	add	r18, r24
    144a:	39 1f       	adc	r19, r25
    144c:	2e 5f       	subi	r18, 0xFE	; 254
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	17 c0       	rjmp	.+46     	; 0x1480 <__mulsf3+0x16e>
    1452:	ca 01       	movw	r24, r20
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	90 70       	andi	r25, 0x00	; 0
    1458:	89 2b       	or	r24, r25
    145a:	61 f0       	breq	.+24     	; 0x1474 <__mulsf3+0x162>
    145c:	16 95       	lsr	r17
    145e:	07 95       	ror	r16
    1460:	f7 94       	ror	r15
    1462:	e7 94       	ror	r14
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a0 e0       	ldi	r26, 0x00	; 0
    146a:	b0 e8       	ldi	r27, 0x80	; 128
    146c:	e8 2a       	or	r14, r24
    146e:	f9 2a       	or	r15, r25
    1470:	0a 2b       	or	r16, r26
    1472:	1b 2b       	or	r17, r27
    1474:	76 95       	lsr	r23
    1476:	67 95       	ror	r22
    1478:	57 95       	ror	r21
    147a:	47 95       	ror	r20
    147c:	2f 5f       	subi	r18, 0xFF	; 255
    147e:	3f 4f       	sbci	r19, 0xFF	; 255
    1480:	77 fd       	sbrc	r23, 7
    1482:	e7 cf       	rjmp	.-50     	; 0x1452 <__mulsf3+0x140>
    1484:	0c c0       	rjmp	.+24     	; 0x149e <__mulsf3+0x18c>
    1486:	44 0f       	add	r20, r20
    1488:	55 1f       	adc	r21, r21
    148a:	66 1f       	adc	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	17 fd       	sbrc	r17, 7
    1490:	41 60       	ori	r20, 0x01	; 1
    1492:	ee 0c       	add	r14, r14
    1494:	ff 1c       	adc	r15, r15
    1496:	00 1f       	adc	r16, r16
    1498:	11 1f       	adc	r17, r17
    149a:	21 50       	subi	r18, 0x01	; 1
    149c:	30 40       	sbci	r19, 0x00	; 0
    149e:	40 30       	cpi	r20, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	59 07       	cpc	r21, r25
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	69 07       	cpc	r22, r25
    14a8:	90 e4       	ldi	r25, 0x40	; 64
    14aa:	79 07       	cpc	r23, r25
    14ac:	60 f3       	brcs	.-40     	; 0x1486 <__mulsf3+0x174>
    14ae:	2b 8f       	std	Y+27, r18	; 0x1b
    14b0:	3c 8f       	std	Y+28, r19	; 0x1c
    14b2:	db 01       	movw	r26, r22
    14b4:	ca 01       	movw	r24, r20
    14b6:	8f 77       	andi	r24, 0x7F	; 127
    14b8:	90 70       	andi	r25, 0x00	; 0
    14ba:	a0 70       	andi	r26, 0x00	; 0
    14bc:	b0 70       	andi	r27, 0x00	; 0
    14be:	80 34       	cpi	r24, 0x40	; 64
    14c0:	91 05       	cpc	r25, r1
    14c2:	a1 05       	cpc	r26, r1
    14c4:	b1 05       	cpc	r27, r1
    14c6:	61 f4       	brne	.+24     	; 0x14e0 <__mulsf3+0x1ce>
    14c8:	47 fd       	sbrc	r20, 7
    14ca:	0a c0       	rjmp	.+20     	; 0x14e0 <__mulsf3+0x1ce>
    14cc:	e1 14       	cp	r14, r1
    14ce:	f1 04       	cpc	r15, r1
    14d0:	01 05       	cpc	r16, r1
    14d2:	11 05       	cpc	r17, r1
    14d4:	29 f0       	breq	.+10     	; 0x14e0 <__mulsf3+0x1ce>
    14d6:	40 5c       	subi	r20, 0xC0	; 192
    14d8:	5f 4f       	sbci	r21, 0xFF	; 255
    14da:	6f 4f       	sbci	r22, 0xFF	; 255
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	40 78       	andi	r20, 0x80	; 128
    14e0:	1a 8e       	std	Y+26, r1	; 0x1a
    14e2:	fe 17       	cp	r31, r30
    14e4:	11 f0       	breq	.+4      	; 0x14ea <__mulsf3+0x1d8>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	8a 8f       	std	Y+26, r24	; 0x1a
    14ea:	4d 8f       	std	Y+29, r20	; 0x1d
    14ec:	5e 8f       	std	Y+30, r21	; 0x1e
    14ee:	6f 8f       	std	Y+31, r22	; 0x1f
    14f0:	78 a3       	std	Y+32, r23	; 0x20
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	89 8f       	std	Y+25, r24	; 0x19
    14f6:	ce 01       	movw	r24, r28
    14f8:	49 96       	adiw	r24, 0x19	; 25
    14fa:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__pack_f>
    14fe:	a0 96       	adiw	r28, 0x20	; 32
    1500:	e2 e1       	ldi	r30, 0x12	; 18
    1502:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__epilogue_restores__>

00001506 <__gtsf2>:
    1506:	a8 e1       	ldi	r26, 0x18	; 24
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e9 e8       	ldi	r30, 0x89	; 137
    150c:	fa e0       	ldi	r31, 0x0A	; 10
    150e:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__prologue_saves__+0x18>
    1512:	69 83       	std	Y+1, r22	; 0x01
    1514:	7a 83       	std	Y+2, r23	; 0x02
    1516:	8b 83       	std	Y+3, r24	; 0x03
    1518:	9c 83       	std	Y+4, r25	; 0x04
    151a:	2d 83       	std	Y+5, r18	; 0x05
    151c:	3e 83       	std	Y+6, r19	; 0x06
    151e:	4f 83       	std	Y+7, r20	; 0x07
    1520:	58 87       	std	Y+8, r21	; 0x08
    1522:	89 e0       	ldi	r24, 0x09	; 9
    1524:	e8 2e       	mov	r14, r24
    1526:	f1 2c       	mov	r15, r1
    1528:	ec 0e       	add	r14, r28
    152a:	fd 1e       	adc	r15, r29
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	b7 01       	movw	r22, r14
    1532:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    1536:	8e 01       	movw	r16, r28
    1538:	0f 5e       	subi	r16, 0xEF	; 239
    153a:	1f 4f       	sbci	r17, 0xFF	; 255
    153c:	ce 01       	movw	r24, r28
    153e:	05 96       	adiw	r24, 0x05	; 5
    1540:	b8 01       	movw	r22, r16
    1542:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	40 f0       	brcs	.+16     	; 0x155c <__gtsf2+0x56>
    154c:	89 89       	ldd	r24, Y+17	; 0x11
    154e:	82 30       	cpi	r24, 0x02	; 2
    1550:	28 f0       	brcs	.+10     	; 0x155c <__gtsf2+0x56>
    1552:	c7 01       	movw	r24, r14
    1554:	b8 01       	movw	r22, r16
    1556:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fpcmp_parts_f>
    155a:	01 c0       	rjmp	.+2      	; 0x155e <__gtsf2+0x58>
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	68 96       	adiw	r28, 0x18	; 24
    1560:	e6 e0       	ldi	r30, 0x06	; 6
    1562:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__epilogue_restores__+0x18>

00001566 <__gesf2>:
    1566:	a8 e1       	ldi	r26, 0x18	; 24
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e9 eb       	ldi	r30, 0xB9	; 185
    156c:	fa e0       	ldi	r31, 0x0A	; 10
    156e:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__prologue_saves__+0x18>
    1572:	69 83       	std	Y+1, r22	; 0x01
    1574:	7a 83       	std	Y+2, r23	; 0x02
    1576:	8b 83       	std	Y+3, r24	; 0x03
    1578:	9c 83       	std	Y+4, r25	; 0x04
    157a:	2d 83       	std	Y+5, r18	; 0x05
    157c:	3e 83       	std	Y+6, r19	; 0x06
    157e:	4f 83       	std	Y+7, r20	; 0x07
    1580:	58 87       	std	Y+8, r21	; 0x08
    1582:	89 e0       	ldi	r24, 0x09	; 9
    1584:	e8 2e       	mov	r14, r24
    1586:	f1 2c       	mov	r15, r1
    1588:	ec 0e       	add	r14, r28
    158a:	fd 1e       	adc	r15, r29
    158c:	ce 01       	movw	r24, r28
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	b7 01       	movw	r22, r14
    1592:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    1596:	8e 01       	movw	r16, r28
    1598:	0f 5e       	subi	r16, 0xEF	; 239
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	ce 01       	movw	r24, r28
    159e:	05 96       	adiw	r24, 0x05	; 5
    15a0:	b8 01       	movw	r22, r16
    15a2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	82 30       	cpi	r24, 0x02	; 2
    15aa:	40 f0       	brcs	.+16     	; 0x15bc <__gesf2+0x56>
    15ac:	89 89       	ldd	r24, Y+17	; 0x11
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	28 f0       	brcs	.+10     	; 0x15bc <__gesf2+0x56>
    15b2:	c7 01       	movw	r24, r14
    15b4:	b8 01       	movw	r22, r16
    15b6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fpcmp_parts_f>
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <__gesf2+0x58>
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	68 96       	adiw	r28, 0x18	; 24
    15c0:	e6 e0       	ldi	r30, 0x06	; 6
    15c2:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__epilogue_restores__+0x18>

000015c6 <__ltsf2>:
    15c6:	a8 e1       	ldi	r26, 0x18	; 24
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e9 ee       	ldi	r30, 0xE9	; 233
    15cc:	fa e0       	ldi	r31, 0x0A	; 10
    15ce:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__prologue_saves__+0x18>
    15d2:	69 83       	std	Y+1, r22	; 0x01
    15d4:	7a 83       	std	Y+2, r23	; 0x02
    15d6:	8b 83       	std	Y+3, r24	; 0x03
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	2d 83       	std	Y+5, r18	; 0x05
    15dc:	3e 83       	std	Y+6, r19	; 0x06
    15de:	4f 83       	std	Y+7, r20	; 0x07
    15e0:	58 87       	std	Y+8, r21	; 0x08
    15e2:	89 e0       	ldi	r24, 0x09	; 9
    15e4:	e8 2e       	mov	r14, r24
    15e6:	f1 2c       	mov	r15, r1
    15e8:	ec 0e       	add	r14, r28
    15ea:	fd 1e       	adc	r15, r29
    15ec:	ce 01       	movw	r24, r28
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	b7 01       	movw	r22, r14
    15f2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    15f6:	8e 01       	movw	r16, r28
    15f8:	0f 5e       	subi	r16, 0xEF	; 239
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	ce 01       	movw	r24, r28
    15fe:	05 96       	adiw	r24, 0x05	; 5
    1600:	b8 01       	movw	r22, r16
    1602:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    1606:	89 85       	ldd	r24, Y+9	; 0x09
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	40 f0       	brcs	.+16     	; 0x161c <__ltsf2+0x56>
    160c:	89 89       	ldd	r24, Y+17	; 0x11
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	28 f0       	brcs	.+10     	; 0x161c <__ltsf2+0x56>
    1612:	c7 01       	movw	r24, r14
    1614:	b8 01       	movw	r22, r16
    1616:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fpcmp_parts_f>
    161a:	01 c0       	rjmp	.+2      	; 0x161e <__ltsf2+0x58>
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	68 96       	adiw	r28, 0x18	; 24
    1620:	e6 e0       	ldi	r30, 0x06	; 6
    1622:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__epilogue_restores__+0x18>

00001626 <__fixsfsi>:
    1626:	ac e0       	ldi	r26, 0x0C	; 12
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e9 e1       	ldi	r30, 0x19	; 25
    162c:	fb e0       	ldi	r31, 0x0B	; 11
    162e:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <__prologue_saves__+0x20>
    1632:	69 83       	std	Y+1, r22	; 0x01
    1634:	7a 83       	std	Y+2, r23	; 0x02
    1636:	8b 83       	std	Y+3, r24	; 0x03
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	ce 01       	movw	r24, r28
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	be 01       	movw	r22, r28
    1640:	6b 5f       	subi	r22, 0xFB	; 251
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__unpack_f>
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	82 30       	cpi	r24, 0x02	; 2
    164c:	61 f1       	breq	.+88     	; 0x16a6 <__fixsfsi+0x80>
    164e:	82 30       	cpi	r24, 0x02	; 2
    1650:	50 f1       	brcs	.+84     	; 0x16a6 <__fixsfsi+0x80>
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	21 f4       	brne	.+8      	; 0x165e <__fixsfsi+0x38>
    1656:	8e 81       	ldd	r24, Y+6	; 0x06
    1658:	88 23       	and	r24, r24
    165a:	51 f1       	breq	.+84     	; 0x16b0 <__fixsfsi+0x8a>
    165c:	2e c0       	rjmp	.+92     	; 0x16ba <__fixsfsi+0x94>
    165e:	2f 81       	ldd	r18, Y+7	; 0x07
    1660:	38 85       	ldd	r19, Y+8	; 0x08
    1662:	37 fd       	sbrc	r19, 7
    1664:	20 c0       	rjmp	.+64     	; 0x16a6 <__fixsfsi+0x80>
    1666:	6e 81       	ldd	r22, Y+6	; 0x06
    1668:	2f 31       	cpi	r18, 0x1F	; 31
    166a:	31 05       	cpc	r19, r1
    166c:	1c f0       	brlt	.+6      	; 0x1674 <__fixsfsi+0x4e>
    166e:	66 23       	and	r22, r22
    1670:	f9 f0       	breq	.+62     	; 0x16b0 <__fixsfsi+0x8a>
    1672:	23 c0       	rjmp	.+70     	; 0x16ba <__fixsfsi+0x94>
    1674:	8e e1       	ldi	r24, 0x1E	; 30
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	82 1b       	sub	r24, r18
    167a:	93 0b       	sbc	r25, r19
    167c:	29 85       	ldd	r18, Y+9	; 0x09
    167e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1680:	4b 85       	ldd	r20, Y+11	; 0x0b
    1682:	5c 85       	ldd	r21, Y+12	; 0x0c
    1684:	04 c0       	rjmp	.+8      	; 0x168e <__fixsfsi+0x68>
    1686:	56 95       	lsr	r21
    1688:	47 95       	ror	r20
    168a:	37 95       	ror	r19
    168c:	27 95       	ror	r18
    168e:	8a 95       	dec	r24
    1690:	d2 f7       	brpl	.-12     	; 0x1686 <__fixsfsi+0x60>
    1692:	66 23       	and	r22, r22
    1694:	b1 f0       	breq	.+44     	; 0x16c2 <__fixsfsi+0x9c>
    1696:	50 95       	com	r21
    1698:	40 95       	com	r20
    169a:	30 95       	com	r19
    169c:	21 95       	neg	r18
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	4f 4f       	sbci	r20, 0xFF	; 255
    16a2:	5f 4f       	sbci	r21, 0xFF	; 255
    16a4:	0e c0       	rjmp	.+28     	; 0x16c2 <__fixsfsi+0x9c>
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <__fixsfsi+0x9c>
    16b0:	2f ef       	ldi	r18, 0xFF	; 255
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f ef       	ldi	r20, 0xFF	; 255
    16b6:	5f e7       	ldi	r21, 0x7F	; 127
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <__fixsfsi+0x9c>
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e8       	ldi	r21, 0x80	; 128
    16c2:	b9 01       	movw	r22, r18
    16c4:	ca 01       	movw	r24, r20
    16c6:	2c 96       	adiw	r28, 0x0c	; 12
    16c8:	e2 e0       	ldi	r30, 0x02	; 2
    16ca:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__epilogue_restores__+0x20>

000016ce <__pack_f>:
    16ce:	df 92       	push	r13
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	fc 01       	movw	r30, r24
    16da:	e4 80       	ldd	r14, Z+4	; 0x04
    16dc:	f5 80       	ldd	r15, Z+5	; 0x05
    16de:	06 81       	ldd	r16, Z+6	; 0x06
    16e0:	17 81       	ldd	r17, Z+7	; 0x07
    16e2:	d1 80       	ldd	r13, Z+1	; 0x01
    16e4:	80 81       	ld	r24, Z
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	48 f4       	brcc	.+18     	; 0x16fc <__pack_f+0x2e>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a0 e1       	ldi	r26, 0x10	; 16
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e8 2a       	or	r14, r24
    16f4:	f9 2a       	or	r15, r25
    16f6:	0a 2b       	or	r16, r26
    16f8:	1b 2b       	or	r17, r27
    16fa:	a5 c0       	rjmp	.+330    	; 0x1846 <__pack_f+0x178>
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	09 f4       	brne	.+2      	; 0x1702 <__pack_f+0x34>
    1700:	9f c0       	rjmp	.+318    	; 0x1840 <__pack_f+0x172>
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	21 f4       	brne	.+8      	; 0x170e <__pack_f+0x40>
    1706:	ee 24       	eor	r14, r14
    1708:	ff 24       	eor	r15, r15
    170a:	87 01       	movw	r16, r14
    170c:	05 c0       	rjmp	.+10     	; 0x1718 <__pack_f+0x4a>
    170e:	e1 14       	cp	r14, r1
    1710:	f1 04       	cpc	r15, r1
    1712:	01 05       	cpc	r16, r1
    1714:	11 05       	cpc	r17, r1
    1716:	19 f4       	brne	.+6      	; 0x171e <__pack_f+0x50>
    1718:	e0 e0       	ldi	r30, 0x00	; 0
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	96 c0       	rjmp	.+300    	; 0x184a <__pack_f+0x17c>
    171e:	62 81       	ldd	r22, Z+2	; 0x02
    1720:	73 81       	ldd	r23, Z+3	; 0x03
    1722:	9f ef       	ldi	r25, 0xFF	; 255
    1724:	62 38       	cpi	r22, 0x82	; 130
    1726:	79 07       	cpc	r23, r25
    1728:	0c f0       	brlt	.+2      	; 0x172c <__pack_f+0x5e>
    172a:	5b c0       	rjmp	.+182    	; 0x17e2 <__pack_f+0x114>
    172c:	22 e8       	ldi	r18, 0x82	; 130
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	26 1b       	sub	r18, r22
    1732:	37 0b       	sbc	r19, r23
    1734:	2a 31       	cpi	r18, 0x1A	; 26
    1736:	31 05       	cpc	r19, r1
    1738:	2c f0       	brlt	.+10     	; 0x1744 <__pack_f+0x76>
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	2a c0       	rjmp	.+84     	; 0x1798 <__pack_f+0xca>
    1744:	b8 01       	movw	r22, r16
    1746:	a7 01       	movw	r20, r14
    1748:	02 2e       	mov	r0, r18
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <__pack_f+0x86>
    174c:	76 95       	lsr	r23
    174e:	67 95       	ror	r22
    1750:	57 95       	ror	r21
    1752:	47 95       	ror	r20
    1754:	0a 94       	dec	r0
    1756:	d2 f7       	brpl	.-12     	; 0x174c <__pack_f+0x7e>
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 e0       	ldi	r26, 0x00	; 0
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	04 c0       	rjmp	.+8      	; 0x176a <__pack_f+0x9c>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	aa 1f       	adc	r26, r26
    1768:	bb 1f       	adc	r27, r27
    176a:	2a 95       	dec	r18
    176c:	d2 f7       	brpl	.-12     	; 0x1762 <__pack_f+0x94>
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	a1 09       	sbc	r26, r1
    1772:	b1 09       	sbc	r27, r1
    1774:	8e 21       	and	r24, r14
    1776:	9f 21       	and	r25, r15
    1778:	a0 23       	and	r26, r16
    177a:	b1 23       	and	r27, r17
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	a1 05       	cpc	r26, r1
    1780:	b1 05       	cpc	r27, r1
    1782:	21 f0       	breq	.+8      	; 0x178c <__pack_f+0xbe>
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	9a 01       	movw	r18, r20
    178e:	ab 01       	movw	r20, r22
    1790:	28 2b       	or	r18, r24
    1792:	39 2b       	or	r19, r25
    1794:	4a 2b       	or	r20, r26
    1796:	5b 2b       	or	r21, r27
    1798:	da 01       	movw	r26, r20
    179a:	c9 01       	movw	r24, r18
    179c:	8f 77       	andi	r24, 0x7F	; 127
    179e:	90 70       	andi	r25, 0x00	; 0
    17a0:	a0 70       	andi	r26, 0x00	; 0
    17a2:	b0 70       	andi	r27, 0x00	; 0
    17a4:	80 34       	cpi	r24, 0x40	; 64
    17a6:	91 05       	cpc	r25, r1
    17a8:	a1 05       	cpc	r26, r1
    17aa:	b1 05       	cpc	r27, r1
    17ac:	39 f4       	brne	.+14     	; 0x17bc <__pack_f+0xee>
    17ae:	27 ff       	sbrs	r18, 7
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <__pack_f+0xf6>
    17b2:	20 5c       	subi	r18, 0xC0	; 192
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	4f 4f       	sbci	r20, 0xFF	; 255
    17b8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <__pack_f+0xf6>
    17bc:	21 5c       	subi	r18, 0xC1	; 193
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	4f 4f       	sbci	r20, 0xFF	; 255
    17c2:	5f 4f       	sbci	r21, 0xFF	; 255
    17c4:	e0 e0       	ldi	r30, 0x00	; 0
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	20 30       	cpi	r18, 0x00	; 0
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	3a 07       	cpc	r19, r26
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	4a 07       	cpc	r20, r26
    17d2:	a0 e4       	ldi	r26, 0x40	; 64
    17d4:	5a 07       	cpc	r21, r26
    17d6:	10 f0       	brcs	.+4      	; 0x17dc <__pack_f+0x10e>
    17d8:	e1 e0       	ldi	r30, 0x01	; 1
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	79 01       	movw	r14, r18
    17de:	8a 01       	movw	r16, r20
    17e0:	27 c0       	rjmp	.+78     	; 0x1830 <__pack_f+0x162>
    17e2:	60 38       	cpi	r22, 0x80	; 128
    17e4:	71 05       	cpc	r23, r1
    17e6:	64 f5       	brge	.+88     	; 0x1840 <__pack_f+0x172>
    17e8:	fb 01       	movw	r30, r22
    17ea:	e1 58       	subi	r30, 0x81	; 129
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	d8 01       	movw	r26, r16
    17f0:	c7 01       	movw	r24, r14
    17f2:	8f 77       	andi	r24, 0x7F	; 127
    17f4:	90 70       	andi	r25, 0x00	; 0
    17f6:	a0 70       	andi	r26, 0x00	; 0
    17f8:	b0 70       	andi	r27, 0x00	; 0
    17fa:	80 34       	cpi	r24, 0x40	; 64
    17fc:	91 05       	cpc	r25, r1
    17fe:	a1 05       	cpc	r26, r1
    1800:	b1 05       	cpc	r27, r1
    1802:	39 f4       	brne	.+14     	; 0x1812 <__pack_f+0x144>
    1804:	e7 fe       	sbrs	r14, 7
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <__pack_f+0x154>
    1808:	80 e4       	ldi	r24, 0x40	; 64
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a0 e0       	ldi	r26, 0x00	; 0
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	04 c0       	rjmp	.+8      	; 0x181a <__pack_f+0x14c>
    1812:	8f e3       	ldi	r24, 0x3F	; 63
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e8 0e       	add	r14, r24
    181c:	f9 1e       	adc	r15, r25
    181e:	0a 1f       	adc	r16, r26
    1820:	1b 1f       	adc	r17, r27
    1822:	17 ff       	sbrs	r17, 7
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <__pack_f+0x162>
    1826:	16 95       	lsr	r17
    1828:	07 95       	ror	r16
    182a:	f7 94       	ror	r15
    182c:	e7 94       	ror	r14
    182e:	31 96       	adiw	r30, 0x01	; 1
    1830:	87 e0       	ldi	r24, 0x07	; 7
    1832:	16 95       	lsr	r17
    1834:	07 95       	ror	r16
    1836:	f7 94       	ror	r15
    1838:	e7 94       	ror	r14
    183a:	8a 95       	dec	r24
    183c:	d1 f7       	brne	.-12     	; 0x1832 <__pack_f+0x164>
    183e:	05 c0       	rjmp	.+10     	; 0x184a <__pack_f+0x17c>
    1840:	ee 24       	eor	r14, r14
    1842:	ff 24       	eor	r15, r15
    1844:	87 01       	movw	r16, r14
    1846:	ef ef       	ldi	r30, 0xFF	; 255
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	6e 2f       	mov	r22, r30
    184c:	67 95       	ror	r22
    184e:	66 27       	eor	r22, r22
    1850:	67 95       	ror	r22
    1852:	90 2f       	mov	r25, r16
    1854:	9f 77       	andi	r25, 0x7F	; 127
    1856:	d7 94       	ror	r13
    1858:	dd 24       	eor	r13, r13
    185a:	d7 94       	ror	r13
    185c:	8e 2f       	mov	r24, r30
    185e:	86 95       	lsr	r24
    1860:	49 2f       	mov	r20, r25
    1862:	46 2b       	or	r20, r22
    1864:	58 2f       	mov	r21, r24
    1866:	5d 29       	or	r21, r13
    1868:	b7 01       	movw	r22, r14
    186a:	ca 01       	movw	r24, r20
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	ff 90       	pop	r15
    1872:	ef 90       	pop	r14
    1874:	df 90       	pop	r13
    1876:	08 95       	ret

00001878 <__unpack_f>:
    1878:	fc 01       	movw	r30, r24
    187a:	db 01       	movw	r26, r22
    187c:	40 81       	ld	r20, Z
    187e:	51 81       	ldd	r21, Z+1	; 0x01
    1880:	22 81       	ldd	r18, Z+2	; 0x02
    1882:	62 2f       	mov	r22, r18
    1884:	6f 77       	andi	r22, 0x7F	; 127
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	22 1f       	adc	r18, r18
    188a:	22 27       	eor	r18, r18
    188c:	22 1f       	adc	r18, r18
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	89 2f       	mov	r24, r25
    1892:	88 0f       	add	r24, r24
    1894:	82 2b       	or	r24, r18
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	99 1f       	adc	r25, r25
    189c:	99 27       	eor	r25, r25
    189e:	99 1f       	adc	r25, r25
    18a0:	11 96       	adiw	r26, 0x01	; 1
    18a2:	9c 93       	st	X, r25
    18a4:	11 97       	sbiw	r26, 0x01	; 1
    18a6:	21 15       	cp	r18, r1
    18a8:	31 05       	cpc	r19, r1
    18aa:	a9 f5       	brne	.+106    	; 0x1916 <__unpack_f+0x9e>
    18ac:	41 15       	cp	r20, r1
    18ae:	51 05       	cpc	r21, r1
    18b0:	61 05       	cpc	r22, r1
    18b2:	71 05       	cpc	r23, r1
    18b4:	11 f4       	brne	.+4      	; 0x18ba <__unpack_f+0x42>
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	37 c0       	rjmp	.+110    	; 0x1928 <__unpack_f+0xb0>
    18ba:	82 e8       	ldi	r24, 0x82	; 130
    18bc:	9f ef       	ldi	r25, 0xFF	; 255
    18be:	13 96       	adiw	r26, 0x03	; 3
    18c0:	9c 93       	st	X, r25
    18c2:	8e 93       	st	-X, r24
    18c4:	12 97       	sbiw	r26, 0x02	; 2
    18c6:	9a 01       	movw	r18, r20
    18c8:	ab 01       	movw	r20, r22
    18ca:	67 e0       	ldi	r22, 0x07	; 7
    18cc:	22 0f       	add	r18, r18
    18ce:	33 1f       	adc	r19, r19
    18d0:	44 1f       	adc	r20, r20
    18d2:	55 1f       	adc	r21, r21
    18d4:	6a 95       	dec	r22
    18d6:	d1 f7       	brne	.-12     	; 0x18cc <__unpack_f+0x54>
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	8c 93       	st	X, r24
    18dc:	0d c0       	rjmp	.+26     	; 0x18f8 <__unpack_f+0x80>
    18de:	22 0f       	add	r18, r18
    18e0:	33 1f       	adc	r19, r19
    18e2:	44 1f       	adc	r20, r20
    18e4:	55 1f       	adc	r21, r21
    18e6:	12 96       	adiw	r26, 0x02	; 2
    18e8:	8d 91       	ld	r24, X+
    18ea:	9c 91       	ld	r25, X
    18ec:	13 97       	sbiw	r26, 0x03	; 3
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	13 96       	adiw	r26, 0x03	; 3
    18f2:	9c 93       	st	X, r25
    18f4:	8e 93       	st	-X, r24
    18f6:	12 97       	sbiw	r26, 0x02	; 2
    18f8:	20 30       	cpi	r18, 0x00	; 0
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	38 07       	cpc	r19, r24
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	48 07       	cpc	r20, r24
    1902:	80 e4       	ldi	r24, 0x40	; 64
    1904:	58 07       	cpc	r21, r24
    1906:	58 f3       	brcs	.-42     	; 0x18de <__unpack_f+0x66>
    1908:	14 96       	adiw	r26, 0x04	; 4
    190a:	2d 93       	st	X+, r18
    190c:	3d 93       	st	X+, r19
    190e:	4d 93       	st	X+, r20
    1910:	5c 93       	st	X, r21
    1912:	17 97       	sbiw	r26, 0x07	; 7
    1914:	08 95       	ret
    1916:	2f 3f       	cpi	r18, 0xFF	; 255
    1918:	31 05       	cpc	r19, r1
    191a:	79 f4       	brne	.+30     	; 0x193a <__unpack_f+0xc2>
    191c:	41 15       	cp	r20, r1
    191e:	51 05       	cpc	r21, r1
    1920:	61 05       	cpc	r22, r1
    1922:	71 05       	cpc	r23, r1
    1924:	19 f4       	brne	.+6      	; 0x192c <__unpack_f+0xb4>
    1926:	84 e0       	ldi	r24, 0x04	; 4
    1928:	8c 93       	st	X, r24
    192a:	08 95       	ret
    192c:	64 ff       	sbrs	r22, 4
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <__unpack_f+0xbe>
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	8c 93       	st	X, r24
    1934:	12 c0       	rjmp	.+36     	; 0x195a <__unpack_f+0xe2>
    1936:	1c 92       	st	X, r1
    1938:	10 c0       	rjmp	.+32     	; 0x195a <__unpack_f+0xe2>
    193a:	2f 57       	subi	r18, 0x7F	; 127
    193c:	30 40       	sbci	r19, 0x00	; 0
    193e:	13 96       	adiw	r26, 0x03	; 3
    1940:	3c 93       	st	X, r19
    1942:	2e 93       	st	-X, r18
    1944:	12 97       	sbiw	r26, 0x02	; 2
    1946:	83 e0       	ldi	r24, 0x03	; 3
    1948:	8c 93       	st	X, r24
    194a:	87 e0       	ldi	r24, 0x07	; 7
    194c:	44 0f       	add	r20, r20
    194e:	55 1f       	adc	r21, r21
    1950:	66 1f       	adc	r22, r22
    1952:	77 1f       	adc	r23, r23
    1954:	8a 95       	dec	r24
    1956:	d1 f7       	brne	.-12     	; 0x194c <__unpack_f+0xd4>
    1958:	70 64       	ori	r23, 0x40	; 64
    195a:	14 96       	adiw	r26, 0x04	; 4
    195c:	4d 93       	st	X+, r20
    195e:	5d 93       	st	X+, r21
    1960:	6d 93       	st	X+, r22
    1962:	7c 93       	st	X, r23
    1964:	17 97       	sbiw	r26, 0x07	; 7
    1966:	08 95       	ret

00001968 <__fpcmp_parts_f>:
    1968:	1f 93       	push	r17
    196a:	dc 01       	movw	r26, r24
    196c:	fb 01       	movw	r30, r22
    196e:	9c 91       	ld	r25, X
    1970:	92 30       	cpi	r25, 0x02	; 2
    1972:	08 f4       	brcc	.+2      	; 0x1976 <__fpcmp_parts_f+0xe>
    1974:	47 c0       	rjmp	.+142    	; 0x1a04 <__fpcmp_parts_f+0x9c>
    1976:	80 81       	ld	r24, Z
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	08 f4       	brcc	.+2      	; 0x197e <__fpcmp_parts_f+0x16>
    197c:	43 c0       	rjmp	.+134    	; 0x1a04 <__fpcmp_parts_f+0x9c>
    197e:	94 30       	cpi	r25, 0x04	; 4
    1980:	51 f4       	brne	.+20     	; 0x1996 <__fpcmp_parts_f+0x2e>
    1982:	11 96       	adiw	r26, 0x01	; 1
    1984:	1c 91       	ld	r17, X
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	99 f5       	brne	.+102    	; 0x19f0 <__fpcmp_parts_f+0x88>
    198a:	81 81       	ldd	r24, Z+1	; 0x01
    198c:	68 2f       	mov	r22, r24
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	61 1b       	sub	r22, r17
    1992:	71 09       	sbc	r23, r1
    1994:	3f c0       	rjmp	.+126    	; 0x1a14 <__fpcmp_parts_f+0xac>
    1996:	84 30       	cpi	r24, 0x04	; 4
    1998:	21 f0       	breq	.+8      	; 0x19a2 <__fpcmp_parts_f+0x3a>
    199a:	92 30       	cpi	r25, 0x02	; 2
    199c:	31 f4       	brne	.+12     	; 0x19aa <__fpcmp_parts_f+0x42>
    199e:	82 30       	cpi	r24, 0x02	; 2
    19a0:	b9 f1       	breq	.+110    	; 0x1a10 <__fpcmp_parts_f+0xa8>
    19a2:	81 81       	ldd	r24, Z+1	; 0x01
    19a4:	88 23       	and	r24, r24
    19a6:	89 f1       	breq	.+98     	; 0x1a0a <__fpcmp_parts_f+0xa2>
    19a8:	2d c0       	rjmp	.+90     	; 0x1a04 <__fpcmp_parts_f+0x9c>
    19aa:	11 96       	adiw	r26, 0x01	; 1
    19ac:	1c 91       	ld	r17, X
    19ae:	11 97       	sbiw	r26, 0x01	; 1
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	f1 f0       	breq	.+60     	; 0x19f0 <__fpcmp_parts_f+0x88>
    19b4:	81 81       	ldd	r24, Z+1	; 0x01
    19b6:	18 17       	cp	r17, r24
    19b8:	d9 f4       	brne	.+54     	; 0x19f0 <__fpcmp_parts_f+0x88>
    19ba:	12 96       	adiw	r26, 0x02	; 2
    19bc:	2d 91       	ld	r18, X+
    19be:	3c 91       	ld	r19, X
    19c0:	13 97       	sbiw	r26, 0x03	; 3
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	82 17       	cp	r24, r18
    19c8:	93 07       	cpc	r25, r19
    19ca:	94 f0       	brlt	.+36     	; 0x19f0 <__fpcmp_parts_f+0x88>
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	bc f0       	brlt	.+46     	; 0x1a00 <__fpcmp_parts_f+0x98>
    19d2:	14 96       	adiw	r26, 0x04	; 4
    19d4:	8d 91       	ld	r24, X+
    19d6:	9d 91       	ld	r25, X+
    19d8:	0d 90       	ld	r0, X+
    19da:	bc 91       	ld	r27, X
    19dc:	a0 2d       	mov	r26, r0
    19de:	24 81       	ldd	r18, Z+4	; 0x04
    19e0:	35 81       	ldd	r19, Z+5	; 0x05
    19e2:	46 81       	ldd	r20, Z+6	; 0x06
    19e4:	57 81       	ldd	r21, Z+7	; 0x07
    19e6:	28 17       	cp	r18, r24
    19e8:	39 07       	cpc	r19, r25
    19ea:	4a 07       	cpc	r20, r26
    19ec:	5b 07       	cpc	r21, r27
    19ee:	18 f4       	brcc	.+6      	; 0x19f6 <__fpcmp_parts_f+0x8e>
    19f0:	11 23       	and	r17, r17
    19f2:	41 f0       	breq	.+16     	; 0x1a04 <__fpcmp_parts_f+0x9c>
    19f4:	0a c0       	rjmp	.+20     	; 0x1a0a <__fpcmp_parts_f+0xa2>
    19f6:	82 17       	cp	r24, r18
    19f8:	93 07       	cpc	r25, r19
    19fa:	a4 07       	cpc	r26, r20
    19fc:	b5 07       	cpc	r27, r21
    19fe:	40 f4       	brcc	.+16     	; 0x1a10 <__fpcmp_parts_f+0xa8>
    1a00:	11 23       	and	r17, r17
    1a02:	19 f0       	breq	.+6      	; 0x1a0a <__fpcmp_parts_f+0xa2>
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <__fpcmp_parts_f+0xac>
    1a0a:	6f ef       	ldi	r22, 0xFF	; 255
    1a0c:	7f ef       	ldi	r23, 0xFF	; 255
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <__fpcmp_parts_f+0xac>
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	cb 01       	movw	r24, r22
    1a16:	1f 91       	pop	r17
    1a18:	08 95       	ret

00001a1a <__prologue_saves__>:
    1a1a:	2f 92       	push	r2
    1a1c:	3f 92       	push	r3
    1a1e:	4f 92       	push	r4
    1a20:	5f 92       	push	r5
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	ca 1b       	sub	r28, r26
    1a44:	db 0b       	sbc	r29, r27
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	09 94       	ijmp

00001a52 <__epilogue_restores__>:
    1a52:	2a 88       	ldd	r2, Y+18	; 0x12
    1a54:	39 88       	ldd	r3, Y+17	; 0x11
    1a56:	48 88       	ldd	r4, Y+16	; 0x10
    1a58:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a60:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a62:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a64:	b9 84       	ldd	r11, Y+9	; 0x09
    1a66:	c8 84       	ldd	r12, Y+8	; 0x08
    1a68:	df 80       	ldd	r13, Y+7	; 0x07
    1a6a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a6c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a6e:	0c 81       	ldd	r16, Y+4	; 0x04
    1a70:	1b 81       	ldd	r17, Y+3	; 0x03
    1a72:	aa 81       	ldd	r26, Y+2	; 0x02
    1a74:	b9 81       	ldd	r27, Y+1	; 0x01
    1a76:	ce 0f       	add	r28, r30
    1a78:	d1 1d       	adc	r29, r1
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	ed 01       	movw	r28, r26
    1a86:	08 95       	ret

00001a88 <memset>:
    1a88:	dc 01       	movw	r26, r24
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <memset+0x6>
    1a8c:	6d 93       	st	X+, r22
    1a8e:	41 50       	subi	r20, 0x01	; 1
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	e0 f7       	brcc	.-8      	; 0x1a8c <memset+0x4>
    1a94:	08 95       	ret

00001a96 <_exit>:
    1a96:	f8 94       	cli

00001a98 <__stop_program>:
    1a98:	ff cf       	rjmp	.-2      	; 0x1a98 <__stop_program>
