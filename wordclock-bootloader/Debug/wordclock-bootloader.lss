
wordclock-bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  00001aca  00001b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  0080013e  0080013e  00001c3c  2**0
                  ALLOC
  3 .stab         0000150c  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d51  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004149  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000085e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_13>
      38:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 01 	call	0x256	; 0x256 <main>
      8a:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <program_page>:
#define PARSER_STATE_DATA       4
#define PARSER_STATE_CHECKSUM   5
#define PARSER_STATE_ERROR      6

void program_page (uint32_t page, uint8_t *buf)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2b 97       	sbiw	r28, 0x0b	; 11
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	6e 83       	std	Y+6, r22	; 0x06
      a8:	7f 83       	std	Y+7, r23	; 0x07
      aa:	88 87       	std	Y+8, r24	; 0x08
      ac:	99 87       	std	Y+9, r25	; 0x09
      ae:	5b 87       	std	Y+11, r21	; 0x0b
      b0:	4a 87       	std	Y+10, r20	; 0x0a
    uint16_t i;
    uint8_t sreg;

    /* Disable interrupts */
    sreg = SREG;
      b2:	ef e5       	ldi	r30, 0x5F	; 95
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	8b 83       	std	Y+3, r24	; 0x03
    cli();
      ba:	f8 94       	cli

    eeprom_busy_wait ();
      bc:	ec e3       	ldi	r30, 0x3C	; 60
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	80 81       	ld	r24, Z
      c2:	88 2f       	mov	r24, r24
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	82 70       	andi	r24, 0x02	; 2
      c8:	90 70       	andi	r25, 0x00	; 0
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	b9 f7       	brne	.-18     	; 0xbc <program_page+0x2a>

    boot_page_erase (page);
      ce:	ee 81       	ldd	r30, Y+6	; 0x06
      d0:	ff 81       	ldd	r31, Y+7	; 0x07
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	80 93 57 00 	sts	0x0057, r24
      d8:	e8 95       	spm
    boot_spm_busy_wait ();      /* Wait until the memory is erased. */
      da:	e7 e5       	ldi	r30, 0x57	; 87
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	88 2f       	mov	r24, r24
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	81 70       	andi	r24, 0x01	; 1
      e6:	90 70       	andi	r25, 0x00	; 0
      e8:	88 23       	and	r24, r24
      ea:	b9 f7       	brne	.-18     	; 0xda <program_page+0x48>

    for (i=0; i<SPM_PAGESIZE; i+=2)
      ec:	1d 82       	std	Y+5, r1	; 0x05
      ee:	1c 82       	std	Y+4, r1	; 0x04
      f0:	33 c0       	rjmp	.+102    	; 0x158 <program_page+0xc6>
    {
        /* Set up little-endian word. */
        uint16_t w = *buf++;
      f2:	ea 85       	ldd	r30, Y+10	; 0x0a
      f4:	fb 85       	ldd	r31, Y+11	; 0x0b
      f6:	80 81       	ld	r24, Z
      f8:	88 2f       	mov	r24, r24
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	9a 83       	std	Y+2, r25	; 0x02
      fe:	89 83       	std	Y+1, r24	; 0x01
     100:	8a 85       	ldd	r24, Y+10	; 0x0a
     102:	9b 85       	ldd	r25, Y+11	; 0x0b
     104:	01 96       	adiw	r24, 0x01	; 1
     106:	9b 87       	std	Y+11, r25	; 0x0b
     108:	8a 87       	std	Y+10, r24	; 0x0a
        w += (*buf++) << 8;
     10a:	ea 85       	ldd	r30, Y+10	; 0x0a
     10c:	fb 85       	ldd	r31, Y+11	; 0x0b
     10e:	80 81       	ld	r24, Z
     110:	88 2f       	mov	r24, r24
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	98 2f       	mov	r25, r24
     116:	88 27       	eor	r24, r24
     118:	9c 01       	movw	r18, r24
     11a:	89 81       	ldd	r24, Y+1	; 0x01
     11c:	9a 81       	ldd	r25, Y+2	; 0x02
     11e:	82 0f       	add	r24, r18
     120:	93 1f       	adc	r25, r19
     122:	9a 83       	std	Y+2, r25	; 0x02
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	8a 85       	ldd	r24, Y+10	; 0x0a
     128:	9b 85       	ldd	r25, Y+11	; 0x0b
     12a:	01 96       	adiw	r24, 0x01	; 1
     12c:	9b 87       	std	Y+11, r25	; 0x0b
     12e:	8a 87       	std	Y+10, r24	; 0x0a

        boot_page_fill (page + i, w);
     130:	2e 81       	ldd	r18, Y+6	; 0x06
     132:	3f 81       	ldd	r19, Y+7	; 0x07
     134:	8c 81       	ldd	r24, Y+4	; 0x04
     136:	9d 81       	ldd	r25, Y+5	; 0x05
     138:	f9 01       	movw	r30, r18
     13a:	e8 0f       	add	r30, r24
     13c:	f9 1f       	adc	r31, r25
     13e:	21 e0       	ldi	r18, 0x01	; 1
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	0c 01       	movw	r0, r24
     146:	20 93 57 00 	sts	0x0057, r18
     14a:	e8 95       	spm
     14c:	11 24       	eor	r1, r1
    eeprom_busy_wait ();

    boot_page_erase (page);
    boot_spm_busy_wait ();      /* Wait until the memory is erased. */

    for (i=0; i<SPM_PAGESIZE; i+=2)
     14e:	8c 81       	ldd	r24, Y+4	; 0x04
     150:	9d 81       	ldd	r25, Y+5	; 0x05
     152:	02 96       	adiw	r24, 0x02	; 2
     154:	9d 83       	std	Y+5, r25	; 0x05
     156:	8c 83       	std	Y+4, r24	; 0x04
     158:	8c 81       	ldd	r24, Y+4	; 0x04
     15a:	9d 81       	ldd	r25, Y+5	; 0x05
     15c:	80 38       	cpi	r24, 0x80	; 128
     15e:	91 05       	cpc	r25, r1
     160:	40 f2       	brcs	.-112    	; 0xf2 <program_page+0x60>
        w += (*buf++) << 8;

        boot_page_fill (page + i, w);
    }

    boot_page_write (page);     /* Store buffer in flash page.    */
     162:	ee 81       	ldd	r30, Y+6	; 0x06
     164:	ff 81       	ldd	r31, Y+7	; 0x07
     166:	85 e0       	ldi	r24, 0x05	; 5
     168:	80 93 57 00 	sts	0x0057, r24
     16c:	e8 95       	spm
    boot_spm_busy_wait();       /* Wait until the memory is written.*/
     16e:	e7 e5       	ldi	r30, 0x57	; 87
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	81 70       	andi	r24, 0x01	; 1
     17a:	90 70       	andi	r25, 0x00	; 0
     17c:	88 23       	and	r24, r24
     17e:	b9 f7       	brne	.-18     	; 0x16e <program_page+0xdc>

    /* Reenable RWW-section again. We need this if we want to jump back */
    /* to the application after bootloading. */
    boot_rww_enable ();
     180:	81 e1       	ldi	r24, 0x11	; 17
     182:	80 93 57 00 	sts	0x0057, r24
     186:	e8 95       	spm

    /* Re-enable interrupts (if they were ever enabled). */
    SREG = sreg;
     188:	ef e5       	ldi	r30, 0x5F	; 95
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	8b 81       	ldd	r24, Y+3	; 0x03
     18e:	80 83       	st	Z, r24
}
     190:	2b 96       	adiw	r28, 0x0b	; 11
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	cf 91       	pop	r28
     19e:	df 91       	pop	r29
     1a0:	08 95       	ret

000001a2 <hex2num>:

static uint16_t hex2num (const uint8_t * ascii, uint8_t num)
{
     1a2:	df 93       	push	r29
     1a4:	cf 93       	push	r28
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
     1aa:	27 97       	sbiw	r28, 0x07	; 7
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	f8 94       	cli
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	0f be       	out	0x3f, r0	; 63
     1b4:	cd bf       	out	0x3d, r28	; 61
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	6f 83       	std	Y+7, r22	; 0x07
    uint8_t  i;
    uint16_t val = 0;
     1bc:	1b 82       	std	Y+3, r1	; 0x03
     1be:	1a 82       	std	Y+2, r1	; 0x02

    for (i=0; i<num; i++)
     1c0:	1c 82       	std	Y+4, r1	; 0x04
     1c2:	3a c0       	rjmp	.+116    	; 0x238 <hex2num+0x96>
    {
        uint8_t c = ascii[i];
     1c4:	8c 81       	ldd	r24, Y+4	; 0x04
     1c6:	28 2f       	mov	r18, r24
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	8d 81       	ldd	r24, Y+5	; 0x05
     1cc:	9e 81       	ldd	r25, Y+6	; 0x06
     1ce:	fc 01       	movw	r30, r24
     1d0:	e2 0f       	add	r30, r18
     1d2:	f3 1f       	adc	r31, r19
     1d4:	80 81       	ld	r24, Z
     1d6:	89 83       	std	Y+1, r24	; 0x01

        /* Hex-Ziffer auf ihren Wert abbilden */
        if (c >= '0' && c <= '9')            c -= '0';
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	80 33       	cpi	r24, 0x30	; 48
     1dc:	38 f0       	brcs	.+14     	; 0x1ec <hex2num+0x4a>
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	8a 33       	cpi	r24, 0x3A	; 58
     1e2:	20 f4       	brcc	.+8      	; 0x1ec <hex2num+0x4a>
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	80 53       	subi	r24, 0x30	; 48
     1e8:	89 83       	std	Y+1, r24	; 0x01
     1ea:	13 c0       	rjmp	.+38     	; 0x212 <hex2num+0x70>
        else if (c >= 'A' && c <= 'F')       c -= 'A' - 10;
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	81 34       	cpi	r24, 0x41	; 65
     1f0:	38 f0       	brcs	.+14     	; 0x200 <hex2num+0x5e>
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	87 34       	cpi	r24, 0x47	; 71
     1f6:	20 f4       	brcc	.+8      	; 0x200 <hex2num+0x5e>
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	87 53       	subi	r24, 0x37	; 55
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	09 c0       	rjmp	.+18     	; 0x212 <hex2num+0x70>
        else if (c >= 'a' && c <= 'f')       c -= 'a' - 10;
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	81 36       	cpi	r24, 0x61	; 97
     204:	30 f0       	brcs	.+12     	; 0x212 <hex2num+0x70>
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	87 36       	cpi	r24, 0x67	; 103
     20a:	18 f4       	brcc	.+6      	; 0x212 <hex2num+0x70>
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	87 55       	subi	r24, 0x57	; 87
     210:	89 83       	std	Y+1, r24	; 0x01

        val = 16 * val + c;
     212:	8a 81       	ldd	r24, Y+2	; 0x02
     214:	9b 81       	ldd	r25, Y+3	; 0x03
     216:	9c 01       	movw	r18, r24
     218:	22 95       	swap	r18
     21a:	32 95       	swap	r19
     21c:	30 7f       	andi	r19, 0xF0	; 240
     21e:	32 27       	eor	r19, r18
     220:	20 7f       	andi	r18, 0xF0	; 240
     222:	32 27       	eor	r19, r18
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	88 2f       	mov	r24, r24
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	82 0f       	add	r24, r18
     22c:	93 1f       	adc	r25, r19
     22e:	9b 83       	std	Y+3, r25	; 0x03
     230:	8a 83       	std	Y+2, r24	; 0x02
static uint16_t hex2num (const uint8_t * ascii, uint8_t num)
{
    uint8_t  i;
    uint16_t val = 0;

    for (i=0; i<num; i++)
     232:	8c 81       	ldd	r24, Y+4	; 0x04
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	8c 83       	std	Y+4, r24	; 0x04
     238:	9c 81       	ldd	r25, Y+4	; 0x04
     23a:	8f 81       	ldd	r24, Y+7	; 0x07
     23c:	98 17       	cp	r25, r24
     23e:	10 f2       	brcs	.-124    	; 0x1c4 <hex2num+0x22>
        else if (c >= 'a' && c <= 'f')       c -= 'a' - 10;

        val = 16 * val + c;
    }

    return val;
     240:	8a 81       	ldd	r24, Y+2	; 0x02
     242:	9b 81       	ldd	r25, Y+3	; 0x03
}
     244:	27 96       	adiw	r28, 0x07	; 7
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	08 95       	ret

00000256 <main>:

int main()
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	df 93       	push	r29
     25c:	cf 93       	push	r28
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	c8 5d       	subi	r28, 0xD8	; 216
     264:	d0 40       	sbci	r29, 0x00	; 0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
                    /* Empfangenes Zeichen + Statuscode */
    uint16_t        c = 0,
     270:	fe 01       	movw	r30, r28
     272:	e4 5b       	subi	r30, 0xB4	; 180
     274:	ff 4f       	sbci	r31, 0xFF	; 255
     276:	11 82       	std	Z+1, r1	; 0x01
     278:	10 82       	st	Z, r1
                    /* Intel-HEX Zieladresse */
                hex_addr = 0,
     27a:	fe 01       	movw	r30, r28
     27c:	e6 5b       	subi	r30, 0xB6	; 182
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	11 82       	std	Z+1, r1	; 0x01
     282:	10 82       	st	Z, r1
                    /* Zu schreibende Flash-Page */
                    flash_page = 0,
     284:	fe 01       	movw	r30, r28
     286:	e8 5b       	subi	r30, 0xB8	; 184
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	11 82       	std	Z+1, r1	; 0x01
     28c:	10 82       	st	Z, r1
                    /* Intel-HEX Checksumme zum Überprüfen des Daten */
                    hex_check = 0,
     28e:	fe 01       	movw	r30, r28
     290:	ea 5b       	subi	r30, 0xBA	; 186
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	11 82       	std	Z+1, r1	; 0x01
     296:	10 82       	st	Z, r1
                    /* Positions zum Schreiben in der Datenpuffer */
                    flash_cnt = 0;
     298:	fe 01       	movw	r30, r28
     29a:	ec 5b       	subi	r30, 0xBC	; 188
     29c:	ff 4f       	sbci	r31, 0xFF	; 255
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	10 82       	st	Z, r1
                    /* temporäre Variable */
    uint8_t         temp,
                    /* Flag zum steuern des Programmiermodus */
                    boot_state = BOOT_STATE_EXIT,
     2a2:	fe 01       	movw	r30, r28
     2a4:	ee 5b       	subi	r30, 0xBE	; 190
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	10 82       	st	Z, r1
                    /* Empfangszustandssteuerung */
                    parser_state = PARSER_STATE_START,
     2aa:	fe 01       	movw	r30, r28
     2ac:	ef 5b       	subi	r30, 0xBF	; 191
     2ae:	ff 4f       	sbci	r31, 0xFF	; 255
     2b0:	10 82       	st	Z, r1
                    /* Flag zum ermitteln einer neuen Flash-Page */
                    flash_page_flag = 1,
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	fe 01       	movw	r30, r28
     2b6:	e0 5c       	subi	r30, 0xC0	; 192
     2b8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ba:	80 83       	st	Z, r24
                    /* Datenpuffer für die Hexdaten*/
                    flash_data[SPM_PAGESIZE],
                    /* Position zum Schreiben in den HEX-Puffer */
                    hex_cnt = 0,
     2bc:	1f ae       	std	Y+63, r1	; 0x3f
                    /* Puffer für die Umwandlung der ASCII in Binärdaten */
                    hex_buffer[5],
                    /* Intel-HEX Datenlänge */
                    hex_size = 0,
     2be:	1e ae       	std	Y+62, r1	; 0x3e
                    /* Zähler für die empfangenen HEX-Daten einer Zeile */
                    hex_data_cnt = 0,
     2c0:	1d ae       	std	Y+61, r1	; 0x3d
                    /* Intel-HEX Recordtype */
                    hex_type = 0,
     2c2:	1c ae       	std	Y+60, r1	; 0x3c
                    /* empfangene HEX-Checksumme */
                    hex_checksum=0;
     2c4:	1b ae       	std	Y+59, r1	; 0x3b
                    /* Funktionspointer auf 0x0000 */
    void            (*start)( void ) = 0x0000;
     2c6:	1a ae       	std	Y+58, r1	; 0x3a
     2c8:	19 ae       	std	Y+57, r1	; 0x39

    /* Füllen der Puffer mit definierten Werten */
    memset(hex_buffer, 0x00, sizeof(hex_buffer));
     2ca:	ce 01       	movw	r24, r28
     2cc:	82 53       	subi	r24, 0x32	; 50
     2ce:	9f 4f       	sbci	r25, 0xFF	; 255
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	45 e0       	ldi	r20, 0x05	; 5
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <memset>
    memset(flash_data, 0xFF, sizeof(flash_data));
     2dc:	ce 01       	movw	r24, r28
     2de:	82 5b       	subi	r24, 0xB2	; 178
     2e0:	9f 4f       	sbci	r25, 0xFF	; 255
     2e2:	6f ef       	ldi	r22, 0xFF	; 255
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <memset>

    /* Interrupt Vektoren verbiegen */
    temp = MCUCR;
     2ee:	e5 e5       	ldi	r30, 0x55	; 85
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	de 01       	movw	r26, r28
     2f4:	ad 5b       	subi	r26, 0xBD	; 189
     2f6:	bf 4f       	sbci	r27, 0xFF	; 255
     2f8:	80 81       	ld	r24, Z
     2fa:	8c 93       	st	X, r24
    MCUCR = temp | (1<<IVCE);
     2fc:	a5 e5       	ldi	r26, 0x55	; 85
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	fe 01       	movw	r30, r28
     302:	ed 5b       	subi	r30, 0xBD	; 189
     304:	ff 4f       	sbci	r31, 0xFF	; 255
     306:	80 81       	ld	r24, Z
     308:	81 60       	ori	r24, 0x01	; 1
     30a:	8c 93       	st	X, r24
    MCUCR = temp | (1<<IVSEL);
     30c:	a5 e5       	ldi	r26, 0x55	; 85
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	fe 01       	movw	r30, r28
     312:	ed 5b       	subi	r30, 0xBD	; 189
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	80 81       	ld	r24, Z
     318:	82 60       	ori	r24, 0x02	; 2
     31a:	8c 93       	st	X, r24

    /* Einstellen der Baudrate und aktivieren der Interrupts */
    uart_init( UART_BAUD_SELECT(BOOT_UART_BAUD_RATE,F_CPU) );
     31c:	87 e6       	ldi	r24, 0x67	; 103
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 f4 06 	call	0xde8	; 0xde8 <uart_init>
    sei();
     324:	78 94       	sei

    uart_puts("Hallo hier ist der echte Bootloader\n\r");
     326:	80 e6       	ldi	r24, 0x60	; 96
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_puts>
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	aa ef       	ldi	r26, 0xFA	; 250
     334:	b4 e4       	ldi	r27, 0x44	; 68
     336:	8d ab       	std	Y+53, r24	; 0x35
     338:	9e ab       	std	Y+54, r25	; 0x36
     33a:	af ab       	std	Y+55, r26	; 0x37
     33c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     33e:	6d a9       	ldd	r22, Y+53	; 0x35
     340:	7e a9       	ldd	r23, Y+54	; 0x36
     342:	8f a9       	ldd	r24, Y+55	; 0x37
     344:	98 ad       	ldd	r25, Y+56	; 0x38
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	4a e7       	ldi	r20, 0x7A	; 122
     34c:	55 e4       	ldi	r21, 0x45	; 69
     34e:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	89 ab       	std	Y+49, r24	; 0x31
     358:	9a ab       	std	Y+50, r25	; 0x32
     35a:	ab ab       	std	Y+51, r26	; 0x33
     35c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     35e:	69 a9       	ldd	r22, Y+49	; 0x31
     360:	7a a9       	ldd	r23, Y+50	; 0x32
     362:	8b a9       	ldd	r24, Y+51	; 0x33
     364:	9c a9       	ldd	r25, Y+52	; 0x34
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	40 e8       	ldi	r20, 0x80	; 128
     36c:	5f e3       	ldi	r21, 0x3F	; 63
     36e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__ltsf2>
     372:	88 23       	and	r24, r24
     374:	2c f4       	brge	.+10     	; 0x380 <main+0x12a>
		__ticks = 1;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	98 ab       	std	Y+48, r25	; 0x30
     37c:	8f a7       	std	Y+47, r24	; 0x2f
     37e:	3f c0       	rjmp	.+126    	; 0x3fe <main+0x1a8>
	else if (__tmp > 65535)
     380:	69 a9       	ldd	r22, Y+49	; 0x31
     382:	7a a9       	ldd	r23, Y+50	; 0x32
     384:	8b a9       	ldd	r24, Y+51	; 0x33
     386:	9c a9       	ldd	r25, Y+52	; 0x34
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	3f ef       	ldi	r19, 0xFF	; 255
     38c:	4f e7       	ldi	r20, 0x7F	; 127
     38e:	57 e4       	ldi	r21, 0x47	; 71
     390:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__gtsf2>
     394:	18 16       	cp	r1, r24
     396:	4c f5       	brge	.+82     	; 0x3ea <main+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     398:	6d a9       	ldd	r22, Y+53	; 0x35
     39a:	7e a9       	ldd	r23, Y+54	; 0x36
     39c:	8f a9       	ldd	r24, Y+55	; 0x37
     39e:	98 ad       	ldd	r25, Y+56	; 0x38
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e2       	ldi	r20, 0x20	; 32
     3a6:	51 e4       	ldi	r21, 0x41	; 65
     3a8:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     3ac:	dc 01       	movw	r26, r24
     3ae:	cb 01       	movw	r24, r22
     3b0:	bc 01       	movw	r22, r24
     3b2:	cd 01       	movw	r24, r26
     3b4:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixunssfsi>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	98 ab       	std	Y+48, r25	; 0x30
     3be:	8f a7       	std	Y+47, r24	; 0x2f
     3c0:	0f c0       	rjmp	.+30     	; 0x3e0 <main+0x18a>
     3c2:	80 e9       	ldi	r24, 0x90	; 144
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	9e a7       	std	Y+46, r25	; 0x2e
     3c8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ca:	8d a5       	ldd	r24, Y+45	; 0x2d
     3cc:	9e a5       	ldd	r25, Y+46	; 0x2e
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x178>
     3d2:	9e a7       	std	Y+46, r25	; 0x2e
     3d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d6:	8f a5       	ldd	r24, Y+47	; 0x2f
     3d8:	98 a9       	ldd	r25, Y+48	; 0x30
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	98 ab       	std	Y+48, r25	; 0x30
     3de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e0:	8f a5       	ldd	r24, Y+47	; 0x2f
     3e2:	98 a9       	ldd	r25, Y+48	; 0x30
     3e4:	00 97       	sbiw	r24, 0x00	; 0
     3e6:	69 f7       	brne	.-38     	; 0x3c2 <main+0x16c>
     3e8:	14 c0       	rjmp	.+40     	; 0x412 <main+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ea:	69 a9       	ldd	r22, Y+49	; 0x31
     3ec:	7a a9       	ldd	r23, Y+50	; 0x32
     3ee:	8b a9       	ldd	r24, Y+51	; 0x33
     3f0:	9c a9       	ldd	r25, Y+52	; 0x34
     3f2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixunssfsi>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	98 ab       	std	Y+48, r25	; 0x30
     3fc:	8f a7       	std	Y+47, r24	; 0x2f
     3fe:	8f a5       	ldd	r24, Y+47	; 0x2f
     400:	98 a9       	ldd	r25, Y+48	; 0x30
     402:	9c a7       	std	Y+44, r25	; 0x2c
     404:	8b a7       	std	Y+43, r24	; 0x2b
     406:	8b a5       	ldd	r24, Y+43	; 0x2b
     408:	9c a5       	ldd	r25, Y+44	; 0x2c
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <main+0x1b4>
     40e:	9c a7       	std	Y+44, r25	; 0x2c
     410:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2000);

    do
    {
        c = uart_getc();
     412:	0e 94 28 07 	call	0xe50	; 0xe50 <uart_getc>
     416:	fe 01       	movw	r30, r28
     418:	e4 5b       	subi	r30, 0xB4	; 180
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	91 83       	std	Z+1, r25	; 0x01
     41e:	80 83       	st	Z, r24
        if( !(c & UART_NO_DATA) )
     420:	fe 01       	movw	r30, r28
     422:	e4 5b       	subi	r30, 0xB4	; 180
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	80 70       	andi	r24, 0x00	; 0
     42c:	91 70       	andi	r25, 0x01	; 1
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	09 f0       	breq	.+2      	; 0x434 <main+0x1de>
     432:	b3 c3       	rjmp	.+1894   	; 0xb9a <__stack+0x33b>
        {
             /* Programmzustand: Parser */
             if(boot_state == BOOT_STATE_PARSER)
     434:	fe 01       	movw	r30, r28
     436:	ee 5b       	subi	r30, 0xBE	; 190
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	80 81       	ld	r24, Z
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	09 f0       	breq	.+2      	; 0x442 <main+0x1ec>
     440:	61 c3       	rjmp	.+1730   	; 0xb04 <__stack+0x2a5>
             {
                  switch(parser_state)
     442:	fe 01       	movw	r30, r28
     444:	ef 5b       	subi	r30, 0xBF	; 191
     446:	ff 4f       	sbci	r31, 0xFF	; 255
     448:	80 81       	ld	r24, Z
     44a:	28 2f       	mov	r18, r24
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	c9 52       	subi	r28, 0x29	; 41
     450:	df 4f       	sbci	r29, 0xFF	; 255
     452:	39 83       	std	Y+1, r19	; 0x01
     454:	28 83       	st	Y, r18
     456:	c7 5d       	subi	r28, 0xD7	; 215
     458:	d0 40       	sbci	r29, 0x00	; 0
     45a:	c9 52       	subi	r28, 0x29	; 41
     45c:	df 4f       	sbci	r29, 0xFF	; 255
     45e:	88 81       	ld	r24, Y
     460:	99 81       	ldd	r25, Y+1	; 0x01
     462:	c7 5d       	subi	r28, 0xD7	; 215
     464:	d0 40       	sbci	r29, 0x00	; 0
     466:	83 30       	cpi	r24, 0x03	; 3
     468:	91 05       	cpc	r25, r1
     46a:	09 f4       	brne	.+2      	; 0x46e <main+0x218>
     46c:	00 c1       	rjmp	.+512    	; 0x66e <main+0x418>
     46e:	c9 52       	subi	r28, 0x29	; 41
     470:	df 4f       	sbci	r29, 0xFF	; 255
     472:	28 81       	ld	r18, Y
     474:	39 81       	ldd	r19, Y+1	; 0x01
     476:	c7 5d       	subi	r28, 0xD7	; 215
     478:	d0 40       	sbci	r29, 0x00	; 0
     47a:	24 30       	cpi	r18, 0x04	; 4
     47c:	31 05       	cpc	r19, r1
     47e:	ec f4       	brge	.+58     	; 0x4ba <main+0x264>
     480:	c9 52       	subi	r28, 0x29	; 41
     482:	df 4f       	sbci	r29, 0xFF	; 255
     484:	88 81       	ld	r24, Y
     486:	99 81       	ldd	r25, Y+1	; 0x01
     488:	c7 5d       	subi	r28, 0xD7	; 215
     48a:	d0 40       	sbci	r29, 0x00	; 0
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	91 05       	cpc	r25, r1
     490:	09 f4       	brne	.+2      	; 0x494 <main+0x23e>
     492:	4b c0       	rjmp	.+150    	; 0x52a <main+0x2d4>
     494:	c9 52       	subi	r28, 0x29	; 41
     496:	df 4f       	sbci	r29, 0xFF	; 255
     498:	28 81       	ld	r18, Y
     49a:	39 81       	ldd	r19, Y+1	; 0x01
     49c:	c7 5d       	subi	r28, 0xD7	; 215
     49e:	d0 40       	sbci	r29, 0x00	; 0
     4a0:	22 30       	cpi	r18, 0x02	; 2
     4a2:	31 05       	cpc	r19, r1
     4a4:	0c f0       	brlt	.+2      	; 0x4a8 <main+0x252>
     4a6:	79 c0       	rjmp	.+242    	; 0x59a <main+0x344>
     4a8:	c9 52       	subi	r28, 0x29	; 41
     4aa:	df 4f       	sbci	r29, 0xFF	; 255
     4ac:	88 81       	ld	r24, Y
     4ae:	99 81       	ldd	r25, Y+1	; 0x01
     4b0:	c7 5d       	subi	r28, 0xD7	; 215
     4b2:	d0 40       	sbci	r29, 0x00	; 0
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	01 f1       	breq	.+64     	; 0x4f8 <main+0x2a2>
     4b8:	70 c3       	rjmp	.+1760   	; 0xb9a <__stack+0x33b>
     4ba:	c9 52       	subi	r28, 0x29	; 41
     4bc:	df 4f       	sbci	r29, 0xFF	; 255
     4be:	28 81       	ld	r18, Y
     4c0:	39 81       	ldd	r19, Y+1	; 0x01
     4c2:	c7 5d       	subi	r28, 0xD7	; 215
     4c4:	d0 40       	sbci	r29, 0x00	; 0
     4c6:	25 30       	cpi	r18, 0x05	; 5
     4c8:	31 05       	cpc	r19, r1
     4ca:	09 f4       	brne	.+2      	; 0x4ce <main+0x278>
     4cc:	3a c2       	rjmp	.+1140   	; 0x942 <__stack+0xe3>
     4ce:	c9 52       	subi	r28, 0x29	; 41
     4d0:	df 4f       	sbci	r29, 0xFF	; 255
     4d2:	88 81       	ld	r24, Y
     4d4:	99 81       	ldd	r25, Y+1	; 0x01
     4d6:	c7 5d       	subi	r28, 0xD7	; 215
     4d8:	d0 40       	sbci	r29, 0x00	; 0
     4da:	85 30       	cpi	r24, 0x05	; 5
     4dc:	91 05       	cpc	r25, r1
     4de:	0c f4       	brge	.+2      	; 0x4e2 <main+0x28c>
     4e0:	27 c1       	rjmp	.+590    	; 0x730 <main+0x4da>
     4e2:	c9 52       	subi	r28, 0x29	; 41
     4e4:	df 4f       	sbci	r29, 0xFF	; 255
     4e6:	28 81       	ld	r18, Y
     4e8:	39 81       	ldd	r19, Y+1	; 0x01
     4ea:	c7 5d       	subi	r28, 0xD7	; 215
     4ec:	d0 40       	sbci	r29, 0x00	; 0
     4ee:	26 30       	cpi	r18, 0x06	; 6
     4f0:	31 05       	cpc	r19, r1
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <main+0x2a0>
     4f4:	03 c3       	rjmp	.+1542   	; 0xafc <__stack+0x29d>
     4f6:	51 c3       	rjmp	.+1698   	; 0xb9a <__stack+0x33b>
                  {
                      /* Warte auf Zeilen-Startzeichen */
                      case PARSER_STATE_START:
                          if((uint8_t)c == START_SIGN)
     4f8:	fe 01       	movw	r30, r28
     4fa:	e4 5b       	subi	r30, 0xB4	; 180
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	80 81       	ld	r24, Z
     500:	8a 33       	cpi	r24, 0x3A	; 58
     502:	09 f0       	breq	.+2      	; 0x506 <main+0x2b0>
     504:	4a c3       	rjmp	.+1684   	; 0xb9a <__stack+0x33b>
                          {
                              uart_putc(XOFF);
     506:	83 e1       	ldi	r24, 0x13	; 19
     508:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
                              parser_state = PARSER_STATE_SIZE;
     50c:	fe 01       	movw	r30, r28
     50e:	ef 5b       	subi	r30, 0xBF	; 191
     510:	ff 4f       	sbci	r31, 0xFF	; 255
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 83       	st	Z, r24
                              hex_cnt = 0;
     516:	1f ae       	std	Y+63, r1	; 0x3f
                              hex_check = 0;
     518:	fe 01       	movw	r30, r28
     51a:	ea 5b       	subi	r30, 0xBA	; 186
     51c:	ff 4f       	sbci	r31, 0xFF	; 255
     51e:	11 82       	std	Z+1, r1	; 0x01
     520:	10 82       	st	Z, r1
                              uart_putc(XON);
     522:	81 e1       	ldi	r24, 0x11	; 17
     524:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
     528:	38 c3       	rjmp	.+1648   	; 0xb9a <__stack+0x33b>
                          }
                          break;
                      /* Parse Datengröße */
                      case PARSER_STATE_SIZE:
                          hex_buffer[hex_cnt++] = (uint8_t)c;
     52a:	8f ad       	ldd	r24, Y+63	; 0x3f
     52c:	28 2f       	mov	r18, r24
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	fe 01       	movw	r30, r28
     532:	e4 5b       	subi	r30, 0xB4	; 180
     534:	ff 4f       	sbci	r31, 0xFF	; 255
     536:	40 81       	ld	r20, Z
     538:	ce 01       	movw	r24, r28
     53a:	82 53       	subi	r24, 0x32	; 50
     53c:	9f 4f       	sbci	r25, 0xFF	; 255
     53e:	fc 01       	movw	r30, r24
     540:	e2 0f       	add	r30, r18
     542:	f3 1f       	adc	r31, r19
     544:	40 83       	st	Z, r20
     546:	8f ad       	ldd	r24, Y+63	; 0x3f
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	8f af       	std	Y+63, r24	; 0x3f
                          if(hex_cnt == 2)
     54c:	8f ad       	ldd	r24, Y+63	; 0x3f
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	09 f0       	breq	.+2      	; 0x554 <main+0x2fe>
     552:	23 c3       	rjmp	.+1606   	; 0xb9a <__stack+0x33b>
                          {
                              uart_putc(XOFF);
     554:	83 e1       	ldi	r24, 0x13	; 19
     556:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
                              parser_state = PARSER_STATE_ADDRESS;
     55a:	fe 01       	movw	r30, r28
     55c:	ef 5b       	subi	r30, 0xBF	; 191
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	80 83       	st	Z, r24
                              hex_cnt = 0;
     564:	1f ae       	std	Y+63, r1	; 0x3f
                              hex_size = (uint8_t)hex2num(hex_buffer, 2);
     566:	ce 01       	movw	r24, r28
     568:	82 53       	subi	r24, 0x32	; 50
     56a:	9f 4f       	sbci	r25, 0xFF	; 255
     56c:	62 e0       	ldi	r22, 0x02	; 2
     56e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <hex2num>
     572:	8e af       	std	Y+62, r24	; 0x3e
                              hex_check += hex_size;
     574:	8e ad       	ldd	r24, Y+62	; 0x3e
     576:	28 2f       	mov	r18, r24
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	de 01       	movw	r26, r28
     57c:	aa 5b       	subi	r26, 0xBA	; 186
     57e:	bf 4f       	sbci	r27, 0xFF	; 255
     580:	fe 01       	movw	r30, r28
     582:	ea 5b       	subi	r30, 0xBA	; 186
     584:	ff 4f       	sbci	r31, 0xFF	; 255
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	82 0f       	add	r24, r18
     58c:	93 1f       	adc	r25, r19
     58e:	8d 93       	st	X+, r24
     590:	9c 93       	st	X, r25
                              uart_putc(XON);
     592:	81 e1       	ldi	r24, 0x11	; 17
     594:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
     598:	00 c3       	rjmp	.+1536   	; 0xb9a <__stack+0x33b>
                           }
                           break;
                      /* Parse Zieladresse */
                      case PARSER_STATE_ADDRESS:
                          hex_buffer[hex_cnt++] = (uint8_t)c;
     59a:	8f ad       	ldd	r24, Y+63	; 0x3f
     59c:	28 2f       	mov	r18, r24
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	fe 01       	movw	r30, r28
     5a2:	e4 5b       	subi	r30, 0xB4	; 180
     5a4:	ff 4f       	sbci	r31, 0xFF	; 255
     5a6:	40 81       	ld	r20, Z
     5a8:	ce 01       	movw	r24, r28
     5aa:	82 53       	subi	r24, 0x32	; 50
     5ac:	9f 4f       	sbci	r25, 0xFF	; 255
     5ae:	fc 01       	movw	r30, r24
     5b0:	e2 0f       	add	r30, r18
     5b2:	f3 1f       	adc	r31, r19
     5b4:	40 83       	st	Z, r20
     5b6:	8f ad       	ldd	r24, Y+63	; 0x3f
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	8f af       	std	Y+63, r24	; 0x3f
                          if(hex_cnt == 4)
     5bc:	8f ad       	ldd	r24, Y+63	; 0x3f
     5be:	84 30       	cpi	r24, 0x04	; 4
     5c0:	09 f0       	breq	.+2      	; 0x5c4 <main+0x36e>
     5c2:	eb c2       	rjmp	.+1494   	; 0xb9a <__stack+0x33b>
                          {
                              uart_putc(XOFF);
     5c4:	83 e1       	ldi	r24, 0x13	; 19
     5c6:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
                              parser_state = PARSER_STATE_TYPE;
     5ca:	fe 01       	movw	r30, r28
     5cc:	ef 5b       	subi	r30, 0xBF	; 191
     5ce:	ff 4f       	sbci	r31, 0xFF	; 255
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	80 83       	st	Z, r24
                              hex_cnt = 0;
     5d4:	1f ae       	std	Y+63, r1	; 0x3f
                              hex_addr = hex2num(hex_buffer, 4);
     5d6:	ce 01       	movw	r24, r28
     5d8:	82 53       	subi	r24, 0x32	; 50
     5da:	9f 4f       	sbci	r25, 0xFF	; 255
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <hex2num>
     5e2:	fe 01       	movw	r30, r28
     5e4:	e6 5b       	subi	r30, 0xB6	; 182
     5e6:	ff 4f       	sbci	r31, 0xFF	; 255
     5e8:	91 83       	std	Z+1, r25	; 0x01
     5ea:	80 83       	st	Z, r24
                              hex_check += (uint8_t) hex_addr;
     5ec:	fe 01       	movw	r30, r28
     5ee:	e6 5b       	subi	r30, 0xB6	; 182
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	80 81       	ld	r24, Z
     5f4:	28 2f       	mov	r18, r24
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	de 01       	movw	r26, r28
     5fa:	aa 5b       	subi	r26, 0xBA	; 186
     5fc:	bf 4f       	sbci	r27, 0xFF	; 255
     5fe:	fe 01       	movw	r30, r28
     600:	ea 5b       	subi	r30, 0xBA	; 186
     602:	ff 4f       	sbci	r31, 0xFF	; 255
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	8d 93       	st	X+, r24
     60e:	9c 93       	st	X, r25
                              hex_check += (uint8_t) (hex_addr >> 8);
     610:	fe 01       	movw	r30, r28
     612:	e6 5b       	subi	r30, 0xB6	; 182
     614:	ff 4f       	sbci	r31, 0xFF	; 255
     616:	80 81       	ld	r24, Z
     618:	91 81       	ldd	r25, Z+1	; 0x01
     61a:	89 2f       	mov	r24, r25
     61c:	99 27       	eor	r25, r25
     61e:	28 2f       	mov	r18, r24
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	de 01       	movw	r26, r28
     624:	aa 5b       	subi	r26, 0xBA	; 186
     626:	bf 4f       	sbci	r27, 0xFF	; 255
     628:	fe 01       	movw	r30, r28
     62a:	ea 5b       	subi	r30, 0xBA	; 186
     62c:	ff 4f       	sbci	r31, 0xFF	; 255
     62e:	80 81       	ld	r24, Z
     630:	91 81       	ldd	r25, Z+1	; 0x01
     632:	82 0f       	add	r24, r18
     634:	93 1f       	adc	r25, r19
     636:	11 96       	adiw	r26, 0x01	; 1
     638:	9c 93       	st	X, r25
     63a:	8e 93       	st	-X, r24
                              if(flash_page_flag)
     63c:	fe 01       	movw	r30, r28
     63e:	e0 5c       	subi	r30, 0xC0	; 192
     640:	ff 4f       	sbci	r31, 0xFF	; 255
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	79 f0       	breq	.+30     	; 0x666 <main+0x410>
                              {
                                  flash_page = hex_addr - hex_addr % SPM_PAGESIZE;
     648:	de 01       	movw	r26, r28
     64a:	a8 5b       	subi	r26, 0xB8	; 184
     64c:	bf 4f       	sbci	r27, 0xFF	; 255
     64e:	fe 01       	movw	r30, r28
     650:	e6 5b       	subi	r30, 0xB6	; 182
     652:	ff 4f       	sbci	r31, 0xFF	; 255
     654:	80 81       	ld	r24, Z
     656:	91 81       	ldd	r25, Z+1	; 0x01
     658:	80 78       	andi	r24, 0x80	; 128
     65a:	8d 93       	st	X+, r24
     65c:	9c 93       	st	X, r25
                                  flash_page_flag = 0;
     65e:	fe 01       	movw	r30, r28
     660:	e0 5c       	subi	r30, 0xC0	; 192
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	10 82       	st	Z, r1
                              }
                              uart_putc(XON);
     666:	81 e1       	ldi	r24, 0x11	; 17
     668:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
     66c:	96 c2       	rjmp	.+1324   	; 0xb9a <__stack+0x33b>
                           }
                           break;
                      /* Parse Zeilentyp */
                      case PARSER_STATE_TYPE:
                           hex_buffer[hex_cnt++] = (uint8_t)c;
     66e:	8f ad       	ldd	r24, Y+63	; 0x3f
     670:	28 2f       	mov	r18, r24
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	fe 01       	movw	r30, r28
     676:	e4 5b       	subi	r30, 0xB4	; 180
     678:	ff 4f       	sbci	r31, 0xFF	; 255
     67a:	40 81       	ld	r20, Z
     67c:	ce 01       	movw	r24, r28
     67e:	82 53       	subi	r24, 0x32	; 50
     680:	9f 4f       	sbci	r25, 0xFF	; 255
     682:	fc 01       	movw	r30, r24
     684:	e2 0f       	add	r30, r18
     686:	f3 1f       	adc	r31, r19
     688:	40 83       	st	Z, r20
     68a:	8f ad       	ldd	r24, Y+63	; 0x3f
     68c:	8f 5f       	subi	r24, 0xFF	; 255
     68e:	8f af       	std	Y+63, r24	; 0x3f
                           if(hex_cnt == 2)
     690:	8f ad       	ldd	r24, Y+63	; 0x3f
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	09 f0       	breq	.+2      	; 0x698 <main+0x442>
     696:	81 c2       	rjmp	.+1282   	; 0xb9a <__stack+0x33b>
                           {
                               uart_putc(XOFF);
     698:	83 e1       	ldi	r24, 0x13	; 19
     69a:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
                               hex_cnt = 0;
     69e:	1f ae       	std	Y+63, r1	; 0x3f
                               hex_data_cnt = 0;
     6a0:	1d ae       	std	Y+61, r1	; 0x3d
                               hex_type = (uint8_t)hex2num(hex_buffer, 2);
     6a2:	ce 01       	movw	r24, r28
     6a4:	82 53       	subi	r24, 0x32	; 50
     6a6:	9f 4f       	sbci	r25, 0xFF	; 255
     6a8:	62 e0       	ldi	r22, 0x02	; 2
     6aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <hex2num>
     6ae:	8c af       	std	Y+60, r24	; 0x3c
                               hex_check += hex_type;
     6b0:	8c ad       	ldd	r24, Y+60	; 0x3c
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	de 01       	movw	r26, r28
     6b8:	aa 5b       	subi	r26, 0xBA	; 186
     6ba:	bf 4f       	sbci	r27, 0xFF	; 255
     6bc:	fe 01       	movw	r30, r28
     6be:	ea 5b       	subi	r30, 0xBA	; 186
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	80 81       	ld	r24, Z
     6c4:	91 81       	ldd	r25, Z+1	; 0x01
     6c6:	82 0f       	add	r24, r18
     6c8:	93 1f       	adc	r25, r19
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	9c 93       	st	X, r25
     6ce:	8e 93       	st	-X, r24
                               switch(hex_type)
     6d0:	8c ad       	ldd	r24, Y+60	; 0x3c
     6d2:	28 2f       	mov	r18, r24
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	cb 52       	subi	r28, 0x2B	; 43
     6d8:	df 4f       	sbci	r29, 0xFF	; 255
     6da:	39 83       	std	Y+1, r19	; 0x01
     6dc:	28 83       	st	Y, r18
     6de:	c5 5d       	subi	r28, 0xD5	; 213
     6e0:	d0 40       	sbci	r29, 0x00	; 0
     6e2:	cb 52       	subi	r28, 0x2B	; 43
     6e4:	df 4f       	sbci	r29, 0xFF	; 255
     6e6:	88 81       	ld	r24, Y
     6e8:	99 81       	ldd	r25, Y+1	; 0x01
     6ea:	c5 5d       	subi	r28, 0xD5	; 213
     6ec:	d0 40       	sbci	r29, 0x00	; 0
     6ee:	00 97       	sbiw	r24, 0x00	; 0
     6f0:	51 f0       	breq	.+20     	; 0x706 <main+0x4b0>
     6f2:	cb 52       	subi	r28, 0x2B	; 43
     6f4:	df 4f       	sbci	r29, 0xFF	; 255
     6f6:	28 81       	ld	r18, Y
     6f8:	39 81       	ldd	r19, Y+1	; 0x01
     6fa:	c5 5d       	subi	r28, 0xD5	; 213
     6fc:	d0 40       	sbci	r29, 0x00	; 0
     6fe:	21 30       	cpi	r18, 0x01	; 1
     700:	31 05       	cpc	r19, r1
     702:	39 f0       	breq	.+14     	; 0x712 <main+0x4bc>
     704:	0c c0       	rjmp	.+24     	; 0x71e <main+0x4c8>
                               {
                                   case 0: parser_state = PARSER_STATE_DATA; break;
     706:	fe 01       	movw	r30, r28
     708:	ef 5b       	subi	r30, 0xBF	; 191
     70a:	ff 4f       	sbci	r31, 0xFF	; 255
     70c:	84 e0       	ldi	r24, 0x04	; 4
     70e:	80 83       	st	Z, r24
     710:	0b c0       	rjmp	.+22     	; 0x728 <main+0x4d2>
                                   case 1: parser_state = PARSER_STATE_CHECKSUM; break;
     712:	fe 01       	movw	r30, r28
     714:	ef 5b       	subi	r30, 0xBF	; 191
     716:	ff 4f       	sbci	r31, 0xFF	; 255
     718:	85 e0       	ldi	r24, 0x05	; 5
     71a:	80 83       	st	Z, r24
     71c:	05 c0       	rjmp	.+10     	; 0x728 <main+0x4d2>
                                   default: parser_state = PARSER_STATE_DATA; break;
     71e:	fe 01       	movw	r30, r28
     720:	ef 5b       	subi	r30, 0xBF	; 191
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	80 83       	st	Z, r24
                               }
                               uart_putc(XON);
     728:	81 e1       	ldi	r24, 0x11	; 17
     72a:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
     72e:	35 c2       	rjmp	.+1130   	; 0xb9a <__stack+0x33b>
                           }
                           break;
                      /* Parse Flash-Daten */
                      case PARSER_STATE_DATA:
                          hex_buffer[hex_cnt++] = (uint8_t)c;
     730:	8f ad       	ldd	r24, Y+63	; 0x3f
     732:	28 2f       	mov	r18, r24
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	fe 01       	movw	r30, r28
     738:	e4 5b       	subi	r30, 0xB4	; 180
     73a:	ff 4f       	sbci	r31, 0xFF	; 255
     73c:	40 81       	ld	r20, Z
     73e:	ce 01       	movw	r24, r28
     740:	82 53       	subi	r24, 0x32	; 50
     742:	9f 4f       	sbci	r25, 0xFF	; 255
     744:	fc 01       	movw	r30, r24
     746:	e2 0f       	add	r30, r18
     748:	f3 1f       	adc	r31, r19
     74a:	40 83       	st	Z, r20
     74c:	8f ad       	ldd	r24, Y+63	; 0x3f
     74e:	8f 5f       	subi	r24, 0xFF	; 255
     750:	8f af       	std	Y+63, r24	; 0x3f
                          if(hex_cnt == 2)
     752:	8f ad       	ldd	r24, Y+63	; 0x3f
     754:	82 30       	cpi	r24, 0x02	; 2
     756:	09 f0       	breq	.+2      	; 0x75a <main+0x504>
     758:	20 c2       	rjmp	.+1088   	; 0xb9a <__stack+0x33b>
                          {
                              uart_putc(XOFF);
     75a:	83 e1       	ldi	r24, 0x13	; 19
     75c:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
                              uart_putc('.');
     760:	8e e2       	ldi	r24, 0x2E	; 46
     762:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
                              hex_cnt = 0;
     766:	1f ae       	std	Y+63, r1	; 0x3f
                              flash_data[flash_cnt] = (uint8_t)hex2num(hex_buffer, 2);
     768:	fe 01       	movw	r30, r28
     76a:	ec 5b       	subi	r30, 0xBC	; 188
     76c:	ff 4f       	sbci	r31, 0xFF	; 255
     76e:	00 81       	ld	r16, Z
     770:	11 81       	ldd	r17, Z+1	; 0x01
     772:	ce 01       	movw	r24, r28
     774:	82 53       	subi	r24, 0x32	; 50
     776:	9f 4f       	sbci	r25, 0xFF	; 255
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <hex2num>
     77e:	28 2f       	mov	r18, r24
     780:	ce 01       	movw	r24, r28
     782:	82 5b       	subi	r24, 0xB2	; 178
     784:	9f 4f       	sbci	r25, 0xFF	; 255
     786:	fc 01       	movw	r30, r24
     788:	e0 0f       	add	r30, r16
     78a:	f1 1f       	adc	r31, r17
     78c:	20 83       	st	Z, r18
                              hex_check += flash_data[flash_cnt];
     78e:	fe 01       	movw	r30, r28
     790:	ec 5b       	subi	r30, 0xBC	; 188
     792:	ff 4f       	sbci	r31, 0xFF	; 255
     794:	20 81       	ld	r18, Z
     796:	31 81       	ldd	r19, Z+1	; 0x01
     798:	ce 01       	movw	r24, r28
     79a:	82 5b       	subi	r24, 0xB2	; 178
     79c:	9f 4f       	sbci	r25, 0xFF	; 255
     79e:	fc 01       	movw	r30, r24
     7a0:	e2 0f       	add	r30, r18
     7a2:	f3 1f       	adc	r31, r19
     7a4:	80 81       	ld	r24, Z
     7a6:	28 2f       	mov	r18, r24
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	de 01       	movw	r26, r28
     7ac:	aa 5b       	subi	r26, 0xBA	; 186
     7ae:	bf 4f       	sbci	r27, 0xFF	; 255
     7b0:	fe 01       	movw	r30, r28
     7b2:	ea 5b       	subi	r30, 0xBA	; 186
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	80 81       	ld	r24, Z
     7b8:	91 81       	ldd	r25, Z+1	; 0x01
     7ba:	82 0f       	add	r24, r18
     7bc:	93 1f       	adc	r25, r19
     7be:	8d 93       	st	X+, r24
     7c0:	9c 93       	st	X, r25
                              flash_cnt++;
     7c2:	de 01       	movw	r26, r28
     7c4:	ac 5b       	subi	r26, 0xBC	; 188
     7c6:	bf 4f       	sbci	r27, 0xFF	; 255
     7c8:	fe 01       	movw	r30, r28
     7ca:	ec 5b       	subi	r30, 0xBC	; 188
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	80 81       	ld	r24, Z
     7d0:	91 81       	ldd	r25, Z+1	; 0x01
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	11 96       	adiw	r26, 0x01	; 1
     7d6:	9c 93       	st	X, r25
     7d8:	8e 93       	st	-X, r24
                              hex_data_cnt++;
     7da:	8d ad       	ldd	r24, Y+61	; 0x3d
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	8d af       	std	Y+61, r24	; 0x3d
                              if(hex_data_cnt == hex_size)
     7e0:	9d ad       	ldd	r25, Y+61	; 0x3d
     7e2:	8e ad       	ldd	r24, Y+62	; 0x3e
     7e4:	98 17       	cp	r25, r24
     7e6:	39 f4       	brne	.+14     	; 0x7f6 <main+0x5a0>
                              {
                                  parser_state = PARSER_STATE_CHECKSUM;
     7e8:	fe 01       	movw	r30, r28
     7ea:	ef 5b       	subi	r30, 0xBF	; 191
     7ec:	ff 4f       	sbci	r31, 0xFF	; 255
     7ee:	85 e0       	ldi	r24, 0x05	; 5
     7f0:	80 83       	st	Z, r24
                                  hex_data_cnt=0;
     7f2:	1d ae       	std	Y+61, r1	; 0x3d
                                  hex_cnt = 0;
     7f4:	1f ae       	std	Y+63, r1	; 0x3f
                              }
                              /* Puffer voll -> schreibe Page */
                              if(flash_cnt == SPM_PAGESIZE)
     7f6:	fe 01       	movw	r30, r28
     7f8:	ec 5b       	subi	r30, 0xBC	; 188
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	80 81       	ld	r24, Z
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	80 38       	cpi	r24, 0x80	; 128
     802:	91 05       	cpc	r25, r1
     804:	09 f0       	breq	.+2      	; 0x808 <main+0x5b2>
     806:	99 c0       	rjmp	.+306    	; 0x93a <__stack+0xdb>
                              {
                                  uart_puts("P\n\r");
     808:	86 e8       	ldi	r24, 0x86	; 134
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_puts>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a8 ec       	ldi	r26, 0xC8	; 200
     816:	b2 e4       	ldi	r27, 0x42	; 66
     818:	8f a3       	std	Y+39, r24	; 0x27
     81a:	98 a7       	std	Y+40, r25	; 0x28
     81c:	a9 a7       	std	Y+41, r26	; 0x29
     81e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     820:	6f a1       	ldd	r22, Y+39	; 0x27
     822:	78 a5       	ldd	r23, Y+40	; 0x28
     824:	89 a5       	ldd	r24, Y+41	; 0x29
     826:	9a a5       	ldd	r25, Y+42	; 0x2a
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	4a e7       	ldi	r20, 0x7A	; 122
     82e:	55 e4       	ldi	r21, 0x45	; 69
     830:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	8b a3       	std	Y+35, r24	; 0x23
     83a:	9c a3       	std	Y+36, r25	; 0x24
     83c:	ad a3       	std	Y+37, r26	; 0x25
     83e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     840:	6b a1       	ldd	r22, Y+35	; 0x23
     842:	7c a1       	ldd	r23, Y+36	; 0x24
     844:	8d a1       	ldd	r24, Y+37	; 0x25
     846:	9e a1       	ldd	r25, Y+38	; 0x26
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e8       	ldi	r20, 0x80	; 128
     84e:	5f e3       	ldi	r21, 0x3F	; 63
     850:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__ltsf2>
     854:	88 23       	and	r24, r24
     856:	2c f4       	brge	.+10     	; 0x862 <__stack+0x3>
		__ticks = 1;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	9a a3       	std	Y+34, r25	; 0x22
     85e:	89 a3       	std	Y+33, r24	; 0x21
     860:	3f c0       	rjmp	.+126    	; 0x8e0 <__stack+0x81>
	else if (__tmp > 65535)
     862:	6b a1       	ldd	r22, Y+35	; 0x23
     864:	7c a1       	ldd	r23, Y+36	; 0x24
     866:	8d a1       	ldd	r24, Y+37	; 0x25
     868:	9e a1       	ldd	r25, Y+38	; 0x26
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	3f ef       	ldi	r19, 0xFF	; 255
     86e:	4f e7       	ldi	r20, 0x7F	; 127
     870:	57 e4       	ldi	r21, 0x47	; 71
     872:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__gtsf2>
     876:	18 16       	cp	r1, r24
     878:	4c f5       	brge	.+82     	; 0x8cc <__stack+0x6d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     87a:	6f a1       	ldd	r22, Y+39	; 0x27
     87c:	78 a5       	ldd	r23, Y+40	; 0x28
     87e:	89 a5       	ldd	r24, Y+41	; 0x29
     880:	9a a5       	ldd	r25, Y+42	; 0x2a
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	40 e2       	ldi	r20, 0x20	; 32
     888:	51 e4       	ldi	r21, 0x41	; 65
     88a:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     88e:	dc 01       	movw	r26, r24
     890:	cb 01       	movw	r24, r22
     892:	bc 01       	movw	r22, r24
     894:	cd 01       	movw	r24, r26
     896:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixunssfsi>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	9a a3       	std	Y+34, r25	; 0x22
     8a0:	89 a3       	std	Y+33, r24	; 0x21
     8a2:	0f c0       	rjmp	.+30     	; 0x8c2 <__stack+0x63>
     8a4:	80 e9       	ldi	r24, 0x90	; 144
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	98 a3       	std	Y+32, r25	; 0x20
     8aa:	8f 8f       	std	Y+31, r24	; 0x1f
     8ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ae:	98 a1       	ldd	r25, Y+32	; 0x20
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <__stack+0x51>
     8b4:	98 a3       	std	Y+32, r25	; 0x20
     8b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ba:	9a a1       	ldd	r25, Y+34	; 0x22
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	9a a3       	std	Y+34, r25	; 0x22
     8c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c2:	89 a1       	ldd	r24, Y+33	; 0x21
     8c4:	9a a1       	ldd	r25, Y+34	; 0x22
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	69 f7       	brne	.-38     	; 0x8a4 <__stack+0x45>
     8ca:	14 c0       	rjmp	.+40     	; 0x8f4 <__stack+0x95>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8cc:	6b a1       	ldd	r22, Y+35	; 0x23
     8ce:	7c a1       	ldd	r23, Y+36	; 0x24
     8d0:	8d a1       	ldd	r24, Y+37	; 0x25
     8d2:	9e a1       	ldd	r25, Y+38	; 0x26
     8d4:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixunssfsi>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	9a a3       	std	Y+34, r25	; 0x22
     8de:	89 a3       	std	Y+33, r24	; 0x21
     8e0:	89 a1       	ldd	r24, Y+33	; 0x21
     8e2:	9a a1       	ldd	r25, Y+34	; 0x22
     8e4:	9e 8f       	std	Y+30, r25	; 0x1e
     8e6:	8d 8f       	std	Y+29, r24	; 0x1d
     8e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <__stack+0x8d>
     8f0:	9e 8f       	std	Y+30, r25	; 0x1e
     8f2:	8d 8f       	std	Y+29, r24	; 0x1d
                                  _delay_ms(100);
                                  program_page((uint16_t)flash_page, flash_data);
     8f4:	fe 01       	movw	r30, r28
     8f6:	e8 5b       	subi	r30, 0xB8	; 184
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	cc 01       	movw	r24, r24
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	9e 01       	movw	r18, r28
     906:	22 5b       	subi	r18, 0xB2	; 178
     908:	3f 4f       	sbci	r19, 0xFF	; 255
     90a:	bc 01       	movw	r22, r24
     90c:	cd 01       	movw	r24, r26
     90e:	a9 01       	movw	r20, r18
     910:	0e 94 49 00 	call	0x92	; 0x92 <program_page>
                                  memset(flash_data, 0xFF, sizeof(flash_data));
     914:	ce 01       	movw	r24, r28
     916:	82 5b       	subi	r24, 0xB2	; 178
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	6f ef       	ldi	r22, 0xFF	; 255
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	40 e8       	ldi	r20, 0x80	; 128
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <memset>
                                  flash_cnt = 0;
     926:	fe 01       	movw	r30, r28
     928:	ec 5b       	subi	r30, 0xBC	; 188
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	11 82       	std	Z+1, r1	; 0x01
     92e:	10 82       	st	Z, r1
                                  flash_page_flag = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	fe 01       	movw	r30, r28
     934:	e0 5c       	subi	r30, 0xC0	; 192
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	80 83       	st	Z, r24
                              }
                              uart_putc(XON);
     93a:	81 e1       	ldi	r24, 0x11	; 17
     93c:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
     940:	2c c1       	rjmp	.+600    	; 0xb9a <__stack+0x33b>
                          }
                          break;
                      /* Parse Checksumme */
                      case PARSER_STATE_CHECKSUM:
                          hex_buffer[hex_cnt++] = (uint8_t)c;
     942:	8f ad       	ldd	r24, Y+63	; 0x3f
     944:	28 2f       	mov	r18, r24
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	fe 01       	movw	r30, r28
     94a:	e4 5b       	subi	r30, 0xB4	; 180
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	40 81       	ld	r20, Z
     950:	ce 01       	movw	r24, r28
     952:	82 53       	subi	r24, 0x32	; 50
     954:	9f 4f       	sbci	r25, 0xFF	; 255
     956:	fc 01       	movw	r30, r24
     958:	e2 0f       	add	r30, r18
     95a:	f3 1f       	adc	r31, r19
     95c:	40 83       	st	Z, r20
     95e:	8f ad       	ldd	r24, Y+63	; 0x3f
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	8f af       	std	Y+63, r24	; 0x3f
                          if(hex_cnt == 2)
     964:	8f ad       	ldd	r24, Y+63	; 0x3f
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	09 f0       	breq	.+2      	; 0x96c <__stack+0x10d>
     96a:	17 c1       	rjmp	.+558    	; 0xb9a <__stack+0x33b>
                          {
                              uart_putc(XOFF);
     96c:	83 e1       	ldi	r24, 0x13	; 19
     96e:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
                              hex_checksum = (uint8_t)hex2num(hex_buffer, 2);
     972:	ce 01       	movw	r24, r28
     974:	82 53       	subi	r24, 0x32	; 50
     976:	9f 4f       	sbci	r25, 0xFF	; 255
     978:	62 e0       	ldi	r22, 0x02	; 2
     97a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <hex2num>
     97e:	8b af       	std	Y+59, r24	; 0x3b
                              hex_check += hex_checksum;
     980:	8b ad       	ldd	r24, Y+59	; 0x3b
     982:	28 2f       	mov	r18, r24
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	de 01       	movw	r26, r28
     988:	aa 5b       	subi	r26, 0xBA	; 186
     98a:	bf 4f       	sbci	r27, 0xFF	; 255
     98c:	fe 01       	movw	r30, r28
     98e:	ea 5b       	subi	r30, 0xBA	; 186
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	82 0f       	add	r24, r18
     998:	93 1f       	adc	r25, r19
     99a:	8d 93       	st	X+, r24
     99c:	9c 93       	st	X, r25
                              hex_check &= 0x00FF;
     99e:	de 01       	movw	r26, r28
     9a0:	aa 5b       	subi	r26, 0xBA	; 186
     9a2:	bf 4f       	sbci	r27, 0xFF	; 255
     9a4:	fe 01       	movw	r30, r28
     9a6:	ea 5b       	subi	r30, 0xBA	; 186
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	90 70       	andi	r25, 0x00	; 0
     9b0:	11 96       	adiw	r26, 0x01	; 1
     9b2:	9c 93       	st	X, r25
     9b4:	8e 93       	st	-X, r24
                              /* Dateiende -> schreibe Restdaten */
                              if(hex_type == 1)
     9b6:	8c ad       	ldd	r24, Y+60	; 0x3c
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	09 f0       	breq	.+2      	; 0x9be <__stack+0x15f>
     9bc:	8a c0       	rjmp	.+276    	; 0xad2 <__stack+0x273>
                              {
                                  uart_puts("P\n\r");
     9be:	86 e8       	ldi	r24, 0x86	; 134
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_puts>
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	a8 ec       	ldi	r26, 0xC8	; 200
     9cc:	b2 e4       	ldi	r27, 0x42	; 66
     9ce:	89 8f       	std	Y+25, r24	; 0x19
     9d0:	9a 8f       	std	Y+26, r25	; 0x1a
     9d2:	ab 8f       	std	Y+27, r26	; 0x1b
     9d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9d6:	69 8d       	ldd	r22, Y+25	; 0x19
     9d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	4a e7       	ldi	r20, 0x7A	; 122
     9e4:	55 e4       	ldi	r21, 0x45	; 69
     9e6:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	8d 8b       	std	Y+21, r24	; 0x15
     9f0:	9e 8b       	std	Y+22, r25	; 0x16
     9f2:	af 8b       	std	Y+23, r26	; 0x17
     9f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9f6:	6d 89       	ldd	r22, Y+21	; 0x15
     9f8:	7e 89       	ldd	r23, Y+22	; 0x16
     9fa:	8f 89       	ldd	r24, Y+23	; 0x17
     9fc:	98 8d       	ldd	r25, Y+24	; 0x18
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e8       	ldi	r20, 0x80	; 128
     a04:	5f e3       	ldi	r21, 0x3F	; 63
     a06:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__ltsf2>
     a0a:	88 23       	and	r24, r24
     a0c:	2c f4       	brge	.+10     	; 0xa18 <__stack+0x1b9>
		__ticks = 1;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 8b       	std	Y+20, r25	; 0x14
     a14:	8b 8b       	std	Y+19, r24	; 0x13
     a16:	3f c0       	rjmp	.+126    	; 0xa96 <__stack+0x237>
	else if (__tmp > 65535)
     a18:	6d 89       	ldd	r22, Y+21	; 0x15
     a1a:	7e 89       	ldd	r23, Y+22	; 0x16
     a1c:	8f 89       	ldd	r24, Y+23	; 0x17
     a1e:	98 8d       	ldd	r25, Y+24	; 0x18
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	3f ef       	ldi	r19, 0xFF	; 255
     a24:	4f e7       	ldi	r20, 0x7F	; 127
     a26:	57 e4       	ldi	r21, 0x47	; 71
     a28:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__gtsf2>
     a2c:	18 16       	cp	r1, r24
     a2e:	4c f5       	brge	.+82     	; 0xa82 <__stack+0x223>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a30:	69 8d       	ldd	r22, Y+25	; 0x19
     a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e2       	ldi	r20, 0x20	; 32
     a3e:	51 e4       	ldi	r21, 0x41	; 65
     a40:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     a44:	dc 01       	movw	r26, r24
     a46:	cb 01       	movw	r24, r22
     a48:	bc 01       	movw	r22, r24
     a4a:	cd 01       	movw	r24, r26
     a4c:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixunssfsi>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	9c 8b       	std	Y+20, r25	; 0x14
     a56:	8b 8b       	std	Y+19, r24	; 0x13
     a58:	0f c0       	rjmp	.+30     	; 0xa78 <__stack+0x219>
     a5a:	80 e9       	ldi	r24, 0x90	; 144
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	9a 8b       	std	Y+18, r25	; 0x12
     a60:	89 8b       	std	Y+17, r24	; 0x11
     a62:	89 89       	ldd	r24, Y+17	; 0x11
     a64:	9a 89       	ldd	r25, Y+18	; 0x12
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <__stack+0x207>
     a6a:	9a 8b       	std	Y+18, r25	; 0x12
     a6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6e:	8b 89       	ldd	r24, Y+19	; 0x13
     a70:	9c 89       	ldd	r25, Y+20	; 0x14
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	9c 8b       	std	Y+20, r25	; 0x14
     a76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a78:	8b 89       	ldd	r24, Y+19	; 0x13
     a7a:	9c 89       	ldd	r25, Y+20	; 0x14
     a7c:	00 97       	sbiw	r24, 0x00	; 0
     a7e:	69 f7       	brne	.-38     	; 0xa5a <__stack+0x1fb>
     a80:	14 c0       	rjmp	.+40     	; 0xaaa <__stack+0x24b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a82:	6d 89       	ldd	r22, Y+21	; 0x15
     a84:	7e 89       	ldd	r23, Y+22	; 0x16
     a86:	8f 89       	ldd	r24, Y+23	; 0x17
     a88:	98 8d       	ldd	r25, Y+24	; 0x18
     a8a:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixunssfsi>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	9c 8b       	std	Y+20, r25	; 0x14
     a94:	8b 8b       	std	Y+19, r24	; 0x13
     a96:	8b 89       	ldd	r24, Y+19	; 0x13
     a98:	9c 89       	ldd	r25, Y+20	; 0x14
     a9a:	98 8b       	std	Y+16, r25	; 0x10
     a9c:	8f 87       	std	Y+15, r24	; 0x0f
     a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     aa0:	98 89       	ldd	r25, Y+16	; 0x10
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <__stack+0x243>
     aa6:	98 8b       	std	Y+16, r25	; 0x10
     aa8:	8f 87       	std	Y+15, r24	; 0x0f
                                  _delay_ms(100);
                                  program_page((uint16_t)flash_page, flash_data);
     aaa:	fe 01       	movw	r30, r28
     aac:	e8 5b       	subi	r30, 0xB8	; 184
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	cc 01       	movw	r24, r24
     ab6:	a0 e0       	ldi	r26, 0x00	; 0
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	9e 01       	movw	r18, r28
     abc:	22 5b       	subi	r18, 0xB2	; 178
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	bc 01       	movw	r22, r24
     ac2:	cd 01       	movw	r24, r26
     ac4:	a9 01       	movw	r20, r18
     ac6:	0e 94 49 00 	call	0x92	; 0x92 <program_page>
                                  boot_state = BOOT_STATE_EXIT;
     aca:	fe 01       	movw	r30, r28
     acc:	ee 5b       	subi	r30, 0xBE	; 190
     ace:	ff 4f       	sbci	r31, 0xFF	; 255
     ad0:	10 82       	st	Z, r1
                              }
                              /* Überprüfe Checksumme -> muss '0' sein */
                              if(hex_check == 0) parser_state = PARSER_STATE_START;
     ad2:	fe 01       	movw	r30, r28
     ad4:	ea 5b       	subi	r30, 0xBA	; 186
     ad6:	ff 4f       	sbci	r31, 0xFF	; 255
     ad8:	80 81       	ld	r24, Z
     ada:	91 81       	ldd	r25, Z+1	; 0x01
     adc:	00 97       	sbiw	r24, 0x00	; 0
     ade:	29 f4       	brne	.+10     	; 0xaea <__stack+0x28b>
     ae0:	fe 01       	movw	r30, r28
     ae2:	ef 5b       	subi	r30, 0xBF	; 191
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	10 82       	st	Z, r1
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <__stack+0x295>
                              else parser_state = PARSER_STATE_ERROR;
     aea:	fe 01       	movw	r30, r28
     aec:	ef 5b       	subi	r30, 0xBF	; 191
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	86 e0       	ldi	r24, 0x06	; 6
     af2:	80 83       	st	Z, r24
                              uart_putc(XON);
     af4:	81 e1       	ldi	r24, 0x11	; 17
     af6:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
     afa:	4f c0       	rjmp	.+158    	; 0xb9a <__stack+0x33b>
                          }
                          break;
                      /* Parserfehler (falsche Checksumme) */
                      case PARSER_STATE_ERROR:
                          uart_putc('#');
     afc:	83 e2       	ldi	r24, 0x23	; 35
     afe:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
     b02:	4b c0       	rjmp	.+150    	; 0xb9a <__stack+0x33b>
                      default:
                          break;
                  }
             }
             /* Programmzustand: UART Kommunikation */
             else if(boot_state != BOOT_STATE_PARSER)
     b04:	fe 01       	movw	r30, r28
     b06:	ee 5b       	subi	r30, 0xBE	; 190
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	80 81       	ld	r24, Z
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__stack+0x2b3>
     b10:	44 c0       	rjmp	.+136    	; 0xb9a <__stack+0x33b>
             {
                 switch((uint8_t)c)
     b12:	fe 01       	movw	r30, r28
     b14:	e4 5b       	subi	r30, 0xB4	; 180
     b16:	ff 4f       	sbci	r31, 0xFF	; 255
     b18:	80 81       	ld	r24, Z
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	cd 52       	subi	r28, 0x2D	; 45
     b20:	df 4f       	sbci	r29, 0xFF	; 255
     b22:	39 83       	std	Y+1, r19	; 0x01
     b24:	28 83       	st	Y, r18
     b26:	c3 5d       	subi	r28, 0xD3	; 211
     b28:	d0 40       	sbci	r29, 0x00	; 0
     b2a:	cd 52       	subi	r28, 0x2D	; 45
     b2c:	df 4f       	sbci	r29, 0xFF	; 255
     b2e:	88 81       	ld	r24, Y
     b30:	99 81       	ldd	r25, Y+1	; 0x01
     b32:	c3 5d       	subi	r28, 0xD3	; 211
     b34:	d0 40       	sbci	r29, 0x00	; 0
     b36:	80 37       	cpi	r24, 0x70	; 112
     b38:	91 05       	cpc	r25, r1
     b3a:	51 f0       	breq	.+20     	; 0xb50 <__stack+0x2f1>
     b3c:	cd 52       	subi	r28, 0x2D	; 45
     b3e:	df 4f       	sbci	r29, 0xFF	; 255
     b40:	28 81       	ld	r18, Y
     b42:	39 81       	ldd	r19, Y+1	; 0x01
     b44:	c3 5d       	subi	r28, 0xD3	; 211
     b46:	d0 40       	sbci	r29, 0x00	; 0
     b48:	21 37       	cpi	r18, 0x71	; 113
     b4a:	31 05       	cpc	r19, r1
     b4c:	79 f0       	breq	.+30     	; 0xb6c <__stack+0x30d>
     b4e:	17 c0       	rjmp	.+46     	; 0xb7e <__stack+0x31f>
                 {
                     case 'p':
                         boot_state = BOOT_STATE_PARSER;
     b50:	fe 01       	movw	r30, r28
     b52:	ee 5b       	subi	r30, 0xBE	; 190
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 83       	st	Z, r24
                         uart_puts("Programmiere den Flash!\n\r");
     b5a:	8a e8       	ldi	r24, 0x8A	; 138
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_puts>
                         uart_puts("Kopiere die Hex-Datei und füge sie"
     b62:	84 ea       	ldi	r24, 0xA4	; 164
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_puts>
     b6a:	17 c0       	rjmp	.+46     	; 0xb9a <__stack+0x33b>
                                   " hier ein (rechte Maustaste)\n\r");
                         break;
                     case 'q':
                         boot_state = BOOT_STATE_EXIT;
     b6c:	fe 01       	movw	r30, r28
     b6e:	ee 5b       	subi	r30, 0xBE	; 190
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	10 82       	st	Z, r1
                         uart_puts("Verlasse den Bootloader!\n\r");
     b74:	86 ee       	ldi	r24, 0xE6	; 230
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_puts>
     b7c:	0e c0       	rjmp	.+28     	; 0xb9a <__stack+0x33b>
                         break;
                     default:
                         uart_puts("Du hast folgendes Zeichen gesendet: ");
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_puts>
                         uart_putc((unsigned char)c);
     b86:	fe 01       	movw	r30, r28
     b88:	e4 5b       	subi	r30, 0xB4	; 180
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
                         uart_puts("\n\r");
     b92:	86 e2       	ldi	r24, 0x26	; 38
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_puts>
                         break;
                 }
             }
        }
    }
    while(boot_state!=BOOT_STATE_EXIT);
     b9a:	fe 01       	movw	r30, r28
     b9c:	ee 5b       	subi	r30, 0xBE	; 190
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	80 81       	ld	r24, Z
     ba2:	88 23       	and	r24, r24
     ba4:	09 f0       	breq	.+2      	; 0xba8 <__stack+0x349>
     ba6:	35 cc       	rjmp	.-1942   	; 0x412 <main+0x1bc>

    uart_puts("Reset AVR!\n\r");
     ba8:	89 e2       	ldi	r24, 0x29	; 41
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_puts>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	aa e7       	ldi	r26, 0x7A	; 122
     bb6:	b4 e4       	ldi	r27, 0x44	; 68
     bb8:	8b 87       	std	Y+11, r24	; 0x0b
     bba:	9c 87       	std	Y+12, r25	; 0x0c
     bbc:	ad 87       	std	Y+13, r26	; 0x0d
     bbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	4a e7       	ldi	r20, 0x7A	; 122
     bce:	55 e4       	ldi	r21, 0x45	; 69
     bd0:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	8f 83       	std	Y+7, r24	; 0x07
     bda:	98 87       	std	Y+8, r25	; 0x08
     bdc:	a9 87       	std	Y+9, r26	; 0x09
     bde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be0:	6f 81       	ldd	r22, Y+7	; 0x07
     be2:	78 85       	ldd	r23, Y+8	; 0x08
     be4:	89 85       	ldd	r24, Y+9	; 0x09
     be6:	9a 85       	ldd	r25, Y+10	; 0x0a
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e8       	ldi	r20, 0x80	; 128
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__ltsf2>
     bf4:	88 23       	and	r24, r24
     bf6:	2c f4       	brge	.+10     	; 0xc02 <__stack+0x3a3>
		__ticks = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9e 83       	std	Y+6, r25	; 0x06
     bfe:	8d 83       	std	Y+5, r24	; 0x05
     c00:	3f c0       	rjmp	.+126    	; 0xc80 <__stack+0x421>
	else if (__tmp > 65535)
     c02:	6f 81       	ldd	r22, Y+7	; 0x07
     c04:	78 85       	ldd	r23, Y+8	; 0x08
     c06:	89 85       	ldd	r24, Y+9	; 0x09
     c08:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	3f ef       	ldi	r19, 0xFF	; 255
     c0e:	4f e7       	ldi	r20, 0x7F	; 127
     c10:	57 e4       	ldi	r21, 0x47	; 71
     c12:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__gtsf2>
     c16:	18 16       	cp	r1, r24
     c18:	4c f5       	brge	.+82     	; 0xc6c <__stack+0x40d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c20:	9e 85       	ldd	r25, Y+14	; 0x0e
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e2       	ldi	r20, 0x20	; 32
     c28:	51 e4       	ldi	r21, 0x41	; 65
     c2a:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	0f c0       	rjmp	.+30     	; 0xc62 <__stack+0x403>
     c44:	80 e9       	ldi	r24, 0x90	; 144
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <__stack+0x3f1>
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c58:	8d 81       	ldd	r24, Y+5	; 0x05
     c5a:	9e 81       	ldd	r25, Y+6	; 0x06
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	9e 83       	std	Y+6, r25	; 0x06
     c60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	69 f7       	brne	.-38     	; 0xc44 <__stack+0x3e5>
     c6a:	14 c0       	rjmp	.+40     	; 0xc94 <__stack+0x435>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c6c:	6f 81       	ldd	r22, Y+7	; 0x07
     c6e:	78 85       	ldd	r23, Y+8	; 0x08
     c70:	89 85       	ldd	r24, Y+9	; 0x09
     c72:	9a 85       	ldd	r25, Y+10	; 0x0a
     c74:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixunssfsi>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	9e 83       	std	Y+6, r25	; 0x06
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <__stack+0x42d>
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

    /* Interrupt Vektoren wieder gerade biegen */
    temp = MCUCR;
     c94:	e5 e5       	ldi	r30, 0x55	; 85
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	de 01       	movw	r26, r28
     c9a:	ad 5b       	subi	r26, 0xBD	; 189
     c9c:	bf 4f       	sbci	r27, 0xFF	; 255
     c9e:	80 81       	ld	r24, Z
     ca0:	8c 93       	st	X, r24
    MCUCR = temp | (1<<IVCE);
     ca2:	a5 e5       	ldi	r26, 0x55	; 85
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	fe 01       	movw	r30, r28
     ca8:	ed 5b       	subi	r30, 0xBD	; 189
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	80 81       	ld	r24, Z
     cae:	81 60       	ori	r24, 0x01	; 1
     cb0:	8c 93       	st	X, r24
    MCUCR = temp & ~(1<<IVSEL);
     cb2:	a5 e5       	ldi	r26, 0x55	; 85
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	fe 01       	movw	r30, r28
     cb8:	ed 5b       	subi	r30, 0xBD	; 189
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	80 81       	ld	r24, Z
     cbe:	8d 7f       	andi	r24, 0xFD	; 253
     cc0:	8c 93       	st	X, r24

    /* Reset */
    start();
     cc2:	e9 ad       	ldd	r30, Y+57	; 0x39
     cc4:	fa ad       	ldd	r31, Y+58	; 0x3a
     cc6:	09 95       	icall

    return 0;
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
}
     ccc:	c8 52       	subi	r28, 0x28	; 40
     cce:	df 4f       	sbci	r29, 0xFF	; 255
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	8f 93       	push	r24
     cf0:	9f 93       	push	r25
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <__vector_13+0x18>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <__vector_13+0x1a>
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     d02:	eb e2       	ldi	r30, 0x2B	; 43
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
     d0a:	ec e2       	ldi	r30, 0x2C	; 44
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	88 71       	andi	r24, 0x18	; 24
     d16:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     d18:	80 91 80 01 	lds	r24, 0x0180
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	8f 71       	andi	r24, 0x1F	; 31
     d20:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
     d22:	90 91 81 01 	lds	r25, 0x0181
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	89 17       	cp	r24, r25
     d2a:	19 f4       	brne	.+6      	; 0xd32 <__vector_13+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	0b c0       	rjmp	.+22     	; 0xd48 <__vector_13+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     d32:	8c 81       	ldd	r24, Y+4	; 0x04
     d34:	80 93 80 01 	sts	0x0180, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	fc 01       	movw	r30, r24
     d40:	e2 5a       	subi	r30, 0xA2	; 162
     d42:	fe 4f       	sbci	r31, 0xFE	; 254
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;   
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	80 93 82 01 	sts	0x0182, r24
}
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0
     d68:	1f 90       	pop	r1
     d6a:	18 95       	reti

00000d6c <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     d6c:	1f 92       	push	r1
     d6e:	0f 92       	push	r0
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	0f 92       	push	r0
     d74:	11 24       	eor	r1, r1
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     d8c:	90 91 7e 01 	lds	r25, 0x017E
     d90:	80 91 7f 01 	lds	r24, 0x017F
     d94:	98 17       	cp	r25, r24
     d96:	99 f0       	breq	.+38     	; 0xdbe <__vector_14+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     d98:	80 91 7f 01 	lds	r24, 0x017F
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	8f 71       	andi	r24, 0x1F	; 31
     da0:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	80 93 7f 01 	sts	0x017F, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     da8:	ac e2       	ldi	r26, 0x2C	; 44
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	fc 01       	movw	r30, r24
     db4:	e2 5c       	subi	r30, 0xC2	; 194
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	80 81       	ld	r24, Z
     dba:	8c 93       	st	X, r24
     dbc:	07 c0       	rjmp	.+14     	; 0xdcc <__vector_14+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     dbe:	aa e2       	ldi	r26, 0x2A	; 42
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ea e2       	ldi	r30, 0x2A	; 42
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8f 7d       	andi	r24, 0xDF	; 223
     dca:	8c 93       	st	X, r24
    }
}
     dcc:	0f 90       	pop	r0
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	00 d0       	rcall	.+0      	; 0xdee <uart_init+0x6>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	9a 83       	std	Y+2, r25	; 0x02
     df4:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
     df6:	10 92 7e 01 	sts	0x017E, r1
    UART_TxTail = 0;
     dfa:	10 92 7f 01 	sts	0x017F, r1
    UART_RxHead = 0;
     dfe:	10 92 80 01 	sts	0x0180, r1
    UART_RxTail = 0;
     e02:	10 92 81 01 	sts	0x0181, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	99 23       	and	r25, r25
     e0c:	4c f4       	brge	.+18     	; 0xe20 <uart_init+0x38>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
     e0e:	eb e2       	ldi	r30, 0x2B	; 43
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	80 83       	st	Z, r24
    	 baudrate &= ~0x8000;
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	9f 77       	andi	r25, 0x7F	; 127
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
     e20:	e0 e4       	ldi	r30, 0x40	; 64
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	89 2f       	mov	r24, r25
     e2a:	99 27       	eor	r25, r25
     e2c:	80 83       	st	Z, r24
    UBRRL = (unsigned char) baudrate;
     e2e:	e9 e2       	ldi	r30, 0x29	; 41
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	80 83       	st	Z, r24
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
     e36:	ea e2       	ldi	r30, 0x2A	; 42
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	88 e9       	ldi	r24, 0x98	; 152
     e3c:	80 83       	st	Z, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
     e3e:	e0 e4       	ldi	r30, 0x40	; 64
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	86 e8       	ldi	r24, 0x86	; 134
     e44:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <uart_getc+0x6>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <uart_getc+0x8>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     e5c:	90 91 80 01 	lds	r25, 0x0180
     e60:	80 91 81 01 	lds	r24, 0x0181
     e64:	98 17       	cp	r25, r24
     e66:	29 f4       	brne	.+10     	; 0xe72 <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
     e70:	1d c0       	rjmp	.+58     	; 0xeac <uart_getc+0x5c>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     e72:	80 91 81 01 	lds	r24, 0x0181
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	8f 71       	andi	r24, 0x1F	; 31
     e7a:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	80 93 81 01 	sts	0x0181, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	fc 01       	movw	r30, r24
     e8a:	e2 5a       	subi	r30, 0xA2	; 162
     e8c:	fe 4f       	sbci	r31, 0xFE	; 254
     e8e:	80 81       	ld	r24, Z
     e90:	89 83       	std	Y+1, r24	; 0x01
    
    return (UART_LastRxError << 8) + data;
     e92:	80 91 82 01 	lds	r24, 0x0182
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	38 2f       	mov	r19, r24
     e9c:	22 27       	eor	r18, r18
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	82 0f       	add	r24, r18
     ea6:	93 1f       	adc	r25, r19
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	8b 83       	std	Y+3, r24	; 0x03
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <uart_putc+0x6>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     eca:	80 91 7e 01 	lds	r24, 0x017E
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	8f 71       	andi	r24, 0x1F	; 31
     ed2:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
     ed4:	90 91 7f 01 	lds	r25, 0x017F
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	89 17       	cp	r24, r25
     edc:	d9 f3       	breq	.-10     	; 0xed4 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	fc 01       	movw	r30, r24
     ee6:	e2 5c       	subi	r30, 0xC2	; 194
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	80 93 7e 01 	sts	0x017E, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     ef4:	aa e2       	ldi	r26, 0x2A	; 42
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ea e2       	ldi	r30, 0x2A	; 42
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 62       	ori	r24, 0x20	; 32
     f00:	8c 93       	st	X, r24

}/* uart_putc */
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <uart_puts+0x6>
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	0b c0       	rjmp	.+22     	; 0xf32 <uart_puts+0x26>
    while (*s) 
      uart_putc(*s++);
     f1c:	e9 81       	ldd	r30, Y+1	; 0x01
     f1e:	fa 81       	ldd	r31, Y+2	; 0x02
     f20:	20 81       	ld	r18, Z
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	82 2f       	mov	r24, r18
     f2e:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     f32:	e9 81       	ldd	r30, Y+1	; 0x01
     f34:	fa 81       	ldd	r31, Y+2	; 0x02
     f36:	80 81       	ld	r24, Z
     f38:	88 23       	and	r24, r24
     f3a:	81 f7       	brne	.-32     	; 0xf1c <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <uart_puts_p+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <uart_puts_p+0x8>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <uart_puts_p+0xa>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	9d 83       	std	Y+5, r25	; 0x05
     f56:	8c 83       	std	Y+4, r24	; 0x04
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <uart_puts_p+0x1a>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     f5a:	8e 81       	ldd	r24, Y+6	; 0x06
     f5c:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	9b 83       	std	Y+3, r25	; 0x03
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	9d 83       	std	Y+5, r25	; 0x05
     f70:	8c 83       	std	Y+4, r24	; 0x04
     f72:	ea 81       	ldd	r30, Y+2	; 0x02
     f74:	fb 81       	ldd	r31, Y+3	; 0x03
     f76:	84 91       	lpm	r24, Z+
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	8e 83       	std	Y+6, r24	; 0x06
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
     f80:	88 23       	and	r24, r24
     f82:	59 f7       	brne	.-42     	; 0xf5a <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
     f84:	26 96       	adiw	r28, 0x06	; 6
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <__fixunssfsi>:
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	7b 01       	movw	r14, r22
     fa0:	8c 01       	movw	r16, r24
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	5f e4       	ldi	r21, 0x4F	; 79
     faa:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__gesf2>
     fae:	88 23       	and	r24, r24
     fb0:	8c f0       	brlt	.+34     	; 0xfd4 <__fixunssfsi+0x3e>
     fb2:	c8 01       	movw	r24, r16
     fb4:	b7 01       	movw	r22, r14
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	5f e4       	ldi	r21, 0x4F	; 79
     fbe:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     fc2:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__fixsfsi>
     fc6:	9b 01       	movw	r18, r22
     fc8:	ac 01       	movw	r20, r24
     fca:	20 50       	subi	r18, 0x00	; 0
     fcc:	30 40       	sbci	r19, 0x00	; 0
     fce:	40 40       	sbci	r20, 0x00	; 0
     fd0:	50 48       	sbci	r21, 0x80	; 128
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <__fixunssfsi+0x4a>
     fd4:	c8 01       	movw	r24, r16
     fd6:	b7 01       	movw	r22, r14
     fd8:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__fixsfsi>
     fdc:	9b 01       	movw	r18, r22
     fde:	ac 01       	movw	r20, r24
     fe0:	b9 01       	movw	r22, r18
     fe2:	ca 01       	movw	r24, r20
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	08 95       	ret

00000fee <_fpadd_parts>:
     fee:	a0 e0       	ldi	r26, 0x00	; 0
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ed ef       	ldi	r30, 0xFD	; 253
     ff4:	f7 e0       	ldi	r31, 0x07	; 7
     ff6:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__prologue_saves__>
     ffa:	dc 01       	movw	r26, r24
     ffc:	2b 01       	movw	r4, r22
     ffe:	fa 01       	movw	r30, r20
    1000:	9c 91       	ld	r25, X
    1002:	92 30       	cpi	r25, 0x02	; 2
    1004:	08 f4       	brcc	.+2      	; 0x1008 <_fpadd_parts+0x1a>
    1006:	39 c1       	rjmp	.+626    	; 0x127a <_fpadd_parts+0x28c>
    1008:	eb 01       	movw	r28, r22
    100a:	88 81       	ld	r24, Y
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	08 f4       	brcc	.+2      	; 0x1012 <_fpadd_parts+0x24>
    1010:	33 c1       	rjmp	.+614    	; 0x1278 <_fpadd_parts+0x28a>
    1012:	94 30       	cpi	r25, 0x04	; 4
    1014:	69 f4       	brne	.+26     	; 0x1030 <_fpadd_parts+0x42>
    1016:	84 30       	cpi	r24, 0x04	; 4
    1018:	09 f0       	breq	.+2      	; 0x101c <_fpadd_parts+0x2e>
    101a:	2f c1       	rjmp	.+606    	; 0x127a <_fpadd_parts+0x28c>
    101c:	11 96       	adiw	r26, 0x01	; 1
    101e:	9c 91       	ld	r25, X
    1020:	11 97       	sbiw	r26, 0x01	; 1
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	98 17       	cp	r25, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <_fpadd_parts+0x3c>
    1028:	28 c1       	rjmp	.+592    	; 0x127a <_fpadd_parts+0x28c>
    102a:	a6 e3       	ldi	r26, 0x36	; 54
    102c:	b1 e0       	ldi	r27, 0x01	; 1
    102e:	25 c1       	rjmp	.+586    	; 0x127a <_fpadd_parts+0x28c>
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	09 f4       	brne	.+2      	; 0x1036 <_fpadd_parts+0x48>
    1034:	21 c1       	rjmp	.+578    	; 0x1278 <_fpadd_parts+0x28a>
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	a9 f4       	brne	.+42     	; 0x1064 <_fpadd_parts+0x76>
    103a:	92 30       	cpi	r25, 0x02	; 2
    103c:	09 f0       	breq	.+2      	; 0x1040 <_fpadd_parts+0x52>
    103e:	1d c1       	rjmp	.+570    	; 0x127a <_fpadd_parts+0x28c>
    1040:	9a 01       	movw	r18, r20
    1042:	ad 01       	movw	r20, r26
    1044:	88 e0       	ldi	r24, 0x08	; 8
    1046:	ea 01       	movw	r28, r20
    1048:	09 90       	ld	r0, Y+
    104a:	ae 01       	movw	r20, r28
    104c:	e9 01       	movw	r28, r18
    104e:	09 92       	st	Y+, r0
    1050:	9e 01       	movw	r18, r28
    1052:	81 50       	subi	r24, 0x01	; 1
    1054:	c1 f7       	brne	.-16     	; 0x1046 <_fpadd_parts+0x58>
    1056:	e2 01       	movw	r28, r4
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	9c 91       	ld	r25, X
    105e:	89 23       	and	r24, r25
    1060:	81 83       	std	Z+1, r24	; 0x01
    1062:	08 c1       	rjmp	.+528    	; 0x1274 <_fpadd_parts+0x286>
    1064:	92 30       	cpi	r25, 0x02	; 2
    1066:	09 f4       	brne	.+2      	; 0x106a <_fpadd_parts+0x7c>
    1068:	07 c1       	rjmp	.+526    	; 0x1278 <_fpadd_parts+0x28a>
    106a:	12 96       	adiw	r26, 0x02	; 2
    106c:	2d 90       	ld	r2, X+
    106e:	3c 90       	ld	r3, X
    1070:	13 97       	sbiw	r26, 0x03	; 3
    1072:	eb 01       	movw	r28, r22
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	14 96       	adiw	r26, 0x04	; 4
    107a:	ad 90       	ld	r10, X+
    107c:	bd 90       	ld	r11, X+
    107e:	cd 90       	ld	r12, X+
    1080:	dc 90       	ld	r13, X
    1082:	17 97       	sbiw	r26, 0x07	; 7
    1084:	ec 80       	ldd	r14, Y+4	; 0x04
    1086:	fd 80       	ldd	r15, Y+5	; 0x05
    1088:	0e 81       	ldd	r16, Y+6	; 0x06
    108a:	1f 81       	ldd	r17, Y+7	; 0x07
    108c:	91 01       	movw	r18, r2
    108e:	28 1b       	sub	r18, r24
    1090:	39 0b       	sbc	r19, r25
    1092:	b9 01       	movw	r22, r18
    1094:	37 ff       	sbrs	r19, 7
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <_fpadd_parts+0xb2>
    1098:	66 27       	eor	r22, r22
    109a:	77 27       	eor	r23, r23
    109c:	62 1b       	sub	r22, r18
    109e:	73 0b       	sbc	r23, r19
    10a0:	60 32       	cpi	r22, 0x20	; 32
    10a2:	71 05       	cpc	r23, r1
    10a4:	0c f0       	brlt	.+2      	; 0x10a8 <_fpadd_parts+0xba>
    10a6:	61 c0       	rjmp	.+194    	; 0x116a <_fpadd_parts+0x17c>
    10a8:	12 16       	cp	r1, r18
    10aa:	13 06       	cpc	r1, r19
    10ac:	6c f5       	brge	.+90     	; 0x1108 <_fpadd_parts+0x11a>
    10ae:	37 01       	movw	r6, r14
    10b0:	48 01       	movw	r8, r16
    10b2:	06 2e       	mov	r0, r22
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <_fpadd_parts+0xd0>
    10b6:	96 94       	lsr	r9
    10b8:	87 94       	ror	r8
    10ba:	77 94       	ror	r7
    10bc:	67 94       	ror	r6
    10be:	0a 94       	dec	r0
    10c0:	d2 f7       	brpl	.-12     	; 0x10b6 <_fpadd_parts+0xc8>
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <_fpadd_parts+0xe6>
    10cc:	22 0f       	add	r18, r18
    10ce:	33 1f       	adc	r19, r19
    10d0:	44 1f       	adc	r20, r20
    10d2:	55 1f       	adc	r21, r21
    10d4:	6a 95       	dec	r22
    10d6:	d2 f7       	brpl	.-12     	; 0x10cc <_fpadd_parts+0xde>
    10d8:	21 50       	subi	r18, 0x01	; 1
    10da:	30 40       	sbci	r19, 0x00	; 0
    10dc:	40 40       	sbci	r20, 0x00	; 0
    10de:	50 40       	sbci	r21, 0x00	; 0
    10e0:	2e 21       	and	r18, r14
    10e2:	3f 21       	and	r19, r15
    10e4:	40 23       	and	r20, r16
    10e6:	51 23       	and	r21, r17
    10e8:	21 15       	cp	r18, r1
    10ea:	31 05       	cpc	r19, r1
    10ec:	41 05       	cpc	r20, r1
    10ee:	51 05       	cpc	r21, r1
    10f0:	21 f0       	breq	.+8      	; 0x10fa <_fpadd_parts+0x10c>
    10f2:	21 e0       	ldi	r18, 0x01	; 1
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	79 01       	movw	r14, r18
    10fc:	8a 01       	movw	r16, r20
    10fe:	e6 28       	or	r14, r6
    1100:	f7 28       	or	r15, r7
    1102:	08 29       	or	r16, r8
    1104:	19 29       	or	r17, r9
    1106:	3c c0       	rjmp	.+120    	; 0x1180 <_fpadd_parts+0x192>
    1108:	23 2b       	or	r18, r19
    110a:	d1 f1       	breq	.+116    	; 0x1180 <_fpadd_parts+0x192>
    110c:	26 0e       	add	r2, r22
    110e:	37 1e       	adc	r3, r23
    1110:	35 01       	movw	r6, r10
    1112:	46 01       	movw	r8, r12
    1114:	06 2e       	mov	r0, r22
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <_fpadd_parts+0x132>
    1118:	96 94       	lsr	r9
    111a:	87 94       	ror	r8
    111c:	77 94       	ror	r7
    111e:	67 94       	ror	r6
    1120:	0a 94       	dec	r0
    1122:	d2 f7       	brpl	.-12     	; 0x1118 <_fpadd_parts+0x12a>
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	04 c0       	rjmp	.+8      	; 0x1136 <_fpadd_parts+0x148>
    112e:	22 0f       	add	r18, r18
    1130:	33 1f       	adc	r19, r19
    1132:	44 1f       	adc	r20, r20
    1134:	55 1f       	adc	r21, r21
    1136:	6a 95       	dec	r22
    1138:	d2 f7       	brpl	.-12     	; 0x112e <_fpadd_parts+0x140>
    113a:	21 50       	subi	r18, 0x01	; 1
    113c:	30 40       	sbci	r19, 0x00	; 0
    113e:	40 40       	sbci	r20, 0x00	; 0
    1140:	50 40       	sbci	r21, 0x00	; 0
    1142:	2a 21       	and	r18, r10
    1144:	3b 21       	and	r19, r11
    1146:	4c 21       	and	r20, r12
    1148:	5d 21       	and	r21, r13
    114a:	21 15       	cp	r18, r1
    114c:	31 05       	cpc	r19, r1
    114e:	41 05       	cpc	r20, r1
    1150:	51 05       	cpc	r21, r1
    1152:	21 f0       	breq	.+8      	; 0x115c <_fpadd_parts+0x16e>
    1154:	21 e0       	ldi	r18, 0x01	; 1
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	59 01       	movw	r10, r18
    115e:	6a 01       	movw	r12, r20
    1160:	a6 28       	or	r10, r6
    1162:	b7 28       	or	r11, r7
    1164:	c8 28       	or	r12, r8
    1166:	d9 28       	or	r13, r9
    1168:	0b c0       	rjmp	.+22     	; 0x1180 <_fpadd_parts+0x192>
    116a:	82 15       	cp	r24, r2
    116c:	93 05       	cpc	r25, r3
    116e:	2c f0       	brlt	.+10     	; 0x117a <_fpadd_parts+0x18c>
    1170:	1c 01       	movw	r2, r24
    1172:	aa 24       	eor	r10, r10
    1174:	bb 24       	eor	r11, r11
    1176:	65 01       	movw	r12, r10
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <_fpadd_parts+0x192>
    117a:	ee 24       	eor	r14, r14
    117c:	ff 24       	eor	r15, r15
    117e:	87 01       	movw	r16, r14
    1180:	11 96       	adiw	r26, 0x01	; 1
    1182:	9c 91       	ld	r25, X
    1184:	d2 01       	movw	r26, r4
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	8c 91       	ld	r24, X
    118a:	98 17       	cp	r25, r24
    118c:	09 f4       	brne	.+2      	; 0x1190 <_fpadd_parts+0x1a2>
    118e:	45 c0       	rjmp	.+138    	; 0x121a <_fpadd_parts+0x22c>
    1190:	99 23       	and	r25, r25
    1192:	39 f0       	breq	.+14     	; 0x11a2 <_fpadd_parts+0x1b4>
    1194:	a8 01       	movw	r20, r16
    1196:	97 01       	movw	r18, r14
    1198:	2a 19       	sub	r18, r10
    119a:	3b 09       	sbc	r19, r11
    119c:	4c 09       	sbc	r20, r12
    119e:	5d 09       	sbc	r21, r13
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <_fpadd_parts+0x1c0>
    11a2:	a6 01       	movw	r20, r12
    11a4:	95 01       	movw	r18, r10
    11a6:	2e 19       	sub	r18, r14
    11a8:	3f 09       	sbc	r19, r15
    11aa:	40 0b       	sbc	r20, r16
    11ac:	51 0b       	sbc	r21, r17
    11ae:	57 fd       	sbrc	r21, 7
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <_fpadd_parts+0x1d4>
    11b2:	11 82       	std	Z+1, r1	; 0x01
    11b4:	33 82       	std	Z+3, r3	; 0x03
    11b6:	22 82       	std	Z+2, r2	; 0x02
    11b8:	24 83       	std	Z+4, r18	; 0x04
    11ba:	35 83       	std	Z+5, r19	; 0x05
    11bc:	46 83       	std	Z+6, r20	; 0x06
    11be:	57 83       	std	Z+7, r21	; 0x07
    11c0:	1d c0       	rjmp	.+58     	; 0x11fc <_fpadd_parts+0x20e>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	81 83       	std	Z+1, r24	; 0x01
    11c6:	33 82       	std	Z+3, r3	; 0x03
    11c8:	22 82       	std	Z+2, r2	; 0x02
    11ca:	88 27       	eor	r24, r24
    11cc:	99 27       	eor	r25, r25
    11ce:	dc 01       	movw	r26, r24
    11d0:	82 1b       	sub	r24, r18
    11d2:	93 0b       	sbc	r25, r19
    11d4:	a4 0b       	sbc	r26, r20
    11d6:	b5 0b       	sbc	r27, r21
    11d8:	84 83       	std	Z+4, r24	; 0x04
    11da:	95 83       	std	Z+5, r25	; 0x05
    11dc:	a6 83       	std	Z+6, r26	; 0x06
    11de:	b7 83       	std	Z+7, r27	; 0x07
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <_fpadd_parts+0x20e>
    11e2:	22 0f       	add	r18, r18
    11e4:	33 1f       	adc	r19, r19
    11e6:	44 1f       	adc	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	24 83       	std	Z+4, r18	; 0x04
    11ec:	35 83       	std	Z+5, r19	; 0x05
    11ee:	46 83       	std	Z+6, r20	; 0x06
    11f0:	57 83       	std	Z+7, r21	; 0x07
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	93 83       	std	Z+3, r25	; 0x03
    11fa:	82 83       	std	Z+2, r24	; 0x02
    11fc:	24 81       	ldd	r18, Z+4	; 0x04
    11fe:	35 81       	ldd	r19, Z+5	; 0x05
    1200:	46 81       	ldd	r20, Z+6	; 0x06
    1202:	57 81       	ldd	r21, Z+7	; 0x07
    1204:	da 01       	movw	r26, r20
    1206:	c9 01       	movw	r24, r18
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	a1 09       	sbc	r26, r1
    120c:	b1 09       	sbc	r27, r1
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	af 4f       	sbci	r26, 0xFF	; 255
    1214:	bf 43       	sbci	r27, 0x3F	; 63
    1216:	28 f3       	brcs	.-54     	; 0x11e2 <_fpadd_parts+0x1f4>
    1218:	0b c0       	rjmp	.+22     	; 0x1230 <_fpadd_parts+0x242>
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	33 82       	std	Z+3, r3	; 0x03
    121e:	22 82       	std	Z+2, r2	; 0x02
    1220:	ea 0c       	add	r14, r10
    1222:	fb 1c       	adc	r15, r11
    1224:	0c 1d       	adc	r16, r12
    1226:	1d 1d       	adc	r17, r13
    1228:	e4 82       	std	Z+4, r14	; 0x04
    122a:	f5 82       	std	Z+5, r15	; 0x05
    122c:	06 83       	std	Z+6, r16	; 0x06
    122e:	17 83       	std	Z+7, r17	; 0x07
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	80 83       	st	Z, r24
    1234:	24 81       	ldd	r18, Z+4	; 0x04
    1236:	35 81       	ldd	r19, Z+5	; 0x05
    1238:	46 81       	ldd	r20, Z+6	; 0x06
    123a:	57 81       	ldd	r21, Z+7	; 0x07
    123c:	57 ff       	sbrs	r21, 7
    123e:	1a c0       	rjmp	.+52     	; 0x1274 <_fpadd_parts+0x286>
    1240:	c9 01       	movw	r24, r18
    1242:	aa 27       	eor	r26, r26
    1244:	97 fd       	sbrc	r25, 7
    1246:	a0 95       	com	r26
    1248:	ba 2f       	mov	r27, r26
    124a:	81 70       	andi	r24, 0x01	; 1
    124c:	90 70       	andi	r25, 0x00	; 0
    124e:	a0 70       	andi	r26, 0x00	; 0
    1250:	b0 70       	andi	r27, 0x00	; 0
    1252:	56 95       	lsr	r21
    1254:	47 95       	ror	r20
    1256:	37 95       	ror	r19
    1258:	27 95       	ror	r18
    125a:	82 2b       	or	r24, r18
    125c:	93 2b       	or	r25, r19
    125e:	a4 2b       	or	r26, r20
    1260:	b5 2b       	or	r27, r21
    1262:	84 83       	std	Z+4, r24	; 0x04
    1264:	95 83       	std	Z+5, r25	; 0x05
    1266:	a6 83       	std	Z+6, r26	; 0x06
    1268:	b7 83       	std	Z+7, r27	; 0x07
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	93 83       	std	Z+3, r25	; 0x03
    1272:	82 83       	std	Z+2, r24	; 0x02
    1274:	df 01       	movw	r26, r30
    1276:	01 c0       	rjmp	.+2      	; 0x127a <_fpadd_parts+0x28c>
    1278:	d2 01       	movw	r26, r4
    127a:	cd 01       	movw	r24, r26
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	e2 e1       	ldi	r30, 0x12	; 18
    1282:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__epilogue_restores__>

00001286 <__subsf3>:
    1286:	a0 e2       	ldi	r26, 0x20	; 32
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e9 e4       	ldi	r30, 0x49	; 73
    128c:	f9 e0       	ldi	r31, 0x09	; 9
    128e:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
    1292:	69 83       	std	Y+1, r22	; 0x01
    1294:	7a 83       	std	Y+2, r23	; 0x02
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	2d 83       	std	Y+5, r18	; 0x05
    129c:	3e 83       	std	Y+6, r19	; 0x06
    129e:	4f 83       	std	Y+7, r20	; 0x07
    12a0:	58 87       	std	Y+8, r21	; 0x08
    12a2:	e9 e0       	ldi	r30, 0x09	; 9
    12a4:	ee 2e       	mov	r14, r30
    12a6:	f1 2c       	mov	r15, r1
    12a8:	ec 0e       	add	r14, r28
    12aa:	fd 1e       	adc	r15, r29
    12ac:	ce 01       	movw	r24, r28
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	b7 01       	movw	r22, r14
    12b2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    12b6:	8e 01       	movw	r16, r28
    12b8:	0f 5e       	subi	r16, 0xEF	; 239
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	ce 01       	movw	r24, r28
    12be:	05 96       	adiw	r24, 0x05	; 5
    12c0:	b8 01       	movw	r22, r16
    12c2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    12c6:	8a 89       	ldd	r24, Y+18	; 0x12
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	89 27       	eor	r24, r25
    12cc:	8a 8b       	std	Y+18, r24	; 0x12
    12ce:	c7 01       	movw	r24, r14
    12d0:	b8 01       	movw	r22, r16
    12d2:	ae 01       	movw	r20, r28
    12d4:	47 5e       	subi	r20, 0xE7	; 231
    12d6:	5f 4f       	sbci	r21, 0xFF	; 255
    12d8:	0e 94 f7 07 	call	0xfee	; 0xfee <_fpadd_parts>
    12dc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__pack_f>
    12e0:	a0 96       	adiw	r28, 0x20	; 32
    12e2:	e6 e0       	ldi	r30, 0x06	; 6
    12e4:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

000012e8 <__addsf3>:
    12e8:	a0 e2       	ldi	r26, 0x20	; 32
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ea e7       	ldi	r30, 0x7A	; 122
    12ee:	f9 e0       	ldi	r31, 0x09	; 9
    12f0:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
    12f4:	69 83       	std	Y+1, r22	; 0x01
    12f6:	7a 83       	std	Y+2, r23	; 0x02
    12f8:	8b 83       	std	Y+3, r24	; 0x03
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	2d 83       	std	Y+5, r18	; 0x05
    12fe:	3e 83       	std	Y+6, r19	; 0x06
    1300:	4f 83       	std	Y+7, r20	; 0x07
    1302:	58 87       	std	Y+8, r21	; 0x08
    1304:	f9 e0       	ldi	r31, 0x09	; 9
    1306:	ef 2e       	mov	r14, r31
    1308:	f1 2c       	mov	r15, r1
    130a:	ec 0e       	add	r14, r28
    130c:	fd 1e       	adc	r15, r29
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	b7 01       	movw	r22, r14
    1314:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    1318:	8e 01       	movw	r16, r28
    131a:	0f 5e       	subi	r16, 0xEF	; 239
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	ce 01       	movw	r24, r28
    1320:	05 96       	adiw	r24, 0x05	; 5
    1322:	b8 01       	movw	r22, r16
    1324:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    1328:	c7 01       	movw	r24, r14
    132a:	b8 01       	movw	r22, r16
    132c:	ae 01       	movw	r20, r28
    132e:	47 5e       	subi	r20, 0xE7	; 231
    1330:	5f 4f       	sbci	r21, 0xFF	; 255
    1332:	0e 94 f7 07 	call	0xfee	; 0xfee <_fpadd_parts>
    1336:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__pack_f>
    133a:	a0 96       	adiw	r28, 0x20	; 32
    133c:	e6 e0       	ldi	r30, 0x06	; 6
    133e:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

00001342 <__mulsf3>:
    1342:	a0 e2       	ldi	r26, 0x20	; 32
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e7 ea       	ldi	r30, 0xA7	; 167
    1348:	f9 e0       	ldi	r31, 0x09	; 9
    134a:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__prologue_saves__>
    134e:	69 83       	std	Y+1, r22	; 0x01
    1350:	7a 83       	std	Y+2, r23	; 0x02
    1352:	8b 83       	std	Y+3, r24	; 0x03
    1354:	9c 83       	std	Y+4, r25	; 0x04
    1356:	2d 83       	std	Y+5, r18	; 0x05
    1358:	3e 83       	std	Y+6, r19	; 0x06
    135a:	4f 83       	std	Y+7, r20	; 0x07
    135c:	58 87       	std	Y+8, r21	; 0x08
    135e:	ce 01       	movw	r24, r28
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	be 01       	movw	r22, r28
    1364:	67 5f       	subi	r22, 0xF7	; 247
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    136c:	ce 01       	movw	r24, r28
    136e:	05 96       	adiw	r24, 0x05	; 5
    1370:	be 01       	movw	r22, r28
    1372:	6f 5e       	subi	r22, 0xEF	; 239
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    137a:	99 85       	ldd	r25, Y+9	; 0x09
    137c:	92 30       	cpi	r25, 0x02	; 2
    137e:	88 f0       	brcs	.+34     	; 0x13a2 <__mulsf3+0x60>
    1380:	89 89       	ldd	r24, Y+17	; 0x11
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	c8 f0       	brcs	.+50     	; 0x13b8 <__mulsf3+0x76>
    1386:	94 30       	cpi	r25, 0x04	; 4
    1388:	19 f4       	brne	.+6      	; 0x1390 <__mulsf3+0x4e>
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	51 f4       	brne	.+20     	; 0x13a2 <__mulsf3+0x60>
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <__mulsf3+0x56>
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	29 f4       	brne	.+10     	; 0x139e <__mulsf3+0x5c>
    1394:	92 30       	cpi	r25, 0x02	; 2
    1396:	81 f4       	brne	.+32     	; 0x13b8 <__mulsf3+0x76>
    1398:	86 e3       	ldi	r24, 0x36	; 54
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	c6 c0       	rjmp	.+396    	; 0x152a <__mulsf3+0x1e8>
    139e:	92 30       	cpi	r25, 0x02	; 2
    13a0:	49 f4       	brne	.+18     	; 0x13b4 <__mulsf3+0x72>
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a6:	8a 89       	ldd	r24, Y+18	; 0x12
    13a8:	98 13       	cpse	r25, r24
    13aa:	21 e0       	ldi	r18, 0x01	; 1
    13ac:	2a 87       	std	Y+10, r18	; 0x0a
    13ae:	ce 01       	movw	r24, r28
    13b0:	09 96       	adiw	r24, 0x09	; 9
    13b2:	bb c0       	rjmp	.+374    	; 0x152a <__mulsf3+0x1e8>
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	49 f4       	brne	.+18     	; 0x13ca <__mulsf3+0x88>
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	8a 89       	ldd	r24, Y+18	; 0x12
    13be:	98 13       	cpse	r25, r24
    13c0:	21 e0       	ldi	r18, 0x01	; 1
    13c2:	2a 8b       	std	Y+18, r18	; 0x12
    13c4:	ce 01       	movw	r24, r28
    13c6:	41 96       	adiw	r24, 0x11	; 17
    13c8:	b0 c0       	rjmp	.+352    	; 0x152a <__mulsf3+0x1e8>
    13ca:	2d 84       	ldd	r2, Y+13	; 0x0d
    13cc:	3e 84       	ldd	r3, Y+14	; 0x0e
    13ce:	4f 84       	ldd	r4, Y+15	; 0x0f
    13d0:	58 88       	ldd	r5, Y+16	; 0x10
    13d2:	6d 88       	ldd	r6, Y+21	; 0x15
    13d4:	7e 88       	ldd	r7, Y+22	; 0x16
    13d6:	8f 88       	ldd	r8, Y+23	; 0x17
    13d8:	98 8c       	ldd	r9, Y+24	; 0x18
    13da:	ee 24       	eor	r14, r14
    13dc:	ff 24       	eor	r15, r15
    13de:	87 01       	movw	r16, r14
    13e0:	aa 24       	eor	r10, r10
    13e2:	bb 24       	eor	r11, r11
    13e4:	65 01       	movw	r12, r10
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	e0 e0       	ldi	r30, 0x00	; 0
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	c1 01       	movw	r24, r2
    13f4:	81 70       	andi	r24, 0x01	; 1
    13f6:	90 70       	andi	r25, 0x00	; 0
    13f8:	89 2b       	or	r24, r25
    13fa:	e9 f0       	breq	.+58     	; 0x1436 <__mulsf3+0xf4>
    13fc:	e6 0c       	add	r14, r6
    13fe:	f7 1c       	adc	r15, r7
    1400:	08 1d       	adc	r16, r8
    1402:	19 1d       	adc	r17, r9
    1404:	9a 01       	movw	r18, r20
    1406:	ab 01       	movw	r20, r22
    1408:	2a 0d       	add	r18, r10
    140a:	3b 1d       	adc	r19, r11
    140c:	4c 1d       	adc	r20, r12
    140e:	5d 1d       	adc	r21, r13
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e0       	ldi	r26, 0x00	; 0
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e6 14       	cp	r14, r6
    141a:	f7 04       	cpc	r15, r7
    141c:	08 05       	cpc	r16, r8
    141e:	19 05       	cpc	r17, r9
    1420:	20 f4       	brcc	.+8      	; 0x142a <__mulsf3+0xe8>
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	ba 01       	movw	r22, r20
    142c:	a9 01       	movw	r20, r18
    142e:	48 0f       	add	r20, r24
    1430:	59 1f       	adc	r21, r25
    1432:	6a 1f       	adc	r22, r26
    1434:	7b 1f       	adc	r23, r27
    1436:	aa 0c       	add	r10, r10
    1438:	bb 1c       	adc	r11, r11
    143a:	cc 1c       	adc	r12, r12
    143c:	dd 1c       	adc	r13, r13
    143e:	97 fe       	sbrs	r9, 7
    1440:	08 c0       	rjmp	.+16     	; 0x1452 <__mulsf3+0x110>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a0 e0       	ldi	r26, 0x00	; 0
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	a8 2a       	or	r10, r24
    144c:	b9 2a       	or	r11, r25
    144e:	ca 2a       	or	r12, r26
    1450:	db 2a       	or	r13, r27
    1452:	31 96       	adiw	r30, 0x01	; 1
    1454:	e0 32       	cpi	r30, 0x20	; 32
    1456:	f1 05       	cpc	r31, r1
    1458:	49 f0       	breq	.+18     	; 0x146c <__mulsf3+0x12a>
    145a:	66 0c       	add	r6, r6
    145c:	77 1c       	adc	r7, r7
    145e:	88 1c       	adc	r8, r8
    1460:	99 1c       	adc	r9, r9
    1462:	56 94       	lsr	r5
    1464:	47 94       	ror	r4
    1466:	37 94       	ror	r3
    1468:	27 94       	ror	r2
    146a:	c3 cf       	rjmp	.-122    	; 0x13f2 <__mulsf3+0xb0>
    146c:	fa 85       	ldd	r31, Y+10	; 0x0a
    146e:	ea 89       	ldd	r30, Y+18	; 0x12
    1470:	2b 89       	ldd	r18, Y+19	; 0x13
    1472:	3c 89       	ldd	r19, Y+20	; 0x14
    1474:	8b 85       	ldd	r24, Y+11	; 0x0b
    1476:	9c 85       	ldd	r25, Y+12	; 0x0c
    1478:	28 0f       	add	r18, r24
    147a:	39 1f       	adc	r19, r25
    147c:	2e 5f       	subi	r18, 0xFE	; 254
    147e:	3f 4f       	sbci	r19, 0xFF	; 255
    1480:	17 c0       	rjmp	.+46     	; 0x14b0 <__mulsf3+0x16e>
    1482:	ca 01       	movw	r24, r20
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	90 70       	andi	r25, 0x00	; 0
    1488:	89 2b       	or	r24, r25
    148a:	61 f0       	breq	.+24     	; 0x14a4 <__mulsf3+0x162>
    148c:	16 95       	lsr	r17
    148e:	07 95       	ror	r16
    1490:	f7 94       	ror	r15
    1492:	e7 94       	ror	r14
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e8       	ldi	r27, 0x80	; 128
    149c:	e8 2a       	or	r14, r24
    149e:	f9 2a       	or	r15, r25
    14a0:	0a 2b       	or	r16, r26
    14a2:	1b 2b       	or	r17, r27
    14a4:	76 95       	lsr	r23
    14a6:	67 95       	ror	r22
    14a8:	57 95       	ror	r21
    14aa:	47 95       	ror	r20
    14ac:	2f 5f       	subi	r18, 0xFF	; 255
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255
    14b0:	77 fd       	sbrc	r23, 7
    14b2:	e7 cf       	rjmp	.-50     	; 0x1482 <__mulsf3+0x140>
    14b4:	0c c0       	rjmp	.+24     	; 0x14ce <__mulsf3+0x18c>
    14b6:	44 0f       	add	r20, r20
    14b8:	55 1f       	adc	r21, r21
    14ba:	66 1f       	adc	r22, r22
    14bc:	77 1f       	adc	r23, r23
    14be:	17 fd       	sbrc	r17, 7
    14c0:	41 60       	ori	r20, 0x01	; 1
    14c2:	ee 0c       	add	r14, r14
    14c4:	ff 1c       	adc	r15, r15
    14c6:	00 1f       	adc	r16, r16
    14c8:	11 1f       	adc	r17, r17
    14ca:	21 50       	subi	r18, 0x01	; 1
    14cc:	30 40       	sbci	r19, 0x00	; 0
    14ce:	40 30       	cpi	r20, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	59 07       	cpc	r21, r25
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	69 07       	cpc	r22, r25
    14d8:	90 e4       	ldi	r25, 0x40	; 64
    14da:	79 07       	cpc	r23, r25
    14dc:	60 f3       	brcs	.-40     	; 0x14b6 <__mulsf3+0x174>
    14de:	2b 8f       	std	Y+27, r18	; 0x1b
    14e0:	3c 8f       	std	Y+28, r19	; 0x1c
    14e2:	db 01       	movw	r26, r22
    14e4:	ca 01       	movw	r24, r20
    14e6:	8f 77       	andi	r24, 0x7F	; 127
    14e8:	90 70       	andi	r25, 0x00	; 0
    14ea:	a0 70       	andi	r26, 0x00	; 0
    14ec:	b0 70       	andi	r27, 0x00	; 0
    14ee:	80 34       	cpi	r24, 0x40	; 64
    14f0:	91 05       	cpc	r25, r1
    14f2:	a1 05       	cpc	r26, r1
    14f4:	b1 05       	cpc	r27, r1
    14f6:	61 f4       	brne	.+24     	; 0x1510 <__mulsf3+0x1ce>
    14f8:	47 fd       	sbrc	r20, 7
    14fa:	0a c0       	rjmp	.+20     	; 0x1510 <__mulsf3+0x1ce>
    14fc:	e1 14       	cp	r14, r1
    14fe:	f1 04       	cpc	r15, r1
    1500:	01 05       	cpc	r16, r1
    1502:	11 05       	cpc	r17, r1
    1504:	29 f0       	breq	.+10     	; 0x1510 <__mulsf3+0x1ce>
    1506:	40 5c       	subi	r20, 0xC0	; 192
    1508:	5f 4f       	sbci	r21, 0xFF	; 255
    150a:	6f 4f       	sbci	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	40 78       	andi	r20, 0x80	; 128
    1510:	1a 8e       	std	Y+26, r1	; 0x1a
    1512:	fe 17       	cp	r31, r30
    1514:	11 f0       	breq	.+4      	; 0x151a <__mulsf3+0x1d8>
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	8a 8f       	std	Y+26, r24	; 0x1a
    151a:	4d 8f       	std	Y+29, r20	; 0x1d
    151c:	5e 8f       	std	Y+30, r21	; 0x1e
    151e:	6f 8f       	std	Y+31, r22	; 0x1f
    1520:	78 a3       	std	Y+32, r23	; 0x20
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	89 8f       	std	Y+25, r24	; 0x19
    1526:	ce 01       	movw	r24, r28
    1528:	49 96       	adiw	r24, 0x19	; 25
    152a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__pack_f>
    152e:	a0 96       	adiw	r28, 0x20	; 32
    1530:	e2 e1       	ldi	r30, 0x12	; 18
    1532:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__epilogue_restores__>

00001536 <__gtsf2>:
    1536:	a8 e1       	ldi	r26, 0x18	; 24
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e1 ea       	ldi	r30, 0xA1	; 161
    153c:	fa e0       	ldi	r31, 0x0A	; 10
    153e:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
    1542:	69 83       	std	Y+1, r22	; 0x01
    1544:	7a 83       	std	Y+2, r23	; 0x02
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	2d 83       	std	Y+5, r18	; 0x05
    154c:	3e 83       	std	Y+6, r19	; 0x06
    154e:	4f 83       	std	Y+7, r20	; 0x07
    1550:	58 87       	std	Y+8, r21	; 0x08
    1552:	89 e0       	ldi	r24, 0x09	; 9
    1554:	e8 2e       	mov	r14, r24
    1556:	f1 2c       	mov	r15, r1
    1558:	ec 0e       	add	r14, r28
    155a:	fd 1e       	adc	r15, r29
    155c:	ce 01       	movw	r24, r28
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	b7 01       	movw	r22, r14
    1562:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    1566:	8e 01       	movw	r16, r28
    1568:	0f 5e       	subi	r16, 0xEF	; 239
    156a:	1f 4f       	sbci	r17, 0xFF	; 255
    156c:	ce 01       	movw	r24, r28
    156e:	05 96       	adiw	r24, 0x05	; 5
    1570:	b8 01       	movw	r22, r16
    1572:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    1576:	89 85       	ldd	r24, Y+9	; 0x09
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	40 f0       	brcs	.+16     	; 0x158c <__gtsf2+0x56>
    157c:	89 89       	ldd	r24, Y+17	; 0x11
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	28 f0       	brcs	.+10     	; 0x158c <__gtsf2+0x56>
    1582:	c7 01       	movw	r24, r14
    1584:	b8 01       	movw	r22, r16
    1586:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__fpcmp_parts_f>
    158a:	01 c0       	rjmp	.+2      	; 0x158e <__gtsf2+0x58>
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	68 96       	adiw	r28, 0x18	; 24
    1590:	e6 e0       	ldi	r30, 0x06	; 6
    1592:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

00001596 <__gesf2>:
    1596:	a8 e1       	ldi	r26, 0x18	; 24
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e1 ed       	ldi	r30, 0xD1	; 209
    159c:	fa e0       	ldi	r31, 0x0A	; 10
    159e:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
    15a2:	69 83       	std	Y+1, r22	; 0x01
    15a4:	7a 83       	std	Y+2, r23	; 0x02
    15a6:	8b 83       	std	Y+3, r24	; 0x03
    15a8:	9c 83       	std	Y+4, r25	; 0x04
    15aa:	2d 83       	std	Y+5, r18	; 0x05
    15ac:	3e 83       	std	Y+6, r19	; 0x06
    15ae:	4f 83       	std	Y+7, r20	; 0x07
    15b0:	58 87       	std	Y+8, r21	; 0x08
    15b2:	89 e0       	ldi	r24, 0x09	; 9
    15b4:	e8 2e       	mov	r14, r24
    15b6:	f1 2c       	mov	r15, r1
    15b8:	ec 0e       	add	r14, r28
    15ba:	fd 1e       	adc	r15, r29
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	b7 01       	movw	r22, r14
    15c2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    15c6:	8e 01       	movw	r16, r28
    15c8:	0f 5e       	subi	r16, 0xEF	; 239
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	ce 01       	movw	r24, r28
    15ce:	05 96       	adiw	r24, 0x05	; 5
    15d0:	b8 01       	movw	r22, r16
    15d2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	40 f0       	brcs	.+16     	; 0x15ec <__gesf2+0x56>
    15dc:	89 89       	ldd	r24, Y+17	; 0x11
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	28 f0       	brcs	.+10     	; 0x15ec <__gesf2+0x56>
    15e2:	c7 01       	movw	r24, r14
    15e4:	b8 01       	movw	r22, r16
    15e6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__fpcmp_parts_f>
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <__gesf2+0x58>
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	68 96       	adiw	r28, 0x18	; 24
    15f0:	e6 e0       	ldi	r30, 0x06	; 6
    15f2:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

000015f6 <__ltsf2>:
    15f6:	a8 e1       	ldi	r26, 0x18	; 24
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e1 e0       	ldi	r30, 0x01	; 1
    15fc:	fb e0       	ldi	r31, 0x0B	; 11
    15fe:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__+0x18>
    1602:	69 83       	std	Y+1, r22	; 0x01
    1604:	7a 83       	std	Y+2, r23	; 0x02
    1606:	8b 83       	std	Y+3, r24	; 0x03
    1608:	9c 83       	std	Y+4, r25	; 0x04
    160a:	2d 83       	std	Y+5, r18	; 0x05
    160c:	3e 83       	std	Y+6, r19	; 0x06
    160e:	4f 83       	std	Y+7, r20	; 0x07
    1610:	58 87       	std	Y+8, r21	; 0x08
    1612:	89 e0       	ldi	r24, 0x09	; 9
    1614:	e8 2e       	mov	r14, r24
    1616:	f1 2c       	mov	r15, r1
    1618:	ec 0e       	add	r14, r28
    161a:	fd 1e       	adc	r15, r29
    161c:	ce 01       	movw	r24, r28
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	b7 01       	movw	r22, r14
    1622:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    1626:	8e 01       	movw	r16, r28
    1628:	0f 5e       	subi	r16, 0xEF	; 239
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	ce 01       	movw	r24, r28
    162e:	05 96       	adiw	r24, 0x05	; 5
    1630:	b8 01       	movw	r22, r16
    1632:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	82 30       	cpi	r24, 0x02	; 2
    163a:	40 f0       	brcs	.+16     	; 0x164c <__ltsf2+0x56>
    163c:	89 89       	ldd	r24, Y+17	; 0x11
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	28 f0       	brcs	.+10     	; 0x164c <__ltsf2+0x56>
    1642:	c7 01       	movw	r24, r14
    1644:	b8 01       	movw	r22, r16
    1646:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__fpcmp_parts_f>
    164a:	01 c0       	rjmp	.+2      	; 0x164e <__ltsf2+0x58>
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	68 96       	adiw	r28, 0x18	; 24
    1650:	e6 e0       	ldi	r30, 0x06	; 6
    1652:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__+0x18>

00001656 <__fixsfsi>:
    1656:	ac e0       	ldi	r26, 0x0C	; 12
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e1 e3       	ldi	r30, 0x31	; 49
    165c:	fb e0       	ldi	r31, 0x0B	; 11
    165e:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__prologue_saves__+0x20>
    1662:	69 83       	std	Y+1, r22	; 0x01
    1664:	7a 83       	std	Y+2, r23	; 0x02
    1666:	8b 83       	std	Y+3, r24	; 0x03
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	ce 01       	movw	r24, r28
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	be 01       	movw	r22, r28
    1670:	6b 5f       	subi	r22, 0xFB	; 251
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__unpack_f>
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	82 30       	cpi	r24, 0x02	; 2
    167c:	61 f1       	breq	.+88     	; 0x16d6 <__fixsfsi+0x80>
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	50 f1       	brcs	.+84     	; 0x16d6 <__fixsfsi+0x80>
    1682:	84 30       	cpi	r24, 0x04	; 4
    1684:	21 f4       	brne	.+8      	; 0x168e <__fixsfsi+0x38>
    1686:	8e 81       	ldd	r24, Y+6	; 0x06
    1688:	88 23       	and	r24, r24
    168a:	51 f1       	breq	.+84     	; 0x16e0 <__fixsfsi+0x8a>
    168c:	2e c0       	rjmp	.+92     	; 0x16ea <__fixsfsi+0x94>
    168e:	2f 81       	ldd	r18, Y+7	; 0x07
    1690:	38 85       	ldd	r19, Y+8	; 0x08
    1692:	37 fd       	sbrc	r19, 7
    1694:	20 c0       	rjmp	.+64     	; 0x16d6 <__fixsfsi+0x80>
    1696:	6e 81       	ldd	r22, Y+6	; 0x06
    1698:	2f 31       	cpi	r18, 0x1F	; 31
    169a:	31 05       	cpc	r19, r1
    169c:	1c f0       	brlt	.+6      	; 0x16a4 <__fixsfsi+0x4e>
    169e:	66 23       	and	r22, r22
    16a0:	f9 f0       	breq	.+62     	; 0x16e0 <__fixsfsi+0x8a>
    16a2:	23 c0       	rjmp	.+70     	; 0x16ea <__fixsfsi+0x94>
    16a4:	8e e1       	ldi	r24, 0x1E	; 30
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	82 1b       	sub	r24, r18
    16aa:	93 0b       	sbc	r25, r19
    16ac:	29 85       	ldd	r18, Y+9	; 0x09
    16ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    16b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    16b2:	5c 85       	ldd	r21, Y+12	; 0x0c
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <__fixsfsi+0x68>
    16b6:	56 95       	lsr	r21
    16b8:	47 95       	ror	r20
    16ba:	37 95       	ror	r19
    16bc:	27 95       	ror	r18
    16be:	8a 95       	dec	r24
    16c0:	d2 f7       	brpl	.-12     	; 0x16b6 <__fixsfsi+0x60>
    16c2:	66 23       	and	r22, r22
    16c4:	b1 f0       	breq	.+44     	; 0x16f2 <__fixsfsi+0x9c>
    16c6:	50 95       	com	r21
    16c8:	40 95       	com	r20
    16ca:	30 95       	com	r19
    16cc:	21 95       	neg	r18
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	4f 4f       	sbci	r20, 0xFF	; 255
    16d2:	5f 4f       	sbci	r21, 0xFF	; 255
    16d4:	0e c0       	rjmp	.+28     	; 0x16f2 <__fixsfsi+0x9c>
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	09 c0       	rjmp	.+18     	; 0x16f2 <__fixsfsi+0x9c>
    16e0:	2f ef       	ldi	r18, 0xFF	; 255
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	4f ef       	ldi	r20, 0xFF	; 255
    16e6:	5f e7       	ldi	r21, 0x7F	; 127
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <__fixsfsi+0x9c>
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	50 e8       	ldi	r21, 0x80	; 128
    16f2:	b9 01       	movw	r22, r18
    16f4:	ca 01       	movw	r24, r20
    16f6:	2c 96       	adiw	r28, 0x0c	; 12
    16f8:	e2 e0       	ldi	r30, 0x02	; 2
    16fa:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__epilogue_restores__+0x20>

000016fe <__pack_f>:
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	fc 01       	movw	r30, r24
    170a:	e4 80       	ldd	r14, Z+4	; 0x04
    170c:	f5 80       	ldd	r15, Z+5	; 0x05
    170e:	06 81       	ldd	r16, Z+6	; 0x06
    1710:	17 81       	ldd	r17, Z+7	; 0x07
    1712:	d1 80       	ldd	r13, Z+1	; 0x01
    1714:	80 81       	ld	r24, Z
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	48 f4       	brcc	.+18     	; 0x172c <__pack_f+0x2e>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e1       	ldi	r26, 0x10	; 16
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e8 2a       	or	r14, r24
    1724:	f9 2a       	or	r15, r25
    1726:	0a 2b       	or	r16, r26
    1728:	1b 2b       	or	r17, r27
    172a:	a5 c0       	rjmp	.+330    	; 0x1876 <__pack_f+0x178>
    172c:	84 30       	cpi	r24, 0x04	; 4
    172e:	09 f4       	brne	.+2      	; 0x1732 <__pack_f+0x34>
    1730:	9f c0       	rjmp	.+318    	; 0x1870 <__pack_f+0x172>
    1732:	82 30       	cpi	r24, 0x02	; 2
    1734:	21 f4       	brne	.+8      	; 0x173e <__pack_f+0x40>
    1736:	ee 24       	eor	r14, r14
    1738:	ff 24       	eor	r15, r15
    173a:	87 01       	movw	r16, r14
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <__pack_f+0x4a>
    173e:	e1 14       	cp	r14, r1
    1740:	f1 04       	cpc	r15, r1
    1742:	01 05       	cpc	r16, r1
    1744:	11 05       	cpc	r17, r1
    1746:	19 f4       	brne	.+6      	; 0x174e <__pack_f+0x50>
    1748:	e0 e0       	ldi	r30, 0x00	; 0
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	96 c0       	rjmp	.+300    	; 0x187a <__pack_f+0x17c>
    174e:	62 81       	ldd	r22, Z+2	; 0x02
    1750:	73 81       	ldd	r23, Z+3	; 0x03
    1752:	9f ef       	ldi	r25, 0xFF	; 255
    1754:	62 38       	cpi	r22, 0x82	; 130
    1756:	79 07       	cpc	r23, r25
    1758:	0c f0       	brlt	.+2      	; 0x175c <__pack_f+0x5e>
    175a:	5b c0       	rjmp	.+182    	; 0x1812 <__pack_f+0x114>
    175c:	22 e8       	ldi	r18, 0x82	; 130
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	26 1b       	sub	r18, r22
    1762:	37 0b       	sbc	r19, r23
    1764:	2a 31       	cpi	r18, 0x1A	; 26
    1766:	31 05       	cpc	r19, r1
    1768:	2c f0       	brlt	.+10     	; 0x1774 <__pack_f+0x76>
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	2a c0       	rjmp	.+84     	; 0x17c8 <__pack_f+0xca>
    1774:	b8 01       	movw	r22, r16
    1776:	a7 01       	movw	r20, r14
    1778:	02 2e       	mov	r0, r18
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <__pack_f+0x86>
    177c:	76 95       	lsr	r23
    177e:	67 95       	ror	r22
    1780:	57 95       	ror	r21
    1782:	47 95       	ror	r20
    1784:	0a 94       	dec	r0
    1786:	d2 f7       	brpl	.-12     	; 0x177c <__pack_f+0x7e>
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	04 c0       	rjmp	.+8      	; 0x179a <__pack_f+0x9c>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	aa 1f       	adc	r26, r26
    1798:	bb 1f       	adc	r27, r27
    179a:	2a 95       	dec	r18
    179c:	d2 f7       	brpl	.-12     	; 0x1792 <__pack_f+0x94>
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	a1 09       	sbc	r26, r1
    17a2:	b1 09       	sbc	r27, r1
    17a4:	8e 21       	and	r24, r14
    17a6:	9f 21       	and	r25, r15
    17a8:	a0 23       	and	r26, r16
    17aa:	b1 23       	and	r27, r17
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	a1 05       	cpc	r26, r1
    17b0:	b1 05       	cpc	r27, r1
    17b2:	21 f0       	breq	.+8      	; 0x17bc <__pack_f+0xbe>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	9a 01       	movw	r18, r20
    17be:	ab 01       	movw	r20, r22
    17c0:	28 2b       	or	r18, r24
    17c2:	39 2b       	or	r19, r25
    17c4:	4a 2b       	or	r20, r26
    17c6:	5b 2b       	or	r21, r27
    17c8:	da 01       	movw	r26, r20
    17ca:	c9 01       	movw	r24, r18
    17cc:	8f 77       	andi	r24, 0x7F	; 127
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	a0 70       	andi	r26, 0x00	; 0
    17d2:	b0 70       	andi	r27, 0x00	; 0
    17d4:	80 34       	cpi	r24, 0x40	; 64
    17d6:	91 05       	cpc	r25, r1
    17d8:	a1 05       	cpc	r26, r1
    17da:	b1 05       	cpc	r27, r1
    17dc:	39 f4       	brne	.+14     	; 0x17ec <__pack_f+0xee>
    17de:	27 ff       	sbrs	r18, 7
    17e0:	09 c0       	rjmp	.+18     	; 0x17f4 <__pack_f+0xf6>
    17e2:	20 5c       	subi	r18, 0xC0	; 192
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	4f 4f       	sbci	r20, 0xFF	; 255
    17e8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <__pack_f+0xf6>
    17ec:	21 5c       	subi	r18, 0xC1	; 193
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	4f 4f       	sbci	r20, 0xFF	; 255
    17f2:	5f 4f       	sbci	r21, 0xFF	; 255
    17f4:	e0 e0       	ldi	r30, 0x00	; 0
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	20 30       	cpi	r18, 0x00	; 0
    17fa:	a0 e0       	ldi	r26, 0x00	; 0
    17fc:	3a 07       	cpc	r19, r26
    17fe:	a0 e0       	ldi	r26, 0x00	; 0
    1800:	4a 07       	cpc	r20, r26
    1802:	a0 e4       	ldi	r26, 0x40	; 64
    1804:	5a 07       	cpc	r21, r26
    1806:	10 f0       	brcs	.+4      	; 0x180c <__pack_f+0x10e>
    1808:	e1 e0       	ldi	r30, 0x01	; 1
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	79 01       	movw	r14, r18
    180e:	8a 01       	movw	r16, r20
    1810:	27 c0       	rjmp	.+78     	; 0x1860 <__pack_f+0x162>
    1812:	60 38       	cpi	r22, 0x80	; 128
    1814:	71 05       	cpc	r23, r1
    1816:	64 f5       	brge	.+88     	; 0x1870 <__pack_f+0x172>
    1818:	fb 01       	movw	r30, r22
    181a:	e1 58       	subi	r30, 0x81	; 129
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	d8 01       	movw	r26, r16
    1820:	c7 01       	movw	r24, r14
    1822:	8f 77       	andi	r24, 0x7F	; 127
    1824:	90 70       	andi	r25, 0x00	; 0
    1826:	a0 70       	andi	r26, 0x00	; 0
    1828:	b0 70       	andi	r27, 0x00	; 0
    182a:	80 34       	cpi	r24, 0x40	; 64
    182c:	91 05       	cpc	r25, r1
    182e:	a1 05       	cpc	r26, r1
    1830:	b1 05       	cpc	r27, r1
    1832:	39 f4       	brne	.+14     	; 0x1842 <__pack_f+0x144>
    1834:	e7 fe       	sbrs	r14, 7
    1836:	0d c0       	rjmp	.+26     	; 0x1852 <__pack_f+0x154>
    1838:	80 e4       	ldi	r24, 0x40	; 64
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	04 c0       	rjmp	.+8      	; 0x184a <__pack_f+0x14c>
    1842:	8f e3       	ldi	r24, 0x3F	; 63
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	a0 e0       	ldi	r26, 0x00	; 0
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e8 0e       	add	r14, r24
    184c:	f9 1e       	adc	r15, r25
    184e:	0a 1f       	adc	r16, r26
    1850:	1b 1f       	adc	r17, r27
    1852:	17 ff       	sbrs	r17, 7
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <__pack_f+0x162>
    1856:	16 95       	lsr	r17
    1858:	07 95       	ror	r16
    185a:	f7 94       	ror	r15
    185c:	e7 94       	ror	r14
    185e:	31 96       	adiw	r30, 0x01	; 1
    1860:	87 e0       	ldi	r24, 0x07	; 7
    1862:	16 95       	lsr	r17
    1864:	07 95       	ror	r16
    1866:	f7 94       	ror	r15
    1868:	e7 94       	ror	r14
    186a:	8a 95       	dec	r24
    186c:	d1 f7       	brne	.-12     	; 0x1862 <__pack_f+0x164>
    186e:	05 c0       	rjmp	.+10     	; 0x187a <__pack_f+0x17c>
    1870:	ee 24       	eor	r14, r14
    1872:	ff 24       	eor	r15, r15
    1874:	87 01       	movw	r16, r14
    1876:	ef ef       	ldi	r30, 0xFF	; 255
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	6e 2f       	mov	r22, r30
    187c:	67 95       	ror	r22
    187e:	66 27       	eor	r22, r22
    1880:	67 95       	ror	r22
    1882:	90 2f       	mov	r25, r16
    1884:	9f 77       	andi	r25, 0x7F	; 127
    1886:	d7 94       	ror	r13
    1888:	dd 24       	eor	r13, r13
    188a:	d7 94       	ror	r13
    188c:	8e 2f       	mov	r24, r30
    188e:	86 95       	lsr	r24
    1890:	49 2f       	mov	r20, r25
    1892:	46 2b       	or	r20, r22
    1894:	58 2f       	mov	r21, r24
    1896:	5d 29       	or	r21, r13
    1898:	b7 01       	movw	r22, r14
    189a:	ca 01       	movw	r24, r20
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	08 95       	ret

000018a8 <__unpack_f>:
    18a8:	fc 01       	movw	r30, r24
    18aa:	db 01       	movw	r26, r22
    18ac:	40 81       	ld	r20, Z
    18ae:	51 81       	ldd	r21, Z+1	; 0x01
    18b0:	22 81       	ldd	r18, Z+2	; 0x02
    18b2:	62 2f       	mov	r22, r18
    18b4:	6f 77       	andi	r22, 0x7F	; 127
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	22 1f       	adc	r18, r18
    18ba:	22 27       	eor	r18, r18
    18bc:	22 1f       	adc	r18, r18
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	89 2f       	mov	r24, r25
    18c2:	88 0f       	add	r24, r24
    18c4:	82 2b       	or	r24, r18
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	99 1f       	adc	r25, r25
    18cc:	99 27       	eor	r25, r25
    18ce:	99 1f       	adc	r25, r25
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	9c 93       	st	X, r25
    18d4:	11 97       	sbiw	r26, 0x01	; 1
    18d6:	21 15       	cp	r18, r1
    18d8:	31 05       	cpc	r19, r1
    18da:	a9 f5       	brne	.+106    	; 0x1946 <__unpack_f+0x9e>
    18dc:	41 15       	cp	r20, r1
    18de:	51 05       	cpc	r21, r1
    18e0:	61 05       	cpc	r22, r1
    18e2:	71 05       	cpc	r23, r1
    18e4:	11 f4       	brne	.+4      	; 0x18ea <__unpack_f+0x42>
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	37 c0       	rjmp	.+110    	; 0x1958 <__unpack_f+0xb0>
    18ea:	82 e8       	ldi	r24, 0x82	; 130
    18ec:	9f ef       	ldi	r25, 0xFF	; 255
    18ee:	13 96       	adiw	r26, 0x03	; 3
    18f0:	9c 93       	st	X, r25
    18f2:	8e 93       	st	-X, r24
    18f4:	12 97       	sbiw	r26, 0x02	; 2
    18f6:	9a 01       	movw	r18, r20
    18f8:	ab 01       	movw	r20, r22
    18fa:	67 e0       	ldi	r22, 0x07	; 7
    18fc:	22 0f       	add	r18, r18
    18fe:	33 1f       	adc	r19, r19
    1900:	44 1f       	adc	r20, r20
    1902:	55 1f       	adc	r21, r21
    1904:	6a 95       	dec	r22
    1906:	d1 f7       	brne	.-12     	; 0x18fc <__unpack_f+0x54>
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	8c 93       	st	X, r24
    190c:	0d c0       	rjmp	.+26     	; 0x1928 <__unpack_f+0x80>
    190e:	22 0f       	add	r18, r18
    1910:	33 1f       	adc	r19, r19
    1912:	44 1f       	adc	r20, r20
    1914:	55 1f       	adc	r21, r21
    1916:	12 96       	adiw	r26, 0x02	; 2
    1918:	8d 91       	ld	r24, X+
    191a:	9c 91       	ld	r25, X
    191c:	13 97       	sbiw	r26, 0x03	; 3
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	13 96       	adiw	r26, 0x03	; 3
    1922:	9c 93       	st	X, r25
    1924:	8e 93       	st	-X, r24
    1926:	12 97       	sbiw	r26, 0x02	; 2
    1928:	20 30       	cpi	r18, 0x00	; 0
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	38 07       	cpc	r19, r24
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	48 07       	cpc	r20, r24
    1932:	80 e4       	ldi	r24, 0x40	; 64
    1934:	58 07       	cpc	r21, r24
    1936:	58 f3       	brcs	.-42     	; 0x190e <__unpack_f+0x66>
    1938:	14 96       	adiw	r26, 0x04	; 4
    193a:	2d 93       	st	X+, r18
    193c:	3d 93       	st	X+, r19
    193e:	4d 93       	st	X+, r20
    1940:	5c 93       	st	X, r21
    1942:	17 97       	sbiw	r26, 0x07	; 7
    1944:	08 95       	ret
    1946:	2f 3f       	cpi	r18, 0xFF	; 255
    1948:	31 05       	cpc	r19, r1
    194a:	79 f4       	brne	.+30     	; 0x196a <__unpack_f+0xc2>
    194c:	41 15       	cp	r20, r1
    194e:	51 05       	cpc	r21, r1
    1950:	61 05       	cpc	r22, r1
    1952:	71 05       	cpc	r23, r1
    1954:	19 f4       	brne	.+6      	; 0x195c <__unpack_f+0xb4>
    1956:	84 e0       	ldi	r24, 0x04	; 4
    1958:	8c 93       	st	X, r24
    195a:	08 95       	ret
    195c:	64 ff       	sbrs	r22, 4
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <__unpack_f+0xbe>
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	8c 93       	st	X, r24
    1964:	12 c0       	rjmp	.+36     	; 0x198a <__unpack_f+0xe2>
    1966:	1c 92       	st	X, r1
    1968:	10 c0       	rjmp	.+32     	; 0x198a <__unpack_f+0xe2>
    196a:	2f 57       	subi	r18, 0x7F	; 127
    196c:	30 40       	sbci	r19, 0x00	; 0
    196e:	13 96       	adiw	r26, 0x03	; 3
    1970:	3c 93       	st	X, r19
    1972:	2e 93       	st	-X, r18
    1974:	12 97       	sbiw	r26, 0x02	; 2
    1976:	83 e0       	ldi	r24, 0x03	; 3
    1978:	8c 93       	st	X, r24
    197a:	87 e0       	ldi	r24, 0x07	; 7
    197c:	44 0f       	add	r20, r20
    197e:	55 1f       	adc	r21, r21
    1980:	66 1f       	adc	r22, r22
    1982:	77 1f       	adc	r23, r23
    1984:	8a 95       	dec	r24
    1986:	d1 f7       	brne	.-12     	; 0x197c <__unpack_f+0xd4>
    1988:	70 64       	ori	r23, 0x40	; 64
    198a:	14 96       	adiw	r26, 0x04	; 4
    198c:	4d 93       	st	X+, r20
    198e:	5d 93       	st	X+, r21
    1990:	6d 93       	st	X+, r22
    1992:	7c 93       	st	X, r23
    1994:	17 97       	sbiw	r26, 0x07	; 7
    1996:	08 95       	ret

00001998 <__fpcmp_parts_f>:
    1998:	1f 93       	push	r17
    199a:	dc 01       	movw	r26, r24
    199c:	fb 01       	movw	r30, r22
    199e:	9c 91       	ld	r25, X
    19a0:	92 30       	cpi	r25, 0x02	; 2
    19a2:	08 f4       	brcc	.+2      	; 0x19a6 <__fpcmp_parts_f+0xe>
    19a4:	47 c0       	rjmp	.+142    	; 0x1a34 <__fpcmp_parts_f+0x9c>
    19a6:	80 81       	ld	r24, Z
    19a8:	82 30       	cpi	r24, 0x02	; 2
    19aa:	08 f4       	brcc	.+2      	; 0x19ae <__fpcmp_parts_f+0x16>
    19ac:	43 c0       	rjmp	.+134    	; 0x1a34 <__fpcmp_parts_f+0x9c>
    19ae:	94 30       	cpi	r25, 0x04	; 4
    19b0:	51 f4       	brne	.+20     	; 0x19c6 <__fpcmp_parts_f+0x2e>
    19b2:	11 96       	adiw	r26, 0x01	; 1
    19b4:	1c 91       	ld	r17, X
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	99 f5       	brne	.+102    	; 0x1a20 <__fpcmp_parts_f+0x88>
    19ba:	81 81       	ldd	r24, Z+1	; 0x01
    19bc:	68 2f       	mov	r22, r24
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	61 1b       	sub	r22, r17
    19c2:	71 09       	sbc	r23, r1
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <__fpcmp_parts_f+0xac>
    19c6:	84 30       	cpi	r24, 0x04	; 4
    19c8:	21 f0       	breq	.+8      	; 0x19d2 <__fpcmp_parts_f+0x3a>
    19ca:	92 30       	cpi	r25, 0x02	; 2
    19cc:	31 f4       	brne	.+12     	; 0x19da <__fpcmp_parts_f+0x42>
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	b9 f1       	breq	.+110    	; 0x1a40 <__fpcmp_parts_f+0xa8>
    19d2:	81 81       	ldd	r24, Z+1	; 0x01
    19d4:	88 23       	and	r24, r24
    19d6:	89 f1       	breq	.+98     	; 0x1a3a <__fpcmp_parts_f+0xa2>
    19d8:	2d c0       	rjmp	.+90     	; 0x1a34 <__fpcmp_parts_f+0x9c>
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	1c 91       	ld	r17, X
    19de:	11 97       	sbiw	r26, 0x01	; 1
    19e0:	82 30       	cpi	r24, 0x02	; 2
    19e2:	f1 f0       	breq	.+60     	; 0x1a20 <__fpcmp_parts_f+0x88>
    19e4:	81 81       	ldd	r24, Z+1	; 0x01
    19e6:	18 17       	cp	r17, r24
    19e8:	d9 f4       	brne	.+54     	; 0x1a20 <__fpcmp_parts_f+0x88>
    19ea:	12 96       	adiw	r26, 0x02	; 2
    19ec:	2d 91       	ld	r18, X+
    19ee:	3c 91       	ld	r19, X
    19f0:	13 97       	sbiw	r26, 0x03	; 3
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	82 17       	cp	r24, r18
    19f8:	93 07       	cpc	r25, r19
    19fa:	94 f0       	brlt	.+36     	; 0x1a20 <__fpcmp_parts_f+0x88>
    19fc:	28 17       	cp	r18, r24
    19fe:	39 07       	cpc	r19, r25
    1a00:	bc f0       	brlt	.+46     	; 0x1a30 <__fpcmp_parts_f+0x98>
    1a02:	14 96       	adiw	r26, 0x04	; 4
    1a04:	8d 91       	ld	r24, X+
    1a06:	9d 91       	ld	r25, X+
    1a08:	0d 90       	ld	r0, X+
    1a0a:	bc 91       	ld	r27, X
    1a0c:	a0 2d       	mov	r26, r0
    1a0e:	24 81       	ldd	r18, Z+4	; 0x04
    1a10:	35 81       	ldd	r19, Z+5	; 0x05
    1a12:	46 81       	ldd	r20, Z+6	; 0x06
    1a14:	57 81       	ldd	r21, Z+7	; 0x07
    1a16:	28 17       	cp	r18, r24
    1a18:	39 07       	cpc	r19, r25
    1a1a:	4a 07       	cpc	r20, r26
    1a1c:	5b 07       	cpc	r21, r27
    1a1e:	18 f4       	brcc	.+6      	; 0x1a26 <__fpcmp_parts_f+0x8e>
    1a20:	11 23       	and	r17, r17
    1a22:	41 f0       	breq	.+16     	; 0x1a34 <__fpcmp_parts_f+0x9c>
    1a24:	0a c0       	rjmp	.+20     	; 0x1a3a <__fpcmp_parts_f+0xa2>
    1a26:	82 17       	cp	r24, r18
    1a28:	93 07       	cpc	r25, r19
    1a2a:	a4 07       	cpc	r26, r20
    1a2c:	b5 07       	cpc	r27, r21
    1a2e:	40 f4       	brcc	.+16     	; 0x1a40 <__fpcmp_parts_f+0xa8>
    1a30:	11 23       	and	r17, r17
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <__fpcmp_parts_f+0xa2>
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	05 c0       	rjmp	.+10     	; 0x1a44 <__fpcmp_parts_f+0xac>
    1a3a:	6f ef       	ldi	r22, 0xFF	; 255
    1a3c:	7f ef       	ldi	r23, 0xFF	; 255
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <__fpcmp_parts_f+0xac>
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	cb 01       	movw	r24, r22
    1a46:	1f 91       	pop	r17
    1a48:	08 95       	ret

00001a4a <__prologue_saves__>:
    1a4a:	2f 92       	push	r2
    1a4c:	3f 92       	push	r3
    1a4e:	4f 92       	push	r4
    1a50:	5f 92       	push	r5
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	ca 1b       	sub	r28, r26
    1a74:	db 0b       	sbc	r29, r27
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	09 94       	ijmp

00001a82 <__epilogue_restores__>:
    1a82:	2a 88       	ldd	r2, Y+18	; 0x12
    1a84:	39 88       	ldd	r3, Y+17	; 0x11
    1a86:	48 88       	ldd	r4, Y+16	; 0x10
    1a88:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a90:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a92:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a94:	b9 84       	ldd	r11, Y+9	; 0x09
    1a96:	c8 84       	ldd	r12, Y+8	; 0x08
    1a98:	df 80       	ldd	r13, Y+7	; 0x07
    1a9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1aa0:	1b 81       	ldd	r17, Y+3	; 0x03
    1aa2:	aa 81       	ldd	r26, Y+2	; 0x02
    1aa4:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa6:	ce 0f       	add	r28, r30
    1aa8:	d1 1d       	adc	r29, r1
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	ed 01       	movw	r28, r26
    1ab6:	08 95       	ret

00001ab8 <memset>:
    1ab8:	dc 01       	movw	r26, r24
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <memset+0x6>
    1abc:	6d 93       	st	X+, r22
    1abe:	41 50       	subi	r20, 0x01	; 1
    1ac0:	50 40       	sbci	r21, 0x00	; 0
    1ac2:	e0 f7       	brcc	.-8      	; 0x1abc <memset+0x4>
    1ac4:	08 95       	ret

00001ac6 <_exit>:
    1ac6:	f8 94       	cli

00001ac8 <__stop_program>:
    1ac8:	ff cf       	rjmp	.-2      	; 0x1ac8 <__stop_program>
