
bma020-tiny2313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ff6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001ff6  0000208a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008c  0080008c  000020b6  2**0
                  ALLOC
  3 .stab         00002148  00000000  00000000  000020b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ef3  00000000  00000000  00004200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000050f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005253  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000053e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007427  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fa6  00000000  00000000  00008528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000094d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  00009650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009919  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
      22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
      24:	6a c5       	rjmp	.+2772   	; 0xafa <__vector_18>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf ed       	ldi	r28, 0xDF	; 223
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	e6 ef       	ldi	r30, 0xF6	; 246
      36:	ff e1       	ldi	r31, 0x1F	; 31
      38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
      3e:	ac 38       	cpi	r26, 0x8C	; 140
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
      44:	10 e0       	ldi	r17, 0x00	; 0
      46:	ac e8       	ldi	r26, 0x8C	; 140
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	ae 38       	cpi	r26, 0x8E	; 142
      50:	b1 07       	cpc	r27, r17
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	80 d5       	rcall	.+2816   	; 0xb56 <main>
      56:	cd cf       	rjmp	.-102    	; 0xfffffff2 <__eeprom_end+0xff7efff2>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <BMA_trans>:
#define CS		2
#define SDO    5
#define FSK    1

unsigned int BMA_trans(unsigned int wert)
{
      5a:	0f 93       	push	r16
      5c:	1f 93       	push	r17
      5e:	df 93       	push	r29
      60:	cf 93       	push	r28
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
      66:	cd 54       	subi	r28, 0x4D	; 77
      68:	d0 40       	sbci	r29, 0x00	; 0
      6a:	0f b6       	in	r0, 0x3f	; 63
      6c:	f8 94       	cli
      6e:	de bf       	out	0x3e, r29	; 62
      70:	0f be       	out	0x3f, r0	; 63
      72:	cd bf       	out	0x3d, r28	; 61
      74:	fe 01       	movw	r30, r28
      76:	e4 5b       	subi	r30, 0xB4	; 180
      78:	ff 4f       	sbci	r31, 0xFF	; 255
      7a:	91 83       	std	Z+1, r25	; 0x01
      7c:	80 83       	st	Z, r24
	unsigned int werti = 0;
      7e:	fe 01       	movw	r30, r28
      80:	e6 5b       	subi	r30, 0xB6	; 182
      82:	ff 4f       	sbci	r31, 0xFF	; 255
      84:	11 82       	std	Z+1, r1	; 0x01
      86:	10 82       	st	Z, r1
	unsigned char i;

	sbi(BMA_PORT, SCK);
      88:	a2 e3       	ldi	r26, 0x32	; 50
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	e2 e3       	ldi	r30, 0x32	; 50
      8e:	f0 e0       	ldi	r31, 0x00	; 0
      90:	80 81       	ld	r24, Z
      92:	88 60       	ori	r24, 0x08	; 8
      94:	8c 93       	st	X, r24
	cbi(BMA_PORT, CS);
      96:	a2 e3       	ldi	r26, 0x32	; 50
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	e2 e3       	ldi	r30, 0x32	; 50
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 81       	ld	r24, Z
      a0:	8b 7f       	andi	r24, 0xFB	; 251
      a2:	8c 93       	st	X, r24
	cbi(BMA_PORT, SCK);
      a4:	a2 e3       	ldi	r26, 0x32	; 50
      a6:	b0 e0       	ldi	r27, 0x00	; 0
      a8:	e2 e3       	ldi	r30, 0x32	; 50
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	80 81       	ld	r24, Z
      ae:	87 7f       	andi	r24, 0xF7	; 247
      b0:	8c 93       	st	X, r24
	for (i = 0; i < 16; i++)
      b2:	fe 01       	movw	r30, r28
      b4:	e7 5b       	subi	r30, 0xB7	; 183
      b6:	ff 4f       	sbci	r31, 0xFF	; 255
      b8:	10 82       	st	Z, r1
      ba:	df c1       	rjmp	.+958    	; 0x47a <__stack+0x39b>
	{
		if (wert & 0x8000)
      bc:	fe 01       	movw	r30, r28
      be:	e4 5b       	subi	r30, 0xB4	; 180
      c0:	ff 4f       	sbci	r31, 0xFF	; 255
      c2:	80 81       	ld	r24, Z
      c4:	91 81       	ldd	r25, Z+1	; 0x01
      c6:	99 23       	and	r25, r25
      c8:	44 f4       	brge	.+16     	; 0xda <BMA_trans+0x80>
			sbi(BMA_PORT, SDI);
      ca:	a2 e3       	ldi	r26, 0x32	; 50
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	e2 e3       	ldi	r30, 0x32	; 50
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	80 61       	ori	r24, 0x10	; 16
      d6:	8c 93       	st	X, r24
      d8:	07 c0       	rjmp	.+14     	; 0xe8 <__stack+0x9>
		else
			cbi(BMA_PORT, SDI);
      da:	a2 e3       	ldi	r26, 0x32	; 50
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e2 e3       	ldi	r30, 0x32	; 50
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 81       	ld	r24, Z
      e4:	8f 7e       	andi	r24, 0xEF	; 239
      e6:	8c 93       	st	X, r24
      e8:	fe 01       	movw	r30, r28
      ea:	eb 5b       	subi	r30, 0xBB	; 187
      ec:	ff 4f       	sbci	r31, 0xFF	; 255
      ee:	8d ec       	ldi	r24, 0xCD	; 205
      f0:	9c ec       	ldi	r25, 0xCC	; 204
      f2:	ac ec       	ldi	r26, 0xCC	; 204
      f4:	bd e3       	ldi	r27, 0x3D	; 61
      f6:	80 83       	st	Z, r24
      f8:	91 83       	std	Z+1, r25	; 0x01
      fa:	a2 83       	std	Z+2, r26	; 0x02
      fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
      fe:	8e 01       	movw	r16, r28
     100:	0f 5b       	subi	r16, 0xBF	; 191
     102:	1f 4f       	sbci	r17, 0xFF	; 255
     104:	fe 01       	movw	r30, r28
     106:	eb 5b       	subi	r30, 0xBB	; 187
     108:	ff 4f       	sbci	r31, 0xFF	; 255
     10a:	60 81       	ld	r22, Z
     10c:	71 81       	ldd	r23, Z+1	; 0x01
     10e:	82 81       	ldd	r24, Z+2	; 0x02
     110:	93 81       	ldd	r25, Z+3	; 0x03
     112:	2b ea       	ldi	r18, 0xAB	; 171
     114:	3a ea       	ldi	r19, 0xAA	; 170
     116:	4a e2       	ldi	r20, 0x2A	; 42
     118:	50 e4       	ldi	r21, 0x40	; 64
     11a:	da da       	rcall	.-2636   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     11c:	dc 01       	movw	r26, r24
     11e:	cb 01       	movw	r24, r22
     120:	f8 01       	movw	r30, r16
     122:	80 83       	st	Z, r24
     124:	91 83       	std	Z+1, r25	; 0x01
     126:	a2 83       	std	Z+2, r26	; 0x02
     128:	b3 83       	std	Z+3, r27	; 0x03
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     12a:	fe 01       	movw	r30, r28
     12c:	ef 5b       	subi	r30, 0xBF	; 191
     12e:	ff 4f       	sbci	r31, 0xFF	; 255
     130:	60 81       	ld	r22, Z
     132:	71 81       	ldd	r23, Z+1	; 0x01
     134:	82 81       	ldd	r24, Z+2	; 0x02
     136:	93 81       	ldd	r25, Z+3	; 0x03
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e8       	ldi	r20, 0x80	; 128
     13e:	5f e3       	ldi	r21, 0x3F	; 63
     140:	b9 dc       	rcall	.-1678   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     142:	88 23       	and	r24, r24
     144:	34 f4       	brge	.+12     	; 0x152 <__stack+0x73>
		__ticks = 1;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	fe 01       	movw	r30, r28
     14a:	e0 5c       	subi	r30, 0xC0	; 192
     14c:	ff 4f       	sbci	r31, 0xFF	; 255
     14e:	80 83       	st	Z, r24
     150:	94 c0       	rjmp	.+296    	; 0x27a <__stack+0x19b>
	else if (__tmp > 255)
     152:	fe 01       	movw	r30, r28
     154:	ef 5b       	subi	r30, 0xBF	; 191
     156:	ff 4f       	sbci	r31, 0xFF	; 255
     158:	60 81       	ld	r22, Z
     15a:	71 81       	ldd	r23, Z+1	; 0x01
     15c:	82 81       	ldd	r24, Z+2	; 0x02
     15e:	93 81       	ldd	r25, Z+3	; 0x03
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	4f e7       	ldi	r20, 0x7F	; 127
     166:	53 e4       	ldi	r21, 0x43	; 67
     168:	4f dc       	rcall	.-1890   	; 0xfffffa08 <__eeprom_end+0xff7efa08>
     16a:	18 16       	cp	r1, r24
     16c:	0c f0       	brlt	.+2      	; 0x170 <__stack+0x91>
     16e:	77 c0       	rjmp	.+238    	; 0x25e <__stack+0x17f>
	{
		_delay_ms(__us / 1000.0);
     170:	fe 01       	movw	r30, r28
     172:	eb 5b       	subi	r30, 0xBB	; 187
     174:	ff 4f       	sbci	r31, 0xFF	; 255
     176:	60 81       	ld	r22, Z
     178:	71 81       	ldd	r23, Z+1	; 0x01
     17a:	82 81       	ldd	r24, Z+2	; 0x02
     17c:	93 81       	ldd	r25, Z+3	; 0x03
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	4a e7       	ldi	r20, 0x7A	; 122
     184:	54 e4       	ldi	r21, 0x44	; 68
     186:	99 db       	rcall	.-2254   	; 0xfffff8ba <__eeprom_end+0xff7ef8ba>
     188:	dc 01       	movw	r26, r24
     18a:	cb 01       	movw	r24, r22
     18c:	8c af       	std	Y+60, r24	; 0x3c
     18e:	9d af       	std	Y+61, r25	; 0x3d
     190:	ae af       	std	Y+62, r26	; 0x3e
     192:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     194:	6c ad       	ldd	r22, Y+60	; 0x3c
     196:	7d ad       	ldd	r23, Y+61	; 0x3d
     198:	8e ad       	ldd	r24, Y+62	; 0x3e
     19a:	9f ad       	ldd	r25, Y+63	; 0x3f
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	4a ef       	ldi	r20, 0xFA	; 250
     1a2:	54 e4       	ldi	r21, 0x44	; 68
     1a4:	95 da       	rcall	.-2774   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	88 af       	std	Y+56, r24	; 0x38
     1ac:	99 af       	std	Y+57, r25	; 0x39
     1ae:	aa af       	std	Y+58, r26	; 0x3a
     1b0:	bb af       	std	Y+59, r27	; 0x3b
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     1b2:	68 ad       	ldd	r22, Y+56	; 0x38
     1b4:	79 ad       	ldd	r23, Y+57	; 0x39
     1b6:	8a ad       	ldd	r24, Y+58	; 0x3a
     1b8:	9b ad       	ldd	r25, Y+59	; 0x3b
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 e8       	ldi	r20, 0x80	; 128
     1c0:	5f e3       	ldi	r21, 0x3F	; 63
     1c2:	78 dc       	rcall	.-1808   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     1c4:	88 23       	and	r24, r24
     1c6:	2c f4       	brge	.+10     	; 0x1d2 <__stack+0xf3>
		__ticks = 1;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	9f ab       	std	Y+55, r25	; 0x37
     1ce:	8e ab       	std	Y+54, r24	; 0x36
     1d0:	3b c0       	rjmp	.+118    	; 0x248 <__stack+0x169>
	else if (__tmp > 65535)
     1d2:	68 ad       	ldd	r22, Y+56	; 0x38
     1d4:	79 ad       	ldd	r23, Y+57	; 0x39
     1d6:	8a ad       	ldd	r24, Y+58	; 0x3a
     1d8:	9b ad       	ldd	r25, Y+59	; 0x3b
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	3f ef       	ldi	r19, 0xFF	; 255
     1de:	4f e7       	ldi	r20, 0x7F	; 127
     1e0:	57 e4       	ldi	r21, 0x47	; 71
     1e2:	12 dc       	rcall	.-2012   	; 0xfffffa08 <__eeprom_end+0xff7efa08>
     1e4:	18 16       	cp	r1, r24
     1e6:	3c f5       	brge	.+78     	; 0x236 <__stack+0x157>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1e8:	6c ad       	ldd	r22, Y+60	; 0x3c
     1ea:	7d ad       	ldd	r23, Y+61	; 0x3d
     1ec:	8e ad       	ldd	r24, Y+62	; 0x3e
     1ee:	9f ad       	ldd	r25, Y+63	; 0x3f
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	40 e2       	ldi	r20, 0x20	; 32
     1f6:	51 e4       	ldi	r21, 0x41	; 65
     1f8:	6b da       	rcall	.-2858   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     1fa:	dc 01       	movw	r26, r24
     1fc:	cb 01       	movw	r24, r22
     1fe:	bc 01       	movw	r22, r24
     200:	cd 01       	movw	r24, r26
     202:	a2 d8       	rcall	.-3772   	; 0xfffff348 <__eeprom_end+0xff7ef348>
     204:	dc 01       	movw	r26, r24
     206:	cb 01       	movw	r24, r22
     208:	9f ab       	std	Y+55, r25	; 0x37
     20a:	8e ab       	std	Y+54, r24	; 0x36
     20c:	0f c0       	rjmp	.+30     	; 0x22c <__stack+0x14d>
     20e:	88 ec       	ldi	r24, 0xC8	; 200
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	9d ab       	std	Y+53, r25	; 0x35
     214:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     216:	8c a9       	ldd	r24, Y+52	; 0x34
     218:	9d a9       	ldd	r25, Y+53	; 0x35
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <__stack+0x13b>
     21e:	9d ab       	std	Y+53, r25	; 0x35
     220:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     222:	8e a9       	ldd	r24, Y+54	; 0x36
     224:	9f a9       	ldd	r25, Y+55	; 0x37
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	9f ab       	std	Y+55, r25	; 0x37
     22a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     22c:	8e a9       	ldd	r24, Y+54	; 0x36
     22e:	9f a9       	ldd	r25, Y+55	; 0x37
     230:	00 97       	sbiw	r24, 0x00	; 0
     232:	69 f7       	brne	.-38     	; 0x20e <__stack+0x12f>
     234:	2b c0       	rjmp	.+86     	; 0x28c <__stack+0x1ad>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     236:	68 ad       	ldd	r22, Y+56	; 0x38
     238:	79 ad       	ldd	r23, Y+57	; 0x39
     23a:	8a ad       	ldd	r24, Y+58	; 0x3a
     23c:	9b ad       	ldd	r25, Y+59	; 0x3b
     23e:	84 d8       	rcall	.-3832   	; 0xfffff348 <__eeprom_end+0xff7ef348>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	9f ab       	std	Y+55, r25	; 0x37
     246:	8e ab       	std	Y+54, r24	; 0x36
     248:	8e a9       	ldd	r24, Y+54	; 0x36
     24a:	9f a9       	ldd	r25, Y+55	; 0x37
     24c:	9b ab       	std	Y+51, r25	; 0x33
     24e:	8a ab       	std	Y+50, r24	; 0x32
     250:	8a a9       	ldd	r24, Y+50	; 0x32
     252:	9b a9       	ldd	r25, Y+51	; 0x33
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <__stack+0x175>
     258:	9b ab       	std	Y+51, r25	; 0x33
     25a:	8a ab       	std	Y+50, r24	; 0x32
     25c:	17 c0       	rjmp	.+46     	; 0x28c <__stack+0x1ad>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     25e:	fe 01       	movw	r30, r28
     260:	ef 5b       	subi	r30, 0xBF	; 191
     262:	ff 4f       	sbci	r31, 0xFF	; 255
     264:	60 81       	ld	r22, Z
     266:	71 81       	ldd	r23, Z+1	; 0x01
     268:	82 81       	ldd	r24, Z+2	; 0x02
     26a:	93 81       	ldd	r25, Z+3	; 0x03
     26c:	6d d8       	rcall	.-3878   	; 0xfffff348 <__eeprom_end+0xff7ef348>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	fe 01       	movw	r30, r28
     274:	e0 5c       	subi	r30, 0xC0	; 192
     276:	ff 4f       	sbci	r31, 0xFF	; 255
     278:	80 83       	st	Z, r24
     27a:	fe 01       	movw	r30, r28
     27c:	e0 5c       	subi	r30, 0xC0	; 192
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	80 81       	ld	r24, Z
     282:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     284:	89 a9       	ldd	r24, Y+49	; 0x31
     286:	8a 95       	dec	r24
     288:	f1 f7       	brne	.-4      	; 0x286 <__stack+0x1a7>
     28a:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(0.1);
		werti <<= 1;
     28c:	de 01       	movw	r26, r28
     28e:	a6 5b       	subi	r26, 0xB6	; 182
     290:	bf 4f       	sbci	r27, 0xFF	; 255
     292:	fe 01       	movw	r30, r28
     294:	e6 5b       	subi	r30, 0xB6	; 182
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	11 96       	adiw	r26, 0x01	; 1
     2a2:	9c 93       	st	X, r25
     2a4:	8e 93       	st	-X, r24
		if (BMA_PIN & (1 << SDO))
     2a6:	e0 e3       	ldi	r30, 0x30	; 48
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	88 2f       	mov	r24, r24
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	80 72       	andi	r24, 0x20	; 32
     2b2:	90 70       	andi	r25, 0x00	; 0
     2b4:	00 97       	sbiw	r24, 0x00	; 0
     2b6:	59 f0       	breq	.+22     	; 0x2ce <__stack+0x1ef>
			werti |= 1;
     2b8:	de 01       	movw	r26, r28
     2ba:	a6 5b       	subi	r26, 0xB6	; 182
     2bc:	bf 4f       	sbci	r27, 0xFF	; 255
     2be:	fe 01       	movw	r30, r28
     2c0:	e6 5b       	subi	r30, 0xB6	; 182
     2c2:	ff 4f       	sbci	r31, 0xFF	; 255
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	81 60       	ori	r24, 0x01	; 1
     2ca:	8d 93       	st	X+, r24
     2cc:	9c 93       	st	X, r25
		sbi(BMA_PORT, SCK);
     2ce:	a2 e3       	ldi	r26, 0x32	; 50
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e2 e3       	ldi	r30, 0x32	; 50
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	88 60       	ori	r24, 0x08	; 8
     2da:	8c 93       	st	X, r24
		wert <<= 1;
     2dc:	de 01       	movw	r26, r28
     2de:	a4 5b       	subi	r26, 0xB4	; 180
     2e0:	bf 4f       	sbci	r27, 0xFF	; 255
     2e2:	fe 01       	movw	r30, r28
     2e4:	e4 5b       	subi	r30, 0xB4	; 180
     2e6:	ff 4f       	sbci	r31, 0xFF	; 255
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	8d 93       	st	X+, r24
     2f2:	9c 93       	st	X, r25
     2f4:	8a e9       	ldi	r24, 0x9A	; 154
     2f6:	99 e9       	ldi	r25, 0x99	; 153
     2f8:	a9 e9       	ldi	r26, 0x99	; 153
     2fa:	be e3       	ldi	r27, 0x3E	; 62
     2fc:	8d a7       	std	Y+45, r24	; 0x2d
     2fe:	9e a7       	std	Y+46, r25	; 0x2e
     300:	af a7       	std	Y+47, r26	; 0x2f
     302:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     304:	6d a5       	ldd	r22, Y+45	; 0x2d
     306:	7e a5       	ldd	r23, Y+46	; 0x2e
     308:	8f a5       	ldd	r24, Y+47	; 0x2f
     30a:	98 a9       	ldd	r25, Y+48	; 0x30
     30c:	2b ea       	ldi	r18, 0xAB	; 171
     30e:	3a ea       	ldi	r19, 0xAA	; 170
     310:	4a e2       	ldi	r20, 0x2A	; 42
     312:	50 e4       	ldi	r21, 0x40	; 64
     314:	dd d9       	rcall	.-3142   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	89 a7       	std	Y+41, r24	; 0x29
     31c:	9a a7       	std	Y+42, r25	; 0x2a
     31e:	ab a7       	std	Y+43, r26	; 0x2b
     320:	bc a7       	std	Y+44, r27	; 0x2c
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     322:	69 a5       	ldd	r22, Y+41	; 0x29
     324:	7a a5       	ldd	r23, Y+42	; 0x2a
     326:	8b a5       	ldd	r24, Y+43	; 0x2b
     328:	9c a5       	ldd	r25, Y+44	; 0x2c
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e8       	ldi	r20, 0x80	; 128
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	c0 db       	rcall	.-2176   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     334:	88 23       	and	r24, r24
     336:	1c f4       	brge	.+6      	; 0x33e <__stack+0x25f>
		__ticks = 1;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	88 a7       	std	Y+40, r24	; 0x28
     33c:	88 c0       	rjmp	.+272    	; 0x44e <__stack+0x36f>
	else if (__tmp > 255)
     33e:	69 a5       	ldd	r22, Y+41	; 0x29
     340:	7a a5       	ldd	r23, Y+42	; 0x2a
     342:	8b a5       	ldd	r24, Y+43	; 0x2b
     344:	9c a5       	ldd	r25, Y+44	; 0x2c
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	4f e7       	ldi	r20, 0x7F	; 127
     34c:	53 e4       	ldi	r21, 0x43	; 67
     34e:	5c db       	rcall	.-2376   	; 0xfffffa08 <__eeprom_end+0xff7efa08>
     350:	18 16       	cp	r1, r24
     352:	0c f0       	brlt	.+2      	; 0x356 <__stack+0x277>
     354:	74 c0       	rjmp	.+232    	; 0x43e <__stack+0x35f>
	{
		_delay_ms(__us / 1000.0);
     356:	6d a5       	ldd	r22, Y+45	; 0x2d
     358:	7e a5       	ldd	r23, Y+46	; 0x2e
     35a:	8f a5       	ldd	r24, Y+47	; 0x2f
     35c:	98 a9       	ldd	r25, Y+48	; 0x30
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	4a e7       	ldi	r20, 0x7A	; 122
     364:	54 e4       	ldi	r21, 0x44	; 68
     366:	a9 da       	rcall	.-2734   	; 0xfffff8ba <__eeprom_end+0xff7ef8ba>
     368:	dc 01       	movw	r26, r24
     36a:	cb 01       	movw	r24, r22
     36c:	8c a3       	std	Y+36, r24	; 0x24
     36e:	9d a3       	std	Y+37, r25	; 0x25
     370:	ae a3       	std	Y+38, r26	; 0x26
     372:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     374:	6c a1       	ldd	r22, Y+36	; 0x24
     376:	7d a1       	ldd	r23, Y+37	; 0x25
     378:	8e a1       	ldd	r24, Y+38	; 0x26
     37a:	9f a1       	ldd	r25, Y+39	; 0x27
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	4a ef       	ldi	r20, 0xFA	; 250
     382:	54 e4       	ldi	r21, 0x44	; 68
     384:	a5 d9       	rcall	.-3254   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     386:	dc 01       	movw	r26, r24
     388:	cb 01       	movw	r24, r22
     38a:	88 a3       	std	Y+32, r24	; 0x20
     38c:	99 a3       	std	Y+33, r25	; 0x21
     38e:	aa a3       	std	Y+34, r26	; 0x22
     390:	bb a3       	std	Y+35, r27	; 0x23
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     392:	68 a1       	ldd	r22, Y+32	; 0x20
     394:	79 a1       	ldd	r23, Y+33	; 0x21
     396:	8a a1       	ldd	r24, Y+34	; 0x22
     398:	9b a1       	ldd	r25, Y+35	; 0x23
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e8       	ldi	r20, 0x80	; 128
     3a0:	5f e3       	ldi	r21, 0x3F	; 63
     3a2:	88 db       	rcall	.-2288   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     3a4:	88 23       	and	r24, r24
     3a6:	2c f4       	brge	.+10     	; 0x3b2 <__stack+0x2d3>
		__ticks = 1;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	9f 8f       	std	Y+31, r25	; 0x1f
     3ae:	8e 8f       	std	Y+30, r24	; 0x1e
     3b0:	3b c0       	rjmp	.+118    	; 0x428 <__stack+0x349>
	else if (__tmp > 65535)
     3b2:	68 a1       	ldd	r22, Y+32	; 0x20
     3b4:	79 a1       	ldd	r23, Y+33	; 0x21
     3b6:	8a a1       	ldd	r24, Y+34	; 0x22
     3b8:	9b a1       	ldd	r25, Y+35	; 0x23
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	3f ef       	ldi	r19, 0xFF	; 255
     3be:	4f e7       	ldi	r20, 0x7F	; 127
     3c0:	57 e4       	ldi	r21, 0x47	; 71
     3c2:	22 db       	rcall	.-2492   	; 0xfffffa08 <__eeprom_end+0xff7efa08>
     3c4:	18 16       	cp	r1, r24
     3c6:	3c f5       	brge	.+78     	; 0x416 <__stack+0x337>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3c8:	6c a1       	ldd	r22, Y+36	; 0x24
     3ca:	7d a1       	ldd	r23, Y+37	; 0x25
     3cc:	8e a1       	ldd	r24, Y+38	; 0x26
     3ce:	9f a1       	ldd	r25, Y+39	; 0x27
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e2       	ldi	r20, 0x20	; 32
     3d6:	51 e4       	ldi	r21, 0x41	; 65
     3d8:	7b d9       	rcall	.-3338   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     3da:	dc 01       	movw	r26, r24
     3dc:	cb 01       	movw	r24, r22
     3de:	bc 01       	movw	r22, r24
     3e0:	cd 01       	movw	r24, r26
     3e2:	b2 d7       	rcall	.+3940   	; 0x1348 <__fixunssfsi>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	9f 8f       	std	Y+31, r25	; 0x1f
     3ea:	8e 8f       	std	Y+30, r24	; 0x1e
     3ec:	0f c0       	rjmp	.+30     	; 0x40c <__stack+0x32d>
     3ee:	88 ec       	ldi	r24, 0xC8	; 200
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	9d 8f       	std	Y+29, r25	; 0x1d
     3f4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <__stack+0x31b>
     3fe:	9d 8f       	std	Y+29, r25	; 0x1d
     400:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     402:	8e 8d       	ldd	r24, Y+30	; 0x1e
     404:	9f 8d       	ldd	r25, Y+31	; 0x1f
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	9f 8f       	std	Y+31, r25	; 0x1f
     40a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     40c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     40e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     410:	00 97       	sbiw	r24, 0x00	; 0
     412:	69 f7       	brne	.-38     	; 0x3ee <__stack+0x30f>
     414:	22 c0       	rjmp	.+68     	; 0x45a <__stack+0x37b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     416:	68 a1       	ldd	r22, Y+32	; 0x20
     418:	79 a1       	ldd	r23, Y+33	; 0x21
     41a:	8a a1       	ldd	r24, Y+34	; 0x22
     41c:	9b a1       	ldd	r25, Y+35	; 0x23
     41e:	94 d7       	rcall	.+3880   	; 0x1348 <__fixunssfsi>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	9f 8f       	std	Y+31, r25	; 0x1f
     426:	8e 8f       	std	Y+30, r24	; 0x1e
     428:	8e 8d       	ldd	r24, Y+30	; 0x1e
     42a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     42c:	9b 8f       	std	Y+27, r25	; 0x1b
     42e:	8a 8f       	std	Y+26, r24	; 0x1a
     430:	8a 8d       	ldd	r24, Y+26	; 0x1a
     432:	9b 8d       	ldd	r25, Y+27	; 0x1b
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <__stack+0x355>
     438:	9b 8f       	std	Y+27, r25	; 0x1b
     43a:	8a 8f       	std	Y+26, r24	; 0x1a
     43c:	0e c0       	rjmp	.+28     	; 0x45a <__stack+0x37b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     43e:	69 a5       	ldd	r22, Y+41	; 0x29
     440:	7a a5       	ldd	r23, Y+42	; 0x2a
     442:	8b a5       	ldd	r24, Y+43	; 0x2b
     444:	9c a5       	ldd	r25, Y+44	; 0x2c
     446:	80 d7       	rcall	.+3840   	; 0x1348 <__fixunssfsi>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	88 a7       	std	Y+40, r24	; 0x28
     44e:	88 a5       	ldd	r24, Y+40	; 0x28
     450:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     452:	89 8d       	ldd	r24, Y+25	; 0x19
     454:	8a 95       	dec	r24
     456:	f1 f7       	brne	.-4      	; 0x454 <__stack+0x375>
     458:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(0.3);
		cbi(BMA_PORT, SCK);
     45a:	a2 e3       	ldi	r26, 0x32	; 50
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e2 e3       	ldi	r30, 0x32	; 50
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	87 7f       	andi	r24, 0xF7	; 247
     466:	8c 93       	st	X, r24
	unsigned char i;

	sbi(BMA_PORT, SCK);
	cbi(BMA_PORT, CS);
	cbi(BMA_PORT, SCK);
	for (i = 0; i < 16; i++)
     468:	de 01       	movw	r26, r28
     46a:	a7 5b       	subi	r26, 0xB7	; 183
     46c:	bf 4f       	sbci	r27, 0xFF	; 255
     46e:	fe 01       	movw	r30, r28
     470:	e7 5b       	subi	r30, 0xB7	; 183
     472:	ff 4f       	sbci	r31, 0xFF	; 255
     474:	80 81       	ld	r24, Z
     476:	8f 5f       	subi	r24, 0xFF	; 255
     478:	8c 93       	st	X, r24
     47a:	fe 01       	movw	r30, r28
     47c:	e7 5b       	subi	r30, 0xB7	; 183
     47e:	ff 4f       	sbci	r31, 0xFF	; 255
     480:	80 81       	ld	r24, Z
     482:	80 31       	cpi	r24, 0x10	; 16
     484:	08 f4       	brcc	.+2      	; 0x488 <__stack+0x3a9>
     486:	1a ce       	rjmp	.-972    	; 0xbc <BMA_trans+0x62>
     488:	8d ec       	ldi	r24, 0xCD	; 205
     48a:	9c ec       	ldi	r25, 0xCC	; 204
     48c:	ac ec       	ldi	r26, 0xCC	; 204
     48e:	bd e3       	ldi	r27, 0x3D	; 61
     490:	8d 8b       	std	Y+21, r24	; 0x15
     492:	9e 8b       	std	Y+22, r25	; 0x16
     494:	af 8b       	std	Y+23, r26	; 0x17
     496:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     498:	6d 89       	ldd	r22, Y+21	; 0x15
     49a:	7e 89       	ldd	r23, Y+22	; 0x16
     49c:	8f 89       	ldd	r24, Y+23	; 0x17
     49e:	98 8d       	ldd	r25, Y+24	; 0x18
     4a0:	2b ea       	ldi	r18, 0xAB	; 171
     4a2:	3a ea       	ldi	r19, 0xAA	; 170
     4a4:	4a e2       	ldi	r20, 0x2A	; 42
     4a6:	50 e4       	ldi	r21, 0x40	; 64
     4a8:	13 d9       	rcall	.-3546   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	89 8b       	std	Y+17, r24	; 0x11
     4b0:	9a 8b       	std	Y+18, r25	; 0x12
     4b2:	ab 8b       	std	Y+19, r26	; 0x13
     4b4:	bc 8b       	std	Y+20, r27	; 0x14
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     4b6:	69 89       	ldd	r22, Y+17	; 0x11
     4b8:	7a 89       	ldd	r23, Y+18	; 0x12
     4ba:	8b 89       	ldd	r24, Y+19	; 0x13
     4bc:	9c 89       	ldd	r25, Y+20	; 0x14
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 e8       	ldi	r20, 0x80	; 128
     4c4:	5f e3       	ldi	r21, 0x3F	; 63
     4c6:	f6 da       	rcall	.-2580   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     4c8:	88 23       	and	r24, r24
     4ca:	1c f4       	brge	.+6      	; 0x4d2 <__stack+0x3f3>
		__ticks = 1;
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	88 8b       	std	Y+16, r24	; 0x10
     4d0:	88 c0       	rjmp	.+272    	; 0x5e2 <__stack+0x503>
	else if (__tmp > 255)
     4d2:	69 89       	ldd	r22, Y+17	; 0x11
     4d4:	7a 89       	ldd	r23, Y+18	; 0x12
     4d6:	8b 89       	ldd	r24, Y+19	; 0x13
     4d8:	9c 89       	ldd	r25, Y+20	; 0x14
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	4f e7       	ldi	r20, 0x7F	; 127
     4e0:	53 e4       	ldi	r21, 0x43	; 67
     4e2:	92 da       	rcall	.-2780   	; 0xfffffa08 <__eeprom_end+0xff7efa08>
     4e4:	18 16       	cp	r1, r24
     4e6:	0c f0       	brlt	.+2      	; 0x4ea <__stack+0x40b>
     4e8:	74 c0       	rjmp	.+232    	; 0x5d2 <__stack+0x4f3>
	{
		_delay_ms(__us / 1000.0);
     4ea:	6d 89       	ldd	r22, Y+21	; 0x15
     4ec:	7e 89       	ldd	r23, Y+22	; 0x16
     4ee:	8f 89       	ldd	r24, Y+23	; 0x17
     4f0:	98 8d       	ldd	r25, Y+24	; 0x18
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	4a e7       	ldi	r20, 0x7A	; 122
     4f8:	54 e4       	ldi	r21, 0x44	; 68
     4fa:	df d9       	rcall	.-3138   	; 0xfffff8ba <__eeprom_end+0xff7ef8ba>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8c 87       	std	Y+12, r24	; 0x0c
     502:	9d 87       	std	Y+13, r25	; 0x0d
     504:	ae 87       	std	Y+14, r26	; 0x0e
     506:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     508:	6c 85       	ldd	r22, Y+12	; 0x0c
     50a:	7d 85       	ldd	r23, Y+13	; 0x0d
     50c:	8e 85       	ldd	r24, Y+14	; 0x0e
     50e:	9f 85       	ldd	r25, Y+15	; 0x0f
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	4a ef       	ldi	r20, 0xFA	; 250
     516:	54 e4       	ldi	r21, 0x44	; 68
     518:	db d8       	rcall	.-3658   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	88 87       	std	Y+8, r24	; 0x08
     520:	99 87       	std	Y+9, r25	; 0x09
     522:	aa 87       	std	Y+10, r26	; 0x0a
     524:	bb 87       	std	Y+11, r27	; 0x0b
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     526:	68 85       	ldd	r22, Y+8	; 0x08
     528:	79 85       	ldd	r23, Y+9	; 0x09
     52a:	8a 85       	ldd	r24, Y+10	; 0x0a
     52c:	9b 85       	ldd	r25, Y+11	; 0x0b
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e8       	ldi	r20, 0x80	; 128
     534:	5f e3       	ldi	r21, 0x3F	; 63
     536:	be da       	rcall	.-2692   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     538:	88 23       	and	r24, r24
     53a:	2c f4       	brge	.+10     	; 0x546 <__stack+0x467>
		__ticks = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	9f 83       	std	Y+7, r25	; 0x07
     542:	8e 83       	std	Y+6, r24	; 0x06
     544:	3b c0       	rjmp	.+118    	; 0x5bc <__stack+0x4dd>
	else if (__tmp > 65535)
     546:	68 85       	ldd	r22, Y+8	; 0x08
     548:	79 85       	ldd	r23, Y+9	; 0x09
     54a:	8a 85       	ldd	r24, Y+10	; 0x0a
     54c:	9b 85       	ldd	r25, Y+11	; 0x0b
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	3f ef       	ldi	r19, 0xFF	; 255
     552:	4f e7       	ldi	r20, 0x7F	; 127
     554:	57 e4       	ldi	r21, 0x47	; 71
     556:	58 da       	rcall	.-2896   	; 0xfffffa08 <__eeprom_end+0xff7efa08>
     558:	18 16       	cp	r1, r24
     55a:	3c f5       	brge	.+78     	; 0x5aa <__stack+0x4cb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     55c:	6c 85       	ldd	r22, Y+12	; 0x0c
     55e:	7d 85       	ldd	r23, Y+13	; 0x0d
     560:	8e 85       	ldd	r24, Y+14	; 0x0e
     562:	9f 85       	ldd	r25, Y+15	; 0x0f
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	b1 d8       	rcall	.-3742   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     56e:	dc 01       	movw	r26, r24
     570:	cb 01       	movw	r24, r22
     572:	bc 01       	movw	r22, r24
     574:	cd 01       	movw	r24, r26
     576:	e8 d6       	rcall	.+3536   	; 0x1348 <__fixunssfsi>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	9f 83       	std	Y+7, r25	; 0x07
     57e:	8e 83       	std	Y+6, r24	; 0x06
     580:	0f c0       	rjmp	.+30     	; 0x5a0 <__stack+0x4c1>
     582:	88 ec       	ldi	r24, 0xC8	; 200
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9d 83       	std	Y+5, r25	; 0x05
     588:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     58a:	8c 81       	ldd	r24, Y+4	; 0x04
     58c:	9d 81       	ldd	r25, Y+5	; 0x05
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <__stack+0x4af>
     592:	9d 83       	std	Y+5, r25	; 0x05
     594:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     596:	8e 81       	ldd	r24, Y+6	; 0x06
     598:	9f 81       	ldd	r25, Y+7	; 0x07
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	9f 83       	std	Y+7, r25	; 0x07
     59e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a0:	8e 81       	ldd	r24, Y+6	; 0x06
     5a2:	9f 81       	ldd	r25, Y+7	; 0x07
     5a4:	00 97       	sbiw	r24, 0x00	; 0
     5a6:	69 f7       	brne	.-38     	; 0x582 <__stack+0x4a3>
     5a8:	22 c0       	rjmp	.+68     	; 0x5ee <__stack+0x50f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5aa:	68 85       	ldd	r22, Y+8	; 0x08
     5ac:	79 85       	ldd	r23, Y+9	; 0x09
     5ae:	8a 85       	ldd	r24, Y+10	; 0x0a
     5b0:	9b 85       	ldd	r25, Y+11	; 0x0b
     5b2:	ca d6       	rcall	.+3476   	; 0x1348 <__fixunssfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	9f 83       	std	Y+7, r25	; 0x07
     5ba:	8e 83       	std	Y+6, r24	; 0x06
     5bc:	8e 81       	ldd	r24, Y+6	; 0x06
     5be:	9f 81       	ldd	r25, Y+7	; 0x07
     5c0:	9b 83       	std	Y+3, r25	; 0x03
     5c2:	8a 83       	std	Y+2, r24	; 0x02
     5c4:	8a 81       	ldd	r24, Y+2	; 0x02
     5c6:	9b 81       	ldd	r25, Y+3	; 0x03
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <__stack+0x4e9>
     5cc:	9b 83       	std	Y+3, r25	; 0x03
     5ce:	8a 83       	std	Y+2, r24	; 0x02
     5d0:	0e c0       	rjmp	.+28     	; 0x5ee <__stack+0x50f>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5d2:	69 89       	ldd	r22, Y+17	; 0x11
     5d4:	7a 89       	ldd	r23, Y+18	; 0x12
     5d6:	8b 89       	ldd	r24, Y+19	; 0x13
     5d8:	9c 89       	ldd	r25, Y+20	; 0x14
     5da:	b6 d6       	rcall	.+3436   	; 0x1348 <__fixunssfsi>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	88 8b       	std	Y+16, r24	; 0x10
     5e2:	88 89       	ldd	r24, Y+16	; 0x10
     5e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	8a 95       	dec	r24
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <__stack+0x509>
     5ec:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(0.3);
		cbi(BMA_PORT, SCK);
//		_delay_us(0.3);
	}
	_delay_us(0.1);
	sbi(BMA_PORT, CS);
     5ee:	a2 e3       	ldi	r26, 0x32	; 50
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	e2 e3       	ldi	r30, 0x32	; 50
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	84 60       	ori	r24, 0x04	; 4
     5fa:	8c 93       	st	X, r24
	return werti;
     5fc:	fe 01       	movw	r30, r28
     5fe:	e6 5b       	subi	r30, 0xB6	; 182
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	80 81       	ld	r24, Z
     604:	91 81       	ldd	r25, Z+1	; 0x01
}
     606:	c3 5b       	subi	r28, 0xB3	; 179
     608:	df 4f       	sbci	r29, 0xFF	; 255
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	08 95       	ret

0000061e <BMA_uninit>:

void BMA_uninit(void)
{
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
	//BMA_trans(0x0A01);
	cbi(BMA_PORT, FSK);
     626:	a2 e3       	ldi	r26, 0x32	; 50
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	e2 e3       	ldi	r30, 0x32	; 50
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	8d 7f       	andi	r24, 0xFD	; 253
     632:	8c 93       	st	X, r24
}
     634:	cf 91       	pop	r28
     636:	df 91       	pop	r29
     638:	08 95       	ret

0000063a <BMA_init>:

void BMA_init(void)
{
     63a:	df 93       	push	r29
     63c:	cf 93       	push	r28
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	2e 97       	sbiw	r28, 0x0e	; 14
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
	BMA_DDR = (1 << SDI) | (1 << SCK) | (1 << CS) | (1 << FSK);
     64e:	e1 e3       	ldi	r30, 0x31	; 49
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	8e e1       	ldi	r24, 0x1E	; 30
     654:	80 83       	st	Z, r24

	sbi(BMA_PORT, CS);
     656:	a2 e3       	ldi	r26, 0x32	; 50
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	e2 e3       	ldi	r30, 0x32	; 50
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	84 60       	ori	r24, 0x04	; 4
     662:	8c 93       	st	X, r24
	sbi(BMA_PORT, FSK);
     664:	a2 e3       	ldi	r26, 0x32	; 50
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	e2 e3       	ldi	r30, 0x32	; 50
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	82 60       	ori	r24, 0x02	; 2
     670:	8c 93       	st	X, r24
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b1 e4       	ldi	r27, 0x41	; 65
     67a:	8b 87       	std	Y+11, r24	; 0x0b
     67c:	9c 87       	std	Y+12, r25	; 0x0c
     67e:	ad 87       	std	Y+13, r26	; 0x0d
     680:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     682:	6b 85       	ldd	r22, Y+11	; 0x0b
     684:	7c 85       	ldd	r23, Y+12	; 0x0c
     686:	8d 85       	ldd	r24, Y+13	; 0x0d
     688:	9e 85       	ldd	r25, Y+14	; 0x0e
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	4a ef       	ldi	r20, 0xFA	; 250
     690:	54 e4       	ldi	r21, 0x44	; 68
     692:	1e d8       	rcall	.-4036   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	8f 83       	std	Y+7, r24	; 0x07
     69a:	98 87       	std	Y+8, r25	; 0x08
     69c:	a9 87       	std	Y+9, r26	; 0x09
     69e:	ba 87       	std	Y+10, r27	; 0x0a
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     6a0:	6f 81       	ldd	r22, Y+7	; 0x07
     6a2:	78 85       	ldd	r23, Y+8	; 0x08
     6a4:	89 85       	ldd	r24, Y+9	; 0x09
     6a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	5f e3       	ldi	r21, 0x3F	; 63
     6b0:	01 da       	rcall	.-3070   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     6b2:	88 23       	and	r24, r24
     6b4:	2c f4       	brge	.+10     	; 0x6c0 <BMA_init+0x86>
		__ticks = 1;
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	9e 83       	std	Y+6, r25	; 0x06
     6bc:	8d 83       	std	Y+5, r24	; 0x05
     6be:	3b c0       	rjmp	.+118    	; 0x736 <BMA_init+0xfc>
	else if (__tmp > 65535)
     6c0:	6f 81       	ldd	r22, Y+7	; 0x07
     6c2:	78 85       	ldd	r23, Y+8	; 0x08
     6c4:	89 85       	ldd	r24, Y+9	; 0x09
     6c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	3f ef       	ldi	r19, 0xFF	; 255
     6cc:	4f e7       	ldi	r20, 0x7F	; 127
     6ce:	57 e4       	ldi	r21, 0x47	; 71
     6d0:	9b d9       	rcall	.-3274   	; 0xfffffa08 <__eeprom_end+0xff7efa08>
     6d2:	18 16       	cp	r1, r24
     6d4:	3c f5       	brge	.+78     	; 0x724 <BMA_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d6:	6b 85       	ldd	r22, Y+11	; 0x0b
     6d8:	7c 85       	ldd	r23, Y+12	; 0x0c
     6da:	8d 85       	ldd	r24, Y+13	; 0x0d
     6dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	40 e2       	ldi	r20, 0x20	; 32
     6e4:	51 e4       	ldi	r21, 0x41	; 65
     6e6:	f4 d7       	rcall	.+4072   	; 0x16d0 <__mulsf3>
     6e8:	dc 01       	movw	r26, r24
     6ea:	cb 01       	movw	r24, r22
     6ec:	bc 01       	movw	r22, r24
     6ee:	cd 01       	movw	r24, r26
     6f0:	2b d6       	rcall	.+3158   	; 0x1348 <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	9e 83       	std	Y+6, r25	; 0x06
     6f8:	8d 83       	std	Y+5, r24	; 0x05
     6fa:	0f c0       	rjmp	.+30     	; 0x71a <BMA_init+0xe0>
     6fc:	88 ec       	ldi	r24, 0xC8	; 200
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	9c 83       	std	Y+4, r25	; 0x04
     702:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     704:	8b 81       	ldd	r24, Y+3	; 0x03
     706:	9c 81       	ldd	r25, Y+4	; 0x04
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <BMA_init+0xce>
     70c:	9c 83       	std	Y+4, r25	; 0x04
     70e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     710:	8d 81       	ldd	r24, Y+5	; 0x05
     712:	9e 81       	ldd	r25, Y+6	; 0x06
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	9e 83       	std	Y+6, r25	; 0x06
     718:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     71a:	8d 81       	ldd	r24, Y+5	; 0x05
     71c:	9e 81       	ldd	r25, Y+6	; 0x06
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	69 f7       	brne	.-38     	; 0x6fc <BMA_init+0xc2>
     722:	13 c0       	rjmp	.+38     	; 0x74a <BMA_init+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     724:	6f 81       	ldd	r22, Y+7	; 0x07
     726:	78 85       	ldd	r23, Y+8	; 0x08
     728:	89 85       	ldd	r24, Y+9	; 0x09
     72a:	9a 85       	ldd	r25, Y+10	; 0x0a
     72c:	0d d6       	rcall	.+3098   	; 0x1348 <__fixunssfsi>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	9e 83       	std	Y+6, r25	; 0x06
     734:	8d 83       	std	Y+5, r24	; 0x05
     736:	8d 81       	ldd	r24, Y+5	; 0x05
     738:	9e 81       	ldd	r25, Y+6	; 0x06
     73a:	9a 83       	std	Y+2, r25	; 0x02
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <BMA_init+0x108>
     746:	9a 83       	std	Y+2, r25	; 0x02
     748:	89 83       	std	Y+1, r24	; 0x01
	//_delay_ms(10); // wait until POR done
	//BMA_trans(0x0A00);

	_delay_ms(10); // wait until POR done

	BMA_trans(0x1580);
     74a:	80 e8       	ldi	r24, 0x80	; 128
     74c:	95 e1       	ldi	r25, 0x15	; 21
     74e:	85 dc       	rcall	.-1782   	; 0x5a <BMA_trans>
}
     750:	2e 96       	adiw	r28, 0x0e	; 14
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <x>:


int x(){
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	a4 97       	sbiw	r28, 0x24	; 36
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
	BMA_init();
     77a:	5f df       	rcall	.-322    	; 0x63a <BMA_init>
	while(1)
	{
		char buf[16];
		int x = ( (BMA_trans(0x8200) & 0xff) | ( (BMA_trans(0x8300) & 0xff) << 8) ) >> 6;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	92 e8       	ldi	r25, 0x82	; 130
     780:	6c dc       	rcall	.-1832   	; 0x5a <BMA_trans>
     782:	8c 01       	movw	r16, r24
     784:	10 70       	andi	r17, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	93 e8       	ldi	r25, 0x83	; 131
     78a:	67 dc       	rcall	.-1842   	; 0x5a <BMA_trans>
     78c:	98 2f       	mov	r25, r24
     78e:	88 27       	eor	r24, r24
     790:	80 2b       	or	r24, r16
     792:	91 2b       	or	r25, r17
     794:	00 24       	eor	r0, r0
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	00 1c       	adc	r0, r0
     79c:	88 0f       	add	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	00 1c       	adc	r0, r0
     7a2:	89 2f       	mov	r24, r25
     7a4:	90 2d       	mov	r25, r0
     7a6:	9c 8b       	std	Y+20, r25	; 0x14
     7a8:	8b 8b       	std	Y+19, r24	; 0x13
		if(x & 0x0200)
     7aa:	8b 89       	ldd	r24, Y+19	; 0x13
     7ac:	9c 89       	ldd	r25, Y+20	; 0x14
     7ae:	80 70       	andi	r24, 0x00	; 0
     7b0:	92 70       	andi	r25, 0x02	; 2
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	29 f0       	breq	.+10     	; 0x7c0 <x+0x5e>
		{
			x |= 0xfe00;
     7b6:	8b 89       	ldd	r24, Y+19	; 0x13
     7b8:	9c 89       	ldd	r25, Y+20	; 0x14
     7ba:	9e 6f       	ori	r25, 0xFE	; 254
     7bc:	9c 8b       	std	Y+20, r25	; 0x14
     7be:	8b 8b       	std	Y+19, r24	; 0x13
		}
		x -= 36;
     7c0:	8b 89       	ldd	r24, Y+19	; 0x13
     7c2:	9c 89       	ldd	r25, Y+20	; 0x14
     7c4:	84 97       	sbiw	r24, 0x24	; 36
     7c6:	9c 8b       	std	Y+20, r25	; 0x14
     7c8:	8b 8b       	std	Y+19, r24	; 0x13
//		dtostrf((x*1.0) / 230, 10, 2,buf );

		int y = ( (BMA_trans(0x8400) & 0xff) | ( (BMA_trans(0x8500) & 0xff) << 8) ) >> 6;
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	94 e8       	ldi	r25, 0x84	; 132
     7ce:	45 dc       	rcall	.-1910   	; 0x5a <BMA_trans>
     7d0:	8c 01       	movw	r16, r24
     7d2:	10 70       	andi	r17, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	95 e8       	ldi	r25, 0x85	; 133
     7d8:	40 dc       	rcall	.-1920   	; 0x5a <BMA_trans>
     7da:	98 2f       	mov	r25, r24
     7dc:	88 27       	eor	r24, r24
     7de:	80 2b       	or	r24, r16
     7e0:	91 2b       	or	r25, r17
     7e2:	00 24       	eor	r0, r0
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	00 1c       	adc	r0, r0
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	00 1c       	adc	r0, r0
     7f0:	89 2f       	mov	r24, r25
     7f2:	90 2d       	mov	r25, r0
     7f4:	9a 8b       	std	Y+18, r25	; 0x12
     7f6:	89 8b       	std	Y+17, r24	; 0x11
		if(y & 0x0200)
     7f8:	89 89       	ldd	r24, Y+17	; 0x11
     7fa:	9a 89       	ldd	r25, Y+18	; 0x12
     7fc:	80 70       	andi	r24, 0x00	; 0
     7fe:	92 70       	andi	r25, 0x02	; 2
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	29 f0       	breq	.+10     	; 0x80e <x+0xac>
		{
			y |= 0xfe00;
     804:	89 89       	ldd	r24, Y+17	; 0x11
     806:	9a 89       	ldd	r25, Y+18	; 0x12
     808:	9e 6f       	ori	r25, 0xFE	; 254
     80a:	9a 8b       	std	Y+18, r25	; 0x12
     80c:	89 8b       	std	Y+17, r24	; 0x11
		}
		y += 32;
     80e:	89 89       	ldd	r24, Y+17	; 0x11
     810:	9a 89       	ldd	r25, Y+18	; 0x12
     812:	80 96       	adiw	r24, 0x20	; 32
     814:	9a 8b       	std	Y+18, r25	; 0x12
     816:	89 8b       	std	Y+17, r24	; 0x11
//		dtostrf((y*1.0) / 235, 10, 2,buf );

		int z = ( (BMA_trans(0x8600) & 0xff) | ( (BMA_trans(0x8700) & 0xff) << 8) ) >> 6;
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	96 e8       	ldi	r25, 0x86	; 134
     81c:	1e dc       	rcall	.-1988   	; 0x5a <BMA_trans>
     81e:	8c 01       	movw	r16, r24
     820:	10 70       	andi	r17, 0x00	; 0
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	97 e8       	ldi	r25, 0x87	; 135
     826:	19 dc       	rcall	.-1998   	; 0x5a <BMA_trans>
     828:	98 2f       	mov	r25, r24
     82a:	88 27       	eor	r24, r24
     82c:	80 2b       	or	r24, r16
     82e:	91 2b       	or	r25, r17
     830:	00 24       	eor	r0, r0
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	00 1c       	adc	r0, r0
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	00 1c       	adc	r0, r0
     83e:	89 2f       	mov	r24, r25
     840:	90 2d       	mov	r25, r0
     842:	98 8b       	std	Y+16, r25	; 0x10
     844:	8f 87       	std	Y+15, r24	; 0x0f
		if(z & 0x0200)
     846:	8f 85       	ldd	r24, Y+15	; 0x0f
     848:	98 89       	ldd	r25, Y+16	; 0x10
     84a:	80 70       	andi	r24, 0x00	; 0
     84c:	92 70       	andi	r25, 0x02	; 2
     84e:	00 97       	sbiw	r24, 0x00	; 0
     850:	29 f0       	breq	.+10     	; 0x85c <x+0xfa>
		{
			z |= 0xfe00;
     852:	8f 85       	ldd	r24, Y+15	; 0x0f
     854:	98 89       	ldd	r25, Y+16	; 0x10
     856:	9e 6f       	ori	r25, 0xFE	; 254
     858:	98 8b       	std	Y+16, r25	; 0x10
     85a:	8f 87       	std	Y+15, r24	; 0x0f
		}
		z -= 8;
     85c:	8f 85       	ldd	r24, Y+15	; 0x0f
     85e:	98 89       	ldd	r25, Y+16	; 0x10
     860:	08 97       	sbiw	r24, 0x08	; 8
     862:	98 8b       	std	Y+16, r25	; 0x10
     864:	8f 87       	std	Y+15, r24	; 0x0f
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a0 e2       	ldi	r26, 0x20	; 32
     86c:	b1 e4       	ldi	r27, 0x41	; 65
     86e:	8b 87       	std	Y+11, r24	; 0x0b
     870:	9c 87       	std	Y+12, r25	; 0x0c
     872:	ad 87       	std	Y+13, r26	; 0x0d
     874:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     876:	6b 85       	ldd	r22, Y+11	; 0x0b
     878:	7c 85       	ldd	r23, Y+12	; 0x0c
     87a:	8d 85       	ldd	r24, Y+13	; 0x0d
     87c:	9e 85       	ldd	r25, Y+14	; 0x0e
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	4a ef       	ldi	r20, 0xFA	; 250
     884:	54 e4       	ldi	r21, 0x44	; 68
     886:	24 d7       	rcall	.+3656   	; 0x16d0 <__mulsf3>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	8f 83       	std	Y+7, r24	; 0x07
     88e:	98 87       	std	Y+8, r25	; 0x08
     890:	a9 87       	std	Y+9, r26	; 0x09
     892:	ba 87       	std	Y+10, r27	; 0x0a
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     894:	6f 81       	ldd	r22, Y+7	; 0x07
     896:	78 85       	ldd	r23, Y+8	; 0x08
     898:	89 85       	ldd	r24, Y+9	; 0x09
     89a:	9a 85       	ldd	r25, Y+10	; 0x0a
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e8       	ldi	r20, 0x80	; 128
     8a2:	5f e3       	ldi	r21, 0x3F	; 63
     8a4:	07 d9       	rcall	.-3570   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     8a6:	88 23       	and	r24, r24
     8a8:	2c f4       	brge	.+10     	; 0x8b4 <x+0x152>
		__ticks = 1;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	9e 83       	std	Y+6, r25	; 0x06
     8b0:	8d 83       	std	Y+5, r24	; 0x05
     8b2:	3b c0       	rjmp	.+118    	; 0x92a <x+0x1c8>
	else if (__tmp > 65535)
     8b4:	6f 81       	ldd	r22, Y+7	; 0x07
     8b6:	78 85       	ldd	r23, Y+8	; 0x08
     8b8:	89 85       	ldd	r24, Y+9	; 0x09
     8ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	3f ef       	ldi	r19, 0xFF	; 255
     8c0:	4f e7       	ldi	r20, 0x7F	; 127
     8c2:	57 e4       	ldi	r21, 0x47	; 71
     8c4:	a1 d8       	rcall	.-3774   	; 0xfffffa08 <__eeprom_end+0xff7efa08>
     8c6:	18 16       	cp	r1, r24
     8c8:	3c f5       	brge	.+78     	; 0x918 <x+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ca:	6b 85       	ldd	r22, Y+11	; 0x0b
     8cc:	7c 85       	ldd	r23, Y+12	; 0x0c
     8ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     8d0:	9e 85       	ldd	r25, Y+14	; 0x0e
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e2       	ldi	r20, 0x20	; 32
     8d8:	51 e4       	ldi	r21, 0x41	; 65
     8da:	fa d6       	rcall	.+3572   	; 0x16d0 <__mulsf3>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	bc 01       	movw	r22, r24
     8e2:	cd 01       	movw	r24, r26
     8e4:	31 d5       	rcall	.+2658   	; 0x1348 <__fixunssfsi>
     8e6:	dc 01       	movw	r26, r24
     8e8:	cb 01       	movw	r24, r22
     8ea:	9e 83       	std	Y+6, r25	; 0x06
     8ec:	8d 83       	std	Y+5, r24	; 0x05
     8ee:	0f c0       	rjmp	.+30     	; 0x90e <x+0x1ac>
     8f0:	88 ec       	ldi	r24, 0xC8	; 200
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	9c 83       	std	Y+4, r25	; 0x04
     8f6:	8b 83       	std	Y+3, r24	; 0x03
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	9c 81       	ldd	r25, Y+4	; 0x04
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <x+0x19a>
     900:	9c 83       	std	Y+4, r25	; 0x04
     902:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     904:	8d 81       	ldd	r24, Y+5	; 0x05
     906:	9e 81       	ldd	r25, Y+6	; 0x06
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	9e 83       	std	Y+6, r25	; 0x06
     90c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     90e:	8d 81       	ldd	r24, Y+5	; 0x05
     910:	9e 81       	ldd	r25, Y+6	; 0x06
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	69 f7       	brne	.-38     	; 0x8f0 <x+0x18e>
     916:	32 cf       	rjmp	.-412    	; 0x77c <x+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     918:	6f 81       	ldd	r22, Y+7	; 0x07
     91a:	78 85       	ldd	r23, Y+8	; 0x08
     91c:	89 85       	ldd	r24, Y+9	; 0x09
     91e:	9a 85       	ldd	r25, Y+10	; 0x0a
     920:	13 d5       	rcall	.+2598   	; 0x1348 <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	9e 83       	std	Y+6, r25	; 0x06
     928:	8d 83       	std	Y+5, r24	; 0x05
     92a:	8d 81       	ldd	r24, Y+5	; 0x05
     92c:	9e 81       	ldd	r25, Y+6	; 0x06
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <x+0x1d4>
     93a:	9a 83       	std	Y+2, r25	; 0x02
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	1e cf       	rjmp	.-452    	; 0x77c <x+0x1a>

00000940 <send>:
unsigned int BMA_trans(unsigned int wert);
void BMA_init(void);
void BMA_uninit(void);

void send(char bSend)
{
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	29 97       	sbiw	r28, 0x09	; 9
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
     958:	89 87       	std	Y+9, r24	; 0x09
	BMA_init();
     95a:	6f de       	rcall	.-802    	; 0x63a <BMA_init>

	int x = ( (BMA_trans(0x8200) & 0xff) | ( (BMA_trans(0x8300) & 0xff) << 8) ) >> 6;
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	92 e8       	ldi	r25, 0x82	; 130
     960:	7c db       	rcall	.-2312   	; 0x5a <BMA_trans>
     962:	8c 01       	movw	r16, r24
     964:	10 70       	andi	r17, 0x00	; 0
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	93 e8       	ldi	r25, 0x83	; 131
     96a:	77 db       	rcall	.-2322   	; 0x5a <BMA_trans>
     96c:	98 2f       	mov	r25, r24
     96e:	88 27       	eor	r24, r24
     970:	80 2b       	or	r24, r16
     972:	91 2b       	or	r25, r17
     974:	00 24       	eor	r0, r0
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	00 1c       	adc	r0, r0
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	00 1c       	adc	r0, r0
     982:	89 2f       	mov	r24, r25
     984:	90 2d       	mov	r25, r0
     986:	9c 83       	std	Y+4, r25	; 0x04
     988:	8b 83       	std	Y+3, r24	; 0x03
	int y = ( (BMA_trans(0x8400) & 0xff) | ( (BMA_trans(0x8500) & 0xff) << 8) ) >> 6;
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	94 e8       	ldi	r25, 0x84	; 132
     98e:	65 db       	rcall	.-2358   	; 0x5a <BMA_trans>
     990:	8c 01       	movw	r16, r24
     992:	10 70       	andi	r17, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	95 e8       	ldi	r25, 0x85	; 133
     998:	60 db       	rcall	.-2368   	; 0x5a <BMA_trans>
     99a:	98 2f       	mov	r25, r24
     99c:	88 27       	eor	r24, r24
     99e:	80 2b       	or	r24, r16
     9a0:	91 2b       	or	r25, r17
     9a2:	00 24       	eor	r0, r0
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	00 1c       	adc	r0, r0
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	00 1c       	adc	r0, r0
     9b0:	89 2f       	mov	r24, r25
     9b2:	90 2d       	mov	r25, r0
     9b4:	9e 83       	std	Y+6, r25	; 0x06
     9b6:	8d 83       	std	Y+5, r24	; 0x05
	int z = ( (BMA_trans(0x8600) & 0xff) | ( (BMA_trans(0x8700) & 0xff) << 8) ) >> 6;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	96 e8       	ldi	r25, 0x86	; 134
     9bc:	4e db       	rcall	.-2404   	; 0x5a <BMA_trans>
     9be:	8c 01       	movw	r16, r24
     9c0:	10 70       	andi	r17, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	97 e8       	ldi	r25, 0x87	; 135
     9c6:	49 db       	rcall	.-2414   	; 0x5a <BMA_trans>
     9c8:	98 2f       	mov	r25, r24
     9ca:	88 27       	eor	r24, r24
     9cc:	80 2b       	or	r24, r16
     9ce:	91 2b       	or	r25, r17
     9d0:	00 24       	eor	r0, r0
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	00 1c       	adc	r0, r0
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	00 1c       	adc	r0, r0
     9de:	89 2f       	mov	r24, r25
     9e0:	90 2d       	mov	r25, r0
     9e2:	98 87       	std	Y+8, r25	; 0x08
     9e4:	8f 83       	std	Y+7, r24	; 0x07

	BMA_uninit();
     9e6:	1b de       	rcall	.-970    	; 0x61e <BMA_uninit>

	if(x & 0x0200)
     9e8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ea:	9c 81       	ldd	r25, Y+4	; 0x04
     9ec:	80 70       	andi	r24, 0x00	; 0
     9ee:	92 70       	andi	r25, 0x02	; 2
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	29 f0       	breq	.+10     	; 0x9fe <send+0xbe>
	{
		x |= 0xfe00;
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	9c 81       	ldd	r25, Y+4	; 0x04
     9f8:	9e 6f       	ori	r25, 0xFE	; 254
     9fa:	9c 83       	std	Y+4, r25	; 0x04
     9fc:	8b 83       	std	Y+3, r24	; 0x03
	}
	if(y & 0x0200)
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	9e 81       	ldd	r25, Y+6	; 0x06
     a02:	80 70       	andi	r24, 0x00	; 0
     a04:	92 70       	andi	r25, 0x02	; 2
     a06:	00 97       	sbiw	r24, 0x00	; 0
     a08:	29 f0       	breq	.+10     	; 0xa14 <send+0xd4>
	{
		y |= 0xfe00;
     a0a:	8d 81       	ldd	r24, Y+5	; 0x05
     a0c:	9e 81       	ldd	r25, Y+6	; 0x06
     a0e:	9e 6f       	ori	r25, 0xFE	; 254
     a10:	9e 83       	std	Y+6, r25	; 0x06
     a12:	8d 83       	std	Y+5, r24	; 0x05
	}
	if(z & 0x0200)
     a14:	8f 81       	ldd	r24, Y+7	; 0x07
     a16:	98 85       	ldd	r25, Y+8	; 0x08
     a18:	80 70       	andi	r24, 0x00	; 0
     a1a:	92 70       	andi	r25, 0x02	; 2
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	29 f0       	breq	.+10     	; 0xa2a <send+0xea>
	{
		z |= 0xfe00;
     a20:	8f 81       	ldd	r24, Y+7	; 0x07
     a22:	98 85       	ldd	r25, Y+8	; 0x08
     a24:	9e 6f       	ori	r25, 0xFE	; 254
     a26:	98 87       	std	Y+8, r25	; 0x08
     a28:	8f 83       	std	Y+7, r24	; 0x07
	}
	x -= 36;
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	84 97       	sbiw	r24, 0x24	; 36
     a30:	9c 83       	std	Y+4, r25	; 0x04
     a32:	8b 83       	std	Y+3, r24	; 0x03
	y += 32;
     a34:	8d 81       	ldd	r24, Y+5	; 0x05
     a36:	9e 81       	ldd	r25, Y+6	; 0x06
     a38:	80 96       	adiw	r24, 0x20	; 32
     a3a:	9e 83       	std	Y+6, r25	; 0x06
     a3c:	8d 83       	std	Y+5, r24	; 0x05
	z -= 8;
     a3e:	8f 81       	ldd	r24, Y+7	; 0x07
     a40:	98 85       	ldd	r25, Y+8	; 0x08
     a42:	08 97       	sbiw	r24, 0x08	; 8
     a44:	98 87       	std	Y+8, r25	; 0x08
     a46:	8f 83       	std	Y+7, r24	; 0x07

	char *buf = "g123456789012345678901234567890\0\0\0";
     a48:	80 e6       	ldi	r24, 0x60	; 96
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01
	memcpy (buf + 1, &x , 2);
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	9e 01       	movw	r18, r28
     a58:	2d 5f       	subi	r18, 0xFD	; 253
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	b9 01       	movw	r22, r18
     a5e:	42 e0       	ldi	r20, 0x02	; 2
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	be da       	rcall	.-2692   	; 0xffffffe0 <__eeprom_end+0xff7effe0>
	memcpy (buf + 3, &y , 2);
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	9a 81       	ldd	r25, Y+2	; 0x02
     a68:	03 96       	adiw	r24, 0x03	; 3
     a6a:	9e 01       	movw	r18, r28
     a6c:	2b 5f       	subi	r18, 0xFB	; 251
     a6e:	3f 4f       	sbci	r19, 0xFF	; 255
     a70:	b9 01       	movw	r22, r18
     a72:	42 e0       	ldi	r20, 0x02	; 2
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	b4 da       	rcall	.-2712   	; 0xffffffe0 <__eeprom_end+0xff7effe0>
	memcpy (buf + 5, &z , 2);
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	9a 81       	ldd	r25, Y+2	; 0x02
     a7c:	05 96       	adiw	r24, 0x05	; 5
     a7e:	9e 01       	movw	r18, r28
     a80:	29 5f       	subi	r18, 0xF9	; 249
     a82:	3f 4f       	sbci	r19, 0xFF	; 255
     a84:	b9 01       	movw	r22, r18
     a86:	42 e0       	ldi	r20, 0x02	; 2
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	aa da       	rcall	.-2732   	; 0xffffffe0 <__eeprom_end+0xff7effe0>
	buf[7] = 0;
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	9a 81       	ldd	r25, Y+2	; 0x02
     a90:	fc 01       	movw	r30, r24
     a92:	37 96       	adiw	r30, 0x07	; 7
     a94:	10 82       	st	Z, r1
	memcpy (buf + 8, &x , 2);
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	08 96       	adiw	r24, 0x08	; 8
     a9c:	9e 01       	movw	r18, r28
     a9e:	2d 5f       	subi	r18, 0xFD	; 253
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	b9 01       	movw	r22, r18
     aa4:	42 e0       	ldi	r20, 0x02	; 2
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	9b da       	rcall	.-2762   	; 0xffffffe0 <__eeprom_end+0xff7effe0>
	memcpy (buf + 10, &y , 2);
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	9a 81       	ldd	r25, Y+2	; 0x02
     aae:	0a 96       	adiw	r24, 0x0a	; 10
     ab0:	9e 01       	movw	r18, r28
     ab2:	2b 5f       	subi	r18, 0xFB	; 251
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	b9 01       	movw	r22, r18
     ab8:	42 e0       	ldi	r20, 0x02	; 2
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	91 da       	rcall	.-2782   	; 0xffffffe0 <__eeprom_end+0xff7effe0>
	memcpy (buf + 12, &z , 2);
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	0c 96       	adiw	r24, 0x0c	; 12
     ac4:	9e 01       	movw	r18, r28
     ac6:	29 5f       	subi	r18, 0xF9	; 249
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	b9 01       	movw	r22, r18
     acc:	42 e0       	ldi	r20, 0x02	; 2
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	87 da       	rcall	.-2802   	; 0xffffffe0 <__eeprom_end+0xff7effe0>
	buf[14] = 0;
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	fc 01       	movw	r30, r24
     ad8:	3e 96       	adiw	r30, 0x0e	; 14
     ada:	10 82       	st	Z, r1

	rf12_txdata(buf, 24);
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	68 e1       	ldi	r22, 0x18	; 24
     ae2:	b3 d3       	rcall	.+1894   	; 0x124a <rf12_txdata>
}
     ae4:	29 96       	adiw	r28, 0x09	; 9
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	cf 91       	pop	r28
     af2:	df 91       	pop	r29
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <__vector_18>:

#define MAXCOUNT 1
unsigned int volatile WDTcounter = 0;

ISR(WDT_OVERFLOW_vect)
{
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	8f 93       	push	r24
     b06:	9f 93       	push	r25
     b08:	af 93       	push	r26
     b0a:	bf 93       	push	r27
     b0c:	ef 93       	push	r30
     b0e:	ff 93       	push	r31
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
	cli();
     b18:	f8 94       	cli
	WDTCSR |= _BV(WDIE) | _BV(WDP2) | _BV(WDP1) | _BV(WDP0);
     b1a:	a1 e4       	ldi	r26, 0x41	; 65
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	e1 e4       	ldi	r30, 0x41	; 65
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	87 64       	ori	r24, 0x47	; 71
     b26:	8c 93       	st	X, r24
	WDTcounter++;
     b28:	80 91 8c 00 	lds	r24, 0x008C
     b2c:	90 91 8d 00 	lds	r25, 0x008D
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	90 93 8d 00 	sts	0x008D, r25
     b36:	80 93 8c 00 	sts	0x008C, r24
	sei();
     b3a:	78 94       	sei
}
     b3c:	cf 91       	pop	r28
     b3e:	df 91       	pop	r29
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	0f 90       	pop	r0
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	0f 90       	pop	r0
     b52:	1f 90       	pop	r1
     b54:	18 95       	reti

00000b56 <main>:

int main(void)
{
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
//	DDRD |= (1 << LED1) | (1 << LED2); // Port D: Ausgang für LED1 und LED2
//
//	LED_AN(LED1);
//	LED_AN(LED2);

	rf12_init();
     b5e:	82 d1       	rcall	.+772    	; 0xe64 <rf12_init>
	rf12_trans(0x8201);
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	92 e8       	ldi	r25, 0x82	; 130
     b64:	51 d0       	rcall	.+162    	; 0xc08 <rf12_trans>
	rf12_trans(0x0);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	4e d0       	rcall	.+156    	; 0xc08 <rf12_trans>

	cli();
     b6c:	f8 94       	cli
	wdt_reset();
     b6e:	a8 95       	wdr
	wdt_enable (WDTO_1S);
     b70:	88 e1       	ldi	r24, 0x18	; 24
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	2e e0       	ldi	r18, 0x0E	; 14
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	a8 95       	wdr
     b7c:	81 bd       	out	0x21, r24	; 33
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	21 bd       	out	0x21, r18	; 33
	WDTCSR |= _BV(WDIE) | _BV(WDP2) | _BV(WDP1) | _BV(WDP0);
     b82:	a1 e4       	ldi	r26, 0x41	; 65
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e1 e4       	ldi	r30, 0x41	; 65
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	87 64       	ori	r24, 0x47	; 71
     b8e:	8c 93       	st	X, r24
	sei();
     b90:	78 94       	sei

	send (0);
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	d5 de       	rcall	.-598    	; 0x940 <send>

	for(;;)
	{
		if (WDTcounter >= MAXCOUNT)
     b96:	80 91 8c 00 	lds	r24, 0x008C
     b9a:	90 91 8d 00 	lds	r25, 0x008D
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	d1 f0       	breq	.+52     	; 0xbd6 <main+0x80>
		{
//			LED_AN(LED1);
//			LED_AN(LED2);
			rf12_init();
     ba2:	60 d1       	rcall	.+704    	; 0xe64 <rf12_init>
			rf12_setfreq(RF12FREQ868(868.3));
     ba4:	8b e7       	ldi	r24, 0x7B	; 123
     ba6:	96 e0       	ldi	r25, 0x06	; 6
     ba8:	40 d2       	rcall	.+1152   	; 0x102a <rf12_setfreq>
			rf12_setbandwidth(4, 1, 4);
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	44 e0       	ldi	r20, 0x04	; 4
     bb0:	0a d2       	rcall	.+1044   	; 0xfc6 <rf12_setbandwidth>
			rf12_setbaud(666);
     bb2:	8a e9       	ldi	r24, 0x9A	; 154
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	5d d2       	rcall	.+1210   	; 0x1072 <rf12_setbaud>
			rf12_setpower(0, 6);
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	66 e0       	ldi	r22, 0x06	; 6
     bbc:	78 d2       	rcall	.+1264   	; 0x10ae <rf12_setpower>
			send(1);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	bf de       	rcall	.-642    	; 0x940 <send>
			rf12_trans(0x8201);
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	92 e8       	ldi	r25, 0x82	; 130
     bc6:	20 d0       	rcall	.+64     	; 0xc08 <rf12_trans>
			rf12_trans(0x0);
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	1d d0       	rcall	.+58     	; 0xc08 <rf12_trans>
			WDTcounter = 0;
     bce:	10 92 8d 00 	sts	0x008D, r1
     bd2:	10 92 8c 00 	sts	0x008C, r1
		}
//		LED_AUS(LED1);
//		LED_AUS(LED2);

		wdt_reset();
     bd6:	a8 95       	wdr

		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     bd8:	a5 e5       	ldi	r26, 0x55	; 85
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e5 e5       	ldi	r30, 0x55	; 85
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 65       	ori	r24, 0x50	; 80
     be4:	8c 93       	st	X, r24
		sleep_enable();
     be6:	a5 e5       	ldi	r26, 0x55	; 85
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e5 e5       	ldi	r30, 0x55	; 85
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 62       	ori	r24, 0x20	; 32
     bf2:	8c 93       	st	X, r24

		sleep_cpu ();
     bf4:	88 95       	sleep
		sleep_disable ();
     bf6:	a5 e5       	ldi	r26, 0x55	; 85
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e5       	ldi	r30, 0x55	; 85
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 7d       	andi	r24, 0xDF	; 223
     c02:	8c 93       	st	X, r24
		wdt_reset();
     c04:	a8 95       	wdr
     c06:	c7 cf       	rjmp	.-114    	; 0xb96 <main+0x40>

00000c08 <rf12_trans>:
#define FSK   		4

#define noinline __attribute__((noinline))

unsigned short noinline rf12_trans(unsigned short wert)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	6d 97       	sbiw	r28, 0x1d	; 29
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	9d 8f       	std	Y+29, r25	; 0x1d
     c1e:	8c 8f       	std	Y+28, r24	; 0x1c
	unsigned short werti = 0;
     c20:	1b 8e       	std	Y+27, r1	; 0x1b
     c22:	1a 8e       	std	Y+26, r1	; 0x1a
	unsigned char i;

	cbi(RF_PORT, CS);
     c24:	a8 e3       	ldi	r26, 0x38	; 56
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e8 e3       	ldi	r30, 0x38	; 56
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	8e 7f       	andi	r24, 0xFE	; 254
     c30:	8c 93       	st	X, r24
	for (i = 0; i < 16; i++)
     c32:	19 8e       	std	Y+25, r1	; 0x19
     c34:	f1 c0       	rjmp	.+482    	; 0xe18 <rf12_trans+0x210>
	{
		if (wert & 32768)
     c36:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c38:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c3a:	99 23       	and	r25, r25
     c3c:	44 f4       	brge	.+16     	; 0xc4e <rf12_trans+0x46>
			sbi(RF_PORT, SDI);
     c3e:	a8 e3       	ldi	r26, 0x38	; 56
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e8 e3       	ldi	r30, 0x38	; 56
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	84 60       	ori	r24, 0x04	; 4
     c4a:	8c 93       	st	X, r24
     c4c:	07 c0       	rjmp	.+14     	; 0xc5c <rf12_trans+0x54>
		else
			cbi(RF_PORT, SDI);
     c4e:	a8 e3       	ldi	r26, 0x38	; 56
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e8 e3       	ldi	r30, 0x38	; 56
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8b 7f       	andi	r24, 0xFB	; 251
     c5a:	8c 93       	st	X, r24
		werti <<= 1;
     c5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c5e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	9b 8f       	std	Y+27, r25	; 0x1b
     c66:	8a 8f       	std	Y+26, r24	; 0x1a
		if (RF_PIN & (1 << SDO))
     c68:	e6 e3       	ldi	r30, 0x36	; 54
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	88 70       	andi	r24, 0x08	; 8
     c74:	90 70       	andi	r25, 0x00	; 0
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	29 f0       	breq	.+10     	; 0xc84 <rf12_trans+0x7c>
			werti |= 1;
     c7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	9b 8f       	std	Y+27, r25	; 0x1b
     c82:	8a 8f       	std	Y+26, r24	; 0x1a
		sbi(RF_PORT, SCK);
     c84:	a8 e3       	ldi	r26, 0x38	; 56
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e8 e3       	ldi	r30, 0x38	; 56
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	8c 93       	st	X, r24
		wert <<= 1;
     c92:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c94:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	9d 8f       	std	Y+29, r25	; 0x1d
     c9c:	8c 8f       	std	Y+28, r24	; 0x1c
     c9e:	8a e9       	ldi	r24, 0x9A	; 154
     ca0:	99 e9       	ldi	r25, 0x99	; 153
     ca2:	a9 e9       	ldi	r26, 0x99	; 153
     ca4:	be e3       	ldi	r27, 0x3E	; 62
     ca6:	8d 8b       	std	Y+21, r24	; 0x15
     ca8:	9e 8b       	std	Y+22, r25	; 0x16
     caa:	af 8b       	std	Y+23, r26	; 0x17
     cac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     cae:	6d 89       	ldd	r22, Y+21	; 0x15
     cb0:	7e 89       	ldd	r23, Y+22	; 0x16
     cb2:	8f 89       	ldd	r24, Y+23	; 0x17
     cb4:	98 8d       	ldd	r25, Y+24	; 0x18
     cb6:	2b ea       	ldi	r18, 0xAB	; 171
     cb8:	3a ea       	ldi	r19, 0xAA	; 170
     cba:	4a e2       	ldi	r20, 0x2A	; 42
     cbc:	50 e4       	ldi	r21, 0x40	; 64
     cbe:	08 d5       	rcall	.+2576   	; 0x16d0 <__mulsf3>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	89 8b       	std	Y+17, r24	; 0x11
     cc6:	9a 8b       	std	Y+18, r25	; 0x12
     cc8:	ab 8b       	std	Y+19, r26	; 0x13
     cca:	bc 8b       	std	Y+20, r27	; 0x14
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     ccc:	69 89       	ldd	r22, Y+17	; 0x11
     cce:	7a 89       	ldd	r23, Y+18	; 0x12
     cd0:	8b 89       	ldd	r24, Y+19	; 0x13
     cd2:	9c 89       	ldd	r25, Y+20	; 0x14
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e8       	ldi	r20, 0x80	; 128
     cda:	5f e3       	ldi	r21, 0x3F	; 63
     cdc:	eb d6       	rcall	.+3542   	; 0x1ab4 <__ltsf2>
     cde:	88 23       	and	r24, r24
     ce0:	1c f4       	brge	.+6      	; 0xce8 <rf12_trans+0xe0>
		__ticks = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	88 8b       	std	Y+16, r24	; 0x10
     ce6:	88 c0       	rjmp	.+272    	; 0xdf8 <rf12_trans+0x1f0>
	else if (__tmp > 255)
     ce8:	69 89       	ldd	r22, Y+17	; 0x11
     cea:	7a 89       	ldd	r23, Y+18	; 0x12
     cec:	8b 89       	ldd	r24, Y+19	; 0x13
     cee:	9c 89       	ldd	r25, Y+20	; 0x14
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	53 e4       	ldi	r21, 0x43	; 67
     cf8:	87 d6       	rcall	.+3342   	; 0x1a08 <__gtsf2>
     cfa:	18 16       	cp	r1, r24
     cfc:	0c f0       	brlt	.+2      	; 0xd00 <rf12_trans+0xf8>
     cfe:	74 c0       	rjmp	.+232    	; 0xde8 <rf12_trans+0x1e0>
	{
		_delay_ms(__us / 1000.0);
     d00:	6d 89       	ldd	r22, Y+21	; 0x15
     d02:	7e 89       	ldd	r23, Y+22	; 0x16
     d04:	8f 89       	ldd	r24, Y+23	; 0x17
     d06:	98 8d       	ldd	r25, Y+24	; 0x18
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	4a e7       	ldi	r20, 0x7A	; 122
     d0e:	54 e4       	ldi	r21, 0x44	; 68
     d10:	d4 d5       	rcall	.+2984   	; 0x18ba <__divsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	8c 87       	std	Y+12, r24	; 0x0c
     d18:	9d 87       	std	Y+13, r25	; 0x0d
     d1a:	ae 87       	std	Y+14, r26	; 0x0e
     d1c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1e:	6c 85       	ldd	r22, Y+12	; 0x0c
     d20:	7d 85       	ldd	r23, Y+13	; 0x0d
     d22:	8e 85       	ldd	r24, Y+14	; 0x0e
     d24:	9f 85       	ldd	r25, Y+15	; 0x0f
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	4a ef       	ldi	r20, 0xFA	; 250
     d2c:	54 e4       	ldi	r21, 0x44	; 68
     d2e:	d0 d4       	rcall	.+2464   	; 0x16d0 <__mulsf3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	88 87       	std	Y+8, r24	; 0x08
     d36:	99 87       	std	Y+9, r25	; 0x09
     d38:	aa 87       	std	Y+10, r26	; 0x0a
     d3a:	bb 87       	std	Y+11, r27	; 0x0b
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     d3c:	68 85       	ldd	r22, Y+8	; 0x08
     d3e:	79 85       	ldd	r23, Y+9	; 0x09
     d40:	8a 85       	ldd	r24, Y+10	; 0x0a
     d42:	9b 85       	ldd	r25, Y+11	; 0x0b
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e8       	ldi	r20, 0x80	; 128
     d4a:	5f e3       	ldi	r21, 0x3F	; 63
     d4c:	b3 d6       	rcall	.+3430   	; 0x1ab4 <__ltsf2>
     d4e:	88 23       	and	r24, r24
     d50:	2c f4       	brge	.+10     	; 0xd5c <rf12_trans+0x154>
		__ticks = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9f 83       	std	Y+7, r25	; 0x07
     d58:	8e 83       	std	Y+6, r24	; 0x06
     d5a:	3b c0       	rjmp	.+118    	; 0xdd2 <rf12_trans+0x1ca>
	else if (__tmp > 65535)
     d5c:	68 85       	ldd	r22, Y+8	; 0x08
     d5e:	79 85       	ldd	r23, Y+9	; 0x09
     d60:	8a 85       	ldd	r24, Y+10	; 0x0a
     d62:	9b 85       	ldd	r25, Y+11	; 0x0b
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	3f ef       	ldi	r19, 0xFF	; 255
     d68:	4f e7       	ldi	r20, 0x7F	; 127
     d6a:	57 e4       	ldi	r21, 0x47	; 71
     d6c:	4d d6       	rcall	.+3226   	; 0x1a08 <__gtsf2>
     d6e:	18 16       	cp	r1, r24
     d70:	3c f5       	brge	.+78     	; 0xdc0 <rf12_trans+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d72:	6c 85       	ldd	r22, Y+12	; 0x0c
     d74:	7d 85       	ldd	r23, Y+13	; 0x0d
     d76:	8e 85       	ldd	r24, Y+14	; 0x0e
     d78:	9f 85       	ldd	r25, Y+15	; 0x0f
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e2       	ldi	r20, 0x20	; 32
     d80:	51 e4       	ldi	r21, 0x41	; 65
     d82:	a6 d4       	rcall	.+2380   	; 0x16d0 <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	bc 01       	movw	r22, r24
     d8a:	cd 01       	movw	r24, r26
     d8c:	dd d2       	rcall	.+1466   	; 0x1348 <__fixunssfsi>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	9f 83       	std	Y+7, r25	; 0x07
     d94:	8e 83       	std	Y+6, r24	; 0x06
     d96:	0f c0       	rjmp	.+30     	; 0xdb6 <rf12_trans+0x1ae>
     d98:	88 ec       	ldi	r24, 0xC8	; 200
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9d 83       	std	Y+5, r25	; 0x05
     d9e:	8c 83       	std	Y+4, r24	; 0x04
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <rf12_trans+0x19c>
     da8:	9d 83       	std	Y+5, r25	; 0x05
     daa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dac:	8e 81       	ldd	r24, Y+6	; 0x06
     dae:	9f 81       	ldd	r25, Y+7	; 0x07
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	9f 83       	std	Y+7, r25	; 0x07
     db4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db6:	8e 81       	ldd	r24, Y+6	; 0x06
     db8:	9f 81       	ldd	r25, Y+7	; 0x07
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	69 f7       	brne	.-38     	; 0xd98 <rf12_trans+0x190>
     dbe:	22 c0       	rjmp	.+68     	; 0xe04 <rf12_trans+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc0:	68 85       	ldd	r22, Y+8	; 0x08
     dc2:	79 85       	ldd	r23, Y+9	; 0x09
     dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
     dc6:	9b 85       	ldd	r25, Y+11	; 0x0b
     dc8:	bf d2       	rcall	.+1406   	; 0x1348 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9f 83       	std	Y+7, r25	; 0x07
     dd0:	8e 83       	std	Y+6, r24	; 0x06
     dd2:	8e 81       	ldd	r24, Y+6	; 0x06
     dd4:	9f 81       	ldd	r25, Y+7	; 0x07
     dd6:	9b 83       	std	Y+3, r25	; 0x03
     dd8:	8a 83       	std	Y+2, r24	; 0x02
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	9b 81       	ldd	r25, Y+3	; 0x03
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <rf12_trans+0x1d6>
     de2:	9b 83       	std	Y+3, r25	; 0x03
     de4:	8a 83       	std	Y+2, r24	; 0x02
     de6:	0e c0       	rjmp	.+28     	; 0xe04 <rf12_trans+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     de8:	69 89       	ldd	r22, Y+17	; 0x11
     dea:	7a 89       	ldd	r23, Y+18	; 0x12
     dec:	8b 89       	ldd	r24, Y+19	; 0x13
     dee:	9c 89       	ldd	r25, Y+20	; 0x14
     df0:	ab d2       	rcall	.+1366   	; 0x1348 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	88 8b       	std	Y+16, r24	; 0x10
     df8:	88 89       	ldd	r24, Y+16	; 0x10
     dfa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	8a 95       	dec	r24
     e00:	f1 f7       	brne	.-4      	; 0xdfe <rf12_trans+0x1f6>
     e02:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(0.3);
		cbi(RF_PORT, SCK);
     e04:	a8 e3       	ldi	r26, 0x38	; 56
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e8 e3       	ldi	r30, 0x38	; 56
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8d 7f       	andi	r24, 0xFD	; 253
     e10:	8c 93       	st	X, r24
{
	unsigned short werti = 0;
	unsigned char i;

	cbi(RF_PORT, CS);
	for (i = 0; i < 16; i++)
     e12:	89 8d       	ldd	r24, Y+25	; 0x19
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	89 8f       	std	Y+25, r24	; 0x19
     e18:	89 8d       	ldd	r24, Y+25	; 0x19
     e1a:	80 31       	cpi	r24, 0x10	; 16
     e1c:	08 f4       	brcc	.+2      	; 0xe20 <rf12_trans+0x218>
     e1e:	0b cf       	rjmp	.-490    	; 0xc36 <rf12_trans+0x2e>
		sbi(RF_PORT, SCK);
		wert <<= 1;
		_delay_us(0.3);
		cbi(RF_PORT, SCK);
	}
	sbi(RF_PORT, CS);
     e20:	a8 e3       	ldi	r26, 0x38	; 56
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e8 e3       	ldi	r30, 0x38	; 56
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	81 60       	ori	r24, 0x01	; 1
     e2c:	8c 93       	st	X, r24
	return werti;
     e2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e30:	9b 8d       	ldd	r25, Y+27	; 0x1b
}
     e32:	6d 96       	adiw	r28, 0x1d	; 29
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <rf12_readytrans>:

unsigned short noinline rf12_readytrans(unsigned short wert)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <rf12_readytrans+0x6>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	9a 83       	std	Y+2, r25	; 0x02
     e50:	89 83       	std	Y+1, r24	; 0x01
	rf12_ready();
     e52:	4d d1       	rcall	.+666    	; 0x10ee <rf12_ready>
	return rf12_trans(wert);
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	d7 de       	rcall	.-594    	; 0xc08 <rf12_trans>
}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <rf12_init>:

void rf12_init(void)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	60 97       	sbiw	r28, 0x10	; 16
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
	RF_DDR = (1 << SDI) | (1 << SCK) | (1 << CS) | (1 << FSK);
     e78:	e7 e3       	ldi	r30, 0x37	; 55
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	87 e1       	ldi	r24, 0x17	; 23
     e7e:	80 83       	st	Z, r24
	RF_PORT = (1 << CS);
     e80:	e8 e3       	ldi	r30, 0x38	; 56
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	80 83       	st	Z, r24

	sbi(RF_PORT, FSK);
     e88:	a8 e3       	ldi	r26, 0x38	; 56
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e8 e3       	ldi	r30, 0x38	; 56
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 61       	ori	r24, 0x10	; 16
     e94:	8c 93       	st	X, r24

	for (unsigned int i = 0; i < 100; i++)
     e96:	18 8a       	std	Y+16, r1	; 0x10
     e98:	1f 86       	std	Y+15, r1	; 0x0f
     e9a:	71 c0       	rjmp	.+226    	; 0xf7e <rf12_init+0x11a>
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e2       	ldi	r26, 0x20	; 32
     ea2:	b1 e4       	ldi	r27, 0x41	; 65
     ea4:	8b 87       	std	Y+11, r24	; 0x0b
     ea6:	9c 87       	std	Y+12, r25	; 0x0c
     ea8:	ad 87       	std	Y+13, r26	; 0x0d
     eaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	6b 85       	ldd	r22, Y+11	; 0x0b
     eae:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a ef       	ldi	r20, 0xFA	; 250
     eba:	54 e4       	ldi	r21, 0x44	; 68
     ebc:	09 d4       	rcall	.+2066   	; 0x16d0 <__mulsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	8f 83       	std	Y+7, r24	; 0x07
     ec4:	98 87       	std	Y+8, r25	; 0x08
     ec6:	a9 87       	std	Y+9, r26	; 0x09
     ec8:	ba 87       	std	Y+10, r27	; 0x0a
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     eca:	6f 81       	ldd	r22, Y+7	; 0x07
     ecc:	78 85       	ldd	r23, Y+8	; 0x08
     ece:	89 85       	ldd	r24, Y+9	; 0x09
     ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e8       	ldi	r20, 0x80	; 128
     ed8:	5f e3       	ldi	r21, 0x3F	; 63
     eda:	ec d5       	rcall	.+3032   	; 0x1ab4 <__ltsf2>
     edc:	88 23       	and	r24, r24
     ede:	2c f4       	brge	.+10     	; 0xeea <rf12_init+0x86>
		__ticks = 1;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9e 83       	std	Y+6, r25	; 0x06
     ee6:	8d 83       	std	Y+5, r24	; 0x05
     ee8:	3b c0       	rjmp	.+118    	; 0xf60 <rf12_init+0xfc>
	else if (__tmp > 65535)
     eea:	6f 81       	ldd	r22, Y+7	; 0x07
     eec:	78 85       	ldd	r23, Y+8	; 0x08
     eee:	89 85       	ldd	r24, Y+9	; 0x09
     ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	57 e4       	ldi	r21, 0x47	; 71
     efa:	86 d5       	rcall	.+2828   	; 0x1a08 <__gtsf2>
     efc:	18 16       	cp	r1, r24
     efe:	3c f5       	brge	.+78     	; 0xf4e <rf12_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f00:	6b 85       	ldd	r22, Y+11	; 0x0b
     f02:	7c 85       	ldd	r23, Y+12	; 0x0c
     f04:	8d 85       	ldd	r24, Y+13	; 0x0d
     f06:	9e 85       	ldd	r25, Y+14	; 0x0e
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e2       	ldi	r20, 0x20	; 32
     f0e:	51 e4       	ldi	r21, 0x41	; 65
     f10:	df d3       	rcall	.+1982   	; 0x16d0 <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	bc 01       	movw	r22, r24
     f18:	cd 01       	movw	r24, r26
     f1a:	16 d2       	rcall	.+1068   	; 0x1348 <__fixunssfsi>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	9e 83       	std	Y+6, r25	; 0x06
     f22:	8d 83       	std	Y+5, r24	; 0x05
     f24:	0f c0       	rjmp	.+30     	; 0xf44 <rf12_init+0xe0>
     f26:	88 ec       	ldi	r24, 0xC8	; 200
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	9c 83       	std	Y+4, r25	; 0x04
     f2c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <rf12_init+0xce>
     f36:	9c 83       	std	Y+4, r25	; 0x04
     f38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	69 f7       	brne	.-38     	; 0xf26 <rf12_init+0xc2>
     f4c:	13 c0       	rjmp	.+38     	; 0xf74 <rf12_init+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4e:	6f 81       	ldd	r22, Y+7	; 0x07
     f50:	78 85       	ldd	r23, Y+8	; 0x08
     f52:	89 85       	ldd	r24, Y+9	; 0x09
     f54:	9a 85       	ldd	r25, Y+10	; 0x0a
     f56:	f8 d1       	rcall	.+1008   	; 0x1348 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <rf12_init+0x108>
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	8f 85       	ldd	r24, Y+15	; 0x0f
     f76:	98 89       	ldd	r25, Y+16	; 0x10
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	98 8b       	std	Y+16, r25	; 0x10
     f7c:	8f 87       	std	Y+15, r24	; 0x0f
     f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f80:	98 89       	ldd	r25, Y+16	; 0x10
     f82:	84 36       	cpi	r24, 0x64	; 100
     f84:	91 05       	cpc	r25, r1
     f86:	08 f4       	brcc	.+2      	; 0xf8a <rf12_init+0x126>
     f88:	89 cf       	rjmp	.-238    	; 0xe9c <rf12_init+0x38>
		_delay_ms(10); // wait until POR done


	rf12_trans(0xC0E0); // AVR CLK: 10MHz
     f8a:	80 ee       	ldi	r24, 0xE0	; 224
     f8c:	90 ec       	ldi	r25, 0xC0	; 192
     f8e:	3c de       	rcall	.-904    	; 0xc08 <rf12_trans>
	rf12_trans(0x80E7); // Enable FIFO
     f90:	87 ee       	ldi	r24, 0xE7	; 231
     f92:	90 e8       	ldi	r25, 0x80	; 128
     f94:	39 de       	rcall	.-910    	; 0xc08 <rf12_trans>
	rf12_trans(0xC2AB); // Data Filter: internal
     f96:	8b ea       	ldi	r24, 0xAB	; 171
     f98:	92 ec       	ldi	r25, 0xC2	; 194
     f9a:	36 de       	rcall	.-916    	; 0xc08 <rf12_trans>
	rf12_trans(0xCA81); // Set FIFO mode
     f9c:	81 e8       	ldi	r24, 0x81	; 129
     f9e:	9a ec       	ldi	r25, 0xCA	; 202
     fa0:	33 de       	rcall	.-922    	; 0xc08 <rf12_trans>
	rf12_trans(0xE000); // disable wakeuptimer
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 ee       	ldi	r25, 0xE0	; 224
     fa6:	30 de       	rcall	.-928    	; 0xc08 <rf12_trans>
	rf12_trans(0xC800); // disable low duty cycle
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	98 ec       	ldi	r25, 0xC8	; 200
     fac:	2d de       	rcall	.-934    	; 0xc08 <rf12_trans>
	rf12_trans(0xC4F7); // AFC settings: autotuning: -10kHz...+7,5kHz
     fae:	87 ef       	ldi	r24, 0xF7	; 247
     fb0:	94 ec       	ldi	r25, 0xC4	; 196
     fb2:	2a de       	rcall	.-940    	; 0xc08 <rf12_trans>
}
     fb4:	60 96       	adiw	r28, 0x10	; 16
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <rf12_setbandwidth>:

void rf12_setbandwidth(unsigned char bandwidth, unsigned char gain, unsigned char drssi)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <rf12_setbandwidth+0x6>
     fcc:	0f 92       	push	r0
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	6a 83       	std	Y+2, r22	; 0x02
     fd6:	4b 83       	std	Y+3, r20	; 0x03
	rf12_trans(0x9400 | ((bandwidth & 7) << 5) | ((gain & 3) << 3)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	82 95       	swap	r24
     fe4:	92 95       	swap	r25
     fe6:	90 7f       	andi	r25, 0xF0	; 240
     fe8:	98 27       	eor	r25, r24
     fea:	80 7f       	andi	r24, 0xF0	; 240
     fec:	98 27       	eor	r25, r24
     fee:	9c 01       	movw	r18, r24
     ff0:	30 70       	andi	r19, 0x00	; 0
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	83 70       	andi	r24, 0x03	; 3
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	28 2b       	or	r18, r24
    100a:	39 2b       	or	r19, r25
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	87 70       	andi	r24, 0x07	; 7
    1014:	90 70       	andi	r25, 0x00	; 0
    1016:	82 2b       	or	r24, r18
    1018:	93 2b       	or	r25, r19
    101a:	94 69       	ori	r25, 0x94	; 148
    101c:	f5 dd       	rcall	.-1046   	; 0xc08 <rf12_trans>
			| (drssi & 7));
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <rf12_setfreq>:

void rf12_setfreq(unsigned short freq)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <rf12_setfreq+0x6>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
	if (freq < 96) // 430,2400MHz
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	80 36       	cpi	r24, 0x60	; 96
    103e:	91 05       	cpc	r25, r1
    1040:	28 f4       	brcc	.+10     	; 0x104c <rf12_setfreq+0x22>
		freq = 96;
    1042:	80 e6       	ldi	r24, 0x60	; 96
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	0a c0       	rjmp	.+20     	; 0x1060 <rf12_setfreq+0x36>
	else if (freq > 3903) // 439,7575MHz
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	2f e0       	ldi	r18, 0x0F	; 15
    1052:	80 34       	cpi	r24, 0x40	; 64
    1054:	92 07       	cpc	r25, r18
    1056:	20 f0       	brcs	.+8      	; 0x1060 <rf12_setfreq+0x36>
		freq = 3903;
    1058:	8f e3       	ldi	r24, 0x3F	; 63
    105a:	9f e0       	ldi	r25, 0x0F	; 15
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01
	rf12_trans(0xA000 | freq);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	90 6a       	ori	r25, 0xA0	; 160
    1066:	d0 dd       	rcall	.-1120   	; 0xc08 <rf12_trans>
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <rf12_setbaud>:

void rf12_setbaud(unsigned short baud)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <rf12_setbaud+0x6>
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
//	if (baud < 663)
//		return;
//	if (baud < 5400) // Baudrate= 344827,58621/(R+1)/(1+CS*7)
		rf12_trans(0xC680 | ((43104 / baud) - 1));
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	9c 01       	movw	r18, r24
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	80 e6       	ldi	r24, 0x60	; 96
    108c:	98 ea       	ldi	r25, 0xA8	; 168
    108e:	a0 e0       	ldi	r26, 0x00	; 0
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	30 d7       	rcall	.+3680   	; 0x1ef8 <__divmodsi4>
    1098:	da 01       	movw	r26, r20
    109a:	c9 01       	movw	r24, r18
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	80 68       	ori	r24, 0x80	; 128
    10a0:	96 6c       	ori	r25, 0xC6	; 198
    10a2:	b2 dd       	rcall	.-1180   	; 0xc08 <rf12_trans>
//	else
//		rf12_trans(0xC600 | ((344828UL / baud) - 1));
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <rf12_setpower>:

void rf12_setpower(unsigned char power, unsigned char mod)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <rf12_setpower+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
	rf12_trans(0x9800 | (power & 7) | ((mod & 15) << 4));
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9c 01       	movw	r18, r24
    10c4:	27 70       	andi	r18, 0x07	; 7
    10c6:	30 70       	andi	r19, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	82 95       	swap	r24
    10d0:	92 95       	swap	r25
    10d2:	90 7f       	andi	r25, 0xF0	; 240
    10d4:	98 27       	eor	r25, r24
    10d6:	80 7f       	andi	r24, 0xF0	; 240
    10d8:	98 27       	eor	r25, r24
    10da:	90 70       	andi	r25, 0x00	; 0
    10dc:	82 2b       	or	r24, r18
    10de:	93 2b       	or	r25, r19
    10e0:	98 69       	ori	r25, 0x98	; 152
    10e2:	92 dd       	rcall	.-1244   	; 0xc08 <rf12_trans>
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <rf12_ready>:

void noinline rf12_ready(void)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	60 97       	sbiw	r28, 0x10	; 16
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
	//  cbi(RF_PORT, SDI);
	//  cbi(RF_PORT, CS);
	//  asm( "nop" );
	//  while (!(RF_PIN & (1 << SDO)))
	//    ; // wait until FIFO ready
	int timeout = 100;
    1102:	84 e6       	ldi	r24, 0x64	; 100
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	98 8b       	std	Y+16, r25	; 0x10
    1108:	8f 87       	std	Y+15, r24	; 0x0f

	cbi(RF_PORT, SDI);
    110a:	a8 e3       	ldi	r26, 0x38	; 56
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8b 7f       	andi	r24, 0xFB	; 251
    1116:	8c 93       	st	X, r24
	cbi(RF_PORT, CS);
    1118:	a8 e3       	ldi	r26, 0x38	; 56
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e8 e3       	ldi	r30, 0x38	; 56
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8e 7f       	andi	r24, 0xFE	; 254
    1124:	8c 93       	st	X, r24
	asm( "nop" );
    1126:	00 00       	nop
	asm( "nop" );
    1128:	00 00       	nop
    112a:	71 c0       	rjmp	.+226    	; 0x120e <rf12_ready+0x120>
	while (!(RF_PIN & (1 << SDO)) && timeout)
	{
		timeout--;
    112c:	8f 85       	ldd	r24, Y+15	; 0x0f
    112e:	98 89       	ldd	r25, Y+16	; 0x10
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	98 8b       	std	Y+16, r25	; 0x10
    1134:	8f 87       	std	Y+15, r24	; 0x0f
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 e8       	ldi	r26, 0x80	; 128
    113c:	bf e3       	ldi	r27, 0x3F	; 63
    113e:	8b 87       	std	Y+11, r24	; 0x0b
    1140:	9c 87       	std	Y+12, r25	; 0x0c
    1142:	ad 87       	std	Y+13, r26	; 0x0d
    1144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	4a ef       	ldi	r20, 0xFA	; 250
    1154:	54 e4       	ldi	r21, 0x44	; 68
    1156:	bc d2       	rcall	.+1400   	; 0x16d0 <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	8f 83       	std	Y+7, r24	; 0x07
    115e:	98 87       	std	Y+8, r25	; 0x08
    1160:	a9 87       	std	Y+9, r26	; 0x09
    1162:	ba 87       	std	Y+10, r27	; 0x0a
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
    1164:	6f 81       	ldd	r22, Y+7	; 0x07
    1166:	78 85       	ldd	r23, Y+8	; 0x08
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	9a 85       	ldd	r25, Y+10	; 0x0a
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e8       	ldi	r20, 0x80	; 128
    1172:	5f e3       	ldi	r21, 0x3F	; 63
    1174:	9f d4       	rcall	.+2366   	; 0x1ab4 <__ltsf2>
    1176:	88 23       	and	r24, r24
    1178:	2c f4       	brge	.+10     	; 0x1184 <rf12_ready+0x96>
		__ticks = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9e 83       	std	Y+6, r25	; 0x06
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	3b c0       	rjmp	.+118    	; 0x11fa <rf12_ready+0x10c>
	else if (__tmp > 65535)
    1184:	6f 81       	ldd	r22, Y+7	; 0x07
    1186:	78 85       	ldd	r23, Y+8	; 0x08
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	3f ef       	ldi	r19, 0xFF	; 255
    1190:	4f e7       	ldi	r20, 0x7F	; 127
    1192:	57 e4       	ldi	r21, 0x47	; 71
    1194:	39 d4       	rcall	.+2162   	; 0x1a08 <__gtsf2>
    1196:	18 16       	cp	r1, r24
    1198:	3c f5       	brge	.+78     	; 0x11e8 <rf12_ready+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	6b 85       	ldd	r22, Y+11	; 0x0b
    119c:	7c 85       	ldd	r23, Y+12	; 0x0c
    119e:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	92 d2       	rcall	.+1316   	; 0x16d0 <__mulsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	c9 d0       	rcall	.+402    	; 0x1348 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	9e 83       	std	Y+6, r25	; 0x06
    11bc:	8d 83       	std	Y+5, r24	; 0x05
    11be:	0f c0       	rjmp	.+30     	; 0x11de <rf12_ready+0xf0>
    11c0:	88 ec       	ldi	r24, 0xC8	; 200
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9c 83       	std	Y+4, r25	; 0x04
    11c6:	8b 83       	std	Y+3, r24	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <rf12_ready+0xde>
    11d0:	9c 83       	std	Y+4, r25	; 0x04
    11d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	9e 83       	std	Y+6, r25	; 0x06
    11dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	69 f7       	brne	.-38     	; 0x11c0 <rf12_ready+0xd2>
    11e6:	13 c0       	rjmp	.+38     	; 0x120e <rf12_ready+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ea:	78 85       	ldd	r23, Y+8	; 0x08
    11ec:	89 85       	ldd	r24, Y+9	; 0x09
    11ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f0:	ab d0       	rcall	.+342    	; 0x1348 <__fixunssfsi>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <rf12_ready+0x118>
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01

	cbi(RF_PORT, SDI);
	cbi(RF_PORT, CS);
	asm( "nop" );
	asm( "nop" );
	while (!(RF_PIN & (1 << SDO)) && timeout)
    120e:	e6 e3       	ldi	r30, 0x36	; 54
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	88 70       	andi	r24, 0x08	; 8
    121a:	90 70       	andi	r25, 0x00	; 0
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	29 f4       	brne	.+10     	; 0x122a <rf12_ready+0x13c>
    1220:	8f 85       	ldd	r24, Y+15	; 0x0f
    1222:	98 89       	ldd	r25, Y+16	; 0x10
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	09 f0       	breq	.+2      	; 0x122a <rf12_ready+0x13c>
    1228:	81 cf       	rjmp	.-254    	; 0x112c <rf12_ready+0x3e>
	{
		timeout--;
		_delay_ms(1); // wait until FIFO ready
	}
	sbi(PORTB, CS);
    122a:	a8 e3       	ldi	r26, 0x38	; 56
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e8 e3       	ldi	r30, 0x38	; 56
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	81 60       	ori	r24, 0x01	; 1
    1236:	8c 93       	st	X, r24
//	if (timeout == 0)
//		LED_TOGGLE(LED2);
	//        return 0;
	//     else
	//         return 1;
}
    1238:	60 96       	adiw	r28, 0x10	; 16
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <rf12_txdata>:

void rf12_txdata(char *data, unsigned char number)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <rf12_txdata+0x6>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <rf12_txdata+0x8>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <rf12_txdata+0xa>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	9d 83       	std	Y+5, r25	; 0x05
    125a:	8c 83       	std	Y+4, r24	; 0x04
    125c:	6e 83       	std	Y+6, r22	; 0x06
	unsigned char i;

	rf12_trans(0x0000);
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	d2 dc       	rcall	.-1628   	; 0xc08 <rf12_trans>
	rf12_readytrans(0x8238); // TX on
    1264:	88 e3       	ldi	r24, 0x38	; 56
    1266:	92 e8       	ldi	r25, 0x82	; 130
    1268:	ed dd       	rcall	.-1062   	; 0xe44 <rf12_readytrans>
	rf12_readytrans(0x0000);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	ea dd       	rcall	.-1068   	; 0xe44 <rf12_readytrans>

	for(int xc = 0;xc<5;xc++)
    1270:	1a 82       	std	Y+2, r1	; 0x02
    1272:	19 82       	std	Y+1, r1	; 0x01
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <rf12_txdata+0x3c>
	{
		rf12_readytrans(0xB8AA);
    1276:	8a ea       	ldi	r24, 0xAA	; 170
    1278:	98 eb       	ldi	r25, 0xB8	; 184
    127a:	e4 dd       	rcall	.-1080   	; 0xe44 <rf12_readytrans>

	rf12_trans(0x0000);
	rf12_readytrans(0x8238); // TX on
	rf12_readytrans(0x0000);

	for(int xc = 0;xc<5;xc++)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	85 30       	cpi	r24, 0x05	; 5
    128c:	91 05       	cpc	r25, r1
    128e:	9c f3       	brlt	.-26     	; 0x1276 <rf12_txdata+0x2c>
	{
		rf12_readytrans(0xB8AA);
	}
	rf12_readytrans(0xB82D);
    1290:	8d e2       	ldi	r24, 0x2D	; 45
    1292:	98 eb       	ldi	r25, 0xB8	; 184
    1294:	d7 dd       	rcall	.-1106   	; 0xe44 <rf12_readytrans>
	rf12_readytrans(0xB8D4);
    1296:	84 ed       	ldi	r24, 0xD4	; 212
    1298:	98 eb       	ldi	r25, 0xB8	; 184
    129a:	d4 dd       	rcall	.-1112   	; 0xe44 <rf12_readytrans>
	rf12_readytrans(0x0000);
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	d1 dd       	rcall	.-1118   	; 0xe44 <rf12_readytrans>
	for (i = 0; i < number; i++)
    12a2:	1b 82       	std	Y+3, r1	; 0x03
    12a4:	11 c0       	rjmp	.+34     	; 0x12c8 <rf12_txdata+0x7e>
	{
		rf12_readytrans(0xB800 | (*data++));
    12a6:	ec 81       	ldd	r30, Y+4	; 0x04
    12a8:	fd 81       	ldd	r31, Y+5	; 0x05
    12aa:	80 81       	ld	r24, Z
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 01       	movw	r18, r24
    12b2:	38 6b       	ori	r19, 0xB8	; 184
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	9d 83       	std	Y+5, r25	; 0x05
    12bc:	8c 83       	std	Y+4, r24	; 0x04
    12be:	c9 01       	movw	r24, r18
    12c0:	c1 dd       	rcall	.-1150   	; 0xe44 <rf12_readytrans>
		rf12_readytrans(0xB8AA);
	}
	rf12_readytrans(0xB82D);
	rf12_readytrans(0xB8D4);
	rf12_readytrans(0x0000);
	for (i = 0; i < number; i++)
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	8b 83       	std	Y+3, r24	; 0x03
    12c8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	98 17       	cp	r25, r24
    12ce:	58 f3       	brcs	.-42     	; 0x12a6 <rf12_txdata+0x5c>
	{
		rf12_readytrans(0xB800 | (*data++));
	}
	rf12_readytrans(0x8208); // TX off
    12d0:	88 e0       	ldi	r24, 0x08	; 8
    12d2:	92 e8       	ldi	r25, 0x82	; 130
    12d4:	b7 dd       	rcall	.-1170   	; 0xe44 <rf12_readytrans>
}
    12d6:	26 96       	adiw	r28, 0x06	; 6
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <rf12_rxdata>:

void rf12_rxdata(unsigned char *data, unsigned char number)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <rf12_rxdata+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <rf12_rxdata+0x8>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	9b 83       	std	Y+3, r25	; 0x03
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	rf12_trans(0x82C8); // RX on
    12fa:	88 ec       	ldi	r24, 0xC8	; 200
    12fc:	92 e8       	ldi	r25, 0x82	; 130
    12fe:	84 dc       	rcall	.-1784   	; 0xc08 <rf12_trans>
	rf12_trans(0xCA81); // set FIFO mode
    1300:	81 e8       	ldi	r24, 0x81	; 129
    1302:	9a ec       	ldi	r25, 0xCA	; 202
    1304:	81 dc       	rcall	.-1790   	; 0xc08 <rf12_trans>
	rf12_trans(0xCA83); // enable FIFO
    1306:	83 e8       	ldi	r24, 0x83	; 131
    1308:	9a ec       	ldi	r25, 0xCA	; 202
    130a:	7e dc       	rcall	.-1796   	; 0xc08 <rf12_trans>
	for (i = 0; i < number; i++)
    130c:	19 82       	std	Y+1, r1	; 0x01
    130e:	0e c0       	rjmp	.+28     	; 0x132c <rf12_rxdata+0x44>
	{
		*data++ = rf12_readytrans(0xB000);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 eb       	ldi	r25, 0xB0	; 176
    1314:	97 dd       	rcall	.-1234   	; 0xe44 <rf12_readytrans>
    1316:	ea 81       	ldd	r30, Y+2	; 0x02
    1318:	fb 81       	ldd	r31, Y+3	; 0x03
    131a:	80 83       	st	Z, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	9b 81       	ldd	r25, Y+3	; 0x03
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	9b 83       	std	Y+3, r25	; 0x03
    1324:	8a 83       	std	Y+2, r24	; 0x02
{
	unsigned char i;
	rf12_trans(0x82C8); // RX on
	rf12_trans(0xCA81); // set FIFO mode
	rf12_trans(0xCA83); // enable FIFO
	for (i = 0; i < number; i++)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	99 81       	ldd	r25, Y+1	; 0x01
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	98 17       	cp	r25, r24
    1332:	70 f3       	brcs	.-36     	; 0x1310 <rf12_rxdata+0x28>
	{
		*data++ = rf12_readytrans(0xB000);
	}
	rf12_trans(0x8208); // RX off
    1334:	88 e0       	ldi	r24, 0x08	; 8
    1336:	92 e8       	ldi	r25, 0x82	; 130
    1338:	67 dc       	rcall	.-1842   	; 0xc08 <rf12_trans>
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <__fixunssfsi>:
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	7b 01       	movw	r14, r22
    1352:	8c 01       	movw	r16, r24
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	5f e4       	ldi	r21, 0x4F	; 79
    135c:	80 d3       	rcall	.+1792   	; 0x1a5e <__gesf2>
    135e:	88 23       	and	r24, r24
    1360:	7c f0       	brlt	.+30     	; 0x1380 <__fixunssfsi+0x38>
    1362:	c8 01       	movw	r24, r16
    1364:	b7 01       	movw	r22, r14
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	5f e4       	ldi	r21, 0x4F	; 79
    136e:	5e d1       	rcall	.+700    	; 0x162c <__subsf3>
    1370:	cc d3       	rcall	.+1944   	; 0x1b0a <__fixsfsi>
    1372:	9b 01       	movw	r18, r22
    1374:	ac 01       	movw	r20, r24
    1376:	20 50       	subi	r18, 0x00	; 0
    1378:	30 40       	sbci	r19, 0x00	; 0
    137a:	40 40       	sbci	r20, 0x00	; 0
    137c:	50 48       	sbci	r21, 0x80	; 128
    137e:	05 c0       	rjmp	.+10     	; 0x138a <__fixunssfsi+0x42>
    1380:	c8 01       	movw	r24, r16
    1382:	b7 01       	movw	r22, r14
    1384:	c2 d3       	rcall	.+1924   	; 0x1b0a <__fixsfsi>
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	b9 01       	movw	r22, r18
    138c:	ca 01       	movw	r24, r20
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	08 95       	ret

00001398 <_fpadd_parts>:
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e1 ed       	ldi	r30, 0xD1	; 209
    139e:	f9 e0       	ldi	r31, 0x09	; 9
    13a0:	e8 c5       	rjmp	.+3024   	; 0x1f72 <__prologue_saves__>
    13a2:	dc 01       	movw	r26, r24
    13a4:	2b 01       	movw	r4, r22
    13a6:	fa 01       	movw	r30, r20
    13a8:	9c 91       	ld	r25, X
    13aa:	92 30       	cpi	r25, 0x02	; 2
    13ac:	08 f4       	brcc	.+2      	; 0x13b0 <_fpadd_parts+0x18>
    13ae:	39 c1       	rjmp	.+626    	; 0x1622 <_fpadd_parts+0x28a>
    13b0:	eb 01       	movw	r28, r22
    13b2:	88 81       	ld	r24, Y
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	08 f4       	brcc	.+2      	; 0x13ba <_fpadd_parts+0x22>
    13b8:	33 c1       	rjmp	.+614    	; 0x1620 <_fpadd_parts+0x288>
    13ba:	94 30       	cpi	r25, 0x04	; 4
    13bc:	69 f4       	brne	.+26     	; 0x13d8 <_fpadd_parts+0x40>
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <_fpadd_parts+0x2c>
    13c2:	2f c1       	rjmp	.+606    	; 0x1622 <_fpadd_parts+0x28a>
    13c4:	11 96       	adiw	r26, 0x01	; 1
    13c6:	9c 91       	ld	r25, X
    13c8:	11 97       	sbiw	r26, 0x01	; 1
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	98 17       	cp	r25, r24
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <_fpadd_parts+0x3a>
    13d0:	28 c1       	rjmp	.+592    	; 0x1622 <_fpadd_parts+0x28a>
    13d2:	a3 e8       	ldi	r26, 0x83	; 131
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	25 c1       	rjmp	.+586    	; 0x1622 <_fpadd_parts+0x28a>
    13d8:	84 30       	cpi	r24, 0x04	; 4
    13da:	09 f4       	brne	.+2      	; 0x13de <_fpadd_parts+0x46>
    13dc:	21 c1       	rjmp	.+578    	; 0x1620 <_fpadd_parts+0x288>
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	a9 f4       	brne	.+42     	; 0x140c <_fpadd_parts+0x74>
    13e2:	92 30       	cpi	r25, 0x02	; 2
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <_fpadd_parts+0x50>
    13e6:	1d c1       	rjmp	.+570    	; 0x1622 <_fpadd_parts+0x28a>
    13e8:	9a 01       	movw	r18, r20
    13ea:	ad 01       	movw	r20, r26
    13ec:	88 e0       	ldi	r24, 0x08	; 8
    13ee:	ea 01       	movw	r28, r20
    13f0:	09 90       	ld	r0, Y+
    13f2:	ae 01       	movw	r20, r28
    13f4:	e9 01       	movw	r28, r18
    13f6:	09 92       	st	Y+, r0
    13f8:	9e 01       	movw	r18, r28
    13fa:	81 50       	subi	r24, 0x01	; 1
    13fc:	c1 f7       	brne	.-16     	; 0x13ee <_fpadd_parts+0x56>
    13fe:	e2 01       	movw	r28, r4
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	11 96       	adiw	r26, 0x01	; 1
    1404:	9c 91       	ld	r25, X
    1406:	89 23       	and	r24, r25
    1408:	81 83       	std	Z+1, r24	; 0x01
    140a:	08 c1       	rjmp	.+528    	; 0x161c <_fpadd_parts+0x284>
    140c:	92 30       	cpi	r25, 0x02	; 2
    140e:	09 f4       	brne	.+2      	; 0x1412 <_fpadd_parts+0x7a>
    1410:	07 c1       	rjmp	.+526    	; 0x1620 <_fpadd_parts+0x288>
    1412:	12 96       	adiw	r26, 0x02	; 2
    1414:	2d 90       	ld	r2, X+
    1416:	3c 90       	ld	r3, X
    1418:	13 97       	sbiw	r26, 0x03	; 3
    141a:	eb 01       	movw	r28, r22
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	14 96       	adiw	r26, 0x04	; 4
    1422:	ad 90       	ld	r10, X+
    1424:	bd 90       	ld	r11, X+
    1426:	cd 90       	ld	r12, X+
    1428:	dc 90       	ld	r13, X
    142a:	17 97       	sbiw	r26, 0x07	; 7
    142c:	ec 80       	ldd	r14, Y+4	; 0x04
    142e:	fd 80       	ldd	r15, Y+5	; 0x05
    1430:	0e 81       	ldd	r16, Y+6	; 0x06
    1432:	1f 81       	ldd	r17, Y+7	; 0x07
    1434:	91 01       	movw	r18, r2
    1436:	28 1b       	sub	r18, r24
    1438:	39 0b       	sbc	r19, r25
    143a:	b9 01       	movw	r22, r18
    143c:	37 ff       	sbrs	r19, 7
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <_fpadd_parts+0xb0>
    1440:	66 27       	eor	r22, r22
    1442:	77 27       	eor	r23, r23
    1444:	62 1b       	sub	r22, r18
    1446:	73 0b       	sbc	r23, r19
    1448:	60 32       	cpi	r22, 0x20	; 32
    144a:	71 05       	cpc	r23, r1
    144c:	0c f0       	brlt	.+2      	; 0x1450 <_fpadd_parts+0xb8>
    144e:	61 c0       	rjmp	.+194    	; 0x1512 <_fpadd_parts+0x17a>
    1450:	12 16       	cp	r1, r18
    1452:	13 06       	cpc	r1, r19
    1454:	6c f5       	brge	.+90     	; 0x14b0 <_fpadd_parts+0x118>
    1456:	37 01       	movw	r6, r14
    1458:	48 01       	movw	r8, r16
    145a:	06 2e       	mov	r0, r22
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <_fpadd_parts+0xce>
    145e:	96 94       	lsr	r9
    1460:	87 94       	ror	r8
    1462:	77 94       	ror	r7
    1464:	67 94       	ror	r6
    1466:	0a 94       	dec	r0
    1468:	d2 f7       	brpl	.-12     	; 0x145e <_fpadd_parts+0xc6>
    146a:	21 e0       	ldi	r18, 0x01	; 1
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	04 c0       	rjmp	.+8      	; 0x147c <_fpadd_parts+0xe4>
    1474:	22 0f       	add	r18, r18
    1476:	33 1f       	adc	r19, r19
    1478:	44 1f       	adc	r20, r20
    147a:	55 1f       	adc	r21, r21
    147c:	6a 95       	dec	r22
    147e:	d2 f7       	brpl	.-12     	; 0x1474 <_fpadd_parts+0xdc>
    1480:	21 50       	subi	r18, 0x01	; 1
    1482:	30 40       	sbci	r19, 0x00	; 0
    1484:	40 40       	sbci	r20, 0x00	; 0
    1486:	50 40       	sbci	r21, 0x00	; 0
    1488:	2e 21       	and	r18, r14
    148a:	3f 21       	and	r19, r15
    148c:	40 23       	and	r20, r16
    148e:	51 23       	and	r21, r17
    1490:	21 15       	cp	r18, r1
    1492:	31 05       	cpc	r19, r1
    1494:	41 05       	cpc	r20, r1
    1496:	51 05       	cpc	r21, r1
    1498:	21 f0       	breq	.+8      	; 0x14a2 <_fpadd_parts+0x10a>
    149a:	21 e0       	ldi	r18, 0x01	; 1
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	79 01       	movw	r14, r18
    14a4:	8a 01       	movw	r16, r20
    14a6:	e6 28       	or	r14, r6
    14a8:	f7 28       	or	r15, r7
    14aa:	08 29       	or	r16, r8
    14ac:	19 29       	or	r17, r9
    14ae:	3c c0       	rjmp	.+120    	; 0x1528 <_fpadd_parts+0x190>
    14b0:	23 2b       	or	r18, r19
    14b2:	d1 f1       	breq	.+116    	; 0x1528 <_fpadd_parts+0x190>
    14b4:	26 0e       	add	r2, r22
    14b6:	37 1e       	adc	r3, r23
    14b8:	35 01       	movw	r6, r10
    14ba:	46 01       	movw	r8, r12
    14bc:	06 2e       	mov	r0, r22
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <_fpadd_parts+0x130>
    14c0:	96 94       	lsr	r9
    14c2:	87 94       	ror	r8
    14c4:	77 94       	ror	r7
    14c6:	67 94       	ror	r6
    14c8:	0a 94       	dec	r0
    14ca:	d2 f7       	brpl	.-12     	; 0x14c0 <_fpadd_parts+0x128>
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <_fpadd_parts+0x146>
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	44 1f       	adc	r20, r20
    14dc:	55 1f       	adc	r21, r21
    14de:	6a 95       	dec	r22
    14e0:	d2 f7       	brpl	.-12     	; 0x14d6 <_fpadd_parts+0x13e>
    14e2:	21 50       	subi	r18, 0x01	; 1
    14e4:	30 40       	sbci	r19, 0x00	; 0
    14e6:	40 40       	sbci	r20, 0x00	; 0
    14e8:	50 40       	sbci	r21, 0x00	; 0
    14ea:	2a 21       	and	r18, r10
    14ec:	3b 21       	and	r19, r11
    14ee:	4c 21       	and	r20, r12
    14f0:	5d 21       	and	r21, r13
    14f2:	21 15       	cp	r18, r1
    14f4:	31 05       	cpc	r19, r1
    14f6:	41 05       	cpc	r20, r1
    14f8:	51 05       	cpc	r21, r1
    14fa:	21 f0       	breq	.+8      	; 0x1504 <_fpadd_parts+0x16c>
    14fc:	21 e0       	ldi	r18, 0x01	; 1
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	59 01       	movw	r10, r18
    1506:	6a 01       	movw	r12, r20
    1508:	a6 28       	or	r10, r6
    150a:	b7 28       	or	r11, r7
    150c:	c8 28       	or	r12, r8
    150e:	d9 28       	or	r13, r9
    1510:	0b c0       	rjmp	.+22     	; 0x1528 <_fpadd_parts+0x190>
    1512:	82 15       	cp	r24, r2
    1514:	93 05       	cpc	r25, r3
    1516:	2c f0       	brlt	.+10     	; 0x1522 <_fpadd_parts+0x18a>
    1518:	1c 01       	movw	r2, r24
    151a:	aa 24       	eor	r10, r10
    151c:	bb 24       	eor	r11, r11
    151e:	65 01       	movw	r12, r10
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <_fpadd_parts+0x190>
    1522:	ee 24       	eor	r14, r14
    1524:	ff 24       	eor	r15, r15
    1526:	87 01       	movw	r16, r14
    1528:	11 96       	adiw	r26, 0x01	; 1
    152a:	9c 91       	ld	r25, X
    152c:	d2 01       	movw	r26, r4
    152e:	11 96       	adiw	r26, 0x01	; 1
    1530:	8c 91       	ld	r24, X
    1532:	98 17       	cp	r25, r24
    1534:	09 f4       	brne	.+2      	; 0x1538 <_fpadd_parts+0x1a0>
    1536:	45 c0       	rjmp	.+138    	; 0x15c2 <_fpadd_parts+0x22a>
    1538:	99 23       	and	r25, r25
    153a:	39 f0       	breq	.+14     	; 0x154a <_fpadd_parts+0x1b2>
    153c:	a8 01       	movw	r20, r16
    153e:	97 01       	movw	r18, r14
    1540:	2a 19       	sub	r18, r10
    1542:	3b 09       	sbc	r19, r11
    1544:	4c 09       	sbc	r20, r12
    1546:	5d 09       	sbc	r21, r13
    1548:	06 c0       	rjmp	.+12     	; 0x1556 <_fpadd_parts+0x1be>
    154a:	a6 01       	movw	r20, r12
    154c:	95 01       	movw	r18, r10
    154e:	2e 19       	sub	r18, r14
    1550:	3f 09       	sbc	r19, r15
    1552:	40 0b       	sbc	r20, r16
    1554:	51 0b       	sbc	r21, r17
    1556:	57 fd       	sbrc	r21, 7
    1558:	08 c0       	rjmp	.+16     	; 0x156a <_fpadd_parts+0x1d2>
    155a:	11 82       	std	Z+1, r1	; 0x01
    155c:	33 82       	std	Z+3, r3	; 0x03
    155e:	22 82       	std	Z+2, r2	; 0x02
    1560:	24 83       	std	Z+4, r18	; 0x04
    1562:	35 83       	std	Z+5, r19	; 0x05
    1564:	46 83       	std	Z+6, r20	; 0x06
    1566:	57 83       	std	Z+7, r21	; 0x07
    1568:	1d c0       	rjmp	.+58     	; 0x15a4 <_fpadd_parts+0x20c>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	81 83       	std	Z+1, r24	; 0x01
    156e:	33 82       	std	Z+3, r3	; 0x03
    1570:	22 82       	std	Z+2, r2	; 0x02
    1572:	88 27       	eor	r24, r24
    1574:	99 27       	eor	r25, r25
    1576:	dc 01       	movw	r26, r24
    1578:	82 1b       	sub	r24, r18
    157a:	93 0b       	sbc	r25, r19
    157c:	a4 0b       	sbc	r26, r20
    157e:	b5 0b       	sbc	r27, r21
    1580:	84 83       	std	Z+4, r24	; 0x04
    1582:	95 83       	std	Z+5, r25	; 0x05
    1584:	a6 83       	std	Z+6, r26	; 0x06
    1586:	b7 83       	std	Z+7, r27	; 0x07
    1588:	0d c0       	rjmp	.+26     	; 0x15a4 <_fpadd_parts+0x20c>
    158a:	22 0f       	add	r18, r18
    158c:	33 1f       	adc	r19, r19
    158e:	44 1f       	adc	r20, r20
    1590:	55 1f       	adc	r21, r21
    1592:	24 83       	std	Z+4, r18	; 0x04
    1594:	35 83       	std	Z+5, r19	; 0x05
    1596:	46 83       	std	Z+6, r20	; 0x06
    1598:	57 83       	std	Z+7, r21	; 0x07
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	93 83       	std	Z+3, r25	; 0x03
    15a2:	82 83       	std	Z+2, r24	; 0x02
    15a4:	24 81       	ldd	r18, Z+4	; 0x04
    15a6:	35 81       	ldd	r19, Z+5	; 0x05
    15a8:	46 81       	ldd	r20, Z+6	; 0x06
    15aa:	57 81       	ldd	r21, Z+7	; 0x07
    15ac:	da 01       	movw	r26, r20
    15ae:	c9 01       	movw	r24, r18
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	a1 09       	sbc	r26, r1
    15b4:	b1 09       	sbc	r27, r1
    15b6:	8f 5f       	subi	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	af 4f       	sbci	r26, 0xFF	; 255
    15bc:	bf 43       	sbci	r27, 0x3F	; 63
    15be:	28 f3       	brcs	.-54     	; 0x158a <_fpadd_parts+0x1f2>
    15c0:	0b c0       	rjmp	.+22     	; 0x15d8 <_fpadd_parts+0x240>
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	33 82       	std	Z+3, r3	; 0x03
    15c6:	22 82       	std	Z+2, r2	; 0x02
    15c8:	ea 0c       	add	r14, r10
    15ca:	fb 1c       	adc	r15, r11
    15cc:	0c 1d       	adc	r16, r12
    15ce:	1d 1d       	adc	r17, r13
    15d0:	e4 82       	std	Z+4, r14	; 0x04
    15d2:	f5 82       	std	Z+5, r15	; 0x05
    15d4:	06 83       	std	Z+6, r16	; 0x06
    15d6:	17 83       	std	Z+7, r17	; 0x07
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	80 83       	st	Z, r24
    15dc:	24 81       	ldd	r18, Z+4	; 0x04
    15de:	35 81       	ldd	r19, Z+5	; 0x05
    15e0:	46 81       	ldd	r20, Z+6	; 0x06
    15e2:	57 81       	ldd	r21, Z+7	; 0x07
    15e4:	57 ff       	sbrs	r21, 7
    15e6:	1a c0       	rjmp	.+52     	; 0x161c <_fpadd_parts+0x284>
    15e8:	c9 01       	movw	r24, r18
    15ea:	aa 27       	eor	r26, r26
    15ec:	97 fd       	sbrc	r25, 7
    15ee:	a0 95       	com	r26
    15f0:	ba 2f       	mov	r27, r26
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	90 70       	andi	r25, 0x00	; 0
    15f6:	a0 70       	andi	r26, 0x00	; 0
    15f8:	b0 70       	andi	r27, 0x00	; 0
    15fa:	56 95       	lsr	r21
    15fc:	47 95       	ror	r20
    15fe:	37 95       	ror	r19
    1600:	27 95       	ror	r18
    1602:	82 2b       	or	r24, r18
    1604:	93 2b       	or	r25, r19
    1606:	a4 2b       	or	r26, r20
    1608:	b5 2b       	or	r27, r21
    160a:	84 83       	std	Z+4, r24	; 0x04
    160c:	95 83       	std	Z+5, r25	; 0x05
    160e:	a6 83       	std	Z+6, r26	; 0x06
    1610:	b7 83       	std	Z+7, r27	; 0x07
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	93 83       	std	Z+3, r25	; 0x03
    161a:	82 83       	std	Z+2, r24	; 0x02
    161c:	df 01       	movw	r26, r30
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <_fpadd_parts+0x28a>
    1620:	d2 01       	movw	r26, r4
    1622:	cd 01       	movw	r24, r26
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	e2 e1       	ldi	r30, 0x12	; 18
    162a:	bf c4       	rjmp	.+2430   	; 0x1faa <__epilogue_restores__>

0000162c <__subsf3>:
    162c:	a0 e2       	ldi	r26, 0x20	; 32
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	eb e1       	ldi	r30, 0x1B	; 27
    1632:	fb e0       	ldi	r31, 0x0B	; 11
    1634:	aa c4       	rjmp	.+2388   	; 0x1f8a <__prologue_saves__+0x18>
    1636:	69 83       	std	Y+1, r22	; 0x01
    1638:	7a 83       	std	Y+2, r23	; 0x02
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	2d 83       	std	Y+5, r18	; 0x05
    1640:	3e 83       	std	Y+6, r19	; 0x06
    1642:	4f 83       	std	Y+7, r20	; 0x07
    1644:	58 87       	std	Y+8, r21	; 0x08
    1646:	e9 e0       	ldi	r30, 0x09	; 9
    1648:	ee 2e       	mov	r14, r30
    164a:	f1 2c       	mov	r15, r1
    164c:	ec 0e       	add	r14, r28
    164e:	fd 1e       	adc	r15, r29
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	b7 01       	movw	r22, r14
    1656:	7f d3       	rcall	.+1790   	; 0x1d56 <__unpack_f>
    1658:	8e 01       	movw	r16, r28
    165a:	0f 5e       	subi	r16, 0xEF	; 239
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
    165e:	ce 01       	movw	r24, r28
    1660:	05 96       	adiw	r24, 0x05	; 5
    1662:	b8 01       	movw	r22, r16
    1664:	78 d3       	rcall	.+1776   	; 0x1d56 <__unpack_f>
    1666:	8a 89       	ldd	r24, Y+18	; 0x12
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	89 27       	eor	r24, r25
    166c:	8a 8b       	std	Y+18, r24	; 0x12
    166e:	c7 01       	movw	r24, r14
    1670:	b8 01       	movw	r22, r16
    1672:	ae 01       	movw	r20, r28
    1674:	47 5e       	subi	r20, 0xE7	; 231
    1676:	5f 4f       	sbci	r21, 0xFF	; 255
    1678:	8f de       	rcall	.-738    	; 0x1398 <_fpadd_parts>
    167a:	98 d2       	rcall	.+1328   	; 0x1bac <__pack_f>
    167c:	a0 96       	adiw	r28, 0x20	; 32
    167e:	e6 e0       	ldi	r30, 0x06	; 6
    1680:	a0 c4       	rjmp	.+2368   	; 0x1fc2 <__epilogue_restores__+0x18>

00001682 <__addsf3>:
    1682:	a0 e2       	ldi	r26, 0x20	; 32
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e6 e4       	ldi	r30, 0x46	; 70
    1688:	fb e0       	ldi	r31, 0x0B	; 11
    168a:	7f c4       	rjmp	.+2302   	; 0x1f8a <__prologue_saves__+0x18>
    168c:	69 83       	std	Y+1, r22	; 0x01
    168e:	7a 83       	std	Y+2, r23	; 0x02
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	2d 83       	std	Y+5, r18	; 0x05
    1696:	3e 83       	std	Y+6, r19	; 0x06
    1698:	4f 83       	std	Y+7, r20	; 0x07
    169a:	58 87       	std	Y+8, r21	; 0x08
    169c:	f9 e0       	ldi	r31, 0x09	; 9
    169e:	ef 2e       	mov	r14, r31
    16a0:	f1 2c       	mov	r15, r1
    16a2:	ec 0e       	add	r14, r28
    16a4:	fd 1e       	adc	r15, r29
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	b7 01       	movw	r22, r14
    16ac:	54 d3       	rcall	.+1704   	; 0x1d56 <__unpack_f>
    16ae:	8e 01       	movw	r16, r28
    16b0:	0f 5e       	subi	r16, 0xEF	; 239
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	ce 01       	movw	r24, r28
    16b6:	05 96       	adiw	r24, 0x05	; 5
    16b8:	b8 01       	movw	r22, r16
    16ba:	4d d3       	rcall	.+1690   	; 0x1d56 <__unpack_f>
    16bc:	c7 01       	movw	r24, r14
    16be:	b8 01       	movw	r22, r16
    16c0:	ae 01       	movw	r20, r28
    16c2:	47 5e       	subi	r20, 0xE7	; 231
    16c4:	5f 4f       	sbci	r21, 0xFF	; 255
    16c6:	68 de       	rcall	.-816    	; 0x1398 <_fpadd_parts>
    16c8:	71 d2       	rcall	.+1250   	; 0x1bac <__pack_f>
    16ca:	a0 96       	adiw	r28, 0x20	; 32
    16cc:	e6 e0       	ldi	r30, 0x06	; 6
    16ce:	79 c4       	rjmp	.+2290   	; 0x1fc2 <__epilogue_restores__+0x18>

000016d0 <__mulsf3>:
    16d0:	a0 e2       	ldi	r26, 0x20	; 32
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	ed e6       	ldi	r30, 0x6D	; 109
    16d6:	fb e0       	ldi	r31, 0x0B	; 11
    16d8:	4c c4       	rjmp	.+2200   	; 0x1f72 <__prologue_saves__>
    16da:	69 83       	std	Y+1, r22	; 0x01
    16dc:	7a 83       	std	Y+2, r23	; 0x02
    16de:	8b 83       	std	Y+3, r24	; 0x03
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	2d 83       	std	Y+5, r18	; 0x05
    16e4:	3e 83       	std	Y+6, r19	; 0x06
    16e6:	4f 83       	std	Y+7, r20	; 0x07
    16e8:	58 87       	std	Y+8, r21	; 0x08
    16ea:	ce 01       	movw	r24, r28
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	be 01       	movw	r22, r28
    16f0:	67 5f       	subi	r22, 0xF7	; 247
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	30 d3       	rcall	.+1632   	; 0x1d56 <__unpack_f>
    16f6:	ce 01       	movw	r24, r28
    16f8:	05 96       	adiw	r24, 0x05	; 5
    16fa:	be 01       	movw	r22, r28
    16fc:	6f 5e       	subi	r22, 0xEF	; 239
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	2a d3       	rcall	.+1620   	; 0x1d56 <__unpack_f>
    1702:	99 85       	ldd	r25, Y+9	; 0x09
    1704:	92 30       	cpi	r25, 0x02	; 2
    1706:	88 f0       	brcs	.+34     	; 0x172a <__mulsf3+0x5a>
    1708:	89 89       	ldd	r24, Y+17	; 0x11
    170a:	82 30       	cpi	r24, 0x02	; 2
    170c:	c8 f0       	brcs	.+50     	; 0x1740 <__mulsf3+0x70>
    170e:	94 30       	cpi	r25, 0x04	; 4
    1710:	19 f4       	brne	.+6      	; 0x1718 <__mulsf3+0x48>
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	51 f4       	brne	.+20     	; 0x172a <__mulsf3+0x5a>
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <__mulsf3+0x50>
    1718:	84 30       	cpi	r24, 0x04	; 4
    171a:	29 f4       	brne	.+10     	; 0x1726 <__mulsf3+0x56>
    171c:	92 30       	cpi	r25, 0x02	; 2
    171e:	81 f4       	brne	.+32     	; 0x1740 <__mulsf3+0x70>
    1720:	83 e8       	ldi	r24, 0x83	; 131
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	c6 c0       	rjmp	.+396    	; 0x18b2 <__mulsf3+0x1e2>
    1726:	92 30       	cpi	r25, 0x02	; 2
    1728:	49 f4       	brne	.+18     	; 0x173c <__mulsf3+0x6c>
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	9a 85       	ldd	r25, Y+10	; 0x0a
    172e:	8a 89       	ldd	r24, Y+18	; 0x12
    1730:	98 13       	cpse	r25, r24
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	2a 87       	std	Y+10, r18	; 0x0a
    1736:	ce 01       	movw	r24, r28
    1738:	09 96       	adiw	r24, 0x09	; 9
    173a:	bb c0       	rjmp	.+374    	; 0x18b2 <__mulsf3+0x1e2>
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	49 f4       	brne	.+18     	; 0x1752 <__mulsf3+0x82>
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	8a 89       	ldd	r24, Y+18	; 0x12
    1746:	98 13       	cpse	r25, r24
    1748:	21 e0       	ldi	r18, 0x01	; 1
    174a:	2a 8b       	std	Y+18, r18	; 0x12
    174c:	ce 01       	movw	r24, r28
    174e:	41 96       	adiw	r24, 0x11	; 17
    1750:	b0 c0       	rjmp	.+352    	; 0x18b2 <__mulsf3+0x1e2>
    1752:	2d 84       	ldd	r2, Y+13	; 0x0d
    1754:	3e 84       	ldd	r3, Y+14	; 0x0e
    1756:	4f 84       	ldd	r4, Y+15	; 0x0f
    1758:	58 88       	ldd	r5, Y+16	; 0x10
    175a:	6d 88       	ldd	r6, Y+21	; 0x15
    175c:	7e 88       	ldd	r7, Y+22	; 0x16
    175e:	8f 88       	ldd	r8, Y+23	; 0x17
    1760:	98 8c       	ldd	r9, Y+24	; 0x18
    1762:	ee 24       	eor	r14, r14
    1764:	ff 24       	eor	r15, r15
    1766:	87 01       	movw	r16, r14
    1768:	aa 24       	eor	r10, r10
    176a:	bb 24       	eor	r11, r11
    176c:	65 01       	movw	r12, r10
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	e0 e0       	ldi	r30, 0x00	; 0
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	c1 01       	movw	r24, r2
    177c:	81 70       	andi	r24, 0x01	; 1
    177e:	90 70       	andi	r25, 0x00	; 0
    1780:	89 2b       	or	r24, r25
    1782:	e9 f0       	breq	.+58     	; 0x17be <__mulsf3+0xee>
    1784:	e6 0c       	add	r14, r6
    1786:	f7 1c       	adc	r15, r7
    1788:	08 1d       	adc	r16, r8
    178a:	19 1d       	adc	r17, r9
    178c:	9a 01       	movw	r18, r20
    178e:	ab 01       	movw	r20, r22
    1790:	2a 0d       	add	r18, r10
    1792:	3b 1d       	adc	r19, r11
    1794:	4c 1d       	adc	r20, r12
    1796:	5d 1d       	adc	r21, r13
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e0       	ldi	r26, 0x00	; 0
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e6 14       	cp	r14, r6
    17a2:	f7 04       	cpc	r15, r7
    17a4:	08 05       	cpc	r16, r8
    17a6:	19 05       	cpc	r17, r9
    17a8:	20 f4       	brcc	.+8      	; 0x17b2 <__mulsf3+0xe2>
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a0 e0       	ldi	r26, 0x00	; 0
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ba 01       	movw	r22, r20
    17b4:	a9 01       	movw	r20, r18
    17b6:	48 0f       	add	r20, r24
    17b8:	59 1f       	adc	r21, r25
    17ba:	6a 1f       	adc	r22, r26
    17bc:	7b 1f       	adc	r23, r27
    17be:	aa 0c       	add	r10, r10
    17c0:	bb 1c       	adc	r11, r11
    17c2:	cc 1c       	adc	r12, r12
    17c4:	dd 1c       	adc	r13, r13
    17c6:	97 fe       	sbrs	r9, 7
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <__mulsf3+0x10a>
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	a8 2a       	or	r10, r24
    17d4:	b9 2a       	or	r11, r25
    17d6:	ca 2a       	or	r12, r26
    17d8:	db 2a       	or	r13, r27
    17da:	31 96       	adiw	r30, 0x01	; 1
    17dc:	e0 32       	cpi	r30, 0x20	; 32
    17de:	f1 05       	cpc	r31, r1
    17e0:	49 f0       	breq	.+18     	; 0x17f4 <__mulsf3+0x124>
    17e2:	66 0c       	add	r6, r6
    17e4:	77 1c       	adc	r7, r7
    17e6:	88 1c       	adc	r8, r8
    17e8:	99 1c       	adc	r9, r9
    17ea:	56 94       	lsr	r5
    17ec:	47 94       	ror	r4
    17ee:	37 94       	ror	r3
    17f0:	27 94       	ror	r2
    17f2:	c3 cf       	rjmp	.-122    	; 0x177a <__mulsf3+0xaa>
    17f4:	fa 85       	ldd	r31, Y+10	; 0x0a
    17f6:	ea 89       	ldd	r30, Y+18	; 0x12
    17f8:	2b 89       	ldd	r18, Y+19	; 0x13
    17fa:	3c 89       	ldd	r19, Y+20	; 0x14
    17fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    17fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1800:	28 0f       	add	r18, r24
    1802:	39 1f       	adc	r19, r25
    1804:	2e 5f       	subi	r18, 0xFE	; 254
    1806:	3f 4f       	sbci	r19, 0xFF	; 255
    1808:	17 c0       	rjmp	.+46     	; 0x1838 <__mulsf3+0x168>
    180a:	ca 01       	movw	r24, r20
    180c:	81 70       	andi	r24, 0x01	; 1
    180e:	90 70       	andi	r25, 0x00	; 0
    1810:	89 2b       	or	r24, r25
    1812:	61 f0       	breq	.+24     	; 0x182c <__mulsf3+0x15c>
    1814:	16 95       	lsr	r17
    1816:	07 95       	ror	r16
    1818:	f7 94       	ror	r15
    181a:	e7 94       	ror	r14
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a0 e0       	ldi	r26, 0x00	; 0
    1822:	b0 e8       	ldi	r27, 0x80	; 128
    1824:	e8 2a       	or	r14, r24
    1826:	f9 2a       	or	r15, r25
    1828:	0a 2b       	or	r16, r26
    182a:	1b 2b       	or	r17, r27
    182c:	76 95       	lsr	r23
    182e:	67 95       	ror	r22
    1830:	57 95       	ror	r21
    1832:	47 95       	ror	r20
    1834:	2f 5f       	subi	r18, 0xFF	; 255
    1836:	3f 4f       	sbci	r19, 0xFF	; 255
    1838:	77 fd       	sbrc	r23, 7
    183a:	e7 cf       	rjmp	.-50     	; 0x180a <__mulsf3+0x13a>
    183c:	0c c0       	rjmp	.+24     	; 0x1856 <__mulsf3+0x186>
    183e:	44 0f       	add	r20, r20
    1840:	55 1f       	adc	r21, r21
    1842:	66 1f       	adc	r22, r22
    1844:	77 1f       	adc	r23, r23
    1846:	17 fd       	sbrc	r17, 7
    1848:	41 60       	ori	r20, 0x01	; 1
    184a:	ee 0c       	add	r14, r14
    184c:	ff 1c       	adc	r15, r15
    184e:	00 1f       	adc	r16, r16
    1850:	11 1f       	adc	r17, r17
    1852:	21 50       	subi	r18, 0x01	; 1
    1854:	30 40       	sbci	r19, 0x00	; 0
    1856:	40 30       	cpi	r20, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	59 07       	cpc	r21, r25
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	69 07       	cpc	r22, r25
    1860:	90 e4       	ldi	r25, 0x40	; 64
    1862:	79 07       	cpc	r23, r25
    1864:	60 f3       	brcs	.-40     	; 0x183e <__mulsf3+0x16e>
    1866:	2b 8f       	std	Y+27, r18	; 0x1b
    1868:	3c 8f       	std	Y+28, r19	; 0x1c
    186a:	db 01       	movw	r26, r22
    186c:	ca 01       	movw	r24, r20
    186e:	8f 77       	andi	r24, 0x7F	; 127
    1870:	90 70       	andi	r25, 0x00	; 0
    1872:	a0 70       	andi	r26, 0x00	; 0
    1874:	b0 70       	andi	r27, 0x00	; 0
    1876:	80 34       	cpi	r24, 0x40	; 64
    1878:	91 05       	cpc	r25, r1
    187a:	a1 05       	cpc	r26, r1
    187c:	b1 05       	cpc	r27, r1
    187e:	61 f4       	brne	.+24     	; 0x1898 <__mulsf3+0x1c8>
    1880:	47 fd       	sbrc	r20, 7
    1882:	0a c0       	rjmp	.+20     	; 0x1898 <__mulsf3+0x1c8>
    1884:	e1 14       	cp	r14, r1
    1886:	f1 04       	cpc	r15, r1
    1888:	01 05       	cpc	r16, r1
    188a:	11 05       	cpc	r17, r1
    188c:	29 f0       	breq	.+10     	; 0x1898 <__mulsf3+0x1c8>
    188e:	40 5c       	subi	r20, 0xC0	; 192
    1890:	5f 4f       	sbci	r21, 0xFF	; 255
    1892:	6f 4f       	sbci	r22, 0xFF	; 255
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	40 78       	andi	r20, 0x80	; 128
    1898:	1a 8e       	std	Y+26, r1	; 0x1a
    189a:	fe 17       	cp	r31, r30
    189c:	11 f0       	breq	.+4      	; 0x18a2 <__mulsf3+0x1d2>
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	8a 8f       	std	Y+26, r24	; 0x1a
    18a2:	4d 8f       	std	Y+29, r20	; 0x1d
    18a4:	5e 8f       	std	Y+30, r21	; 0x1e
    18a6:	6f 8f       	std	Y+31, r22	; 0x1f
    18a8:	78 a3       	std	Y+32, r23	; 0x20
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	89 8f       	std	Y+25, r24	; 0x19
    18ae:	ce 01       	movw	r24, r28
    18b0:	49 96       	adiw	r24, 0x19	; 25
    18b2:	7c d1       	rcall	.+760    	; 0x1bac <__pack_f>
    18b4:	a0 96       	adiw	r28, 0x20	; 32
    18b6:	e2 e1       	ldi	r30, 0x12	; 18
    18b8:	78 c3       	rjmp	.+1776   	; 0x1faa <__epilogue_restores__>

000018ba <__divsf3>:
    18ba:	a8 e1       	ldi	r26, 0x18	; 24
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e2 e6       	ldi	r30, 0x62	; 98
    18c0:	fc e0       	ldi	r31, 0x0C	; 12
    18c2:	5f c3       	rjmp	.+1726   	; 0x1f82 <__prologue_saves__+0x10>
    18c4:	69 83       	std	Y+1, r22	; 0x01
    18c6:	7a 83       	std	Y+2, r23	; 0x02
    18c8:	8b 83       	std	Y+3, r24	; 0x03
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	2d 83       	std	Y+5, r18	; 0x05
    18ce:	3e 83       	std	Y+6, r19	; 0x06
    18d0:	4f 83       	std	Y+7, r20	; 0x07
    18d2:	58 87       	std	Y+8, r21	; 0x08
    18d4:	b9 e0       	ldi	r27, 0x09	; 9
    18d6:	eb 2e       	mov	r14, r27
    18d8:	f1 2c       	mov	r15, r1
    18da:	ec 0e       	add	r14, r28
    18dc:	fd 1e       	adc	r15, r29
    18de:	ce 01       	movw	r24, r28
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	b7 01       	movw	r22, r14
    18e4:	38 d2       	rcall	.+1136   	; 0x1d56 <__unpack_f>
    18e6:	8e 01       	movw	r16, r28
    18e8:	0f 5e       	subi	r16, 0xEF	; 239
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	ce 01       	movw	r24, r28
    18ee:	05 96       	adiw	r24, 0x05	; 5
    18f0:	b8 01       	movw	r22, r16
    18f2:	31 d2       	rcall	.+1122   	; 0x1d56 <__unpack_f>
    18f4:	29 85       	ldd	r18, Y+9	; 0x09
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	08 f4       	brcc	.+2      	; 0x18fc <__divsf3+0x42>
    18fa:	7e c0       	rjmp	.+252    	; 0x19f8 <__divsf3+0x13e>
    18fc:	39 89       	ldd	r19, Y+17	; 0x11
    18fe:	32 30       	cpi	r19, 0x02	; 2
    1900:	10 f4       	brcc	.+4      	; 0x1906 <__divsf3+0x4c>
    1902:	b8 01       	movw	r22, r16
    1904:	7c c0       	rjmp	.+248    	; 0x19fe <__divsf3+0x144>
    1906:	8a 85       	ldd	r24, Y+10	; 0x0a
    1908:	9a 89       	ldd	r25, Y+18	; 0x12
    190a:	89 27       	eor	r24, r25
    190c:	8a 87       	std	Y+10, r24	; 0x0a
    190e:	24 30       	cpi	r18, 0x04	; 4
    1910:	11 f0       	breq	.+4      	; 0x1916 <__divsf3+0x5c>
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 f4       	brne	.+12     	; 0x1922 <__divsf3+0x68>
    1916:	23 17       	cp	r18, r19
    1918:	09 f0       	breq	.+2      	; 0x191c <__divsf3+0x62>
    191a:	6e c0       	rjmp	.+220    	; 0x19f8 <__divsf3+0x13e>
    191c:	63 e8       	ldi	r22, 0x83	; 131
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	6e c0       	rjmp	.+220    	; 0x19fe <__divsf3+0x144>
    1922:	34 30       	cpi	r19, 0x04	; 4
    1924:	39 f4       	brne	.+14     	; 0x1934 <__divsf3+0x7a>
    1926:	1d 86       	std	Y+13, r1	; 0x0d
    1928:	1e 86       	std	Y+14, r1	; 0x0e
    192a:	1f 86       	std	Y+15, r1	; 0x0f
    192c:	18 8a       	std	Y+16, r1	; 0x10
    192e:	1c 86       	std	Y+12, r1	; 0x0c
    1930:	1b 86       	std	Y+11, r1	; 0x0b
    1932:	04 c0       	rjmp	.+8      	; 0x193c <__divsf3+0x82>
    1934:	32 30       	cpi	r19, 0x02	; 2
    1936:	21 f4       	brne	.+8      	; 0x1940 <__divsf3+0x86>
    1938:	84 e0       	ldi	r24, 0x04	; 4
    193a:	89 87       	std	Y+9, r24	; 0x09
    193c:	b7 01       	movw	r22, r14
    193e:	5f c0       	rjmp	.+190    	; 0x19fe <__divsf3+0x144>
    1940:	2b 85       	ldd	r18, Y+11	; 0x0b
    1942:	3c 85       	ldd	r19, Y+12	; 0x0c
    1944:	8b 89       	ldd	r24, Y+19	; 0x13
    1946:	9c 89       	ldd	r25, Y+20	; 0x14
    1948:	28 1b       	sub	r18, r24
    194a:	39 0b       	sbc	r19, r25
    194c:	3c 87       	std	Y+12, r19	; 0x0c
    194e:	2b 87       	std	Y+11, r18	; 0x0b
    1950:	ed 84       	ldd	r14, Y+13	; 0x0d
    1952:	fe 84       	ldd	r15, Y+14	; 0x0e
    1954:	0f 85       	ldd	r16, Y+15	; 0x0f
    1956:	18 89       	ldd	r17, Y+16	; 0x10
    1958:	ad 88       	ldd	r10, Y+21	; 0x15
    195a:	be 88       	ldd	r11, Y+22	; 0x16
    195c:	cf 88       	ldd	r12, Y+23	; 0x17
    195e:	d8 8c       	ldd	r13, Y+24	; 0x18
    1960:	ea 14       	cp	r14, r10
    1962:	fb 04       	cpc	r15, r11
    1964:	0c 05       	cpc	r16, r12
    1966:	1d 05       	cpc	r17, r13
    1968:	40 f4       	brcc	.+16     	; 0x197a <__divsf3+0xc0>
    196a:	ee 0c       	add	r14, r14
    196c:	ff 1c       	adc	r15, r15
    196e:	00 1f       	adc	r16, r16
    1970:	11 1f       	adc	r17, r17
    1972:	21 50       	subi	r18, 0x01	; 1
    1974:	30 40       	sbci	r19, 0x00	; 0
    1976:	3c 87       	std	Y+12, r19	; 0x0c
    1978:	2b 87       	std	Y+11, r18	; 0x0b
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e0       	ldi	r26, 0x00	; 0
    1988:	b0 e4       	ldi	r27, 0x40	; 64
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	ea 14       	cp	r14, r10
    1990:	fb 04       	cpc	r15, r11
    1992:	0c 05       	cpc	r16, r12
    1994:	1d 05       	cpc	r17, r13
    1996:	40 f0       	brcs	.+16     	; 0x19a8 <__divsf3+0xee>
    1998:	28 2b       	or	r18, r24
    199a:	39 2b       	or	r19, r25
    199c:	4a 2b       	or	r20, r26
    199e:	5b 2b       	or	r21, r27
    19a0:	ea 18       	sub	r14, r10
    19a2:	fb 08       	sbc	r15, r11
    19a4:	0c 09       	sbc	r16, r12
    19a6:	1d 09       	sbc	r17, r13
    19a8:	b6 95       	lsr	r27
    19aa:	a7 95       	ror	r26
    19ac:	97 95       	ror	r25
    19ae:	87 95       	ror	r24
    19b0:	ee 0c       	add	r14, r14
    19b2:	ff 1c       	adc	r15, r15
    19b4:	00 1f       	adc	r16, r16
    19b6:	11 1f       	adc	r17, r17
    19b8:	6f 5f       	subi	r22, 0xFF	; 255
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255
    19bc:	6f 31       	cpi	r22, 0x1F	; 31
    19be:	71 05       	cpc	r23, r1
    19c0:	31 f7       	brne	.-52     	; 0x198e <__divsf3+0xd4>
    19c2:	da 01       	movw	r26, r20
    19c4:	c9 01       	movw	r24, r18
    19c6:	8f 77       	andi	r24, 0x7F	; 127
    19c8:	90 70       	andi	r25, 0x00	; 0
    19ca:	a0 70       	andi	r26, 0x00	; 0
    19cc:	b0 70       	andi	r27, 0x00	; 0
    19ce:	80 34       	cpi	r24, 0x40	; 64
    19d0:	91 05       	cpc	r25, r1
    19d2:	a1 05       	cpc	r26, r1
    19d4:	b1 05       	cpc	r27, r1
    19d6:	61 f4       	brne	.+24     	; 0x19f0 <__divsf3+0x136>
    19d8:	27 fd       	sbrc	r18, 7
    19da:	0a c0       	rjmp	.+20     	; 0x19f0 <__divsf3+0x136>
    19dc:	e1 14       	cp	r14, r1
    19de:	f1 04       	cpc	r15, r1
    19e0:	01 05       	cpc	r16, r1
    19e2:	11 05       	cpc	r17, r1
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <__divsf3+0x136>
    19e6:	20 5c       	subi	r18, 0xC0	; 192
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	4f 4f       	sbci	r20, 0xFF	; 255
    19ec:	5f 4f       	sbci	r21, 0xFF	; 255
    19ee:	20 78       	andi	r18, 0x80	; 128
    19f0:	2d 87       	std	Y+13, r18	; 0x0d
    19f2:	3e 87       	std	Y+14, r19	; 0x0e
    19f4:	4f 87       	std	Y+15, r20	; 0x0f
    19f6:	58 8b       	std	Y+16, r21	; 0x10
    19f8:	be 01       	movw	r22, r28
    19fa:	67 5f       	subi	r22, 0xF7	; 247
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	cb 01       	movw	r24, r22
    1a00:	d5 d0       	rcall	.+426    	; 0x1bac <__pack_f>
    1a02:	68 96       	adiw	r28, 0x18	; 24
    1a04:	ea e0       	ldi	r30, 0x0A	; 10
    1a06:	d9 c2       	rjmp	.+1458   	; 0x1fba <__epilogue_restores__+0x10>

00001a08 <__gtsf2>:
    1a08:	a8 e1       	ldi	r26, 0x18	; 24
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e9 e0       	ldi	r30, 0x09	; 9
    1a0e:	fd e0       	ldi	r31, 0x0D	; 13
    1a10:	bc c2       	rjmp	.+1400   	; 0x1f8a <__prologue_saves__+0x18>
    1a12:	69 83       	std	Y+1, r22	; 0x01
    1a14:	7a 83       	std	Y+2, r23	; 0x02
    1a16:	8b 83       	std	Y+3, r24	; 0x03
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	2d 83       	std	Y+5, r18	; 0x05
    1a1c:	3e 83       	std	Y+6, r19	; 0x06
    1a1e:	4f 83       	std	Y+7, r20	; 0x07
    1a20:	58 87       	std	Y+8, r21	; 0x08
    1a22:	89 e0       	ldi	r24, 0x09	; 9
    1a24:	e8 2e       	mov	r14, r24
    1a26:	f1 2c       	mov	r15, r1
    1a28:	ec 0e       	add	r14, r28
    1a2a:	fd 1e       	adc	r15, r29
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	b7 01       	movw	r22, r14
    1a32:	91 d1       	rcall	.+802    	; 0x1d56 <__unpack_f>
    1a34:	8e 01       	movw	r16, r28
    1a36:	0f 5e       	subi	r16, 0xEF	; 239
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	05 96       	adiw	r24, 0x05	; 5
    1a3e:	b8 01       	movw	r22, r16
    1a40:	8a d1       	rcall	.+788    	; 0x1d56 <__unpack_f>
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	82 30       	cpi	r24, 0x02	; 2
    1a46:	38 f0       	brcs	.+14     	; 0x1a56 <__gtsf2+0x4e>
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	20 f0       	brcs	.+8      	; 0x1a56 <__gtsf2+0x4e>
    1a4e:	c7 01       	movw	r24, r14
    1a50:	b8 01       	movw	r22, r16
    1a52:	f9 d1       	rcall	.+1010   	; 0x1e46 <__fpcmp_parts_f>
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <__gtsf2+0x50>
    1a56:	8f ef       	ldi	r24, 0xFF	; 255
    1a58:	68 96       	adiw	r28, 0x18	; 24
    1a5a:	e6 e0       	ldi	r30, 0x06	; 6
    1a5c:	b2 c2       	rjmp	.+1380   	; 0x1fc2 <__epilogue_restores__+0x18>

00001a5e <__gesf2>:
    1a5e:	a8 e1       	ldi	r26, 0x18	; 24
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e4 e3       	ldi	r30, 0x34	; 52
    1a64:	fd e0       	ldi	r31, 0x0D	; 13
    1a66:	91 c2       	rjmp	.+1314   	; 0x1f8a <__prologue_saves__+0x18>
    1a68:	69 83       	std	Y+1, r22	; 0x01
    1a6a:	7a 83       	std	Y+2, r23	; 0x02
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	2d 83       	std	Y+5, r18	; 0x05
    1a72:	3e 83       	std	Y+6, r19	; 0x06
    1a74:	4f 83       	std	Y+7, r20	; 0x07
    1a76:	58 87       	std	Y+8, r21	; 0x08
    1a78:	89 e0       	ldi	r24, 0x09	; 9
    1a7a:	e8 2e       	mov	r14, r24
    1a7c:	f1 2c       	mov	r15, r1
    1a7e:	ec 0e       	add	r14, r28
    1a80:	fd 1e       	adc	r15, r29
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	b7 01       	movw	r22, r14
    1a88:	66 d1       	rcall	.+716    	; 0x1d56 <__unpack_f>
    1a8a:	8e 01       	movw	r16, r28
    1a8c:	0f 5e       	subi	r16, 0xEF	; 239
    1a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a90:	ce 01       	movw	r24, r28
    1a92:	05 96       	adiw	r24, 0x05	; 5
    1a94:	b8 01       	movw	r22, r16
    1a96:	5f d1       	rcall	.+702    	; 0x1d56 <__unpack_f>
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	82 30       	cpi	r24, 0x02	; 2
    1a9c:	38 f0       	brcs	.+14     	; 0x1aac <__gesf2+0x4e>
    1a9e:	89 89       	ldd	r24, Y+17	; 0x11
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	20 f0       	brcs	.+8      	; 0x1aac <__gesf2+0x4e>
    1aa4:	c7 01       	movw	r24, r14
    1aa6:	b8 01       	movw	r22, r16
    1aa8:	ce d1       	rcall	.+924    	; 0x1e46 <__fpcmp_parts_f>
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <__gesf2+0x50>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	68 96       	adiw	r28, 0x18	; 24
    1ab0:	e6 e0       	ldi	r30, 0x06	; 6
    1ab2:	87 c2       	rjmp	.+1294   	; 0x1fc2 <__epilogue_restores__+0x18>

00001ab4 <__ltsf2>:
    1ab4:	a8 e1       	ldi	r26, 0x18	; 24
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	ef e5       	ldi	r30, 0x5F	; 95
    1aba:	fd e0       	ldi	r31, 0x0D	; 13
    1abc:	66 c2       	rjmp	.+1228   	; 0x1f8a <__prologue_saves__+0x18>
    1abe:	69 83       	std	Y+1, r22	; 0x01
    1ac0:	7a 83       	std	Y+2, r23	; 0x02
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
    1ac4:	9c 83       	std	Y+4, r25	; 0x04
    1ac6:	2d 83       	std	Y+5, r18	; 0x05
    1ac8:	3e 83       	std	Y+6, r19	; 0x06
    1aca:	4f 83       	std	Y+7, r20	; 0x07
    1acc:	58 87       	std	Y+8, r21	; 0x08
    1ace:	89 e0       	ldi	r24, 0x09	; 9
    1ad0:	e8 2e       	mov	r14, r24
    1ad2:	f1 2c       	mov	r15, r1
    1ad4:	ec 0e       	add	r14, r28
    1ad6:	fd 1e       	adc	r15, r29
    1ad8:	ce 01       	movw	r24, r28
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	b7 01       	movw	r22, r14
    1ade:	3b d1       	rcall	.+630    	; 0x1d56 <__unpack_f>
    1ae0:	8e 01       	movw	r16, r28
    1ae2:	0f 5e       	subi	r16, 0xEF	; 239
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	05 96       	adiw	r24, 0x05	; 5
    1aea:	b8 01       	movw	r22, r16
    1aec:	34 d1       	rcall	.+616    	; 0x1d56 <__unpack_f>
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	38 f0       	brcs	.+14     	; 0x1b02 <__ltsf2+0x4e>
    1af4:	89 89       	ldd	r24, Y+17	; 0x11
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	20 f0       	brcs	.+8      	; 0x1b02 <__ltsf2+0x4e>
    1afa:	c7 01       	movw	r24, r14
    1afc:	b8 01       	movw	r22, r16
    1afe:	a3 d1       	rcall	.+838    	; 0x1e46 <__fpcmp_parts_f>
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <__ltsf2+0x50>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	68 96       	adiw	r28, 0x18	; 24
    1b06:	e6 e0       	ldi	r30, 0x06	; 6
    1b08:	5c c2       	rjmp	.+1208   	; 0x1fc2 <__epilogue_restores__+0x18>

00001b0a <__fixsfsi>:
    1b0a:	ac e0       	ldi	r26, 0x0C	; 12
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ea e8       	ldi	r30, 0x8A	; 138
    1b10:	fd e0       	ldi	r31, 0x0D	; 13
    1b12:	3f c2       	rjmp	.+1150   	; 0x1f92 <__prologue_saves__+0x20>
    1b14:	69 83       	std	Y+1, r22	; 0x01
    1b16:	7a 83       	std	Y+2, r23	; 0x02
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	be 01       	movw	r22, r28
    1b22:	6b 5f       	subi	r22, 0xFB	; 251
    1b24:	7f 4f       	sbci	r23, 0xFF	; 255
    1b26:	17 d1       	rcall	.+558    	; 0x1d56 <__unpack_f>
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	82 30       	cpi	r24, 0x02	; 2
    1b2c:	61 f1       	breq	.+88     	; 0x1b86 <__fixsfsi+0x7c>
    1b2e:	82 30       	cpi	r24, 0x02	; 2
    1b30:	50 f1       	brcs	.+84     	; 0x1b86 <__fixsfsi+0x7c>
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	21 f4       	brne	.+8      	; 0x1b3e <__fixsfsi+0x34>
    1b36:	8e 81       	ldd	r24, Y+6	; 0x06
    1b38:	88 23       	and	r24, r24
    1b3a:	51 f1       	breq	.+84     	; 0x1b90 <__fixsfsi+0x86>
    1b3c:	2e c0       	rjmp	.+92     	; 0x1b9a <__fixsfsi+0x90>
    1b3e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b40:	38 85       	ldd	r19, Y+8	; 0x08
    1b42:	37 fd       	sbrc	r19, 7
    1b44:	20 c0       	rjmp	.+64     	; 0x1b86 <__fixsfsi+0x7c>
    1b46:	6e 81       	ldd	r22, Y+6	; 0x06
    1b48:	2f 31       	cpi	r18, 0x1F	; 31
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	1c f0       	brlt	.+6      	; 0x1b54 <__fixsfsi+0x4a>
    1b4e:	66 23       	and	r22, r22
    1b50:	f9 f0       	breq	.+62     	; 0x1b90 <__fixsfsi+0x86>
    1b52:	23 c0       	rjmp	.+70     	; 0x1b9a <__fixsfsi+0x90>
    1b54:	8e e1       	ldi	r24, 0x1E	; 30
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	82 1b       	sub	r24, r18
    1b5a:	93 0b       	sbc	r25, r19
    1b5c:	29 85       	ldd	r18, Y+9	; 0x09
    1b5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b60:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b62:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <__fixsfsi+0x64>
    1b66:	56 95       	lsr	r21
    1b68:	47 95       	ror	r20
    1b6a:	37 95       	ror	r19
    1b6c:	27 95       	ror	r18
    1b6e:	8a 95       	dec	r24
    1b70:	d2 f7       	brpl	.-12     	; 0x1b66 <__fixsfsi+0x5c>
    1b72:	66 23       	and	r22, r22
    1b74:	b1 f0       	breq	.+44     	; 0x1ba2 <__fixsfsi+0x98>
    1b76:	50 95       	com	r21
    1b78:	40 95       	com	r20
    1b7a:	30 95       	com	r19
    1b7c:	21 95       	neg	r18
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	4f 4f       	sbci	r20, 0xFF	; 255
    1b82:	5f 4f       	sbci	r21, 0xFF	; 255
    1b84:	0e c0       	rjmp	.+28     	; 0x1ba2 <__fixsfsi+0x98>
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	09 c0       	rjmp	.+18     	; 0x1ba2 <__fixsfsi+0x98>
    1b90:	2f ef       	ldi	r18, 0xFF	; 255
    1b92:	3f ef       	ldi	r19, 0xFF	; 255
    1b94:	4f ef       	ldi	r20, 0xFF	; 255
    1b96:	5f e7       	ldi	r21, 0x7F	; 127
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <__fixsfsi+0x98>
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e8       	ldi	r21, 0x80	; 128
    1ba2:	b9 01       	movw	r22, r18
    1ba4:	ca 01       	movw	r24, r20
    1ba6:	2c 96       	adiw	r28, 0x0c	; 12
    1ba8:	e2 e0       	ldi	r30, 0x02	; 2
    1baa:	0f c2       	rjmp	.+1054   	; 0x1fca <__epilogue_restores__+0x20>

00001bac <__pack_f>:
    1bac:	df 92       	push	r13
    1bae:	ef 92       	push	r14
    1bb0:	ff 92       	push	r15
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	e4 80       	ldd	r14, Z+4	; 0x04
    1bba:	f5 80       	ldd	r15, Z+5	; 0x05
    1bbc:	06 81       	ldd	r16, Z+6	; 0x06
    1bbe:	17 81       	ldd	r17, Z+7	; 0x07
    1bc0:	d1 80       	ldd	r13, Z+1	; 0x01
    1bc2:	80 81       	ld	r24, Z
    1bc4:	82 30       	cpi	r24, 0x02	; 2
    1bc6:	48 f4       	brcc	.+18     	; 0x1bda <__pack_f+0x2e>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a0 e1       	ldi	r26, 0x10	; 16
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e8 2a       	or	r14, r24
    1bd2:	f9 2a       	or	r15, r25
    1bd4:	0a 2b       	or	r16, r26
    1bd6:	1b 2b       	or	r17, r27
    1bd8:	a5 c0       	rjmp	.+330    	; 0x1d24 <__pack_f+0x178>
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <__pack_f+0x34>
    1bde:	9f c0       	rjmp	.+318    	; 0x1d1e <__pack_f+0x172>
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	21 f4       	brne	.+8      	; 0x1bec <__pack_f+0x40>
    1be4:	ee 24       	eor	r14, r14
    1be6:	ff 24       	eor	r15, r15
    1be8:	87 01       	movw	r16, r14
    1bea:	05 c0       	rjmp	.+10     	; 0x1bf6 <__pack_f+0x4a>
    1bec:	e1 14       	cp	r14, r1
    1bee:	f1 04       	cpc	r15, r1
    1bf0:	01 05       	cpc	r16, r1
    1bf2:	11 05       	cpc	r17, r1
    1bf4:	19 f4       	brne	.+6      	; 0x1bfc <__pack_f+0x50>
    1bf6:	e0 e0       	ldi	r30, 0x00	; 0
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	96 c0       	rjmp	.+300    	; 0x1d28 <__pack_f+0x17c>
    1bfc:	62 81       	ldd	r22, Z+2	; 0x02
    1bfe:	73 81       	ldd	r23, Z+3	; 0x03
    1c00:	9f ef       	ldi	r25, 0xFF	; 255
    1c02:	62 38       	cpi	r22, 0x82	; 130
    1c04:	79 07       	cpc	r23, r25
    1c06:	0c f0       	brlt	.+2      	; 0x1c0a <__pack_f+0x5e>
    1c08:	5b c0       	rjmp	.+182    	; 0x1cc0 <__pack_f+0x114>
    1c0a:	22 e8       	ldi	r18, 0x82	; 130
    1c0c:	3f ef       	ldi	r19, 0xFF	; 255
    1c0e:	26 1b       	sub	r18, r22
    1c10:	37 0b       	sbc	r19, r23
    1c12:	2a 31       	cpi	r18, 0x1A	; 26
    1c14:	31 05       	cpc	r19, r1
    1c16:	2c f0       	brlt	.+10     	; 0x1c22 <__pack_f+0x76>
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	2a c0       	rjmp	.+84     	; 0x1c76 <__pack_f+0xca>
    1c22:	b8 01       	movw	r22, r16
    1c24:	a7 01       	movw	r20, r14
    1c26:	02 2e       	mov	r0, r18
    1c28:	04 c0       	rjmp	.+8      	; 0x1c32 <__pack_f+0x86>
    1c2a:	76 95       	lsr	r23
    1c2c:	67 95       	ror	r22
    1c2e:	57 95       	ror	r21
    1c30:	47 95       	ror	r20
    1c32:	0a 94       	dec	r0
    1c34:	d2 f7       	brpl	.-12     	; 0x1c2a <__pack_f+0x7e>
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a0 e0       	ldi	r26, 0x00	; 0
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <__pack_f+0x9c>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	aa 1f       	adc	r26, r26
    1c46:	bb 1f       	adc	r27, r27
    1c48:	2a 95       	dec	r18
    1c4a:	d2 f7       	brpl	.-12     	; 0x1c40 <__pack_f+0x94>
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	a1 09       	sbc	r26, r1
    1c50:	b1 09       	sbc	r27, r1
    1c52:	8e 21       	and	r24, r14
    1c54:	9f 21       	and	r25, r15
    1c56:	a0 23       	and	r26, r16
    1c58:	b1 23       	and	r27, r17
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	a1 05       	cpc	r26, r1
    1c5e:	b1 05       	cpc	r27, r1
    1c60:	21 f0       	breq	.+8      	; 0x1c6a <__pack_f+0xbe>
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	9a 01       	movw	r18, r20
    1c6c:	ab 01       	movw	r20, r22
    1c6e:	28 2b       	or	r18, r24
    1c70:	39 2b       	or	r19, r25
    1c72:	4a 2b       	or	r20, r26
    1c74:	5b 2b       	or	r21, r27
    1c76:	da 01       	movw	r26, r20
    1c78:	c9 01       	movw	r24, r18
    1c7a:	8f 77       	andi	r24, 0x7F	; 127
    1c7c:	90 70       	andi	r25, 0x00	; 0
    1c7e:	a0 70       	andi	r26, 0x00	; 0
    1c80:	b0 70       	andi	r27, 0x00	; 0
    1c82:	80 34       	cpi	r24, 0x40	; 64
    1c84:	91 05       	cpc	r25, r1
    1c86:	a1 05       	cpc	r26, r1
    1c88:	b1 05       	cpc	r27, r1
    1c8a:	39 f4       	brne	.+14     	; 0x1c9a <__pack_f+0xee>
    1c8c:	27 ff       	sbrs	r18, 7
    1c8e:	09 c0       	rjmp	.+18     	; 0x1ca2 <__pack_f+0xf6>
    1c90:	20 5c       	subi	r18, 0xC0	; 192
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	4f 4f       	sbci	r20, 0xFF	; 255
    1c96:	5f 4f       	sbci	r21, 0xFF	; 255
    1c98:	04 c0       	rjmp	.+8      	; 0x1ca2 <__pack_f+0xf6>
    1c9a:	21 5c       	subi	r18, 0xC1	; 193
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	4f 4f       	sbci	r20, 0xFF	; 255
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca2:	e0 e0       	ldi	r30, 0x00	; 0
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	20 30       	cpi	r18, 0x00	; 0
    1ca8:	a0 e0       	ldi	r26, 0x00	; 0
    1caa:	3a 07       	cpc	r19, r26
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	4a 07       	cpc	r20, r26
    1cb0:	a0 e4       	ldi	r26, 0x40	; 64
    1cb2:	5a 07       	cpc	r21, r26
    1cb4:	10 f0       	brcs	.+4      	; 0x1cba <__pack_f+0x10e>
    1cb6:	e1 e0       	ldi	r30, 0x01	; 1
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	79 01       	movw	r14, r18
    1cbc:	8a 01       	movw	r16, r20
    1cbe:	27 c0       	rjmp	.+78     	; 0x1d0e <__pack_f+0x162>
    1cc0:	60 38       	cpi	r22, 0x80	; 128
    1cc2:	71 05       	cpc	r23, r1
    1cc4:	64 f5       	brge	.+88     	; 0x1d1e <__pack_f+0x172>
    1cc6:	fb 01       	movw	r30, r22
    1cc8:	e1 58       	subi	r30, 0x81	; 129
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	d8 01       	movw	r26, r16
    1cce:	c7 01       	movw	r24, r14
    1cd0:	8f 77       	andi	r24, 0x7F	; 127
    1cd2:	90 70       	andi	r25, 0x00	; 0
    1cd4:	a0 70       	andi	r26, 0x00	; 0
    1cd6:	b0 70       	andi	r27, 0x00	; 0
    1cd8:	80 34       	cpi	r24, 0x40	; 64
    1cda:	91 05       	cpc	r25, r1
    1cdc:	a1 05       	cpc	r26, r1
    1cde:	b1 05       	cpc	r27, r1
    1ce0:	39 f4       	brne	.+14     	; 0x1cf0 <__pack_f+0x144>
    1ce2:	e7 fe       	sbrs	r14, 7
    1ce4:	0d c0       	rjmp	.+26     	; 0x1d00 <__pack_f+0x154>
    1ce6:	80 e4       	ldi	r24, 0x40	; 64
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a0 e0       	ldi	r26, 0x00	; 0
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <__pack_f+0x14c>
    1cf0:	8f e3       	ldi	r24, 0x3F	; 63
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a0 e0       	ldi	r26, 0x00	; 0
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e8 0e       	add	r14, r24
    1cfa:	f9 1e       	adc	r15, r25
    1cfc:	0a 1f       	adc	r16, r26
    1cfe:	1b 1f       	adc	r17, r27
    1d00:	17 ff       	sbrs	r17, 7
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <__pack_f+0x162>
    1d04:	16 95       	lsr	r17
    1d06:	07 95       	ror	r16
    1d08:	f7 94       	ror	r15
    1d0a:	e7 94       	ror	r14
    1d0c:	31 96       	adiw	r30, 0x01	; 1
    1d0e:	87 e0       	ldi	r24, 0x07	; 7
    1d10:	16 95       	lsr	r17
    1d12:	07 95       	ror	r16
    1d14:	f7 94       	ror	r15
    1d16:	e7 94       	ror	r14
    1d18:	8a 95       	dec	r24
    1d1a:	d1 f7       	brne	.-12     	; 0x1d10 <__pack_f+0x164>
    1d1c:	05 c0       	rjmp	.+10     	; 0x1d28 <__pack_f+0x17c>
    1d1e:	ee 24       	eor	r14, r14
    1d20:	ff 24       	eor	r15, r15
    1d22:	87 01       	movw	r16, r14
    1d24:	ef ef       	ldi	r30, 0xFF	; 255
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	6e 2f       	mov	r22, r30
    1d2a:	67 95       	ror	r22
    1d2c:	66 27       	eor	r22, r22
    1d2e:	67 95       	ror	r22
    1d30:	90 2f       	mov	r25, r16
    1d32:	9f 77       	andi	r25, 0x7F	; 127
    1d34:	d7 94       	ror	r13
    1d36:	dd 24       	eor	r13, r13
    1d38:	d7 94       	ror	r13
    1d3a:	8e 2f       	mov	r24, r30
    1d3c:	86 95       	lsr	r24
    1d3e:	49 2f       	mov	r20, r25
    1d40:	46 2b       	or	r20, r22
    1d42:	58 2f       	mov	r21, r24
    1d44:	5d 29       	or	r21, r13
    1d46:	b7 01       	movw	r22, r14
    1d48:	ca 01       	movw	r24, r20
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	08 95       	ret

00001d56 <__unpack_f>:
    1d56:	fc 01       	movw	r30, r24
    1d58:	db 01       	movw	r26, r22
    1d5a:	40 81       	ld	r20, Z
    1d5c:	51 81       	ldd	r21, Z+1	; 0x01
    1d5e:	22 81       	ldd	r18, Z+2	; 0x02
    1d60:	62 2f       	mov	r22, r18
    1d62:	6f 77       	andi	r22, 0x7F	; 127
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	22 1f       	adc	r18, r18
    1d68:	22 27       	eor	r18, r18
    1d6a:	22 1f       	adc	r18, r18
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	89 2f       	mov	r24, r25
    1d70:	88 0f       	add	r24, r24
    1d72:	82 2b       	or	r24, r18
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	99 1f       	adc	r25, r25
    1d7a:	99 27       	eor	r25, r25
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	11 96       	adiw	r26, 0x01	; 1
    1d80:	9c 93       	st	X, r25
    1d82:	11 97       	sbiw	r26, 0x01	; 1
    1d84:	21 15       	cp	r18, r1
    1d86:	31 05       	cpc	r19, r1
    1d88:	a9 f5       	brne	.+106    	; 0x1df4 <__unpack_f+0x9e>
    1d8a:	41 15       	cp	r20, r1
    1d8c:	51 05       	cpc	r21, r1
    1d8e:	61 05       	cpc	r22, r1
    1d90:	71 05       	cpc	r23, r1
    1d92:	11 f4       	brne	.+4      	; 0x1d98 <__unpack_f+0x42>
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	37 c0       	rjmp	.+110    	; 0x1e06 <__unpack_f+0xb0>
    1d98:	82 e8       	ldi	r24, 0x82	; 130
    1d9a:	9f ef       	ldi	r25, 0xFF	; 255
    1d9c:	13 96       	adiw	r26, 0x03	; 3
    1d9e:	9c 93       	st	X, r25
    1da0:	8e 93       	st	-X, r24
    1da2:	12 97       	sbiw	r26, 0x02	; 2
    1da4:	9a 01       	movw	r18, r20
    1da6:	ab 01       	movw	r20, r22
    1da8:	67 e0       	ldi	r22, 0x07	; 7
    1daa:	22 0f       	add	r18, r18
    1dac:	33 1f       	adc	r19, r19
    1dae:	44 1f       	adc	r20, r20
    1db0:	55 1f       	adc	r21, r21
    1db2:	6a 95       	dec	r22
    1db4:	d1 f7       	brne	.-12     	; 0x1daa <__unpack_f+0x54>
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	8c 93       	st	X, r24
    1dba:	0d c0       	rjmp	.+26     	; 0x1dd6 <__unpack_f+0x80>
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	44 1f       	adc	r20, r20
    1dc2:	55 1f       	adc	r21, r21
    1dc4:	12 96       	adiw	r26, 0x02	; 2
    1dc6:	8d 91       	ld	r24, X+
    1dc8:	9c 91       	ld	r25, X
    1dca:	13 97       	sbiw	r26, 0x03	; 3
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	13 96       	adiw	r26, 0x03	; 3
    1dd0:	9c 93       	st	X, r25
    1dd2:	8e 93       	st	-X, r24
    1dd4:	12 97       	sbiw	r26, 0x02	; 2
    1dd6:	20 30       	cpi	r18, 0x00	; 0
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	38 07       	cpc	r19, r24
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	48 07       	cpc	r20, r24
    1de0:	80 e4       	ldi	r24, 0x40	; 64
    1de2:	58 07       	cpc	r21, r24
    1de4:	58 f3       	brcs	.-42     	; 0x1dbc <__unpack_f+0x66>
    1de6:	14 96       	adiw	r26, 0x04	; 4
    1de8:	2d 93       	st	X+, r18
    1dea:	3d 93       	st	X+, r19
    1dec:	4d 93       	st	X+, r20
    1dee:	5c 93       	st	X, r21
    1df0:	17 97       	sbiw	r26, 0x07	; 7
    1df2:	08 95       	ret
    1df4:	2f 3f       	cpi	r18, 0xFF	; 255
    1df6:	31 05       	cpc	r19, r1
    1df8:	79 f4       	brne	.+30     	; 0x1e18 <__unpack_f+0xc2>
    1dfa:	41 15       	cp	r20, r1
    1dfc:	51 05       	cpc	r21, r1
    1dfe:	61 05       	cpc	r22, r1
    1e00:	71 05       	cpc	r23, r1
    1e02:	19 f4       	brne	.+6      	; 0x1e0a <__unpack_f+0xb4>
    1e04:	84 e0       	ldi	r24, 0x04	; 4
    1e06:	8c 93       	st	X, r24
    1e08:	08 95       	ret
    1e0a:	64 ff       	sbrs	r22, 4
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <__unpack_f+0xbe>
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	8c 93       	st	X, r24
    1e12:	12 c0       	rjmp	.+36     	; 0x1e38 <__unpack_f+0xe2>
    1e14:	1c 92       	st	X, r1
    1e16:	10 c0       	rjmp	.+32     	; 0x1e38 <__unpack_f+0xe2>
    1e18:	2f 57       	subi	r18, 0x7F	; 127
    1e1a:	30 40       	sbci	r19, 0x00	; 0
    1e1c:	13 96       	adiw	r26, 0x03	; 3
    1e1e:	3c 93       	st	X, r19
    1e20:	2e 93       	st	-X, r18
    1e22:	12 97       	sbiw	r26, 0x02	; 2
    1e24:	83 e0       	ldi	r24, 0x03	; 3
    1e26:	8c 93       	st	X, r24
    1e28:	87 e0       	ldi	r24, 0x07	; 7
    1e2a:	44 0f       	add	r20, r20
    1e2c:	55 1f       	adc	r21, r21
    1e2e:	66 1f       	adc	r22, r22
    1e30:	77 1f       	adc	r23, r23
    1e32:	8a 95       	dec	r24
    1e34:	d1 f7       	brne	.-12     	; 0x1e2a <__unpack_f+0xd4>
    1e36:	70 64       	ori	r23, 0x40	; 64
    1e38:	14 96       	adiw	r26, 0x04	; 4
    1e3a:	4d 93       	st	X+, r20
    1e3c:	5d 93       	st	X+, r21
    1e3e:	6d 93       	st	X+, r22
    1e40:	7c 93       	st	X, r23
    1e42:	17 97       	sbiw	r26, 0x07	; 7
    1e44:	08 95       	ret

00001e46 <__fpcmp_parts_f>:
    1e46:	1f 93       	push	r17
    1e48:	dc 01       	movw	r26, r24
    1e4a:	fb 01       	movw	r30, r22
    1e4c:	9c 91       	ld	r25, X
    1e4e:	92 30       	cpi	r25, 0x02	; 2
    1e50:	08 f4       	brcc	.+2      	; 0x1e54 <__fpcmp_parts_f+0xe>
    1e52:	47 c0       	rjmp	.+142    	; 0x1ee2 <__fpcmp_parts_f+0x9c>
    1e54:	80 81       	ld	r24, Z
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	08 f4       	brcc	.+2      	; 0x1e5c <__fpcmp_parts_f+0x16>
    1e5a:	43 c0       	rjmp	.+134    	; 0x1ee2 <__fpcmp_parts_f+0x9c>
    1e5c:	94 30       	cpi	r25, 0x04	; 4
    1e5e:	51 f4       	brne	.+20     	; 0x1e74 <__fpcmp_parts_f+0x2e>
    1e60:	11 96       	adiw	r26, 0x01	; 1
    1e62:	1c 91       	ld	r17, X
    1e64:	84 30       	cpi	r24, 0x04	; 4
    1e66:	99 f5       	brne	.+102    	; 0x1ece <__fpcmp_parts_f+0x88>
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	68 2f       	mov	r22, r24
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	61 1b       	sub	r22, r17
    1e70:	71 09       	sbc	r23, r1
    1e72:	3f c0       	rjmp	.+126    	; 0x1ef2 <__fpcmp_parts_f+0xac>
    1e74:	84 30       	cpi	r24, 0x04	; 4
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <__fpcmp_parts_f+0x3a>
    1e78:	92 30       	cpi	r25, 0x02	; 2
    1e7a:	31 f4       	brne	.+12     	; 0x1e88 <__fpcmp_parts_f+0x42>
    1e7c:	82 30       	cpi	r24, 0x02	; 2
    1e7e:	b9 f1       	breq	.+110    	; 0x1eee <__fpcmp_parts_f+0xa8>
    1e80:	81 81       	ldd	r24, Z+1	; 0x01
    1e82:	88 23       	and	r24, r24
    1e84:	89 f1       	breq	.+98     	; 0x1ee8 <__fpcmp_parts_f+0xa2>
    1e86:	2d c0       	rjmp	.+90     	; 0x1ee2 <__fpcmp_parts_f+0x9c>
    1e88:	11 96       	adiw	r26, 0x01	; 1
    1e8a:	1c 91       	ld	r17, X
    1e8c:	11 97       	sbiw	r26, 0x01	; 1
    1e8e:	82 30       	cpi	r24, 0x02	; 2
    1e90:	f1 f0       	breq	.+60     	; 0x1ece <__fpcmp_parts_f+0x88>
    1e92:	81 81       	ldd	r24, Z+1	; 0x01
    1e94:	18 17       	cp	r17, r24
    1e96:	d9 f4       	brne	.+54     	; 0x1ece <__fpcmp_parts_f+0x88>
    1e98:	12 96       	adiw	r26, 0x02	; 2
    1e9a:	2d 91       	ld	r18, X+
    1e9c:	3c 91       	ld	r19, X
    1e9e:	13 97       	sbiw	r26, 0x03	; 3
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	82 17       	cp	r24, r18
    1ea6:	93 07       	cpc	r25, r19
    1ea8:	94 f0       	brlt	.+36     	; 0x1ece <__fpcmp_parts_f+0x88>
    1eaa:	28 17       	cp	r18, r24
    1eac:	39 07       	cpc	r19, r25
    1eae:	bc f0       	brlt	.+46     	; 0x1ede <__fpcmp_parts_f+0x98>
    1eb0:	14 96       	adiw	r26, 0x04	; 4
    1eb2:	8d 91       	ld	r24, X+
    1eb4:	9d 91       	ld	r25, X+
    1eb6:	0d 90       	ld	r0, X+
    1eb8:	bc 91       	ld	r27, X
    1eba:	a0 2d       	mov	r26, r0
    1ebc:	24 81       	ldd	r18, Z+4	; 0x04
    1ebe:	35 81       	ldd	r19, Z+5	; 0x05
    1ec0:	46 81       	ldd	r20, Z+6	; 0x06
    1ec2:	57 81       	ldd	r21, Z+7	; 0x07
    1ec4:	28 17       	cp	r18, r24
    1ec6:	39 07       	cpc	r19, r25
    1ec8:	4a 07       	cpc	r20, r26
    1eca:	5b 07       	cpc	r21, r27
    1ecc:	18 f4       	brcc	.+6      	; 0x1ed4 <__fpcmp_parts_f+0x8e>
    1ece:	11 23       	and	r17, r17
    1ed0:	41 f0       	breq	.+16     	; 0x1ee2 <__fpcmp_parts_f+0x9c>
    1ed2:	0a c0       	rjmp	.+20     	; 0x1ee8 <__fpcmp_parts_f+0xa2>
    1ed4:	82 17       	cp	r24, r18
    1ed6:	93 07       	cpc	r25, r19
    1ed8:	a4 07       	cpc	r26, r20
    1eda:	b5 07       	cpc	r27, r21
    1edc:	40 f4       	brcc	.+16     	; 0x1eee <__fpcmp_parts_f+0xa8>
    1ede:	11 23       	and	r17, r17
    1ee0:	19 f0       	breq	.+6      	; 0x1ee8 <__fpcmp_parts_f+0xa2>
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <__fpcmp_parts_f+0xac>
    1ee8:	6f ef       	ldi	r22, 0xFF	; 255
    1eea:	7f ef       	ldi	r23, 0xFF	; 255
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <__fpcmp_parts_f+0xac>
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	1f 91       	pop	r17
    1ef6:	08 95       	ret

00001ef8 <__divmodsi4>:
    1ef8:	97 fb       	bst	r25, 7
    1efa:	09 2e       	mov	r0, r25
    1efc:	05 26       	eor	r0, r21
    1efe:	0e d0       	rcall	.+28     	; 0x1f1c <__divmodsi4_neg1>
    1f00:	57 fd       	sbrc	r21, 7
    1f02:	04 d0       	rcall	.+8      	; 0x1f0c <__divmodsi4_neg2>
    1f04:	14 d0       	rcall	.+40     	; 0x1f2e <__udivmodsi4>
    1f06:	0a d0       	rcall	.+20     	; 0x1f1c <__divmodsi4_neg1>
    1f08:	00 1c       	adc	r0, r0
    1f0a:	38 f4       	brcc	.+14     	; 0x1f1a <__divmodsi4_exit>

00001f0c <__divmodsi4_neg2>:
    1f0c:	50 95       	com	r21
    1f0e:	40 95       	com	r20
    1f10:	30 95       	com	r19
    1f12:	21 95       	neg	r18
    1f14:	3f 4f       	sbci	r19, 0xFF	; 255
    1f16:	4f 4f       	sbci	r20, 0xFF	; 255
    1f18:	5f 4f       	sbci	r21, 0xFF	; 255

00001f1a <__divmodsi4_exit>:
    1f1a:	08 95       	ret

00001f1c <__divmodsi4_neg1>:
    1f1c:	f6 f7       	brtc	.-4      	; 0x1f1a <__divmodsi4_exit>
    1f1e:	90 95       	com	r25
    1f20:	80 95       	com	r24
    1f22:	70 95       	com	r23
    1f24:	61 95       	neg	r22
    1f26:	7f 4f       	sbci	r23, 0xFF	; 255
    1f28:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	08 95       	ret

00001f2e <__udivmodsi4>:
    1f2e:	a1 e2       	ldi	r26, 0x21	; 33
    1f30:	1a 2e       	mov	r1, r26
    1f32:	aa 1b       	sub	r26, r26
    1f34:	bb 1b       	sub	r27, r27
    1f36:	fd 01       	movw	r30, r26
    1f38:	0d c0       	rjmp	.+26     	; 0x1f54 <__udivmodsi4_ep>

00001f3a <__udivmodsi4_loop>:
    1f3a:	aa 1f       	adc	r26, r26
    1f3c:	bb 1f       	adc	r27, r27
    1f3e:	ee 1f       	adc	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	a2 17       	cp	r26, r18
    1f44:	b3 07       	cpc	r27, r19
    1f46:	e4 07       	cpc	r30, r20
    1f48:	f5 07       	cpc	r31, r21
    1f4a:	20 f0       	brcs	.+8      	; 0x1f54 <__udivmodsi4_ep>
    1f4c:	a2 1b       	sub	r26, r18
    1f4e:	b3 0b       	sbc	r27, r19
    1f50:	e4 0b       	sbc	r30, r20
    1f52:	f5 0b       	sbc	r31, r21

00001f54 <__udivmodsi4_ep>:
    1f54:	66 1f       	adc	r22, r22
    1f56:	77 1f       	adc	r23, r23
    1f58:	88 1f       	adc	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	1a 94       	dec	r1
    1f5e:	69 f7       	brne	.-38     	; 0x1f3a <__udivmodsi4_loop>
    1f60:	60 95       	com	r22
    1f62:	70 95       	com	r23
    1f64:	80 95       	com	r24
    1f66:	90 95       	com	r25
    1f68:	9b 01       	movw	r18, r22
    1f6a:	ac 01       	movw	r20, r24
    1f6c:	bd 01       	movw	r22, r26
    1f6e:	cf 01       	movw	r24, r30
    1f70:	08 95       	ret

00001f72 <__prologue_saves__>:
    1f72:	2f 92       	push	r2
    1f74:	3f 92       	push	r3
    1f76:	4f 92       	push	r4
    1f78:	5f 92       	push	r5
    1f7a:	6f 92       	push	r6
    1f7c:	7f 92       	push	r7
    1f7e:	8f 92       	push	r8
    1f80:	9f 92       	push	r9
    1f82:	af 92       	push	r10
    1f84:	bf 92       	push	r11
    1f86:	cf 92       	push	r12
    1f88:	df 92       	push	r13
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	ca 1b       	sub	r28, r26
    1f9c:	db 0b       	sbc	r29, r27
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	09 94       	ijmp

00001faa <__epilogue_restores__>:
    1faa:	2a 88       	ldd	r2, Y+18	; 0x12
    1fac:	39 88       	ldd	r3, Y+17	; 0x11
    1fae:	48 88       	ldd	r4, Y+16	; 0x10
    1fb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fba:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fbc:	b9 84       	ldd	r11, Y+9	; 0x09
    1fbe:	c8 84       	ldd	r12, Y+8	; 0x08
    1fc0:	df 80       	ldd	r13, Y+7	; 0x07
    1fc2:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc4:	fd 80       	ldd	r15, Y+5	; 0x05
    1fc6:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc8:	1b 81       	ldd	r17, Y+3	; 0x03
    1fca:	aa 81       	ldd	r26, Y+2	; 0x02
    1fcc:	b9 81       	ldd	r27, Y+1	; 0x01
    1fce:	ce 0f       	add	r28, r30
    1fd0:	d1 1d       	adc	r29, r1
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	ed 01       	movw	r28, r26
    1fde:	08 95       	ret

00001fe0 <memcpy>:
    1fe0:	fb 01       	movw	r30, r22
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <memcpy+0xa>
    1fe6:	01 90       	ld	r0, Z+
    1fe8:	0d 92       	st	X+, r0
    1fea:	41 50       	subi	r20, 0x01	; 1
    1fec:	50 40       	sbci	r21, 0x00	; 0
    1fee:	d8 f7       	brcc	.-10     	; 0x1fe6 <memcpy+0x6>
    1ff0:	08 95       	ret

00001ff2 <_exit>:
    1ff2:	f8 94       	cli

00001ff4 <__stop_program>:
    1ff4:	ff cf       	rjmp	.-2      	; 0x1ff4 <__stop_program>
