	.file	"uip_arp.c"
__SREG__ = 0x3f
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__CCP__  = 0x34
__tmp_reg__ = 0
__zero_reg__ = 1
	.data
	.type	broadcast_ethaddr, @object
	.size	broadcast_ethaddr, 6
broadcast_ethaddr:
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.type	broadcast_ipaddr, @object
	.size	broadcast_ipaddr, 4
broadcast_ipaddr:
	.word	-1
	.word	-1
	.text
.global	uip_arp_init
	.type	uip_arp_init, @function
uip_arp_init:
	push r29
	push r28
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 0 */
	sts i,__zero_reg__
	rjmp .L2
.L3:
	lds r24,i
	mov r20,r24
	ldi r21,lo8(0)
	movw r24,r20
	lsl r24
	rol r25
	movw r18,r24
	lsl r18
	rol r19
	lsl r18
	rol r19
	add r24,r18
	adc r25,r19
	add r24,r20
	adc r25,r21
	subi r24,lo8(-(arp_table))
	sbci r25,hi8(-(arp_table))
	ldi r22,lo8(0)
	ldi r23,hi8(0)
	ldi r20,lo8(4)
	ldi r21,hi8(4)
	call memset
	lds r24,i
	subi r24,lo8(-(1))
	sts i,r24
.L2:
	lds r24,i
	cpi r24,lo8(8)
	brlo .L3
/* epilogue start */
	pop r28
	pop r29
	ret
	.size	uip_arp_init, .-uip_arp_init
.global	uip_arp_timer
	.type	uip_arp_timer, @function
uip_arp_timer:
	push r29
	push r28
	rcall .
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 2 */
	lds r24,arptime
	subi r24,lo8(-(1))
	sts arptime,r24
	sts i,__zero_reg__
	rjmp .L6
.L8:
	lds r24,i
	mov r20,r24
	ldi r21,lo8(0)
	movw r24,r20
	lsl r24
	rol r25
	movw r18,r24
	lsl r18
	rol r19
	lsl r18
	rol r19
	add r24,r18
	adc r25,r19
	add r24,r20
	adc r25,r21
	subi r24,lo8(-(arp_table))
	sbci r25,hi8(-(arp_table))
	std Y+2,r25
	std Y+1,r24
	ldd r30,Y+1
	ldd r31,Y+2
	ld r18,Z
	ldd r19,Z+1
	ldd r30,Y+1
	ldd r31,Y+2
	ldd r24,Z+2
	ldd r25,Z+3
	or r24,r18
	or r25,r19
	sbiw r24,0
	breq .L7
	lds r24,arptime
	mov r18,r24
	ldi r19,lo8(0)
	ldd r30,Y+1
	ldd r31,Y+2
	ldd r24,Z+10
	mov r24,r24
	ldi r25,lo8(0)
	movw r20,r18
	sub r20,r24
	sbc r21,r25
	movw r24,r20
	cpi r24,120
	cpc r25,__zero_reg__
	brlt .L7
	ldd r24,Y+1
	ldd r25,Y+2
	ldi r22,lo8(0)
	ldi r23,hi8(0)
	ldi r20,lo8(4)
	ldi r21,hi8(4)
	call memset
.L7:
	lds r24,i
	subi r24,lo8(-(1))
	sts i,r24
.L6:
	lds r24,i
	cpi r24,lo8(8)
	brsh .+2
	rjmp .L8
/* epilogue start */
	pop __tmp_reg__
	pop __tmp_reg__
	pop r28
	pop r29
	ret
	.size	uip_arp_timer, .-uip_arp_timer
	.type	uip_arp_update, @function
uip_arp_update:
	push r29
	push r28
	rcall .
	rcall .
	rcall .
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 6 */
	std Y+2,r25
	std Y+1,r24
	std Y+4,r23
	std Y+3,r22
	std Y+6,__zero_reg__
	std Y+5,__zero_reg__
	sts i,__zero_reg__
	rjmp .L11
.L14:
	lds r24,i
	mov r20,r24
	ldi r21,lo8(0)
	movw r24,r20
	lsl r24
	rol r25
	movw r18,r24
	lsl r18
	rol r19
	lsl r18
	rol r19
	add r24,r18
	adc r25,r19
	add r24,r20
	adc r25,r21
	movw r18,r24
	subi r18,lo8(-(arp_table))
	sbci r19,hi8(-(arp_table))
	std Y+6,r19
	std Y+5,r18
	ldd r30,Y+5
	ldd r31,Y+6
	ld r24,Z
	ldd r25,Z+1
	sbiw r24,0
	breq .L12
	ldd r30,Y+5
	ldd r31,Y+6
	ldd r24,Z+2
	ldd r25,Z+3
	sbiw r24,0
	breq .L12
	ldd r30,Y+1
	ldd r31,Y+2
	ld r18,Z
	ldd r19,Z+1
	ldd r30,Y+5
	ldd r31,Y+6
	ld r24,Z
	ldd r25,Z+1
	cp r18,r24
	cpc r19,r25
	brne .L12
	ldd r24,Y+1
	ldd r25,Y+2
	movw r30,r24
	adiw r30,2
	ld r18,Z
	ldd r19,Z+1
	ldd r30,Y+5
	ldd r31,Y+6
	ldd r24,Z+2
	ldd r25,Z+3
	cp r18,r24
	cpc r19,r25
	brne .L12
	ldd r24,Y+5
	ldd r25,Y+6
	adiw r24,4
	ldd r18,Y+3
	ldd r19,Y+4
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	lds r24,arptime
	ldd r30,Y+5
	ldd r31,Y+6
	std Z+10,r24
	rjmp .L23
.L12:
	lds r24,i
	subi r24,lo8(-(1))
	sts i,r24
.L11:
	lds r24,i
	cpi r24,lo8(8)
	brsh .+2
	rjmp .L14
	sts i,__zero_reg__
	rjmp .L15
.L18:
	lds r24,i
	mov r20,r24
	ldi r21,lo8(0)
	movw r24,r20
	lsl r24
	rol r25
	movw r18,r24
	lsl r18
	rol r19
	lsl r18
	rol r19
	add r24,r18
	adc r25,r19
	add r24,r20
	adc r25,r21
	movw r18,r24
	subi r18,lo8(-(arp_table))
	sbci r19,hi8(-(arp_table))
	std Y+6,r19
	std Y+5,r18
	ldd r30,Y+5
	ldd r31,Y+6
	ld r24,Z
	ldd r25,Z+1
	sbiw r24,0
	brne .L16
	ldd r30,Y+5
	ldd r31,Y+6
	ldd r24,Z+2
	ldd r25,Z+3
	sbiw r24,0
	breq .L17
.L16:
	lds r24,i
	subi r24,lo8(-(1))
	sts i,r24
.L15:
	lds r24,i
	cpi r24,lo8(8)
	brlo .L18
.L17:
	lds r24,i
	cpi r24,lo8(8)
	breq .+2
	rjmp .L19
	sts tmpage,__zero_reg__
	sts c,__zero_reg__
	sts i,__zero_reg__
	rjmp .L20
.L22:
	lds r24,i
	mov r20,r24
	ldi r21,lo8(0)
	movw r24,r20
	lsl r24
	rol r25
	movw r18,r24
	lsl r18
	rol r19
	lsl r18
	rol r19
	add r24,r18
	adc r25,r19
	add r24,r20
	adc r25,r21
	movw r18,r24
	subi r18,lo8(-(arp_table))
	sbci r19,hi8(-(arp_table))
	std Y+6,r19
	std Y+5,r18
	lds r24,arptime
	mov r18,r24
	ldi r19,lo8(0)
	ldd r30,Y+5
	ldd r31,Y+6
	ldd r24,Z+10
	mov r24,r24
	ldi r25,lo8(0)
	sub r18,r24
	sbc r19,r25
	lds r24,tmpage
	mov r24,r24
	ldi r25,lo8(0)
	cp r24,r18
	cpc r25,r19
	brge .L21
	lds r25,arptime
	ldd r30,Y+5
	ldd r31,Y+6
	ldd r24,Z+10
	mov r31,r25
	sub r31,r24
	mov r24,r31
	sts tmpage,r24
	lds r24,i
	sts c,r24
.L21:
	lds r24,i
	subi r24,lo8(-(1))
	sts i,r24
.L20:
	lds r24,i
	cpi r24,lo8(8)
	brlo .L22
	lds r24,c
	sts i,r24
	lds r24,i
	mov r20,r24
	ldi r21,lo8(0)
	movw r24,r20
	lsl r24
	rol r25
	movw r18,r24
	lsl r18
	rol r19
	lsl r18
	rol r19
	add r24,r18
	adc r25,r19
	add r24,r20
	adc r25,r21
	movw r18,r24
	subi r18,lo8(-(arp_table))
	sbci r19,hi8(-(arp_table))
	std Y+6,r19
	std Y+5,r18
.L19:
	ldd r24,Y+5
	ldd r25,Y+6
	ldd r18,Y+1
	ldd r19,Y+2
	movw r22,r18
	ldi r20,lo8(4)
	ldi r21,hi8(4)
	call memcpy
	ldd r24,Y+5
	ldd r25,Y+6
	adiw r24,4
	ldd r18,Y+3
	ldd r19,Y+4
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	lds r24,arptime
	ldd r30,Y+5
	ldd r31,Y+6
	std Z+10,r24
.L23:
/* epilogue start */
	adiw r28,6
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r28
	pop r29
	ret
	.size	uip_arp_update, .-uip_arp_update
.global	uip_arp_ipin
	.type	uip_arp_ipin, @function
uip_arp_ipin:
	push r29
	push r28
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 0 */
	ldi r24,lo8(uip_stacks+4)
	ldi r25,hi8(uip_stacks+4)
	sts (uip_stack)+1,r25
	sts uip_stack,r24
	ldi r30,lo8(uip_buf+26)
	ldi r31,hi8(uip_buf+26)
	ld r18,Z
	ldd r19,Z+1
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld __tmp_reg__,Z+
	ld r31,Z
	mov r30,__tmp_reg__
	ld r24,Z
	ldd r25,Z+1
	eor r18,r24
	eor r19,r25
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ldd __tmp_reg__,Z+2
	ldd r31,Z+3
	mov r30,__tmp_reg__
	ld r24,Z
	ldd r25,Z+1
	and r24,r18
	and r25,r19
	sbiw r24,0
	brne .L26
	ldi r30,lo8(uip_buf+28)
	ldi r31,hi8(uip_buf+28)
	ld r18,Z
	ldd r19,Z+1
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	adiw r30,2
	ld r24,Z
	ldd r25,Z+1
	eor r18,r24
	eor r19,r25
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ldd r24,Z+2
	ldd r25,Z+3
	movw r30,r24
	adiw r30,2
	ld r24,Z
	ldd r25,Z+1
	and r24,r18
	and r25,r19
	sbiw r24,0
	brne .L26
	ldi r24,lo8(uip_buf+26)
	ldi r25,hi8(uip_buf+26)
	ldi r18,lo8(uip_buf+6)
	ldi r19,hi8(uip_buf+6)
	movw r22,r18
	call uip_arp_update
.L26:
/* epilogue start */
	pop r28
	pop r29
	ret
	.size	uip_arp_ipin, .-uip_arp_ipin
.global	uip_arp_arpin
	.type	uip_arp_arpin, @function
uip_arp_arpin:
	push r29
	push r28
	rcall .
	rcall .
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 4 */
	lds r24,uip_len
	lds r25,(uip_len)+1
	cpi r24,42
	cpc r25,__zero_reg__
	brsh .L28
	sts (uip_len)+1,__zero_reg__
	sts uip_len,__zero_reg__
	rjmp .L36
.L28:
	sts (uip_len)+1,__zero_reg__
	sts uip_len,__zero_reg__
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldd r24,Z+20
	ldd r25,Z+21
	std Y+4,r25
	std Y+3,r24
	ldd r24,Y+3
	ldd r25,Y+4
	ldi r18,hi8(256)
	cpi r24,lo8(256)
	cpc r25,r18
	breq .L31
	ldd r24,Y+3
	ldd r25,Y+4
	ldi r18,hi8(512)
	cpi r24,lo8(512)
	cpc r25,r18
	brne .+2
	rjmp .L32
	rjmp .L36
.L31:
	ldi r30,lo8(uip_buf+38)
	ldi r31,hi8(uip_buf+38)
	ld r18,Z
	ldd r19,Z+1
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld __tmp_reg__,Z+
	ld r31,Z
	mov r30,__tmp_reg__
	ld r24,Z
	ldd r25,Z+1
	cp r18,r24
	cpc r19,r25
	breq .+2
	rjmp .L36
	ldi r30,lo8(uip_buf+40)
	ldi r31,hi8(uip_buf+40)
	ld r18,Z
	ldd r19,Z+1
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	adiw r30,2
	ld r24,Z
	ldd r25,Z+1
	cp r18,r24
	cpc r19,r25
	breq .+2
	rjmp .L36
	ldi r24,lo8(uip_buf+28)
	ldi r25,hi8(uip_buf+28)
	ldi r18,lo8(uip_buf+22)
	ldi r19,hi8(uip_buf+22)
	movw r22,r18
	call uip_arp_update
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(512)
	ldi r25,hi8(512)
	std Z+21,r25
	std Z+20,r24
	ldi r24,lo8(uip_buf+32)
	ldi r25,hi8(uip_buf+32)
	ldi r18,lo8(uip_buf+22)
	ldi r19,hi8(uip_buf+22)
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	ldi r24,lo8(uip_buf+22)
	ldi r25,hi8(uip_buf+22)
	ldi r18,lo8(uip_ethaddr)
	ldi r19,hi8(uip_ethaddr)
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	ldi r24,lo8(uip_buf+6)
	ldi r25,hi8(uip_buf+6)
	ldi r18,lo8(uip_ethaddr)
	ldi r19,hi8(uip_ethaddr)
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	ldi r24,lo8(uip_buf)
	ldi r25,hi8(uip_buf)
	ldi r18,lo8(uip_buf+32)
	ldi r19,hi8(uip_buf+32)
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	std Y+2,__zero_reg__
	rjmp .L34
.L35:
	ldd r24,Y+2
	mov r24,r24
	ldi r25,lo8(0)
	adiw r24,38
	movw r30,r24
	subi r30,lo8(-(uip_buf))
	sbci r31,hi8(-(uip_buf))
	ld r24,Z
	std Y+1,r24
	ldd r24,Y+2
	mov r24,r24
	ldi r25,lo8(0)
	adiw r24,38
	movw r26,r24
	subi r26,lo8(-(uip_buf))
	sbci r27,hi8(-(uip_buf))
	ldd r24,Y+2
	mov r24,r24
	ldi r25,lo8(0)
	adiw r24,28
	movw r30,r24
	subi r30,lo8(-(uip_buf))
	sbci r31,hi8(-(uip_buf))
	ld r24,Z
	st X,r24
	ldd r24,Y+2
	mov r24,r24
	ldi r25,lo8(0)
	adiw r24,28
	movw r30,r24
	subi r30,lo8(-(uip_buf))
	sbci r31,hi8(-(uip_buf))
	ldd r24,Y+1
	st Z,r24
	ldd r24,Y+2
	subi r24,lo8(-(1))
	std Y+2,r24
.L34:
	ldd r24,Y+2
	cpi r24,lo8(4)
	brlo .L35
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(1544)
	ldi r25,hi8(1544)
	std Z+13,r25
	std Z+12,r24
	ldi r24,lo8(42)
	ldi r25,hi8(42)
	sts (uip_len)+1,r25
	sts uip_len,r24
	rjmp .L36
.L32:
	ldi r30,lo8(uip_buf+38)
	ldi r31,hi8(uip_buf+38)
	ld r18,Z
	ldd r19,Z+1
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld __tmp_reg__,Z+
	ld r31,Z
	mov r30,__tmp_reg__
	ld r24,Z
	ldd r25,Z+1
	cp r18,r24
	cpc r19,r25
	brne .L36
	ldi r30,lo8(uip_buf+40)
	ldi r31,hi8(uip_buf+40)
	ld r18,Z
	ldd r19,Z+1
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	adiw r30,2
	ld r24,Z
	ldd r25,Z+1
	cp r18,r24
	cpc r19,r25
	brne .L36
	ldi r24,lo8(uip_buf+28)
	ldi r25,hi8(uip_buf+28)
	ldi r18,lo8(uip_buf+22)
	ldi r19,hi8(uip_buf+22)
	movw r22,r18
	call uip_arp_update
.L36:
/* epilogue start */
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop r28
	pop r29
	ret
	.size	uip_arp_arpin, .-uip_arp_arpin
.global	uip_arp_out
	.type	uip_arp_out, @function
uip_arp_out:
	push r29
	push r28
	rcall .
	push __tmp_reg__
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 3 */
	ldi r30,lo8(uip_buf+30)
	ldi r31,hi8(uip_buf+30)
	ld r24,Z
	cpi r24,lo8(-32)
	brlo .L38
	ldi r30,lo8(uip_buf+30)
	ldi r31,hi8(uip_buf+30)
	ld r24,Z
	cpi r24,lo8(-16)
	brsh .L38
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(1)
	st Z,r24
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	std Z+1,__zero_reg__
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(94)
	std Z+2,r24
	ldi r26,lo8(uip_buf)
	ldi r27,hi8(uip_buf)
	ldi r30,lo8(uip_buf+31)
	ldi r31,hi8(uip_buf+31)
	ld r24,Z
	andi r24,lo8(127)
	adiw r26,3
	st X,r24
	ldi r26,lo8(uip_buf)
	ldi r27,hi8(uip_buf)
	ldi r30,lo8(uip_buf+32)
	ldi r31,hi8(uip_buf+32)
	ld r24,Z
	adiw r26,4
	st X,r24
	ldi r26,lo8(uip_buf)
	ldi r27,hi8(uip_buf)
	ldi r30,lo8(uip_buf+33)
	ldi r31,hi8(uip_buf+33)
	ld r24,Z
	adiw r26,5
	st X,r24
	sbiw r26,5
	rjmp .L39
.L38:
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldd r20,Z+30
	ldd r21,Z+31
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld __tmp_reg__,Z+
	ld r31,Z
	mov r30,__tmp_reg__
	ld r18,Z
	ldd r19,Z+1
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ldd __tmp_reg__,Z+2
	ldd r31,Z+3
	mov r30,__tmp_reg__
	ld r24,Z
	ldd r25,Z+1
	com r24
	com r25
	or r24,r18
	or r25,r19
	cp r20,r24
	cpc r21,r25
	brne .L40
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldd r20,Z+32
	ldd r21,Z+33
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld __tmp_reg__,Z+
	ld r31,Z
	mov r30,__tmp_reg__
	ldd r18,Z+2
	ldd r19,Z+3
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ldd __tmp_reg__,Z+2
	ldd r31,Z+3
	mov r30,__tmp_reg__
	ldd r24,Z+2
	ldd r25,Z+3
	com r24
	com r25
	or r24,r18
	or r25,r19
	cp r20,r24
	cpc r21,r25
	breq .L41
.L40:
	ldi r30,lo8(uip_buf+30)
	ldi r31,hi8(uip_buf+30)
	ld r18,Z
	ldd r19,Z+1
	ldi r30,lo8(broadcast_ipaddr)
	ldi r31,hi8(broadcast_ipaddr)
	ld r24,Z
	ldd r25,Z+1
	cp r18,r24
	cpc r19,r25
	brne .L42
	ldi r30,lo8(uip_buf+32)
	ldi r31,hi8(uip_buf+32)
	ld r18,Z
	ldd r19,Z+1
	ldi r30,lo8(broadcast_ipaddr+2)
	ldi r31,hi8(broadcast_ipaddr+2)
	ld r24,Z
	ldd r25,Z+1
	cp r18,r24
	cpc r19,r25
	brne .L42
.L41:
	ldi r24,lo8(uip_buf)
	ldi r25,hi8(uip_buf)
	ldi r18,lo8(broadcast_ethaddr)
	ldi r19,hi8(broadcast_ethaddr)
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	rjmp .L39
.L42:
	ldi r30,lo8(uip_buf+30)
	ldi r31,hi8(uip_buf+30)
	ld r18,Z
	ldd r19,Z+1
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld __tmp_reg__,Z+
	ld r31,Z
	mov r30,__tmp_reg__
	ld r24,Z
	ldd r25,Z+1
	eor r18,r24
	eor r19,r25
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ldd __tmp_reg__,Z+2
	ldd r31,Z+3
	mov r30,__tmp_reg__
	ld r24,Z
	ldd r25,Z+1
	and r24,r18
	and r25,r19
	sbiw r24,0
	brne .L43
	ldi r30,lo8(uip_buf+32)
	ldi r31,hi8(uip_buf+32)
	ld r18,Z
	ldd r19,Z+1
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	adiw r30,2
	ld r24,Z
	ldd r25,Z+1
	eor r18,r24
	eor r19,r25
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ldd r24,Z+2
	ldd r25,Z+3
	movw r30,r24
	adiw r30,2
	ld r24,Z
	ldd r25,Z+1
	and r24,r18
	and r25,r19
	sbiw r24,0
	breq .L44
.L43:
	lds r24,uip_draddr
	lds r25,(uip_draddr)+1
	sts (ipaddr)+1,r25
	sts ipaddr,r24
	ldi r26,lo8(ipaddr+2)
	ldi r27,hi8(ipaddr+2)
	ldi r30,lo8(uip_draddr+2)
	ldi r31,hi8(uip_draddr+2)
	ld r24,Z
	ldd r25,Z+1
	adiw r26,1
	st X,r25
	st -X,r24
	rjmp .L45
.L44:
	ldi r30,lo8(uip_buf+30)
	ldi r31,hi8(uip_buf+30)
	ld r24,Z
	ldd r25,Z+1
	sts (ipaddr)+1,r25
	sts ipaddr,r24
	ldi r26,lo8(ipaddr+2)
	ldi r27,hi8(ipaddr+2)
	ldi r30,lo8(uip_buf+32)
	ldi r31,hi8(uip_buf+32)
	ld r24,Z
	ldd r25,Z+1
	st X+,r24
	st X,r25
.L45:
	ldi r24,lo8(ipaddr)
	ldi r25,hi8(ipaddr)
	call uip_arp_lookup
	std Y+2,r25
	std Y+1,r24
	ldd r24,Y+1
	ldd r25,Y+2
	sbiw r24,0
	breq .+2
	rjmp .L46
	ldi r24,lo8(uip_buf)
	ldi r25,hi8(uip_buf)
	ldi r22,lo8(255)
	ldi r23,hi8(255)
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memset
	ldi r24,lo8(uip_buf+32)
	ldi r25,hi8(uip_buf+32)
	ldi r22,lo8(0)
	ldi r23,hi8(0)
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memset
	ldi r24,lo8(uip_buf+6)
	ldi r25,hi8(uip_buf+6)
	ldi r18,lo8(uip_ethaddr)
	ldi r19,hi8(uip_ethaddr)
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	ldi r24,lo8(uip_buf+22)
	ldi r25,hi8(uip_buf+22)
	ldi r18,lo8(uip_ethaddr)
	ldi r19,hi8(uip_ethaddr)
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	ldi r30,lo8(uip_buf+38)
	ldi r31,hi8(uip_buf+38)
	lds r24,ipaddr
	lds r25,(ipaddr)+1
	std Z+1,r25
	st Z,r24
	ldi r26,lo8(uip_buf+40)
	ldi r27,hi8(uip_buf+40)
	ldi r30,lo8(ipaddr+2)
	ldi r31,hi8(ipaddr+2)
	ld r24,Z
	ldd r25,Z+1
	st X+,r24
	st X,r25
	ldi r26,lo8(uip_buf+28)
	ldi r27,hi8(uip_buf+28)
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld __tmp_reg__,Z+
	ld r31,Z
	mov r30,__tmp_reg__
	ld r24,Z
	ldd r25,Z+1
	st X+,r24
	st X,r25
	ldi r26,lo8(uip_buf+30)
	ldi r27,hi8(uip_buf+30)
	lds r30,uip_stack
	lds r31,(uip_stack)+1
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	adiw r30,2
	ld r24,Z
	ldd r25,Z+1
	adiw r26,1
	st X,r25
	st -X,r24
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(256)
	ldi r25,hi8(256)
	std Z+21,r25
	std Z+20,r24
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(256)
	ldi r25,hi8(256)
	std Z+15,r25
	std Z+14,r24
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(8)
	ldi r25,hi8(8)
	std Z+17,r25
	std Z+16,r24
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(6)
	std Z+18,r24
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(4)
	std Z+19,r24
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(1544)
	ldi r25,hi8(1544)
	std Z+13,r25
	std Z+12,r24
	ldi r24,lo8(42)
	ldi r25,hi8(42)
	sts (uip_len)+1,r25
	sts uip_len,r24
	ldi r24,lo8(1)
	std Y+3,r24
	rjmp .L47
.L46:
	ldd r24,Y+1
	ldd r25,Y+2
	movw r18,r24
	subi r18,lo8(-(4))
	sbci r19,hi8(-(4))
	ldi r24,lo8(uip_buf)
	ldi r25,hi8(uip_buf)
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
.L39:
	ldi r24,lo8(uip_buf+6)
	ldi r25,hi8(uip_buf+6)
	ldi r18,lo8(uip_ethaddr)
	ldi r19,hi8(uip_ethaddr)
	movw r22,r18
	ldi r20,lo8(6)
	ldi r21,hi8(6)
	call memcpy
	ldi r30,lo8(uip_buf)
	ldi r31,hi8(uip_buf)
	ldi r24,lo8(8)
	ldi r25,hi8(8)
	std Z+13,r25
	std Z+12,r24
	lds r24,uip_len
	lds r25,(uip_len)+1
	adiw r24,14
	sts (uip_len)+1,r25
	sts uip_len,r24
	std Y+3,__zero_reg__
.L47:
	ldd r24,Y+3
/* epilogue start */
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop r28
	pop r29
	ret
	.size	uip_arp_out, .-uip_arp_out
.global	uip_arp_lookup
	.type	uip_arp_lookup, @function
uip_arp_lookup:
	push r29
	push r28
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,7
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 7 */
	std Y+5,r25
	std Y+4,r24
	std Y+3,__zero_reg__
	rjmp .L50
.L53:
	ldd r24,Y+3
	mov r20,r24
	ldi r21,lo8(0)
	movw r24,r20
	lsl r24
	rol r25
	movw r18,r24
	lsl r18
	rol r19
	lsl r18
	rol r19
	add r24,r18
	adc r25,r19
	add r24,r20
	adc r25,r21
	subi r24,lo8(-(arp_table))
	sbci r25,hi8(-(arp_table))
	std Y+2,r25
	std Y+1,r24
	ldd r30,Y+4
	ldd r31,Y+5
	ld r18,Z
	ldd r19,Z+1
	ldd r30,Y+1
	ldd r31,Y+2
	ld r24,Z
	ldd r25,Z+1
	cp r18,r24
	cpc r19,r25
	brne .L51
	ldd r24,Y+4
	ldd r25,Y+5
	movw r30,r24
	adiw r30,2
	ld r18,Z
	ldd r19,Z+1
	ldd r24,Y+1
	ldd r25,Y+2
	movw r30,r24
	adiw r30,2
	ld r24,Z
	ldd r25,Z+1
	cp r18,r24
	cpc r19,r25
	brne .L51
	ldd r24,Y+1
	ldd r25,Y+2
	std Y+7,r25
	std Y+6,r24
	rjmp .L52
.L51:
	ldd r24,Y+3
	subi r24,lo8(-(1))
	std Y+3,r24
.L50:
	ldd r24,Y+3
	cpi r24,lo8(8)
	brlo .L53
	std Y+7,__zero_reg__
	std Y+6,__zero_reg__
.L52:
	ldd r24,Y+6
	ldd r25,Y+7
/* epilogue start */
	adiw r28,7
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r28
	pop r29
	ret
	.size	uip_arp_lookup, .-uip_arp_lookup
	.lcomm arp_table,88
	.lcomm ipaddr,4
	.lcomm i,1
	.lcomm c,1
	.lcomm arptime,1
	.lcomm tmpage,1
	.comm rfm12_status,2,1
.global __do_copy_data
.global __do_clear_bss
