
wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  00002b62  00002bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  0080014c  0080014c  00002ce2  2**0
                  ALLOC
  3 .stab         00003210  00000000  00000000  00002ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001452  00000000  00000000  00005ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007346  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001c9  00000000  00000000  000074e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000022af  00000000  00000000  000076af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001267  00000000  00000000  0000995e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000140d  00000000  00000000  0000abc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bfd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003c6  00000000  00000000  0000c194  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c9d  00000000  00000000  0000c55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  0000d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 06 	call	0xc94	; 0xc94 <main>
      8a:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2c_reset>:
 *  @return    0 = successful, else failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static uint8_t
i2c_reset (void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
  uint8_t    rtc = 0;
      9c:	19 82       	std	Y+1, r1	; 0x01
    {                                                                            // yes...
      rtc = I2C_ERROR_SDA_LOW;
    }
  }
#endif
  return rtc;
      9e:	89 81       	ldd	r24, Y+1	; 0x01
}
      a0:	0f 90       	pop	r0
      a2:	cf 91       	pop	r28
      a4:	df 91       	pop	r29
      a6:	08 95       	ret

000000a8 <i2c_master_init>:
 *  @return    TRUE if successful, FALSE, if not
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_init(void)
{
      a8:	df 93       	push	r29
      aa:	cf 93       	push	r28
      ac:	0f 92       	push	r0
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
  static uint8_t  already_called;
  uint8_t         rtc;

  if (! already_called)
      b2:	80 91 4c 01 	lds	r24, 0x014C
      b6:	88 23       	and	r24, r24
      b8:	71 f4       	brne	.+28     	; 0xd6 <i2c_master_init+0x2e>
  {
    rtc = i2c_reset ();                                                         // try to reset I2C bus
      ba:	0e 94 49 00 	call	0x92	; 0x92 <i2c_reset>
      be:	89 83       	std	Y+1, r24	; 0x01

    TWSR = 0;                                                                   // no prescaler
      c0:	e1 e2       	ldi	r30, 0x21	; 33
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	10 82       	st	Z, r1
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;                                            // must be > 10 for stable operation
      c6:	e0 e2       	ldi	r30, 0x20	; 32
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	8c e0       	ldi	r24, 0x0C	; 12
      cc:	80 83       	st	Z, r24
    already_called = 1;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 4c 01 	sts	0x014C, r24
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <i2c_master_init+0x30>
  }
  else
  {
    rtc = 0;
      d6:	19 82       	std	Y+1, r1	; 0x01
  }
  return rtc;
      d8:	89 81       	ldd	r24, Y+1	; 0x01
}
      da:	0f 90       	pop	r0
      dc:	cf 91       	pop	r28
      de:	df 91       	pop	r29
      e0:	08 95       	ret

000000e2 <i2c_master_start>:
 *  @return    1 = failed to access device, 0 = device accessible
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
unsigned char
i2c_master_start(uint8_t address, uint8_t * status_p)
{
      e2:	df 93       	push	r29
      e4:	cf 93       	push	r28
      e6:	00 d0       	rcall	.+0      	; 0xe8 <i2c_master_start+0x6>
      e8:	00 d0       	rcall	.+0      	; 0xea <i2c_master_start+0x8>
      ea:	0f 92       	push	r0
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	8a 83       	std	Y+2, r24	; 0x02
      f2:	7c 83       	std	Y+4, r23	; 0x04
      f4:	6b 83       	std	Y+3, r22	; 0x03
  uint8_t   twst;

  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);                                   // send START condition
      f6:	e6 e5       	ldi	r30, 0x56	; 86
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	84 ea       	ldi	r24, 0xA4	; 164
      fc:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;                                            // wait until transmission completed
      fe:	e6 e5       	ldi	r30, 0x56	; 86
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	88 23       	and	r24, r24
     106:	dc f7       	brge	.-10     	; 0xfe <i2c_master_start+0x1c>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits.
     108:	e1 e2       	ldi	r30, 0x21	; 33
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	88 7f       	andi	r24, 0xF8	; 248
     110:	89 83       	std	Y+1, r24	; 0x01

  if ((twst != TW_START) && (twst != TW_REP_START))
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	88 30       	cpi	r24, 0x08	; 8
     116:	51 f0       	breq	.+20     	; 0x12c <i2c_master_start+0x4a>
     118:	89 81       	ldd	r24, Y+1	; 0x01
     11a:	80 31       	cpi	r24, 0x10	; 16
     11c:	39 f0       	breq	.+14     	; 0x12c <i2c_master_start+0x4a>
  {
    *status_p = twst;                                                           // store status
     11e:	eb 81       	ldd	r30, Y+3	; 0x03
     120:	fc 81       	ldd	r31, Y+4	; 0x04
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	80 83       	st	Z, r24
    return 1;                                                                   // ERROR
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	8d 83       	std	Y+5, r24	; 0x05
     12a:	20 c0       	rjmp	.+64     	; 0x16c <i2c_master_start+0x8a>
  }

  TWDR = address;                                                               // send device address
     12c:	e3 e2       	ldi	r30, 0x23	; 35
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	8a 81       	ldd	r24, Y+2	; 0x02
     132:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     134:	e6 e5       	ldi	r30, 0x56	; 86
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	84 e8       	ldi	r24, 0x84	; 132
     13a:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED                                             // wail until transmission completed and ACK/NACK has been received
     13c:	e6 e5       	ldi	r30, 0x56	; 86
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	88 23       	and	r24, r24
     144:	dc f7       	brge	.-10     	; 0x13c <i2c_master_start+0x5a>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits.
     146:	e1 e2       	ldi	r30, 0x21	; 33
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	88 7f       	andi	r24, 0xF8	; 248
     14e:	89 83       	std	Y+1, r24	; 0x01

  if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	88 31       	cpi	r24, 0x18	; 24
     154:	51 f0       	breq	.+20     	; 0x16a <i2c_master_start+0x88>
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	80 34       	cpi	r24, 0x40	; 64
     15a:	39 f0       	breq	.+14     	; 0x16a <i2c_master_start+0x88>
  {
    *status_p = twst;                                                           // store status
     15c:	eb 81       	ldd	r30, Y+3	; 0x03
     15e:	fc 81       	ldd	r31, Y+4	; 0x04
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	80 83       	st	Z, r24
    return 1;                                                                   // ERROR
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	8d 83       	std	Y+5, r24	; 0x05
     168:	01 c0       	rjmp	.+2      	; 0x16c <i2c_master_start+0x8a>
  }

  return 0;                                                                     // OK
     16a:	1d 82       	std	Y+5, r1	; 0x05
     16c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     16e:	0f 90       	pop	r0
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	08 95       	ret

0000017e <i2c_master_start_wait>:
 *  @param    I2C address
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
i2c_master_start_wait (uint8_t address)
{
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	c6 56       	subi	r28, 0x66	; 102
     188:	d0 40       	sbci	r29, 0x00	; 0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
     194:	fe 01       	movw	r30, r28
     196:	ea 59       	subi	r30, 0x9A	; 154
     198:	ff 4f       	sbci	r31, 0xFF	; 255
     19a:	80 83       	st	Z, r24
  uint8_t   twst;

  while (1)
  {
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);                                 // send START condition
     19c:	e6 e5       	ldi	r30, 0x56	; 86
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	84 ea       	ldi	r24, 0xA4	; 164
     1a2:	80 83       	st	Z, r24
    WAIT_UNTIL_TRANSMISSION_COMPLETED;                                          // wait until transmission completed
     1a4:	e6 e5       	ldi	r30, 0x56	; 86
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 23       	and	r24, r24
     1ac:	dc f7       	brge	.-10     	; 0x1a4 <i2c_master_start_wait+0x26>
    twst = TW_STATUS & 0xF8;                                                    // check value of TWI Status Register. Mask prescaler bits.
     1ae:	e1 e2       	ldi	r30, 0x21	; 33
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	80 81       	ld	r24, Z
     1b4:	88 7f       	andi	r24, 0xF8	; 248
     1b6:	89 83       	std	Y+1, r24	; 0x01

    char s[100];

    if ((twst != TW_START) && (twst != TW_REP_START))
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	88 30       	cpi	r24, 0x08	; 8
     1bc:	29 f1       	breq	.+74     	; 0x208 <i2c_master_start_wait+0x8a>
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	80 31       	cpi	r24, 0x10	; 16
     1c2:	11 f1       	breq	.+68     	; 0x208 <i2c_master_start_wait+0x8a>
    {
        sprintf(s,"error cont1 : %d\r\n", twst);
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	28 2f       	mov	r18, r24
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <i2c_master_start_wait+0x4e>
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <i2c_master_start_wait+0x50>
     1ce:	00 d0       	rcall	.+0      	; 0x1d0 <i2c_master_start_wait+0x52>
     1d0:	ed b7       	in	r30, 0x3d	; 61
     1d2:	fe b7       	in	r31, 0x3e	; 62
     1d4:	31 96       	adiw	r30, 0x01	; 1
     1d6:	ce 01       	movw	r24, r28
     1d8:	02 96       	adiw	r24, 0x02	; 2
     1da:	91 83       	std	Z+1, r25	; 0x01
     1dc:	80 83       	st	Z, r24
     1de:	80 e6       	ldi	r24, 0x60	; 96
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	93 83       	std	Z+3, r25	; 0x03
     1e4:	82 83       	std	Z+2, r24	; 0x02
     1e6:	35 83       	std	Z+5, r19	; 0x05
     1e8:	24 83       	std	Z+4, r18	; 0x04
     1ea:	0e 94 0e 13 	call	0x261c	; 0x261c <sprintf>
     1ee:	8d b7       	in	r24, 0x3d	; 61
     1f0:	9e b7       	in	r25, 0x3e	; 62
     1f2:	06 96       	adiw	r24, 0x06	; 6
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	f8 94       	cli
     1f8:	9e bf       	out	0x3e, r25	; 62
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	8d bf       	out	0x3d, r24	; 61
        uartPuts(s);
     1fe:	ce 01       	movw	r24, r28
     200:	02 96       	adiw	r24, 0x02	; 2
     202:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
     206:	ca cf       	rjmp	.-108    	; 0x19c <i2c_master_start_wait+0x1e>
      continue;
    }

    TWDR = address;                                                             // send device address
     208:	a3 e2       	ldi	r26, 0x23	; 35
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	fe 01       	movw	r30, r28
     20e:	ea 59       	subi	r30, 0x9A	; 154
     210:	ff 4f       	sbci	r31, 0xFF	; 255
     212:	80 81       	ld	r24, Z
     214:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);
     216:	e6 e5       	ldi	r30, 0x56	; 86
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	84 e8       	ldi	r24, 0x84	; 132
     21c:	80 83       	st	Z, r24
    WAIT_UNTIL_TRANSMISSION_COMPLETED;                                          // wail until transmission completed
     21e:	e6 e5       	ldi	r30, 0x56	; 86
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	88 23       	and	r24, r24
     226:	dc f7       	brge	.-10     	; 0x21e <i2c_master_start_wait+0xa0>
    twst = TW_STATUS & 0xF8;                                                    // check value of TWI Status Register. Mask prescaler bits.
     228:	e1 e2       	ldi	r30, 0x21	; 33
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	88 7f       	andi	r24, 0xF8	; 248
     230:	89 83       	std	Y+1, r24	; 0x01

    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	80 32       	cpi	r24, 0x20	; 32
     236:	19 f0       	breq	.+6      	; 0x23e <i2c_master_start_wait+0xc0>
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	88 35       	cpi	r24, 0x58	; 88
     23c:	79 f5       	brne	.+94     	; 0x29c <i2c_master_start_wait+0x11e>
    {
      TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);                               // device busy, send stop condition to terminate write operation
     23e:	e6 e5       	ldi	r30, 0x56	; 86
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	84 e9       	ldi	r24, 0x94	; 148
     244:	80 83       	st	Z, r24
      WAIT_UNTIL_STOP_CONDITION_EXECUTED;                                       // wait until stop condition is executed and bus released
     246:	e6 e5       	ldi	r30, 0x56	; 86
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	88 2f       	mov	r24, r24
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	80 71       	andi	r24, 0x10	; 16
     252:	90 70       	andi	r25, 0x00	; 0
     254:	00 97       	sbiw	r24, 0x00	; 0
     256:	b9 f7       	brne	.-18     	; 0x246 <i2c_master_start_wait+0xc8>

      sprintf(s,"error cont2 : %d\r\n", twst);
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	28 2f       	mov	r18, r24
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	00 d0       	rcall	.+0      	; 0x260 <i2c_master_start_wait+0xe2>
     260:	00 d0       	rcall	.+0      	; 0x262 <i2c_master_start_wait+0xe4>
     262:	00 d0       	rcall	.+0      	; 0x264 <i2c_master_start_wait+0xe6>
     264:	ed b7       	in	r30, 0x3d	; 61
     266:	fe b7       	in	r31, 0x3e	; 62
     268:	31 96       	adiw	r30, 0x01	; 1
     26a:	ce 01       	movw	r24, r28
     26c:	02 96       	adiw	r24, 0x02	; 2
     26e:	91 83       	std	Z+1, r25	; 0x01
     270:	80 83       	st	Z, r24
     272:	83 e7       	ldi	r24, 0x73	; 115
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	93 83       	std	Z+3, r25	; 0x03
     278:	82 83       	std	Z+2, r24	; 0x02
     27a:	35 83       	std	Z+5, r19	; 0x05
     27c:	24 83       	std	Z+4, r18	; 0x04
     27e:	0e 94 0e 13 	call	0x261c	; 0x261c <sprintf>
     282:	8d b7       	in	r24, 0x3d	; 61
     284:	9e b7       	in	r25, 0x3e	; 62
     286:	06 96       	adiw	r24, 0x06	; 6
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	9e bf       	out	0x3e, r25	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	8d bf       	out	0x3d, r24	; 61
      uartPuts(s);
     292:	ce 01       	movw	r24, r28
     294:	02 96       	adiw	r24, 0x02	; 2
     296:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
     29a:	80 cf       	rjmp	.-256    	; 0x19c <i2c_master_start_wait+0x1e>
      continue;
    }

    // if (twst != TW_MT_SLA_ACK) return 1;
    break;
   }
     29c:	ca 59       	subi	r28, 0x9A	; 154
     29e:	df 4f       	sbci	r29, 0xFF	; 255
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	08 95       	ret

000002b0 <i2c_master_rep_start>:
 *  @return    1 = failed to access device, 0 = device accessible
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_rep_start (uint8_t address, uint8_t * status_p)
{
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <i2c_master_rep_start+0x6>
     2b6:	0f 92       	push	r0
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	89 83       	std	Y+1, r24	; 0x01
     2be:	7b 83       	std	Y+3, r23	; 0x03
     2c0:	6a 83       	std	Y+2, r22	; 0x02
  return i2c_master_start (address, status_p);
     2c2:	2a 81       	ldd	r18, Y+2	; 0x02
     2c4:	3b 81       	ldd	r19, Y+3	; 0x03
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	b9 01       	movw	r22, r18
     2ca:	0e 94 71 00 	call	0xe2	; 0xe2 <i2c_master_start>
}
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	cf 91       	pop	r28
     2d6:	df 91       	pop	r29
     2d8:	08 95       	ret

000002da <i2c_master_stop>:
 *  @details  Terminates the data transfer and releases the I2C bus
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
i2c_master_stop (void)
{
     2da:	df 93       	push	r29
     2dc:	cf 93       	push	r28
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);                                   // send stop condition
     2e2:	e6 e5       	ldi	r30, 0x56	; 86
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	84 e9       	ldi	r24, 0x94	; 148
     2e8:	80 83       	st	Z, r24
  WAIT_UNTIL_STOP_CONDITION_EXECUTED;                                           // wait until stop condition is executed and bus released
     2ea:	e6 e5       	ldi	r30, 0x56	; 86
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	88 2f       	mov	r24, r24
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	80 71       	andi	r24, 0x10	; 16
     2f6:	90 70       	andi	r25, 0x00	; 0
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	b9 f7       	brne	.-18     	; 0x2ea <i2c_master_stop+0x10>
}
     2fc:	cf 91       	pop	r28
     2fe:	df 91       	pop	r29
     300:	08 95       	ret

00000302 <i2c_master_write>:
 *  @return    0 write successful, 1 write failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_write (uint8_t data, uint8_t * status_p)
{
     302:	df 93       	push	r29
     304:	cf 93       	push	r28
     306:	00 d0       	rcall	.+0      	; 0x308 <i2c_master_write+0x6>
     308:	00 d0       	rcall	.+0      	; 0x30a <i2c_master_write+0x8>
     30a:	0f 92       	push	r0
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	8a 83       	std	Y+2, r24	; 0x02
     312:	7c 83       	std	Y+4, r23	; 0x04
     314:	6b 83       	std	Y+3, r22	; 0x03
  uint8_t   twst;

  TWDR = data;                                                                  // send data to the previously addressed device
     316:	e3 e2       	ldi	r30, 0x23	; 35
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     31e:	e6 e5       	ldi	r30, 0x56	; 86
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	84 e8       	ldi	r24, 0x84	; 132
     324:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;                                            // wait until transmission completed
     326:	e6 e5       	ldi	r30, 0x56	; 86
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	80 81       	ld	r24, Z
     32c:	88 23       	and	r24, r24
     32e:	dc f7       	brge	.-10     	; 0x326 <i2c_master_write+0x24>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits
     330:	e1 e2       	ldi	r30, 0x21	; 33
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	88 7f       	andi	r24, 0xF8	; 248
     338:	89 83       	std	Y+1, r24	; 0x01

  if (twst != TW_MT_DATA_ACK)
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	88 32       	cpi	r24, 0x28	; 40
     33e:	39 f0       	breq	.+14     	; 0x34e <i2c_master_write+0x4c>
  {
    *status_p = twst;
     340:	eb 81       	ldd	r30, Y+3	; 0x03
     342:	fc 81       	ldd	r31, Y+4	; 0x04
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	80 83       	st	Z, r24
    return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8d 83       	std	Y+5, r24	; 0x05
     34c:	01 c0       	rjmp	.+2      	; 0x350 <i2c_master_write+0x4e>
  }

  return 0;
     34e:	1d 82       	std	Y+5, r1	; 0x05
     350:	8d 81       	ldd	r24, Y+5	; 0x05
}
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	cf 91       	pop	r28
     35e:	df 91       	pop	r29
     360:	08 95       	ret

00000362 <i2c_master_read_ack>:
 *  @return    byte read
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_read_ack (void)
{
     362:	df 93       	push	r29
     364:	cf 93       	push	r28
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     36a:	e6 e5       	ldi	r30, 0x56	; 86
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	84 ec       	ldi	r24, 0xC4	; 196
     370:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;
     372:	e6 e5       	ldi	r30, 0x56	; 86
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	88 23       	and	r24, r24
     37a:	dc f7       	brge	.-10     	; 0x372 <i2c_master_read_ack+0x10>
  return TWDR;
     37c:	e3 e2       	ldi	r30, 0x23	; 35
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
}/* i2c_master_readAck */
     382:	cf 91       	pop	r28
     384:	df 91       	pop	r29
     386:	08 95       	ret

00000388 <i2c_master_read_nak>:
 *  @return    byte read
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_read_nak (void)
{
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN);
     390:	e6 e5       	ldi	r30, 0x56	; 86
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	84 e8       	ldi	r24, 0x84	; 132
     396:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;
     398:	e6 e5       	ldi	r30, 0x56	; 86
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	88 23       	and	r24, r24
     3a0:	dc f7       	brge	.-10     	; 0x398 <i2c_master_read_nak+0x10>
  return TWDR;
     3a2:	e3 e2       	ldi	r30, 0x23	; 35
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
}
     3a8:	cf 91       	pop	r28
     3aa:	df 91       	pop	r29
     3ac:	08 95       	ret

000003ae <bcdtoi>:
}


uint8_t
bcdtoi (uint8_t bcd)
{
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <bcdtoi+0x6>
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t i = 10 * (bcd >> 4) + (bcd & 0x0F);
     3ba:	8a 81       	ldd	r24, Y+2	; 0x02
     3bc:	82 95       	swap	r24
     3be:	8f 70       	andi	r24, 0x0F	; 15
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	9c 01       	movw	r18, r24
     3c6:	22 0f       	add	r18, r18
     3c8:	33 1f       	adc	r19, r19
     3ca:	c9 01       	movw	r24, r18
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	82 0f       	add	r24, r18
     3d6:	93 1f       	adc	r25, r19
     3d8:	98 2f       	mov	r25, r24
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	8f 70       	andi	r24, 0x0F	; 15
     3de:	89 0f       	add	r24, r25
     3e0:	89 83       	std	Y+1, r24	; 0x01
  return (i);
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
}
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	cf 91       	pop	r28
     3ea:	df 91       	pop	r29
     3ec:	08 95       	ret

000003ee <itobcd>:

uint8_t
itobcd (uint8_t i)
{
     3ee:	df 93       	push	r29
     3f0:	cf 93       	push	r28
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <itobcd+0x6>
     3f4:	0f 92       	push	r0
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	8b 83       	std	Y+3, r24	; 0x03
  bcd = (i / 10) << 4;
  bcd |= (i % 10);
#else
  uint8_t   r;

  bcd = div10 (i, &r) << 4;
     3fc:	9e 01       	movw	r18, r28
     3fe:	2e 5f       	subi	r18, 0xFE	; 254
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	8b 81       	ldd	r24, Y+3	; 0x03
     404:	b9 01       	movw	r22, r18
     406:	0e 94 13 02 	call	0x426	; 0x426 <div10>
     40a:	82 95       	swap	r24
     40c:	80 7f       	andi	r24, 0xF0	; 240
     40e:	89 83       	std	Y+1, r24	; 0x01
  bcd |= r;
     410:	9a 81       	ldd	r25, Y+2	; 0x02
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	89 2b       	or	r24, r25
     416:	89 83       	std	Y+1, r24	; 0x01
#endif

  return (bcd);
     418:	89 81       	ldd	r24, Y+1	; 0x01
}
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	cf 91       	pop	r28
     422:	df 91       	pop	r29
     424:	08 95       	ret

00000426 <div10>:
#define CTRL_REG_RS0          0x01                                              // rate select RS0

static volatile uint8_t       ctrlreg;

static inline uint8_t div10 (uint8_t x, uint8_t* o_remaind)
{
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	00 d0       	rcall	.+0      	; 0x42c <div10+0x6>
     42c:	00 d0       	rcall	.+0      	; 0x42e <div10+0x8>
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	8a 83       	std	Y+2, r24	; 0x02
     434:	7c 83       	std	Y+4, r23	; 0x04
     436:	6b 83       	std	Y+3, r22	; 0x03
    //    : [input]"d" (x)
    //    : "r1","r0"
    // );
    //*o_remaind = x-(10*y);
    //return y;
  uint8_t y = (((uint16_t)x)*205)>>11;
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	28 2f       	mov	r18, r24
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	8d ec       	ldi	r24, 0xCD	; 205
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	ac 01       	movw	r20, r24
     444:	24 9f       	mul	r18, r20
     446:	c0 01       	movw	r24, r0
     448:	25 9f       	mul	r18, r21
     44a:	90 0d       	add	r25, r0
     44c:	34 9f       	mul	r19, r20
     44e:	90 0d       	add	r25, r0
     450:	11 24       	eor	r1, r1
     452:	89 2f       	mov	r24, r25
     454:	99 27       	eor	r25, r25
     456:	86 95       	lsr	r24
     458:	86 95       	lsr	r24
     45a:	86 95       	lsr	r24
     45c:	89 83       	std	Y+1, r24	; 0x01
  *o_remaind = x-(y*10);
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	9c 01       	movw	r18, r24
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	c9 01       	movw	r24, r18
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	82 0f       	add	r24, r18
     476:	93 1f       	adc	r25, r19
     478:	90 95       	com	r25
     47a:	81 95       	neg	r24
     47c:	9f 4f       	sbci	r25, 0xFF	; 255
     47e:	98 2f       	mov	r25, r24
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	89 0f       	add	r24, r25
     484:	eb 81       	ldd	r30, Y+3	; 0x03
     486:	fc 81       	ldd	r31, Y+4	; 0x04
     488:	80 83       	st	Z, r24
  return y;
     48a:	89 81       	ldd	r24, Y+1	; 0x01
}
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	cf 91       	pop	r28
     496:	df 91       	pop	r29
     498:	08 95       	ret

0000049a <i2c_rtc_get_status>:
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */

uint8_t
i2c_rtc_get_status (void)
{
     49a:	df 93       	push	r29
     49c:	cf 93       	push	r28
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
  return i2c_rtc_status;
     4a2:	80 91 50 01 	lds	r24, 0x0150
}
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	08 95       	ret

000004ac <i2c_rtc_write>:
 *  @return    TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_write (const DATETIME * datetime)
{
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	2a 97       	sbiw	r28, 0x0a	; 10
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	9a 87       	std	Y+10, r25	; 0x0a
     4c2:	89 87       	std	Y+9, r24	; 0x09
  uint8_t      rtcbuf[7];
  uint8_t      rtc = false;
     4c4:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
     4c6:	80 91 4d 01 	lds	r24, 0x014D
     4ca:	88 23       	and	r24, r24
     4cc:	b9 f1       	breq	.+110    	; 0x53c <i2c_rtc_write+0x90>
  {
    rtcbuf[0] = itobcd (datetime->ss);                                          // seconds    00-59
     4ce:	e9 85       	ldd	r30, Y+9	; 0x09
     4d0:	fa 85       	ldd	r31, Y+10	; 0x0a
     4d2:	85 81       	ldd	r24, Z+5	; 0x05
     4d4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <itobcd>
     4d8:	8a 83       	std	Y+2, r24	; 0x02
    rtcbuf[1] = itobcd (datetime->mm);                                          // minutes    00-59
     4da:	e9 85       	ldd	r30, Y+9	; 0x09
     4dc:	fa 85       	ldd	r31, Y+10	; 0x0a
     4de:	84 81       	ldd	r24, Z+4	; 0x04
     4e0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <itobcd>
     4e4:	8b 83       	std	Y+3, r24	; 0x03
    rtcbuf[2] = itobcd (datetime->hh);                                          // hours    00-23
     4e6:	e9 85       	ldd	r30, Y+9	; 0x09
     4e8:	fa 85       	ldd	r31, Y+10	; 0x0a
     4ea:	83 81       	ldd	r24, Z+3	; 0x03
     4ec:	0e 94 f7 01 	call	0x3ee	; 0x3ee <itobcd>
     4f0:	8c 83       	std	Y+4, r24	; 0x04
    rtcbuf[3] = itobcd (datetime->wd) + 1;                                      // weekday     1-7
     4f2:	e9 85       	ldd	r30, Y+9	; 0x09
     4f4:	fa 85       	ldd	r31, Y+10	; 0x0a
     4f6:	86 81       	ldd	r24, Z+6	; 0x06
     4f8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <itobcd>
     4fc:	8f 5f       	subi	r24, 0xFF	; 255
     4fe:	8d 83       	std	Y+5, r24	; 0x05
    rtcbuf[4] = itobcd (datetime->DD);                                          // day of month  00-31
     500:	e9 85       	ldd	r30, Y+9	; 0x09
     502:	fa 85       	ldd	r31, Y+10	; 0x0a
     504:	82 81       	ldd	r24, Z+2	; 0x02
     506:	0e 94 f7 01 	call	0x3ee	; 0x3ee <itobcd>
     50a:	8e 83       	std	Y+6, r24	; 0x06
    rtcbuf[5] = itobcd (datetime->MM);                                          // month    00-12
     50c:	e9 85       	ldd	r30, Y+9	; 0x09
     50e:	fa 85       	ldd	r31, Y+10	; 0x0a
     510:	81 81       	ldd	r24, Z+1	; 0x01
     512:	0e 94 f7 01 	call	0x3ee	; 0x3ee <itobcd>
     516:	8f 83       	std	Y+7, r24	; 0x07
    rtcbuf[6] = itobcd (datetime->YY);                                          // year      00-99
     518:	e9 85       	ldd	r30, Y+9	; 0x09
     51a:	fa 85       	ldd	r31, Y+10	; 0x0a
     51c:	80 81       	ld	r24, Z
     51e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <itobcd>
     522:	88 87       	std	Y+8, r24	; 0x08

    if (i2c_rtc_sram_write (0x00, rtcbuf, 7))
     524:	9e 01       	movw	r18, r28
     526:	2e 5f       	subi	r18, 0xFE	; 254
     528:	3f 4f       	sbci	r19, 0xFF	; 255
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	b9 01       	movw	r22, r18
     52e:	47 e0       	ldi	r20, 0x07	; 7
     530:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <i2c_rtc_sram_write>
     534:	88 23       	and	r24, r24
     536:	11 f0       	breq	.+4      	; 0x53c <i2c_rtc_write+0x90>
    {
      rtc = true;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	89 83       	std	Y+1, r24	; 0x01
    }
  }
  return rtc;
     53c:	89 81       	ldd	r24, Y+1	; 0x01
}
     53e:	2a 96       	adiw	r28, 0x0a	; 10
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	08 95       	ret

00000550 <i2c_rtc_read>:
 *  @return    TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_read (DATETIME * datetime)
{
     550:	df 93       	push	r29
     552:	cf 93       	push	r28
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	2a 97       	sbiw	r28, 0x0a	; 10
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	9a 87       	std	Y+10, r25	; 0x0a
     566:	89 87       	std	Y+9, r24	; 0x09
  uint8_t  rtcbuf[7];
  uint8_t  rtc = 0;
     568:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
     56a:	80 91 4d 01 	lds	r24, 0x014D
     56e:	88 23       	and	r24, r24
     570:	b9 f1       	breq	.+110    	; 0x5e0 <i2c_rtc_read+0x90>
  {
    if (i2c_rtc_sram_read (0x00, rtcbuf, 7))
     572:	9e 01       	movw	r18, r28
     574:	2e 5f       	subi	r18, 0xFE	; 254
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	b9 01       	movw	r22, r18
     57c:	47 e0       	ldi	r20, 0x07	; 7
     57e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <i2c_rtc_sram_read>
     582:	88 23       	and	r24, r24
     584:	69 f1       	breq	.+90     	; 0x5e0 <i2c_rtc_read+0x90>
    {
      datetime->YY = bcdtoi (rtcbuf[6]);                                        // year
     586:	88 85       	ldd	r24, Y+8	; 0x08
     588:	0e 94 d7 01 	call	0x3ae	; 0x3ae <bcdtoi>
     58c:	e9 85       	ldd	r30, Y+9	; 0x09
     58e:	fa 85       	ldd	r31, Y+10	; 0x0a
     590:	80 83       	st	Z, r24
      datetime->MM = bcdtoi (rtcbuf[5]);                                        // month
     592:	8f 81       	ldd	r24, Y+7	; 0x07
     594:	0e 94 d7 01 	call	0x3ae	; 0x3ae <bcdtoi>
     598:	e9 85       	ldd	r30, Y+9	; 0x09
     59a:	fa 85       	ldd	r31, Y+10	; 0x0a
     59c:	81 83       	std	Z+1, r24	; 0x01
      datetime->DD = bcdtoi (rtcbuf[4]);                                        // day of month
     59e:	8e 81       	ldd	r24, Y+6	; 0x06
     5a0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <bcdtoi>
     5a4:	e9 85       	ldd	r30, Y+9	; 0x09
     5a6:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a8:	82 83       	std	Z+2, r24	; 0x02
      datetime->wd = bcdtoi (rtcbuf[3]) - 1;                                    // weekday 0-6
     5aa:	8d 81       	ldd	r24, Y+5	; 0x05
     5ac:	0e 94 d7 01 	call	0x3ae	; 0x3ae <bcdtoi>
     5b0:	81 50       	subi	r24, 0x01	; 1
     5b2:	e9 85       	ldd	r30, Y+9	; 0x09
     5b4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5b6:	86 83       	std	Z+6, r24	; 0x06
      datetime->hh = bcdtoi (rtcbuf[2]);                                        // hours
     5b8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ba:	0e 94 d7 01 	call	0x3ae	; 0x3ae <bcdtoi>
     5be:	e9 85       	ldd	r30, Y+9	; 0x09
     5c0:	fa 85       	ldd	r31, Y+10	; 0x0a
     5c2:	83 83       	std	Z+3, r24	; 0x03
      datetime->mm = bcdtoi (rtcbuf[1]);                                        // minutes
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <bcdtoi>
     5ca:	e9 85       	ldd	r30, Y+9	; 0x09
     5cc:	fa 85       	ldd	r31, Y+10	; 0x0a
     5ce:	84 83       	std	Z+4, r24	; 0x04
      datetime->ss = bcdtoi (rtcbuf[0]);                                        // seconds
     5d0:	8a 81       	ldd	r24, Y+2	; 0x02
     5d2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <bcdtoi>
     5d6:	e9 85       	ldd	r30, Y+9	; 0x09
     5d8:	fa 85       	ldd	r31, Y+10	; 0x0a
     5da:	85 83       	std	Z+5, r24	; 0x05
      rtc = 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	89 83       	std	Y+1, r24	; 0x01
    }
  }
  return rtc;
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     5e2:	2a 96       	adiw	r28, 0x0a	; 10
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	cf 91       	pop	r28
     5f0:	df 91       	pop	r29
     5f2:	08 95       	ret

000005f4 <i2c_rtc_sram_write>:
 *  @return    TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_sram_write (uint8_t addr, void * void_valuep, uint8_t length)
{
     5f4:	df 93       	push	r29
     5f6:	cf 93       	push	r28
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	28 97       	sbiw	r28, 0x08	; 8
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	8c 83       	std	Y+4, r24	; 0x04
     60a:	7e 83       	std	Y+6, r23	; 0x06
     60c:	6d 83       	std	Y+5, r22	; 0x05
     60e:	4f 83       	std	Y+7, r20	; 0x07
  unsigned char *   valuep = void_valuep;
     610:	8d 81       	ldd	r24, Y+5	; 0x05
     612:	9e 81       	ldd	r25, Y+6	; 0x06
     614:	9b 83       	std	Y+3, r25	; 0x03
     616:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t           rtc = 0;
     618:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
     61a:	80 91 4d 01 	lds	r24, 0x014D
     61e:	88 23       	and	r24, r24
     620:	09 f4       	brne	.+2      	; 0x624 <i2c_rtc_sram_write+0x30>
     622:	3d c0       	rjmp	.+122    	; 0x69e <i2c_rtc_sram_write+0xaa>
  {
    if (length && addr + length <= 64)
     624:	8f 81       	ldd	r24, Y+7	; 0x07
     626:	88 23       	and	r24, r24
     628:	d1 f1       	breq	.+116    	; 0x69e <i2c_rtc_sram_write+0xaa>
     62a:	8c 81       	ldd	r24, Y+4	; 0x04
     62c:	28 2f       	mov	r18, r24
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	8f 81       	ldd	r24, Y+7	; 0x07
     632:	88 2f       	mov	r24, r24
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	82 0f       	add	r24, r18
     638:	93 1f       	adc	r25, r19
     63a:	81 34       	cpi	r24, 0x41	; 65
     63c:	91 05       	cpc	r25, r1
     63e:	7c f5       	brge	.+94     	; 0x69e <i2c_rtc_sram_write+0xaa>
    {
      i2c_master_start_wait(DEVRTC+I2C_WRITE);                                  // set device address and write mode
     640:	80 ed       	ldi	r24, 0xD0	; 208
     642:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_master_start_wait>

      if (i2c_master_write (addr, &i2c_rtc_status) == 0)                        // write address
     646:	20 e5       	ldi	r18, 0x50	; 80
     648:	31 e0       	ldi	r19, 0x01	; 1
     64a:	8c 81       	ldd	r24, Y+4	; 0x04
     64c:	b9 01       	movw	r22, r18
     64e:	0e 94 81 01 	call	0x302	; 0x302 <i2c_master_write>
     652:	88 23       	and	r24, r24
     654:	11 f5       	brne	.+68     	; 0x69a <i2c_rtc_sram_write+0xa6>
      {
        rtc = true;                                                             // indicate success
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	89 83       	std	Y+1, r24	; 0x01
     65a:	12 c0       	rjmp	.+36     	; 0x680 <i2c_rtc_sram_write+0x8c>

        while (length--)
        {
          if (i2c_master_write (*valuep++, &i2c_rtc_status) != 0)               // write value
     65c:	ea 81       	ldd	r30, Y+2	; 0x02
     65e:	fb 81       	ldd	r31, Y+3	; 0x03
     660:	40 81       	ld	r20, Z
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	9b 81       	ldd	r25, Y+3	; 0x03
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	9b 83       	std	Y+3, r25	; 0x03
     66a:	8a 83       	std	Y+2, r24	; 0x02
     66c:	20 e5       	ldi	r18, 0x50	; 80
     66e:	31 e0       	ldi	r19, 0x01	; 1
     670:	84 2f       	mov	r24, r20
     672:	b9 01       	movw	r22, r18
     674:	0e 94 81 01 	call	0x302	; 0x302 <i2c_master_write>
     678:	88 23       	and	r24, r24
     67a:	11 f0       	breq	.+4      	; 0x680 <i2c_rtc_sram_write+0x8c>
          {
            rtc = false;                                                        // indicate errror
     67c:	19 82       	std	Y+1, r1	; 0x01
     67e:	0d c0       	rjmp	.+26     	; 0x69a <i2c_rtc_sram_write+0xa6>

      if (i2c_master_write (addr, &i2c_rtc_status) == 0)                        // write address
      {
        rtc = true;                                                             // indicate success

        while (length--)
     680:	8f 81       	ldd	r24, Y+7	; 0x07
     682:	88 87       	std	Y+8, r24	; 0x08
     684:	88 85       	ldd	r24, Y+8	; 0x08
     686:	88 23       	and	r24, r24
     688:	11 f0       	breq	.+4      	; 0x68e <i2c_rtc_sram_write+0x9a>
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	88 87       	std	Y+8, r24	; 0x08
     68e:	88 85       	ldd	r24, Y+8	; 0x08
     690:	9f 81       	ldd	r25, Y+7	; 0x07
     692:	91 50       	subi	r25, 0x01	; 1
     694:	9f 83       	std	Y+7, r25	; 0x07
     696:	88 23       	and	r24, r24
     698:	09 f7       	brne	.-62     	; 0x65c <i2c_rtc_sram_write+0x68>
            break;
          }
        }
      }

      i2c_master_stop();                                                        // set stop conditon = release bus
     69a:	0e 94 6d 01 	call	0x2da	; 0x2da <i2c_master_stop>
    }
  }
  return rtc;
     69e:	89 81       	ldd	r24, Y+1	; 0x01
}
     6a0:	28 96       	adiw	r28, 0x08	; 8
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	cf 91       	pop	r28
     6ae:	df 91       	pop	r29
     6b0:	08 95       	ret

000006b2 <i2c_rtc_sram_read>:
 *  @return   TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_sram_read (uint8_t addr, void * void_valuep, uint8_t length)
{
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	27 97       	sbiw	r28, 0x07	; 7
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	8c 83       	std	Y+4, r24	; 0x04
     6c8:	7e 83       	std	Y+6, r23	; 0x06
     6ca:	6d 83       	std	Y+5, r22	; 0x05
     6cc:	4f 83       	std	Y+7, r20	; 0x07
  unsigned char *  valuep = void_valuep;
     6ce:	8d 81       	ldd	r24, Y+5	; 0x05
     6d0:	9e 81       	ldd	r25, Y+6	; 0x06
     6d2:	9b 83       	std	Y+3, r25	; 0x03
     6d4:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t      rtc = false;
     6d6:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
     6d8:	80 91 4d 01 	lds	r24, 0x014D
     6dc:	88 23       	and	r24, r24
     6de:	09 f4       	brne	.+2      	; 0x6e2 <i2c_rtc_sram_read+0x30>
     6e0:	40 c0       	rjmp	.+128    	; 0x762 <i2c_rtc_sram_read+0xb0>
  {
    if (length && addr + length <= 64)
     6e2:	8f 81       	ldd	r24, Y+7	; 0x07
     6e4:	88 23       	and	r24, r24
     6e6:	e9 f1       	breq	.+122    	; 0x762 <i2c_rtc_sram_read+0xb0>
     6e8:	8c 81       	ldd	r24, Y+4	; 0x04
     6ea:	28 2f       	mov	r18, r24
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	8f 81       	ldd	r24, Y+7	; 0x07
     6f0:	88 2f       	mov	r24, r24
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	82 0f       	add	r24, r18
     6f6:	93 1f       	adc	r25, r19
     6f8:	81 34       	cpi	r24, 0x41	; 65
     6fa:	91 05       	cpc	r25, r1
     6fc:	94 f5       	brge	.+100    	; 0x762 <i2c_rtc_sram_read+0xb0>
    {
      i2c_master_start_wait(DEVRTC+I2C_WRITE);                                  // set device address and write mode
     6fe:	80 ed       	ldi	r24, 0xD0	; 208
     700:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_master_start_wait>

      if (i2c_master_write (addr, &i2c_rtc_status) == 0)                        // write address
     704:	20 e5       	ldi	r18, 0x50	; 80
     706:	31 e0       	ldi	r19, 0x01	; 1
     708:	8c 81       	ldd	r24, Y+4	; 0x04
     70a:	b9 01       	movw	r22, r18
     70c:	0e 94 81 01 	call	0x302	; 0x302 <i2c_master_write>
     710:	88 23       	and	r24, r24
     712:	29 f5       	brne	.+74     	; 0x75e <i2c_rtc_sram_read+0xac>
      {
        if (i2c_master_rep_start(DEVRTC+I2C_READ, &i2c_rtc_status) == 0)        // set device address and read mode
     714:	20 e5       	ldi	r18, 0x50	; 80
     716:	31 e0       	ldi	r19, 0x01	; 1
     718:	81 ed       	ldi	r24, 0xD1	; 209
     71a:	b9 01       	movw	r22, r18
     71c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <i2c_master_rep_start>
     720:	88 23       	and	r24, r24
     722:	e9 f4       	brne	.+58     	; 0x75e <i2c_rtc_sram_read+0xac>
        {
          rtc = true;                                                           // indicate success
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	0a c0       	rjmp	.+20     	; 0x73e <i2c_rtc_sram_read+0x8c>

          while (--length)
          {
            *valuep++ = i2c_master_read_ack();                                  // read n'th byte
     72a:	0e 94 b1 01 	call	0x362	; 0x362 <i2c_master_read_ack>
     72e:	ea 81       	ldd	r30, Y+2	; 0x02
     730:	fb 81       	ldd	r31, Y+3	; 0x03
     732:	80 83       	st	Z, r24
     734:	8a 81       	ldd	r24, Y+2	; 0x02
     736:	9b 81       	ldd	r25, Y+3	; 0x03
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	9b 83       	std	Y+3, r25	; 0x03
     73c:	8a 83       	std	Y+2, r24	; 0x02
      {
        if (i2c_master_rep_start(DEVRTC+I2C_READ, &i2c_rtc_status) == 0)        // set device address and read mode
        {
          rtc = true;                                                           // indicate success

          while (--length)
     73e:	8f 81       	ldd	r24, Y+7	; 0x07
     740:	81 50       	subi	r24, 0x01	; 1
     742:	8f 83       	std	Y+7, r24	; 0x07
     744:	8f 81       	ldd	r24, Y+7	; 0x07
     746:	88 23       	and	r24, r24
     748:	81 f7       	brne	.-32     	; 0x72a <i2c_rtc_sram_read+0x78>
          {
            *valuep++ = i2c_master_read_ack();                                  // read n'th byte
          }
          *valuep++ = i2c_master_read_nak();                                    // read last byte
     74a:	0e 94 c4 01 	call	0x388	; 0x388 <i2c_master_read_nak>
     74e:	ea 81       	ldd	r30, Y+2	; 0x02
     750:	fb 81       	ldd	r31, Y+3	; 0x03
     752:	80 83       	st	Z, r24
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	9b 81       	ldd	r25, Y+3	; 0x03
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	9b 83       	std	Y+3, r25	; 0x03
     75c:	8a 83       	std	Y+2, r24	; 0x02
        }
      }

      i2c_master_stop();                                                        // set stop conditon = release bus
     75e:	0e 94 6d 01 	call	0x2da	; 0x2da <i2c_master_stop>
    }
  }
  return rtc;
     762:	89 81       	ldd	r24, Y+1	; 0x01
}
     764:	27 96       	adiw	r28, 0x07	; 7
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	cf 91       	pop	r28
     772:	df 91       	pop	r29
     774:	08 95       	ret

00000776 <i2c_write_ctrlreg>:
 *  @return     TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static uint8_t
i2c_write_ctrlreg (void)
{
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	00 d0       	rcall	.+0      	; 0x77c <i2c_write_ctrlreg+0x6>
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
  uint8_t     value[1];
  uint8_t     rtc = 0;
     780:	19 82       	std	Y+1, r1	; 0x01

  value[0] = ctrlreg;
     782:	80 91 51 01 	lds	r24, 0x0151
     786:	8a 83       	std	Y+2, r24	; 0x02

  if (i2c_rtc_sram_write (0x07, value, 1))
     788:	9e 01       	movw	r18, r28
     78a:	2e 5f       	subi	r18, 0xFE	; 254
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	87 e0       	ldi	r24, 0x07	; 7
     790:	b9 01       	movw	r22, r18
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <i2c_rtc_sram_write>
     798:	88 23       	and	r24, r24
     79a:	11 f0       	breq	.+4      	; 0x7a0 <i2c_write_ctrlreg+0x2a>
  {
    rtc = 1;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	89 83       	std	Y+1, r24	; 0x01
  }
  return rtc;
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
}
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	08 95       	ret

000007ac <i2c_rtc_init>:
 *  @return   TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_init (uint8_t * errorcode_p, uint8_t * status_p)
{
     7ac:	df 93       	push	r29
     7ae:	cf 93       	push	r28
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <i2c_rtc_init+0x6>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <i2c_rtc_init+0x8>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <i2c_rtc_init+0xa>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	9c 83       	std	Y+4, r25	; 0x04
     7bc:	8b 83       	std	Y+3, r24	; 0x03
     7be:	7e 83       	std	Y+6, r23	; 0x06
     7c0:	6d 83       	std	Y+5, r22	; 0x05
  uint8_t     rtc = false;
     7c2:	19 82       	std	Y+1, r1	; 0x01
  uint8_t     seconds;

  *status_p = 0xFF;
     7c4:	ed 81       	ldd	r30, Y+5	; 0x05
     7c6:	fe 81       	ldd	r31, Y+6	; 0x06
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	80 83       	st	Z, r24
  *errorcode_p = i2c_master_init();                                             // init I2C interface
     7cc:	0e 94 54 00 	call	0xa8	; 0xa8 <i2c_master_init>
     7d0:	eb 81       	ldd	r30, Y+3	; 0x03
     7d2:	fc 81       	ldd	r31, Y+4	; 0x04
     7d4:	80 83       	st	Z, r24


  if (*errorcode_p == 0)
     7d6:	eb 81       	ldd	r30, Y+3	; 0x03
     7d8:	fc 81       	ldd	r31, Y+4	; 0x04
     7da:	80 81       	ld	r24, Z
     7dc:	88 23       	and	r24, r24
     7de:	71 f5       	brne	.+92     	; 0x83c <i2c_rtc_init+0x90>
  {
    rtc_initialized = true;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	80 93 4d 01 	sts	0x014D, r24
    ctrlreg = CTRL_REG_OUT;                                                     // set SQWE pin to output and set it to high (deactivated, active low!)
     7e6:	80 e8       	ldi	r24, 0x80	; 128
     7e8:	80 93 51 01 	sts	0x0151, r24

    if (i2c_write_ctrlreg ())
     7ec:	0e 94 bb 03 	call	0x776	; 0x776 <i2c_write_ctrlreg>
     7f0:	88 23       	and	r24, r24
     7f2:	d9 f0       	breq	.+54     	; 0x82a <i2c_rtc_init+0x7e>
    {
      rtc = true;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	89 83       	std	Y+1, r24	; 0x01

      if (i2c_rtc_sram_read (0x00, &seconds, 1))
     7f8:	9e 01       	movw	r18, r28
     7fa:	2e 5f       	subi	r18, 0xFE	; 254
     7fc:	3f 4f       	sbci	r19, 0xFF	; 255
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	b9 01       	movw	r22, r18
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	0e 94 59 03 	call	0x6b2	; 0x6b2 <i2c_rtc_sram_read>
     808:	88 23       	and	r24, r24
     80a:	c1 f0       	breq	.+48     	; 0x83c <i2c_rtc_init+0x90>
      {
        if (seconds & 0x80)                                                     // clock stopped?
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	88 23       	and	r24, r24
     810:	ac f4       	brge	.+42     	; 0x83c <i2c_rtc_init+0x90>
        {
          seconds &= ~0x80;
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	8f 77       	andi	r24, 0x7F	; 127
     816:	8a 83       	std	Y+2, r24	; 0x02
          (void) i2c_rtc_sram_write (0x00, &seconds, 1);
     818:	9e 01       	movw	r18, r28
     81a:	2e 5f       	subi	r18, 0xFE	; 254
     81c:	3f 4f       	sbci	r19, 0xFF	; 255
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	b9 01       	movw	r22, r18
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <i2c_rtc_sram_write>
     828:	09 c0       	rjmp	.+18     	; 0x83c <i2c_rtc_init+0x90>
        }
      }
    }
    else
    {
      *errorcode_p = I2C_ERROR_SLAVE_NOT_FOUND;
     82a:	eb 81       	ldd	r30, Y+3	; 0x03
     82c:	fc 81       	ldd	r31, Y+4	; 0x04
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	80 83       	st	Z, r24
      *status_p = i2c_rtc_status;
     832:	80 91 50 01 	lds	r24, 0x0150
     836:	ed 81       	ldd	r30, Y+5	; 0x05
     838:	fe 81       	ldd	r31, Y+6	; 0x06
     83a:	80 83       	st	Z, r24
    }
  }

  return rtc;
     83c:	89 81       	ldd	r24, Y+1	; 0x01
}
     83e:	26 96       	adiw	r28, 0x06	; 6
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
     84a:	cf 91       	pop	r28
     84c:	df 91       	pop	r29
     84e:	08 95       	ret

00000850 <ldr_init>:
 * ldr_init: initialize adc for ldr
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ldr_init (void)
{
     850:	df 93       	push	r29
     852:	cf 93       	push	r28
     854:	00 d0       	rcall	.+0      	; 0x856 <ldr_init+0x6>
     856:	0f 92       	push	r0
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t result;
 
  ADMUX = 0                       // ADC0
     85c:	e7 e2       	ldi	r30, 0x27	; 39
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 e6       	ldi	r24, 0x60	; 96
     862:	80 83       	st	Z, r24
        | (1<<REFS0)              // use Avcc
        | (1<<ADLAR);             // left justify result in ADCH
 
  ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);      // prescaler to 32 / in our case sampling frequence of 250kHz
     864:	e6 e2       	ldi	r30, 0x26	; 38
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	85 e8       	ldi	r24, 0x85	; 133
     86a:	80 83       	st	Z, r24
                                                     // and activate ADC

  ADCSRA |= (1<<ADSC);                      // ADC start 
     86c:	a6 e2       	ldi	r26, 0x26	; 38
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	e6 e2       	ldi	r30, 0x26	; 38
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	80 64       	ori	r24, 0x40	; 64
     878:	8c 93       	st	X, r24
  while ( ADCSRA & (1<<ADSC) ) {
     87a:	e6 e2       	ldi	r30, 0x26	; 38
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	80 74       	andi	r24, 0x40	; 64
     886:	90 70       	andi	r25, 0x00	; 0
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	b9 f7       	brne	.-18     	; 0x87a <__stack+0x1b>
    ;     
  }

  result = ADCH;  // read out the value and init the summary array
     88c:	e5 e2       	ldi	r30, 0x25	; 37
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	8b 83       	std	Y+3, r24	; 0x03
  for (int i = 0; i < LDR_ARRAY_SIZE; array[i++] = result);
     894:	1a 82       	std	Y+2, r1	; 0x02
     896:	19 82       	std	Y+1, r1	; 0x01
     898:	0c c0       	rjmp	.+24     	; 0x8b2 <__stack+0x53>
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	9a 81       	ldd	r25, Y+2	; 0x02
     89e:	2b 81       	ldd	r18, Y+3	; 0x03
     8a0:	fc 01       	movw	r30, r24
     8a2:	ed 5a       	subi	r30, 0xAD	; 173
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	20 83       	st	Z, r18
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	9a 83       	std	Y+2, r25	; 0x02
     8b0:	89 83       	std	Y+1, r24	; 0x01
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
     8b6:	80 34       	cpi	r24, 0x40	; 64
     8b8:	91 05       	cpc	r25, r1
     8ba:	7c f3       	brlt	.-34     	; 0x89a <__stack+0x3b>

  curr_sum = result;              // also init the sum
     8bc:	8b 81       	ldd	r24, Y+3	; 0x03
     8be:	88 2f       	mov	r24, r24
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	90 93 94 01 	sts	0x0194, r25
     8c6:	80 93 93 01 	sts	0x0193, r24
  curr_sum *= LDR_ARRAY_SIZE;     //
     8ca:	80 91 93 01 	lds	r24, 0x0193
     8ce:	90 91 94 01 	lds	r25, 0x0194
     8d2:	00 24       	eor	r0, r0
     8d4:	96 95       	lsr	r25
     8d6:	87 95       	ror	r24
     8d8:	07 94       	ror	r0
     8da:	96 95       	lsr	r25
     8dc:	87 95       	ror	r24
     8de:	07 94       	ror	r0
     8e0:	98 2f       	mov	r25, r24
     8e2:	80 2d       	mov	r24, r0
     8e4:	90 93 94 01 	sts	0x0194, r25
     8e8:	80 93 93 01 	sts	0x0193, r24

  ADCSRA |= (1<<ADSC);     // start next measurement (will be read in 1Hz Interupt)
     8ec:	a6 e2       	ldi	r26, 0x26	; 38
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	e6 e2       	ldi	r30, 0x26	; 38
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	80 64       	ori	r24, 0x40	; 64
     8f8:	8c 93       	st	X, r24

  return;
}
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	cf 91       	pop	r28
     902:	df 91       	pop	r29
     904:	08 95       	ret

00000906 <ldr_get_brightness>:
 * ldr_get_brightness: returns the average of brightness 
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
ldr_get_brightness (void)
{
     906:	df 93       	push	r29
     908:	cf 93       	push	r28
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
  return ( 255-(curr_sum / LDR_ARRAY_SIZE)); 
     90e:	80 91 93 01 	lds	r24, 0x0193
     912:	90 91 94 01 	lds	r25, 0x0194
     916:	00 24       	eor	r0, r0
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	00 1c       	adc	r0, r0
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	00 1c       	adc	r0, r0
     924:	89 2f       	mov	r24, r25
     926:	90 2d       	mov	r25, r0
     928:	80 95       	com	r24
}
     92a:	cf 91       	pop	r28
     92c:	df 91       	pop	r29
     92e:	08 95       	ret

00000930 <ldr_read>:
 * recalculate our new summary and start a new conversion
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ldr_read (void)
{
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	0f 92       	push	r0
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
  static uint8_t   curr_index = 0;

  if ( (ADCSRA & (1<<ADSC)) == 0) {
     93a:	e6 e2       	ldi	r30, 0x26	; 38
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	80 74       	andi	r24, 0x40	; 64
     946:	90 70       	andi	r25, 0x00	; 0
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	09 f0       	breq	.+2      	; 0x94e <ldr_read+0x1e>
     94c:	41 c0       	rjmp	.+130    	; 0x9d0 <ldr_read+0xa0>
    uint8_t measurement = ADCH;
     94e:	e5 e2       	ldi	r30, 0x25	; 37
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	89 83       	std	Y+1, r24	; 0x01

    curr_sum -= array[curr_index];
     956:	20 91 93 01 	lds	r18, 0x0193
     95a:	30 91 94 01 	lds	r19, 0x0194
     95e:	80 91 52 01 	lds	r24, 0x0152
     962:	88 2f       	mov	r24, r24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	fc 01       	movw	r30, r24
     968:	ed 5a       	subi	r30, 0xAD	; 173
     96a:	fe 4f       	sbci	r31, 0xFE	; 254
     96c:	80 81       	ld	r24, Z
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a9 01       	movw	r20, r18
     974:	48 1b       	sub	r20, r24
     976:	59 0b       	sbc	r21, r25
     978:	ca 01       	movw	r24, r20
     97a:	90 93 94 01 	sts	0x0194, r25
     97e:	80 93 93 01 	sts	0x0193, r24
    array[curr_index] = measurement;
     982:	80 91 52 01 	lds	r24, 0x0152
     986:	88 2f       	mov	r24, r24
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	fc 01       	movw	r30, r24
     98c:	ed 5a       	subi	r30, 0xAD	; 173
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	80 83       	st	Z, r24
    curr_sum += measurement;
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	28 2f       	mov	r18, r24
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	80 91 93 01 	lds	r24, 0x0193
     99e:	90 91 94 01 	lds	r25, 0x0194
     9a2:	82 0f       	add	r24, r18
     9a4:	93 1f       	adc	r25, r19
     9a6:	90 93 94 01 	sts	0x0194, r25
     9aa:	80 93 93 01 	sts	0x0193, r24
    curr_index++;
     9ae:	80 91 52 01 	lds	r24, 0x0152
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	80 93 52 01 	sts	0x0152, r24

    curr_index %= LDR_ARRAY_SIZE;
     9b8:	80 91 52 01 	lds	r24, 0x0152
     9bc:	8f 73       	andi	r24, 0x3F	; 63
     9be:	80 93 52 01 	sts	0x0152, r24

    // start next ADC converting
    ADCSRA |= (1<<ADSC); 
     9c2:	a6 e2       	ldi	r26, 0x26	; 38
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e6 e2       	ldi	r30, 0x26	; 38
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	80 64       	ori	r24, 0x40	; 64
     9ce:	8c 93       	st	X, r24
  } 

  return;
}
     9d0:	0f 90       	pop	r0
     9d2:	cf 91       	pop	r28
     9d4:	df 91       	pop	r29
     9d6:	08 95       	ret

000009d8 <InitPWM>:
# define cli()  __asm__ __volatile__ ("cli" ::)
# define sei()  __asm__ __volatile__ ("sei" ::)

#define BIT(a) (1 << a)

void InitPWM() {
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0xfc; //(1 << PD4) || (1 << PD5) || (1 << PD7);
     9e0:	e1 e3       	ldi	r30, 0x31	; 49
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	8c ef       	ldi	r24, 0xFC	; 252
     9e6:	80 83       	st	Z, r24


	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
     9e8:	ef e4       	ldi	r30, 0x4F	; 79
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	81 ea       	ldi	r24, 0xA1	; 161
     9ee:	80 83       	st	Z, r24
	TCCR1B = (1 << CS10);
     9f0:	ee e4       	ldi	r30, 0x4E	; 78
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 83       	st	Z, r24
	TCCR2 = (1 << CS20) | (1 << WGM20) | (1 << COM21);
     9f8:	e5 e4       	ldi	r30, 0x45	; 69
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	81 e6       	ldi	r24, 0x61	; 97
     9fe:	80 83       	st	Z, r24
	TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (01 << COM00) | (1
     a00:	e3 e5       	ldi	r30, 0x53	; 83
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	8d e7       	ldi	r24, 0x7D	; 125
     a06:	80 83       	st	Z, r24
			<< CS00) | (1 << CS02);

	TIMSK &= ~0x3c;
     a08:	a9 e5       	ldi	r26, 0x59	; 89
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	e9 e5       	ldi	r30, 0x59	; 89
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	83 7c       	andi	r24, 0xC3	; 195
     a14:	8c 93       	st	X, r24
}
     a16:	cf 91       	pop	r28
     a18:	df 91       	pop	r29
     a1a:	08 95       	ret

00000a1c <SetPWMOutput>:

void SetPWMOutput(uint8_t duty) {
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	0f 92       	push	r0
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL = duty;
     a28:	ea e4       	ldi	r30, 0x4A	; 74
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	80 83       	st	Z, r24
	OCR1BL = 255 - duty;
     a30:	e8 e4       	ldi	r30, 0x48	; 72
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	80 95       	com	r24
     a38:	80 83       	st	Z, r24
	OCR0 = duty;
     a3a:	ec e5       	ldi	r30, 0x5C	; 92
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	80 83       	st	Z, r24
	OCR2 = duty;
     a42:	e3 e4       	ldi	r30, 0x43	; 67
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	80 83       	st	Z, r24
}
     a4a:	0f 90       	pop	r0
     a4c:	cf 91       	pop	r28
     a4e:	df 91       	pop	r29
     a50:	08 95       	ret

00000a52 <SetColor>:
//  sleep_disable ();
//  wdt_reset();
//}


void SetColor(uint8_t bright, uint8_t uiR, uint8_t uiG, uint8_t uiB) {
     a52:	df 93       	push	r29
     a54:	cf 93       	push	r28
     a56:	00 d0       	rcall	.+0      	; 0xa58 <SetColor+0x6>
     a58:	00 d0       	rcall	.+0      	; 0xa5a <SetColor+0x8>
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	89 83       	std	Y+1, r24	; 0x01
     a60:	6a 83       	std	Y+2, r22	; 0x02
     a62:	4b 83       	std	Y+3, r20	; 0x03
     a64:	2c 83       	std	Y+4, r18	; 0x04
	OCR1BL = (((bright) * uiR) >> 8);
     a66:	e8 e4       	ldi	r30, 0x48	; 72
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	28 2f       	mov	r18, r24
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	8a 81       	ldd	r24, Y+2	; 0x02
     a72:	88 2f       	mov	r24, r24
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	ac 01       	movw	r20, r24
     a78:	24 9f       	mul	r18, r20
     a7a:	c0 01       	movw	r24, r0
     a7c:	25 9f       	mul	r18, r21
     a7e:	90 0d       	add	r25, r0
     a80:	34 9f       	mul	r19, r20
     a82:	90 0d       	add	r25, r0
     a84:	11 24       	eor	r1, r1
     a86:	89 2f       	mov	r24, r25
     a88:	99 0f       	add	r25, r25
     a8a:	99 0b       	sbc	r25, r25
     a8c:	80 83       	st	Z, r24
	OCR1AL = (((bright) * uiG) >> 8);
     a8e:	ea e4       	ldi	r30, 0x4A	; 74
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	28 2f       	mov	r18, r24
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	ac 01       	movw	r20, r24
     aa0:	24 9f       	mul	r18, r20
     aa2:	c0 01       	movw	r24, r0
     aa4:	25 9f       	mul	r18, r21
     aa6:	90 0d       	add	r25, r0
     aa8:	34 9f       	mul	r19, r20
     aaa:	90 0d       	add	r25, r0
     aac:	11 24       	eor	r1, r1
     aae:	89 2f       	mov	r24, r25
     ab0:	99 0f       	add	r25, r25
     ab2:	99 0b       	sbc	r25, r25
     ab4:	80 83       	st	Z, r24
	OCR2 = (((bright) * uiB) >> 8);
     ab6:	e3 e4       	ldi	r30, 0x43	; 67
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	8c 81       	ldd	r24, Y+4	; 0x04
     ac2:	88 2f       	mov	r24, r24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	ac 01       	movw	r20, r24
     ac8:	24 9f       	mul	r18, r20
     aca:	c0 01       	movw	r24, r0
     acc:	25 9f       	mul	r18, r21
     ace:	90 0d       	add	r25, r0
     ad0:	34 9f       	mul	r19, r20
     ad2:	90 0d       	add	r25, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	89 2f       	mov	r24, r25
     ad8:	99 0f       	add	r25, r25
     ada:	99 0b       	sbc	r25, r25
     adc:	80 83       	st	Z, r24
}
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	08 95       	ret

00000aec <uartPutc>:
#endif
#ifndef sbi
#define sbi(sfr, bit)     (_SFR_BYTE(sfr) |= _BV(bit))
#endif

void uartPutc(char c) {
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	0f 92       	push	r0
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
     af8:	eb e2       	ldi	r30, 0x2B	; 43
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	88 2f       	mov	r24, r24
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	80 72       	andi	r24, 0x20	; 32
     b04:	90 70       	andi	r25, 0x00	; 0
     b06:	00 97       	sbiw	r24, 0x00	; 0
     b08:	b9 f3       	breq	.-18     	; 0xaf8 <uartPutc+0xc>
		;
	UDR = c;
     b0a:	ec e2       	ldi	r30, 0x2C	; 44
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
     b10:	80 83       	st	Z, r24
}
     b12:	0f 90       	pop	r0
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <uartPuts>:

void uartPuts(char *s) {
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <uartPuts+0x6>
     b20:	00 d0       	rcall	.+0      	; 0xb22 <uartPuts+0x8>
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	9c 83       	std	Y+4, r25	; 0x04
     b28:	8b 83       	std	Y+3, r24	; 0x03
	int x = 0;
     b2a:	1a 82       	std	Y+2, r1	; 0x02
     b2c:	19 82       	std	Y+1, r1	; 0x01
     b2e:	0f c0       	rjmp	.+30     	; 0xb4e <uartPuts+0x34>
	while (s[x]) {
		uartPutc(s[x]);
     b30:	29 81       	ldd	r18, Y+1	; 0x01
     b32:	3a 81       	ldd	r19, Y+2	; 0x02
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	9c 81       	ldd	r25, Y+4	; 0x04
     b38:	fc 01       	movw	r30, r24
     b3a:	e2 0f       	add	r30, r18
     b3c:	f3 1f       	adc	r31, r19
     b3e:	80 81       	ld	r24, Z
     b40:	0e 94 76 05 	call	0xaec	; 0xaec <uartPutc>
		x++;
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	9a 83       	std	Y+2, r25	; 0x02
     b4c:	89 83       	std	Y+1, r24	; 0x01
	UDR = c;
}

void uartPuts(char *s) {
	int x = 0;
	while (s[x]) {
     b4e:	29 81       	ldd	r18, Y+1	; 0x01
     b50:	3a 81       	ldd	r19, Y+2	; 0x02
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	fc 01       	movw	r30, r24
     b58:	e2 0f       	add	r30, r18
     b5a:	f3 1f       	adc	r31, r19
     b5c:	80 81       	ld	r24, Z
     b5e:	88 23       	and	r24, r24
     b60:	39 f7       	brne	.-50     	; 0xb30 <uartPuts+0x16>
		uartPutc(s[x]);
		x++;
	}
}
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <shift32_output>:
#define SHIFT_SR_SPI_MOSI PIN5
#define SHIFT_SR_SPI_MISO PIN6
#define SHIFT_SR_SPI_RCLK PIN4
#define SHIFT_SR_SPI_SCK  PIN7

void shift32_output(uint32_t value) {
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	28 97       	sbiw	r28, 0x08	; 8
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	6d 83       	std	Y+5, r22	; 0x05
     b86:	7e 83       	std	Y+6, r23	; 0x06
     b88:	8f 83       	std	Y+7, r24	; 0x07
     b8a:	98 87       	std	Y+8, r25	; 0x08
	uint8_t u0 = (uint8_t) (value);
     b8c:	8d 81       	ldd	r24, Y+5	; 0x05
     b8e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u1 = (uint8_t) (value >> 8);
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	af 81       	ldd	r26, Y+7	; 0x07
     b96:	b8 85       	ldd	r27, Y+8	; 0x08
     b98:	89 2f       	mov	r24, r25
     b9a:	9a 2f       	mov	r25, r26
     b9c:	ab 2f       	mov	r26, r27
     b9e:	bb 27       	eor	r27, r27
     ba0:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u2 = (uint8_t) (value >> 16);
     ba2:	8d 81       	ldd	r24, Y+5	; 0x05
     ba4:	9e 81       	ldd	r25, Y+6	; 0x06
     ba6:	af 81       	ldd	r26, Y+7	; 0x07
     ba8:	b8 85       	ldd	r27, Y+8	; 0x08
     baa:	cd 01       	movw	r24, r26
     bac:	aa 27       	eor	r26, r26
     bae:	bb 27       	eor	r27, r27
     bb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u3 = (uint8_t) (value >> 24);
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	9e 81       	ldd	r25, Y+6	; 0x06
     bb6:	af 81       	ldd	r26, Y+7	; 0x07
     bb8:	b8 85       	ldd	r27, Y+8	; 0x08
     bba:	8b 2f       	mov	r24, r27
     bbc:	99 27       	eor	r25, r25
     bbe:	aa 27       	eor	r26, r26
     bc0:	bb 27       	eor	r27, r27
     bc2:	89 83       	std	Y+1, r24	; 0x01

	SPDR = u3;
     bc4:	ef e2       	ldi	r30, 0x2F	; 47
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	80 83       	st	Z, r24
	while (!(SPSR & (1 << SPIF)))
     bcc:	ee e2       	ldi	r30, 0x2E	; 46
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	88 23       	and	r24, r24
     bd4:	dc f7       	brge	.-10     	; 0xbcc <shift32_output+0x5c>
		;

	SPDR = u2;
     bd6:	ef e2       	ldi	r30, 0x2F	; 47
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	80 83       	st	Z, r24
	while (!(SPSR & (1 << SPIF)))
     bde:	ee e2       	ldi	r30, 0x2E	; 46
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 23       	and	r24, r24
     be6:	dc f7       	brge	.-10     	; 0xbde <shift32_output+0x6e>
		;

	SPDR = u1;
     be8:	ef e2       	ldi	r30, 0x2F	; 47
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	80 83       	st	Z, r24
	while (!(SPSR & (1 << SPIF)))
     bf0:	ee e2       	ldi	r30, 0x2E	; 46
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 23       	and	r24, r24
     bf8:	dc f7       	brge	.-10     	; 0xbf0 <shift32_output+0x80>
		;

	SPDR = u0;
     bfa:	ef e2       	ldi	r30, 0x2F	; 47
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	80 83       	st	Z, r24
	while (!(SPSR & (1 << SPIF)))
     c02:	ee e2       	ldi	r30, 0x2E	; 46
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	88 23       	and	r24, r24
     c0a:	dc f7       	brge	.-10     	; 0xc02 <shift32_output+0x92>
		;

	/* latch data */
	SHIFT_SR_SPI_PORT &= ~(1 << SHIFT_SR_SPI_RCLK);
     c0c:	a8 e3       	ldi	r26, 0x38	; 56
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e8 e3       	ldi	r30, 0x38	; 56
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8f 7e       	andi	r24, 0xEF	; 239
     c18:	8c 93       	st	X, r24
	SHIFT_SR_SPI_PORT |= (1 << SHIFT_SR_SPI_RCLK);
     c1a:	a8 e3       	ldi	r26, 0x38	; 56
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 e3       	ldi	r30, 0x38	; 56
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	80 61       	ori	r24, 0x10	; 16
     c26:	8c 93       	st	X, r24
}
     c28:	28 96       	adiw	r28, 0x08	; 8
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <shift_init>:

void shift_init(void) {
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	SHIFT_SR_SPI_DDR |= (1 << SHIFT_SR_SPI_MOSI) | (1 << SHIFT_SR_SPI_RCLK)
     c42:	a7 e3       	ldi	r26, 0x37	; 55
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e3       	ldi	r30, 0x37	; 55
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 6b       	ori	r24, 0xB0	; 176
     c4e:	8c 93       	st	X, r24
			| (1 << SHIFT_SR_SPI_SCK);
	SHIFT_SR_SPI_DDR &= ~(1 << SHIFT_SR_SPI_MISO); /* MISO muss eingang sein */
     c50:	a7 e3       	ldi	r26, 0x37	; 55
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e7 e3       	ldi	r30, 0x37	; 55
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	8f 7b       	andi	r24, 0xBF	; 191
     c5c:	8c 93       	st	X, r24
	SHIFT_SR_SPI_PORT |= (1 << SHIFT_SR_SPI_RCLK) | (1 << SHIFT_SR_SPI_MISO);
     c5e:	a8 e3       	ldi	r26, 0x38	; 56
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e8 e3       	ldi	r30, 0x38	; 56
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	80 65       	ori	r24, 0x50	; 80
     c6a:	8c 93       	st	X, r24

	SPCR = (1 << SPE) | (1 << MSTR) | (1 << CPOL) | (1 << SPR0) | (1 << SPR1);
     c6c:	ed e2       	ldi	r30, 0x2D	; 45
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	8b e5       	ldi	r24, 0x5B	; 91
     c72:	80 83       	st	Z, r24

	SPSR |= (1 << SPI2X);
     c74:	ae e2       	ldi	r26, 0x2E	; 46
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	ee e2       	ldi	r30, 0x2E	; 46
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	8c 93       	st	X, r24

	shift32_output(0); /* send dummybytes to intialize */
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 b8 05 	call	0xb70	; 0xb70 <shift32_output>
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <main>:

int main() {
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	c9 5c       	subi	r28, 0xC9	; 201
     ca2:	d0 40       	sbci	r29, 0x00	; 0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61

	cli();
     cae:	f8 94       	cli

	UBRRH = 0x00;
     cb0:	e0 e4       	ldi	r30, 0x40	; 64
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	10 82       	st	Z, r1
	UBRRL = 0x08;
     cb6:	e9 e2       	ldi	r30, 0x29	; 41
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	88 e0       	ldi	r24, 0x08	; 8
     cbc:	80 83       	st	Z, r24

	UCSRB |= (1 << TXEN);
     cbe:	aa e2       	ldi	r26, 0x2A	; 42
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ea e2       	ldi	r30, 0x2A	; 42
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	88 60       	ori	r24, 0x08	; 8
     cca:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
     ccc:	a0 e4       	ldi	r26, 0x40	; 64
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e0 e4       	ldi	r30, 0x40	; 64
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	86 68       	ori	r24, 0x86	; 134
     cd8:	8c 93       	st	X, r24

	uartPuts("WordClock V0.1 initializing...\r\n");
     cda:	86 e8       	ldi	r24, 0x86	; 134
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>

	//	PORTA |= (1 << PA7) | (1 << PA6);
	//	DDRA = 0;

	uartPuts("\r\n... PWM");
     ce2:	87 ea       	ldi	r24, 0xA7	; 167
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
	InitPWM();
     cea:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <InitPWM>
	SetColor(0xFF, 0xFF, 0x01, 0x01);
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	6f ef       	ldi	r22, 0xFF	; 255
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	21 e0       	ldi	r18, 0x01	; 1
     cf6:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
	uartPuts("\r\n... Shifter");
     cfa:	81 eb       	ldi	r24, 0xB1	; 177
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
	shift_init();
     d02:	0e 94 1d 06 	call	0xc3a	; 0xc3a <shift_init>
	SetColor(0xFF, 0xFF, 0xFF, 0x01);
     d06:	8f ef       	ldi	r24, 0xFF	; 255
     d08:	6f ef       	ldi	r22, 0xFF	; 255
     d0a:	4f ef       	ldi	r20, 0xFF	; 255
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
	uartPuts("\r\n... LDR ADC");
     d12:	8f eb       	ldi	r24, 0xBF	; 191
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
	ldr_init();
     d1a:	0e 94 28 04 	call	0x850	; 0x850 <ldr_init>
	SetColor(0xFF, 0x01, 0xFF, 0xFF);
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	4f ef       	ldi	r20, 0xFF	; 255
     d24:	2f ef       	ldi	r18, 0xFF	; 255
     d26:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
	uartPuts("\r\n... RTC");
     d2a:	8d ec       	ldi	r24, 0xCD	; 205
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
	DATETIME time;
	uint8_t i2c_errorcode;
	uint8_t i2c_status;
	if (!i2c_rtc_init(&i2c_errorcode, &i2c_status)) // initialize rtc
     d32:	ce 01       	movw	r24, r28
     d34:	8f 59       	subi	r24, 0x9F	; 159
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	9e 01       	movw	r18, r28
     d3a:	2e 59       	subi	r18, 0x9E	; 158
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
     d3e:	b9 01       	movw	r22, r18
     d40:	0e 94 d6 03 	call	0x7ac	; 0x7ac <i2c_rtc_init>
     d44:	88 23       	and	r24, r24
     d46:	09 f0       	breq	.+2      	; 0xd4a <main+0xb6>
     d48:	22 c1       	rjmp	.+580    	; 0xf8e <main+0x2fa>
	{
		uartPuts(" FAILED !!!\r\n");
     d4a:	87 ed       	ldi	r24, 0xD7	; 215
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
		for (int uiCount = 0; uiCount < 10; uiCount++) {
     d52:	fe 01       	movw	r30, r28
     d54:	e6 5b       	subi	r30, 0xB6	; 182
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	11 82       	std	Z+1, r1	; 0x01
     d5a:	10 82       	st	Z, r1
     d5c:	0f c1       	rjmp	.+542    	; 0xf7c <main+0x2e8>
			SetColor(0xFF, 0x01, 0x01, 0x01);
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
     d6a:	fe 01       	movw	r30, r28
     d6c:	ed 5b       	subi	r30, 0xBD	; 189
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 ea       	ldi	r26, 0xA0	; 160
     d76:	b1 e4       	ldi	r27, 0x41	; 65
     d78:	80 83       	st	Z, r24
     d7a:	91 83       	std	Z+1, r25	; 0x01
     d7c:	a2 83       	std	Z+2, r26	; 0x02
     d7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d80:	8e 01       	movw	r16, r28
     d82:	01 5c       	subi	r16, 0xC1	; 193
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	fe 01       	movw	r30, r28
     d88:	ed 5b       	subi	r30, 0xBD	; 189
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	4a e7       	ldi	r20, 0x7A	; 122
     d9a:	55 e4       	ldi	r21, 0x45	; 69
     d9c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	f8 01       	movw	r30, r16
     da6:	80 83       	st	Z, r24
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	a2 83       	std	Z+2, r26	; 0x02
     dac:	b3 83       	std	Z+3, r27	; 0x03
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     dae:	fe 01       	movw	r30, r28
     db0:	ff 96       	adiw	r30, 0x3f	; 63
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e8       	ldi	r20, 0x80	; 128
     dc0:	5f e3       	ldi	r21, 0x3F	; 63
     dc2:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__ltsf2>
     dc6:	88 23       	and	r24, r24
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <main+0x140>
		__ticks = 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9e af       	std	Y+62, r25	; 0x3e
     dd0:	8d af       	std	Y+61, r24	; 0x3d
     dd2:	46 c0       	rjmp	.+140    	; 0xe60 <main+0x1cc>
	else if (__tmp > 65535)
     dd4:	fe 01       	movw	r30, r28
     dd6:	ff 96       	adiw	r30, 0x3f	; 63
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	3f ef       	ldi	r19, 0xFF	; 255
     de4:	4f e7       	ldi	r20, 0x7F	; 127
     de6:	57 e4       	ldi	r21, 0x47	; 71
     de8:	0e 94 1a 10 	call	0x2034	; 0x2034 <__gtsf2>
     dec:	18 16       	cp	r1, r24
     dee:	64 f5       	brge	.+88     	; 0xe48 <main+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df0:	fe 01       	movw	r30, r28
     df2:	ed 5b       	subi	r30, 0xBD	; 189
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	60 81       	ld	r22, Z
     df8:	71 81       	ldd	r23, Z+1	; 0x01
     dfa:	82 81       	ldd	r24, Z+2	; 0x02
     dfc:	93 81       	ldd	r25, Z+3	; 0x03
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e2       	ldi	r20, 0x20	; 32
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9e af       	std	Y+62, r25	; 0x3e
     e1c:	8d af       	std	Y+61, r24	; 0x3d
     e1e:	0f c0       	rjmp	.+30     	; 0xe3e <main+0x1aa>
     e20:	80 e9       	ldi	r24, 0x90	; 144
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	9c af       	std	Y+60, r25	; 0x3c
     e26:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e28:	8b ad       	ldd	r24, Y+59	; 0x3b
     e2a:	9c ad       	ldd	r25, Y+60	; 0x3c
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <main+0x198>
     e30:	9c af       	std	Y+60, r25	; 0x3c
     e32:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e34:	8d ad       	ldd	r24, Y+61	; 0x3d
     e36:	9e ad       	ldd	r25, Y+62	; 0x3e
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	9e af       	std	Y+62, r25	; 0x3e
     e3c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3e:	8d ad       	ldd	r24, Y+61	; 0x3d
     e40:	9e ad       	ldd	r25, Y+62	; 0x3e
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	69 f7       	brne	.-38     	; 0xe20 <main+0x18c>
     e46:	16 c0       	rjmp	.+44     	; 0xe74 <main+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e48:	fe 01       	movw	r30, r28
     e4a:	ff 96       	adiw	r30, 0x3f	; 63
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	9e af       	std	Y+62, r25	; 0x3e
     e5e:	8d af       	std	Y+61, r24	; 0x3d
     e60:	8d ad       	ldd	r24, Y+61	; 0x3d
     e62:	9e ad       	ldd	r25, Y+62	; 0x3e
     e64:	9a af       	std	Y+58, r25	; 0x3a
     e66:	89 af       	std	Y+57, r24	; 0x39
     e68:	89 ad       	ldd	r24, Y+57	; 0x39
     e6a:	9a ad       	ldd	r25, Y+58	; 0x3a
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <main+0x1d8>
     e70:	9a af       	std	Y+58, r25	; 0x3a
     e72:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(20);
			SetColor(0xFF, 0xff, 0xff, 0xff);
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	6f ef       	ldi	r22, 0xFF	; 255
     e78:	4f ef       	ldi	r20, 0xFF	; 255
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 ea       	ldi	r26, 0xA0	; 160
     e86:	b1 e4       	ldi	r27, 0x41	; 65
     e88:	8d ab       	std	Y+53, r24	; 0x35
     e8a:	9e ab       	std	Y+54, r25	; 0x36
     e8c:	af ab       	std	Y+55, r26	; 0x37
     e8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e90:	6d a9       	ldd	r22, Y+53	; 0x35
     e92:	7e a9       	ldd	r23, Y+54	; 0x36
     e94:	8f a9       	ldd	r24, Y+55	; 0x37
     e96:	98 ad       	ldd	r25, Y+56	; 0x38
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a e7       	ldi	r20, 0x7A	; 122
     e9e:	55 e4       	ldi	r21, 0x45	; 69
     ea0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	89 ab       	std	Y+49, r24	; 0x31
     eaa:	9a ab       	std	Y+50, r25	; 0x32
     eac:	ab ab       	std	Y+51, r26	; 0x33
     eae:	bc ab       	std	Y+52, r27	; 0x34
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
     eb0:	69 a9       	ldd	r22, Y+49	; 0x31
     eb2:	7a a9       	ldd	r23, Y+50	; 0x32
     eb4:	8b a9       	ldd	r24, Y+51	; 0x33
     eb6:	9c a9       	ldd	r25, Y+52	; 0x34
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__ltsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	2c f4       	brge	.+10     	; 0xed2 <main+0x23e>
		__ticks = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	98 ab       	std	Y+48, r25	; 0x30
     ece:	8f a7       	std	Y+47, r24	; 0x2f
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <main+0x2bc>
	else if (__tmp > 65535)
     ed2:	69 a9       	ldd	r22, Y+49	; 0x31
     ed4:	7a a9       	ldd	r23, Y+50	; 0x32
     ed6:	8b a9       	ldd	r24, Y+51	; 0x33
     ed8:	9c a9       	ldd	r25, Y+52	; 0x34
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	3f ef       	ldi	r19, 0xFF	; 255
     ede:	4f e7       	ldi	r20, 0x7F	; 127
     ee0:	57 e4       	ldi	r21, 0x47	; 71
     ee2:	0e 94 1a 10 	call	0x2034	; 0x2034 <__gtsf2>
     ee6:	18 16       	cp	r1, r24
     ee8:	4c f5       	brge	.+82     	; 0xf3c <main+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eea:	6d a9       	ldd	r22, Y+53	; 0x35
     eec:	7e a9       	ldd	r23, Y+54	; 0x36
     eee:	8f a9       	ldd	r24, Y+55	; 0x37
     ef0:	98 ad       	ldd	r25, Y+56	; 0x38
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	98 ab       	std	Y+48, r25	; 0x30
     f10:	8f a7       	std	Y+47, r24	; 0x2f
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <main+0x29e>
     f14:	80 e9       	ldi	r24, 0x90	; 144
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	9e a7       	std	Y+46, r25	; 0x2e
     f1a:	8d a7       	std	Y+45, r24	; 0x2d
     f1c:	8d a5       	ldd	r24, Y+45	; 0x2d
     f1e:	9e a5       	ldd	r25, Y+46	; 0x2e
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <main+0x28c>
     f24:	9e a7       	std	Y+46, r25	; 0x2e
     f26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f28:	8f a5       	ldd	r24, Y+47	; 0x2f
     f2a:	98 a9       	ldd	r25, Y+48	; 0x30
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	98 ab       	std	Y+48, r25	; 0x30
     f30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f32:	8f a5       	ldd	r24, Y+47	; 0x2f
     f34:	98 a9       	ldd	r25, Y+48	; 0x30
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	69 f7       	brne	.-38     	; 0xf14 <main+0x280>
     f3a:	14 c0       	rjmp	.+40     	; 0xf64 <main+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3c:	69 a9       	ldd	r22, Y+49	; 0x31
     f3e:	7a a9       	ldd	r23, Y+50	; 0x32
     f40:	8b a9       	ldd	r24, Y+51	; 0x33
     f42:	9c a9       	ldd	r25, Y+52	; 0x34
     f44:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	98 ab       	std	Y+48, r25	; 0x30
     f4e:	8f a7       	std	Y+47, r24	; 0x2f
     f50:	8f a5       	ldd	r24, Y+47	; 0x2f
     f52:	98 a9       	ldd	r25, Y+48	; 0x30
     f54:	9c a7       	std	Y+44, r25	; 0x2c
     f56:	8b a7       	std	Y+43, r24	; 0x2b
     f58:	8b a5       	ldd	r24, Y+43	; 0x2b
     f5a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <main+0x2c8>
     f60:	9c a7       	std	Y+44, r25	; 0x2c
     f62:	8b a7       	std	Y+43, r24	; 0x2b
	uint8_t i2c_errorcode;
	uint8_t i2c_status;
	if (!i2c_rtc_init(&i2c_errorcode, &i2c_status)) // initialize rtc
	{
		uartPuts(" FAILED !!!\r\n");
		for (int uiCount = 0; uiCount < 10; uiCount++) {
     f64:	de 01       	movw	r26, r28
     f66:	a6 5b       	subi	r26, 0xB6	; 182
     f68:	bf 4f       	sbci	r27, 0xFF	; 255
     f6a:	fe 01       	movw	r30, r28
     f6c:	e6 5b       	subi	r30, 0xB6	; 182
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	11 96       	adiw	r26, 0x01	; 1
     f78:	9c 93       	st	X, r25
     f7a:	8e 93       	st	-X, r24
     f7c:	fe 01       	movw	r30, r28
     f7e:	e6 5b       	subi	r30, 0xB6	; 182
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	8a 30       	cpi	r24, 0x0A	; 10
     f88:	91 05       	cpc	r25, r1
     f8a:	0c f4       	brge	.+2      	; 0xf8e <main+0x2fa>
     f8c:	e8 ce       	rjmp	.-560    	; 0xd5e <main+0xca>
			SetColor(0xFF, 0xff, 0xff, 0xff);
			_delay_ms(20);
		}
	}

	uint8_t dst = 0;
     f8e:	fe 01       	movw	r30, r28
     f90:	ed 59       	subi	r30, 0x9D	; 157
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	10 82       	st	Z, r1
	int res = i2c_rtc_sram_read(0x10, &dst, 1);
     f96:	9e 01       	movw	r18, r28
     f98:	2d 59       	subi	r18, 0x9D	; 157
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	80 e1       	ldi	r24, 0x10	; 16
     f9e:	b9 01       	movw	r22, r18
     fa0:	41 e0       	ldi	r20, 0x01	; 1
     fa2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <i2c_rtc_sram_read>
     fa6:	fe 01       	movw	r30, r28
     fa8:	e8 5a       	subi	r30, 0xA8	; 168
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
	if (!res) {
     fb4:	fe 01       	movw	r30, r28
     fb6:	e8 5a       	subi	r30, 0xA8	; 168
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	29 f4       	brne	.+10     	; 0xfcc <main+0x338>
		uartPuts("RTC error\r\n");
     fc2:	85 ee       	ldi	r24, 0xE5	; 229
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
     fca:	6c c0       	rjmp	.+216    	; 0x10a4 <main+0x410>
	} else {
		if (dst != 1 && dst != 2) {
     fcc:	fe 01       	movw	r30, r28
     fce:	ed 59       	subi	r30, 0x9D	; 157
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	d1 f0       	breq	.+52     	; 0x100c <main+0x378>
     fd8:	fe 01       	movw	r30, r28
     fda:	ed 59       	subi	r30, 0x9D	; 157
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 81       	ld	r24, Z
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	a1 f0       	breq	.+40     	; 0x100c <main+0x378>
			dst = 1;
     fe4:	fe 01       	movw	r30, r28
     fe6:	ed 59       	subi	r30, 0x9D	; 157
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	80 83       	st	Z, r24
			res = i2c_rtc_sram_write(0x10, &dst, 1);
     fee:	9e 01       	movw	r18, r28
     ff0:	2d 59       	subi	r18, 0x9D	; 157
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	80 e1       	ldi	r24, 0x10	; 16
     ff6:	b9 01       	movw	r22, r18
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <i2c_rtc_sram_write>
     ffe:	fe 01       	movw	r30, r28
    1000:	e8 5a       	subi	r30, 0xA8	; 168
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
		}
		char s[100];
		char *state = ((dst == 1) ? "inactive" : "active");
    100c:	fe 01       	movw	r30, r28
    100e:	ed 59       	subi	r30, 0x9D	; 157
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	80 81       	ld	r24, Z
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	49 f4       	brne	.+18     	; 0x102a <main+0x396>
    1018:	81 ef       	ldi	r24, 0xF1	; 241
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	c8 53       	subi	r28, 0x38	; 56
    101e:	df 4f       	sbci	r29, 0xFF	; 255
    1020:	99 83       	std	Y+1, r25	; 0x01
    1022:	88 83       	st	Y, r24
    1024:	c8 5c       	subi	r28, 0xC8	; 200
    1026:	d0 40       	sbci	r29, 0x00	; 0
    1028:	08 c0       	rjmp	.+16     	; 0x103a <main+0x3a6>
    102a:	ea ef       	ldi	r30, 0xFA	; 250
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	c8 53       	subi	r28, 0x38	; 56
    1030:	df 4f       	sbci	r29, 0xFF	; 255
    1032:	f9 83       	std	Y+1, r31	; 0x01
    1034:	e8 83       	st	Y, r30
    1036:	c8 5c       	subi	r28, 0xC8	; 200
    1038:	d0 40       	sbci	r29, 0x00	; 0
    103a:	fe 01       	movw	r30, r28
    103c:	e8 5b       	subi	r30, 0xB8	; 184
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	c8 53       	subi	r28, 0x38	; 56
    1042:	df 4f       	sbci	r29, 0xFF	; 255
    1044:	88 81       	ld	r24, Y
    1046:	99 81       	ldd	r25, Y+1	; 0x01
    1048:	c8 5c       	subi	r28, 0xC8	; 200
    104a:	d0 40       	sbci	r29, 0x00	; 0
    104c:	91 83       	std	Z+1, r25	; 0x01
    104e:	80 83       	st	Z, r24
		sprintf(s, "\r\nDST: %s\r\n", state);
    1050:	00 d0       	rcall	.+0      	; 0x1052 <main+0x3be>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <main+0x3c0>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <main+0x3c2>
    1056:	ad b7       	in	r26, 0x3d	; 61
    1058:	be b7       	in	r27, 0x3e	; 62
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	ce 01       	movw	r24, r28
    105e:	8c 59       	subi	r24, 0x9C	; 156
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	11 96       	adiw	r26, 0x01	; 1
    1064:	9c 93       	st	X, r25
    1066:	8e 93       	st	-X, r24
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	13 96       	adiw	r26, 0x03	; 3
    106e:	9c 93       	st	X, r25
    1070:	8e 93       	st	-X, r24
    1072:	12 97       	sbiw	r26, 0x02	; 2
    1074:	fe 01       	movw	r30, r28
    1076:	e8 5b       	subi	r30, 0xB8	; 184
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	15 96       	adiw	r26, 0x05	; 5
    1080:	9c 93       	st	X, r25
    1082:	8e 93       	st	-X, r24
    1084:	14 97       	sbiw	r26, 0x04	; 4
    1086:	0e 94 0e 13 	call	0x261c	; 0x261c <sprintf>
    108a:	ed b7       	in	r30, 0x3d	; 61
    108c:	fe b7       	in	r31, 0x3e	; 62
    108e:	36 96       	adiw	r30, 0x06	; 6
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	fe bf       	out	0x3e, r31	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	ed bf       	out	0x3d, r30	; 61
		uartPuts(s);
    109a:	ce 01       	movw	r24, r28
    109c:	8c 59       	subi	r24, 0x9C	; 156
    109e:	9f 4f       	sbci	r25, 0xFF	; 255
    10a0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>

	}

	SetColor(0xFF, 0xFF, 0xFF, 0xFF);
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	6f ef       	ldi	r22, 0xFF	; 255
    10a8:	4f ef       	ldi	r20, 0xFF	; 255
    10aa:	2f ef       	ldi	r18, 0xFF	; 255
    10ac:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
	sei();
    10b0:	78 94       	sei

	uartPuts("\r\nReady...\r\n");
    10b2:	8d e0       	ldi	r24, 0x0D	; 13
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
	//			SetColor(0xff, 0xff, 0xff);
	//			_delay_ms(20);
	//		}
	//	}

	int uiR = 0x01;
    10ba:	fe 01       	movw	r30, r28
    10bc:	ea 5a       	subi	r30, 0xAA	; 170
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
	int uiG = 0x01;
    10c8:	fe 01       	movw	r30, r28
    10ca:	ec 5a       	subi	r30, 0xAC	; 172
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
	int uiB = 0x01;
    10d6:	fe 01       	movw	r30, r28
    10d8:	ee 5a       	subi	r30, 0xAE	; 174
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	80 83       	st	Z, r24
	int uiCount = 0;
    10e4:	fe 01       	movw	r30, r28
    10e6:	e0 5b       	subi	r30, 0xB0	; 176
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	11 82       	std	Z+1, r1	; 0x01
    10ec:	10 82       	st	Z, r1

	uint16_t Button1 = 0;
    10ee:	fe 01       	movw	r30, r28
    10f0:	e2 5b       	subi	r30, 0xB2	; 178
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	11 82       	std	Z+1, r1	; 0x01
    10f6:	10 82       	st	Z, r1
	uint16_t Button2 = 0;
    10f8:	fe 01       	movw	r30, r28
    10fa:	e4 5b       	subi	r30, 0xB4	; 180
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	11 82       	std	Z+1, r1	; 0x01
    1100:	10 82       	st	Z, r1
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a0 e2       	ldi	r26, 0x20	; 32
    1108:	b1 e4       	ldi	r27, 0x41	; 65
    110a:	8f a3       	std	Y+39, r24	; 0x27
    110c:	98 a7       	std	Y+40, r25	; 0x28
    110e:	a9 a7       	std	Y+41, r26	; 0x29
    1110:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1112:	6f a1       	ldd	r22, Y+39	; 0x27
    1114:	78 a5       	ldd	r23, Y+40	; 0x28
    1116:	89 a5       	ldd	r24, Y+41	; 0x29
    1118:	9a a5       	ldd	r25, Y+42	; 0x2a
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	4a e7       	ldi	r20, 0x7A	; 122
    1120:	55 e4       	ldi	r21, 0x45	; 69
    1122:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	8b a3       	std	Y+35, r24	; 0x23
    112c:	9c a3       	std	Y+36, r25	; 0x24
    112e:	ad a3       	std	Y+37, r26	; 0x25
    1130:	be a3       	std	Y+38, r27	; 0x26
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
    1132:	6b a1       	ldd	r22, Y+35	; 0x23
    1134:	7c a1       	ldd	r23, Y+36	; 0x24
    1136:	8d a1       	ldd	r24, Y+37	; 0x25
    1138:	9e a1       	ldd	r25, Y+38	; 0x26
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e8       	ldi	r20, 0x80	; 128
    1140:	5f e3       	ldi	r21, 0x3F	; 63
    1142:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__ltsf2>
    1146:	88 23       	and	r24, r24
    1148:	2c f4       	brge	.+10     	; 0x1154 <main+0x4c0>
		__ticks = 1;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9a a3       	std	Y+34, r25	; 0x22
    1150:	89 a3       	std	Y+33, r24	; 0x21
    1152:	3f c0       	rjmp	.+126    	; 0x11d2 <main+0x53e>
	else if (__tmp > 65535)
    1154:	6b a1       	ldd	r22, Y+35	; 0x23
    1156:	7c a1       	ldd	r23, Y+36	; 0x24
    1158:	8d a1       	ldd	r24, Y+37	; 0x25
    115a:	9e a1       	ldd	r25, Y+38	; 0x26
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	3f ef       	ldi	r19, 0xFF	; 255
    1160:	4f e7       	ldi	r20, 0x7F	; 127
    1162:	57 e4       	ldi	r21, 0x47	; 71
    1164:	0e 94 1a 10 	call	0x2034	; 0x2034 <__gtsf2>
    1168:	18 16       	cp	r1, r24
    116a:	4c f5       	brge	.+82     	; 0x11be <main+0x52a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116c:	6f a1       	ldd	r22, Y+39	; 0x27
    116e:	78 a5       	ldd	r23, Y+40	; 0x28
    1170:	89 a5       	ldd	r24, Y+41	; 0x29
    1172:	9a a5       	ldd	r25, Y+42	; 0x2a
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e2       	ldi	r20, 0x20	; 32
    117a:	51 e4       	ldi	r21, 0x41	; 65
    117c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	bc 01       	movw	r22, r24
    1186:	cd 01       	movw	r24, r26
    1188:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	9a a3       	std	Y+34, r25	; 0x22
    1192:	89 a3       	std	Y+33, r24	; 0x21
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <main+0x520>
    1196:	80 e9       	ldi	r24, 0x90	; 144
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	98 a3       	std	Y+32, r25	; 0x20
    119c:	8f 8f       	std	Y+31, r24	; 0x1f
    119e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11a0:	98 a1       	ldd	r25, Y+32	; 0x20
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <main+0x50e>
    11a6:	98 a3       	std	Y+32, r25	; 0x20
    11a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11aa:	89 a1       	ldd	r24, Y+33	; 0x21
    11ac:	9a a1       	ldd	r25, Y+34	; 0x22
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	9a a3       	std	Y+34, r25	; 0x22
    11b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b4:	89 a1       	ldd	r24, Y+33	; 0x21
    11b6:	9a a1       	ldd	r25, Y+34	; 0x22
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	69 f7       	brne	.-38     	; 0x1196 <main+0x502>
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <main+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11be:	6b a1       	ldd	r22, Y+35	; 0x23
    11c0:	7c a1       	ldd	r23, Y+36	; 0x24
    11c2:	8d a1       	ldd	r24, Y+37	; 0x25
    11c4:	9e a1       	ldd	r25, Y+38	; 0x26
    11c6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9a a3       	std	Y+34, r25	; 0x22
    11d0:	89 a3       	std	Y+33, r24	; 0x21
    11d2:	89 a1       	ldd	r24, Y+33	; 0x21
    11d4:	9a a1       	ldd	r25, Y+34	; 0x22
    11d6:	9e 8f       	std	Y+30, r25	; 0x1e
    11d8:	8d 8f       	std	Y+29, r24	; 0x1d
    11da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <main+0x54a>
    11e2:	9e 8f       	std	Y+30, r25	; 0x1e
    11e4:	8d 8f       	std	Y+29, r24	; 0x1d

	while (1) {

		_delay_ms(10);
		uiCount++;
    11e6:	de 01       	movw	r26, r28
    11e8:	a0 5b       	subi	r26, 0xB0	; 176
    11ea:	bf 4f       	sbci	r27, 0xFF	; 255
    11ec:	fe 01       	movw	r30, r28
    11ee:	e0 5b       	subi	r30, 0xB0	; 176
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	80 81       	ld	r24, Z
    11f4:	91 81       	ldd	r25, Z+1	; 0x01
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	8d 93       	st	X+, r24
    11fa:	9c 93       	st	X, r25

		ldr_read();
    11fc:	0e 94 98 04 	call	0x930	; 0x930 <ldr_read>
		uint8_t bright = ldr_get_brightness();
    1200:	0e 94 83 04 	call	0x906	; 0x906 <ldr_get_brightness>
    1204:	fe 01       	movw	r30, r28
    1206:	e9 5b       	subi	r30, 0xB9	; 185
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	80 83       	st	Z, r24
		if (bright < 64) {
    120c:	fe 01       	movw	r30, r28
    120e:	e9 5b       	subi	r30, 0xB9	; 185
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	80 81       	ld	r24, Z
    1214:	80 34       	cpi	r24, 0x40	; 64
    1216:	50 f4       	brcc	.+20     	; 0x122c <main+0x598>
			bright = (bright >> 1) + 32;
    1218:	fe 01       	movw	r30, r28
    121a:	e9 5b       	subi	r30, 0xB9	; 185
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	80 81       	ld	r24, Z
    1220:	86 95       	lsr	r24
    1222:	fe 01       	movw	r30, r28
    1224:	e9 5b       	subi	r30, 0xB9	; 185
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 5e       	subi	r24, 0xE0	; 224
    122a:	80 83       	st	Z, r24
		}
		SetColor(bright, uiR, uiG, uiB);
    122c:	fe 01       	movw	r30, r28
    122e:	ea 5a       	subi	r30, 0xAA	; 170
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	20 81       	ld	r18, Z
    1234:	fe 01       	movw	r30, r28
    1236:	ec 5a       	subi	r30, 0xAC	; 172
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	30 81       	ld	r19, Z
    123c:	fe 01       	movw	r30, r28
    123e:	ee 5a       	subi	r30, 0xAE	; 174
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	90 81       	ld	r25, Z
    1244:	fe 01       	movw	r30, r28
    1246:	e9 5b       	subi	r30, 0xB9	; 185
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	80 81       	ld	r24, Z
    124c:	62 2f       	mov	r22, r18
    124e:	43 2f       	mov	r20, r19
    1250:	29 2f       	mov	r18, r25
    1252:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>

		if (uiCount % 10) {
    1256:	fe 01       	movw	r30, r28
    1258:	e0 5b       	subi	r30, 0xB0	; 176
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	2a e0       	ldi	r18, 0x0A	; 10
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	b9 01       	movw	r22, r18
    1266:	0e 94 c4 12 	call	0x2588	; 0x2588 <__divmodhi4>
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <main+0x5dc>
    126e:	49 cf       	rjmp	.-366    	; 0x1102 <main+0x46e>
			continue;
		}

		if (!(PINA & (1 << PA7))) {
    1270:	e9 e3       	ldi	r30, 0x39	; 57
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 23       	and	r24, r24
    1278:	6c f0       	brlt	.+26     	; 0x1294 <main+0x600>
			Button1++;
    127a:	de 01       	movw	r26, r28
    127c:	a2 5b       	subi	r26, 0xB2	; 178
    127e:	bf 4f       	sbci	r27, 0xFF	; 255
    1280:	fe 01       	movw	r30, r28
    1282:	e2 5b       	subi	r30, 0xB2	; 178
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	11 96       	adiw	r26, 0x01	; 1
    128e:	9c 93       	st	X, r25
    1290:	8e 93       	st	-X, r24
    1292:	05 c0       	rjmp	.+10     	; 0x129e <main+0x60a>
		} else {
			Button1 = 0;
    1294:	fe 01       	movw	r30, r28
    1296:	e2 5b       	subi	r30, 0xB2	; 178
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	11 82       	std	Z+1, r1	; 0x01
    129c:	10 82       	st	Z, r1
		}

		if (!(PINA & (1 << PA6))) {
    129e:	e9 e3       	ldi	r30, 0x39	; 57
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	80 74       	andi	r24, 0x40	; 64
    12aa:	90 70       	andi	r25, 0x00	; 0
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	69 f4       	brne	.+26     	; 0x12ca <main+0x636>
			Button2++;
    12b0:	de 01       	movw	r26, r28
    12b2:	a4 5b       	subi	r26, 0xB4	; 180
    12b4:	bf 4f       	sbci	r27, 0xFF	; 255
    12b6:	fe 01       	movw	r30, r28
    12b8:	e4 5b       	subi	r30, 0xB4	; 180
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	11 96       	adiw	r26, 0x01	; 1
    12c4:	9c 93       	st	X, r25
    12c6:	8e 93       	st	-X, r24
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <main+0x640>
		} else {
			Button2 = 0;
    12ca:	fe 01       	movw	r30, r28
    12cc:	e4 5b       	subi	r30, 0xB4	; 180
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	11 82       	std	Z+1, r1	; 0x01
    12d2:	10 82       	st	Z, r1
		}

		if (Button1 > 1) {
    12d4:	fe 01       	movw	r30, r28
    12d6:	e2 5b       	subi	r30, 0xB2	; 178
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	80 81       	ld	r24, Z
    12dc:	91 81       	ldd	r25, Z+1	; 0x01
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	91 05       	cpc	r25, r1
    12e2:	08 f4       	brcc	.+2      	; 0x12e6 <main+0x652>
    12e4:	8e c0       	rjmp	.+284    	; 0x1402 <main+0x76e>
			if (((Button1 + 10) % 12) == 0 || Button1 > 36) {
    12e6:	fe 01       	movw	r30, r28
    12e8:	e2 5b       	subi	r30, 0xB2	; 178
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	0a 96       	adiw	r24, 0x0a	; 10
    12f2:	2c e0       	ldi	r18, 0x0C	; 12
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	b9 01       	movw	r22, r18
    12f8:	0e 94 b0 12 	call	0x2560	; 0x2560 <__udivmodhi4>
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	49 f0       	breq	.+18     	; 0x1312 <main+0x67e>
    1300:	fe 01       	movw	r30, r28
    1302:	e2 5b       	subi	r30, 0xB2	; 178
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	85 32       	cpi	r24, 0x25	; 37
    130c:	91 05       	cpc	r25, r1
    130e:	08 f4       	brcc	.+2      	; 0x1312 <main+0x67e>
    1310:	78 c0       	rjmp	.+240    	; 0x1402 <main+0x76e>
				uartPuts("Hour++\r\n");
    1312:	8a e1       	ldi	r24, 0x1A	; 26
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
				res = i2c_rtc_read(&time);
    131a:	ce 01       	movw	r24, r28
    131c:	86 5a       	subi	r24, 0xA6	; 166
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_rtc_read>
    1324:	fe 01       	movw	r30, r28
    1326:	e8 5a       	subi	r30, 0xA8	; 168
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	80 83       	st	Z, r24
				SetColor(bright, uiR, uiG, uiB);
    1332:	fe 01       	movw	r30, r28
    1334:	ea 5a       	subi	r30, 0xAA	; 170
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	20 81       	ld	r18, Z
    133a:	fe 01       	movw	r30, r28
    133c:	ec 5a       	subi	r30, 0xAC	; 172
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	30 81       	ld	r19, Z
    1342:	fe 01       	movw	r30, r28
    1344:	ee 5a       	subi	r30, 0xAE	; 174
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	90 81       	ld	r25, Z
    134a:	fe 01       	movw	r30, r28
    134c:	e9 5b       	subi	r30, 0xB9	; 185
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	62 2f       	mov	r22, r18
    1354:	43 2f       	mov	r20, r19
    1356:	29 2f       	mov	r18, r25
    1358:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
				time.hh++;
    135c:	fe 01       	movw	r30, r28
    135e:	e6 5a       	subi	r30, 0xA6	; 166
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	83 81       	ldd	r24, Z+3	; 0x03
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	fe 01       	movw	r30, r28
    1368:	e6 5a       	subi	r30, 0xA6	; 166
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	83 83       	std	Z+3, r24	; 0x03
				if (time.hh > 23)
    136e:	fe 01       	movw	r30, r28
    1370:	e6 5a       	subi	r30, 0xA6	; 166
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	83 81       	ldd	r24, Z+3	; 0x03
    1376:	88 31       	cpi	r24, 0x18	; 24
    1378:	20 f0       	brcs	.+8      	; 0x1382 <main+0x6ee>
					time.hh = 0;
    137a:	fe 01       	movw	r30, r28
    137c:	e6 5a       	subi	r30, 0xA6	; 166
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	13 82       	std	Z+3, r1	; 0x03
				i2c_rtc_write(&time);
    1382:	ce 01       	movw	r24, r28
    1384:	86 5a       	subi	r24, 0xA6	; 166
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_rtc_write>
				char s[100];
				sprintf(s, "time : %02d:%02d:%02d\r\n", time.hh, time.mm,
    138c:	fe 01       	movw	r30, r28
    138e:	e6 5a       	subi	r30, 0xA6	; 166
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	83 81       	ldd	r24, Z+3	; 0x03
    1394:	48 2f       	mov	r20, r24
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	fe 01       	movw	r30, r28
    139a:	e6 5a       	subi	r30, 0xA6	; 166
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	84 81       	ldd	r24, Z+4	; 0x04
    13a0:	68 2f       	mov	r22, r24
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	fe 01       	movw	r30, r28
    13a6:	e6 5a       	subi	r30, 0xA6	; 166
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	85 81       	ldd	r24, Z+5	; 0x05
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	8d b7       	in	r24, 0x3d	; 61
    13b2:	9e b7       	in	r25, 0x3e	; 62
    13b4:	0a 97       	sbiw	r24, 0x0a	; 10
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	9e bf       	out	0x3e, r25	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	8d bf       	out	0x3d, r24	; 61
    13c0:	ed b7       	in	r30, 0x3d	; 61
    13c2:	fe b7       	in	r31, 0x3e	; 62
    13c4:	31 96       	adiw	r30, 0x01	; 1
    13c6:	ce 01       	movw	r24, r28
    13c8:	8c 59       	subi	r24, 0x9C	; 156
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	80 83       	st	Z, r24
    13d0:	83 e2       	ldi	r24, 0x23	; 35
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	93 83       	std	Z+3, r25	; 0x03
    13d6:	82 83       	std	Z+2, r24	; 0x02
    13d8:	55 83       	std	Z+5, r21	; 0x05
    13da:	44 83       	std	Z+4, r20	; 0x04
    13dc:	77 83       	std	Z+7, r23	; 0x07
    13de:	66 83       	std	Z+6, r22	; 0x06
    13e0:	31 87       	std	Z+9, r19	; 0x09
    13e2:	20 87       	std	Z+8, r18	; 0x08
    13e4:	0e 94 0e 13 	call	0x261c	; 0x261c <sprintf>
    13e8:	ed b7       	in	r30, 0x3d	; 61
    13ea:	fe b7       	in	r31, 0x3e	; 62
    13ec:	3a 96       	adiw	r30, 0x0a	; 10
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	fe bf       	out	0x3e, r31	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	ed bf       	out	0x3d, r30	; 61
						time.ss);
				uartPuts(s);
    13f8:	ce 01       	movw	r24, r28
    13fa:	8c 59       	subi	r24, 0x9C	; 156
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
			}
		}

		if (Button2 > 1) {
    1402:	fe 01       	movw	r30, r28
    1404:	e4 5b       	subi	r30, 0xB4	; 180
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	91 05       	cpc	r25, r1
    1410:	08 f4       	brcc	.+2      	; 0x1414 <main+0x780>
    1412:	92 c0       	rjmp	.+292    	; 0x1538 <main+0x8a4>
			if (((Button2 + 10) % 12) == 0 || Button2 > 36) {
    1414:	fe 01       	movw	r30, r28
    1416:	e4 5b       	subi	r30, 0xB4	; 180
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	0a 96       	adiw	r24, 0x0a	; 10
    1420:	2c e0       	ldi	r18, 0x0C	; 12
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	b9 01       	movw	r22, r18
    1426:	0e 94 b0 12 	call	0x2560	; 0x2560 <__udivmodhi4>
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	49 f0       	breq	.+18     	; 0x1440 <main+0x7ac>
    142e:	fe 01       	movw	r30, r28
    1430:	e4 5b       	subi	r30, 0xB4	; 180
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	80 81       	ld	r24, Z
    1436:	91 81       	ldd	r25, Z+1	; 0x01
    1438:	85 32       	cpi	r24, 0x25	; 37
    143a:	91 05       	cpc	r25, r1
    143c:	08 f4       	brcc	.+2      	; 0x1440 <main+0x7ac>
    143e:	7c c0       	rjmp	.+248    	; 0x1538 <main+0x8a4>
				uartPuts("Min++\r\n");
    1440:	8b e3       	ldi	r24, 0x3B	; 59
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
				res = i2c_rtc_read(&time);
    1448:	ce 01       	movw	r24, r28
    144a:	86 5a       	subi	r24, 0xA6	; 166
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_rtc_read>
    1452:	fe 01       	movw	r30, r28
    1454:	e8 5a       	subi	r30, 0xA8	; 168
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
				SetColor(bright, uiR, uiG, uiB);
    1460:	fe 01       	movw	r30, r28
    1462:	ea 5a       	subi	r30, 0xAA	; 170
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	20 81       	ld	r18, Z
    1468:	fe 01       	movw	r30, r28
    146a:	ec 5a       	subi	r30, 0xAC	; 172
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	30 81       	ld	r19, Z
    1470:	fe 01       	movw	r30, r28
    1472:	ee 5a       	subi	r30, 0xAE	; 174
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	90 81       	ld	r25, Z
    1478:	fe 01       	movw	r30, r28
    147a:	e9 5b       	subi	r30, 0xB9	; 185
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 81       	ld	r24, Z
    1480:	62 2f       	mov	r22, r18
    1482:	43 2f       	mov	r20, r19
    1484:	29 2f       	mov	r18, r25
    1486:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
				time.mm++;
    148a:	fe 01       	movw	r30, r28
    148c:	e6 5a       	subi	r30, 0xA6	; 166
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	84 81       	ldd	r24, Z+4	; 0x04
    1492:	8f 5f       	subi	r24, 0xFF	; 255
    1494:	fe 01       	movw	r30, r28
    1496:	e6 5a       	subi	r30, 0xA6	; 166
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	84 83       	std	Z+4, r24	; 0x04
				time.ss = 0;
    149c:	fe 01       	movw	r30, r28
    149e:	e6 5a       	subi	r30, 0xA6	; 166
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	15 82       	std	Z+5, r1	; 0x05
				if (time.mm > 59)
    14a4:	fe 01       	movw	r30, r28
    14a6:	e6 5a       	subi	r30, 0xA6	; 166
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	84 81       	ldd	r24, Z+4	; 0x04
    14ac:	8c 33       	cpi	r24, 0x3C	; 60
    14ae:	20 f0       	brcs	.+8      	; 0x14b8 <main+0x824>
					time.mm = 0;
    14b0:	fe 01       	movw	r30, r28
    14b2:	e6 5a       	subi	r30, 0xA6	; 166
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	14 82       	std	Z+4, r1	; 0x04
				i2c_rtc_write(&time);
    14b8:	ce 01       	movw	r24, r28
    14ba:	86 5a       	subi	r24, 0xA6	; 166
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_rtc_write>
				char s[100];
				sprintf(s, "time : %02d:%02d:%02d\r\n", time.hh, time.mm,
    14c2:	fe 01       	movw	r30, r28
    14c4:	e6 5a       	subi	r30, 0xA6	; 166
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	83 81       	ldd	r24, Z+3	; 0x03
    14ca:	48 2f       	mov	r20, r24
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	fe 01       	movw	r30, r28
    14d0:	e6 5a       	subi	r30, 0xA6	; 166
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	84 81       	ldd	r24, Z+4	; 0x04
    14d6:	68 2f       	mov	r22, r24
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	fe 01       	movw	r30, r28
    14dc:	e6 5a       	subi	r30, 0xA6	; 166
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	85 81       	ldd	r24, Z+5	; 0x05
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	8d b7       	in	r24, 0x3d	; 61
    14e8:	9e b7       	in	r25, 0x3e	; 62
    14ea:	0a 97       	sbiw	r24, 0x0a	; 10
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	9e bf       	out	0x3e, r25	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	8d bf       	out	0x3d, r24	; 61
    14f6:	ed b7       	in	r30, 0x3d	; 61
    14f8:	fe b7       	in	r31, 0x3e	; 62
    14fa:	31 96       	adiw	r30, 0x01	; 1
    14fc:	ce 01       	movw	r24, r28
    14fe:	8c 59       	subi	r24, 0x9C	; 156
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
    1506:	83 e2       	ldi	r24, 0x23	; 35
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	93 83       	std	Z+3, r25	; 0x03
    150c:	82 83       	std	Z+2, r24	; 0x02
    150e:	55 83       	std	Z+5, r21	; 0x05
    1510:	44 83       	std	Z+4, r20	; 0x04
    1512:	77 83       	std	Z+7, r23	; 0x07
    1514:	66 83       	std	Z+6, r22	; 0x06
    1516:	31 87       	std	Z+9, r19	; 0x09
    1518:	20 87       	std	Z+8, r18	; 0x08
    151a:	0e 94 0e 13 	call	0x261c	; 0x261c <sprintf>
    151e:	ed b7       	in	r30, 0x3d	; 61
    1520:	fe b7       	in	r31, 0x3e	; 62
    1522:	3a 96       	adiw	r30, 0x0a	; 10
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	fe bf       	out	0x3e, r31	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	ed bf       	out	0x3d, r30	; 61
						time.ss);
				uartPuts(s);
    152e:	ce 01       	movw	r24, r28
    1530:	8c 59       	subi	r24, 0x9C	; 156
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
			}
		}

		if (uiCount % 100) {
    1538:	fe 01       	movw	r30, r28
    153a:	e0 5b       	subi	r30, 0xB0	; 176
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	24 e6       	ldi	r18, 0x64	; 100
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	b9 01       	movw	r22, r18
    1548:	0e 94 c4 12 	call	0x2588	; 0x2588 <__divmodhi4>
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	09 f0       	breq	.+2      	; 0x1552 <main+0x8be>
    1550:	d8 cd       	rjmp	.-1104   	; 0x1102 <main+0x46e>
			continue;
		}

		res = i2c_rtc_read(&time);
    1552:	ce 01       	movw	r24, r28
    1554:	86 5a       	subi	r24, 0xA6	; 166
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_rtc_read>
    155c:	fe 01       	movw	r30, r28
    155e:	e8 5a       	subi	r30, 0xA8	; 168
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
		SetColor(bright, uiR, uiG, uiB);
    156a:	fe 01       	movw	r30, r28
    156c:	ea 5a       	subi	r30, 0xAA	; 170
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	20 81       	ld	r18, Z
    1572:	fe 01       	movw	r30, r28
    1574:	ec 5a       	subi	r30, 0xAC	; 172
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	30 81       	ld	r19, Z
    157a:	fe 01       	movw	r30, r28
    157c:	ee 5a       	subi	r30, 0xAE	; 174
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	90 81       	ld	r25, Z
    1582:	fe 01       	movw	r30, r28
    1584:	e9 5b       	subi	r30, 0xB9	; 185
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	62 2f       	mov	r22, r18
    158c:	43 2f       	mov	r20, r19
    158e:	29 2f       	mov	r18, r25
    1590:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
		if (!res) {
    1594:	fe 01       	movw	r30, r28
    1596:	e8 5a       	subi	r30, 0xA8	; 168
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <main+0x910>
    15a2:	0f c1       	rjmp	.+542    	; 0x17c2 <main+0xb2e>
			uartPuts("RTC error\r\n");
    15a4:	85 ee       	ldi	r24, 0xE5	; 229
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
			for (uiCount = 0; uiCount < 40; uiCount++) {
    15ac:	fe 01       	movw	r30, r28
    15ae:	e0 5b       	subi	r30, 0xB0	; 176
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	11 82       	std	Z+1, r1	; 0x01
    15b4:	10 82       	st	Z, r1
    15b6:	fc c0       	rjmp	.+504    	; 0x17b0 <main+0xb1c>
				SetColor(0x01, 0x01, 0x01, 0x01);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	21 e0       	ldi	r18, 0x01	; 1
    15c0:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a8 e4       	ldi	r26, 0x48	; 72
    15ca:	b2 e4       	ldi	r27, 0x42	; 66
    15cc:	89 8f       	std	Y+25, r24	; 0x19
    15ce:	9a 8f       	std	Y+26, r25	; 0x1a
    15d0:	ab 8f       	std	Y+27, r26	; 0x1b
    15d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d4:	69 8d       	ldd	r22, Y+25	; 0x19
    15d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a e7       	ldi	r20, 0x7A	; 122
    15e2:	55 e4       	ldi	r21, 0x45	; 69
    15e4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	8d 8b       	std	Y+21, r24	; 0x15
    15ee:	9e 8b       	std	Y+22, r25	; 0x16
    15f0:	af 8b       	std	Y+23, r26	; 0x17
    15f2:	b8 8f       	std	Y+24, r27	; 0x18
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
    15f4:	6d 89       	ldd	r22, Y+21	; 0x15
    15f6:	7e 89       	ldd	r23, Y+22	; 0x16
    15f8:	8f 89       	ldd	r24, Y+23	; 0x17
    15fa:	98 8d       	ldd	r25, Y+24	; 0x18
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	2c f4       	brge	.+10     	; 0x1616 <main+0x982>
		__ticks = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9c 8b       	std	Y+20, r25	; 0x14
    1612:	8b 8b       	std	Y+19, r24	; 0x13
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <main+0xa00>
	else if (__tmp > 65535)
    1616:	6d 89       	ldd	r22, Y+21	; 0x15
    1618:	7e 89       	ldd	r23, Y+22	; 0x16
    161a:	8f 89       	ldd	r24, Y+23	; 0x17
    161c:	98 8d       	ldd	r25, Y+24	; 0x18
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 1a 10 	call	0x2034	; 0x2034 <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	4c f5       	brge	.+82     	; 0x1680 <main+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	69 8d       	ldd	r22, Y+25	; 0x19
    1630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9c 8b       	std	Y+20, r25	; 0x14
    1654:	8b 8b       	std	Y+19, r24	; 0x13
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <main+0x9e2>
    1658:	80 e9       	ldi	r24, 0x90	; 144
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	9a 8b       	std	Y+18, r25	; 0x12
    165e:	89 8b       	std	Y+17, r24	; 0x11
    1660:	89 89       	ldd	r24, Y+17	; 0x11
    1662:	9a 89       	ldd	r25, Y+18	; 0x12
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <main+0x9d0>
    1668:	9a 8b       	std	Y+18, r25	; 0x12
    166a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166c:	8b 89       	ldd	r24, Y+19	; 0x13
    166e:	9c 89       	ldd	r25, Y+20	; 0x14
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	9c 8b       	std	Y+20, r25	; 0x14
    1674:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	8b 89       	ldd	r24, Y+19	; 0x13
    1678:	9c 89       	ldd	r25, Y+20	; 0x14
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f7       	brne	.-38     	; 0x1658 <main+0x9c4>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <main+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	6d 89       	ldd	r22, Y+21	; 0x15
    1682:	7e 89       	ldd	r23, Y+22	; 0x16
    1684:	8f 89       	ldd	r24, Y+23	; 0x17
    1686:	98 8d       	ldd	r25, Y+24	; 0x18
    1688:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9c 8b       	std	Y+20, r25	; 0x14
    1692:	8b 8b       	std	Y+19, r24	; 0x13
    1694:	8b 89       	ldd	r24, Y+19	; 0x13
    1696:	9c 89       	ldd	r25, Y+20	; 0x14
    1698:	98 8b       	std	Y+16, r25	; 0x10
    169a:	8f 87       	std	Y+15, r24	; 0x0f
    169c:	8f 85       	ldd	r24, Y+15	; 0x0f
    169e:	98 89       	ldd	r25, Y+16	; 0x10
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <main+0xa0c>
    16a4:	98 8b       	std	Y+16, r25	; 0x10
    16a6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				SetColor(0xff, 0xff, 0xff, 0xff);
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	6f ef       	ldi	r22, 0xFF	; 255
    16ac:	4f ef       	ldi	r20, 0xFF	; 255
    16ae:	2f ef       	ldi	r18, 0xFF	; 255
    16b0:	0e 94 29 05 	call	0xa52	; 0xa52 <SetColor>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a8 e4       	ldi	r26, 0x48	; 72
    16ba:	b2 e4       	ldi	r27, 0x42	; 66
    16bc:	8b 87       	std	Y+11, r24	; 0x0b
    16be:	9c 87       	std	Y+12, r25	; 0x0c
    16c0:	ad 87       	std	Y+13, r26	; 0x0d
    16c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4a e7       	ldi	r20, 0x7A	; 122
    16d2:	55 e4       	ldi	r21, 0x45	; 69
    16d4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	8f 83       	std	Y+7, r24	; 0x07
    16de:	98 87       	std	Y+8, r25	; 0x08
    16e0:	a9 87       	std	Y+9, r26	; 0x09
    16e2:	ba 87       	std	Y+10, r27	; 0x0a
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	2c f4       	brge	.+10     	; 0x1706 <main+0xa72>
		__ticks = 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	8d 83       	std	Y+5, r24	; 0x05
    1704:	3f c0       	rjmp	.+126    	; 0x1784 <main+0xaf0>
	else if (__tmp > 65535)
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	3f ef       	ldi	r19, 0xFF	; 255
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	57 e4       	ldi	r21, 0x47	; 71
    1716:	0e 94 1a 10 	call	0x2034	; 0x2034 <__gtsf2>
    171a:	18 16       	cp	r1, r24
    171c:	4c f5       	brge	.+82     	; 0x1770 <main+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1720:	7c 85       	ldd	r23, Y+12	; 0x0c
    1722:	8d 85       	ldd	r24, Y+13	; 0x0d
    1724:	9e 85       	ldd	r25, Y+14	; 0x0e
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e2       	ldi	r20, 0x20	; 32
    172c:	51 e4       	ldi	r21, 0x41	; 65
    172e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	0f c0       	rjmp	.+30     	; 0x1766 <main+0xad2>
    1748:	80 e9       	ldi	r24, 0x90	; 144
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <main+0xac0>
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	69 f7       	brne	.-38     	; 0x1748 <main+0xab4>
    176e:	14 c0       	rjmp	.+40     	; 0x1798 <main+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1770:	6f 81       	ldd	r22, Y+7	; 0x07
    1772:	78 85       	ldd	r23, Y+8	; 0x08
    1774:	89 85       	ldd	r24, Y+9	; 0x09
    1776:	9a 85       	ldd	r25, Y+10	; 0x0a
    1778:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <main+0xafc>
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01

		res = i2c_rtc_read(&time);
		SetColor(bright, uiR, uiG, uiB);
		if (!res) {
			uartPuts("RTC error\r\n");
			for (uiCount = 0; uiCount < 40; uiCount++) {
    1798:	de 01       	movw	r26, r28
    179a:	a0 5b       	subi	r26, 0xB0	; 176
    179c:	bf 4f       	sbci	r27, 0xFF	; 255
    179e:	fe 01       	movw	r30, r28
    17a0:	e0 5b       	subi	r30, 0xB0	; 176
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	11 96       	adiw	r26, 0x01	; 1
    17ac:	9c 93       	st	X, r25
    17ae:	8e 93       	st	-X, r24
    17b0:	fe 01       	movw	r30, r28
    17b2:	e0 5b       	subi	r30, 0xB0	; 176
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	88 32       	cpi	r24, 0x28	; 40
    17bc:	91 05       	cpc	r25, r1
    17be:	0c f4       	brge	.+2      	; 0x17c2 <main+0xb2e>
    17c0:	fb ce       	rjmp	.-522    	; 0x15b8 <main+0x924>
				SetColor(0xff, 0xff, 0xff, 0xff);
				_delay_ms(50);
			}
		}

		if (!(time.ss % 10)) {
    17c2:	fe 01       	movw	r30, r28
    17c4:	e6 5a       	subi	r30, 0xA6	; 166
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	85 81       	ldd	r24, Z+5	; 0x05
    17ca:	9a e0       	ldi	r25, 0x0A	; 10
    17cc:	69 2f       	mov	r22, r25
    17ce:	0e 94 a4 12 	call	0x2548	; 0x2548 <__udivmodqi4>
    17d2:	89 2f       	mov	r24, r25
    17d4:	88 23       	and	r24, r24
    17d6:	d9 f5       	brne	.+118    	; 0x184e <main+0xbba>
			char s[100];
			sprintf(s, "time : %02d:%02d:%02d\r\n", time.hh, time.mm, time.ss);
    17d8:	fe 01       	movw	r30, r28
    17da:	e6 5a       	subi	r30, 0xA6	; 166
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	83 81       	ldd	r24, Z+3	; 0x03
    17e0:	48 2f       	mov	r20, r24
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	fe 01       	movw	r30, r28
    17e6:	e6 5a       	subi	r30, 0xA6	; 166
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	84 81       	ldd	r24, Z+4	; 0x04
    17ec:	68 2f       	mov	r22, r24
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	fe 01       	movw	r30, r28
    17f2:	e6 5a       	subi	r30, 0xA6	; 166
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	85 81       	ldd	r24, Z+5	; 0x05
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	8d b7       	in	r24, 0x3d	; 61
    17fe:	9e b7       	in	r25, 0x3e	; 62
    1800:	0a 97       	sbiw	r24, 0x0a	; 10
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	9e bf       	out	0x3e, r25	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	8d bf       	out	0x3d, r24	; 61
    180c:	ed b7       	in	r30, 0x3d	; 61
    180e:	fe b7       	in	r31, 0x3e	; 62
    1810:	31 96       	adiw	r30, 0x01	; 1
    1812:	ce 01       	movw	r24, r28
    1814:	8c 59       	subi	r24, 0x9C	; 156
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
    181c:	83 e2       	ldi	r24, 0x23	; 35
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	93 83       	std	Z+3, r25	; 0x03
    1822:	82 83       	std	Z+2, r24	; 0x02
    1824:	55 83       	std	Z+5, r21	; 0x05
    1826:	44 83       	std	Z+4, r20	; 0x04
    1828:	77 83       	std	Z+7, r23	; 0x07
    182a:	66 83       	std	Z+6, r22	; 0x06
    182c:	31 87       	std	Z+9, r19	; 0x09
    182e:	20 87       	std	Z+8, r18	; 0x08
    1830:	0e 94 0e 13 	call	0x261c	; 0x261c <sprintf>
    1834:	ed b7       	in	r30, 0x3d	; 61
    1836:	fe b7       	in	r31, 0x3e	; 62
    1838:	3a 96       	adiw	r30, 0x0a	; 10
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	fe bf       	out	0x3e, r31	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	ed bf       	out	0x3d, r30	; 61
			uartPuts(s);
    1844:	ce 01       	movw	r24, r28
    1846:	8c 59       	subi	r24, 0x9C	; 156
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <uartPuts>
		}

		shift32_output((((uint32_t) 1) << (time.ss % 5)) ^ 0xffffffff);
    184e:	fe 01       	movw	r30, r28
    1850:	e6 5a       	subi	r30, 0xA6	; 166
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	85 81       	ldd	r24, Z+5	; 0x05
    1856:	95 e0       	ldi	r25, 0x05	; 5
    1858:	69 2f       	mov	r22, r25
    185a:	0e 94 a4 12 	call	0x2548	; 0x2548 <__udivmodqi4>
    185e:	89 2f       	mov	r24, r25
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a0 e0       	ldi	r26, 0x00	; 0
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <main+0xbe2>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	aa 1f       	adc	r26, r26
    1874:	bb 1f       	adc	r27, r27
    1876:	2a 95       	dec	r18
    1878:	d2 f7       	brpl	.-12     	; 0x186e <main+0xbda>
    187a:	80 95       	com	r24
    187c:	90 95       	com	r25
    187e:	a0 95       	com	r26
    1880:	b0 95       	com	r27
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 b8 05 	call	0xb70	; 0xb70 <shift32_output>

		if (time.ss < 16) {
    188a:	fe 01       	movw	r30, r28
    188c:	e6 5a       	subi	r30, 0xA6	; 166
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	85 81       	ldd	r24, Z+5	; 0x05
    1892:	80 31       	cpi	r24, 0x10	; 16
    1894:	00 f5       	brcc	.+64     	; 0x18d6 <main+0xc42>
			uiR = 0xff;
    1896:	fe 01       	movw	r30, r28
    1898:	ea 5a       	subi	r30, 0xAA	; 170
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	8f ef       	ldi	r24, 0xFF	; 255
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	80 83       	st	Z, r24
			uiG = time.ss << 4;
    18a4:	fe 01       	movw	r30, r28
    18a6:	e6 5a       	subi	r30, 0xA6	; 166
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	85 81       	ldd	r24, Z+5	; 0x05
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	fe 01       	movw	r30, r28
    18b2:	ec 5a       	subi	r30, 0xAC	; 172
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	82 95       	swap	r24
    18b8:	92 95       	swap	r25
    18ba:	90 7f       	andi	r25, 0xF0	; 240
    18bc:	98 27       	eor	r25, r24
    18be:	80 7f       	andi	r24, 0xF0	; 240
    18c0:	98 27       	eor	r25, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	80 83       	st	Z, r24
			uiB = 0x01;
    18c6:	fe 01       	movw	r30, r28
    18c8:	ee 5a       	subi	r30, 0xAE	; 174
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
    18d4:	cc c0       	rjmp	.+408    	; 0x1a6e <main+0xdda>
		} else if (time.ss < 32) {
    18d6:	fe 01       	movw	r30, r28
    18d8:	e6 5a       	subi	r30, 0xA6	; 166
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	85 81       	ldd	r24, Z+5	; 0x05
    18de:	80 32       	cpi	r24, 0x20	; 32
    18e0:	28 f5       	brcc	.+74     	; 0x192c <main+0xc98>
			uiR = 0xff - (time.ss << 4);
    18e2:	fe 01       	movw	r30, r28
    18e4:	e6 5a       	subi	r30, 0xA6	; 166
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	85 81       	ldd	r24, Z+5	; 0x05
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9c 01       	movw	r18, r24
    18f0:	22 95       	swap	r18
    18f2:	32 95       	swap	r19
    18f4:	30 7f       	andi	r19, 0xF0	; 240
    18f6:	32 27       	eor	r19, r18
    18f8:	20 7f       	andi	r18, 0xF0	; 240
    18fa:	32 27       	eor	r19, r18
    18fc:	fe 01       	movw	r30, r28
    18fe:	ea 5a       	subi	r30, 0xAA	; 170
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	82 1b       	sub	r24, r18
    1908:	93 0b       	sbc	r25, r19
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
			uiG = 0xff;
    190e:	fe 01       	movw	r30, r28
    1910:	ec 5a       	subi	r30, 0xAC	; 172
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
			uiB = 0x01;
    191c:	fe 01       	movw	r30, r28
    191e:	ee 5a       	subi	r30, 0xAE	; 174
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
    192a:	a1 c0       	rjmp	.+322    	; 0x1a6e <main+0xdda>
		} else if (time.ss < 48) {
    192c:	fe 01       	movw	r30, r28
    192e:	e6 5a       	subi	r30, 0xA6	; 166
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	85 81       	ldd	r24, Z+5	; 0x05
    1934:	80 33       	cpi	r24, 0x30	; 48
    1936:	00 f5       	brcc	.+64     	; 0x1978 <main+0xce4>
			uiR = 0x01;
    1938:	fe 01       	movw	r30, r28
    193a:	ea 5a       	subi	r30, 0xAA	; 170
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
			uiG = 0xff;
    1946:	fe 01       	movw	r30, r28
    1948:	ec 5a       	subi	r30, 0xAC	; 172
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	80 83       	st	Z, r24
			uiB = time.ss << 4;
    1954:	fe 01       	movw	r30, r28
    1956:	e6 5a       	subi	r30, 0xA6	; 166
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	85 81       	ldd	r24, Z+5	; 0x05
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	fe 01       	movw	r30, r28
    1962:	ee 5a       	subi	r30, 0xAE	; 174
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	82 95       	swap	r24
    1968:	92 95       	swap	r25
    196a:	90 7f       	andi	r25, 0xF0	; 240
    196c:	98 27       	eor	r25, r24
    196e:	80 7f       	andi	r24, 0xF0	; 240
    1970:	98 27       	eor	r25, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	7b c0       	rjmp	.+246    	; 0x1a6e <main+0xdda>
		} else if (time.ss < 64) {
    1978:	fe 01       	movw	r30, r28
    197a:	e6 5a       	subi	r30, 0xA6	; 166
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	85 81       	ldd	r24, Z+5	; 0x05
    1980:	80 34       	cpi	r24, 0x40	; 64
    1982:	28 f5       	brcc	.+74     	; 0x19ce <main+0xd3a>
			uiR = 0x01;
    1984:	fe 01       	movw	r30, r28
    1986:	ea 5a       	subi	r30, 0xAA	; 170
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
			uiG = 0xff - (time.ss << 4);
    1992:	fe 01       	movw	r30, r28
    1994:	e6 5a       	subi	r30, 0xA6	; 166
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	85 81       	ldd	r24, Z+5	; 0x05
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9c 01       	movw	r18, r24
    19a0:	22 95       	swap	r18
    19a2:	32 95       	swap	r19
    19a4:	30 7f       	andi	r19, 0xF0	; 240
    19a6:	32 27       	eor	r19, r18
    19a8:	20 7f       	andi	r18, 0xF0	; 240
    19aa:	32 27       	eor	r19, r18
    19ac:	fe 01       	movw	r30, r28
    19ae:	ec 5a       	subi	r30, 0xAC	; 172
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	82 1b       	sub	r24, r18
    19b8:	93 0b       	sbc	r25, r19
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
			uiB = 0xff;
    19be:	fe 01       	movw	r30, r28
    19c0:	ee 5a       	subi	r30, 0xAE	; 174
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
    19cc:	50 c0       	rjmp	.+160    	; 0x1a6e <main+0xdda>
		} else if (time.ss < 80) {
    19ce:	fe 01       	movw	r30, r28
    19d0:	e6 5a       	subi	r30, 0xA6	; 166
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	85 81       	ldd	r24, Z+5	; 0x05
    19d6:	80 35       	cpi	r24, 0x50	; 80
    19d8:	00 f5       	brcc	.+64     	; 0x1a1a <main+0xd86>
			uiR = time.ss << 4;
    19da:	fe 01       	movw	r30, r28
    19dc:	e6 5a       	subi	r30, 0xA6	; 166
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	85 81       	ldd	r24, Z+5	; 0x05
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	fe 01       	movw	r30, r28
    19e8:	ea 5a       	subi	r30, 0xAA	; 170
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	82 95       	swap	r24
    19ee:	92 95       	swap	r25
    19f0:	90 7f       	andi	r25, 0xF0	; 240
    19f2:	98 27       	eor	r25, r24
    19f4:	80 7f       	andi	r24, 0xF0	; 240
    19f6:	98 27       	eor	r25, r24
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
			uiG = 0x01;
    19fc:	fe 01       	movw	r30, r28
    19fe:	ec 5a       	subi	r30, 0xAC	; 172
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	80 83       	st	Z, r24
			uiB = 0xff;
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ee 5a       	subi	r30, 0xAE	; 174
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	80 83       	st	Z, r24
    1a18:	2a c0       	rjmp	.+84     	; 0x1a6e <main+0xdda>
		} else if (time.ss < 96) {
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e6 5a       	subi	r30, 0xA6	; 166
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	85 81       	ldd	r24, Z+5	; 0x05
    1a22:	80 36       	cpi	r24, 0x60	; 96
    1a24:	20 f5       	brcc	.+72     	; 0x1a6e <main+0xdda>
			uiR = 0xff;
    1a26:	fe 01       	movw	r30, r28
    1a28:	ea 5a       	subi	r30, 0xAA	; 170
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
			uiG = 0x01;
    1a34:	fe 01       	movw	r30, r28
    1a36:	ec 5a       	subi	r30, 0xAC	; 172
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
			uiB = 0xff - (time.ss << 4);
    1a42:	fe 01       	movw	r30, r28
    1a44:	e6 5a       	subi	r30, 0xA6	; 166
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	85 81       	ldd	r24, Z+5	; 0x05
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9c 01       	movw	r18, r24
    1a50:	22 95       	swap	r18
    1a52:	32 95       	swap	r19
    1a54:	30 7f       	andi	r19, 0xF0	; 240
    1a56:	32 27       	eor	r19, r18
    1a58:	20 7f       	andi	r18, 0xF0	; 240
    1a5a:	32 27       	eor	r19, r18
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ee 5a       	subi	r30, 0xAE	; 174
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	82 1b       	sub	r24, r18
    1a68:	93 0b       	sbc	r25, r19
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
		} else {
		}

		if (uiCount % 1000) {
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e0 5b       	subi	r30, 0xB0	; 176
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	28 ee       	ldi	r18, 0xE8	; 232
    1a7a:	33 e0       	ldi	r19, 0x03	; 3
    1a7c:	b9 01       	movw	r22, r18
    1a7e:	0e 94 c4 12 	call	0x2588	; 0x2588 <__divmodhi4>
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <main+0xdf4>
    1a86:	3d cb       	rjmp	.-2438   	; 0x1102 <main+0x46e>
			uiCount = 0;
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e0 5b       	subi	r30, 0xB0	; 176
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	11 82       	std	Z+1, r1	; 0x01
    1a90:	10 82       	st	Z, r1
    1a92:	37 cb       	rjmp	.-2450   	; 0x1102 <main+0x46e>

00001a94 <__fixunssfsi>:
    1a94:	ef 92       	push	r14
    1a96:	ff 92       	push	r15
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	7b 01       	movw	r14, r22
    1a9e:	8c 01       	movw	r16, r24
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	5f e4       	ldi	r21, 0x4F	; 79
    1aa8:	0e 94 4a 10 	call	0x2094	; 0x2094 <__gesf2>
    1aac:	88 23       	and	r24, r24
    1aae:	8c f0       	brlt	.+34     	; 0x1ad2 <__fixunssfsi+0x3e>
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	b7 01       	movw	r22, r14
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	5f e4       	ldi	r21, 0x4F	; 79
    1abc:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__subsf3>
    1ac0:	0e 94 aa 10 	call	0x2154	; 0x2154 <__fixsfsi>
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	20 50       	subi	r18, 0x00	; 0
    1aca:	30 40       	sbci	r19, 0x00	; 0
    1acc:	40 40       	sbci	r20, 0x00	; 0
    1ace:	50 48       	sbci	r21, 0x80	; 128
    1ad0:	06 c0       	rjmp	.+12     	; 0x1ade <__fixunssfsi+0x4a>
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	b7 01       	movw	r22, r14
    1ad6:	0e 94 aa 10 	call	0x2154	; 0x2154 <__fixsfsi>
    1ada:	9b 01       	movw	r18, r22
    1adc:	ac 01       	movw	r20, r24
    1ade:	b9 01       	movw	r22, r18
    1ae0:	ca 01       	movw	r24, r20
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	ff 90       	pop	r15
    1ae8:	ef 90       	pop	r14
    1aea:	08 95       	ret

00001aec <_fpadd_parts>:
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ec e7       	ldi	r30, 0x7C	; 124
    1af2:	fd e0       	ldi	r31, 0x0D	; 13
    1af4:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__>
    1af8:	dc 01       	movw	r26, r24
    1afa:	2b 01       	movw	r4, r22
    1afc:	fa 01       	movw	r30, r20
    1afe:	9c 91       	ld	r25, X
    1b00:	92 30       	cpi	r25, 0x02	; 2
    1b02:	08 f4       	brcc	.+2      	; 0x1b06 <_fpadd_parts+0x1a>
    1b04:	39 c1       	rjmp	.+626    	; 0x1d78 <_fpadd_parts+0x28c>
    1b06:	eb 01       	movw	r28, r22
    1b08:	88 81       	ld	r24, Y
    1b0a:	82 30       	cpi	r24, 0x02	; 2
    1b0c:	08 f4       	brcc	.+2      	; 0x1b10 <_fpadd_parts+0x24>
    1b0e:	33 c1       	rjmp	.+614    	; 0x1d76 <_fpadd_parts+0x28a>
    1b10:	94 30       	cpi	r25, 0x04	; 4
    1b12:	69 f4       	brne	.+26     	; 0x1b2e <_fpadd_parts+0x42>
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <_fpadd_parts+0x2e>
    1b18:	2f c1       	rjmp	.+606    	; 0x1d78 <_fpadd_parts+0x28c>
    1b1a:	11 96       	adiw	r26, 0x01	; 1
    1b1c:	9c 91       	ld	r25, X
    1b1e:	11 97       	sbiw	r26, 0x01	; 1
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	98 17       	cp	r25, r24
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <_fpadd_parts+0x3c>
    1b26:	28 c1       	rjmp	.+592    	; 0x1d78 <_fpadd_parts+0x28c>
    1b28:	a3 e4       	ldi	r26, 0x43	; 67
    1b2a:	b1 e0       	ldi	r27, 0x01	; 1
    1b2c:	25 c1       	rjmp	.+586    	; 0x1d78 <_fpadd_parts+0x28c>
    1b2e:	84 30       	cpi	r24, 0x04	; 4
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <_fpadd_parts+0x48>
    1b32:	21 c1       	rjmp	.+578    	; 0x1d76 <_fpadd_parts+0x28a>
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	a9 f4       	brne	.+42     	; 0x1b62 <_fpadd_parts+0x76>
    1b38:	92 30       	cpi	r25, 0x02	; 2
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <_fpadd_parts+0x52>
    1b3c:	1d c1       	rjmp	.+570    	; 0x1d78 <_fpadd_parts+0x28c>
    1b3e:	9a 01       	movw	r18, r20
    1b40:	ad 01       	movw	r20, r26
    1b42:	88 e0       	ldi	r24, 0x08	; 8
    1b44:	ea 01       	movw	r28, r20
    1b46:	09 90       	ld	r0, Y+
    1b48:	ae 01       	movw	r20, r28
    1b4a:	e9 01       	movw	r28, r18
    1b4c:	09 92       	st	Y+, r0
    1b4e:	9e 01       	movw	r18, r28
    1b50:	81 50       	subi	r24, 0x01	; 1
    1b52:	c1 f7       	brne	.-16     	; 0x1b44 <_fpadd_parts+0x58>
    1b54:	e2 01       	movw	r28, r4
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	11 96       	adiw	r26, 0x01	; 1
    1b5a:	9c 91       	ld	r25, X
    1b5c:	89 23       	and	r24, r25
    1b5e:	81 83       	std	Z+1, r24	; 0x01
    1b60:	08 c1       	rjmp	.+528    	; 0x1d72 <_fpadd_parts+0x286>
    1b62:	92 30       	cpi	r25, 0x02	; 2
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <_fpadd_parts+0x7c>
    1b66:	07 c1       	rjmp	.+526    	; 0x1d76 <_fpadd_parts+0x28a>
    1b68:	12 96       	adiw	r26, 0x02	; 2
    1b6a:	2d 90       	ld	r2, X+
    1b6c:	3c 90       	ld	r3, X
    1b6e:	13 97       	sbiw	r26, 0x03	; 3
    1b70:	eb 01       	movw	r28, r22
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	9b 81       	ldd	r25, Y+3	; 0x03
    1b76:	14 96       	adiw	r26, 0x04	; 4
    1b78:	ad 90       	ld	r10, X+
    1b7a:	bd 90       	ld	r11, X+
    1b7c:	cd 90       	ld	r12, X+
    1b7e:	dc 90       	ld	r13, X
    1b80:	17 97       	sbiw	r26, 0x07	; 7
    1b82:	ec 80       	ldd	r14, Y+4	; 0x04
    1b84:	fd 80       	ldd	r15, Y+5	; 0x05
    1b86:	0e 81       	ldd	r16, Y+6	; 0x06
    1b88:	1f 81       	ldd	r17, Y+7	; 0x07
    1b8a:	91 01       	movw	r18, r2
    1b8c:	28 1b       	sub	r18, r24
    1b8e:	39 0b       	sbc	r19, r25
    1b90:	b9 01       	movw	r22, r18
    1b92:	37 ff       	sbrs	r19, 7
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <_fpadd_parts+0xb2>
    1b96:	66 27       	eor	r22, r22
    1b98:	77 27       	eor	r23, r23
    1b9a:	62 1b       	sub	r22, r18
    1b9c:	73 0b       	sbc	r23, r19
    1b9e:	60 32       	cpi	r22, 0x20	; 32
    1ba0:	71 05       	cpc	r23, r1
    1ba2:	0c f0       	brlt	.+2      	; 0x1ba6 <_fpadd_parts+0xba>
    1ba4:	61 c0       	rjmp	.+194    	; 0x1c68 <_fpadd_parts+0x17c>
    1ba6:	12 16       	cp	r1, r18
    1ba8:	13 06       	cpc	r1, r19
    1baa:	6c f5       	brge	.+90     	; 0x1c06 <_fpadd_parts+0x11a>
    1bac:	37 01       	movw	r6, r14
    1bae:	48 01       	movw	r8, r16
    1bb0:	06 2e       	mov	r0, r22
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <_fpadd_parts+0xd0>
    1bb4:	96 94       	lsr	r9
    1bb6:	87 94       	ror	r8
    1bb8:	77 94       	ror	r7
    1bba:	67 94       	ror	r6
    1bbc:	0a 94       	dec	r0
    1bbe:	d2 f7       	brpl	.-12     	; 0x1bb4 <_fpadd_parts+0xc8>
    1bc0:	21 e0       	ldi	r18, 0x01	; 1
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	04 c0       	rjmp	.+8      	; 0x1bd2 <_fpadd_parts+0xe6>
    1bca:	22 0f       	add	r18, r18
    1bcc:	33 1f       	adc	r19, r19
    1bce:	44 1f       	adc	r20, r20
    1bd0:	55 1f       	adc	r21, r21
    1bd2:	6a 95       	dec	r22
    1bd4:	d2 f7       	brpl	.-12     	; 0x1bca <_fpadd_parts+0xde>
    1bd6:	21 50       	subi	r18, 0x01	; 1
    1bd8:	30 40       	sbci	r19, 0x00	; 0
    1bda:	40 40       	sbci	r20, 0x00	; 0
    1bdc:	50 40       	sbci	r21, 0x00	; 0
    1bde:	2e 21       	and	r18, r14
    1be0:	3f 21       	and	r19, r15
    1be2:	40 23       	and	r20, r16
    1be4:	51 23       	and	r21, r17
    1be6:	21 15       	cp	r18, r1
    1be8:	31 05       	cpc	r19, r1
    1bea:	41 05       	cpc	r20, r1
    1bec:	51 05       	cpc	r21, r1
    1bee:	21 f0       	breq	.+8      	; 0x1bf8 <_fpadd_parts+0x10c>
    1bf0:	21 e0       	ldi	r18, 0x01	; 1
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	79 01       	movw	r14, r18
    1bfa:	8a 01       	movw	r16, r20
    1bfc:	e6 28       	or	r14, r6
    1bfe:	f7 28       	or	r15, r7
    1c00:	08 29       	or	r16, r8
    1c02:	19 29       	or	r17, r9
    1c04:	3c c0       	rjmp	.+120    	; 0x1c7e <_fpadd_parts+0x192>
    1c06:	23 2b       	or	r18, r19
    1c08:	d1 f1       	breq	.+116    	; 0x1c7e <_fpadd_parts+0x192>
    1c0a:	26 0e       	add	r2, r22
    1c0c:	37 1e       	adc	r3, r23
    1c0e:	35 01       	movw	r6, r10
    1c10:	46 01       	movw	r8, r12
    1c12:	06 2e       	mov	r0, r22
    1c14:	04 c0       	rjmp	.+8      	; 0x1c1e <_fpadd_parts+0x132>
    1c16:	96 94       	lsr	r9
    1c18:	87 94       	ror	r8
    1c1a:	77 94       	ror	r7
    1c1c:	67 94       	ror	r6
    1c1e:	0a 94       	dec	r0
    1c20:	d2 f7       	brpl	.-12     	; 0x1c16 <_fpadd_parts+0x12a>
    1c22:	21 e0       	ldi	r18, 0x01	; 1
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	04 c0       	rjmp	.+8      	; 0x1c34 <_fpadd_parts+0x148>
    1c2c:	22 0f       	add	r18, r18
    1c2e:	33 1f       	adc	r19, r19
    1c30:	44 1f       	adc	r20, r20
    1c32:	55 1f       	adc	r21, r21
    1c34:	6a 95       	dec	r22
    1c36:	d2 f7       	brpl	.-12     	; 0x1c2c <_fpadd_parts+0x140>
    1c38:	21 50       	subi	r18, 0x01	; 1
    1c3a:	30 40       	sbci	r19, 0x00	; 0
    1c3c:	40 40       	sbci	r20, 0x00	; 0
    1c3e:	50 40       	sbci	r21, 0x00	; 0
    1c40:	2a 21       	and	r18, r10
    1c42:	3b 21       	and	r19, r11
    1c44:	4c 21       	and	r20, r12
    1c46:	5d 21       	and	r21, r13
    1c48:	21 15       	cp	r18, r1
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	41 05       	cpc	r20, r1
    1c4e:	51 05       	cpc	r21, r1
    1c50:	21 f0       	breq	.+8      	; 0x1c5a <_fpadd_parts+0x16e>
    1c52:	21 e0       	ldi	r18, 0x01	; 1
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	59 01       	movw	r10, r18
    1c5c:	6a 01       	movw	r12, r20
    1c5e:	a6 28       	or	r10, r6
    1c60:	b7 28       	or	r11, r7
    1c62:	c8 28       	or	r12, r8
    1c64:	d9 28       	or	r13, r9
    1c66:	0b c0       	rjmp	.+22     	; 0x1c7e <_fpadd_parts+0x192>
    1c68:	82 15       	cp	r24, r2
    1c6a:	93 05       	cpc	r25, r3
    1c6c:	2c f0       	brlt	.+10     	; 0x1c78 <_fpadd_parts+0x18c>
    1c6e:	1c 01       	movw	r2, r24
    1c70:	aa 24       	eor	r10, r10
    1c72:	bb 24       	eor	r11, r11
    1c74:	65 01       	movw	r12, r10
    1c76:	03 c0       	rjmp	.+6      	; 0x1c7e <_fpadd_parts+0x192>
    1c78:	ee 24       	eor	r14, r14
    1c7a:	ff 24       	eor	r15, r15
    1c7c:	87 01       	movw	r16, r14
    1c7e:	11 96       	adiw	r26, 0x01	; 1
    1c80:	9c 91       	ld	r25, X
    1c82:	d2 01       	movw	r26, r4
    1c84:	11 96       	adiw	r26, 0x01	; 1
    1c86:	8c 91       	ld	r24, X
    1c88:	98 17       	cp	r25, r24
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <_fpadd_parts+0x1a2>
    1c8c:	45 c0       	rjmp	.+138    	; 0x1d18 <_fpadd_parts+0x22c>
    1c8e:	99 23       	and	r25, r25
    1c90:	39 f0       	breq	.+14     	; 0x1ca0 <_fpadd_parts+0x1b4>
    1c92:	a8 01       	movw	r20, r16
    1c94:	97 01       	movw	r18, r14
    1c96:	2a 19       	sub	r18, r10
    1c98:	3b 09       	sbc	r19, r11
    1c9a:	4c 09       	sbc	r20, r12
    1c9c:	5d 09       	sbc	r21, r13
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <_fpadd_parts+0x1c0>
    1ca0:	a6 01       	movw	r20, r12
    1ca2:	95 01       	movw	r18, r10
    1ca4:	2e 19       	sub	r18, r14
    1ca6:	3f 09       	sbc	r19, r15
    1ca8:	40 0b       	sbc	r20, r16
    1caa:	51 0b       	sbc	r21, r17
    1cac:	57 fd       	sbrc	r21, 7
    1cae:	08 c0       	rjmp	.+16     	; 0x1cc0 <_fpadd_parts+0x1d4>
    1cb0:	11 82       	std	Z+1, r1	; 0x01
    1cb2:	33 82       	std	Z+3, r3	; 0x03
    1cb4:	22 82       	std	Z+2, r2	; 0x02
    1cb6:	24 83       	std	Z+4, r18	; 0x04
    1cb8:	35 83       	std	Z+5, r19	; 0x05
    1cba:	46 83       	std	Z+6, r20	; 0x06
    1cbc:	57 83       	std	Z+7, r21	; 0x07
    1cbe:	1d c0       	rjmp	.+58     	; 0x1cfa <_fpadd_parts+0x20e>
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	81 83       	std	Z+1, r24	; 0x01
    1cc4:	33 82       	std	Z+3, r3	; 0x03
    1cc6:	22 82       	std	Z+2, r2	; 0x02
    1cc8:	88 27       	eor	r24, r24
    1cca:	99 27       	eor	r25, r25
    1ccc:	dc 01       	movw	r26, r24
    1cce:	82 1b       	sub	r24, r18
    1cd0:	93 0b       	sbc	r25, r19
    1cd2:	a4 0b       	sbc	r26, r20
    1cd4:	b5 0b       	sbc	r27, r21
    1cd6:	84 83       	std	Z+4, r24	; 0x04
    1cd8:	95 83       	std	Z+5, r25	; 0x05
    1cda:	a6 83       	std	Z+6, r26	; 0x06
    1cdc:	b7 83       	std	Z+7, r27	; 0x07
    1cde:	0d c0       	rjmp	.+26     	; 0x1cfa <_fpadd_parts+0x20e>
    1ce0:	22 0f       	add	r18, r18
    1ce2:	33 1f       	adc	r19, r19
    1ce4:	44 1f       	adc	r20, r20
    1ce6:	55 1f       	adc	r21, r21
    1ce8:	24 83       	std	Z+4, r18	; 0x04
    1cea:	35 83       	std	Z+5, r19	; 0x05
    1cec:	46 83       	std	Z+6, r20	; 0x06
    1cee:	57 83       	std	Z+7, r21	; 0x07
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	93 83       	std	Z+3, r25	; 0x03
    1cf8:	82 83       	std	Z+2, r24	; 0x02
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	35 81       	ldd	r19, Z+5	; 0x05
    1cfe:	46 81       	ldd	r20, Z+6	; 0x06
    1d00:	57 81       	ldd	r21, Z+7	; 0x07
    1d02:	da 01       	movw	r26, r20
    1d04:	c9 01       	movw	r24, r18
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	a1 09       	sbc	r26, r1
    1d0a:	b1 09       	sbc	r27, r1
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d10:	af 4f       	sbci	r26, 0xFF	; 255
    1d12:	bf 43       	sbci	r27, 0x3F	; 63
    1d14:	28 f3       	brcs	.-54     	; 0x1ce0 <_fpadd_parts+0x1f4>
    1d16:	0b c0       	rjmp	.+22     	; 0x1d2e <_fpadd_parts+0x242>
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	33 82       	std	Z+3, r3	; 0x03
    1d1c:	22 82       	std	Z+2, r2	; 0x02
    1d1e:	ea 0c       	add	r14, r10
    1d20:	fb 1c       	adc	r15, r11
    1d22:	0c 1d       	adc	r16, r12
    1d24:	1d 1d       	adc	r17, r13
    1d26:	e4 82       	std	Z+4, r14	; 0x04
    1d28:	f5 82       	std	Z+5, r15	; 0x05
    1d2a:	06 83       	std	Z+6, r16	; 0x06
    1d2c:	17 83       	std	Z+7, r17	; 0x07
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	80 83       	st	Z, r24
    1d32:	24 81       	ldd	r18, Z+4	; 0x04
    1d34:	35 81       	ldd	r19, Z+5	; 0x05
    1d36:	46 81       	ldd	r20, Z+6	; 0x06
    1d38:	57 81       	ldd	r21, Z+7	; 0x07
    1d3a:	57 ff       	sbrs	r21, 7
    1d3c:	1a c0       	rjmp	.+52     	; 0x1d72 <_fpadd_parts+0x286>
    1d3e:	c9 01       	movw	r24, r18
    1d40:	aa 27       	eor	r26, r26
    1d42:	97 fd       	sbrc	r25, 7
    1d44:	a0 95       	com	r26
    1d46:	ba 2f       	mov	r27, r26
    1d48:	81 70       	andi	r24, 0x01	; 1
    1d4a:	90 70       	andi	r25, 0x00	; 0
    1d4c:	a0 70       	andi	r26, 0x00	; 0
    1d4e:	b0 70       	andi	r27, 0x00	; 0
    1d50:	56 95       	lsr	r21
    1d52:	47 95       	ror	r20
    1d54:	37 95       	ror	r19
    1d56:	27 95       	ror	r18
    1d58:	82 2b       	or	r24, r18
    1d5a:	93 2b       	or	r25, r19
    1d5c:	a4 2b       	or	r26, r20
    1d5e:	b5 2b       	or	r27, r21
    1d60:	84 83       	std	Z+4, r24	; 0x04
    1d62:	95 83       	std	Z+5, r25	; 0x05
    1d64:	a6 83       	std	Z+6, r26	; 0x06
    1d66:	b7 83       	std	Z+7, r27	; 0x07
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	93 83       	std	Z+3, r25	; 0x03
    1d70:	82 83       	std	Z+2, r24	; 0x02
    1d72:	df 01       	movw	r26, r30
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <_fpadd_parts+0x28c>
    1d76:	d2 01       	movw	r26, r4
    1d78:	cd 01       	movw	r24, r26
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	e2 e1       	ldi	r30, 0x12	; 18
    1d80:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__>

00001d84 <__subsf3>:
    1d84:	a0 e2       	ldi	r26, 0x20	; 32
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e8 ec       	ldi	r30, 0xC8	; 200
    1d8a:	fe e0       	ldi	r31, 0x0E	; 14
    1d8c:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
    1d90:	69 83       	std	Y+1, r22	; 0x01
    1d92:	7a 83       	std	Y+2, r23	; 0x02
    1d94:	8b 83       	std	Y+3, r24	; 0x03
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	2d 83       	std	Y+5, r18	; 0x05
    1d9a:	3e 83       	std	Y+6, r19	; 0x06
    1d9c:	4f 83       	std	Y+7, r20	; 0x07
    1d9e:	58 87       	std	Y+8, r21	; 0x08
    1da0:	e9 e0       	ldi	r30, 0x09	; 9
    1da2:	ee 2e       	mov	r14, r30
    1da4:	f1 2c       	mov	r15, r1
    1da6:	ec 0e       	add	r14, r28
    1da8:	fd 1e       	adc	r15, r29
    1daa:	ce 01       	movw	r24, r28
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	b7 01       	movw	r22, r14
    1db0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    1db4:	8e 01       	movw	r16, r28
    1db6:	0f 5e       	subi	r16, 0xEF	; 239
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	ce 01       	movw	r24, r28
    1dbc:	05 96       	adiw	r24, 0x05	; 5
    1dbe:	b8 01       	movw	r22, r16
    1dc0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    1dc4:	8a 89       	ldd	r24, Y+18	; 0x12
    1dc6:	91 e0       	ldi	r25, 0x01	; 1
    1dc8:	89 27       	eor	r24, r25
    1dca:	8a 8b       	std	Y+18, r24	; 0x12
    1dcc:	c7 01       	movw	r24, r14
    1dce:	b8 01       	movw	r22, r16
    1dd0:	ae 01       	movw	r20, r28
    1dd2:	47 5e       	subi	r20, 0xE7	; 231
    1dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd6:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_fpadd_parts>
    1dda:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__pack_f>
    1dde:	a0 96       	adiw	r28, 0x20	; 32
    1de0:	e6 e0       	ldi	r30, 0x06	; 6
    1de2:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

00001de6 <__addsf3>:
    1de6:	a0 e2       	ldi	r26, 0x20	; 32
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 ef       	ldi	r30, 0xF9	; 249
    1dec:	fe e0       	ldi	r31, 0x0E	; 14
    1dee:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
    1df2:	69 83       	std	Y+1, r22	; 0x01
    1df4:	7a 83       	std	Y+2, r23	; 0x02
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	2d 83       	std	Y+5, r18	; 0x05
    1dfc:	3e 83       	std	Y+6, r19	; 0x06
    1dfe:	4f 83       	std	Y+7, r20	; 0x07
    1e00:	58 87       	std	Y+8, r21	; 0x08
    1e02:	f9 e0       	ldi	r31, 0x09	; 9
    1e04:	ef 2e       	mov	r14, r31
    1e06:	f1 2c       	mov	r15, r1
    1e08:	ec 0e       	add	r14, r28
    1e0a:	fd 1e       	adc	r15, r29
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	b7 01       	movw	r22, r14
    1e12:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    1e16:	8e 01       	movw	r16, r28
    1e18:	0f 5e       	subi	r16, 0xEF	; 239
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	05 96       	adiw	r24, 0x05	; 5
    1e20:	b8 01       	movw	r22, r16
    1e22:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    1e26:	c7 01       	movw	r24, r14
    1e28:	b8 01       	movw	r22, r16
    1e2a:	ae 01       	movw	r20, r28
    1e2c:	47 5e       	subi	r20, 0xE7	; 231
    1e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e30:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_fpadd_parts>
    1e34:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__pack_f>
    1e38:	a0 96       	adiw	r28, 0x20	; 32
    1e3a:	e6 e0       	ldi	r30, 0x06	; 6
    1e3c:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

00001e40 <__mulsf3>:
    1e40:	a0 e2       	ldi	r26, 0x20	; 32
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e6 e2       	ldi	r30, 0x26	; 38
    1e46:	ff e0       	ldi	r31, 0x0F	; 15
    1e48:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__>
    1e4c:	69 83       	std	Y+1, r22	; 0x01
    1e4e:	7a 83       	std	Y+2, r23	; 0x02
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	2d 83       	std	Y+5, r18	; 0x05
    1e56:	3e 83       	std	Y+6, r19	; 0x06
    1e58:	4f 83       	std	Y+7, r20	; 0x07
    1e5a:	58 87       	std	Y+8, r21	; 0x08
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	be 01       	movw	r22, r28
    1e62:	67 5f       	subi	r22, 0xF7	; 247
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	05 96       	adiw	r24, 0x05	; 5
    1e6e:	be 01       	movw	r22, r28
    1e70:	6f 5e       	subi	r22, 0xEF	; 239
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    1e78:	99 85       	ldd	r25, Y+9	; 0x09
    1e7a:	92 30       	cpi	r25, 0x02	; 2
    1e7c:	88 f0       	brcs	.+34     	; 0x1ea0 <__mulsf3+0x60>
    1e7e:	89 89       	ldd	r24, Y+17	; 0x11
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	c8 f0       	brcs	.+50     	; 0x1eb6 <__mulsf3+0x76>
    1e84:	94 30       	cpi	r25, 0x04	; 4
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <__mulsf3+0x4e>
    1e88:	82 30       	cpi	r24, 0x02	; 2
    1e8a:	51 f4       	brne	.+20     	; 0x1ea0 <__mulsf3+0x60>
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <__mulsf3+0x56>
    1e8e:	84 30       	cpi	r24, 0x04	; 4
    1e90:	29 f4       	brne	.+10     	; 0x1e9c <__mulsf3+0x5c>
    1e92:	92 30       	cpi	r25, 0x02	; 2
    1e94:	81 f4       	brne	.+32     	; 0x1eb6 <__mulsf3+0x76>
    1e96:	83 e4       	ldi	r24, 0x43	; 67
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	c6 c0       	rjmp	.+396    	; 0x2028 <__mulsf3+0x1e8>
    1e9c:	92 30       	cpi	r25, 0x02	; 2
    1e9e:	49 f4       	brne	.+18     	; 0x1eb2 <__mulsf3+0x72>
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	8a 89       	ldd	r24, Y+18	; 0x12
    1ea6:	98 13       	cpse	r25, r24
    1ea8:	21 e0       	ldi	r18, 0x01	; 1
    1eaa:	2a 87       	std	Y+10, r18	; 0x0a
    1eac:	ce 01       	movw	r24, r28
    1eae:	09 96       	adiw	r24, 0x09	; 9
    1eb0:	bb c0       	rjmp	.+374    	; 0x2028 <__mulsf3+0x1e8>
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	49 f4       	brne	.+18     	; 0x1ec8 <__mulsf3+0x88>
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	8a 89       	ldd	r24, Y+18	; 0x12
    1ebc:	98 13       	cpse	r25, r24
    1ebe:	21 e0       	ldi	r18, 0x01	; 1
    1ec0:	2a 8b       	std	Y+18, r18	; 0x12
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	41 96       	adiw	r24, 0x11	; 17
    1ec6:	b0 c0       	rjmp	.+352    	; 0x2028 <__mulsf3+0x1e8>
    1ec8:	2d 84       	ldd	r2, Y+13	; 0x0d
    1eca:	3e 84       	ldd	r3, Y+14	; 0x0e
    1ecc:	4f 84       	ldd	r4, Y+15	; 0x0f
    1ece:	58 88       	ldd	r5, Y+16	; 0x10
    1ed0:	6d 88       	ldd	r6, Y+21	; 0x15
    1ed2:	7e 88       	ldd	r7, Y+22	; 0x16
    1ed4:	8f 88       	ldd	r8, Y+23	; 0x17
    1ed6:	98 8c       	ldd	r9, Y+24	; 0x18
    1ed8:	ee 24       	eor	r14, r14
    1eda:	ff 24       	eor	r15, r15
    1edc:	87 01       	movw	r16, r14
    1ede:	aa 24       	eor	r10, r10
    1ee0:	bb 24       	eor	r11, r11
    1ee2:	65 01       	movw	r12, r10
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	e0 e0       	ldi	r30, 0x00	; 0
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	c1 01       	movw	r24, r2
    1ef2:	81 70       	andi	r24, 0x01	; 1
    1ef4:	90 70       	andi	r25, 0x00	; 0
    1ef6:	89 2b       	or	r24, r25
    1ef8:	e9 f0       	breq	.+58     	; 0x1f34 <__mulsf3+0xf4>
    1efa:	e6 0c       	add	r14, r6
    1efc:	f7 1c       	adc	r15, r7
    1efe:	08 1d       	adc	r16, r8
    1f00:	19 1d       	adc	r17, r9
    1f02:	9a 01       	movw	r18, r20
    1f04:	ab 01       	movw	r20, r22
    1f06:	2a 0d       	add	r18, r10
    1f08:	3b 1d       	adc	r19, r11
    1f0a:	4c 1d       	adc	r20, r12
    1f0c:	5d 1d       	adc	r21, r13
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e0       	ldi	r26, 0x00	; 0
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e6 14       	cp	r14, r6
    1f18:	f7 04       	cpc	r15, r7
    1f1a:	08 05       	cpc	r16, r8
    1f1c:	19 05       	cpc	r17, r9
    1f1e:	20 f4       	brcc	.+8      	; 0x1f28 <__mulsf3+0xe8>
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	a0 e0       	ldi	r26, 0x00	; 0
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	ba 01       	movw	r22, r20
    1f2a:	a9 01       	movw	r20, r18
    1f2c:	48 0f       	add	r20, r24
    1f2e:	59 1f       	adc	r21, r25
    1f30:	6a 1f       	adc	r22, r26
    1f32:	7b 1f       	adc	r23, r27
    1f34:	aa 0c       	add	r10, r10
    1f36:	bb 1c       	adc	r11, r11
    1f38:	cc 1c       	adc	r12, r12
    1f3a:	dd 1c       	adc	r13, r13
    1f3c:	97 fe       	sbrs	r9, 7
    1f3e:	08 c0       	rjmp	.+16     	; 0x1f50 <__mulsf3+0x110>
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e0       	ldi	r26, 0x00	; 0
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	a8 2a       	or	r10, r24
    1f4a:	b9 2a       	or	r11, r25
    1f4c:	ca 2a       	or	r12, r26
    1f4e:	db 2a       	or	r13, r27
    1f50:	31 96       	adiw	r30, 0x01	; 1
    1f52:	e0 32       	cpi	r30, 0x20	; 32
    1f54:	f1 05       	cpc	r31, r1
    1f56:	49 f0       	breq	.+18     	; 0x1f6a <__mulsf3+0x12a>
    1f58:	66 0c       	add	r6, r6
    1f5a:	77 1c       	adc	r7, r7
    1f5c:	88 1c       	adc	r8, r8
    1f5e:	99 1c       	adc	r9, r9
    1f60:	56 94       	lsr	r5
    1f62:	47 94       	ror	r4
    1f64:	37 94       	ror	r3
    1f66:	27 94       	ror	r2
    1f68:	c3 cf       	rjmp	.-122    	; 0x1ef0 <__mulsf3+0xb0>
    1f6a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f6c:	ea 89       	ldd	r30, Y+18	; 0x12
    1f6e:	2b 89       	ldd	r18, Y+19	; 0x13
    1f70:	3c 89       	ldd	r19, Y+20	; 0x14
    1f72:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f74:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f76:	28 0f       	add	r18, r24
    1f78:	39 1f       	adc	r19, r25
    1f7a:	2e 5f       	subi	r18, 0xFE	; 254
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	17 c0       	rjmp	.+46     	; 0x1fae <__mulsf3+0x16e>
    1f80:	ca 01       	movw	r24, r20
    1f82:	81 70       	andi	r24, 0x01	; 1
    1f84:	90 70       	andi	r25, 0x00	; 0
    1f86:	89 2b       	or	r24, r25
    1f88:	61 f0       	breq	.+24     	; 0x1fa2 <__mulsf3+0x162>
    1f8a:	16 95       	lsr	r17
    1f8c:	07 95       	ror	r16
    1f8e:	f7 94       	ror	r15
    1f90:	e7 94       	ror	r14
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	a0 e0       	ldi	r26, 0x00	; 0
    1f98:	b0 e8       	ldi	r27, 0x80	; 128
    1f9a:	e8 2a       	or	r14, r24
    1f9c:	f9 2a       	or	r15, r25
    1f9e:	0a 2b       	or	r16, r26
    1fa0:	1b 2b       	or	r17, r27
    1fa2:	76 95       	lsr	r23
    1fa4:	67 95       	ror	r22
    1fa6:	57 95       	ror	r21
    1fa8:	47 95       	ror	r20
    1faa:	2f 5f       	subi	r18, 0xFF	; 255
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	77 fd       	sbrc	r23, 7
    1fb0:	e7 cf       	rjmp	.-50     	; 0x1f80 <__mulsf3+0x140>
    1fb2:	0c c0       	rjmp	.+24     	; 0x1fcc <__mulsf3+0x18c>
    1fb4:	44 0f       	add	r20, r20
    1fb6:	55 1f       	adc	r21, r21
    1fb8:	66 1f       	adc	r22, r22
    1fba:	77 1f       	adc	r23, r23
    1fbc:	17 fd       	sbrc	r17, 7
    1fbe:	41 60       	ori	r20, 0x01	; 1
    1fc0:	ee 0c       	add	r14, r14
    1fc2:	ff 1c       	adc	r15, r15
    1fc4:	00 1f       	adc	r16, r16
    1fc6:	11 1f       	adc	r17, r17
    1fc8:	21 50       	subi	r18, 0x01	; 1
    1fca:	30 40       	sbci	r19, 0x00	; 0
    1fcc:	40 30       	cpi	r20, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	59 07       	cpc	r21, r25
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	69 07       	cpc	r22, r25
    1fd6:	90 e4       	ldi	r25, 0x40	; 64
    1fd8:	79 07       	cpc	r23, r25
    1fda:	60 f3       	brcs	.-40     	; 0x1fb4 <__mulsf3+0x174>
    1fdc:	2b 8f       	std	Y+27, r18	; 0x1b
    1fde:	3c 8f       	std	Y+28, r19	; 0x1c
    1fe0:	db 01       	movw	r26, r22
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	8f 77       	andi	r24, 0x7F	; 127
    1fe6:	90 70       	andi	r25, 0x00	; 0
    1fe8:	a0 70       	andi	r26, 0x00	; 0
    1fea:	b0 70       	andi	r27, 0x00	; 0
    1fec:	80 34       	cpi	r24, 0x40	; 64
    1fee:	91 05       	cpc	r25, r1
    1ff0:	a1 05       	cpc	r26, r1
    1ff2:	b1 05       	cpc	r27, r1
    1ff4:	61 f4       	brne	.+24     	; 0x200e <__mulsf3+0x1ce>
    1ff6:	47 fd       	sbrc	r20, 7
    1ff8:	0a c0       	rjmp	.+20     	; 0x200e <__mulsf3+0x1ce>
    1ffa:	e1 14       	cp	r14, r1
    1ffc:	f1 04       	cpc	r15, r1
    1ffe:	01 05       	cpc	r16, r1
    2000:	11 05       	cpc	r17, r1
    2002:	29 f0       	breq	.+10     	; 0x200e <__mulsf3+0x1ce>
    2004:	40 5c       	subi	r20, 0xC0	; 192
    2006:	5f 4f       	sbci	r21, 0xFF	; 255
    2008:	6f 4f       	sbci	r22, 0xFF	; 255
    200a:	7f 4f       	sbci	r23, 0xFF	; 255
    200c:	40 78       	andi	r20, 0x80	; 128
    200e:	1a 8e       	std	Y+26, r1	; 0x1a
    2010:	fe 17       	cp	r31, r30
    2012:	11 f0       	breq	.+4      	; 0x2018 <__mulsf3+0x1d8>
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	8a 8f       	std	Y+26, r24	; 0x1a
    2018:	4d 8f       	std	Y+29, r20	; 0x1d
    201a:	5e 8f       	std	Y+30, r21	; 0x1e
    201c:	6f 8f       	std	Y+31, r22	; 0x1f
    201e:	78 a3       	std	Y+32, r23	; 0x20
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	89 8f       	std	Y+25, r24	; 0x19
    2024:	ce 01       	movw	r24, r28
    2026:	49 96       	adiw	r24, 0x19	; 25
    2028:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__pack_f>
    202c:	a0 96       	adiw	r28, 0x20	; 32
    202e:	e2 e1       	ldi	r30, 0x12	; 18
    2030:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__>

00002034 <__gtsf2>:
    2034:	a8 e1       	ldi	r26, 0x18	; 24
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e0 e2       	ldi	r30, 0x20	; 32
    203a:	f0 e1       	ldi	r31, 0x10	; 16
    203c:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
    2040:	69 83       	std	Y+1, r22	; 0x01
    2042:	7a 83       	std	Y+2, r23	; 0x02
    2044:	8b 83       	std	Y+3, r24	; 0x03
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	2d 83       	std	Y+5, r18	; 0x05
    204a:	3e 83       	std	Y+6, r19	; 0x06
    204c:	4f 83       	std	Y+7, r20	; 0x07
    204e:	58 87       	std	Y+8, r21	; 0x08
    2050:	89 e0       	ldi	r24, 0x09	; 9
    2052:	e8 2e       	mov	r14, r24
    2054:	f1 2c       	mov	r15, r1
    2056:	ec 0e       	add	r14, r28
    2058:	fd 1e       	adc	r15, r29
    205a:	ce 01       	movw	r24, r28
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	b7 01       	movw	r22, r14
    2060:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    2064:	8e 01       	movw	r16, r28
    2066:	0f 5e       	subi	r16, 0xEF	; 239
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
    206a:	ce 01       	movw	r24, r28
    206c:	05 96       	adiw	r24, 0x05	; 5
    206e:	b8 01       	movw	r22, r16
    2070:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	82 30       	cpi	r24, 0x02	; 2
    2078:	40 f0       	brcs	.+16     	; 0x208a <__gtsf2+0x56>
    207a:	89 89       	ldd	r24, Y+17	; 0x11
    207c:	82 30       	cpi	r24, 0x02	; 2
    207e:	28 f0       	brcs	.+10     	; 0x208a <__gtsf2+0x56>
    2080:	c7 01       	movw	r24, r14
    2082:	b8 01       	movw	r22, r16
    2084:	0e 94 4b 12 	call	0x2496	; 0x2496 <__fpcmp_parts_f>
    2088:	01 c0       	rjmp	.+2      	; 0x208c <__gtsf2+0x58>
    208a:	8f ef       	ldi	r24, 0xFF	; 255
    208c:	68 96       	adiw	r28, 0x18	; 24
    208e:	e6 e0       	ldi	r30, 0x06	; 6
    2090:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

00002094 <__gesf2>:
    2094:	a8 e1       	ldi	r26, 0x18	; 24
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e0 e5       	ldi	r30, 0x50	; 80
    209a:	f0 e1       	ldi	r31, 0x10	; 16
    209c:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
    20a0:	69 83       	std	Y+1, r22	; 0x01
    20a2:	7a 83       	std	Y+2, r23	; 0x02
    20a4:	8b 83       	std	Y+3, r24	; 0x03
    20a6:	9c 83       	std	Y+4, r25	; 0x04
    20a8:	2d 83       	std	Y+5, r18	; 0x05
    20aa:	3e 83       	std	Y+6, r19	; 0x06
    20ac:	4f 83       	std	Y+7, r20	; 0x07
    20ae:	58 87       	std	Y+8, r21	; 0x08
    20b0:	89 e0       	ldi	r24, 0x09	; 9
    20b2:	e8 2e       	mov	r14, r24
    20b4:	f1 2c       	mov	r15, r1
    20b6:	ec 0e       	add	r14, r28
    20b8:	fd 1e       	adc	r15, r29
    20ba:	ce 01       	movw	r24, r28
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	b7 01       	movw	r22, r14
    20c0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    20c4:	8e 01       	movw	r16, r28
    20c6:	0f 5e       	subi	r16, 0xEF	; 239
    20c8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ca:	ce 01       	movw	r24, r28
    20cc:	05 96       	adiw	r24, 0x05	; 5
    20ce:	b8 01       	movw	r22, r16
    20d0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	40 f0       	brcs	.+16     	; 0x20ea <__gesf2+0x56>
    20da:	89 89       	ldd	r24, Y+17	; 0x11
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	28 f0       	brcs	.+10     	; 0x20ea <__gesf2+0x56>
    20e0:	c7 01       	movw	r24, r14
    20e2:	b8 01       	movw	r22, r16
    20e4:	0e 94 4b 12 	call	0x2496	; 0x2496 <__fpcmp_parts_f>
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <__gesf2+0x58>
    20ea:	8f ef       	ldi	r24, 0xFF	; 255
    20ec:	68 96       	adiw	r28, 0x18	; 24
    20ee:	e6 e0       	ldi	r30, 0x06	; 6
    20f0:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

000020f4 <__ltsf2>:
    20f4:	a8 e1       	ldi	r26, 0x18	; 24
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e0 e8       	ldi	r30, 0x80	; 128
    20fa:	f0 e1       	ldi	r31, 0x10	; 16
    20fc:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
    2100:	69 83       	std	Y+1, r22	; 0x01
    2102:	7a 83       	std	Y+2, r23	; 0x02
    2104:	8b 83       	std	Y+3, r24	; 0x03
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	2d 83       	std	Y+5, r18	; 0x05
    210a:	3e 83       	std	Y+6, r19	; 0x06
    210c:	4f 83       	std	Y+7, r20	; 0x07
    210e:	58 87       	std	Y+8, r21	; 0x08
    2110:	89 e0       	ldi	r24, 0x09	; 9
    2112:	e8 2e       	mov	r14, r24
    2114:	f1 2c       	mov	r15, r1
    2116:	ec 0e       	add	r14, r28
    2118:	fd 1e       	adc	r15, r29
    211a:	ce 01       	movw	r24, r28
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	b7 01       	movw	r22, r14
    2120:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    2124:	8e 01       	movw	r16, r28
    2126:	0f 5e       	subi	r16, 0xEF	; 239
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	ce 01       	movw	r24, r28
    212c:	05 96       	adiw	r24, 0x05	; 5
    212e:	b8 01       	movw	r22, r16
    2130:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    2134:	89 85       	ldd	r24, Y+9	; 0x09
    2136:	82 30       	cpi	r24, 0x02	; 2
    2138:	40 f0       	brcs	.+16     	; 0x214a <__ltsf2+0x56>
    213a:	89 89       	ldd	r24, Y+17	; 0x11
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	28 f0       	brcs	.+10     	; 0x214a <__ltsf2+0x56>
    2140:	c7 01       	movw	r24, r14
    2142:	b8 01       	movw	r22, r16
    2144:	0e 94 4b 12 	call	0x2496	; 0x2496 <__fpcmp_parts_f>
    2148:	01 c0       	rjmp	.+2      	; 0x214c <__ltsf2+0x58>
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	68 96       	adiw	r28, 0x18	; 24
    214e:	e6 e0       	ldi	r30, 0x06	; 6
    2150:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

00002154 <__fixsfsi>:
    2154:	ac e0       	ldi	r26, 0x0C	; 12
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e0 eb       	ldi	r30, 0xB0	; 176
    215a:	f0 e1       	ldi	r31, 0x10	; 16
    215c:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x20>
    2160:	69 83       	std	Y+1, r22	; 0x01
    2162:	7a 83       	std	Y+2, r23	; 0x02
    2164:	8b 83       	std	Y+3, r24	; 0x03
    2166:	9c 83       	std	Y+4, r25	; 0x04
    2168:	ce 01       	movw	r24, r28
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	be 01       	movw	r22, r28
    216e:	6b 5f       	subi	r22, 0xFB	; 251
    2170:	7f 4f       	sbci	r23, 0xFF	; 255
    2172:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__unpack_f>
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	82 30       	cpi	r24, 0x02	; 2
    217a:	61 f1       	breq	.+88     	; 0x21d4 <__fixsfsi+0x80>
    217c:	82 30       	cpi	r24, 0x02	; 2
    217e:	50 f1       	brcs	.+84     	; 0x21d4 <__fixsfsi+0x80>
    2180:	84 30       	cpi	r24, 0x04	; 4
    2182:	21 f4       	brne	.+8      	; 0x218c <__fixsfsi+0x38>
    2184:	8e 81       	ldd	r24, Y+6	; 0x06
    2186:	88 23       	and	r24, r24
    2188:	51 f1       	breq	.+84     	; 0x21de <__fixsfsi+0x8a>
    218a:	2e c0       	rjmp	.+92     	; 0x21e8 <__fixsfsi+0x94>
    218c:	2f 81       	ldd	r18, Y+7	; 0x07
    218e:	38 85       	ldd	r19, Y+8	; 0x08
    2190:	37 fd       	sbrc	r19, 7
    2192:	20 c0       	rjmp	.+64     	; 0x21d4 <__fixsfsi+0x80>
    2194:	6e 81       	ldd	r22, Y+6	; 0x06
    2196:	2f 31       	cpi	r18, 0x1F	; 31
    2198:	31 05       	cpc	r19, r1
    219a:	1c f0       	brlt	.+6      	; 0x21a2 <__fixsfsi+0x4e>
    219c:	66 23       	and	r22, r22
    219e:	f9 f0       	breq	.+62     	; 0x21de <__fixsfsi+0x8a>
    21a0:	23 c0       	rjmp	.+70     	; 0x21e8 <__fixsfsi+0x94>
    21a2:	8e e1       	ldi	r24, 0x1E	; 30
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	82 1b       	sub	r24, r18
    21a8:	93 0b       	sbc	r25, r19
    21aa:	29 85       	ldd	r18, Y+9	; 0x09
    21ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    21ae:	4b 85       	ldd	r20, Y+11	; 0x0b
    21b0:	5c 85       	ldd	r21, Y+12	; 0x0c
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <__fixsfsi+0x68>
    21b4:	56 95       	lsr	r21
    21b6:	47 95       	ror	r20
    21b8:	37 95       	ror	r19
    21ba:	27 95       	ror	r18
    21bc:	8a 95       	dec	r24
    21be:	d2 f7       	brpl	.-12     	; 0x21b4 <__fixsfsi+0x60>
    21c0:	66 23       	and	r22, r22
    21c2:	b1 f0       	breq	.+44     	; 0x21f0 <__fixsfsi+0x9c>
    21c4:	50 95       	com	r21
    21c6:	40 95       	com	r20
    21c8:	30 95       	com	r19
    21ca:	21 95       	neg	r18
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	4f 4f       	sbci	r20, 0xFF	; 255
    21d0:	5f 4f       	sbci	r21, 0xFF	; 255
    21d2:	0e c0       	rjmp	.+28     	; 0x21f0 <__fixsfsi+0x9c>
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e0       	ldi	r20, 0x00	; 0
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	09 c0       	rjmp	.+18     	; 0x21f0 <__fixsfsi+0x9c>
    21de:	2f ef       	ldi	r18, 0xFF	; 255
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f ef       	ldi	r20, 0xFF	; 255
    21e4:	5f e7       	ldi	r21, 0x7F	; 127
    21e6:	04 c0       	rjmp	.+8      	; 0x21f0 <__fixsfsi+0x9c>
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	50 e8       	ldi	r21, 0x80	; 128
    21f0:	b9 01       	movw	r22, r18
    21f2:	ca 01       	movw	r24, r20
    21f4:	2c 96       	adiw	r28, 0x0c	; 12
    21f6:	e2 e0       	ldi	r30, 0x02	; 2
    21f8:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x20>

000021fc <__pack_f>:
    21fc:	df 92       	push	r13
    21fe:	ef 92       	push	r14
    2200:	ff 92       	push	r15
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	fc 01       	movw	r30, r24
    2208:	e4 80       	ldd	r14, Z+4	; 0x04
    220a:	f5 80       	ldd	r15, Z+5	; 0x05
    220c:	06 81       	ldd	r16, Z+6	; 0x06
    220e:	17 81       	ldd	r17, Z+7	; 0x07
    2210:	d1 80       	ldd	r13, Z+1	; 0x01
    2212:	80 81       	ld	r24, Z
    2214:	82 30       	cpi	r24, 0x02	; 2
    2216:	48 f4       	brcc	.+18     	; 0x222a <__pack_f+0x2e>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 e1       	ldi	r26, 0x10	; 16
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e8 2a       	or	r14, r24
    2222:	f9 2a       	or	r15, r25
    2224:	0a 2b       	or	r16, r26
    2226:	1b 2b       	or	r17, r27
    2228:	a5 c0       	rjmp	.+330    	; 0x2374 <__pack_f+0x178>
    222a:	84 30       	cpi	r24, 0x04	; 4
    222c:	09 f4       	brne	.+2      	; 0x2230 <__pack_f+0x34>
    222e:	9f c0       	rjmp	.+318    	; 0x236e <__pack_f+0x172>
    2230:	82 30       	cpi	r24, 0x02	; 2
    2232:	21 f4       	brne	.+8      	; 0x223c <__pack_f+0x40>
    2234:	ee 24       	eor	r14, r14
    2236:	ff 24       	eor	r15, r15
    2238:	87 01       	movw	r16, r14
    223a:	05 c0       	rjmp	.+10     	; 0x2246 <__pack_f+0x4a>
    223c:	e1 14       	cp	r14, r1
    223e:	f1 04       	cpc	r15, r1
    2240:	01 05       	cpc	r16, r1
    2242:	11 05       	cpc	r17, r1
    2244:	19 f4       	brne	.+6      	; 0x224c <__pack_f+0x50>
    2246:	e0 e0       	ldi	r30, 0x00	; 0
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	96 c0       	rjmp	.+300    	; 0x2378 <__pack_f+0x17c>
    224c:	62 81       	ldd	r22, Z+2	; 0x02
    224e:	73 81       	ldd	r23, Z+3	; 0x03
    2250:	9f ef       	ldi	r25, 0xFF	; 255
    2252:	62 38       	cpi	r22, 0x82	; 130
    2254:	79 07       	cpc	r23, r25
    2256:	0c f0       	brlt	.+2      	; 0x225a <__pack_f+0x5e>
    2258:	5b c0       	rjmp	.+182    	; 0x2310 <__pack_f+0x114>
    225a:	22 e8       	ldi	r18, 0x82	; 130
    225c:	3f ef       	ldi	r19, 0xFF	; 255
    225e:	26 1b       	sub	r18, r22
    2260:	37 0b       	sbc	r19, r23
    2262:	2a 31       	cpi	r18, 0x1A	; 26
    2264:	31 05       	cpc	r19, r1
    2266:	2c f0       	brlt	.+10     	; 0x2272 <__pack_f+0x76>
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	2a c0       	rjmp	.+84     	; 0x22c6 <__pack_f+0xca>
    2272:	b8 01       	movw	r22, r16
    2274:	a7 01       	movw	r20, r14
    2276:	02 2e       	mov	r0, r18
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <__pack_f+0x86>
    227a:	76 95       	lsr	r23
    227c:	67 95       	ror	r22
    227e:	57 95       	ror	r21
    2280:	47 95       	ror	r20
    2282:	0a 94       	dec	r0
    2284:	d2 f7       	brpl	.-12     	; 0x227a <__pack_f+0x7e>
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a0 e0       	ldi	r26, 0x00	; 0
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <__pack_f+0x9c>
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	aa 1f       	adc	r26, r26
    2296:	bb 1f       	adc	r27, r27
    2298:	2a 95       	dec	r18
    229a:	d2 f7       	brpl	.-12     	; 0x2290 <__pack_f+0x94>
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	a1 09       	sbc	r26, r1
    22a0:	b1 09       	sbc	r27, r1
    22a2:	8e 21       	and	r24, r14
    22a4:	9f 21       	and	r25, r15
    22a6:	a0 23       	and	r26, r16
    22a8:	b1 23       	and	r27, r17
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	a1 05       	cpc	r26, r1
    22ae:	b1 05       	cpc	r27, r1
    22b0:	21 f0       	breq	.+8      	; 0x22ba <__pack_f+0xbe>
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	a0 e0       	ldi	r26, 0x00	; 0
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	9a 01       	movw	r18, r20
    22bc:	ab 01       	movw	r20, r22
    22be:	28 2b       	or	r18, r24
    22c0:	39 2b       	or	r19, r25
    22c2:	4a 2b       	or	r20, r26
    22c4:	5b 2b       	or	r21, r27
    22c6:	da 01       	movw	r26, r20
    22c8:	c9 01       	movw	r24, r18
    22ca:	8f 77       	andi	r24, 0x7F	; 127
    22cc:	90 70       	andi	r25, 0x00	; 0
    22ce:	a0 70       	andi	r26, 0x00	; 0
    22d0:	b0 70       	andi	r27, 0x00	; 0
    22d2:	80 34       	cpi	r24, 0x40	; 64
    22d4:	91 05       	cpc	r25, r1
    22d6:	a1 05       	cpc	r26, r1
    22d8:	b1 05       	cpc	r27, r1
    22da:	39 f4       	brne	.+14     	; 0x22ea <__pack_f+0xee>
    22dc:	27 ff       	sbrs	r18, 7
    22de:	09 c0       	rjmp	.+18     	; 0x22f2 <__pack_f+0xf6>
    22e0:	20 5c       	subi	r18, 0xC0	; 192
    22e2:	3f 4f       	sbci	r19, 0xFF	; 255
    22e4:	4f 4f       	sbci	r20, 0xFF	; 255
    22e6:	5f 4f       	sbci	r21, 0xFF	; 255
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <__pack_f+0xf6>
    22ea:	21 5c       	subi	r18, 0xC1	; 193
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	4f 4f       	sbci	r20, 0xFF	; 255
    22f0:	5f 4f       	sbci	r21, 0xFF	; 255
    22f2:	e0 e0       	ldi	r30, 0x00	; 0
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	20 30       	cpi	r18, 0x00	; 0
    22f8:	a0 e0       	ldi	r26, 0x00	; 0
    22fa:	3a 07       	cpc	r19, r26
    22fc:	a0 e0       	ldi	r26, 0x00	; 0
    22fe:	4a 07       	cpc	r20, r26
    2300:	a0 e4       	ldi	r26, 0x40	; 64
    2302:	5a 07       	cpc	r21, r26
    2304:	10 f0       	brcs	.+4      	; 0x230a <__pack_f+0x10e>
    2306:	e1 e0       	ldi	r30, 0x01	; 1
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	79 01       	movw	r14, r18
    230c:	8a 01       	movw	r16, r20
    230e:	27 c0       	rjmp	.+78     	; 0x235e <__pack_f+0x162>
    2310:	60 38       	cpi	r22, 0x80	; 128
    2312:	71 05       	cpc	r23, r1
    2314:	64 f5       	brge	.+88     	; 0x236e <__pack_f+0x172>
    2316:	fb 01       	movw	r30, r22
    2318:	e1 58       	subi	r30, 0x81	; 129
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	d8 01       	movw	r26, r16
    231e:	c7 01       	movw	r24, r14
    2320:	8f 77       	andi	r24, 0x7F	; 127
    2322:	90 70       	andi	r25, 0x00	; 0
    2324:	a0 70       	andi	r26, 0x00	; 0
    2326:	b0 70       	andi	r27, 0x00	; 0
    2328:	80 34       	cpi	r24, 0x40	; 64
    232a:	91 05       	cpc	r25, r1
    232c:	a1 05       	cpc	r26, r1
    232e:	b1 05       	cpc	r27, r1
    2330:	39 f4       	brne	.+14     	; 0x2340 <__pack_f+0x144>
    2332:	e7 fe       	sbrs	r14, 7
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <__pack_f+0x154>
    2336:	80 e4       	ldi	r24, 0x40	; 64
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	a0 e0       	ldi	r26, 0x00	; 0
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <__pack_f+0x14c>
    2340:	8f e3       	ldi	r24, 0x3F	; 63
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 e0       	ldi	r26, 0x00	; 0
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e8 0e       	add	r14, r24
    234a:	f9 1e       	adc	r15, r25
    234c:	0a 1f       	adc	r16, r26
    234e:	1b 1f       	adc	r17, r27
    2350:	17 ff       	sbrs	r17, 7
    2352:	05 c0       	rjmp	.+10     	; 0x235e <__pack_f+0x162>
    2354:	16 95       	lsr	r17
    2356:	07 95       	ror	r16
    2358:	f7 94       	ror	r15
    235a:	e7 94       	ror	r14
    235c:	31 96       	adiw	r30, 0x01	; 1
    235e:	87 e0       	ldi	r24, 0x07	; 7
    2360:	16 95       	lsr	r17
    2362:	07 95       	ror	r16
    2364:	f7 94       	ror	r15
    2366:	e7 94       	ror	r14
    2368:	8a 95       	dec	r24
    236a:	d1 f7       	brne	.-12     	; 0x2360 <__pack_f+0x164>
    236c:	05 c0       	rjmp	.+10     	; 0x2378 <__pack_f+0x17c>
    236e:	ee 24       	eor	r14, r14
    2370:	ff 24       	eor	r15, r15
    2372:	87 01       	movw	r16, r14
    2374:	ef ef       	ldi	r30, 0xFF	; 255
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	6e 2f       	mov	r22, r30
    237a:	67 95       	ror	r22
    237c:	66 27       	eor	r22, r22
    237e:	67 95       	ror	r22
    2380:	90 2f       	mov	r25, r16
    2382:	9f 77       	andi	r25, 0x7F	; 127
    2384:	d7 94       	ror	r13
    2386:	dd 24       	eor	r13, r13
    2388:	d7 94       	ror	r13
    238a:	8e 2f       	mov	r24, r30
    238c:	86 95       	lsr	r24
    238e:	49 2f       	mov	r20, r25
    2390:	46 2b       	or	r20, r22
    2392:	58 2f       	mov	r21, r24
    2394:	5d 29       	or	r21, r13
    2396:	b7 01       	movw	r22, r14
    2398:	ca 01       	movw	r24, r20
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	ff 90       	pop	r15
    23a0:	ef 90       	pop	r14
    23a2:	df 90       	pop	r13
    23a4:	08 95       	ret

000023a6 <__unpack_f>:
    23a6:	fc 01       	movw	r30, r24
    23a8:	db 01       	movw	r26, r22
    23aa:	40 81       	ld	r20, Z
    23ac:	51 81       	ldd	r21, Z+1	; 0x01
    23ae:	22 81       	ldd	r18, Z+2	; 0x02
    23b0:	62 2f       	mov	r22, r18
    23b2:	6f 77       	andi	r22, 0x7F	; 127
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	22 1f       	adc	r18, r18
    23b8:	22 27       	eor	r18, r18
    23ba:	22 1f       	adc	r18, r18
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	89 2f       	mov	r24, r25
    23c0:	88 0f       	add	r24, r24
    23c2:	82 2b       	or	r24, r18
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	99 1f       	adc	r25, r25
    23ca:	99 27       	eor	r25, r25
    23cc:	99 1f       	adc	r25, r25
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	9c 93       	st	X, r25
    23d2:	11 97       	sbiw	r26, 0x01	; 1
    23d4:	21 15       	cp	r18, r1
    23d6:	31 05       	cpc	r19, r1
    23d8:	a9 f5       	brne	.+106    	; 0x2444 <__unpack_f+0x9e>
    23da:	41 15       	cp	r20, r1
    23dc:	51 05       	cpc	r21, r1
    23de:	61 05       	cpc	r22, r1
    23e0:	71 05       	cpc	r23, r1
    23e2:	11 f4       	brne	.+4      	; 0x23e8 <__unpack_f+0x42>
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	37 c0       	rjmp	.+110    	; 0x2456 <__unpack_f+0xb0>
    23e8:	82 e8       	ldi	r24, 0x82	; 130
    23ea:	9f ef       	ldi	r25, 0xFF	; 255
    23ec:	13 96       	adiw	r26, 0x03	; 3
    23ee:	9c 93       	st	X, r25
    23f0:	8e 93       	st	-X, r24
    23f2:	12 97       	sbiw	r26, 0x02	; 2
    23f4:	9a 01       	movw	r18, r20
    23f6:	ab 01       	movw	r20, r22
    23f8:	67 e0       	ldi	r22, 0x07	; 7
    23fa:	22 0f       	add	r18, r18
    23fc:	33 1f       	adc	r19, r19
    23fe:	44 1f       	adc	r20, r20
    2400:	55 1f       	adc	r21, r21
    2402:	6a 95       	dec	r22
    2404:	d1 f7       	brne	.-12     	; 0x23fa <__unpack_f+0x54>
    2406:	83 e0       	ldi	r24, 0x03	; 3
    2408:	8c 93       	st	X, r24
    240a:	0d c0       	rjmp	.+26     	; 0x2426 <__unpack_f+0x80>
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	44 1f       	adc	r20, r20
    2412:	55 1f       	adc	r21, r21
    2414:	12 96       	adiw	r26, 0x02	; 2
    2416:	8d 91       	ld	r24, X+
    2418:	9c 91       	ld	r25, X
    241a:	13 97       	sbiw	r26, 0x03	; 3
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	13 96       	adiw	r26, 0x03	; 3
    2420:	9c 93       	st	X, r25
    2422:	8e 93       	st	-X, r24
    2424:	12 97       	sbiw	r26, 0x02	; 2
    2426:	20 30       	cpi	r18, 0x00	; 0
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	38 07       	cpc	r19, r24
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	48 07       	cpc	r20, r24
    2430:	80 e4       	ldi	r24, 0x40	; 64
    2432:	58 07       	cpc	r21, r24
    2434:	58 f3       	brcs	.-42     	; 0x240c <__unpack_f+0x66>
    2436:	14 96       	adiw	r26, 0x04	; 4
    2438:	2d 93       	st	X+, r18
    243a:	3d 93       	st	X+, r19
    243c:	4d 93       	st	X+, r20
    243e:	5c 93       	st	X, r21
    2440:	17 97       	sbiw	r26, 0x07	; 7
    2442:	08 95       	ret
    2444:	2f 3f       	cpi	r18, 0xFF	; 255
    2446:	31 05       	cpc	r19, r1
    2448:	79 f4       	brne	.+30     	; 0x2468 <__unpack_f+0xc2>
    244a:	41 15       	cp	r20, r1
    244c:	51 05       	cpc	r21, r1
    244e:	61 05       	cpc	r22, r1
    2450:	71 05       	cpc	r23, r1
    2452:	19 f4       	brne	.+6      	; 0x245a <__unpack_f+0xb4>
    2454:	84 e0       	ldi	r24, 0x04	; 4
    2456:	8c 93       	st	X, r24
    2458:	08 95       	ret
    245a:	64 ff       	sbrs	r22, 4
    245c:	03 c0       	rjmp	.+6      	; 0x2464 <__unpack_f+0xbe>
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	8c 93       	st	X, r24
    2462:	12 c0       	rjmp	.+36     	; 0x2488 <__unpack_f+0xe2>
    2464:	1c 92       	st	X, r1
    2466:	10 c0       	rjmp	.+32     	; 0x2488 <__unpack_f+0xe2>
    2468:	2f 57       	subi	r18, 0x7F	; 127
    246a:	30 40       	sbci	r19, 0x00	; 0
    246c:	13 96       	adiw	r26, 0x03	; 3
    246e:	3c 93       	st	X, r19
    2470:	2e 93       	st	-X, r18
    2472:	12 97       	sbiw	r26, 0x02	; 2
    2474:	83 e0       	ldi	r24, 0x03	; 3
    2476:	8c 93       	st	X, r24
    2478:	87 e0       	ldi	r24, 0x07	; 7
    247a:	44 0f       	add	r20, r20
    247c:	55 1f       	adc	r21, r21
    247e:	66 1f       	adc	r22, r22
    2480:	77 1f       	adc	r23, r23
    2482:	8a 95       	dec	r24
    2484:	d1 f7       	brne	.-12     	; 0x247a <__unpack_f+0xd4>
    2486:	70 64       	ori	r23, 0x40	; 64
    2488:	14 96       	adiw	r26, 0x04	; 4
    248a:	4d 93       	st	X+, r20
    248c:	5d 93       	st	X+, r21
    248e:	6d 93       	st	X+, r22
    2490:	7c 93       	st	X, r23
    2492:	17 97       	sbiw	r26, 0x07	; 7
    2494:	08 95       	ret

00002496 <__fpcmp_parts_f>:
    2496:	1f 93       	push	r17
    2498:	dc 01       	movw	r26, r24
    249a:	fb 01       	movw	r30, r22
    249c:	9c 91       	ld	r25, X
    249e:	92 30       	cpi	r25, 0x02	; 2
    24a0:	08 f4       	brcc	.+2      	; 0x24a4 <__fpcmp_parts_f+0xe>
    24a2:	47 c0       	rjmp	.+142    	; 0x2532 <__fpcmp_parts_f+0x9c>
    24a4:	80 81       	ld	r24, Z
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	08 f4       	brcc	.+2      	; 0x24ac <__fpcmp_parts_f+0x16>
    24aa:	43 c0       	rjmp	.+134    	; 0x2532 <__fpcmp_parts_f+0x9c>
    24ac:	94 30       	cpi	r25, 0x04	; 4
    24ae:	51 f4       	brne	.+20     	; 0x24c4 <__fpcmp_parts_f+0x2e>
    24b0:	11 96       	adiw	r26, 0x01	; 1
    24b2:	1c 91       	ld	r17, X
    24b4:	84 30       	cpi	r24, 0x04	; 4
    24b6:	99 f5       	brne	.+102    	; 0x251e <__fpcmp_parts_f+0x88>
    24b8:	81 81       	ldd	r24, Z+1	; 0x01
    24ba:	68 2f       	mov	r22, r24
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	61 1b       	sub	r22, r17
    24c0:	71 09       	sbc	r23, r1
    24c2:	3f c0       	rjmp	.+126    	; 0x2542 <__fpcmp_parts_f+0xac>
    24c4:	84 30       	cpi	r24, 0x04	; 4
    24c6:	21 f0       	breq	.+8      	; 0x24d0 <__fpcmp_parts_f+0x3a>
    24c8:	92 30       	cpi	r25, 0x02	; 2
    24ca:	31 f4       	brne	.+12     	; 0x24d8 <__fpcmp_parts_f+0x42>
    24cc:	82 30       	cpi	r24, 0x02	; 2
    24ce:	b9 f1       	breq	.+110    	; 0x253e <__fpcmp_parts_f+0xa8>
    24d0:	81 81       	ldd	r24, Z+1	; 0x01
    24d2:	88 23       	and	r24, r24
    24d4:	89 f1       	breq	.+98     	; 0x2538 <__fpcmp_parts_f+0xa2>
    24d6:	2d c0       	rjmp	.+90     	; 0x2532 <__fpcmp_parts_f+0x9c>
    24d8:	11 96       	adiw	r26, 0x01	; 1
    24da:	1c 91       	ld	r17, X
    24dc:	11 97       	sbiw	r26, 0x01	; 1
    24de:	82 30       	cpi	r24, 0x02	; 2
    24e0:	f1 f0       	breq	.+60     	; 0x251e <__fpcmp_parts_f+0x88>
    24e2:	81 81       	ldd	r24, Z+1	; 0x01
    24e4:	18 17       	cp	r17, r24
    24e6:	d9 f4       	brne	.+54     	; 0x251e <__fpcmp_parts_f+0x88>
    24e8:	12 96       	adiw	r26, 0x02	; 2
    24ea:	2d 91       	ld	r18, X+
    24ec:	3c 91       	ld	r19, X
    24ee:	13 97       	sbiw	r26, 0x03	; 3
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	82 17       	cp	r24, r18
    24f6:	93 07       	cpc	r25, r19
    24f8:	94 f0       	brlt	.+36     	; 0x251e <__fpcmp_parts_f+0x88>
    24fa:	28 17       	cp	r18, r24
    24fc:	39 07       	cpc	r19, r25
    24fe:	bc f0       	brlt	.+46     	; 0x252e <__fpcmp_parts_f+0x98>
    2500:	14 96       	adiw	r26, 0x04	; 4
    2502:	8d 91       	ld	r24, X+
    2504:	9d 91       	ld	r25, X+
    2506:	0d 90       	ld	r0, X+
    2508:	bc 91       	ld	r27, X
    250a:	a0 2d       	mov	r26, r0
    250c:	24 81       	ldd	r18, Z+4	; 0x04
    250e:	35 81       	ldd	r19, Z+5	; 0x05
    2510:	46 81       	ldd	r20, Z+6	; 0x06
    2512:	57 81       	ldd	r21, Z+7	; 0x07
    2514:	28 17       	cp	r18, r24
    2516:	39 07       	cpc	r19, r25
    2518:	4a 07       	cpc	r20, r26
    251a:	5b 07       	cpc	r21, r27
    251c:	18 f4       	brcc	.+6      	; 0x2524 <__fpcmp_parts_f+0x8e>
    251e:	11 23       	and	r17, r17
    2520:	41 f0       	breq	.+16     	; 0x2532 <__fpcmp_parts_f+0x9c>
    2522:	0a c0       	rjmp	.+20     	; 0x2538 <__fpcmp_parts_f+0xa2>
    2524:	82 17       	cp	r24, r18
    2526:	93 07       	cpc	r25, r19
    2528:	a4 07       	cpc	r26, r20
    252a:	b5 07       	cpc	r27, r21
    252c:	40 f4       	brcc	.+16     	; 0x253e <__fpcmp_parts_f+0xa8>
    252e:	11 23       	and	r17, r17
    2530:	19 f0       	breq	.+6      	; 0x2538 <__fpcmp_parts_f+0xa2>
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	05 c0       	rjmp	.+10     	; 0x2542 <__fpcmp_parts_f+0xac>
    2538:	6f ef       	ldi	r22, 0xFF	; 255
    253a:	7f ef       	ldi	r23, 0xFF	; 255
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <__fpcmp_parts_f+0xac>
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	cb 01       	movw	r24, r22
    2544:	1f 91       	pop	r17
    2546:	08 95       	ret

00002548 <__udivmodqi4>:
    2548:	99 1b       	sub	r25, r25
    254a:	79 e0       	ldi	r23, 0x09	; 9
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <__udivmodqi4_ep>

0000254e <__udivmodqi4_loop>:
    254e:	99 1f       	adc	r25, r25
    2550:	96 17       	cp	r25, r22
    2552:	08 f0       	brcs	.+2      	; 0x2556 <__udivmodqi4_ep>
    2554:	96 1b       	sub	r25, r22

00002556 <__udivmodqi4_ep>:
    2556:	88 1f       	adc	r24, r24
    2558:	7a 95       	dec	r23
    255a:	c9 f7       	brne	.-14     	; 0x254e <__udivmodqi4_loop>
    255c:	80 95       	com	r24
    255e:	08 95       	ret

00002560 <__udivmodhi4>:
    2560:	aa 1b       	sub	r26, r26
    2562:	bb 1b       	sub	r27, r27
    2564:	51 e1       	ldi	r21, 0x11	; 17
    2566:	07 c0       	rjmp	.+14     	; 0x2576 <__udivmodhi4_ep>

00002568 <__udivmodhi4_loop>:
    2568:	aa 1f       	adc	r26, r26
    256a:	bb 1f       	adc	r27, r27
    256c:	a6 17       	cp	r26, r22
    256e:	b7 07       	cpc	r27, r23
    2570:	10 f0       	brcs	.+4      	; 0x2576 <__udivmodhi4_ep>
    2572:	a6 1b       	sub	r26, r22
    2574:	b7 0b       	sbc	r27, r23

00002576 <__udivmodhi4_ep>:
    2576:	88 1f       	adc	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	5a 95       	dec	r21
    257c:	a9 f7       	brne	.-22     	; 0x2568 <__udivmodhi4_loop>
    257e:	80 95       	com	r24
    2580:	90 95       	com	r25
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	08 95       	ret

00002588 <__divmodhi4>:
    2588:	97 fb       	bst	r25, 7
    258a:	09 2e       	mov	r0, r25
    258c:	07 26       	eor	r0, r23
    258e:	0a d0       	rcall	.+20     	; 0x25a4 <__divmodhi4_neg1>
    2590:	77 fd       	sbrc	r23, 7
    2592:	04 d0       	rcall	.+8      	; 0x259c <__divmodhi4_neg2>
    2594:	e5 df       	rcall	.-54     	; 0x2560 <__udivmodhi4>
    2596:	06 d0       	rcall	.+12     	; 0x25a4 <__divmodhi4_neg1>
    2598:	00 20       	and	r0, r0
    259a:	1a f4       	brpl	.+6      	; 0x25a2 <__divmodhi4_exit>

0000259c <__divmodhi4_neg2>:
    259c:	70 95       	com	r23
    259e:	61 95       	neg	r22
    25a0:	7f 4f       	sbci	r23, 0xFF	; 255

000025a2 <__divmodhi4_exit>:
    25a2:	08 95       	ret

000025a4 <__divmodhi4_neg1>:
    25a4:	f6 f7       	brtc	.-4      	; 0x25a2 <__divmodhi4_exit>
    25a6:	90 95       	com	r25
    25a8:	81 95       	neg	r24
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	08 95       	ret

000025ae <__prologue_saves__>:
    25ae:	2f 92       	push	r2
    25b0:	3f 92       	push	r3
    25b2:	4f 92       	push	r4
    25b4:	5f 92       	push	r5
    25b6:	6f 92       	push	r6
    25b8:	7f 92       	push	r7
    25ba:	8f 92       	push	r8
    25bc:	9f 92       	push	r9
    25be:	af 92       	push	r10
    25c0:	bf 92       	push	r11
    25c2:	cf 92       	push	r12
    25c4:	df 92       	push	r13
    25c6:	ef 92       	push	r14
    25c8:	ff 92       	push	r15
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	ca 1b       	sub	r28, r26
    25d8:	db 0b       	sbc	r29, r27
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	09 94       	ijmp

000025e6 <__epilogue_restores__>:
    25e6:	2a 88       	ldd	r2, Y+18	; 0x12
    25e8:	39 88       	ldd	r3, Y+17	; 0x11
    25ea:	48 88       	ldd	r4, Y+16	; 0x10
    25ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    25ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    25f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25f8:	b9 84       	ldd	r11, Y+9	; 0x09
    25fa:	c8 84       	ldd	r12, Y+8	; 0x08
    25fc:	df 80       	ldd	r13, Y+7	; 0x07
    25fe:	ee 80       	ldd	r14, Y+6	; 0x06
    2600:	fd 80       	ldd	r15, Y+5	; 0x05
    2602:	0c 81       	ldd	r16, Y+4	; 0x04
    2604:	1b 81       	ldd	r17, Y+3	; 0x03
    2606:	aa 81       	ldd	r26, Y+2	; 0x02
    2608:	b9 81       	ldd	r27, Y+1	; 0x01
    260a:	ce 0f       	add	r28, r30
    260c:	d1 1d       	adc	r29, r1
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	ed 01       	movw	r28, r26
    261a:	08 95       	ret

0000261c <sprintf>:
    261c:	ae e0       	ldi	r26, 0x0E	; 14
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e4 e1       	ldi	r30, 0x14	; 20
    2622:	f3 e1       	ldi	r31, 0x13	; 19
    2624:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__prologue_saves__+0x1c>
    2628:	0d 89       	ldd	r16, Y+21	; 0x15
    262a:	1e 89       	ldd	r17, Y+22	; 0x16
    262c:	86 e0       	ldi	r24, 0x06	; 6
    262e:	8c 83       	std	Y+4, r24	; 0x04
    2630:	1a 83       	std	Y+2, r17	; 0x02
    2632:	09 83       	std	Y+1, r16	; 0x01
    2634:	8f ef       	ldi	r24, 0xFF	; 255
    2636:	9f e7       	ldi	r25, 0x7F	; 127
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	9e 01       	movw	r18, r28
    263e:	27 5e       	subi	r18, 0xE7	; 231
    2640:	3f 4f       	sbci	r19, 0xFF	; 255
    2642:	ce 01       	movw	r24, r28
    2644:	01 96       	adiw	r24, 0x01	; 1
    2646:	6f 89       	ldd	r22, Y+23	; 0x17
    2648:	78 8d       	ldd	r23, Y+24	; 0x18
    264a:	a9 01       	movw	r20, r18
    264c:	0e 94 32 13 	call	0x2664	; 0x2664 <vfprintf>
    2650:	2f 81       	ldd	r18, Y+7	; 0x07
    2652:	38 85       	ldd	r19, Y+8	; 0x08
    2654:	02 0f       	add	r16, r18
    2656:	13 1f       	adc	r17, r19
    2658:	f8 01       	movw	r30, r16
    265a:	10 82       	st	Z, r1
    265c:	2e 96       	adiw	r28, 0x0e	; 14
    265e:	e4 e0       	ldi	r30, 0x04	; 4
    2660:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__epilogue_restores__+0x1c>

00002664 <vfprintf>:
    2664:	ab e0       	ldi	r26, 0x0B	; 11
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e8 e3       	ldi	r30, 0x38	; 56
    266a:	f3 e1       	ldi	r31, 0x13	; 19
    266c:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__>
    2670:	3c 01       	movw	r6, r24
    2672:	2b 01       	movw	r4, r22
    2674:	5a 01       	movw	r10, r20
    2676:	fc 01       	movw	r30, r24
    2678:	17 82       	std	Z+7, r1	; 0x07
    267a:	16 82       	std	Z+6, r1	; 0x06
    267c:	83 81       	ldd	r24, Z+3	; 0x03
    267e:	81 fd       	sbrc	r24, 1
    2680:	03 c0       	rjmp	.+6      	; 0x2688 <vfprintf+0x24>
    2682:	6f ef       	ldi	r22, 0xFF	; 255
    2684:	7f ef       	ldi	r23, 0xFF	; 255
    2686:	c6 c1       	rjmp	.+908    	; 0x2a14 <vfprintf+0x3b0>
    2688:	9a e0       	ldi	r25, 0x0A	; 10
    268a:	89 2e       	mov	r8, r25
    268c:	1e 01       	movw	r2, r28
    268e:	08 94       	sec
    2690:	21 1c       	adc	r2, r1
    2692:	31 1c       	adc	r3, r1
    2694:	f3 01       	movw	r30, r6
    2696:	23 81       	ldd	r18, Z+3	; 0x03
    2698:	f2 01       	movw	r30, r4
    269a:	23 fd       	sbrc	r18, 3
    269c:	85 91       	lpm	r24, Z+
    269e:	23 ff       	sbrs	r18, 3
    26a0:	81 91       	ld	r24, Z+
    26a2:	2f 01       	movw	r4, r30
    26a4:	88 23       	and	r24, r24
    26a6:	09 f4       	brne	.+2      	; 0x26aa <vfprintf+0x46>
    26a8:	b2 c1       	rjmp	.+868    	; 0x2a0e <vfprintf+0x3aa>
    26aa:	85 32       	cpi	r24, 0x25	; 37
    26ac:	39 f4       	brne	.+14     	; 0x26bc <vfprintf+0x58>
    26ae:	23 fd       	sbrc	r18, 3
    26b0:	85 91       	lpm	r24, Z+
    26b2:	23 ff       	sbrs	r18, 3
    26b4:	81 91       	ld	r24, Z+
    26b6:	2f 01       	movw	r4, r30
    26b8:	85 32       	cpi	r24, 0x25	; 37
    26ba:	29 f4       	brne	.+10     	; 0x26c6 <vfprintf+0x62>
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	b3 01       	movw	r22, r6
    26c0:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <fputc>
    26c4:	e7 cf       	rjmp	.-50     	; 0x2694 <vfprintf+0x30>
    26c6:	98 2f       	mov	r25, r24
    26c8:	ff 24       	eor	r15, r15
    26ca:	ee 24       	eor	r14, r14
    26cc:	99 24       	eor	r9, r9
    26ce:	ff e1       	ldi	r31, 0x1F	; 31
    26d0:	ff 15       	cp	r31, r15
    26d2:	d0 f0       	brcs	.+52     	; 0x2708 <vfprintf+0xa4>
    26d4:	9b 32       	cpi	r25, 0x2B	; 43
    26d6:	69 f0       	breq	.+26     	; 0x26f2 <vfprintf+0x8e>
    26d8:	9c 32       	cpi	r25, 0x2C	; 44
    26da:	28 f4       	brcc	.+10     	; 0x26e6 <vfprintf+0x82>
    26dc:	90 32       	cpi	r25, 0x20	; 32
    26de:	59 f0       	breq	.+22     	; 0x26f6 <vfprintf+0x92>
    26e0:	93 32       	cpi	r25, 0x23	; 35
    26e2:	91 f4       	brne	.+36     	; 0x2708 <vfprintf+0xa4>
    26e4:	0e c0       	rjmp	.+28     	; 0x2702 <vfprintf+0x9e>
    26e6:	9d 32       	cpi	r25, 0x2D	; 45
    26e8:	49 f0       	breq	.+18     	; 0x26fc <vfprintf+0x98>
    26ea:	90 33       	cpi	r25, 0x30	; 48
    26ec:	69 f4       	brne	.+26     	; 0x2708 <vfprintf+0xa4>
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	24 c0       	rjmp	.+72     	; 0x273a <vfprintf+0xd6>
    26f2:	52 e0       	ldi	r21, 0x02	; 2
    26f4:	f5 2a       	or	r15, r21
    26f6:	84 e0       	ldi	r24, 0x04	; 4
    26f8:	f8 2a       	or	r15, r24
    26fa:	28 c0       	rjmp	.+80     	; 0x274c <vfprintf+0xe8>
    26fc:	98 e0       	ldi	r25, 0x08	; 8
    26fe:	f9 2a       	or	r15, r25
    2700:	25 c0       	rjmp	.+74     	; 0x274c <vfprintf+0xe8>
    2702:	e0 e1       	ldi	r30, 0x10	; 16
    2704:	fe 2a       	or	r15, r30
    2706:	22 c0       	rjmp	.+68     	; 0x274c <vfprintf+0xe8>
    2708:	f7 fc       	sbrc	r15, 7
    270a:	29 c0       	rjmp	.+82     	; 0x275e <vfprintf+0xfa>
    270c:	89 2f       	mov	r24, r25
    270e:	80 53       	subi	r24, 0x30	; 48
    2710:	8a 30       	cpi	r24, 0x0A	; 10
    2712:	70 f4       	brcc	.+28     	; 0x2730 <vfprintf+0xcc>
    2714:	f6 fe       	sbrs	r15, 6
    2716:	05 c0       	rjmp	.+10     	; 0x2722 <vfprintf+0xbe>
    2718:	98 9c       	mul	r9, r8
    271a:	90 2c       	mov	r9, r0
    271c:	11 24       	eor	r1, r1
    271e:	98 0e       	add	r9, r24
    2720:	15 c0       	rjmp	.+42     	; 0x274c <vfprintf+0xe8>
    2722:	e8 9c       	mul	r14, r8
    2724:	e0 2c       	mov	r14, r0
    2726:	11 24       	eor	r1, r1
    2728:	e8 0e       	add	r14, r24
    272a:	f0 e2       	ldi	r31, 0x20	; 32
    272c:	ff 2a       	or	r15, r31
    272e:	0e c0       	rjmp	.+28     	; 0x274c <vfprintf+0xe8>
    2730:	9e 32       	cpi	r25, 0x2E	; 46
    2732:	29 f4       	brne	.+10     	; 0x273e <vfprintf+0xda>
    2734:	f6 fc       	sbrc	r15, 6
    2736:	6b c1       	rjmp	.+726    	; 0x2a0e <vfprintf+0x3aa>
    2738:	40 e4       	ldi	r20, 0x40	; 64
    273a:	f4 2a       	or	r15, r20
    273c:	07 c0       	rjmp	.+14     	; 0x274c <vfprintf+0xe8>
    273e:	9c 36       	cpi	r25, 0x6C	; 108
    2740:	19 f4       	brne	.+6      	; 0x2748 <vfprintf+0xe4>
    2742:	50 e8       	ldi	r21, 0x80	; 128
    2744:	f5 2a       	or	r15, r21
    2746:	02 c0       	rjmp	.+4      	; 0x274c <vfprintf+0xe8>
    2748:	98 36       	cpi	r25, 0x68	; 104
    274a:	49 f4       	brne	.+18     	; 0x275e <vfprintf+0xfa>
    274c:	f2 01       	movw	r30, r4
    274e:	23 fd       	sbrc	r18, 3
    2750:	95 91       	lpm	r25, Z+
    2752:	23 ff       	sbrs	r18, 3
    2754:	91 91       	ld	r25, Z+
    2756:	2f 01       	movw	r4, r30
    2758:	99 23       	and	r25, r25
    275a:	09 f0       	breq	.+2      	; 0x275e <vfprintf+0xfa>
    275c:	b8 cf       	rjmp	.-144    	; 0x26ce <vfprintf+0x6a>
    275e:	89 2f       	mov	r24, r25
    2760:	85 54       	subi	r24, 0x45	; 69
    2762:	83 30       	cpi	r24, 0x03	; 3
    2764:	18 f0       	brcs	.+6      	; 0x276c <vfprintf+0x108>
    2766:	80 52       	subi	r24, 0x20	; 32
    2768:	83 30       	cpi	r24, 0x03	; 3
    276a:	38 f4       	brcc	.+14     	; 0x277a <vfprintf+0x116>
    276c:	44 e0       	ldi	r20, 0x04	; 4
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	a4 0e       	add	r10, r20
    2772:	b5 1e       	adc	r11, r21
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	59 83       	std	Y+1, r21	; 0x01
    2778:	0f c0       	rjmp	.+30     	; 0x2798 <vfprintf+0x134>
    277a:	93 36       	cpi	r25, 0x63	; 99
    277c:	31 f0       	breq	.+12     	; 0x278a <vfprintf+0x126>
    277e:	93 37       	cpi	r25, 0x73	; 115
    2780:	79 f0       	breq	.+30     	; 0x27a0 <vfprintf+0x13c>
    2782:	93 35       	cpi	r25, 0x53	; 83
    2784:	09 f0       	breq	.+2      	; 0x2788 <vfprintf+0x124>
    2786:	56 c0       	rjmp	.+172    	; 0x2834 <vfprintf+0x1d0>
    2788:	20 c0       	rjmp	.+64     	; 0x27ca <vfprintf+0x166>
    278a:	f5 01       	movw	r30, r10
    278c:	80 81       	ld	r24, Z
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	42 e0       	ldi	r20, 0x02	; 2
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	a4 0e       	add	r10, r20
    2796:	b5 1e       	adc	r11, r21
    2798:	61 01       	movw	r12, r2
    279a:	01 e0       	ldi	r16, 0x01	; 1
    279c:	10 e0       	ldi	r17, 0x00	; 0
    279e:	12 c0       	rjmp	.+36     	; 0x27c4 <vfprintf+0x160>
    27a0:	f5 01       	movw	r30, r10
    27a2:	c0 80       	ld	r12, Z
    27a4:	d1 80       	ldd	r13, Z+1	; 0x01
    27a6:	f6 fc       	sbrc	r15, 6
    27a8:	03 c0       	rjmp	.+6      	; 0x27b0 <vfprintf+0x14c>
    27aa:	6f ef       	ldi	r22, 0xFF	; 255
    27ac:	7f ef       	ldi	r23, 0xFF	; 255
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <vfprintf+0x150>
    27b0:	69 2d       	mov	r22, r9
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	42 e0       	ldi	r20, 0x02	; 2
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	a4 0e       	add	r10, r20
    27ba:	b5 1e       	adc	r11, r21
    27bc:	c6 01       	movw	r24, r12
    27be:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <strnlen>
    27c2:	8c 01       	movw	r16, r24
    27c4:	5f e7       	ldi	r21, 0x7F	; 127
    27c6:	f5 22       	and	r15, r21
    27c8:	14 c0       	rjmp	.+40     	; 0x27f2 <vfprintf+0x18e>
    27ca:	f5 01       	movw	r30, r10
    27cc:	c0 80       	ld	r12, Z
    27ce:	d1 80       	ldd	r13, Z+1	; 0x01
    27d0:	f6 fc       	sbrc	r15, 6
    27d2:	03 c0       	rjmp	.+6      	; 0x27da <vfprintf+0x176>
    27d4:	6f ef       	ldi	r22, 0xFF	; 255
    27d6:	7f ef       	ldi	r23, 0xFF	; 255
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <vfprintf+0x17a>
    27da:	69 2d       	mov	r22, r9
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	42 e0       	ldi	r20, 0x02	; 2
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	a4 0e       	add	r10, r20
    27e4:	b5 1e       	adc	r11, r21
    27e6:	c6 01       	movw	r24, r12
    27e8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <strnlen_P>
    27ec:	8c 01       	movw	r16, r24
    27ee:	50 e8       	ldi	r21, 0x80	; 128
    27f0:	f5 2a       	or	r15, r21
    27f2:	f3 fe       	sbrs	r15, 3
    27f4:	07 c0       	rjmp	.+14     	; 0x2804 <vfprintf+0x1a0>
    27f6:	1a c0       	rjmp	.+52     	; 0x282c <vfprintf+0x1c8>
    27f8:	80 e2       	ldi	r24, 0x20	; 32
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	b3 01       	movw	r22, r6
    27fe:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <fputc>
    2802:	ea 94       	dec	r14
    2804:	8e 2d       	mov	r24, r14
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	08 17       	cp	r16, r24
    280a:	19 07       	cpc	r17, r25
    280c:	a8 f3       	brcs	.-22     	; 0x27f8 <vfprintf+0x194>
    280e:	0e c0       	rjmp	.+28     	; 0x282c <vfprintf+0x1c8>
    2810:	f6 01       	movw	r30, r12
    2812:	f7 fc       	sbrc	r15, 7
    2814:	85 91       	lpm	r24, Z+
    2816:	f7 fe       	sbrs	r15, 7
    2818:	81 91       	ld	r24, Z+
    281a:	6f 01       	movw	r12, r30
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	b3 01       	movw	r22, r6
    2820:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <fputc>
    2824:	e1 10       	cpse	r14, r1
    2826:	ea 94       	dec	r14
    2828:	01 50       	subi	r16, 0x01	; 1
    282a:	10 40       	sbci	r17, 0x00	; 0
    282c:	01 15       	cp	r16, r1
    282e:	11 05       	cpc	r17, r1
    2830:	79 f7       	brne	.-34     	; 0x2810 <vfprintf+0x1ac>
    2832:	ea c0       	rjmp	.+468    	; 0x2a08 <vfprintf+0x3a4>
    2834:	94 36       	cpi	r25, 0x64	; 100
    2836:	11 f0       	breq	.+4      	; 0x283c <vfprintf+0x1d8>
    2838:	99 36       	cpi	r25, 0x69	; 105
    283a:	69 f5       	brne	.+90     	; 0x2896 <vfprintf+0x232>
    283c:	f7 fe       	sbrs	r15, 7
    283e:	08 c0       	rjmp	.+16     	; 0x2850 <vfprintf+0x1ec>
    2840:	f5 01       	movw	r30, r10
    2842:	20 81       	ld	r18, Z
    2844:	31 81       	ldd	r19, Z+1	; 0x01
    2846:	42 81       	ldd	r20, Z+2	; 0x02
    2848:	53 81       	ldd	r21, Z+3	; 0x03
    284a:	84 e0       	ldi	r24, 0x04	; 4
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0a c0       	rjmp	.+20     	; 0x2864 <vfprintf+0x200>
    2850:	f5 01       	movw	r30, r10
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	9c 01       	movw	r18, r24
    2858:	44 27       	eor	r20, r20
    285a:	37 fd       	sbrc	r19, 7
    285c:	40 95       	com	r20
    285e:	54 2f       	mov	r21, r20
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	a8 0e       	add	r10, r24
    2866:	b9 1e       	adc	r11, r25
    2868:	9f e6       	ldi	r25, 0x6F	; 111
    286a:	f9 22       	and	r15, r25
    286c:	57 ff       	sbrs	r21, 7
    286e:	09 c0       	rjmp	.+18     	; 0x2882 <vfprintf+0x21e>
    2870:	50 95       	com	r21
    2872:	40 95       	com	r20
    2874:	30 95       	com	r19
    2876:	21 95       	neg	r18
    2878:	3f 4f       	sbci	r19, 0xFF	; 255
    287a:	4f 4f       	sbci	r20, 0xFF	; 255
    287c:	5f 4f       	sbci	r21, 0xFF	; 255
    287e:	e0 e8       	ldi	r30, 0x80	; 128
    2880:	fe 2a       	or	r15, r30
    2882:	ca 01       	movw	r24, r20
    2884:	b9 01       	movw	r22, r18
    2886:	a1 01       	movw	r20, r2
    2888:	2a e0       	ldi	r18, 0x0A	; 10
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__ultoa_invert>
    2890:	d8 2e       	mov	r13, r24
    2892:	d2 18       	sub	r13, r2
    2894:	40 c0       	rjmp	.+128    	; 0x2916 <vfprintf+0x2b2>
    2896:	95 37       	cpi	r25, 0x75	; 117
    2898:	29 f4       	brne	.+10     	; 0x28a4 <vfprintf+0x240>
    289a:	1f 2d       	mov	r17, r15
    289c:	1f 7e       	andi	r17, 0xEF	; 239
    289e:	2a e0       	ldi	r18, 0x0A	; 10
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	1d c0       	rjmp	.+58     	; 0x28de <vfprintf+0x27a>
    28a4:	1f 2d       	mov	r17, r15
    28a6:	19 7f       	andi	r17, 0xF9	; 249
    28a8:	9f 36       	cpi	r25, 0x6F	; 111
    28aa:	61 f0       	breq	.+24     	; 0x28c4 <vfprintf+0x260>
    28ac:	90 37       	cpi	r25, 0x70	; 112
    28ae:	20 f4       	brcc	.+8      	; 0x28b8 <vfprintf+0x254>
    28b0:	98 35       	cpi	r25, 0x58	; 88
    28b2:	09 f0       	breq	.+2      	; 0x28b6 <vfprintf+0x252>
    28b4:	ac c0       	rjmp	.+344    	; 0x2a0e <vfprintf+0x3aa>
    28b6:	0f c0       	rjmp	.+30     	; 0x28d6 <vfprintf+0x272>
    28b8:	90 37       	cpi	r25, 0x70	; 112
    28ba:	39 f0       	breq	.+14     	; 0x28ca <vfprintf+0x266>
    28bc:	98 37       	cpi	r25, 0x78	; 120
    28be:	09 f0       	breq	.+2      	; 0x28c2 <vfprintf+0x25e>
    28c0:	a6 c0       	rjmp	.+332    	; 0x2a0e <vfprintf+0x3aa>
    28c2:	04 c0       	rjmp	.+8      	; 0x28cc <vfprintf+0x268>
    28c4:	28 e0       	ldi	r18, 0x08	; 8
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	0a c0       	rjmp	.+20     	; 0x28de <vfprintf+0x27a>
    28ca:	10 61       	ori	r17, 0x10	; 16
    28cc:	14 fd       	sbrc	r17, 4
    28ce:	14 60       	ori	r17, 0x04	; 4
    28d0:	20 e1       	ldi	r18, 0x10	; 16
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	04 c0       	rjmp	.+8      	; 0x28de <vfprintf+0x27a>
    28d6:	14 fd       	sbrc	r17, 4
    28d8:	16 60       	ori	r17, 0x06	; 6
    28da:	20 e1       	ldi	r18, 0x10	; 16
    28dc:	32 e0       	ldi	r19, 0x02	; 2
    28de:	17 ff       	sbrs	r17, 7
    28e0:	08 c0       	rjmp	.+16     	; 0x28f2 <vfprintf+0x28e>
    28e2:	f5 01       	movw	r30, r10
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	44 e0       	ldi	r20, 0x04	; 4
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	08 c0       	rjmp	.+16     	; 0x2902 <vfprintf+0x29e>
    28f2:	f5 01       	movw	r30, r10
    28f4:	80 81       	ld	r24, Z
    28f6:	91 81       	ldd	r25, Z+1	; 0x01
    28f8:	bc 01       	movw	r22, r24
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	42 e0       	ldi	r20, 0x02	; 2
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	a4 0e       	add	r10, r20
    2904:	b5 1e       	adc	r11, r21
    2906:	a1 01       	movw	r20, r2
    2908:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__ultoa_invert>
    290c:	d8 2e       	mov	r13, r24
    290e:	d2 18       	sub	r13, r2
    2910:	8f e7       	ldi	r24, 0x7F	; 127
    2912:	f8 2e       	mov	r15, r24
    2914:	f1 22       	and	r15, r17
    2916:	f6 fe       	sbrs	r15, 6
    2918:	0b c0       	rjmp	.+22     	; 0x2930 <vfprintf+0x2cc>
    291a:	5e ef       	ldi	r21, 0xFE	; 254
    291c:	f5 22       	and	r15, r21
    291e:	d9 14       	cp	r13, r9
    2920:	38 f4       	brcc	.+14     	; 0x2930 <vfprintf+0x2cc>
    2922:	f4 fe       	sbrs	r15, 4
    2924:	07 c0       	rjmp	.+14     	; 0x2934 <vfprintf+0x2d0>
    2926:	f2 fc       	sbrc	r15, 2
    2928:	05 c0       	rjmp	.+10     	; 0x2934 <vfprintf+0x2d0>
    292a:	8f ee       	ldi	r24, 0xEF	; 239
    292c:	f8 22       	and	r15, r24
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <vfprintf+0x2d0>
    2930:	1d 2d       	mov	r17, r13
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <vfprintf+0x2d2>
    2934:	19 2d       	mov	r17, r9
    2936:	f4 fe       	sbrs	r15, 4
    2938:	0d c0       	rjmp	.+26     	; 0x2954 <vfprintf+0x2f0>
    293a:	fe 01       	movw	r30, r28
    293c:	ed 0d       	add	r30, r13
    293e:	f1 1d       	adc	r31, r1
    2940:	80 81       	ld	r24, Z
    2942:	80 33       	cpi	r24, 0x30	; 48
    2944:	19 f4       	brne	.+6      	; 0x294c <vfprintf+0x2e8>
    2946:	99 ee       	ldi	r25, 0xE9	; 233
    2948:	f9 22       	and	r15, r25
    294a:	08 c0       	rjmp	.+16     	; 0x295c <vfprintf+0x2f8>
    294c:	1f 5f       	subi	r17, 0xFF	; 255
    294e:	f2 fe       	sbrs	r15, 2
    2950:	05 c0       	rjmp	.+10     	; 0x295c <vfprintf+0x2f8>
    2952:	03 c0       	rjmp	.+6      	; 0x295a <vfprintf+0x2f6>
    2954:	8f 2d       	mov	r24, r15
    2956:	86 78       	andi	r24, 0x86	; 134
    2958:	09 f0       	breq	.+2      	; 0x295c <vfprintf+0x2f8>
    295a:	1f 5f       	subi	r17, 0xFF	; 255
    295c:	0f 2d       	mov	r16, r15
    295e:	f3 fc       	sbrc	r15, 3
    2960:	14 c0       	rjmp	.+40     	; 0x298a <vfprintf+0x326>
    2962:	f0 fe       	sbrs	r15, 0
    2964:	0f c0       	rjmp	.+30     	; 0x2984 <vfprintf+0x320>
    2966:	1e 15       	cp	r17, r14
    2968:	10 f0       	brcs	.+4      	; 0x296e <vfprintf+0x30a>
    296a:	9d 2c       	mov	r9, r13
    296c:	0b c0       	rjmp	.+22     	; 0x2984 <vfprintf+0x320>
    296e:	9d 2c       	mov	r9, r13
    2970:	9e 0c       	add	r9, r14
    2972:	91 1a       	sub	r9, r17
    2974:	1e 2d       	mov	r17, r14
    2976:	06 c0       	rjmp	.+12     	; 0x2984 <vfprintf+0x320>
    2978:	80 e2       	ldi	r24, 0x20	; 32
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	b3 01       	movw	r22, r6
    297e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <fputc>
    2982:	1f 5f       	subi	r17, 0xFF	; 255
    2984:	1e 15       	cp	r17, r14
    2986:	c0 f3       	brcs	.-16     	; 0x2978 <vfprintf+0x314>
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <vfprintf+0x32e>
    298a:	1e 15       	cp	r17, r14
    298c:	10 f4       	brcc	.+4      	; 0x2992 <vfprintf+0x32e>
    298e:	e1 1a       	sub	r14, r17
    2990:	01 c0       	rjmp	.+2      	; 0x2994 <vfprintf+0x330>
    2992:	ee 24       	eor	r14, r14
    2994:	04 ff       	sbrs	r16, 4
    2996:	0f c0       	rjmp	.+30     	; 0x29b6 <vfprintf+0x352>
    2998:	80 e3       	ldi	r24, 0x30	; 48
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	b3 01       	movw	r22, r6
    299e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <fputc>
    29a2:	02 ff       	sbrs	r16, 2
    29a4:	1d c0       	rjmp	.+58     	; 0x29e0 <vfprintf+0x37c>
    29a6:	01 fd       	sbrc	r16, 1
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <vfprintf+0x34c>
    29aa:	88 e7       	ldi	r24, 0x78	; 120
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	0e c0       	rjmp	.+28     	; 0x29cc <vfprintf+0x368>
    29b0:	88 e5       	ldi	r24, 0x58	; 88
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	0b c0       	rjmp	.+22     	; 0x29cc <vfprintf+0x368>
    29b6:	80 2f       	mov	r24, r16
    29b8:	86 78       	andi	r24, 0x86	; 134
    29ba:	91 f0       	breq	.+36     	; 0x29e0 <vfprintf+0x37c>
    29bc:	01 ff       	sbrs	r16, 1
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <vfprintf+0x360>
    29c0:	8b e2       	ldi	r24, 0x2B	; 43
    29c2:	01 c0       	rjmp	.+2      	; 0x29c6 <vfprintf+0x362>
    29c4:	80 e2       	ldi	r24, 0x20	; 32
    29c6:	f7 fc       	sbrc	r15, 7
    29c8:	8d e2       	ldi	r24, 0x2D	; 45
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	b3 01       	movw	r22, r6
    29ce:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <fputc>
    29d2:	06 c0       	rjmp	.+12     	; 0x29e0 <vfprintf+0x37c>
    29d4:	80 e3       	ldi	r24, 0x30	; 48
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	b3 01       	movw	r22, r6
    29da:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <fputc>
    29de:	9a 94       	dec	r9
    29e0:	d9 14       	cp	r13, r9
    29e2:	c0 f3       	brcs	.-16     	; 0x29d4 <vfprintf+0x370>
    29e4:	da 94       	dec	r13
    29e6:	f1 01       	movw	r30, r2
    29e8:	ed 0d       	add	r30, r13
    29ea:	f1 1d       	adc	r31, r1
    29ec:	80 81       	ld	r24, Z
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	b3 01       	movw	r22, r6
    29f2:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <fputc>
    29f6:	dd 20       	and	r13, r13
    29f8:	a9 f7       	brne	.-22     	; 0x29e4 <vfprintf+0x380>
    29fa:	06 c0       	rjmp	.+12     	; 0x2a08 <vfprintf+0x3a4>
    29fc:	80 e2       	ldi	r24, 0x20	; 32
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	b3 01       	movw	r22, r6
    2a02:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <fputc>
    2a06:	ea 94       	dec	r14
    2a08:	ee 20       	and	r14, r14
    2a0a:	c1 f7       	brne	.-16     	; 0x29fc <vfprintf+0x398>
    2a0c:	43 ce       	rjmp	.-890    	; 0x2694 <vfprintf+0x30>
    2a0e:	f3 01       	movw	r30, r6
    2a10:	66 81       	ldd	r22, Z+6	; 0x06
    2a12:	77 81       	ldd	r23, Z+7	; 0x07
    2a14:	cb 01       	movw	r24, r22
    2a16:	2b 96       	adiw	r28, 0x0b	; 11
    2a18:	e2 e1       	ldi	r30, 0x12	; 18
    2a1a:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__>

00002a1e <strnlen_P>:
    2a1e:	fc 01       	movw	r30, r24
    2a20:	05 90       	lpm	r0, Z+
    2a22:	61 50       	subi	r22, 0x01	; 1
    2a24:	70 40       	sbci	r23, 0x00	; 0
    2a26:	01 10       	cpse	r0, r1
    2a28:	d8 f7       	brcc	.-10     	; 0x2a20 <strnlen_P+0x2>
    2a2a:	80 95       	com	r24
    2a2c:	90 95       	com	r25
    2a2e:	8e 0f       	add	r24, r30
    2a30:	9f 1f       	adc	r25, r31
    2a32:	08 95       	ret

00002a34 <strnlen>:
    2a34:	fc 01       	movw	r30, r24
    2a36:	61 50       	subi	r22, 0x01	; 1
    2a38:	70 40       	sbci	r23, 0x00	; 0
    2a3a:	01 90       	ld	r0, Z+
    2a3c:	01 10       	cpse	r0, r1
    2a3e:	d8 f7       	brcc	.-10     	; 0x2a36 <strnlen+0x2>
    2a40:	80 95       	com	r24
    2a42:	90 95       	com	r25
    2a44:	8e 0f       	add	r24, r30
    2a46:	9f 1f       	adc	r25, r31
    2a48:	08 95       	ret

00002a4a <fputc>:
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	8c 01       	movw	r16, r24
    2a54:	eb 01       	movw	r28, r22
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	81 ff       	sbrs	r24, 1
    2a5a:	1b c0       	rjmp	.+54     	; 0x2a92 <fputc+0x48>
    2a5c:	82 ff       	sbrs	r24, 2
    2a5e:	0d c0       	rjmp	.+26     	; 0x2a7a <fputc+0x30>
    2a60:	2e 81       	ldd	r18, Y+6	; 0x06
    2a62:	3f 81       	ldd	r19, Y+7	; 0x07
    2a64:	8c 81       	ldd	r24, Y+4	; 0x04
    2a66:	9d 81       	ldd	r25, Y+5	; 0x05
    2a68:	28 17       	cp	r18, r24
    2a6a:	39 07       	cpc	r19, r25
    2a6c:	64 f4       	brge	.+24     	; 0x2a86 <fputc+0x3c>
    2a6e:	e8 81       	ld	r30, Y
    2a70:	f9 81       	ldd	r31, Y+1	; 0x01
    2a72:	01 93       	st	Z+, r16
    2a74:	f9 83       	std	Y+1, r31	; 0x01
    2a76:	e8 83       	st	Y, r30
    2a78:	06 c0       	rjmp	.+12     	; 0x2a86 <fputc+0x3c>
    2a7a:	e8 85       	ldd	r30, Y+8	; 0x08
    2a7c:	f9 85       	ldd	r31, Y+9	; 0x09
    2a7e:	80 2f       	mov	r24, r16
    2a80:	09 95       	icall
    2a82:	89 2b       	or	r24, r25
    2a84:	31 f4       	brne	.+12     	; 0x2a92 <fputc+0x48>
    2a86:	8e 81       	ldd	r24, Y+6	; 0x06
    2a88:	9f 81       	ldd	r25, Y+7	; 0x07
    2a8a:	01 96       	adiw	r24, 0x01	; 1
    2a8c:	9f 83       	std	Y+7, r25	; 0x07
    2a8e:	8e 83       	std	Y+6, r24	; 0x06
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <fputc+0x4c>
    2a92:	0f ef       	ldi	r16, 0xFF	; 255
    2a94:	1f ef       	ldi	r17, 0xFF	; 255
    2a96:	c8 01       	movw	r24, r16
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	08 95       	ret

00002aa2 <__ultoa_invert>:
    2aa2:	fa 01       	movw	r30, r20
    2aa4:	aa 27       	eor	r26, r26
    2aa6:	28 30       	cpi	r18, 0x08	; 8
    2aa8:	51 f1       	breq	.+84     	; 0x2afe <__ultoa_invert+0x5c>
    2aaa:	20 31       	cpi	r18, 0x10	; 16
    2aac:	81 f1       	breq	.+96     	; 0x2b0e <__ultoa_invert+0x6c>
    2aae:	e8 94       	clt
    2ab0:	6f 93       	push	r22
    2ab2:	6e 7f       	andi	r22, 0xFE	; 254
    2ab4:	6e 5f       	subi	r22, 0xFE	; 254
    2ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aba:	9f 4f       	sbci	r25, 0xFF	; 255
    2abc:	af 4f       	sbci	r26, 0xFF	; 255
    2abe:	b1 e0       	ldi	r27, 0x01	; 1
    2ac0:	3e d0       	rcall	.+124    	; 0x2b3e <__ultoa_invert+0x9c>
    2ac2:	b4 e0       	ldi	r27, 0x04	; 4
    2ac4:	3c d0       	rcall	.+120    	; 0x2b3e <__ultoa_invert+0x9c>
    2ac6:	67 0f       	add	r22, r23
    2ac8:	78 1f       	adc	r23, r24
    2aca:	89 1f       	adc	r24, r25
    2acc:	9a 1f       	adc	r25, r26
    2ace:	a1 1d       	adc	r26, r1
    2ad0:	68 0f       	add	r22, r24
    2ad2:	79 1f       	adc	r23, r25
    2ad4:	8a 1f       	adc	r24, r26
    2ad6:	91 1d       	adc	r25, r1
    2ad8:	a1 1d       	adc	r26, r1
    2ada:	6a 0f       	add	r22, r26
    2adc:	71 1d       	adc	r23, r1
    2ade:	81 1d       	adc	r24, r1
    2ae0:	91 1d       	adc	r25, r1
    2ae2:	a1 1d       	adc	r26, r1
    2ae4:	20 d0       	rcall	.+64     	; 0x2b26 <__ultoa_invert+0x84>
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <__ultoa_invert+0x48>
    2ae8:	68 94       	set
    2aea:	3f 91       	pop	r19
    2aec:	2a e0       	ldi	r18, 0x0A	; 10
    2aee:	26 9f       	mul	r18, r22
    2af0:	11 24       	eor	r1, r1
    2af2:	30 19       	sub	r19, r0
    2af4:	30 5d       	subi	r19, 0xD0	; 208
    2af6:	31 93       	st	Z+, r19
    2af8:	de f6       	brtc	.-74     	; 0x2ab0 <__ultoa_invert+0xe>
    2afa:	cf 01       	movw	r24, r30
    2afc:	08 95       	ret
    2afe:	46 2f       	mov	r20, r22
    2b00:	47 70       	andi	r20, 0x07	; 7
    2b02:	40 5d       	subi	r20, 0xD0	; 208
    2b04:	41 93       	st	Z+, r20
    2b06:	b3 e0       	ldi	r27, 0x03	; 3
    2b08:	0f d0       	rcall	.+30     	; 0x2b28 <__ultoa_invert+0x86>
    2b0a:	c9 f7       	brne	.-14     	; 0x2afe <__ultoa_invert+0x5c>
    2b0c:	f6 cf       	rjmp	.-20     	; 0x2afa <__ultoa_invert+0x58>
    2b0e:	46 2f       	mov	r20, r22
    2b10:	4f 70       	andi	r20, 0x0F	; 15
    2b12:	40 5d       	subi	r20, 0xD0	; 208
    2b14:	4a 33       	cpi	r20, 0x3A	; 58
    2b16:	18 f0       	brcs	.+6      	; 0x2b1e <__ultoa_invert+0x7c>
    2b18:	49 5d       	subi	r20, 0xD9	; 217
    2b1a:	31 fd       	sbrc	r19, 1
    2b1c:	40 52       	subi	r20, 0x20	; 32
    2b1e:	41 93       	st	Z+, r20
    2b20:	02 d0       	rcall	.+4      	; 0x2b26 <__ultoa_invert+0x84>
    2b22:	a9 f7       	brne	.-22     	; 0x2b0e <__ultoa_invert+0x6c>
    2b24:	ea cf       	rjmp	.-44     	; 0x2afa <__ultoa_invert+0x58>
    2b26:	b4 e0       	ldi	r27, 0x04	; 4
    2b28:	a6 95       	lsr	r26
    2b2a:	97 95       	ror	r25
    2b2c:	87 95       	ror	r24
    2b2e:	77 95       	ror	r23
    2b30:	67 95       	ror	r22
    2b32:	ba 95       	dec	r27
    2b34:	c9 f7       	brne	.-14     	; 0x2b28 <__ultoa_invert+0x86>
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	61 05       	cpc	r22, r1
    2b3a:	71 05       	cpc	r23, r1
    2b3c:	08 95       	ret
    2b3e:	9b 01       	movw	r18, r22
    2b40:	ac 01       	movw	r20, r24
    2b42:	0a 2e       	mov	r0, r26
    2b44:	06 94       	lsr	r0
    2b46:	57 95       	ror	r21
    2b48:	47 95       	ror	r20
    2b4a:	37 95       	ror	r19
    2b4c:	27 95       	ror	r18
    2b4e:	ba 95       	dec	r27
    2b50:	c9 f7       	brne	.-14     	; 0x2b44 <__ultoa_invert+0xa2>
    2b52:	62 0f       	add	r22, r18
    2b54:	73 1f       	adc	r23, r19
    2b56:	84 1f       	adc	r24, r20
    2b58:	95 1f       	adc	r25, r21
    2b5a:	a0 1d       	adc	r26, r0
    2b5c:	08 95       	ret

00002b5e <_exit>:
    2b5e:	f8 94       	cli

00002b60 <__stop_program>:
    2b60:	ff cf       	rjmp	.-2      	; 0x2b60 <__stop_program>
