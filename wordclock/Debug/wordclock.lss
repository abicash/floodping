
wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000081d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004c8  00800060  000081d4  00008268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  00800528  00800528  00008730  2**0
                  ALLOC
  3 .stab         00005ab4  00000000  00000000  00008730  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001752  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000f936  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fa76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001182f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0001271a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000134c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00013628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000138b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014083  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      34:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_13>
      38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

00000054 <words>:
      54:	01 00 00 00 02 00 00 00 04 00 00 00 08 00 00 00     ................
      64:	10 00 00 00 20 00 00 00 40 00 00 00 80 00 00 00     .... ...@.......
      74:	00 01 00 00 00 02 00 00 00 04 00 00 00 18 00 00     ................
      84:	00 30 00 00 00 40 00 00 00 80 00 00 00 00 01 00     .0...@..........
      94:	00 00 02 00 00 00 04 00 00 00 08 00 00 00 10 00     ................
      a4:	00 00 20 00 00 00 40 00 00 00 80 00 00 00 00 01     .. ...@.........
      b4:	00 00 00 02 00 00 00 04 00 00 00 08 00 00 00 10     ................
      c4:	00 00 00 20 00 00 00 40                             ... ...@

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf e5       	ldi	r28, 0x5F	; 95
      d2:	d8 e0       	ldi	r29, 0x08	; 8
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	15 e0       	ldi	r17, 0x05	; 5
      da:	a0 e6       	ldi	r26, 0x60	; 96
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e4 ed       	ldi	r30, 0xD4	; 212
      e0:	f1 e8       	ldi	r31, 0x81	; 129
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <.do_copy_data_start>

000000e4 <.do_copy_data_loop>:
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0

000000e8 <.do_copy_data_start>:
      e8:	a8 32       	cpi	r26, 0x28	; 40
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <.do_copy_data_loop>

000000ee <__do_clear_bss>:
      ee:	15 e0       	ldi	r17, 0x05	; 5
      f0:	a8 e2       	ldi	r26, 0x28	; 40
      f2:	b5 e0       	ldi	r27, 0x05	; 5
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	ab 37       	cpi	r26, 0x7B	; 123
      fa:	b1 07       	cpc	r27, r17
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	0e 94 56 0e 	call	0x1cac	; 0x1cac <main>
     102:	0c 94 e8 40 	jmp	0x81d0	; 0x81d0 <_exit>

00000106 <__bad_interrupt>:
     106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <i2c_reset>:
 *  @return    0 = successful, else failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static uint8_t
i2c_reset (void)
{
     10a:	df 93       	push	r29
     10c:	cf 93       	push	r28
     10e:	0f 92       	push	r0
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
  uint8_t    rtc = 0;
     114:	19 82       	std	Y+1, r1	; 0x01
    {                                                                            // yes...
      rtc = I2C_ERROR_SDA_LOW;
    }
  }
#endif
  return rtc;
     116:	89 81       	ldd	r24, Y+1	; 0x01
}
     118:	0f 90       	pop	r0
     11a:	cf 91       	pop	r28
     11c:	df 91       	pop	r29
     11e:	08 95       	ret

00000120 <i2c_master_init>:
 *  @return    TRUE if successful, FALSE, if not
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_init(void)
{
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	0f 92       	push	r0
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
  static uint8_t  already_called;
  uint8_t         rtc;

  if (! already_called)
     12a:	80 91 28 05 	lds	r24, 0x0528
     12e:	88 23       	and	r24, r24
     130:	71 f4       	brne	.+28     	; 0x14e <i2c_master_init+0x2e>
  {
    rtc = i2c_reset ();                                                         // try to reset I2C bus
     132:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_reset>
     136:	89 83       	std	Y+1, r24	; 0x01

    TWSR = 0;                                                                   // no prescaler
     138:	e1 e2       	ldi	r30, 0x21	; 33
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	10 82       	st	Z, r1
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;                                            // must be > 10 for stable operation
     13e:	e0 e2       	ldi	r30, 0x20	; 32
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	8a e0       	ldi	r24, 0x0A	; 10
     144:	80 83       	st	Z, r24
    already_called = 1;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 28 05 	sts	0x0528, r24
     14c:	01 c0       	rjmp	.+2      	; 0x150 <i2c_master_init+0x30>
  }
  else
  {
    rtc = 0;
     14e:	19 82       	std	Y+1, r1	; 0x01
  }
  return rtc;
     150:	89 81       	ldd	r24, Y+1	; 0x01
}
     152:	0f 90       	pop	r0
     154:	cf 91       	pop	r28
     156:	df 91       	pop	r29
     158:	08 95       	ret

0000015a <i2c_master_start>:
 *  @return    1 = failed to access device, 0 = device accessible
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
unsigned char
i2c_master_start(uint8_t address, uint8_t * status_p)
{
     15a:	df 93       	push	r29
     15c:	cf 93       	push	r28
     15e:	00 d0       	rcall	.+0      	; 0x160 <i2c_master_start+0x6>
     160:	00 d0       	rcall	.+0      	; 0x162 <i2c_master_start+0x8>
     162:	0f 92       	push	r0
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	8a 83       	std	Y+2, r24	; 0x02
     16a:	7c 83       	std	Y+4, r23	; 0x04
     16c:	6b 83       	std	Y+3, r22	; 0x03
  uint8_t   twst;

  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);                                   // send START condition
     16e:	e6 e5       	ldi	r30, 0x56	; 86
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	84 ea       	ldi	r24, 0xA4	; 164
     174:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;                                            // wait until transmission completed
     176:	e6 e5       	ldi	r30, 0x56	; 86
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	88 23       	and	r24, r24
     17e:	dc f7       	brge	.-10     	; 0x176 <i2c_master_start+0x1c>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits.
     180:	e1 e2       	ldi	r30, 0x21	; 33
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	88 7f       	andi	r24, 0xF8	; 248
     188:	89 83       	std	Y+1, r24	; 0x01

  if ((twst != TW_START) && (twst != TW_REP_START))
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	88 30       	cpi	r24, 0x08	; 8
     18e:	51 f0       	breq	.+20     	; 0x1a4 <i2c_master_start+0x4a>
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	80 31       	cpi	r24, 0x10	; 16
     194:	39 f0       	breq	.+14     	; 0x1a4 <i2c_master_start+0x4a>
  {
    *status_p = twst;                                                           // store status
     196:	eb 81       	ldd	r30, Y+3	; 0x03
     198:	fc 81       	ldd	r31, Y+4	; 0x04
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	80 83       	st	Z, r24
    return 1;                                                                   // ERROR
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	8d 83       	std	Y+5, r24	; 0x05
     1a2:	20 c0       	rjmp	.+64     	; 0x1e4 <i2c_master_start+0x8a>
  }

  TWDR = address;                                                               // send device address
     1a4:	e3 e2       	ldi	r30, 0x23	; 35
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	8a 81       	ldd	r24, Y+2	; 0x02
     1aa:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     1ac:	e6 e5       	ldi	r30, 0x56	; 86
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	84 e8       	ldi	r24, 0x84	; 132
     1b2:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED                                             // wail until transmission completed and ACK/NACK has been received
     1b4:	e6 e5       	ldi	r30, 0x56	; 86
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	88 23       	and	r24, r24
     1bc:	dc f7       	brge	.-10     	; 0x1b4 <i2c_master_start+0x5a>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits.
     1be:	e1 e2       	ldi	r30, 0x21	; 33
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	88 7f       	andi	r24, 0xF8	; 248
     1c6:	89 83       	std	Y+1, r24	; 0x01

  if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	88 31       	cpi	r24, 0x18	; 24
     1cc:	51 f0       	breq	.+20     	; 0x1e2 <i2c_master_start+0x88>
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	80 34       	cpi	r24, 0x40	; 64
     1d2:	39 f0       	breq	.+14     	; 0x1e2 <i2c_master_start+0x88>
  {
    *status_p = twst;                                                           // store status
     1d4:	eb 81       	ldd	r30, Y+3	; 0x03
     1d6:	fc 81       	ldd	r31, Y+4	; 0x04
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	80 83       	st	Z, r24
    return 1;                                                                   // ERROR
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	8d 83       	std	Y+5, r24	; 0x05
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <i2c_master_start+0x8a>
  }

  return 0;                                                                     // OK
     1e2:	1d 82       	std	Y+5, r1	; 0x05
     1e4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	cf 91       	pop	r28
     1f2:	df 91       	pop	r29
     1f4:	08 95       	ret

000001f6 <i2c_master_start_wait>:
 *  @param    I2C address
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
i2c_master_start_wait (uint8_t address)
{
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <i2c_master_start_wait+0x6>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t   twst;

  while (1)
  {
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);                                 // send START condition
     202:	e6 e5       	ldi	r30, 0x56	; 86
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	84 ea       	ldi	r24, 0xA4	; 164
     208:	80 83       	st	Z, r24
    WAIT_UNTIL_TRANSMISSION_COMPLETED;                                          // wait until transmission completed
     20a:	e6 e5       	ldi	r30, 0x56	; 86
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	88 23       	and	r24, r24
     212:	dc f7       	brge	.-10     	; 0x20a <i2c_master_start_wait+0x14>
    twst = TW_STATUS & 0xF8;                                                    // check value of TWI Status Register. Mask prescaler bits.
     214:	e1 e2       	ldi	r30, 0x21	; 33
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	88 7f       	andi	r24, 0xF8	; 248
     21c:	89 83       	std	Y+1, r24	; 0x01

    if ((twst != TW_START) && (twst != TW_REP_START))
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	88 30       	cpi	r24, 0x08	; 8
     222:	19 f0       	breq	.+6      	; 0x22a <i2c_master_start_wait+0x34>
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	80 31       	cpi	r24, 0x10	; 16
     228:	61 f7       	brne	.-40     	; 0x202 <i2c_master_start_wait+0xc>
    {
      continue;
    }

    TWDR = address;                                                             // send device address
     22a:	e3 e2       	ldi	r30, 0x23	; 35
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	80 83       	st	Z, r24
    TWCR = (1<<TWINT) | (1<<TWEN);
     232:	e6 e5       	ldi	r30, 0x56	; 86
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	84 e8       	ldi	r24, 0x84	; 132
     238:	80 83       	st	Z, r24
    WAIT_UNTIL_TRANSMISSION_COMPLETED;                                          // wail until transmission completed
     23a:	e6 e5       	ldi	r30, 0x56	; 86
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	dc f7       	brge	.-10     	; 0x23a <i2c_master_start_wait+0x44>
    twst = TW_STATUS & 0xF8;                                                    // check value of TWI Status Register. Mask prescaler bits.
     244:	e1 e2       	ldi	r30, 0x21	; 33
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	88 7f       	andi	r24, 0xF8	; 248
     24c:	89 83       	std	Y+1, r24	; 0x01

    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	80 32       	cpi	r24, 0x20	; 32
     252:	19 f0       	breq	.+6      	; 0x25a <i2c_master_start_wait+0x64>
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	88 35       	cpi	r24, 0x58	; 88
     258:	71 f4       	brne	.+28     	; 0x276 <i2c_master_start_wait+0x80>
    {
      TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);                               // device busy, send stop condition to terminate write operation
     25a:	e6 e5       	ldi	r30, 0x56	; 86
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	84 e9       	ldi	r24, 0x94	; 148
     260:	80 83       	st	Z, r24
      WAIT_UNTIL_STOP_CONDITION_EXECUTED;                                       // wait until stop condition is executed and bus released
     262:	e6 e5       	ldi	r30, 0x56	; 86
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	88 2f       	mov	r24, r24
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	80 71       	andi	r24, 0x10	; 16
     26e:	90 70       	andi	r25, 0x00	; 0
     270:	00 97       	sbiw	r24, 0x00	; 0
     272:	b9 f7       	brne	.-18     	; 0x262 <i2c_master_start_wait+0x6c>
     274:	c6 cf       	rjmp	.-116    	; 0x202 <i2c_master_start_wait+0xc>
      continue;
    }

    // if (twst != TW_MT_SLA_ACK) return 1;
    break;
   }
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret

00000280 <i2c_master_rep_start>:
 *  @return    1 = failed to access device, 0 = device accessible
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_rep_start (uint8_t address, uint8_t * status_p)
{
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	00 d0       	rcall	.+0      	; 0x286 <i2c_master_rep_start+0x6>
     286:	0f 92       	push	r0
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	89 83       	std	Y+1, r24	; 0x01
     28e:	7b 83       	std	Y+3, r23	; 0x03
     290:	6a 83       	std	Y+2, r22	; 0x02
  return i2c_master_start (address, status_p);
     292:	2a 81       	ldd	r18, Y+2	; 0x02
     294:	3b 81       	ldd	r19, Y+3	; 0x03
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	b9 01       	movw	r22, r18
     29a:	0e 94 ad 00 	call	0x15a	; 0x15a <i2c_master_start>
}
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	cf 91       	pop	r28
     2a6:	df 91       	pop	r29
     2a8:	08 95       	ret

000002aa <i2c_master_stop>:
 *  @details  Terminates the data transfer and releases the I2C bus
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
i2c_master_stop (void)
{
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);                                   // send stop condition
     2b2:	e6 e5       	ldi	r30, 0x56	; 86
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	84 e9       	ldi	r24, 0x94	; 148
     2b8:	80 83       	st	Z, r24
  WAIT_UNTIL_STOP_CONDITION_EXECUTED;                                           // wait until stop condition is executed and bus released
     2ba:	e6 e5       	ldi	r30, 0x56	; 86
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	88 2f       	mov	r24, r24
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	80 71       	andi	r24, 0x10	; 16
     2c6:	90 70       	andi	r25, 0x00	; 0
     2c8:	00 97       	sbiw	r24, 0x00	; 0
     2ca:	b9 f7       	brne	.-18     	; 0x2ba <i2c_master_stop+0x10>
}
     2cc:	cf 91       	pop	r28
     2ce:	df 91       	pop	r29
     2d0:	08 95       	ret

000002d2 <i2c_master_write>:
 *  @return    0 write successful, 1 write failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_write (uint8_t data, uint8_t * status_p)
{
     2d2:	df 93       	push	r29
     2d4:	cf 93       	push	r28
     2d6:	00 d0       	rcall	.+0      	; 0x2d8 <i2c_master_write+0x6>
     2d8:	00 d0       	rcall	.+0      	; 0x2da <i2c_master_write+0x8>
     2da:	0f 92       	push	r0
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	8a 83       	std	Y+2, r24	; 0x02
     2e2:	7c 83       	std	Y+4, r23	; 0x04
     2e4:	6b 83       	std	Y+3, r22	; 0x03
  uint8_t   twst;

  TWDR = data;                                                                  // send data to the previously addressed device
     2e6:	e3 e2       	ldi	r30, 0x23	; 35
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     2ee:	e6 e5       	ldi	r30, 0x56	; 86
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	84 e8       	ldi	r24, 0x84	; 132
     2f4:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;                                            // wait until transmission completed
     2f6:	e6 e5       	ldi	r30, 0x56	; 86
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	88 23       	and	r24, r24
     2fe:	dc f7       	brge	.-10     	; 0x2f6 <i2c_master_write+0x24>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits
     300:	e1 e2       	ldi	r30, 0x21	; 33
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	88 7f       	andi	r24, 0xF8	; 248
     308:	89 83       	std	Y+1, r24	; 0x01

  if (twst != TW_MT_DATA_ACK)
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	88 32       	cpi	r24, 0x28	; 40
     30e:	39 f0       	breq	.+14     	; 0x31e <i2c_master_write+0x4c>
  {
    *status_p = twst;
     310:	eb 81       	ldd	r30, Y+3	; 0x03
     312:	fc 81       	ldd	r31, Y+4	; 0x04
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	80 83       	st	Z, r24
    return 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	8d 83       	std	Y+5, r24	; 0x05
     31c:	01 c0       	rjmp	.+2      	; 0x320 <i2c_master_write+0x4e>
  }

  return 0;
     31e:	1d 82       	std	Y+5, r1	; 0x05
     320:	8d 81       	ldd	r24, Y+5	; 0x05
}
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	cf 91       	pop	r28
     32e:	df 91       	pop	r29
     330:	08 95       	ret

00000332 <i2c_master_read_ack>:
 *  @return    byte read
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_read_ack (void)
{
     332:	df 93       	push	r29
     334:	cf 93       	push	r28
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     33a:	e6 e5       	ldi	r30, 0x56	; 86
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	84 ec       	ldi	r24, 0xC4	; 196
     340:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;
     342:	e6 e5       	ldi	r30, 0x56	; 86
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	88 23       	and	r24, r24
     34a:	dc f7       	brge	.-10     	; 0x342 <i2c_master_read_ack+0x10>
  return TWDR;
     34c:	e3 e2       	ldi	r30, 0x23	; 35
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
}/* i2c_master_readAck */
     352:	cf 91       	pop	r28
     354:	df 91       	pop	r29
     356:	08 95       	ret

00000358 <i2c_master_read_nak>:
 *  @return    byte read
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_read_nak (void)
{
     358:	df 93       	push	r29
     35a:	cf 93       	push	r28
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN);
     360:	e6 e5       	ldi	r30, 0x56	; 86
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	84 e8       	ldi	r24, 0x84	; 132
     366:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;
     368:	e6 e5       	ldi	r30, 0x56	; 86
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	88 23       	and	r24, r24
     370:	dc f7       	brge	.-10     	; 0x368 <i2c_master_read_nak+0x10>
  return TWDR;
     372:	e3 e2       	ldi	r30, 0x23	; 35
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
}
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <save_byte>:
static uint8_t rtc_initialized = 0;
static uint8_t i2c_rtc_status;

void
save_byte(uint8_t var, uint8_t value)
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	00 d0       	rcall	.+0      	; 0x384 <save_byte+0x6>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	89 83       	std	Y+1, r24	; 0x01
     38a:	6a 83       	std	Y+2, r22	; 0x02
  i2c_rtc_sram_write(0x10 + var, &value, 1);
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	80 5f       	subi	r24, 0xF0	; 240
     390:	9e 01       	movw	r18, r28
     392:	2e 5f       	subi	r18, 0xFE	; 254
     394:	3f 4f       	sbci	r19, 0xFF	; 255
     396:	b9 01       	movw	r22, r18
     398:	41 e0       	ldi	r20, 0x01	; 1
     39a:	0e 94 b4 07 	call	0xf68	; 0xf68 <i2c_rtc_sram_write>
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	cf 91       	pop	r28
     3a4:	df 91       	pop	r29
     3a6:	08 95       	ret

000003a8 <read_byte>:

void
read_byte(uint8_t var, uint8_t *value)
{
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <read_byte+0x6>
     3ae:	0f 92       	push	r0
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	89 83       	std	Y+1, r24	; 0x01
     3b6:	7b 83       	std	Y+3, r23	; 0x03
     3b8:	6a 83       	std	Y+2, r22	; 0x02
  i2c_rtc_sram_read(0x10 + var, value, 1);
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	80 5f       	subi	r24, 0xF0	; 240
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	3b 81       	ldd	r19, Y+3	; 0x03
     3c2:	b9 01       	movw	r22, r18
     3c4:	41 e0       	ldi	r20, 0x01	; 1
     3c6:	0e 94 13 08 	call	0x1026	; 0x1026 <i2c_rtc_sram_read>
}
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	cf 91       	pop	r28
     3d2:	df 91       	pop	r29
     3d4:	08 95       	ret

000003d6 <set_offset>:

int8_t rtc_offset = 0;

void
set_offset(uint8_t newoffset)
{
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	c5 56       	subi	r28, 0x65	; 101
     3e0:	d0 40       	sbci	r29, 0x00	; 0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	fe 01       	movw	r30, r28
     3ee:	eb 59       	subi	r30, 0x9B	; 155
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	80 83       	st	Z, r24
  if (newoffset != rtc_offset)
     3f4:	fe 01       	movw	r30, r28
     3f6:	eb 59       	subi	r30, 0x9B	; 155
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	80 81       	ld	r24, Z
     3fc:	28 2f       	mov	r18, r24
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	80 91 29 05 	lds	r24, 0x0529
     404:	99 27       	eor	r25, r25
     406:	87 fd       	sbrc	r24, 7
     408:	90 95       	com	r25
     40a:	28 17       	cp	r18, r24
     40c:	39 07       	cpc	r19, r25
     40e:	89 f1       	breq	.+98     	; 0x472 <set_offset+0x9c>
  {
    rtc_offset = newoffset;
     410:	fe 01       	movw	r30, r28
     412:	eb 59       	subi	r30, 0x9B	; 155
     414:	ff 4f       	sbci	r31, 0xFF	; 255
     416:	80 81       	ld	r24, Z
     418:	80 93 29 05 	sts	0x0529, r24
    save_byte(cRTCOffset, rtc_offset);
     41c:	80 91 29 05 	lds	r24, 0x0529
     420:	98 2f       	mov	r25, r24
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	69 2f       	mov	r22, r25
     426:	0e 94 bf 01 	call	0x37e	; 0x37e <save_byte>
    char s[100];
    sprintf(s, "rtc offset now: %d\r\n", rtc_offset);
     42a:	80 91 29 05 	lds	r24, 0x0529
     42e:	28 2f       	mov	r18, r24
     430:	33 27       	eor	r19, r19
     432:	27 fd       	sbrc	r18, 7
     434:	30 95       	com	r19
     436:	00 d0       	rcall	.+0      	; 0x438 <set_offset+0x62>
     438:	00 d0       	rcall	.+0      	; 0x43a <set_offset+0x64>
     43a:	00 d0       	rcall	.+0      	; 0x43c <set_offset+0x66>
     43c:	ed b7       	in	r30, 0x3d	; 61
     43e:	fe b7       	in	r31, 0x3e	; 62
     440:	31 96       	adiw	r30, 0x01	; 1
     442:	ce 01       	movw	r24, r28
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	91 83       	std	Z+1, r25	; 0x01
     448:	80 83       	st	Z, r24
     44a:	80 e6       	ldi	r24, 0x60	; 96
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	93 83       	std	Z+3, r25	; 0x03
     450:	82 83       	std	Z+2, r24	; 0x02
     452:	35 83       	std	Z+5, r19	; 0x05
     454:	24 83       	std	Z+4, r18	; 0x04
     456:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
     45a:	8d b7       	in	r24, 0x3d	; 61
     45c:	9e b7       	in	r25, 0x3e	; 62
     45e:	06 96       	adiw	r24, 0x06	; 6
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	9e bf       	out	0x3e, r25	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	8d bf       	out	0x3d, r24	; 61
    uartPuts(s);
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  }
}
     472:	cb 59       	subi	r28, 0x9B	; 155
     474:	df 4f       	sbci	r29, 0xFF	; 255
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <bcdtoi>:
  return y;
}

uint8_t
bcdtoi(uint8_t bcd)
{
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <bcdtoi+0x6>
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t i = 10 * (bcd >> 4) + (bcd & 0x0F);
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	82 95       	swap	r24
     496:	8f 70       	andi	r24, 0x0F	; 15
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9c 01       	movw	r18, r24
     49e:	22 0f       	add	r18, r18
     4a0:	33 1f       	adc	r19, r19
     4a2:	c9 01       	movw	r24, r18
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	82 0f       	add	r24, r18
     4ae:	93 1f       	adc	r25, r19
     4b0:	98 2f       	mov	r25, r24
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	8f 70       	andi	r24, 0x0F	; 15
     4b6:	89 0f       	add	r24, r25
     4b8:	89 83       	std	Y+1, r24	; 0x01
  return (i);
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
}
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	cf 91       	pop	r28
     4c2:	df 91       	pop	r29
     4c4:	08 95       	ret

000004c6 <itobcd>:

uint8_t
itobcd(uint8_t i)
{
     4c6:	df 93       	push	r29
     4c8:	cf 93       	push	r28
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <itobcd+0x6>
     4cc:	0f 92       	push	r0
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	8b 83       	std	Y+3, r24	; 0x03
  bcd = (i / 10) << 4;
  bcd |= (i % 10);
#else
  uint8_t r;

  bcd = div10(i, &r) << 4;
     4d4:	9e 01       	movw	r18, r28
     4d6:	2e 5f       	subi	r18, 0xFE	; 254
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	b9 01       	movw	r22, r18
     4de:	0e 94 7f 02 	call	0x4fe	; 0x4fe <div10>
     4e2:	82 95       	swap	r24
     4e4:	80 7f       	andi	r24, 0xF0	; 240
     4e6:	89 83       	std	Y+1, r24	; 0x01
  bcd |= r;
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	89 2b       	or	r24, r25
     4ee:	89 83       	std	Y+1, r24	; 0x01
#endif

  return (bcd);
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
}
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	cf 91       	pop	r28
     4fa:	df 91       	pop	r29
     4fc:	08 95       	ret

000004fe <div10>:
#define CTRL_REG_RS0          0x01                                              // rate select RS0
static volatile uint8_t ctrlreg;

static inline uint8_t
div10(uint8_t x, uint8_t* o_remaind)
{
     4fe:	df 93       	push	r29
     500:	cf 93       	push	r28
     502:	00 d0       	rcall	.+0      	; 0x504 <div10+0x6>
     504:	00 d0       	rcall	.+0      	; 0x506 <div10+0x8>
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	8a 83       	std	Y+2, r24	; 0x02
     50c:	7c 83       	std	Y+4, r23	; 0x04
     50e:	6b 83       	std	Y+3, r22	; 0x03
  //    : [input]"d" (x)
  //    : "r1","r0"
  // );
  //*o_remaind = x-(10*y);
  //return y;
  uint8_t y = (((uint16_t) x) * 205) >> 11;
     510:	8a 81       	ldd	r24, Y+2	; 0x02
     512:	28 2f       	mov	r18, r24
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	8d ec       	ldi	r24, 0xCD	; 205
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	ac 01       	movw	r20, r24
     51c:	24 9f       	mul	r18, r20
     51e:	c0 01       	movw	r24, r0
     520:	25 9f       	mul	r18, r21
     522:	90 0d       	add	r25, r0
     524:	34 9f       	mul	r19, r20
     526:	90 0d       	add	r25, r0
     528:	11 24       	eor	r1, r1
     52a:	89 2f       	mov	r24, r25
     52c:	99 27       	eor	r25, r25
     52e:	86 95       	lsr	r24
     530:	86 95       	lsr	r24
     532:	86 95       	lsr	r24
     534:	89 83       	std	Y+1, r24	; 0x01
  *o_remaind = x - (y * 10);
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	9c 01       	movw	r18, r24
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	c9 01       	movw	r24, r18
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	82 0f       	add	r24, r18
     54e:	93 1f       	adc	r25, r19
     550:	90 95       	com	r25
     552:	81 95       	neg	r24
     554:	9f 4f       	sbci	r25, 0xFF	; 255
     556:	98 2f       	mov	r25, r24
     558:	8a 81       	ldd	r24, Y+2	; 0x02
     55a:	89 0f       	add	r24, r25
     55c:	eb 81       	ldd	r30, Y+3	; 0x03
     55e:	fc 81       	ldd	r31, Y+4	; 0x04
     560:	80 83       	st	Z, r24
  return y;
     562:	89 81       	ldd	r24, Y+1	; 0x01
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	cf 91       	pop	r28
     56e:	df 91       	pop	r29
     570:	08 95       	ret

00000572 <i2c_rtc_get_status>:
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */

uint8_t
i2c_rtc_get_status(void)
{
     572:	df 93       	push	r29
     574:	cf 93       	push	r28
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
  return i2c_rtc_status;
     57a:	80 91 2d 05 	lds	r24, 0x052D
}
     57e:	cf 91       	pop	r28
     580:	df 91       	pop	r29
     582:	08 95       	ret

00000584 <i2c_rtc_write>:
 *  @return    TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_write(const DATETIME * datetime)
{
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	2a 97       	sbiw	r28, 0x0a	; 10
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	9a 87       	std	Y+10, r25	; 0x0a
     59a:	89 87       	std	Y+9, r24	; 0x09
  uint8_t rtcbuf[7];
  uint8_t rtc = false;
     59c:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
     59e:	80 91 2a 05 	lds	r24, 0x052A
     5a2:	88 23       	and	r24, r24
     5a4:	b9 f1       	breq	.+110    	; 0x614 <i2c_rtc_write+0x90>
  {
    rtcbuf[0] = itobcd(datetime->ss); // seconds    00-59
     5a6:	e9 85       	ldd	r30, Y+9	; 0x09
     5a8:	fa 85       	ldd	r31, Y+10	; 0x0a
     5aa:	85 81       	ldd	r24, Z+5	; 0x05
     5ac:	0e 94 63 02 	call	0x4c6	; 0x4c6 <itobcd>
     5b0:	8a 83       	std	Y+2, r24	; 0x02
    rtcbuf[1] = itobcd(datetime->mm); // minutes    00-59
     5b2:	e9 85       	ldd	r30, Y+9	; 0x09
     5b4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5b6:	84 81       	ldd	r24, Z+4	; 0x04
     5b8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <itobcd>
     5bc:	8b 83       	std	Y+3, r24	; 0x03
    rtcbuf[2] = itobcd(datetime->hh); // hours    00-23
     5be:	e9 85       	ldd	r30, Y+9	; 0x09
     5c0:	fa 85       	ldd	r31, Y+10	; 0x0a
     5c2:	83 81       	ldd	r24, Z+3	; 0x03
     5c4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <itobcd>
     5c8:	8c 83       	std	Y+4, r24	; 0x04
    rtcbuf[3] = itobcd(datetime->wd) + 1; // weekday     1-7
     5ca:	e9 85       	ldd	r30, Y+9	; 0x09
     5cc:	fa 85       	ldd	r31, Y+10	; 0x0a
     5ce:	86 81       	ldd	r24, Z+6	; 0x06
     5d0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <itobcd>
     5d4:	8f 5f       	subi	r24, 0xFF	; 255
     5d6:	8d 83       	std	Y+5, r24	; 0x05
    rtcbuf[4] = itobcd(datetime->DD); // day of month  00-31
     5d8:	e9 85       	ldd	r30, Y+9	; 0x09
     5da:	fa 85       	ldd	r31, Y+10	; 0x0a
     5dc:	82 81       	ldd	r24, Z+2	; 0x02
     5de:	0e 94 63 02 	call	0x4c6	; 0x4c6 <itobcd>
     5e2:	8e 83       	std	Y+6, r24	; 0x06
    rtcbuf[5] = itobcd(datetime->MM); // month    00-12
     5e4:	e9 85       	ldd	r30, Y+9	; 0x09
     5e6:	fa 85       	ldd	r31, Y+10	; 0x0a
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
     5ea:	0e 94 63 02 	call	0x4c6	; 0x4c6 <itobcd>
     5ee:	8f 83       	std	Y+7, r24	; 0x07
    rtcbuf[6] = itobcd(datetime->YY); // year      00-99
     5f0:	e9 85       	ldd	r30, Y+9	; 0x09
     5f2:	fa 85       	ldd	r31, Y+10	; 0x0a
     5f4:	80 81       	ld	r24, Z
     5f6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <itobcd>
     5fa:	88 87       	std	Y+8, r24	; 0x08

    if (i2c_rtc_sram_write(0x00, rtcbuf, 7))
     5fc:	9e 01       	movw	r18, r28
     5fe:	2e 5f       	subi	r18, 0xFE	; 254
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	b9 01       	movw	r22, r18
     606:	47 e0       	ldi	r20, 0x07	; 7
     608:	0e 94 b4 07 	call	0xf68	; 0xf68 <i2c_rtc_sram_write>
     60c:	88 23       	and	r24, r24
     60e:	11 f0       	breq	.+4      	; 0x614 <i2c_rtc_write+0x90>
    {
      rtc = true;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	89 83       	std	Y+1, r24	; 0x01
    }
  }
  return rtc;
     614:	89 81       	ldd	r24, Y+1	; 0x01
}
     616:	2a 96       	adiw	r28, 0x0a	; 10
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <add_year>:

void
add_year(DATETIME * datetime)
{
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	00 d0       	rcall	.+0      	; 0x62e <add_year+0x6>
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	9a 83       	std	Y+2, r25	; 0x02
     634:	89 83       	std	Y+1, r24	; 0x01
  datetime->YY++;
     636:	e9 81       	ldd	r30, Y+1	; 0x01
     638:	fa 81       	ldd	r31, Y+2	; 0x02
     63a:	80 81       	ld	r24, Z
     63c:	8f 5f       	subi	r24, 0xFF	; 255
     63e:	e9 81       	ldd	r30, Y+1	; 0x01
     640:	fa 81       	ldd	r31, Y+2	; 0x02
     642:	80 83       	st	Z, r24
}
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	cf 91       	pop	r28
     64a:	df 91       	pop	r29
     64c:	08 95       	ret

0000064e <sub_year>:

void
sub_year(DATETIME * datetime)
{
     64e:	df 93       	push	r29
     650:	cf 93       	push	r28
     652:	00 d0       	rcall	.+0      	; 0x654 <sub_year+0x6>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	9a 83       	std	Y+2, r25	; 0x02
     65a:	89 83       	std	Y+1, r24	; 0x01
  datetime->YY--;
     65c:	e9 81       	ldd	r30, Y+1	; 0x01
     65e:	fa 81       	ldd	r31, Y+2	; 0x02
     660:	80 81       	ld	r24, Z
     662:	81 50       	subi	r24, 0x01	; 1
     664:	e9 81       	ldd	r30, Y+1	; 0x01
     666:	fa 81       	ldd	r31, Y+2	; 0x02
     668:	80 83       	st	Z, r24
}
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	cf 91       	pop	r28
     670:	df 91       	pop	r29
     672:	08 95       	ret

00000674 <add_month>:

void
add_month(DATETIME * datetime)
{
     674:	df 93       	push	r29
     676:	cf 93       	push	r28
     678:	00 d0       	rcall	.+0      	; 0x67a <add_month+0x6>
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	9a 83       	std	Y+2, r25	; 0x02
     680:	89 83       	std	Y+1, r24	; 0x01
  datetime->MM++;
     682:	e9 81       	ldd	r30, Y+1	; 0x01
     684:	fa 81       	ldd	r31, Y+2	; 0x02
     686:	81 81       	ldd	r24, Z+1	; 0x01
     688:	8f 5f       	subi	r24, 0xFF	; 255
     68a:	e9 81       	ldd	r30, Y+1	; 0x01
     68c:	fa 81       	ldd	r31, Y+2	; 0x02
     68e:	81 83       	std	Z+1, r24	; 0x01
  if (datetime->MM > 12)
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	81 81       	ldd	r24, Z+1	; 0x01
     696:	8d 30       	cpi	r24, 0x0D	; 13
     698:	40 f0       	brcs	.+16     	; 0x6aa <add_month+0x36>
  {
    datetime->MM = 1;
     69a:	e9 81       	ldd	r30, Y+1	; 0x01
     69c:	fa 81       	ldd	r31, Y+2	; 0x02
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	81 83       	std	Z+1, r24	; 0x01
    add_year(datetime);
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	0e 94 14 03 	call	0x628	; 0x628 <add_year>
  }
}
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	cf 91       	pop	r28
     6b0:	df 91       	pop	r29
     6b2:	08 95       	ret

000006b4 <sub_month>:

void
sub_month(DATETIME * datetime)
{
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <sub_month+0x6>
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
  datetime->MM--;
     6c2:	e9 81       	ldd	r30, Y+1	; 0x01
     6c4:	fa 81       	ldd	r31, Y+2	; 0x02
     6c6:	81 81       	ldd	r24, Z+1	; 0x01
     6c8:	81 50       	subi	r24, 0x01	; 1
     6ca:	e9 81       	ldd	r30, Y+1	; 0x01
     6cc:	fa 81       	ldd	r31, Y+2	; 0x02
     6ce:	81 83       	std	Z+1, r24	; 0x01
  if (datetime->MM < 1)
     6d0:	e9 81       	ldd	r30, Y+1	; 0x01
     6d2:	fa 81       	ldd	r31, Y+2	; 0x02
     6d4:	81 81       	ldd	r24, Z+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	41 f4       	brne	.+16     	; 0x6ea <sub_month+0x36>
  {
    datetime->MM = 12;
     6da:	e9 81       	ldd	r30, Y+1	; 0x01
     6dc:	fa 81       	ldd	r31, Y+2	; 0x02
     6de:	8c e0       	ldi	r24, 0x0C	; 12
     6e0:	81 83       	std	Z+1, r24	; 0x01
    sub_year(datetime);
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	0e 94 27 03 	call	0x64e	; 0x64e <sub_year>
  }
}
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <add_day>:

void
add_day(DATETIME * datetime)
{
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <add_day+0x6>
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <add_day+0x8>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <add_day+0xa>
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	9b 83       	std	Y+3, r25	; 0x03
     704:	8a 83       	std	Y+2, r24	; 0x02
  datetime->DD++;
     706:	ea 81       	ldd	r30, Y+2	; 0x02
     708:	fb 81       	ldd	r31, Y+3	; 0x03
     70a:	82 81       	ldd	r24, Z+2	; 0x02
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	ea 81       	ldd	r30, Y+2	; 0x02
     710:	fb 81       	ldd	r31, Y+3	; 0x03
     712:	82 83       	std	Z+2, r24	; 0x02
  uint8_t days = 31;
     714:	8f e1       	ldi	r24, 0x1F	; 31
     716:	89 83       	std	Y+1, r24	; 0x01
  switch (datetime->MM)
     718:	ea 81       	ldd	r30, Y+2	; 0x02
     71a:	fb 81       	ldd	r31, Y+3	; 0x03
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	28 2f       	mov	r18, r24
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	3e 83       	std	Y+6, r19	; 0x06
     724:	2d 83       	std	Y+5, r18	; 0x05
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	9e 81       	ldd	r25, Y+6	; 0x06
     72a:	86 30       	cpi	r24, 0x06	; 6
     72c:	91 05       	cpc	r25, r1
     72e:	d1 f0       	breq	.+52     	; 0x764 <add_day+0x70>
     730:	2d 81       	ldd	r18, Y+5	; 0x05
     732:	3e 81       	ldd	r19, Y+6	; 0x06
     734:	27 30       	cpi	r18, 0x07	; 7
     736:	31 05       	cpc	r19, r1
     738:	5c f4       	brge	.+22     	; 0x750 <add_day+0x5c>
     73a:	8d 81       	ldd	r24, Y+5	; 0x05
     73c:	9e 81       	ldd	r25, Y+6	; 0x06
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	91 05       	cpc	r25, r1
     742:	99 f0       	breq	.+38     	; 0x76a <add_day+0x76>
     744:	2d 81       	ldd	r18, Y+5	; 0x05
     746:	3e 81       	ldd	r19, Y+6	; 0x06
     748:	24 30       	cpi	r18, 0x04	; 4
     74a:	31 05       	cpc	r19, r1
     74c:	59 f0       	breq	.+22     	; 0x764 <add_day+0x70>
     74e:	27 c0       	rjmp	.+78     	; 0x79e <add_day+0xaa>
     750:	8d 81       	ldd	r24, Y+5	; 0x05
     752:	9e 81       	ldd	r25, Y+6	; 0x06
     754:	89 30       	cpi	r24, 0x09	; 9
     756:	91 05       	cpc	r25, r1
     758:	29 f0       	breq	.+10     	; 0x764 <add_day+0x70>
     75a:	2d 81       	ldd	r18, Y+5	; 0x05
     75c:	3e 81       	ldd	r19, Y+6	; 0x06
     75e:	2b 30       	cpi	r18, 0x0B	; 11
     760:	31 05       	cpc	r19, r1
     762:	e9 f4       	brne	.+58     	; 0x79e <add_day+0xaa>
  {
  case 4:
  case 6:
  case 9:
  case 11:
    days = 30;
     764:	8e e1       	ldi	r24, 0x1E	; 30
     766:	89 83       	std	Y+1, r24	; 0x01
     768:	1a c0       	rjmp	.+52     	; 0x79e <add_day+0xaa>
    break;
  case 2:
    days = ((datetime->YY % 4 == 0) && (!(datetime->YY % 100 == 0))) ? 29 : 28;
     76a:	ea 81       	ldd	r30, Y+2	; 0x02
     76c:	fb 81       	ldd	r31, Y+3	; 0x03
     76e:	80 81       	ld	r24, Z
     770:	88 2f       	mov	r24, r24
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	83 70       	andi	r24, 0x03	; 3
     776:	90 70       	andi	r25, 0x00	; 0
     778:	00 97       	sbiw	r24, 0x00	; 0
     77a:	69 f4       	brne	.+26     	; 0x796 <add_day+0xa2>
     77c:	ea 81       	ldd	r30, Y+2	; 0x02
     77e:	fb 81       	ldd	r31, Y+3	; 0x03
     780:	80 81       	ld	r24, Z
     782:	94 e6       	ldi	r25, 0x64	; 100
     784:	69 2f       	mov	r22, r25
     786:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <__udivmodqi4>
     78a:	89 2f       	mov	r24, r25
     78c:	88 23       	and	r24, r24
     78e:	19 f0       	breq	.+6      	; 0x796 <add_day+0xa2>
     790:	3d e1       	ldi	r19, 0x1D	; 29
     792:	3c 83       	std	Y+4, r19	; 0x04
     794:	02 c0       	rjmp	.+4      	; 0x79a <add_day+0xa6>
     796:	8c e1       	ldi	r24, 0x1C	; 28
     798:	8c 83       	std	Y+4, r24	; 0x04
     79a:	9c 81       	ldd	r25, Y+4	; 0x04
     79c:	99 83       	std	Y+1, r25	; 0x01
    break;
  }
  if (datetime->DD > days)
     79e:	ea 81       	ldd	r30, Y+2	; 0x02
     7a0:	fb 81       	ldd	r31, Y+3	; 0x03
     7a2:	92 81       	ldd	r25, Z+2	; 0x02
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	89 17       	cp	r24, r25
     7a8:	40 f4       	brcc	.+16     	; 0x7ba <add_day+0xc6>
  {
    datetime->DD = 1;
     7aa:	ea 81       	ldd	r30, Y+2	; 0x02
     7ac:	fb 81       	ldd	r31, Y+3	; 0x03
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	82 83       	std	Z+2, r24	; 0x02
    add_month(datetime);
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	9b 81       	ldd	r25, Y+3	; 0x03
     7b6:	0e 94 3a 03 	call	0x674	; 0x674 <add_month>
  }
}
     7ba:	26 96       	adiw	r28, 0x06	; 6
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <sub_day>:

void
sub_day(DATETIME * datetime)
{
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <sub_day+0x6>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <sub_day+0x8>
     7d4:	00 d0       	rcall	.+0      	; 0x7d6 <sub_day+0xa>
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	9b 83       	std	Y+3, r25	; 0x03
     7dc:	8a 83       	std	Y+2, r24	; 0x02
  datetime->DD--;
     7de:	ea 81       	ldd	r30, Y+2	; 0x02
     7e0:	fb 81       	ldd	r31, Y+3	; 0x03
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	81 50       	subi	r24, 0x01	; 1
     7e6:	ea 81       	ldd	r30, Y+2	; 0x02
     7e8:	fb 81       	ldd	r31, Y+3	; 0x03
     7ea:	82 83       	std	Z+2, r24	; 0x02
  uint8_t days = 31;
     7ec:	8f e1       	ldi	r24, 0x1F	; 31
     7ee:	89 83       	std	Y+1, r24	; 0x01
  switch (datetime->MM - 1)
     7f0:	ea 81       	ldd	r30, Y+2	; 0x02
     7f2:	fb 81       	ldd	r31, Y+3	; 0x03
     7f4:	81 81       	ldd	r24, Z+1	; 0x01
     7f6:	88 2f       	mov	r24, r24
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	9c 01       	movw	r18, r24
     7fc:	21 50       	subi	r18, 0x01	; 1
     7fe:	30 40       	sbci	r19, 0x00	; 0
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	2d 83       	std	Y+5, r18	; 0x05
     804:	8d 81       	ldd	r24, Y+5	; 0x05
     806:	9e 81       	ldd	r25, Y+6	; 0x06
     808:	86 30       	cpi	r24, 0x06	; 6
     80a:	91 05       	cpc	r25, r1
     80c:	d1 f0       	breq	.+52     	; 0x842 <sub_day+0x76>
     80e:	2d 81       	ldd	r18, Y+5	; 0x05
     810:	3e 81       	ldd	r19, Y+6	; 0x06
     812:	27 30       	cpi	r18, 0x07	; 7
     814:	31 05       	cpc	r19, r1
     816:	5c f4       	brge	.+22     	; 0x82e <sub_day+0x62>
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	9e 81       	ldd	r25, Y+6	; 0x06
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	91 05       	cpc	r25, r1
     820:	99 f0       	breq	.+38     	; 0x848 <sub_day+0x7c>
     822:	2d 81       	ldd	r18, Y+5	; 0x05
     824:	3e 81       	ldd	r19, Y+6	; 0x06
     826:	24 30       	cpi	r18, 0x04	; 4
     828:	31 05       	cpc	r19, r1
     82a:	59 f0       	breq	.+22     	; 0x842 <sub_day+0x76>
     82c:	27 c0       	rjmp	.+78     	; 0x87c <__stack+0x1d>
     82e:	8d 81       	ldd	r24, Y+5	; 0x05
     830:	9e 81       	ldd	r25, Y+6	; 0x06
     832:	89 30       	cpi	r24, 0x09	; 9
     834:	91 05       	cpc	r25, r1
     836:	29 f0       	breq	.+10     	; 0x842 <sub_day+0x76>
     838:	2d 81       	ldd	r18, Y+5	; 0x05
     83a:	3e 81       	ldd	r19, Y+6	; 0x06
     83c:	2b 30       	cpi	r18, 0x0B	; 11
     83e:	31 05       	cpc	r19, r1
     840:	e9 f4       	brne	.+58     	; 0x87c <__stack+0x1d>
  {
  case 4:
  case 6:
  case 9:
  case 11:
    days = 30;
     842:	8e e1       	ldi	r24, 0x1E	; 30
     844:	89 83       	std	Y+1, r24	; 0x01
     846:	1a c0       	rjmp	.+52     	; 0x87c <__stack+0x1d>
    break;
  case 2:
    days = ((datetime->YY % 4 == 0) && (!(datetime->YY % 100 == 0))) ? 29 : 28;
     848:	ea 81       	ldd	r30, Y+2	; 0x02
     84a:	fb 81       	ldd	r31, Y+3	; 0x03
     84c:	80 81       	ld	r24, Z
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	83 70       	andi	r24, 0x03	; 3
     854:	90 70       	andi	r25, 0x00	; 0
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	69 f4       	brne	.+26     	; 0x874 <__stack+0x15>
     85a:	ea 81       	ldd	r30, Y+2	; 0x02
     85c:	fb 81       	ldd	r31, Y+3	; 0x03
     85e:	80 81       	ld	r24, Z
     860:	94 e6       	ldi	r25, 0x64	; 100
     862:	69 2f       	mov	r22, r25
     864:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <__udivmodqi4>
     868:	89 2f       	mov	r24, r25
     86a:	88 23       	and	r24, r24
     86c:	19 f0       	breq	.+6      	; 0x874 <__stack+0x15>
     86e:	3d e1       	ldi	r19, 0x1D	; 29
     870:	3c 83       	std	Y+4, r19	; 0x04
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	8c e1       	ldi	r24, 0x1C	; 28
     876:	8c 83       	std	Y+4, r24	; 0x04
     878:	9c 81       	ldd	r25, Y+4	; 0x04
     87a:	99 83       	std	Y+1, r25	; 0x01
    break;
  }
  if (datetime->DD < 1)
     87c:	ea 81       	ldd	r30, Y+2	; 0x02
     87e:	fb 81       	ldd	r31, Y+3	; 0x03
     880:	82 81       	ldd	r24, Z+2	; 0x02
     882:	88 23       	and	r24, r24
     884:	41 f4       	brne	.+16     	; 0x896 <__stack+0x37>
  {
    datetime->DD = days;
     886:	ea 81       	ldd	r30, Y+2	; 0x02
     888:	fb 81       	ldd	r31, Y+3	; 0x03
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	82 83       	std	Z+2, r24	; 0x02
    sub_month(datetime);
     88e:	8a 81       	ldd	r24, Y+2	; 0x02
     890:	9b 81       	ldd	r25, Y+3	; 0x03
     892:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <sub_month>
  }
}
     896:	26 96       	adiw	r28, 0x06	; 6
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	cf 91       	pop	r28
     8a4:	df 91       	pop	r29
     8a6:	08 95       	ret

000008a8 <add_hour>:

void
add_hour(DATETIME * datetime)
{
     8a8:	df 93       	push	r29
     8aa:	cf 93       	push	r28
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <add_hour+0x6>
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	9a 83       	std	Y+2, r25	; 0x02
     8b4:	89 83       	std	Y+1, r24	; 0x01
  datetime->hh++;
     8b6:	e9 81       	ldd	r30, Y+1	; 0x01
     8b8:	fa 81       	ldd	r31, Y+2	; 0x02
     8ba:	83 81       	ldd	r24, Z+3	; 0x03
     8bc:	8f 5f       	subi	r24, 0xFF	; 255
     8be:	e9 81       	ldd	r30, Y+1	; 0x01
     8c0:	fa 81       	ldd	r31, Y+2	; 0x02
     8c2:	83 83       	std	Z+3, r24	; 0x03
  if (datetime->hh > 23)
     8c4:	e9 81       	ldd	r30, Y+1	; 0x01
     8c6:	fa 81       	ldd	r31, Y+2	; 0x02
     8c8:	83 81       	ldd	r24, Z+3	; 0x03
     8ca:	88 31       	cpi	r24, 0x18	; 24
     8cc:	38 f0       	brcs	.+14     	; 0x8dc <add_hour+0x34>
  {
    datetime->hh = 0;
     8ce:	e9 81       	ldd	r30, Y+1	; 0x01
     8d0:	fa 81       	ldd	r31, Y+2	; 0x02
     8d2:	13 82       	std	Z+3, r1	; 0x03
    add_day(datetime);
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <add_day>
  }
}
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	cf 91       	pop	r28
     8e2:	df 91       	pop	r29
     8e4:	08 95       	ret

000008e6 <sub_hour>:

void
sub_hour(DATETIME * datetime)
{
     8e6:	df 93       	push	r29
     8e8:	cf 93       	push	r28
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <sub_hour+0x6>
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	9a 83       	std	Y+2, r25	; 0x02
     8f2:	89 83       	std	Y+1, r24	; 0x01
  if (datetime->hh < 1)
     8f4:	e9 81       	ldd	r30, Y+1	; 0x01
     8f6:	fa 81       	ldd	r31, Y+2	; 0x02
     8f8:	83 81       	ldd	r24, Z+3	; 0x03
     8fa:	88 23       	and	r24, r24
     8fc:	49 f4       	brne	.+18     	; 0x910 <sub_hour+0x2a>
  {
    datetime->hh = 23;
     8fe:	e9 81       	ldd	r30, Y+1	; 0x01
     900:	fa 81       	ldd	r31, Y+2	; 0x02
     902:	87 e1       	ldi	r24, 0x17	; 23
     904:	83 83       	std	Z+3, r24	; 0x03
    sub_day(datetime);
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	9a 81       	ldd	r25, Y+2	; 0x02
     90a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <sub_day>
     90e:	07 c0       	rjmp	.+14     	; 0x91e <sub_hour+0x38>
  }
  else
  {
    datetime->hh--;
     910:	e9 81       	ldd	r30, Y+1	; 0x01
     912:	fa 81       	ldd	r31, Y+2	; 0x02
     914:	83 81       	ldd	r24, Z+3	; 0x03
     916:	81 50       	subi	r24, 0x01	; 1
     918:	e9 81       	ldd	r30, Y+1	; 0x01
     91a:	fa 81       	ldd	r31, Y+2	; 0x02
     91c:	83 83       	std	Z+3, r24	; 0x03
  }
}
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	cf 91       	pop	r28
     924:	df 91       	pop	r29
     926:	08 95       	ret

00000928 <add_minute>:

void
add_minute(DATETIME * datetime)
{
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	00 d0       	rcall	.+0      	; 0x92e <add_minute+0x6>
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	9a 83       	std	Y+2, r25	; 0x02
     934:	89 83       	std	Y+1, r24	; 0x01
  datetime->mm++;
     936:	e9 81       	ldd	r30, Y+1	; 0x01
     938:	fa 81       	ldd	r31, Y+2	; 0x02
     93a:	84 81       	ldd	r24, Z+4	; 0x04
     93c:	8f 5f       	subi	r24, 0xFF	; 255
     93e:	e9 81       	ldd	r30, Y+1	; 0x01
     940:	fa 81       	ldd	r31, Y+2	; 0x02
     942:	84 83       	std	Z+4, r24	; 0x04
  if (datetime->mm > 59)
     944:	e9 81       	ldd	r30, Y+1	; 0x01
     946:	fa 81       	ldd	r31, Y+2	; 0x02
     948:	84 81       	ldd	r24, Z+4	; 0x04
     94a:	8c 33       	cpi	r24, 0x3C	; 60
     94c:	38 f0       	brcs	.+14     	; 0x95c <add_minute+0x34>
  {
    datetime->mm = 0;
     94e:	e9 81       	ldd	r30, Y+1	; 0x01
     950:	fa 81       	ldd	r31, Y+2	; 0x02
     952:	14 82       	std	Z+4, r1	; 0x04
    add_hour(datetime);
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	0e 94 54 04 	call	0x8a8	; 0x8a8 <add_hour>
  }
}
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	08 95       	ret

00000966 <sub_minute>:

void
sub_minute(DATETIME * datetime)
{
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	00 d0       	rcall	.+0      	; 0x96c <sub_minute+0x6>
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	9a 83       	std	Y+2, r25	; 0x02
     972:	89 83       	std	Y+1, r24	; 0x01
  if (datetime->mm < 1)
     974:	e9 81       	ldd	r30, Y+1	; 0x01
     976:	fa 81       	ldd	r31, Y+2	; 0x02
     978:	84 81       	ldd	r24, Z+4	; 0x04
     97a:	88 23       	and	r24, r24
     97c:	49 f4       	brne	.+18     	; 0x990 <sub_minute+0x2a>
  {
    datetime->mm = 59;
     97e:	e9 81       	ldd	r30, Y+1	; 0x01
     980:	fa 81       	ldd	r31, Y+2	; 0x02
     982:	8b e3       	ldi	r24, 0x3B	; 59
     984:	84 83       	std	Z+4, r24	; 0x04
    sub_hour(datetime);
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	9a 81       	ldd	r25, Y+2	; 0x02
     98a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <sub_hour>
     98e:	07 c0       	rjmp	.+14     	; 0x99e <sub_minute+0x38>
  }
  else
  {
    datetime->mm--;
     990:	e9 81       	ldd	r30, Y+1	; 0x01
     992:	fa 81       	ldd	r31, Y+2	; 0x02
     994:	84 81       	ldd	r24, Z+4	; 0x04
     996:	81 50       	subi	r24, 0x01	; 1
     998:	e9 81       	ldd	r30, Y+1	; 0x01
     99a:	fa 81       	ldd	r31, Y+2	; 0x02
     99c:	84 83       	std	Z+4, r24	; 0x04
  }
}
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	cf 91       	pop	r28
     9a4:	df 91       	pop	r29
     9a6:	08 95       	ret

000009a8 <i2c_rtc_read>:
const int arise[] = { 0, RISE( 8,37), RISE( 8,12), RISE( 7,20), RISE( 6,11), RISE( 5, 8), RISE( 4,52), RISE( 4,20), RISE( 4,55), RISE( 5,43), RISE( 6,31), RISE( 7,23), RISE( 8,12), RISE( 8,37) };
const int afall[] = { 0, FALL(16,34), FALL(17,21), FALL(18,11), FALL(18,50), FALL(19,32), FALL(20,20), FALL(20,52), FALL(20,22), FALL(19,21), FALL(18,13), FALL(17, 9), FALL(16,29), FALL(16,34) };

uint8_t
i2c_rtc_read(DATETIME * datetime, uint8_t bLocal)
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	df 93       	push	r29
     9ae:	cf 93       	push	r28
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	a0 97       	sbiw	r28, 0x20	; 32
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	9f 8f       	std	Y+31, r25	; 0x1f
     9c2:	8e 8f       	std	Y+30, r24	; 0x1e
     9c4:	68 a3       	std	Y+32, r22	; 0x20
  uint8_t rtcbuf[7];
  uint8_t rtc = 0;
     9c6:	1e 8a       	std	Y+22, r1	; 0x16

  if (rtc_initialized)
     9c8:	80 91 2a 05 	lds	r24, 0x052A
     9cc:	88 23       	and	r24, r24
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <i2c_rtc_read+0x2a>
     9d0:	bf c2       	rjmp	.+1406   	; 0xf50 <i2c_rtc_read+0x5a8>
  {
    if (i2c_rtc_sram_read(0x00, rtcbuf, 7))
     9d2:	9e 01       	movw	r18, r28
     9d4:	29 5e       	subi	r18, 0xE9	; 233
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	b9 01       	movw	r22, r18
     9dc:	47 e0       	ldi	r20, 0x07	; 7
     9de:	0e 94 13 08 	call	0x1026	; 0x1026 <i2c_rtc_sram_read>
     9e2:	88 23       	and	r24, r24
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <i2c_rtc_read+0x40>
     9e6:	75 c0       	rjmp	.+234    	; 0xad2 <i2c_rtc_read+0x12a>
    {
      datetime->YY = bcdtoi(rtcbuf[6]); // year
     9e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9ea:	0e 94 43 02 	call	0x486	; 0x486 <bcdtoi>
     9ee:	ee 8d       	ldd	r30, Y+30	; 0x1e
     9f0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     9f2:	80 83       	st	Z, r24
      datetime->MM = bcdtoi(rtcbuf[5]); // month
     9f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9f6:	0e 94 43 02 	call	0x486	; 0x486 <bcdtoi>
     9fa:	ee 8d       	ldd	r30, Y+30	; 0x1e
     9fc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     9fe:	81 83       	std	Z+1, r24	; 0x01
      datetime->DD = bcdtoi(rtcbuf[4]); // day of month
     a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a02:	0e 94 43 02 	call	0x486	; 0x486 <bcdtoi>
     a06:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a08:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a0a:	82 83       	std	Z+2, r24	; 0x02
      //       = bcdtoi(rtcbuf[3]) - 1; // weekday 0-6
      datetime->hh = bcdtoi(rtcbuf[2]); // hours
     a0c:	89 8d       	ldd	r24, Y+25	; 0x19
     a0e:	0e 94 43 02 	call	0x486	; 0x486 <bcdtoi>
     a12:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a14:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a16:	83 83       	std	Z+3, r24	; 0x03
      datetime->mm = bcdtoi(rtcbuf[1]); // minutes
     a18:	88 8d       	ldd	r24, Y+24	; 0x18
     a1a:	0e 94 43 02 	call	0x486	; 0x486 <bcdtoi>
     a1e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a20:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a22:	84 83       	std	Z+4, r24	; 0x04
      datetime->ss = bcdtoi(rtcbuf[0]); // seconds
     a24:	8f 89       	ldd	r24, Y+23	; 0x17
     a26:	0e 94 43 02 	call	0x486	; 0x486 <bcdtoi>
     a2a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a2c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a2e:	85 83       	std	Z+5, r24	; 0x05

      uint8_t tziffer = datetime->DD % 7;
     a30:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a32:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a34:	82 81       	ldd	r24, Z+2	; 0x02
     a36:	97 e0       	ldi	r25, 0x07	; 7
     a38:	69 2f       	mov	r22, r25
     a3a:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <__udivmodqi4>
     a3e:	89 2f       	mov	r24, r25
     a40:	8d 8b       	std	Y+21, r24	; 0x15
      uint8_t mziffer = amziffer[datetime->MM - 1];
     a42:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a44:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a46:	81 81       	ldd	r24, Z+1	; 0x01
     a48:	88 2f       	mov	r24, r24
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	fc 01       	movw	r30, r24
     a50:	eb 58       	subi	r30, 0x8B	; 139
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	80 81       	ld	r24, Z
     a56:	8c 8b       	std	Y+20, r24	; 0x14
      uint8_t jziffer = (datetime->YY + (datetime->YY / 4)) % 7;
     a58:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a5a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a5c:	80 81       	ld	r24, Z
     a5e:	28 2f       	mov	r18, r24
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a64:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a66:	80 81       	ld	r24, Z
     a68:	86 95       	lsr	r24
     a6a:	86 95       	lsr	r24
     a6c:	88 2f       	mov	r24, r24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	82 0f       	add	r24, r18
     a72:	93 1f       	adc	r25, r19
     a74:	27 e0       	ldi	r18, 0x07	; 7
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	b9 01       	movw	r22, r18
     a7a:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     a7e:	8b 8b       	std	Y+19, r24	; 0x13
      if (datetime->YY % 4 == 0 && datetime->MM < 3)
     a80:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a82:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a84:	80 81       	ld	r24, Z
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	83 70       	andi	r24, 0x03	; 3
     a8c:	90 70       	andi	r25, 0x00	; 0
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	41 f4       	brne	.+16     	; 0xaa2 <i2c_rtc_read+0xfa>
     a92:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a94:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a96:	81 81       	ldd	r24, Z+1	; 0x01
     a98:	83 30       	cpi	r24, 0x03	; 3
     a9a:	18 f4       	brcc	.+6      	; 0xaa2 <i2c_rtc_read+0xfa>
      {
        jziffer += 6;
     a9c:	8b 89       	ldd	r24, Y+19	; 0x13
     a9e:	8a 5f       	subi	r24, 0xFA	; 250
     aa0:	8b 8b       	std	Y+19, r24	; 0x13
      }
      datetime->wd = (tziffer + mziffer + jziffer + 6) % 7;
     aa2:	8d 89       	ldd	r24, Y+21	; 0x15
     aa4:	28 2f       	mov	r18, r24
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	8c 89       	ldd	r24, Y+20	; 0x14
     aaa:	88 2f       	mov	r24, r24
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	28 0f       	add	r18, r24
     ab0:	39 1f       	adc	r19, r25
     ab2:	8b 89       	ldd	r24, Y+19	; 0x13
     ab4:	88 2f       	mov	r24, r24
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	82 0f       	add	r24, r18
     aba:	93 1f       	adc	r25, r19
     abc:	06 96       	adiw	r24, 0x06	; 6
     abe:	27 e0       	ldi	r18, 0x07	; 7
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	b9 01       	movw	r22, r18
     ac4:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     ac8:	ee 8d       	ldd	r30, Y+30	; 0x1e
     aca:	ff 8d       	ldd	r31, Y+31	; 0x1f
     acc:	86 83       	std	Z+6, r24	; 0x06

      rtc = 1;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	8e 8b       	std	Y+22, r24	; 0x16
    }

    if (bLocal != 0)
     ad2:	88 a1       	ldd	r24, Y+32	; 0x20
     ad4:	88 23       	and	r24, r24
     ad6:	09 f4       	brne	.+2      	; 0xada <i2c_rtc_read+0x132>
     ad8:	3b c2       	rjmp	.+1142   	; 0xf50 <i2c_rtc_read+0x5a8>
    {
      int riseduration = 100;
     ada:	84 e6       	ldi	r24, 0x64	; 100
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	9a 8b       	std	Y+18, r25	; 0x12
     ae0:	89 8b       	std	Y+17, r24	; 0x11

      int mrise = arise[(int) datetime->MM];
     ae2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ae4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ae6:	81 81       	ldd	r24, Z+1	; 0x01
     ae8:	88 2f       	mov	r24, r24
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	fc 01       	movw	r30, r24
     af2:	ef 57       	subi	r30, 0x7F	; 127
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	91 81       	ldd	r25, Z+1	; 0x01
     afa:	98 8b       	std	Y+16, r25	; 0x10
     afc:	8f 87       	std	Y+15, r24	; 0x0f
      int mfall = afall[(int) datetime->MM];
     afe:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b00:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	88 2f       	mov	r24, r24
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	fc 01       	movw	r30, r24
     b0e:	e3 56       	subi	r30, 0x63	; 99
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	9e 87       	std	Y+14, r25	; 0x0e
     b18:	8d 87       	std	Y+13, r24	; 0x0d

      int nmrise = arise[datetime->MM + 1];
     b1a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b1c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b1e:	81 81       	ldd	r24, Z+1	; 0x01
     b20:	88 2f       	mov	r24, r24
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	fc 01       	movw	r30, r24
     b2c:	ef 57       	subi	r30, 0x7F	; 127
     b2e:	ff 4f       	sbci	r31, 0xFF	; 255
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	9c 87       	std	Y+12, r25	; 0x0c
     b36:	8b 87       	std	Y+11, r24	; 0x0b
      int nmfall = afall[datetime->MM + 1];
     b38:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b3a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b3c:	81 81       	ldd	r24, Z+1	; 0x01
     b3e:	88 2f       	mov	r24, r24
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	fc 01       	movw	r30, r24
     b4a:	e3 56       	subi	r30, 0x63	; 99
     b4c:	ff 4f       	sbci	r31, 0xFF	; 255
     b4e:	80 81       	ld	r24, Z
     b50:	91 81       	ldd	r25, Z+1	; 0x01
     b52:	9a 87       	std	Y+10, r25	; 0x0a
     b54:	89 87       	std	Y+9, r24	; 0x09

      int rise = mrise + (((nmrise - mrise) * datetime->DD) / 31);
     b56:	2b 85       	ldd	r18, Y+11	; 0x0b
     b58:	3c 85       	ldd	r19, Y+12	; 0x0c
     b5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b5c:	98 89       	ldd	r25, Y+16	; 0x10
     b5e:	28 1b       	sub	r18, r24
     b60:	39 0b       	sbc	r19, r25
     b62:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b64:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	ac 01       	movw	r20, r24
     b6e:	24 9f       	mul	r18, r20
     b70:	c0 01       	movw	r24, r0
     b72:	25 9f       	mul	r18, r21
     b74:	90 0d       	add	r25, r0
     b76:	34 9f       	mul	r19, r20
     b78:	90 0d       	add	r25, r0
     b7a:	11 24       	eor	r1, r1
     b7c:	2f e1       	ldi	r18, 0x1F	; 31
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	b9 01       	movw	r22, r18
     b82:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     b86:	cb 01       	movw	r24, r22
     b88:	9c 01       	movw	r18, r24
     b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8c:	98 89       	ldd	r25, Y+16	; 0x10
     b8e:	82 0f       	add	r24, r18
     b90:	93 1f       	adc	r25, r19
     b92:	98 87       	std	Y+8, r25	; 0x08
     b94:	8f 83       	std	Y+7, r24	; 0x07
      int fall = mfall + (((nmfall - mfall) * datetime->DD) / 31);
     b96:	29 85       	ldd	r18, Y+9	; 0x09
     b98:	3a 85       	ldd	r19, Y+10	; 0x0a
     b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9e:	28 1b       	sub	r18, r24
     ba0:	39 0b       	sbc	r19, r25
     ba2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ba4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ba6:	82 81       	ldd	r24, Z+2	; 0x02
     ba8:	88 2f       	mov	r24, r24
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	ac 01       	movw	r20, r24
     bae:	24 9f       	mul	r18, r20
     bb0:	c0 01       	movw	r24, r0
     bb2:	25 9f       	mul	r18, r21
     bb4:	90 0d       	add	r25, r0
     bb6:	34 9f       	mul	r19, r20
     bb8:	90 0d       	add	r25, r0
     bba:	11 24       	eor	r1, r1
     bbc:	2f e1       	ldi	r18, 0x1F	; 31
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	b9 01       	movw	r22, r18
     bc2:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     bc6:	cb 01       	movw	r24, r22
     bc8:	9c 01       	movw	r18, r24
     bca:	8d 85       	ldd	r24, Y+13	; 0x0d
     bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19
     bd2:	9e 83       	std	Y+6, r25	; 0x06
     bd4:	8d 83       	std	Y+5, r24	; 0x05

      datetime->sunrisehh = rise / 100;
     bd6:	8f 81       	ldd	r24, Y+7	; 0x07
     bd8:	98 85       	ldd	r25, Y+8	; 0x08
     bda:	24 e6       	ldi	r18, 0x64	; 100
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	b9 01       	movw	r22, r18
     be0:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     be4:	cb 01       	movw	r24, r22
     be6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     be8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     bea:	81 87       	std	Z+9, r24	; 0x09
      datetime->sunfallhh = fall / 100;
     bec:	8d 81       	ldd	r24, Y+5	; 0x05
     bee:	9e 81       	ldd	r25, Y+6	; 0x06
     bf0:	24 e6       	ldi	r18, 0x64	; 100
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	b9 01       	movw	r22, r18
     bf6:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     bfa:	cb 01       	movw	r24, r22
     bfc:	ee 8d       	ldd	r30, Y+30	; 0x1e
     bfe:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c00:	83 87       	std	Z+11, r24	; 0x0b
      datetime->sunrisemm = (rise % 100) * 60 / 100;
     c02:	8f 81       	ldd	r24, Y+7	; 0x07
     c04:	98 85       	ldd	r25, Y+8	; 0x08
     c06:	24 e6       	ldi	r18, 0x64	; 100
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	b9 01       	movw	r22, r18
     c0c:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     c10:	9c 01       	movw	r18, r24
     c12:	8c e3       	ldi	r24, 0x3C	; 60
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	ac 01       	movw	r20, r24
     c18:	24 9f       	mul	r18, r20
     c1a:	c0 01       	movw	r24, r0
     c1c:	25 9f       	mul	r18, r21
     c1e:	90 0d       	add	r25, r0
     c20:	34 9f       	mul	r19, r20
     c22:	90 0d       	add	r25, r0
     c24:	11 24       	eor	r1, r1
     c26:	24 e6       	ldi	r18, 0x64	; 100
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	b9 01       	movw	r22, r18
     c2c:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     c30:	cb 01       	movw	r24, r22
     c32:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c34:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c36:	82 87       	std	Z+10, r24	; 0x0a
      datetime->sunfallmm = (fall % 100) * 60 / 100;
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	24 e6       	ldi	r18, 0x64	; 100
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	b9 01       	movw	r22, r18
     c42:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     c46:	9c 01       	movw	r18, r24
     c48:	8c e3       	ldi	r24, 0x3C	; 60
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	ac 01       	movw	r20, r24
     c4e:	24 9f       	mul	r18, r20
     c50:	c0 01       	movw	r24, r0
     c52:	25 9f       	mul	r18, r21
     c54:	90 0d       	add	r25, r0
     c56:	34 9f       	mul	r19, r20
     c58:	90 0d       	add	r25, r0
     c5a:	11 24       	eor	r1, r1
     c5c:	24 e6       	ldi	r18, 0x64	; 100
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	b9 01       	movw	r22, r18
     c62:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     c66:	cb 01       	movw	r24, r22
     c68:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c6a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c6c:	84 87       	std	Z+12, r24	; 0x0c

      int now = (datetime->hh * 100) + ((datetime->mm * 100) / 60);
     c6e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c70:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c72:	83 81       	ldd	r24, Z+3	; 0x03
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	84 e6       	ldi	r24, 0x64	; 100
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	28 9f       	mul	r18, r24
     c7e:	80 01       	movw	r16, r0
     c80:	29 9f       	mul	r18, r25
     c82:	10 0d       	add	r17, r0
     c84:	38 9f       	mul	r19, r24
     c86:	10 0d       	add	r17, r0
     c88:	11 24       	eor	r1, r1
     c8a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c8c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c8e:	84 81       	ldd	r24, Z+4	; 0x04
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	84 e6       	ldi	r24, 0x64	; 100
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	ac 01       	movw	r20, r24
     c9a:	24 9f       	mul	r18, r20
     c9c:	c0 01       	movw	r24, r0
     c9e:	25 9f       	mul	r18, r21
     ca0:	90 0d       	add	r25, r0
     ca2:	34 9f       	mul	r19, r20
     ca4:	90 0d       	add	r25, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2c e3       	ldi	r18, 0x3C	; 60
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	b9 01       	movw	r22, r18
     cae:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     cb2:	cb 01       	movw	r24, r22
     cb4:	80 0f       	add	r24, r16
     cb6:	91 1f       	adc	r25, r17
     cb8:	9c 83       	std	Y+4, r25	; 0x04
     cba:	8b 83       	std	Y+3, r24	; 0x03

      if (now < rise)
     cbc:	2b 81       	ldd	r18, Y+3	; 0x03
     cbe:	3c 81       	ldd	r19, Y+4	; 0x04
     cc0:	8f 81       	ldd	r24, Y+7	; 0x07
     cc2:	98 85       	ldd	r25, Y+8	; 0x08
     cc4:	28 17       	cp	r18, r24
     cc6:	39 07       	cpc	r19, r25
     cc8:	24 f4       	brge	.+8      	; 0xcd2 <i2c_rtc_read+0x32a>
      {
        datetime->sunrise = 0;
     cca:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ccc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     cce:	10 86       	std	Z+8, r1	; 0x08
     cd0:	75 c0       	rjmp	.+234    	; 0xdbc <i2c_rtc_read+0x414>
      }
      else if (now >= rise && now < rise + riseduration)
     cd2:	2b 81       	ldd	r18, Y+3	; 0x03
     cd4:	3c 81       	ldd	r19, Y+4	; 0x04
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	28 17       	cp	r18, r24
     cdc:	39 07       	cpc	r19, r25
     cde:	2c f1       	brlt	.+74     	; 0xd2a <i2c_rtc_read+0x382>
     ce0:	2f 81       	ldd	r18, Y+7	; 0x07
     ce2:	38 85       	ldd	r19, Y+8	; 0x08
     ce4:	89 89       	ldd	r24, Y+17	; 0x11
     ce6:	9a 89       	ldd	r25, Y+18	; 0x12
     ce8:	28 0f       	add	r18, r24
     cea:	39 1f       	adc	r19, r25
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	82 17       	cp	r24, r18
     cf2:	93 07       	cpc	r25, r19
     cf4:	d4 f4       	brge	.+52     	; 0xd2a <i2c_rtc_read+0x382>
      {
        datetime->sunrise = ((now - rise) * 100 / riseduration);
     cf6:	2b 81       	ldd	r18, Y+3	; 0x03
     cf8:	3c 81       	ldd	r19, Y+4	; 0x04
     cfa:	8f 81       	ldd	r24, Y+7	; 0x07
     cfc:	98 85       	ldd	r25, Y+8	; 0x08
     cfe:	28 1b       	sub	r18, r24
     d00:	39 0b       	sbc	r19, r25
     d02:	84 e6       	ldi	r24, 0x64	; 100
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	ac 01       	movw	r20, r24
     d08:	24 9f       	mul	r18, r20
     d0a:	c0 01       	movw	r24, r0
     d0c:	25 9f       	mul	r18, r21
     d0e:	90 0d       	add	r25, r0
     d10:	34 9f       	mul	r19, r20
     d12:	90 0d       	add	r25, r0
     d14:	11 24       	eor	r1, r1
     d16:	29 89       	ldd	r18, Y+17	; 0x11
     d18:	3a 89       	ldd	r19, Y+18	; 0x12
     d1a:	b9 01       	movw	r22, r18
     d1c:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     d20:	cb 01       	movw	r24, r22
     d22:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d24:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d26:	80 87       	std	Z+8, r24	; 0x08
     d28:	49 c0       	rjmp	.+146    	; 0xdbc <i2c_rtc_read+0x414>
      }
      else if (now >= rise + riseduration && now < fall)
     d2a:	2f 81       	ldd	r18, Y+7	; 0x07
     d2c:	38 85       	ldd	r19, Y+8	; 0x08
     d2e:	89 89       	ldd	r24, Y+17	; 0x11
     d30:	9a 89       	ldd	r25, Y+18	; 0x12
     d32:	28 0f       	add	r18, r24
     d34:	39 1f       	adc	r19, r25
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	82 17       	cp	r24, r18
     d3c:	93 07       	cpc	r25, r19
     d3e:	64 f0       	brlt	.+24     	; 0xd58 <i2c_rtc_read+0x3b0>
     d40:	2b 81       	ldd	r18, Y+3	; 0x03
     d42:	3c 81       	ldd	r19, Y+4	; 0x04
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	2c f4       	brge	.+10     	; 0xd58 <i2c_rtc_read+0x3b0>
      {
        datetime->sunrise = 100;
     d4e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d50:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d52:	84 e6       	ldi	r24, 0x64	; 100
     d54:	80 87       	std	Z+8, r24	; 0x08
     d56:	32 c0       	rjmp	.+100    	; 0xdbc <i2c_rtc_read+0x414>
      }
      else if (now >= fall && now < fall + riseduration)
     d58:	2b 81       	ldd	r18, Y+3	; 0x03
     d5a:	3c 81       	ldd	r19, Y+4	; 0x04
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	28 17       	cp	r18, r24
     d62:	39 07       	cpc	r19, r25
     d64:	44 f1       	brlt	.+80     	; 0xdb6 <i2c_rtc_read+0x40e>
     d66:	2d 81       	ldd	r18, Y+5	; 0x05
     d68:	3e 81       	ldd	r19, Y+6	; 0x06
     d6a:	89 89       	ldd	r24, Y+17	; 0x11
     d6c:	9a 89       	ldd	r25, Y+18	; 0x12
     d6e:	28 0f       	add	r18, r24
     d70:	39 1f       	adc	r19, r25
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	82 17       	cp	r24, r18
     d78:	93 07       	cpc	r25, r19
     d7a:	ec f4       	brge	.+58     	; 0xdb6 <i2c_rtc_read+0x40e>
      {
        datetime->sunrise = 100 - ((now - fall) * 100 / riseduration);
     d7c:	2b 81       	ldd	r18, Y+3	; 0x03
     d7e:	3c 81       	ldd	r19, Y+4	; 0x04
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	28 1b       	sub	r18, r24
     d86:	39 0b       	sbc	r19, r25
     d88:	84 e6       	ldi	r24, 0x64	; 100
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	ac 01       	movw	r20, r24
     d8e:	24 9f       	mul	r18, r20
     d90:	c0 01       	movw	r24, r0
     d92:	25 9f       	mul	r18, r21
     d94:	90 0d       	add	r25, r0
     d96:	34 9f       	mul	r19, r20
     d98:	90 0d       	add	r25, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	29 89       	ldd	r18, Y+17	; 0x11
     d9e:	3a 89       	ldd	r19, Y+18	; 0x12
     da0:	b9 01       	movw	r22, r18
     da2:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
     da6:	cb 01       	movw	r24, r22
     da8:	98 2f       	mov	r25, r24
     daa:	84 e6       	ldi	r24, 0x64	; 100
     dac:	89 1b       	sub	r24, r25
     dae:	ee 8d       	ldd	r30, Y+30	; 0x1e
     db0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     db2:	80 87       	std	Z+8, r24	; 0x08
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <i2c_rtc_read+0x414>
      }
      else
      {
        datetime->sunrise = 0;
     db6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     db8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dba:	10 86       	std	Z+8, r1	; 0x08
      }

      for (int x = 0; x != rtc_offset;)
     dbc:	1a 82       	std	Y+2, r1	; 0x02
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	33 c0       	rjmp	.+102    	; 0xe28 <i2c_rtc_read+0x480>
      {
        if (rtc_offset > 0)
     dc2:	80 91 29 05 	lds	r24, 0x0529
     dc6:	18 16       	cp	r1, r24
     dc8:	c4 f4       	brge	.+48     	; 0xdfa <i2c_rtc_read+0x452>
        {
          add_hour(datetime);
     dca:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     dce:	0e 94 54 04 	call	0x8a8	; 0x8a8 <add_hour>
          datetime->sunrisehh++;
     dd2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     dd4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dd6:	81 85       	ldd	r24, Z+9	; 0x09
     dd8:	8f 5f       	subi	r24, 0xFF	; 255
     dda:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ddc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dde:	81 87       	std	Z+9, r24	; 0x09
          datetime->sunfallhh++;
     de0:	ee 8d       	ldd	r30, Y+30	; 0x1e
     de2:	ff 8d       	ldd	r31, Y+31	; 0x1f
     de4:	83 85       	ldd	r24, Z+11	; 0x0b
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	ee 8d       	ldd	r30, Y+30	; 0x1e
     dea:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dec:	83 87       	std	Z+11, r24	; 0x0b
          x++;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	9a 83       	std	Y+2, r25	; 0x02
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	17 c0       	rjmp	.+46     	; 0xe28 <i2c_rtc_read+0x480>
        }
        else
        {
          sub_hour(datetime);
     dfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dfc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     dfe:	0e 94 73 04 	call	0x8e6	; 0x8e6 <sub_hour>
          datetime->sunrisehh--;
     e02:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e04:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e06:	81 85       	ldd	r24, Z+9	; 0x09
     e08:	81 50       	subi	r24, 0x01	; 1
     e0a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e0c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e0e:	81 87       	std	Z+9, r24	; 0x09
          datetime->sunfallhh--;
     e10:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e12:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e14:	83 85       	ldd	r24, Z+11	; 0x0b
     e16:	81 50       	subi	r24, 0x01	; 1
     e18:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e1a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e1c:	83 87       	std	Z+11, r24	; 0x0b
          x--;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
      else
      {
        datetime->sunrise = 0;
      }

      for (int x = 0; x != rtc_offset;)
     e28:	80 91 29 05 	lds	r24, 0x0529
     e2c:	28 2f       	mov	r18, r24
     e2e:	33 27       	eor	r19, r19
     e30:	27 fd       	sbrc	r18, 7
     e32:	30 95       	com	r19
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	28 17       	cp	r18, r24
     e3a:	39 07       	cpc	r19, r25
     e3c:	11 f6       	brne	.-124    	; 0xdc2 <i2c_rtc_read+0x41a>
          datetime->sunrisehh--;
          datetime->sunfallhh--;
          x--;
        }
      }
      if (datetime->MM < 3 || datetime->MM > 10)
     e3e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e40:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e42:	81 81       	ldd	r24, Z+1	; 0x01
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	28 f0       	brcs	.+10     	; 0xe52 <i2c_rtc_read+0x4aa>
     e48:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e4a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e4c:	81 81       	ldd	r24, Z+1	; 0x01
     e4e:	8b 30       	cpi	r24, 0x0B	; 11
     e50:	20 f0       	brcs	.+8      	; 0xe5a <i2c_rtc_read+0x4b2>
      {
        datetime->dst = 0;
     e52:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e54:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e56:	17 82       	std	Z+7, r1	; 0x07
     e58:	7b c0       	rjmp	.+246    	; 0xf50 <i2c_rtc_read+0x5a8>
      }
      else if (datetime->MM > 3 && datetime->MM < 10)
     e5a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e5c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	84 30       	cpi	r24, 0x04	; 4
     e62:	e0 f0       	brcs	.+56     	; 0xe9c <i2c_rtc_read+0x4f4>
     e64:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e66:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e68:	81 81       	ldd	r24, Z+1	; 0x01
     e6a:	8a 30       	cpi	r24, 0x0A	; 10
     e6c:	b8 f4       	brcc	.+46     	; 0xe9c <i2c_rtc_read+0x4f4>
      {
        datetime->sunrisehh++;
     e6e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e70:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e72:	81 85       	ldd	r24, Z+9	; 0x09
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e78:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e7a:	81 87       	std	Z+9, r24	; 0x09
        datetime->sunfallhh++;
     e7c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e7e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e80:	83 85       	ldd	r24, Z+11	; 0x0b
     e82:	8f 5f       	subi	r24, 0xFF	; 255
     e84:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e86:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e88:	83 87       	std	Z+11, r24	; 0x0b
        add_hour(datetime);
     e8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e8c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e8e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <add_hour>
        datetime->dst = 1;
     e92:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e94:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	87 83       	std	Z+7, r24	; 0x07
     e9a:	5a c0       	rjmp	.+180    	; 0xf50 <i2c_rtc_read+0x5a8>
      }
      else
      {
        if (datetime->DD - datetime->wd >= 25 && (datetime->wd || datetime->hh > 2))
     e9c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e9e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ea8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     eaa:	86 81       	ldd	r24, Z+6	; 0x06
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a9 01       	movw	r20, r18
     eb2:	48 1b       	sub	r20, r24
     eb4:	59 0b       	sbc	r21, r25
     eb6:	ca 01       	movw	r24, r20
     eb8:	89 31       	cpi	r24, 0x19	; 25
     eba:	91 05       	cpc	r25, r1
     ebc:	54 f1       	brlt	.+84     	; 0xf12 <i2c_rtc_read+0x56a>
     ebe:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ec0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ec2:	86 81       	ldd	r24, Z+6	; 0x06
     ec4:	88 23       	and	r24, r24
     ec6:	29 f4       	brne	.+10     	; 0xed2 <i2c_rtc_read+0x52a>
     ec8:	ee 8d       	ldd	r30, Y+30	; 0x1e
     eca:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ecc:	83 81       	ldd	r24, Z+3	; 0x03
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	00 f1       	brcs	.+64     	; 0xf12 <i2c_rtc_read+0x56a>
        {
          if (datetime->MM == 10)
     ed2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ed4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ed6:	81 81       	ldd	r24, Z+1	; 0x01
     ed8:	8a 30       	cpi	r24, 0x0A	; 10
     eda:	21 f4       	brne	.+8      	; 0xee4 <i2c_rtc_read+0x53c>
          {
            datetime->dst = 0;
     edc:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ede:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ee0:	17 82       	std	Z+7, r1	; 0x07
     ee2:	36 c0       	rjmp	.+108    	; 0xf50 <i2c_rtc_read+0x5a8>
          }
          else
          {
            datetime->sunrisehh++;
     ee4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ee6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ee8:	81 85       	ldd	r24, Z+9	; 0x09
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	ee 8d       	ldd	r30, Y+30	; 0x1e
     eee:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ef0:	81 87       	std	Z+9, r24	; 0x09
            datetime->sunfallhh++;
     ef2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ef4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ef6:	83 85       	ldd	r24, Z+11	; 0x0b
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	ee 8d       	ldd	r30, Y+30	; 0x1e
     efc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     efe:	83 87       	std	Z+11, r24	; 0x0b
            add_hour(datetime);
     f00:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f02:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f04:	0e 94 54 04 	call	0x8a8	; 0x8a8 <add_hour>
            datetime->dst = 1;
     f08:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f0a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	87 83       	std	Z+7, r24	; 0x07
     f10:	1f c0       	rjmp	.+62     	; 0xf50 <i2c_rtc_read+0x5a8>
          }
        }
        else
        {
          if (datetime->MM == 3)
     f12:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f14:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f16:	81 81       	ldd	r24, Z+1	; 0x01
     f18:	83 30       	cpi	r24, 0x03	; 3
     f1a:	21 f4       	brne	.+8      	; 0xf24 <i2c_rtc_read+0x57c>
          {
            datetime->dst = 0;
     f1c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f1e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f20:	17 82       	std	Z+7, r1	; 0x07
     f22:	16 c0       	rjmp	.+44     	; 0xf50 <i2c_rtc_read+0x5a8>
          }
          else
          {
            datetime->sunrisehh++;
     f24:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f26:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f28:	81 85       	ldd	r24, Z+9	; 0x09
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f2e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f30:	81 87       	std	Z+9, r24	; 0x09
            datetime->sunfallhh++;
     f32:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f34:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f36:	83 85       	ldd	r24, Z+11	; 0x0b
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f3c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f3e:	83 87       	std	Z+11, r24	; 0x0b
            add_hour(datetime);
     f40:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f42:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f44:	0e 94 54 04 	call	0x8a8	; 0x8a8 <add_hour>
            datetime->dst = 1;
     f48:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f4a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	87 83       	std	Z+7, r24	; 0x07
          }
        }
      }
    }
  }
  return rtc;
     f50:	8e 89       	ldd	r24, Y+22	; 0x16
}
     f52:	a0 96       	adiw	r28, 0x20	; 32
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <i2c_rtc_sram_write>:
 *  @return    TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_sram_write(uint8_t addr, void * void_valuep, uint8_t length)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	28 97       	sbiw	r28, 0x08	; 8
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	8c 83       	std	Y+4, r24	; 0x04
     f7e:	7e 83       	std	Y+6, r23	; 0x06
     f80:	6d 83       	std	Y+5, r22	; 0x05
     f82:	4f 83       	std	Y+7, r20	; 0x07
  unsigned char * valuep = void_valuep;
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	9b 83       	std	Y+3, r25	; 0x03
     f8a:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t rtc = 0;
     f8c:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
     f8e:	80 91 2a 05 	lds	r24, 0x052A
     f92:	88 23       	and	r24, r24
     f94:	09 f4       	brne	.+2      	; 0xf98 <i2c_rtc_sram_write+0x30>
     f96:	3d c0       	rjmp	.+122    	; 0x1012 <i2c_rtc_sram_write+0xaa>
  {
    if (length && addr + length <= 64)
     f98:	8f 81       	ldd	r24, Y+7	; 0x07
     f9a:	88 23       	and	r24, r24
     f9c:	d1 f1       	breq	.+116    	; 0x1012 <i2c_rtc_sram_write+0xaa>
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8f 81       	ldd	r24, Y+7	; 0x07
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	82 0f       	add	r24, r18
     fac:	93 1f       	adc	r25, r19
     fae:	81 34       	cpi	r24, 0x41	; 65
     fb0:	91 05       	cpc	r25, r1
     fb2:	7c f5       	brge	.+94     	; 0x1012 <i2c_rtc_sram_write+0xaa>
    {
      i2c_master_start_wait(DEVRTC + I2C_WRITE); // set device address and write mode
     fb4:	80 ed       	ldi	r24, 0xD0	; 208
     fb6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_master_start_wait>

      if (i2c_master_write(addr, &i2c_rtc_status) == 0) // write address
     fba:	2d e2       	ldi	r18, 0x2D	; 45
     fbc:	35 e0       	ldi	r19, 0x05	; 5
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	b9 01       	movw	r22, r18
     fc2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_master_write>
     fc6:	88 23       	and	r24, r24
     fc8:	11 f5       	brne	.+68     	; 0x100e <i2c_rtc_sram_write+0xa6>
      {
        rtc = true; // indicate success
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	12 c0       	rjmp	.+36     	; 0xff4 <i2c_rtc_sram_write+0x8c>

        while (length--)
        {
          if (i2c_master_write(*valuep++, &i2c_rtc_status) != 0) // write value
     fd0:	ea 81       	ldd	r30, Y+2	; 0x02
     fd2:	fb 81       	ldd	r31, Y+3	; 0x03
     fd4:	40 81       	ld	r20, Z
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	9b 83       	std	Y+3, r25	; 0x03
     fde:	8a 83       	std	Y+2, r24	; 0x02
     fe0:	2d e2       	ldi	r18, 0x2D	; 45
     fe2:	35 e0       	ldi	r19, 0x05	; 5
     fe4:	84 2f       	mov	r24, r20
     fe6:	b9 01       	movw	r22, r18
     fe8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_master_write>
     fec:	88 23       	and	r24, r24
     fee:	11 f0       	breq	.+4      	; 0xff4 <i2c_rtc_sram_write+0x8c>
          {
            rtc = false; // indicate errror
     ff0:	19 82       	std	Y+1, r1	; 0x01
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <i2c_rtc_sram_write+0xa6>

      if (i2c_master_write(addr, &i2c_rtc_status) == 0) // write address
      {
        rtc = true; // indicate success

        while (length--)
     ff4:	8f 81       	ldd	r24, Y+7	; 0x07
     ff6:	88 87       	std	Y+8, r24	; 0x08
     ff8:	88 85       	ldd	r24, Y+8	; 0x08
     ffa:	88 23       	and	r24, r24
     ffc:	11 f0       	breq	.+4      	; 0x1002 <i2c_rtc_sram_write+0x9a>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	88 87       	std	Y+8, r24	; 0x08
    1002:	88 85       	ldd	r24, Y+8	; 0x08
    1004:	9f 81       	ldd	r25, Y+7	; 0x07
    1006:	91 50       	subi	r25, 0x01	; 1
    1008:	9f 83       	std	Y+7, r25	; 0x07
    100a:	88 23       	and	r24, r24
    100c:	09 f7       	brne	.-62     	; 0xfd0 <i2c_rtc_sram_write+0x68>
            break;
          }
        }
      }

      i2c_master_stop(); // set stop conditon = release bus
    100e:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_master_stop>
    }
  }
  return rtc;
    1012:	89 81       	ldd	r24, Y+1	; 0x01
}
    1014:	28 96       	adiw	r28, 0x08	; 8
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <i2c_rtc_sram_read>:
 *  @return   TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_sram_read(uint8_t addr, void * void_valuep, uint8_t length)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	27 97       	sbiw	r28, 0x07	; 7
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	8c 83       	std	Y+4, r24	; 0x04
    103c:	7e 83       	std	Y+6, r23	; 0x06
    103e:	6d 83       	std	Y+5, r22	; 0x05
    1040:	4f 83       	std	Y+7, r20	; 0x07
  unsigned char * valuep = void_valuep;
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	9b 83       	std	Y+3, r25	; 0x03
    1048:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t rtc = false;
    104a:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
    104c:	80 91 2a 05 	lds	r24, 0x052A
    1050:	88 23       	and	r24, r24
    1052:	09 f4       	brne	.+2      	; 0x1056 <i2c_rtc_sram_read+0x30>
    1054:	40 c0       	rjmp	.+128    	; 0x10d6 <i2c_rtc_sram_read+0xb0>
  {
    if (length && addr + length <= 64)
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
    1058:	88 23       	and	r24, r24
    105a:	e9 f1       	breq	.+122    	; 0x10d6 <i2c_rtc_sram_read+0xb0>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8f 81       	ldd	r24, Y+7	; 0x07
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	81 34       	cpi	r24, 0x41	; 65
    106e:	91 05       	cpc	r25, r1
    1070:	94 f5       	brge	.+100    	; 0x10d6 <i2c_rtc_sram_read+0xb0>
    {
      i2c_master_start_wait(DEVRTC + I2C_WRITE); // set device address and write mode
    1072:	80 ed       	ldi	r24, 0xD0	; 208
    1074:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_master_start_wait>

      if (i2c_master_write(addr, &i2c_rtc_status) == 0) // write address
    1078:	2d e2       	ldi	r18, 0x2D	; 45
    107a:	35 e0       	ldi	r19, 0x05	; 5
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	b9 01       	movw	r22, r18
    1080:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_master_write>
    1084:	88 23       	and	r24, r24
    1086:	29 f5       	brne	.+74     	; 0x10d2 <i2c_rtc_sram_read+0xac>
      {
        if (i2c_master_rep_start(DEVRTC + I2C_READ, &i2c_rtc_status) == 0) // set device address and read mode
    1088:	2d e2       	ldi	r18, 0x2D	; 45
    108a:	35 e0       	ldi	r19, 0x05	; 5
    108c:	81 ed       	ldi	r24, 0xD1	; 209
    108e:	b9 01       	movw	r22, r18
    1090:	0e 94 40 01 	call	0x280	; 0x280 <i2c_master_rep_start>
    1094:	88 23       	and	r24, r24
    1096:	e9 f4       	brne	.+58     	; 0x10d2 <i2c_rtc_sram_read+0xac>
        {
          rtc = true; // indicate success
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	0a c0       	rjmp	.+20     	; 0x10b2 <i2c_rtc_sram_read+0x8c>

          while (--length)
          {
            *valuep++ = i2c_master_read_ack(); // read n'th byte
    109e:	0e 94 99 01 	call	0x332	; 0x332 <i2c_master_read_ack>
    10a2:	ea 81       	ldd	r30, Y+2	; 0x02
    10a4:	fb 81       	ldd	r31, Y+3	; 0x03
    10a6:	80 83       	st	Z, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	8a 83       	std	Y+2, r24	; 0x02
      {
        if (i2c_master_rep_start(DEVRTC + I2C_READ, &i2c_rtc_status) == 0) // set device address and read mode
        {
          rtc = true; // indicate success

          while (--length)
    10b2:	8f 81       	ldd	r24, Y+7	; 0x07
    10b4:	81 50       	subi	r24, 0x01	; 1
    10b6:	8f 83       	std	Y+7, r24	; 0x07
    10b8:	8f 81       	ldd	r24, Y+7	; 0x07
    10ba:	88 23       	and	r24, r24
    10bc:	81 f7       	brne	.-32     	; 0x109e <i2c_rtc_sram_read+0x78>
          {
            *valuep++ = i2c_master_read_ack(); // read n'th byte
          }
          *valuep++ = i2c_master_read_nak(); // read last byte
    10be:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_master_read_nak>
    10c2:	ea 81       	ldd	r30, Y+2	; 0x02
    10c4:	fb 81       	ldd	r31, Y+3	; 0x03
    10c6:	80 83       	st	Z, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	9b 81       	ldd	r25, Y+3	; 0x03
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	9b 83       	std	Y+3, r25	; 0x03
    10d0:	8a 83       	std	Y+2, r24	; 0x02
        }
      }

      i2c_master_stop(); // set stop conditon = release bus
    10d2:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_master_stop>
    }
  }
  return rtc;
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d8:	27 96       	adiw	r28, 0x07	; 7
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <i2c_write_ctrlreg>:
 *  @return     TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static uint8_t
i2c_write_ctrlreg(void)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <i2c_write_ctrlreg+0x6>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
  uint8_t value[1];
  uint8_t rtc = 0;
    10f4:	19 82       	std	Y+1, r1	; 0x01

  value[0] = ctrlreg;
    10f6:	80 91 2e 05 	lds	r24, 0x052E
    10fa:	8a 83       	std	Y+2, r24	; 0x02

  if (i2c_rtc_sram_write(0x07, value, 1))
    10fc:	9e 01       	movw	r18, r28
    10fe:	2e 5f       	subi	r18, 0xFE	; 254
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	87 e0       	ldi	r24, 0x07	; 7
    1104:	b9 01       	movw	r22, r18
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	0e 94 b4 07 	call	0xf68	; 0xf68 <i2c_rtc_sram_write>
    110c:	88 23       	and	r24, r24
    110e:	11 f0       	breq	.+4      	; 0x1114 <i2c_write_ctrlreg+0x2a>
  {
    rtc = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	89 83       	std	Y+1, r24	; 0x01
  }
  return rtc;
    1114:	89 81       	ldd	r24, Y+1	; 0x01
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <i2c_rtc_init>:
 *  @return   TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_init(uint8_t * errorcode_p, uint8_t * status_p)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <i2c_rtc_init+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <i2c_rtc_init+0x8>
    1128:	00 d0       	rcall	.+0      	; 0x112a <i2c_rtc_init+0xa>
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	8b 83       	std	Y+3, r24	; 0x03
    1132:	7e 83       	std	Y+6, r23	; 0x06
    1134:	6d 83       	std	Y+5, r22	; 0x05
  uint8_t rtc = false;
    1136:	19 82       	std	Y+1, r1	; 0x01
  uint8_t seconds;

  *status_p = 0xFF;
    1138:	ed 81       	ldd	r30, Y+5	; 0x05
    113a:	fe 81       	ldd	r31, Y+6	; 0x06
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	80 83       	st	Z, r24
  *errorcode_p = i2c_master_init(); // init I2C interface
    1140:	0e 94 90 00 	call	0x120	; 0x120 <i2c_master_init>
    1144:	eb 81       	ldd	r30, Y+3	; 0x03
    1146:	fc 81       	ldd	r31, Y+4	; 0x04
    1148:	80 83       	st	Z, r24


  if (*errorcode_p == 0)
    114a:	eb 81       	ldd	r30, Y+3	; 0x03
    114c:	fc 81       	ldd	r31, Y+4	; 0x04
    114e:	80 81       	ld	r24, Z
    1150:	88 23       	and	r24, r24
    1152:	a1 f5       	brne	.+104    	; 0x11bc <i2c_rtc_init+0x9c>
  {
    rtc_initialized = true;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 2a 05 	sts	0x052A, r24
    ctrlreg = CTRL_REG_OUT; // set SQWE pin to output and set it to high (deactivated, active low!)
    115a:	80 e8       	ldi	r24, 0x80	; 128
    115c:	80 93 2e 05 	sts	0x052E, r24

    if (i2c_write_ctrlreg())
    1160:	0e 94 75 08 	call	0x10ea	; 0x10ea <i2c_write_ctrlreg>
    1164:	88 23       	and	r24, r24
    1166:	09 f1       	breq	.+66     	; 0x11aa <i2c_rtc_init+0x8a>
    {
      rtc = true;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01

      if (i2c_rtc_sram_read(0x00, &seconds, 1))
    116c:	9e 01       	movw	r18, r28
    116e:	2e 5f       	subi	r18, 0xFE	; 254
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	b9 01       	movw	r22, r18
    1176:	41 e0       	ldi	r20, 0x01	; 1
    1178:	0e 94 13 08 	call	0x1026	; 0x1026 <i2c_rtc_sram_read>
    117c:	88 23       	and	r24, r24
    117e:	71 f0       	breq	.+28     	; 0x119c <i2c_rtc_init+0x7c>
      {
        if (seconds & 0x80) // clock stopped?
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	88 23       	and	r24, r24
    1184:	5c f4       	brge	.+22     	; 0x119c <i2c_rtc_init+0x7c>
        {
          seconds &= ~0x80;
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	8f 77       	andi	r24, 0x7F	; 127
    118a:	8a 83       	std	Y+2, r24	; 0x02
          (void) i2c_rtc_sram_write(0x00, &seconds, 1);
    118c:	9e 01       	movw	r18, r28
    118e:	2e 5f       	subi	r18, 0xFE	; 254
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	b9 01       	movw	r22, r18
    1196:	41 e0       	ldi	r20, 0x01	; 1
    1198:	0e 94 b4 07 	call	0xf68	; 0xf68 <i2c_rtc_sram_write>
        }
      }
      read_byte(cRTCOffset, (uint8_t*)&rtc_offset);
    119c:	29 e2       	ldi	r18, 0x29	; 41
    119e:	35 e0       	ldi	r19, 0x05	; 5
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	b9 01       	movw	r22, r18
    11a4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <read_byte>
    11a8:	09 c0       	rjmp	.+18     	; 0x11bc <i2c_rtc_init+0x9c>
    }
    else
    {
      *errorcode_p = I2C_ERROR_SLAVE_NOT_FOUND;
    11aa:	eb 81       	ldd	r30, Y+3	; 0x03
    11ac:	fc 81       	ldd	r31, Y+4	; 0x04
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	80 83       	st	Z, r24
      *status_p = i2c_rtc_status;
    11b2:	80 91 2d 05 	lds	r24, 0x052D
    11b6:	ed 81       	ldd	r30, Y+5	; 0x05
    11b8:	fe 81       	ldd	r31, Y+6	; 0x06
    11ba:	80 83       	st	Z, r24
    }
  }

  return rtc;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11be:	26 96       	adiw	r28, 0x06	; 6
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <ldr_init>:
 * ldr_init: initialize adc for ldr
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ldr_init (void)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <ldr_init+0x6>
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t result;
 
  ADMUX = 0                       // ADC0
    11dc:	e7 e2       	ldi	r30, 0x27	; 39
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 e6       	ldi	r24, 0x60	; 96
    11e2:	80 83       	st	Z, r24
        | (1<<REFS0)              // use Avcc
        | (1<<ADLAR);             // left justify result in ADCH
 
  ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);      // prescaler to 32 / in our case sampling frequence of 250kHz
    11e4:	e6 e2       	ldi	r30, 0x26	; 38
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	85 e8       	ldi	r24, 0x85	; 133
    11ea:	80 83       	st	Z, r24
                                                     // and activate ADC

  ADCSRA |= (1<<ADSC);                      // ADC start 
    11ec:	a6 e2       	ldi	r26, 0x26	; 38
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e6 e2       	ldi	r30, 0x26	; 38
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 64       	ori	r24, 0x40	; 64
    11f8:	8c 93       	st	X, r24
  while ( ADCSRA & (1<<ADSC) ) {
    11fa:	e6 e2       	ldi	r30, 0x26	; 38
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	80 74       	andi	r24, 0x40	; 64
    1206:	90 70       	andi	r25, 0x00	; 0
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	b9 f7       	brne	.-18     	; 0x11fa <ldr_init+0x2a>
    ;     
  }

  result = ADCH;  // read out the value and init the summary array
    120c:	e5 e2       	ldi	r30, 0x25	; 37
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	8b 83       	std	Y+3, r24	; 0x03
  for (int i = 0; i < LDR_ARRAY_SIZE; array[i++] = result);
    1214:	1a 82       	std	Y+2, r1	; 0x02
    1216:	19 82       	std	Y+1, r1	; 0x01
    1218:	0c c0       	rjmp	.+24     	; 0x1232 <ldr_init+0x62>
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	2b 81       	ldd	r18, Y+3	; 0x03
    1220:	fc 01       	movw	r30, r24
    1222:	e0 5d       	subi	r30, 0xD0	; 208
    1224:	fa 4f       	sbci	r31, 0xFA	; 250
    1226:	20 83       	st	Z, r18
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	80 34       	cpi	r24, 0x40	; 64
    1238:	91 05       	cpc	r25, r1
    123a:	7c f3       	brlt	.-34     	; 0x121a <ldr_init+0x4a>

  curr_sum = result;              // also init the sum
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	90 93 71 05 	sts	0x0571, r25
    1246:	80 93 70 05 	sts	0x0570, r24
  curr_sum *= LDR_ARRAY_SIZE;     //
    124a:	80 91 70 05 	lds	r24, 0x0570
    124e:	90 91 71 05 	lds	r25, 0x0571
    1252:	00 24       	eor	r0, r0
    1254:	96 95       	lsr	r25
    1256:	87 95       	ror	r24
    1258:	07 94       	ror	r0
    125a:	96 95       	lsr	r25
    125c:	87 95       	ror	r24
    125e:	07 94       	ror	r0
    1260:	98 2f       	mov	r25, r24
    1262:	80 2d       	mov	r24, r0
    1264:	90 93 71 05 	sts	0x0571, r25
    1268:	80 93 70 05 	sts	0x0570, r24

  ADCSRA |= (1<<ADSC);     // start next measurement (will be read in 1Hz Interupt)
    126c:	a6 e2       	ldi	r26, 0x26	; 38
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e6 e2       	ldi	r30, 0x26	; 38
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 64       	ori	r24, 0x40	; 64
    1278:	8c 93       	st	X, r24

  return;
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <ldr_get_brightness>:
 * ldr_get_brightness: returns the average of brightness 
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
ldr_get_brightness (void)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
  return ( 255-(curr_sum / LDR_ARRAY_SIZE)); 
    128e:	80 91 70 05 	lds	r24, 0x0570
    1292:	90 91 71 05 	lds	r25, 0x0571
    1296:	00 24       	eor	r0, r0
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	00 1c       	adc	r0, r0
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	00 1c       	adc	r0, r0
    12a4:	89 2f       	mov	r24, r25
    12a6:	90 2d       	mov	r25, r0
    12a8:	80 95       	com	r24
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <ldr_read>:
 * recalculate our new summary and start a new conversion
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ldr_read (void)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
  static uint8_t   curr_index = 0;

  if ( (ADCSRA & (1<<ADSC)) == 0) {
    12ba:	e6 e2       	ldi	r30, 0x26	; 38
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	80 74       	andi	r24, 0x40	; 64
    12c6:	90 70       	andi	r25, 0x00	; 0
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	09 f0       	breq	.+2      	; 0x12ce <ldr_read+0x1e>
    12cc:	41 c0       	rjmp	.+130    	; 0x1350 <ldr_read+0xa0>
    uint8_t measurement = ADCH;
    12ce:	e5 e2       	ldi	r30, 0x25	; 37
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	89 83       	std	Y+1, r24	; 0x01

    curr_sum -= array[curr_index];
    12d6:	20 91 70 05 	lds	r18, 0x0570
    12da:	30 91 71 05 	lds	r19, 0x0571
    12de:	80 91 2f 05 	lds	r24, 0x052F
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	fc 01       	movw	r30, r24
    12e8:	e0 5d       	subi	r30, 0xD0	; 208
    12ea:	fa 4f       	sbci	r31, 0xFA	; 250
    12ec:	80 81       	ld	r24, Z
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	a9 01       	movw	r20, r18
    12f4:	48 1b       	sub	r20, r24
    12f6:	59 0b       	sbc	r21, r25
    12f8:	ca 01       	movw	r24, r20
    12fa:	90 93 71 05 	sts	0x0571, r25
    12fe:	80 93 70 05 	sts	0x0570, r24
    array[curr_index] = measurement;
    1302:	80 91 2f 05 	lds	r24, 0x052F
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	fc 01       	movw	r30, r24
    130c:	e0 5d       	subi	r30, 0xD0	; 208
    130e:	fa 4f       	sbci	r31, 0xFA	; 250
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	80 83       	st	Z, r24
    curr_sum += measurement;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	80 91 70 05 	lds	r24, 0x0570
    131e:	90 91 71 05 	lds	r25, 0x0571
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	90 93 71 05 	sts	0x0571, r25
    132a:	80 93 70 05 	sts	0x0570, r24
    curr_index++;
    132e:	80 91 2f 05 	lds	r24, 0x052F
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	80 93 2f 05 	sts	0x052F, r24

    curr_index %= LDR_ARRAY_SIZE;
    1338:	80 91 2f 05 	lds	r24, 0x052F
    133c:	8f 73       	andi	r24, 0x3F	; 63
    133e:	80 93 2f 05 	sts	0x052F, r24

    // start next ADC converting
    ADCSRA |= (1<<ADSC); 
    1342:	a6 e2       	ldi	r26, 0x26	; 38
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e6 e2       	ldi	r30, 0x26	; 38
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 64       	ori	r24, 0x40	; 64
    134e:	8c 93       	st	X, r24
  } 

  return;
}
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <InitPWM>:
#define sbi(sfr, bit)     (_SFR_BYTE(sfr) |= _BV(bit))
#endif

void
InitPWM()
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
  DDRD = 0xfc;
    1360:	e1 e3       	ldi	r30, 0x31	; 49
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8c ef       	ldi	r24, 0xFC	; 252
    1366:	80 83       	st	Z, r24
  TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(WGM10);
    1368:	ef e4       	ldi	r30, 0x4F	; 79
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	81 ea       	ldi	r24, 0xA1	; 161
    136e:	80 83       	st	Z, r24
  TCCR1B = _BV(CS10);
    1370:	ee e4       	ldi	r30, 0x4E	; 78
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 83       	st	Z, r24
  TCCR2 = _BV(CS20) | _BV(WGM20) | _BV(COM21);
    1378:	e5 e4       	ldi	r30, 0x45	; 69
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	81 e6       	ldi	r24, 0x61	; 97
    137e:	80 83       	st	Z, r24
  TCCR0 = _BV(WGM01) | _BV(WGM00) | _BV(COM01) | _BV(COM00) | _BV(CS00) | _BV(CS02);
    1380:	e3 e5       	ldi	r30, 0x53	; 83
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8d e7       	ldi	r24, 0x7D	; 125
    1386:	80 83       	st	Z, r24
  TIMSK &= ~0x3c;
    1388:	a9 e5       	ldi	r26, 0x59	; 89
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e9 e5       	ldi	r30, 0x59	; 89
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	83 7c       	andi	r24, 0xC3	; 195
    1394:	8c 93       	st	X, r24
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <LinearizeForEye>:

uint8_t
LinearizeForEye(uint8_t x)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <LinearizeForEye+0x6>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	89 83       	std	Y+1, r24	; 0x01
  if (x >= 0 && x < 5)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	85 30       	cpi	r24, 0x05	; 5
    13ac:	18 f4       	brcc	.+6      	; 0x13b4 <LinearizeForEye+0x18>
  {
    return (x);
    13ae:	49 81       	ldd	r20, Y+1	; 0x01
    13b0:	4a 83       	std	Y+2, r20	; 0x02
    13b2:	1e c0       	rjmp	.+60     	; 0x13f0 <LinearizeForEye+0x54>
  }
  else if (x >= 5 && x < 50)
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	85 30       	cpi	r24, 0x05	; 5
    13b8:	50 f0       	brcs	.+20     	; 0x13ce <LinearizeForEye+0x32>
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	82 33       	cpi	r24, 0x32	; 50
    13be:	38 f4       	brcc	.+14     	; 0x13ce <LinearizeForEye+0x32>
  {
    return (x / 5);
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	95 e0       	ldi	r25, 0x05	; 5
    13c4:	69 2f       	mov	r22, r25
    13c6:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <__udivmodqi4>
    13ca:	8a 83       	std	Y+2, r24	; 0x02
    13cc:	11 c0       	rjmp	.+34     	; 0x13f0 <LinearizeForEye+0x54>
  }
  return (((uint16_t) x) * x) >> 8;
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	ac 01       	movw	r20, r24
    13dc:	24 9f       	mul	r18, r20
    13de:	c0 01       	movw	r24, r0
    13e0:	25 9f       	mul	r18, r21
    13e2:	90 0d       	add	r25, r0
    13e4:	34 9f       	mul	r19, r20
    13e6:	90 0d       	add	r25, r0
    13e8:	11 24       	eor	r1, r1
    13ea:	89 2f       	mov	r24, r25
    13ec:	99 27       	eor	r25, r25
    13ee:	8a 83       	std	Y+2, r24	; 0x02
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <SetColor>:
char g_cPWMg = 0;
char g_cPWMb = 0;

void
SetColor(uint8_t bright, uint8_t uiR, uint8_t uiG, uint8_t uiB)
{
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <SetColor+0xa>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <SetColor+0xc>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	6a 83       	std	Y+2, r22	; 0x02
    1410:	4b 83       	std	Y+3, r20	; 0x03
    1412:	2c 83       	std	Y+4, r18	; 0x04
  g_cPWMr = ((((uint16_t) bright) * LinearizeForEye(uiR)) / 255);
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	08 2f       	mov	r16, r24
    1418:	10 e0       	ldi	r17, 0x00	; 0
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	0e 94 ce 09 	call	0x139c	; 0x139c <LinearizeForEye>
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9c 01       	movw	r18, r24
    1426:	02 9f       	mul	r16, r18
    1428:	c0 01       	movw	r24, r0
    142a:	03 9f       	mul	r16, r19
    142c:	90 0d       	add	r25, r0
    142e:	12 9f       	mul	r17, r18
    1430:	90 0d       	add	r25, r0
    1432:	11 24       	eor	r1, r1
    1434:	2f ef       	ldi	r18, 0xFF	; 255
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	b9 01       	movw	r22, r18
    143a:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <__udivmodhi4>
    143e:	cb 01       	movw	r24, r22
    1440:	80 93 72 05 	sts	0x0572, r24
  g_cPWMg = ((((uint16_t) bright) * LinearizeForEye(uiG)) / 255);
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	08 2f       	mov	r16, r24
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	0e 94 ce 09 	call	0x139c	; 0x139c <LinearizeForEye>
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9c 01       	movw	r18, r24
    1456:	02 9f       	mul	r16, r18
    1458:	c0 01       	movw	r24, r0
    145a:	03 9f       	mul	r16, r19
    145c:	90 0d       	add	r25, r0
    145e:	12 9f       	mul	r17, r18
    1460:	90 0d       	add	r25, r0
    1462:	11 24       	eor	r1, r1
    1464:	2f ef       	ldi	r18, 0xFF	; 255
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	b9 01       	movw	r22, r18
    146a:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <__udivmodhi4>
    146e:	cb 01       	movw	r24, r22
    1470:	80 93 73 05 	sts	0x0573, r24
  g_cPWMb = ((((uint16_t) bright) * LinearizeForEye(uiB)) / 255);
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	08 2f       	mov	r16, r24
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	0e 94 ce 09 	call	0x139c	; 0x139c <LinearizeForEye>
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9c 01       	movw	r18, r24
    1486:	02 9f       	mul	r16, r18
    1488:	c0 01       	movw	r24, r0
    148a:	03 9f       	mul	r16, r19
    148c:	90 0d       	add	r25, r0
    148e:	12 9f       	mul	r17, r18
    1490:	90 0d       	add	r25, r0
    1492:	11 24       	eor	r1, r1
    1494:	2f ef       	ldi	r18, 0xFF	; 255
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	b9 01       	movw	r22, r18
    149a:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <__udivmodhi4>
    149e:	cb 01       	movw	r24, r22
    14a0:	80 93 74 05 	sts	0x0574, r24
  OCR1BL = g_cPWMr;
    14a4:	e8 e4       	ldi	r30, 0x48	; 72
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 91 72 05 	lds	r24, 0x0572
    14ac:	80 83       	st	Z, r24
  OCR1AL = g_cPWMg;
    14ae:	ea e4       	ldi	r30, 0x4A	; 74
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 91 73 05 	lds	r24, 0x0573
    14b6:	80 83       	st	Z, r24
  OCR2 = g_cPWMb;
    14b8:	e3 e4       	ldi	r30, 0x43	; 67
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 91 74 05 	lds	r24, 0x0574
    14c0:	80 83       	st	Z, r24
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	08 95       	ret

000014d4 <uartPutc>:

void
uartPutc(char c)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	0f 92       	push	r0
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	89 83       	std	Y+1, r24	; 0x01
  while (!(UCSRA & _BV(UDRE)))
    14e0:	eb e2       	ldi	r30, 0x2B	; 43
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	80 72       	andi	r24, 0x20	; 32
    14ec:	90 70       	andi	r25, 0x00	; 0
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	b9 f3       	breq	.-18     	; 0x14e0 <uartPutc+0xc>
    ;
  UDR = c;
    14f2:	ec e2       	ldi	r30, 0x2C	; 44
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	80 83       	st	Z, r24
}
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <uartPuts>:

void
uartPuts(char *s)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <uartPuts+0x6>
    1508:	00 d0       	rcall	.+0      	; 0x150a <uartPuts+0x8>
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	9c 83       	std	Y+4, r25	; 0x04
    1510:	8b 83       	std	Y+3, r24	; 0x03
  int x = 0;
    1512:	1a 82       	std	Y+2, r1	; 0x02
    1514:	19 82       	std	Y+1, r1	; 0x01
    1516:	0f c0       	rjmp	.+30     	; 0x1536 <uartPuts+0x34>
  while (s[x])
  {
    uartPutc(s[x]);
    1518:	29 81       	ldd	r18, Y+1	; 0x01
    151a:	3a 81       	ldd	r19, Y+2	; 0x02
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	fc 01       	movw	r30, r24
    1522:	e2 0f       	add	r30, r18
    1524:	f3 1f       	adc	r31, r19
    1526:	80 81       	ld	r24, Z
    1528:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uartPutc>
    x++;
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01

void
uartPuts(char *s)
{
  int x = 0;
  while (s[x])
    1536:	29 81       	ldd	r18, Y+1	; 0x01
    1538:	3a 81       	ldd	r19, Y+2	; 0x02
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	fc 01       	movw	r30, r24
    1540:	e2 0f       	add	r30, r18
    1542:	f3 1f       	adc	r31, r19
    1544:	80 81       	ld	r24, Z
    1546:	88 23       	and	r24, r24
    1548:	39 f7       	brne	.-50     	; 0x1518 <uartPuts+0x16>
  {
    uartPutc(s[x]);
    x++;
  }
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <shift32_output>:

uint32_t lLEDs_LastValue = 0;

void
shift32_output(uint32_t value)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	28 97       	sbiw	r28, 0x08	; 8
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	6d 83       	std	Y+5, r22	; 0x05
    156e:	7e 83       	std	Y+6, r23	; 0x06
    1570:	8f 83       	std	Y+7, r24	; 0x07
    1572:	98 87       	std	Y+8, r25	; 0x08
  if (value == lLEDs_LastValue)
    1574:	20 91 75 05 	lds	r18, 0x0575
    1578:	30 91 76 05 	lds	r19, 0x0576
    157c:	40 91 77 05 	lds	r20, 0x0577
    1580:	50 91 78 05 	lds	r21, 0x0578
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	af 81       	ldd	r26, Y+7	; 0x07
    158a:	b8 85       	ldd	r27, Y+8	; 0x08
    158c:	82 17       	cp	r24, r18
    158e:	93 07       	cpc	r25, r19
    1590:	a4 07       	cpc	r26, r20
    1592:	b5 07       	cpc	r27, r21
    1594:	09 f4       	brne	.+2      	; 0x1598 <shift32_output+0x40>
    1596:	5a c0       	rjmp	.+180    	; 0x164c <shift32_output+0xf4>
  {
    return;
  }
  lLEDs_LastValue = value;
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	af 81       	ldd	r26, Y+7	; 0x07
    159e:	b8 85       	ldd	r27, Y+8	; 0x08
    15a0:	80 93 75 05 	sts	0x0575, r24
    15a4:	90 93 76 05 	sts	0x0576, r25
    15a8:	a0 93 77 05 	sts	0x0577, r26
    15ac:	b0 93 78 05 	sts	0x0578, r27
  uint8_t u0 = (uint8_t) (value);
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	8c 83       	std	Y+4, r24	; 0x04
  uint8_t u1 = (uint8_t) (value >> 8);
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	af 81       	ldd	r26, Y+7	; 0x07
    15ba:	b8 85       	ldd	r27, Y+8	; 0x08
    15bc:	89 2f       	mov	r24, r25
    15be:	9a 2f       	mov	r25, r26
    15c0:	ab 2f       	mov	r26, r27
    15c2:	bb 27       	eor	r27, r27
    15c4:	8b 83       	std	Y+3, r24	; 0x03
  uint8_t u2 = (uint8_t) (value >> 16);
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	af 81       	ldd	r26, Y+7	; 0x07
    15cc:	b8 85       	ldd	r27, Y+8	; 0x08
    15ce:	cd 01       	movw	r24, r26
    15d0:	aa 27       	eor	r26, r26
    15d2:	bb 27       	eor	r27, r27
    15d4:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t u3 = (uint8_t) (value >> 24);
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	af 81       	ldd	r26, Y+7	; 0x07
    15dc:	b8 85       	ldd	r27, Y+8	; 0x08
    15de:	8b 2f       	mov	r24, r27
    15e0:	99 27       	eor	r25, r25
    15e2:	aa 27       	eor	r26, r26
    15e4:	bb 27       	eor	r27, r27
    15e6:	89 83       	std	Y+1, r24	; 0x01

  SPDR = u3;
    15e8:	ef e2       	ldi	r30, 0x2F	; 47
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	80 83       	st	Z, r24
  while (!(SPSR & _BV(SPIF)))
    15f0:	ee e2       	ldi	r30, 0x2E	; 46
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	88 23       	and	r24, r24
    15f8:	dc f7       	brge	.-10     	; 0x15f0 <shift32_output+0x98>
    ;

  SPDR = u2;
    15fa:	ef e2       	ldi	r30, 0x2F	; 47
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	80 83       	st	Z, r24
  while (!(SPSR & _BV(SPIF)))
    1602:	ee e2       	ldi	r30, 0x2E	; 46
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	dc f7       	brge	.-10     	; 0x1602 <shift32_output+0xaa>
    ;

  SPDR = u1;
    160c:	ef e2       	ldi	r30, 0x2F	; 47
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 83       	st	Z, r24
  while (!(SPSR & _BV(SPIF)))
    1614:	ee e2       	ldi	r30, 0x2E	; 46
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	88 23       	and	r24, r24
    161c:	dc f7       	brge	.-10     	; 0x1614 <shift32_output+0xbc>
    ;

  SPDR = u0;
    161e:	ef e2       	ldi	r30, 0x2F	; 47
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	80 83       	st	Z, r24
  while (!(SPSR & _BV(SPIF)))
    1626:	ee e2       	ldi	r30, 0x2E	; 46
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	88 23       	and	r24, r24
    162e:	dc f7       	brge	.-10     	; 0x1626 <shift32_output+0xce>
    ;

  /* latch data */
  SHIFT_SR_SPI_PORT &= ~_BV(SHIFT_SR_SPI_RCLK);
    1630:	a8 e3       	ldi	r26, 0x38	; 56
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e8 e3       	ldi	r30, 0x38	; 56
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8f 7e       	andi	r24, 0xEF	; 239
    163c:	8c 93       	st	X, r24
  SHIFT_SR_SPI_PORT |= _BV(SHIFT_SR_SPI_RCLK);
    163e:	a8 e3       	ldi	r26, 0x38	; 56
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e8 e3       	ldi	r30, 0x38	; 56
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 61       	ori	r24, 0x10	; 16
    164a:	8c 93       	st	X, r24
}
    164c:	28 96       	adiw	r28, 0x08	; 8
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <shift_init>:

void
shift_init(void)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
  SHIFT_SR_SPI_DDR |= _BV(SHIFT_SR_SPI_MOSI) | _BV(SHIFT_SR_SPI_RCLK) | _BV(SHIFT_SR_SPI_SCK);
    1666:	a7 e3       	ldi	r26, 0x37	; 55
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e7 e3       	ldi	r30, 0x37	; 55
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	80 6b       	ori	r24, 0xB0	; 176
    1672:	8c 93       	st	X, r24
  SHIFT_SR_SPI_DDR &= ~_BV(SHIFT_SR_SPI_MISO); /* MISO muss eingang sein */
    1674:	a7 e3       	ldi	r26, 0x37	; 55
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e7 e3       	ldi	r30, 0x37	; 55
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	8f 7b       	andi	r24, 0xBF	; 191
    1680:	8c 93       	st	X, r24
  SHIFT_SR_SPI_PORT |= _BV(SHIFT_SR_SPI_RCLK) | _BV(SHIFT_SR_SPI_MISO);
    1682:	a8 e3       	ldi	r26, 0x38	; 56
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	80 65       	ori	r24, 0x50	; 80
    168e:	8c 93       	st	X, r24

  SPCR = _BV(SPE) | _BV(MSTR) | _BV(CPOL) | _BV(SPR0) | _BV(SPR1);
    1690:	ed e2       	ldi	r30, 0x2D	; 45
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8b e5       	ldi	r24, 0x5B	; 91
    1696:	80 83       	st	Z, r24

  SPSR |= _BV(SPI2X);
    1698:	ae e2       	ldi	r26, 0x2E	; 46
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ee e2       	ldi	r30, 0x2E	; 46
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	81 60       	ori	r24, 0x01	; 1
    16a4:	8c 93       	st	X, r24

  shift32_output(0xFFFFFFFF);
    16a6:	6f ef       	ldi	r22, 0xFF	; 255
    16a8:	7f ef       	ldi	r23, 0xFF	; 255
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	9f ef       	ldi	r25, 0xFF	; 255
    16ae:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
}
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <__vector_13>:
volatile uint8_t uart_str_complete = 0;
volatile uint8_t uart_str_count = 0;
volatile char uart_string[UART_MAXSTRLEN + 1] = "";

ISR(SIG_UART_RECV)
{
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
  unsigned char nextChar;

  nextChar = UDR;
    16d4:	ec e2       	ldi	r30, 0x2C	; 44
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	89 83       	std	Y+1, r24	; 0x01
  if (uart_str_complete == 0)
    16dc:	80 91 79 05 	lds	r24, 0x0579
    16e0:	88 23       	and	r24, r24
    16e2:	31 f5       	brne	.+76     	; 0x1730 <__vector_13+0x78>
  {
    if (nextChar != '\n' && nextChar != '\r' && uart_str_count < UART_MAXSTRLEN - 1)
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	8a 30       	cpi	r24, 0x0A	; 10
    16e8:	b1 f0       	breq	.+44     	; 0x1716 <__vector_13+0x5e>
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	8d 30       	cpi	r24, 0x0D	; 13
    16ee:	99 f0       	breq	.+38     	; 0x1716 <__vector_13+0x5e>
    16f0:	80 91 7a 05 	lds	r24, 0x057A
    16f4:	83 36       	cpi	r24, 0x63	; 99
    16f6:	78 f4       	brcc	.+30     	; 0x1716 <__vector_13+0x5e>
    {
      uart_string[uart_str_count] = nextChar;
    16f8:	80 91 7a 05 	lds	r24, 0x057A
    16fc:	88 2f       	mov	r24, r24
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	fc 01       	movw	r30, r24
    1702:	e7 54       	subi	r30, 0x47	; 71
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	80 83       	st	Z, r24
      uart_str_count++;
    170a:	80 91 7a 05 	lds	r24, 0x057A
    170e:	8f 5f       	subi	r24, 0xFF	; 255
    1710:	80 93 7a 05 	sts	0x057A, r24
    1714:	0d c0       	rjmp	.+26     	; 0x1730 <__vector_13+0x78>
    }
    else
    {
      uart_string[uart_str_count] = '\0';
    1716:	80 91 7a 05 	lds	r24, 0x057A
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	fc 01       	movw	r30, r24
    1720:	e7 54       	subi	r30, 0x47	; 71
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	10 82       	st	Z, r1
      uart_str_count = 0;
    1726:	10 92 7a 05 	sts	0x057A, r1
      uart_str_complete = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	80 93 79 05 	sts	0x0579, r24
    }
  }
}
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	ff 91       	pop	r31
    1738:	ef 91       	pop	r30
    173a:	9f 91       	pop	r25
    173c:	8f 91       	pop	r24
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <hex2dez_c>:

int
hex2dez_c(char h)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <hex2dez_c+0x6>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	8b 83       	std	Y+3, r24	; 0x03
  int res = -1;
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	9f ef       	ldi	r25, 0xFF	; 255
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
  if (h >= '0' && h <= '9')
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	80 33       	cpi	r24, 0x30	; 48
    1762:	50 f0       	brcs	.+20     	; 0x1778 <hex2dez_c+0x30>
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	8a 33       	cpi	r24, 0x3A	; 58
    1768:	38 f4       	brcc	.+14     	; 0x1778 <hex2dez_c+0x30>
  {
    res = (h - '0');
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	c0 97       	sbiw	r24, 0x30	; 48
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	1a c0       	rjmp	.+52     	; 0x17ac <hex2dez_c+0x64>
  }
  else if (h >= 'A' && h <= 'F')
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	81 34       	cpi	r24, 0x41	; 65
    177c:	50 f0       	brcs	.+20     	; 0x1792 <hex2dez_c+0x4a>
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	87 34       	cpi	r24, 0x47	; 71
    1782:	38 f4       	brcc	.+14     	; 0x1792 <hex2dez_c+0x4a>
  {
    res = (h - 'A' + 10);
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	c7 97       	sbiw	r24, 0x37	; 55
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	0d c0       	rjmp	.+26     	; 0x17ac <hex2dez_c+0x64>
  }
  else if (h >= 'a' && h <= 'f')
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	81 36       	cpi	r24, 0x61	; 97
    1796:	50 f0       	brcs	.+20     	; 0x17ac <hex2dez_c+0x64>
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	87 36       	cpi	r24, 0x67	; 103
    179c:	38 f4       	brcc	.+14     	; 0x17ac <hex2dez_c+0x64>
  {
    res = (h - 'a' + 10);
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	87 55       	subi	r24, 0x57	; 87
    17a6:	90 40       	sbci	r25, 0x00	; 0
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	89 83       	std	Y+1, r24	; 0x01
  }
  return res;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <hex2dez>:

int
hex2dez(char *h)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	28 97       	sbiw	r28, 0x08	; 8
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
  int res1 = hex2dez_c(h[0]);
    17d4:	ed 81       	ldd	r30, Y+5	; 0x05
    17d6:	fe 81       	ldd	r31, Y+6	; 0x06
    17d8:	80 81       	ld	r24, Z
    17da:	0e 94 a4 0b 	call	0x1748	; 0x1748 <hex2dez_c>
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
  int res2 = hex2dez_c(h[1]);
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	fc 01       	movw	r30, r24
    17e8:	31 96       	adiw	r30, 0x01	; 1
    17ea:	80 81       	ld	r24, Z
    17ec:	0e 94 a4 0b 	call	0x1748	; 0x1748 <hex2dez_c>
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
  if (res1 < 0 || res2 < 0)
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	99 23       	and	r25, r25
    17fa:	24 f0       	brlt	.+8      	; 0x1804 <hex2dez+0x48>
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	99 23       	and	r25, r25
    1802:	2c f4       	brge	.+10     	; 0x180e <hex2dez+0x52>
    return -1;
    1804:	4f ef       	ldi	r20, 0xFF	; 255
    1806:	5f ef       	ldi	r21, 0xFF	; 255
    1808:	58 87       	std	Y+8, r21	; 0x08
    180a:	4f 83       	std	Y+7, r20	; 0x07
    180c:	10 c0       	rjmp	.+32     	; 0x182e <hex2dez+0x72>
  return (res1 << 4) + res2;
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	9c 01       	movw	r18, r24
    1814:	22 95       	swap	r18
    1816:	32 95       	swap	r19
    1818:	30 7f       	andi	r19, 0xF0	; 240
    181a:	32 27       	eor	r19, r18
    181c:	20 7f       	andi	r18, 0xF0	; 240
    181e:	32 27       	eor	r19, r18
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	a9 01       	movw	r20, r18
    1826:	48 0f       	add	r20, r24
    1828:	59 1f       	adc	r21, r25
    182a:	58 87       	std	Y+8, r21	; 0x08
    182c:	4f 83       	std	Y+7, r20	; 0x07
    182e:	8f 81       	ldd	r24, Y+7	; 0x07
    1830:	98 85       	ldd	r25, Y+8	; 0x08
}
    1832:	28 96       	adiw	r28, 0x08	; 8
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <TimeInfo>:
      0b01000000000000000000000000000000 //
    };

void
TimeInfo(DATETIME time, int bSun, int bInitformat)
{
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	c5 59       	subi	r28, 0x95	; 149
    1862:	d0 40       	sbci	r29, 0x00	; 0
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	fe 01       	movw	r30, r28
    1870:	eb 59       	subi	r30, 0x9B	; 155
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	c0 82       	st	Z, r12
    1876:	d1 82       	std	Z+1, r13	; 0x01
    1878:	e2 82       	std	Z+2, r14	; 0x02
    187a:	f3 82       	std	Z+3, r15	; 0x03
    187c:	04 83       	std	Z+4, r16	; 0x04
    187e:	15 83       	std	Z+5, r17	; 0x05
    1880:	26 83       	std	Z+6, r18	; 0x06
    1882:	37 83       	std	Z+7, r19	; 0x07
    1884:	40 87       	std	Z+8, r20	; 0x08
    1886:	51 87       	std	Z+9, r21	; 0x09
    1888:	62 87       	std	Z+10, r22	; 0x0a
    188a:	73 87       	std	Z+11, r23	; 0x0b
    188c:	84 87       	std	Z+12, r24	; 0x0c
    188e:	fe 01       	movw	r30, r28
    1890:	ee 58       	subi	r30, 0x8E	; 142
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	b1 82       	std	Z+1, r11	; 0x01
    1896:	a0 82       	st	Z, r10
    1898:	fe 01       	movw	r30, r28
    189a:	ec 58       	subi	r30, 0x8C	; 140
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	91 82       	std	Z+1, r9	; 0x01
    18a0:	80 82       	st	Z, r8
  char s[100];
  if (!bInitformat)
    18a2:	fe 01       	movw	r30, r28
    18a4:	ec 58       	subi	r30, 0x8C	; 140
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <TimeInfo+0x6e>
    18b0:	27 c1       	rjmp	.+590    	; 0x1b00 <TimeInfo+0x2bc>
  {
    sprintf(s, "NOW:  %02d:%02d:%02d %s %02d.%02d.%4d UTC%+d %s\r\n", time.hh, time.mm, time.ss, "x", time.DD, time.MM, time.YY + 2000, rtc_offset, time.dst != 0 ? "DST" : "");
    18b2:	fe 01       	movw	r30, r28
    18b4:	eb 59       	subi	r30, 0x9B	; 155
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	83 81       	ldd	r24, Z+3	; 0x03
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	cc 56       	subi	r28, 0x6C	; 108
    18c0:	df 4f       	sbci	r29, 0xFF	; 255
    18c2:	39 83       	std	Y+1, r19	; 0x01
    18c4:	28 83       	st	Y, r18
    18c6:	c4 59       	subi	r28, 0x94	; 148
    18c8:	d0 40       	sbci	r29, 0x00	; 0
    18ca:	fe 01       	movw	r30, r28
    18cc:	eb 59       	subi	r30, 0x9B	; 155
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	84 81       	ldd	r24, Z+4	; 0x04
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	ce 56       	subi	r28, 0x6E	; 110
    18d8:	df 4f       	sbci	r29, 0xFF	; 255
    18da:	39 83       	std	Y+1, r19	; 0x01
    18dc:	28 83       	st	Y, r18
    18de:	c2 59       	subi	r28, 0x92	; 146
    18e0:	d0 40       	sbci	r29, 0x00	; 0
    18e2:	fe 01       	movw	r30, r28
    18e4:	eb 59       	subi	r30, 0x9B	; 155
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	85 81       	ldd	r24, Z+5	; 0x05
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	c0 57       	subi	r28, 0x70	; 112
    18f0:	df 4f       	sbci	r29, 0xFF	; 255
    18f2:	39 83       	std	Y+1, r19	; 0x01
    18f4:	28 83       	st	Y, r18
    18f6:	c0 59       	subi	r28, 0x90	; 144
    18f8:	d0 40       	sbci	r29, 0x00	; 0
    18fa:	fe 01       	movw	r30, r28
    18fc:	eb 59       	subi	r30, 0x9B	; 155
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	c2 57       	subi	r28, 0x72	; 114
    1908:	df 4f       	sbci	r29, 0xFF	; 255
    190a:	39 83       	std	Y+1, r19	; 0x01
    190c:	28 83       	st	Y, r18
    190e:	ce 58       	subi	r28, 0x8E	; 142
    1910:	d0 40       	sbci	r29, 0x00	; 0
    1912:	fe 01       	movw	r30, r28
    1914:	eb 59       	subi	r30, 0x9B	; 155
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	81 81       	ldd	r24, Z+1	; 0x01
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	c4 57       	subi	r28, 0x74	; 116
    1920:	df 4f       	sbci	r29, 0xFF	; 255
    1922:	39 83       	std	Y+1, r19	; 0x01
    1924:	28 83       	st	Y, r18
    1926:	cc 58       	subi	r28, 0x8C	; 140
    1928:	d0 40       	sbci	r29, 0x00	; 0
    192a:	fe 01       	movw	r30, r28
    192c:	eb 59       	subi	r30, 0x9B	; 155
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 01       	movw	r18, r24
    1938:	20 53       	subi	r18, 0x30	; 48
    193a:	38 4f       	sbci	r19, 0xF8	; 248
    193c:	c6 57       	subi	r28, 0x76	; 118
    193e:	df 4f       	sbci	r29, 0xFF	; 255
    1940:	39 83       	std	Y+1, r19	; 0x01
    1942:	28 83       	st	Y, r18
    1944:	ca 58       	subi	r28, 0x8A	; 138
    1946:	d0 40       	sbci	r29, 0x00	; 0
    1948:	80 91 29 05 	lds	r24, 0x0529
    194c:	28 2f       	mov	r18, r24
    194e:	33 27       	eor	r19, r19
    1950:	27 fd       	sbrc	r18, 7
    1952:	30 95       	com	r19
    1954:	c8 57       	subi	r28, 0x78	; 120
    1956:	df 4f       	sbci	r29, 0xFF	; 255
    1958:	39 83       	std	Y+1, r19	; 0x01
    195a:	28 83       	st	Y, r18
    195c:	c8 58       	subi	r28, 0x88	; 136
    195e:	d0 40       	sbci	r29, 0x00	; 0
    1960:	fe 01       	movw	r30, r28
    1962:	eb 59       	subi	r30, 0x9B	; 155
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	87 81       	ldd	r24, Z+7	; 0x07
    1968:	88 23       	and	r24, r24
    196a:	49 f0       	breq	.+18     	; 0x197e <TimeInfo+0x13a>
    196c:	8e e1       	ldi	r24, 0x1E	; 30
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	ca 57       	subi	r28, 0x7A	; 122
    1972:	df 4f       	sbci	r29, 0xFF	; 255
    1974:	99 83       	std	Y+1, r25	; 0x01
    1976:	88 83       	st	Y, r24
    1978:	c6 58       	subi	r28, 0x86	; 134
    197a:	d0 40       	sbci	r29, 0x00	; 0
    197c:	08 c0       	rjmp	.+16     	; 0x198e <TimeInfo+0x14a>
    197e:	22 e2       	ldi	r18, 0x22	; 34
    1980:	31 e0       	ldi	r19, 0x01	; 1
    1982:	ca 57       	subi	r28, 0x7A	; 122
    1984:	df 4f       	sbci	r29, 0xFF	; 255
    1986:	39 83       	std	Y+1, r19	; 0x01
    1988:	28 83       	st	Y, r18
    198a:	c6 58       	subi	r28, 0x86	; 134
    198c:	d0 40       	sbci	r29, 0x00	; 0
    198e:	8d b7       	in	r24, 0x3d	; 61
    1990:	9e b7       	in	r25, 0x3e	; 62
    1992:	46 97       	sbiw	r24, 0x16	; 22
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	9e bf       	out	0x3e, r25	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	8d bf       	out	0x3d, r24	; 61
    199e:	ed b7       	in	r30, 0x3d	; 61
    19a0:	fe b7       	in	r31, 0x3e	; 62
    19a2:	31 96       	adiw	r30, 0x01	; 1
    19a4:	ce 01       	movw	r24, r28
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	91 83       	std	Z+1, r25	; 0x01
    19aa:	80 83       	st	Z, r24
    19ac:	83 e2       	ldi	r24, 0x23	; 35
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	93 83       	std	Z+3, r25	; 0x03
    19b2:	82 83       	std	Z+2, r24	; 0x02
    19b4:	cc 56       	subi	r28, 0x6C	; 108
    19b6:	df 4f       	sbci	r29, 0xFF	; 255
    19b8:	28 81       	ld	r18, Y
    19ba:	39 81       	ldd	r19, Y+1	; 0x01
    19bc:	c4 59       	subi	r28, 0x94	; 148
    19be:	d0 40       	sbci	r29, 0x00	; 0
    19c0:	35 83       	std	Z+5, r19	; 0x05
    19c2:	24 83       	std	Z+4, r18	; 0x04
    19c4:	ce 56       	subi	r28, 0x6E	; 110
    19c6:	df 4f       	sbci	r29, 0xFF	; 255
    19c8:	88 81       	ld	r24, Y
    19ca:	99 81       	ldd	r25, Y+1	; 0x01
    19cc:	c2 59       	subi	r28, 0x92	; 146
    19ce:	d0 40       	sbci	r29, 0x00	; 0
    19d0:	97 83       	std	Z+7, r25	; 0x07
    19d2:	86 83       	std	Z+6, r24	; 0x06
    19d4:	c0 57       	subi	r28, 0x70	; 112
    19d6:	df 4f       	sbci	r29, 0xFF	; 255
    19d8:	28 81       	ld	r18, Y
    19da:	39 81       	ldd	r19, Y+1	; 0x01
    19dc:	c0 59       	subi	r28, 0x90	; 144
    19de:	d0 40       	sbci	r29, 0x00	; 0
    19e0:	31 87       	std	Z+9, r19	; 0x09
    19e2:	20 87       	std	Z+8, r18	; 0x08
    19e4:	85 e5       	ldi	r24, 0x55	; 85
    19e6:	91 e0       	ldi	r25, 0x01	; 1
    19e8:	93 87       	std	Z+11, r25	; 0x0b
    19ea:	82 87       	std	Z+10, r24	; 0x0a
    19ec:	c2 57       	subi	r28, 0x72	; 114
    19ee:	df 4f       	sbci	r29, 0xFF	; 255
    19f0:	88 81       	ld	r24, Y
    19f2:	99 81       	ldd	r25, Y+1	; 0x01
    19f4:	ce 58       	subi	r28, 0x8E	; 142
    19f6:	d0 40       	sbci	r29, 0x00	; 0
    19f8:	95 87       	std	Z+13, r25	; 0x0d
    19fa:	84 87       	std	Z+12, r24	; 0x0c
    19fc:	c4 57       	subi	r28, 0x74	; 116
    19fe:	df 4f       	sbci	r29, 0xFF	; 255
    1a00:	28 81       	ld	r18, Y
    1a02:	39 81       	ldd	r19, Y+1	; 0x01
    1a04:	cc 58       	subi	r28, 0x8C	; 140
    1a06:	d0 40       	sbci	r29, 0x00	; 0
    1a08:	37 87       	std	Z+15, r19	; 0x0f
    1a0a:	26 87       	std	Z+14, r18	; 0x0e
    1a0c:	c6 57       	subi	r28, 0x76	; 118
    1a0e:	df 4f       	sbci	r29, 0xFF	; 255
    1a10:	88 81       	ld	r24, Y
    1a12:	99 81       	ldd	r25, Y+1	; 0x01
    1a14:	ca 58       	subi	r28, 0x8A	; 138
    1a16:	d0 40       	sbci	r29, 0x00	; 0
    1a18:	91 8b       	std	Z+17, r25	; 0x11
    1a1a:	80 8b       	std	Z+16, r24	; 0x10
    1a1c:	c8 57       	subi	r28, 0x78	; 120
    1a1e:	df 4f       	sbci	r29, 0xFF	; 255
    1a20:	28 81       	ld	r18, Y
    1a22:	39 81       	ldd	r19, Y+1	; 0x01
    1a24:	c8 58       	subi	r28, 0x88	; 136
    1a26:	d0 40       	sbci	r29, 0x00	; 0
    1a28:	33 8b       	std	Z+19, r19	; 0x13
    1a2a:	22 8b       	std	Z+18, r18	; 0x12
    1a2c:	ca 57       	subi	r28, 0x7A	; 122
    1a2e:	df 4f       	sbci	r29, 0xFF	; 255
    1a30:	88 81       	ld	r24, Y
    1a32:	99 81       	ldd	r25, Y+1	; 0x01
    1a34:	c6 58       	subi	r28, 0x86	; 134
    1a36:	d0 40       	sbci	r29, 0x00	; 0
    1a38:	95 8b       	std	Z+21, r25	; 0x15
    1a3a:	84 8b       	std	Z+20, r24	; 0x14
    1a3c:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    1a40:	2d b7       	in	r18, 0x3d	; 61
    1a42:	3e b7       	in	r19, 0x3e	; 62
    1a44:	2a 5e       	subi	r18, 0xEA	; 234
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	3e bf       	out	0x3e, r19	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	2d bf       	out	0x3d, r18	; 61
    uartPuts(s);
    1a52:	ce 01       	movw	r24, r28
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    if (bSun)
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ee 58       	subi	r30, 0x8E	; 142
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <TimeInfo+0x226>
    1a68:	0d c1       	rjmp	.+538    	; 0x1c84 <TimeInfo+0x440>
    {
      sprintf(s, "Sun: %%%d %02d:%02d - %02d:%02d\r\n", time.sunrise, time.sunrisehh, time.sunrisemm, time.sunfallhh, time.sunfallmm);
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	eb 59       	subi	r30, 0x9B	; 155
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 85       	ldd	r24, Z+8	; 0x08
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	fe 01       	movw	r30, r28
    1a78:	eb 59       	subi	r30, 0x9B	; 155
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	81 85       	ldd	r24, Z+9	; 0x09
    1a7e:	48 2f       	mov	r20, r24
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	fe 01       	movw	r30, r28
    1a84:	eb 59       	subi	r30, 0x9B	; 155
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	82 85       	ldd	r24, Z+10	; 0x0a
    1a8a:	68 2f       	mov	r22, r24
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	fe 01       	movw	r30, r28
    1a90:	eb 59       	subi	r30, 0x9B	; 155
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	83 85       	ldd	r24, Z+11	; 0x0b
    1a96:	a8 2f       	mov	r26, r24
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	eb 59       	subi	r30, 0x9B	; 155
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	84 85       	ldd	r24, Z+12	; 0x0c
    1aa2:	08 2f       	mov	r16, r24
    1aa4:	10 e0       	ldi	r17, 0x00	; 0
    1aa6:	8d b7       	in	r24, 0x3d	; 61
    1aa8:	9e b7       	in	r25, 0x3e	; 62
    1aaa:	0e 97       	sbiw	r24, 0x0e	; 14
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	9e bf       	out	0x3e, r25	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	8d bf       	out	0x3d, r24	; 61
    1ab6:	ed b7       	in	r30, 0x3d	; 61
    1ab8:	fe b7       	in	r31, 0x3e	; 62
    1aba:	31 96       	adiw	r30, 0x01	; 1
    1abc:	ce 01       	movw	r24, r28
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	87 e5       	ldi	r24, 0x57	; 87
    1ac6:	91 e0       	ldi	r25, 0x01	; 1
    1ac8:	93 83       	std	Z+3, r25	; 0x03
    1aca:	82 83       	std	Z+2, r24	; 0x02
    1acc:	35 83       	std	Z+5, r19	; 0x05
    1ace:	24 83       	std	Z+4, r18	; 0x04
    1ad0:	57 83       	std	Z+7, r21	; 0x07
    1ad2:	46 83       	std	Z+6, r20	; 0x06
    1ad4:	71 87       	std	Z+9, r23	; 0x09
    1ad6:	60 87       	std	Z+8, r22	; 0x08
    1ad8:	b3 87       	std	Z+11, r27	; 0x0b
    1ada:	a2 87       	std	Z+10, r26	; 0x0a
    1adc:	15 87       	std	Z+13, r17	; 0x0d
    1ade:	04 87       	std	Z+12, r16	; 0x0c
    1ae0:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    1ae4:	2d b7       	in	r18, 0x3d	; 61
    1ae6:	3e b7       	in	r19, 0x3e	; 62
    1ae8:	22 5f       	subi	r18, 0xF2	; 242
    1aea:	3f 4f       	sbci	r19, 0xFF	; 255
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	3e bf       	out	0x3e, r19	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	2d bf       	out	0x3d, r18	; 61
      uartPuts(s);
    1af6:	ce 01       	movw	r24, r28
    1af8:	01 96       	adiw	r24, 0x01	; 1
    1afa:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    1afe:	c2 c0       	rjmp	.+388    	; 0x1c84 <TimeInfo+0x440>
    }
  }
  else
  {
    sprintf(s, " %02d:%02d:%02d %s %02d.%02d.%4d UTC%+d %s", time.hh, time.mm, time.ss, "x", time.DD, time.MM, time.YY + 2000, rtc_offset, time.dst != 0 ? "DST" : "");
    1b00:	fe 01       	movw	r30, r28
    1b02:	eb 59       	subi	r30, 0x9B	; 155
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	83 81       	ldd	r24, Z+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	cc 57       	subi	r28, 0x7C	; 124
    1b0e:	df 4f       	sbci	r29, 0xFF	; 255
    1b10:	39 83       	std	Y+1, r19	; 0x01
    1b12:	28 83       	st	Y, r18
    1b14:	c4 58       	subi	r28, 0x84	; 132
    1b16:	d0 40       	sbci	r29, 0x00	; 0
    1b18:	fe 01       	movw	r30, r28
    1b1a:	eb 59       	subi	r30, 0x9B	; 155
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	84 81       	ldd	r24, Z+4	; 0x04
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	ce 57       	subi	r28, 0x7E	; 126
    1b26:	df 4f       	sbci	r29, 0xFF	; 255
    1b28:	39 83       	std	Y+1, r19	; 0x01
    1b2a:	28 83       	st	Y, r18
    1b2c:	c2 58       	subi	r28, 0x82	; 130
    1b2e:	d0 40       	sbci	r29, 0x00	; 0
    1b30:	fe 01       	movw	r30, r28
    1b32:	eb 59       	subi	r30, 0x9B	; 155
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	85 81       	ldd	r24, Z+5	; 0x05
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	c0 58       	subi	r28, 0x80	; 128
    1b3e:	df 4f       	sbci	r29, 0xFF	; 255
    1b40:	39 83       	std	Y+1, r19	; 0x01
    1b42:	28 83       	st	Y, r18
    1b44:	c0 58       	subi	r28, 0x80	; 128
    1b46:	d0 40       	sbci	r29, 0x00	; 0
    1b48:	fe 01       	movw	r30, r28
    1b4a:	eb 59       	subi	r30, 0x9B	; 155
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	c2 58       	subi	r28, 0x82	; 130
    1b56:	df 4f       	sbci	r29, 0xFF	; 255
    1b58:	39 83       	std	Y+1, r19	; 0x01
    1b5a:	28 83       	st	Y, r18
    1b5c:	ce 57       	subi	r28, 0x7E	; 126
    1b5e:	d0 40       	sbci	r29, 0x00	; 0
    1b60:	fe 01       	movw	r30, r28
    1b62:	eb 59       	subi	r30, 0x9B	; 155
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	81 81       	ldd	r24, Z+1	; 0x01
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	ee 96       	adiw	r28, 0x3e	; 62
    1b6e:	3f af       	std	Y+63, r19	; 0x3f
    1b70:	2e af       	std	Y+62, r18	; 0x3e
    1b72:	ee 97       	sbiw	r28, 0x3e	; 62
    1b74:	fe 01       	movw	r30, r28
    1b76:	eb 59       	subi	r30, 0x9B	; 155
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9c 01       	movw	r18, r24
    1b82:	20 53       	subi	r18, 0x30	; 48
    1b84:	38 4f       	sbci	r19, 0xF8	; 248
    1b86:	ec 96       	adiw	r28, 0x3c	; 60
    1b88:	3f af       	std	Y+63, r19	; 0x3f
    1b8a:	2e af       	std	Y+62, r18	; 0x3e
    1b8c:	ec 97       	sbiw	r28, 0x3c	; 60
    1b8e:	80 91 29 05 	lds	r24, 0x0529
    1b92:	28 2f       	mov	r18, r24
    1b94:	33 27       	eor	r19, r19
    1b96:	27 fd       	sbrc	r18, 7
    1b98:	30 95       	com	r19
    1b9a:	ea 96       	adiw	r28, 0x3a	; 58
    1b9c:	3f af       	std	Y+63, r19	; 0x3f
    1b9e:	2e af       	std	Y+62, r18	; 0x3e
    1ba0:	ea 97       	sbiw	r28, 0x3a	; 58
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	eb 59       	subi	r30, 0x9B	; 155
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	87 81       	ldd	r24, Z+7	; 0x07
    1baa:	88 23       	and	r24, r24
    1bac:	39 f0       	breq	.+14     	; 0x1bbc <TimeInfo+0x378>
    1bae:	8e e1       	ldi	r24, 0x1E	; 30
    1bb0:	91 e0       	ldi	r25, 0x01	; 1
    1bb2:	e8 96       	adiw	r28, 0x38	; 56
    1bb4:	9f af       	std	Y+63, r25	; 0x3f
    1bb6:	8e af       	std	Y+62, r24	; 0x3e
    1bb8:	e8 97       	sbiw	r28, 0x38	; 56
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <TimeInfo+0x384>
    1bbc:	22 e2       	ldi	r18, 0x22	; 34
    1bbe:	31 e0       	ldi	r19, 0x01	; 1
    1bc0:	e8 96       	adiw	r28, 0x38	; 56
    1bc2:	3f af       	std	Y+63, r19	; 0x3f
    1bc4:	2e af       	std	Y+62, r18	; 0x3e
    1bc6:	e8 97       	sbiw	r28, 0x38	; 56
    1bc8:	8d b7       	in	r24, 0x3d	; 61
    1bca:	9e b7       	in	r25, 0x3e	; 62
    1bcc:	46 97       	sbiw	r24, 0x16	; 22
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	9e bf       	out	0x3e, r25	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	8d bf       	out	0x3d, r24	; 61
    1bd8:	ed b7       	in	r30, 0x3d	; 61
    1bda:	fe b7       	in	r31, 0x3e	; 62
    1bdc:	31 96       	adiw	r30, 0x01	; 1
    1bde:	ce 01       	movw	r24, r28
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	89 e7       	ldi	r24, 0x79	; 121
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	93 83       	std	Z+3, r25	; 0x03
    1bec:	82 83       	std	Z+2, r24	; 0x02
    1bee:	cc 57       	subi	r28, 0x7C	; 124
    1bf0:	df 4f       	sbci	r29, 0xFF	; 255
    1bf2:	28 81       	ld	r18, Y
    1bf4:	39 81       	ldd	r19, Y+1	; 0x01
    1bf6:	c4 58       	subi	r28, 0x84	; 132
    1bf8:	d0 40       	sbci	r29, 0x00	; 0
    1bfa:	35 83       	std	Z+5, r19	; 0x05
    1bfc:	24 83       	std	Z+4, r18	; 0x04
    1bfe:	ce 57       	subi	r28, 0x7E	; 126
    1c00:	df 4f       	sbci	r29, 0xFF	; 255
    1c02:	88 81       	ld	r24, Y
    1c04:	99 81       	ldd	r25, Y+1	; 0x01
    1c06:	c2 58       	subi	r28, 0x82	; 130
    1c08:	d0 40       	sbci	r29, 0x00	; 0
    1c0a:	97 83       	std	Z+7, r25	; 0x07
    1c0c:	86 83       	std	Z+6, r24	; 0x06
    1c0e:	c0 58       	subi	r28, 0x80	; 128
    1c10:	df 4f       	sbci	r29, 0xFF	; 255
    1c12:	28 81       	ld	r18, Y
    1c14:	39 81       	ldd	r19, Y+1	; 0x01
    1c16:	c0 58       	subi	r28, 0x80	; 128
    1c18:	d0 40       	sbci	r29, 0x00	; 0
    1c1a:	31 87       	std	Z+9, r19	; 0x09
    1c1c:	20 87       	std	Z+8, r18	; 0x08
    1c1e:	85 e5       	ldi	r24, 0x55	; 85
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	93 87       	std	Z+11, r25	; 0x0b
    1c24:	82 87       	std	Z+10, r24	; 0x0a
    1c26:	c2 58       	subi	r28, 0x82	; 130
    1c28:	df 4f       	sbci	r29, 0xFF	; 255
    1c2a:	88 81       	ld	r24, Y
    1c2c:	99 81       	ldd	r25, Y+1	; 0x01
    1c2e:	ce 57       	subi	r28, 0x7E	; 126
    1c30:	d0 40       	sbci	r29, 0x00	; 0
    1c32:	95 87       	std	Z+13, r25	; 0x0d
    1c34:	84 87       	std	Z+12, r24	; 0x0c
    1c36:	ee 96       	adiw	r28, 0x3e	; 62
    1c38:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c3a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c3c:	ee 97       	sbiw	r28, 0x3e	; 62
    1c3e:	37 87       	std	Z+15, r19	; 0x0f
    1c40:	26 87       	std	Z+14, r18	; 0x0e
    1c42:	ec 96       	adiw	r28, 0x3c	; 60
    1c44:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c46:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c48:	ec 97       	sbiw	r28, 0x3c	; 60
    1c4a:	91 8b       	std	Z+17, r25	; 0x11
    1c4c:	80 8b       	std	Z+16, r24	; 0x10
    1c4e:	ea 96       	adiw	r28, 0x3a	; 58
    1c50:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c52:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c54:	ea 97       	sbiw	r28, 0x3a	; 58
    1c56:	33 8b       	std	Z+19, r19	; 0x13
    1c58:	22 8b       	std	Z+18, r18	; 0x12
    1c5a:	e8 96       	adiw	r28, 0x38	; 56
    1c5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c60:	e8 97       	sbiw	r28, 0x38	; 56
    1c62:	95 8b       	std	Z+21, r25	; 0x15
    1c64:	84 8b       	std	Z+20, r24	; 0x14
    1c66:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    1c6a:	2d b7       	in	r18, 0x3d	; 61
    1c6c:	3e b7       	in	r19, 0x3e	; 62
    1c6e:	2a 5e       	subi	r18, 0xEA	; 234
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	3e bf       	out	0x3e, r19	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	2d bf       	out	0x3d, r18	; 61
    uartPuts(s);
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  }
}
    1c84:	cb 56       	subi	r28, 0x6B	; 107
    1c86:	df 4f       	sbci	r29, 0xFF	; 255
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	bf 90       	pop	r11
    1ca4:	af 90       	pop	r10
    1ca6:	9f 90       	pop	r9
    1ca8:	8f 90       	pop	r8
    1caa:	08 95       	ret

00001cac <main>:

int
main()
{
    1cac:	8f 92       	push	r8
    1cae:	9f 92       	push	r9
    1cb0:	af 92       	push	r10
    1cb2:	bf 92       	push	r11
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	c9 54       	subi	r28, 0x49	; 73
    1cca:	d4 40       	sbci	r29, 0x04	; 4
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
  wdt_reset();
    1cd6:	a8 95       	wdr
  cli();
    1cd8:	f8 94       	cli
  UCSRB |= _BV(TXEN) | _BV(RXEN) | _BV(RXCIE);
    1cda:	aa e2       	ldi	r26, 0x2A	; 42
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	ea e2       	ldi	r30, 0x2A	; 42
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	88 69       	ori	r24, 0x98	; 152
    1ce6:	8c 93       	st	X, r24
  UCSRC |= _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);
    1ce8:	a0 e4       	ldi	r26, 0x40	; 64
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e0 e4       	ldi	r30, 0x40	; 64
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	86 68       	ori	r24, 0x86	; 134
    1cf4:	8c 93       	st	X, r24

  PORTC &= ~(1 << PC7);
    1cf6:	a5 e3       	ldi	r26, 0x35	; 53
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e5 e3       	ldi	r30, 0x35	; 53
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	8f 77       	andi	r24, 0x7F	; 127
    1d02:	8c 93       	st	X, r24
  DDRC |= (1 << PC7);
    1d04:	a4 e3       	ldi	r26, 0x34	; 52
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e4 e3       	ldi	r30, 0x34	; 52
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 68       	ori	r24, 0x80	; 128
    1d10:	8c 93       	st	X, r24

  UBRRH = 0x00;
    1d12:	e0 e4       	ldi	r30, 0x40	; 64
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	10 82       	st	Z, r1
  UBRRL = 95;
    1d18:	e9 e2       	ldi	r30, 0x29	; 41
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	8f e5       	ldi	r24, 0x5F	; 95
    1d1e:	80 83       	st	Z, r24

  uartPuts("at\r");
    1d20:	86 ed       	ldi	r24, 0xD6	; 214
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e7 59       	subi	r30, 0x97	; 151
    1d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a8 ec       	ldi	r26, 0xC8	; 200
    1d34:	b2 e4       	ldi	r27, 0x42	; 66
    1d36:	80 83       	st	Z, r24
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	a2 83       	std	Z+2, r26	; 0x02
    1d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	8e 01       	movw	r16, r28
    1d40:	0b 59       	subi	r16, 0x9B	; 155
    1d42:	1e 4f       	sbci	r17, 0xFE	; 254
    1d44:	fe 01       	movw	r30, r28
    1d46:	e7 59       	subi	r30, 0x97	; 151
    1d48:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	26 e6       	ldi	r18, 0x66	; 102
    1d54:	36 e6       	ldi	r19, 0x66	; 102
    1d56:	46 e6       	ldi	r20, 0x66	; 102
    1d58:	55 e4       	ldi	r21, 0x45	; 69
    1d5a:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	f8 01       	movw	r30, r16
    1d64:	80 83       	st	Z, r24
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	a2 83       	std	Z+2, r26	; 0x02
    1d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	eb 59       	subi	r30, 0x9B	; 155
    1d70:	fe 4f       	sbci	r31, 0xFE	; 254
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	44 f4       	brge	.+16     	; 0x1d9a <main+0xee>
		__ticks = 1;
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	ed 59       	subi	r30, 0x9D	; 157
    1d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	64 c0       	rjmp	.+200    	; 0x1e62 <main+0x1b6>
	else if (__tmp > 65535)
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	eb 59       	subi	r30, 0x9B	; 155
    1d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	0c f0       	brlt	.+2      	; 0x1dba <main+0x10e>
    1db8:	43 c0       	rjmp	.+134    	; 0x1e40 <main+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e7 59       	subi	r30, 0x97	; 151
    1dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8e 01       	movw	r16, r28
    1dda:	0d 59       	subi	r16, 0x9D	; 157
    1ddc:	1e 4f       	sbci	r17, 0xFE	; 254
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	f8 01       	movw	r30, r16
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	80 83       	st	Z, r24
    1df0:	1f c0       	rjmp	.+62     	; 0x1e30 <main+0x184>
    1df2:	fe 01       	movw	r30, r28
    1df4:	ef 59       	subi	r30, 0x9F	; 159
    1df6:	fe 4f       	sbci	r31, 0xFE	; 254
    1df8:	80 e7       	ldi	r24, 0x70	; 112
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e00:	fe 01       	movw	r30, r28
    1e02:	ef 59       	subi	r30, 0x9F	; 159
    1e04:	fe 4f       	sbci	r31, 0xFE	; 254
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <main+0x15e>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	ef 59       	subi	r30, 0x9F	; 159
    1e12:	fe 4f       	sbci	r31, 0xFE	; 254
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	de 01       	movw	r26, r28
    1e1a:	ad 59       	subi	r26, 0x9D	; 157
    1e1c:	be 4f       	sbci	r27, 0xFE	; 254
    1e1e:	fe 01       	movw	r30, r28
    1e20:	ed 59       	subi	r30, 0x9D	; 157
    1e22:	fe 4f       	sbci	r31, 0xFE	; 254
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	11 96       	adiw	r26, 0x01	; 1
    1e2c:	9c 93       	st	X, r25
    1e2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	fe 01       	movw	r30, r28
    1e32:	ed 59       	subi	r30, 0x9D	; 157
    1e34:	fe 4f       	sbci	r31, 0xFE	; 254
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	d1 f6       	brne	.-76     	; 0x1df2 <main+0x146>
    1e3e:	27 c0       	rjmp	.+78     	; 0x1e8e <main+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	8e 01       	movw	r16, r28
    1e42:	0d 59       	subi	r16, 0x9D	; 157
    1e44:	1e 4f       	sbci	r17, 0xFE	; 254
    1e46:	fe 01       	movw	r30, r28
    1e48:	eb 59       	subi	r30, 0x9B	; 155
    1e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	de 01       	movw	r26, r28
    1e64:	a1 5a       	subi	r26, 0xA1	; 161
    1e66:	be 4f       	sbci	r27, 0xFE	; 254
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ed 59       	subi	r30, 0x9D	; 157
    1e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	8d 93       	st	X+, r24
    1e74:	9c 93       	st	X, r25
    1e76:	fe 01       	movw	r30, r28
    1e78:	e1 5a       	subi	r30, 0xA1	; 161
    1e7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <main+0x1d4>
    1e84:	fe 01       	movw	r30, r28
    1e86:	e1 5a       	subi	r30, 0xA1	; 161
    1e88:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
  _delay_ms(100);
  uartPuts("atl5\r");
    1e8e:	8a ed       	ldi	r24, 0xDA	; 218
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    1e96:	fe 01       	movw	r30, r28
    1e98:	e5 5a       	subi	r30, 0xA5	; 165
    1e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a8 ec       	ldi	r26, 0xC8	; 200
    1ea2:	b2 e4       	ldi	r27, 0x42	; 66
    1ea4:	80 83       	st	Z, r24
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	a2 83       	std	Z+2, r26	; 0x02
    1eaa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eac:	8e 01       	movw	r16, r28
    1eae:	09 5a       	subi	r16, 0xA9	; 169
    1eb0:	1e 4f       	sbci	r17, 0xFE	; 254
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e5 5a       	subi	r30, 0xA5	; 165
    1eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	26 e6       	ldi	r18, 0x66	; 102
    1ec2:	36 e6       	ldi	r19, 0x66	; 102
    1ec4:	46 e6       	ldi	r20, 0x66	; 102
    1ec6:	55 e4       	ldi	r21, 0x45	; 69
    1ec8:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	80 83       	st	Z, r24
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	a2 83       	std	Z+2, r26	; 0x02
    1ed8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eda:	fe 01       	movw	r30, r28
    1edc:	e9 5a       	subi	r30, 0xA9	; 169
    1ede:	fe 4f       	sbci	r31, 0xFE	; 254
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	44 f4       	brge	.+16     	; 0x1f08 <main+0x25c>
		__ticks = 1;
    1ef8:	fe 01       	movw	r30, r28
    1efa:	eb 5a       	subi	r30, 0xAB	; 171
    1efc:	fe 4f       	sbci	r31, 0xFE	; 254
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	80 83       	st	Z, r24
    1f06:	64 c0       	rjmp	.+200    	; 0x1fd0 <main+0x324>
	else if (__tmp > 65535)
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e9 5a       	subi	r30, 0xA9	; 169
    1f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	57 e4       	ldi	r21, 0x47	; 71
    1f1e:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	0c f0       	brlt	.+2      	; 0x1f28 <main+0x27c>
    1f26:	43 c0       	rjmp	.+134    	; 0x1fae <main+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e5 5a       	subi	r30, 0xA5	; 165
    1f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e2       	ldi	r20, 0x20	; 32
    1f3c:	51 e4       	ldi	r21, 0x41	; 65
    1f3e:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8e 01       	movw	r16, r28
    1f48:	0b 5a       	subi	r16, 0xAB	; 171
    1f4a:	1e 4f       	sbci	r17, 0xFE	; 254
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	f8 01       	movw	r30, r16
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	80 83       	st	Z, r24
    1f5e:	1f c0       	rjmp	.+62     	; 0x1f9e <main+0x2f2>
    1f60:	fe 01       	movw	r30, r28
    1f62:	ed 5a       	subi	r30, 0xAD	; 173
    1f64:	fe 4f       	sbci	r31, 0xFE	; 254
    1f66:	80 e7       	ldi	r24, 0x70	; 112
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
    1f6e:	fe 01       	movw	r30, r28
    1f70:	ed 5a       	subi	r30, 0xAD	; 173
    1f72:	fe 4f       	sbci	r31, 0xFE	; 254
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <main+0x2cc>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ed 5a       	subi	r30, 0xAD	; 173
    1f80:	fe 4f       	sbci	r31, 0xFE	; 254
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f86:	de 01       	movw	r26, r28
    1f88:	ab 5a       	subi	r26, 0xAB	; 171
    1f8a:	be 4f       	sbci	r27, 0xFE	; 254
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	eb 5a       	subi	r30, 0xAB	; 171
    1f90:	fe 4f       	sbci	r31, 0xFE	; 254
    1f92:	80 81       	ld	r24, Z
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	11 96       	adiw	r26, 0x01	; 1
    1f9a:	9c 93       	st	X, r25
    1f9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	eb 5a       	subi	r30, 0xAB	; 171
    1fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	d1 f6       	brne	.-76     	; 0x1f60 <main+0x2b4>
    1fac:	27 c0       	rjmp	.+78     	; 0x1ffc <main+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fae:	8e 01       	movw	r16, r28
    1fb0:	0b 5a       	subi	r16, 0xAB	; 171
    1fb2:	1e 4f       	sbci	r17, 0xFE	; 254
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e9 5a       	subi	r30, 0xA9	; 169
    1fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	82 81       	ldd	r24, Z+2	; 0x02
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	f8 01       	movw	r30, r16
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	80 83       	st	Z, r24
    1fd0:	de 01       	movw	r26, r28
    1fd2:	af 5a       	subi	r26, 0xAF	; 175
    1fd4:	be 4f       	sbci	r27, 0xFE	; 254
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	eb 5a       	subi	r30, 0xAB	; 171
    1fda:	fe 4f       	sbci	r31, 0xFE	; 254
    1fdc:	80 81       	ld	r24, Z
    1fde:	91 81       	ldd	r25, Z+1	; 0x01
    1fe0:	8d 93       	st	X+, r24
    1fe2:	9c 93       	st	X, r25
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ef 5a       	subi	r30, 0xAF	; 175
    1fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <main+0x342>
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ef 5a       	subi	r30, 0xAF	; 175
    1ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	80 83       	st	Z, r24
  _delay_ms(100);

  UBRRH = 0x00;
    1ffc:	e0 e4       	ldi	r30, 0x40	; 64
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	10 82       	st	Z, r1
  UBRRL = 0x07;
    2002:	e9 e2       	ldi	r30, 0x29	; 41
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	87 e0       	ldi	r24, 0x07	; 7
    2008:	80 83       	st	Z, r24

  uartPuts("\r\n\r\n\r\n\r\n\r\n\r\n\r\nWordClock V0.1 initializing...\r\n\r\n");
    200a:	80 ee       	ldi	r24, 0xE0	; 224
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>

  uartPuts("\r\nReset-Cause:");
    2012:	81 e1       	ldi	r24, 0x11	; 17
    2014:	92 e0       	ldi	r25, 0x02	; 2
    2016:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  switch (MCUCSR & 0x1f)
    201a:	e4 e5       	ldi	r30, 0x54	; 84
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9c 01       	movw	r18, r24
    2026:	2f 71       	andi	r18, 0x1F	; 31
    2028:	30 70       	andi	r19, 0x00	; 0
    202a:	cd 5b       	subi	r28, 0xBD	; 189
    202c:	db 4f       	sbci	r29, 0xFB	; 251
    202e:	39 83       	std	Y+1, r19	; 0x01
    2030:	28 83       	st	Y, r18
    2032:	c3 54       	subi	r28, 0x43	; 67
    2034:	d4 40       	sbci	r29, 0x04	; 4
    2036:	cd 5b       	subi	r28, 0xBD	; 189
    2038:	db 4f       	sbci	r29, 0xFB	; 251
    203a:	88 81       	ld	r24, Y
    203c:	99 81       	ldd	r25, Y+1	; 0x01
    203e:	c3 54       	subi	r28, 0x43	; 67
    2040:	d4 40       	sbci	r29, 0x04	; 4
    2042:	84 30       	cpi	r24, 0x04	; 4
    2044:	91 05       	cpc	r25, r1
    2046:	c9 f1       	breq	.+114    	; 0x20ba <main+0x40e>
    2048:	cd 5b       	subi	r28, 0xBD	; 189
    204a:	db 4f       	sbci	r29, 0xFB	; 251
    204c:	e8 81       	ld	r30, Y
    204e:	f9 81       	ldd	r31, Y+1	; 0x01
    2050:	c3 54       	subi	r28, 0x43	; 67
    2052:	d4 40       	sbci	r29, 0x04	; 4
    2054:	e5 30       	cpi	r30, 0x05	; 5
    2056:	f1 05       	cpc	r31, r1
    2058:	9c f4       	brge	.+38     	; 0x2080 <main+0x3d4>
    205a:	cd 5b       	subi	r28, 0xBD	; 189
    205c:	db 4f       	sbci	r29, 0xFB	; 251
    205e:	28 81       	ld	r18, Y
    2060:	39 81       	ldd	r19, Y+1	; 0x01
    2062:	c3 54       	subi	r28, 0x43	; 67
    2064:	d4 40       	sbci	r29, 0x04	; 4
    2066:	21 30       	cpi	r18, 0x01	; 1
    2068:	31 05       	cpc	r19, r1
    206a:	e9 f0       	breq	.+58     	; 0x20a6 <main+0x3fa>
    206c:	cd 5b       	subi	r28, 0xBD	; 189
    206e:	db 4f       	sbci	r29, 0xFB	; 251
    2070:	88 81       	ld	r24, Y
    2072:	99 81       	ldd	r25, Y+1	; 0x01
    2074:	c3 54       	subi	r28, 0x43	; 67
    2076:	d4 40       	sbci	r29, 0x04	; 4
    2078:	82 30       	cpi	r24, 0x02	; 2
    207a:	91 05       	cpc	r25, r1
    207c:	c9 f0       	breq	.+50     	; 0x20b0 <main+0x404>
    207e:	2c c0       	rjmp	.+88     	; 0x20d8 <main+0x42c>
    2080:	cd 5b       	subi	r28, 0xBD	; 189
    2082:	db 4f       	sbci	r29, 0xFB	; 251
    2084:	e8 81       	ld	r30, Y
    2086:	f9 81       	ldd	r31, Y+1	; 0x01
    2088:	c3 54       	subi	r28, 0x43	; 67
    208a:	d4 40       	sbci	r29, 0x04	; 4
    208c:	e8 30       	cpi	r30, 0x08	; 8
    208e:	f1 05       	cpc	r31, r1
    2090:	c9 f0       	breq	.+50     	; 0x20c4 <main+0x418>
    2092:	cd 5b       	subi	r28, 0xBD	; 189
    2094:	db 4f       	sbci	r29, 0xFB	; 251
    2096:	28 81       	ld	r18, Y
    2098:	39 81       	ldd	r19, Y+1	; 0x01
    209a:	c3 54       	subi	r28, 0x43	; 67
    209c:	d4 40       	sbci	r29, 0x04	; 4
    209e:	20 31       	cpi	r18, 0x10	; 16
    20a0:	31 05       	cpc	r19, r1
    20a2:	a9 f0       	breq	.+42     	; 0x20ce <main+0x422>
    20a4:	19 c0       	rjmp	.+50     	; 0x20d8 <main+0x42c>
  {
  case 1:
    uartPuts("Power-On Reset\r\n");
    20a6:	80 e2       	ldi	r24, 0x20	; 32
    20a8:	92 e0       	ldi	r25, 0x02	; 2
    20aa:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    20ae:	18 c0       	rjmp	.+48     	; 0x20e0 <main+0x434>
    break;
  case 2:
    uartPuts("External Reset\r\n");
    20b0:	81 e3       	ldi	r24, 0x31	; 49
    20b2:	92 e0       	ldi	r25, 0x02	; 2
    20b4:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    20b8:	13 c0       	rjmp	.+38     	; 0x20e0 <main+0x434>
    break;
  case 4:
    uartPuts("Brown-Out Reset\r\n");
    20ba:	82 e4       	ldi	r24, 0x42	; 66
    20bc:	92 e0       	ldi	r25, 0x02	; 2
    20be:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    20c2:	0e c0       	rjmp	.+28     	; 0x20e0 <main+0x434>
    break;
  case 8:
    uartPuts("Watchdog Reset\r\n");
    20c4:	84 e5       	ldi	r24, 0x54	; 84
    20c6:	92 e0       	ldi	r25, 0x02	; 2
    20c8:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    20cc:	09 c0       	rjmp	.+18     	; 0x20e0 <main+0x434>
    break;
  case 16:
    uartPuts("JTAG Reset\r\n");
    20ce:	85 e6       	ldi	r24, 0x65	; 101
    20d0:	92 e0       	ldi	r25, 0x02	; 2
    20d2:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    20d6:	04 c0       	rjmp	.+8      	; 0x20e0 <main+0x434>
    break;
  default:
    uartPuts("unknown\r\n");
    20d8:	82 e7       	ldi	r24, 0x72	; 114
    20da:	92 e0       	ldi	r25, 0x02	; 2
    20dc:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    break;
  }
  MCUCSR = 0;
    20e0:	e4 e5       	ldi	r30, 0x54	; 84
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	10 82       	st	Z, r1

  uartPuts("\r\n... switch on RTC");
    20e6:	8c e7       	ldi	r24, 0x7C	; 124
    20e8:	92 e0       	ldi	r25, 0x02	; 2
    20ea:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>

  for (int cyx = 0; cyx < 50; cyx++)
    20ee:	fe 01       	movw	r30, r28
    20f0:	e7 56       	subi	r30, 0x67	; 103
    20f2:	fd 4f       	sbci	r31, 0xFD	; 253
    20f4:	11 82       	std	Z+1, r1	; 0x01
    20f6:	10 82       	st	Z, r1
    20f8:	c0 c0       	rjmp	.+384    	; 0x227a <main+0x5ce>
  {
    wdt_reset();
    20fa:	a8 95       	wdr
    20fc:	fe 01       	movw	r30, r28
    20fe:	e3 5b       	subi	r30, 0xB3	; 179
    2100:	fe 4f       	sbci	r31, 0xFE	; 254
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e2       	ldi	r26, 0x20	; 32
    2108:	b1 e4       	ldi	r27, 0x41	; 65
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	8e 01       	movw	r16, r28
    2114:	07 5b       	subi	r16, 0xB7	; 183
    2116:	1e 4f       	sbci	r17, 0xFE	; 254
    2118:	fe 01       	movw	r30, r28
    211a:	e3 5b       	subi	r30, 0xB3	; 179
    211c:	fe 4f       	sbci	r31, 0xFE	; 254
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	26 e6       	ldi	r18, 0x66	; 102
    2128:	36 e6       	ldi	r19, 0x66	; 102
    212a:	46 e6       	ldi	r20, 0x66	; 102
    212c:	55 e4       	ldi	r21, 0x45	; 69
    212e:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	f8 01       	movw	r30, r16
    2138:	80 83       	st	Z, r24
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	a2 83       	std	Z+2, r26	; 0x02
    213e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2140:	fe 01       	movw	r30, r28
    2142:	e7 5b       	subi	r30, 0xB7	; 183
    2144:	fe 4f       	sbci	r31, 0xFE	; 254
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	44 f4       	brge	.+16     	; 0x216e <main+0x4c2>
		__ticks = 1;
    215e:	fe 01       	movw	r30, r28
    2160:	e9 5b       	subi	r30, 0xB9	; 185
    2162:	fe 4f       	sbci	r31, 0xFE	; 254
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	64 c0       	rjmp	.+200    	; 0x2236 <main+0x58a>
	else if (__tmp > 65535)
    216e:	fe 01       	movw	r30, r28
    2170:	e7 5b       	subi	r30, 0xB7	; 183
    2172:	fe 4f       	sbci	r31, 0xFE	; 254
    2174:	60 81       	ld	r22, Z
    2176:	71 81       	ldd	r23, Z+1	; 0x01
    2178:	82 81       	ldd	r24, Z+2	; 0x02
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <main+0x4e2>
    218c:	43 c0       	rjmp	.+134    	; 0x2214 <main+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218e:	fe 01       	movw	r30, r28
    2190:	e3 5b       	subi	r30, 0xB3	; 179
    2192:	fe 4f       	sbci	r31, 0xFE	; 254
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8e 01       	movw	r16, r28
    21ae:	09 5b       	subi	r16, 0xB9	; 185
    21b0:	1e 4f       	sbci	r17, 0xFE	; 254
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
    21c4:	1f c0       	rjmp	.+62     	; 0x2204 <main+0x558>
    21c6:	fe 01       	movw	r30, r28
    21c8:	eb 5b       	subi	r30, 0xBB	; 187
    21ca:	fe 4f       	sbci	r31, 0xFE	; 254
    21cc:	80 e7       	ldi	r24, 0x70	; 112
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
    21d4:	fe 01       	movw	r30, r28
    21d6:	eb 5b       	subi	r30, 0xBB	; 187
    21d8:	fe 4f       	sbci	r31, 0xFE	; 254
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <main+0x532>
    21e2:	fe 01       	movw	r30, r28
    21e4:	eb 5b       	subi	r30, 0xBB	; 187
    21e6:	fe 4f       	sbci	r31, 0xFE	; 254
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	de 01       	movw	r26, r28
    21ee:	a9 5b       	subi	r26, 0xB9	; 185
    21f0:	be 4f       	sbci	r27, 0xFE	; 254
    21f2:	fe 01       	movw	r30, r28
    21f4:	e9 5b       	subi	r30, 0xB9	; 185
    21f6:	fe 4f       	sbci	r31, 0xFE	; 254
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	9c 93       	st	X, r25
    2202:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	fe 01       	movw	r30, r28
    2206:	e9 5b       	subi	r30, 0xB9	; 185
    2208:	fe 4f       	sbci	r31, 0xFE	; 254
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	d1 f6       	brne	.-76     	; 0x21c6 <main+0x51a>
    2212:	27 c0       	rjmp	.+78     	; 0x2262 <main+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	8e 01       	movw	r16, r28
    2216:	09 5b       	subi	r16, 0xB9	; 185
    2218:	1e 4f       	sbci	r17, 0xFE	; 254
    221a:	fe 01       	movw	r30, r28
    221c:	e7 5b       	subi	r30, 0xB7	; 183
    221e:	fe 4f       	sbci	r31, 0xFE	; 254
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	f8 01       	movw	r30, r16
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	de 01       	movw	r26, r28
    2238:	ad 5b       	subi	r26, 0xBD	; 189
    223a:	be 4f       	sbci	r27, 0xFE	; 254
    223c:	fe 01       	movw	r30, r28
    223e:	e9 5b       	subi	r30, 0xB9	; 185
    2240:	fe 4f       	sbci	r31, 0xFE	; 254
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	8d 93       	st	X+, r24
    2248:	9c 93       	st	X, r25
    224a:	fe 01       	movw	r30, r28
    224c:	ed 5b       	subi	r30, 0xBD	; 189
    224e:	fe 4f       	sbci	r31, 0xFE	; 254
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <main+0x5a8>
    2258:	fe 01       	movw	r30, r28
    225a:	ed 5b       	subi	r30, 0xBD	; 189
    225c:	fe 4f       	sbci	r31, 0xFE	; 254
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
  }
  MCUCSR = 0;

  uartPuts("\r\n... switch on RTC");

  for (int cyx = 0; cyx < 50; cyx++)
    2262:	de 01       	movw	r26, r28
    2264:	a7 56       	subi	r26, 0x67	; 103
    2266:	bd 4f       	sbci	r27, 0xFD	; 253
    2268:	fe 01       	movw	r30, r28
    226a:	e7 56       	subi	r30, 0x67	; 103
    226c:	fd 4f       	sbci	r31, 0xFD	; 253
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	11 96       	adiw	r26, 0x01	; 1
    2276:	9c 93       	st	X, r25
    2278:	8e 93       	st	-X, r24
    227a:	fe 01       	movw	r30, r28
    227c:	e7 56       	subi	r30, 0x67	; 103
    227e:	fd 4f       	sbci	r31, 0xFD	; 253
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	82 33       	cpi	r24, 0x32	; 50
    2286:	91 05       	cpc	r25, r1
    2288:	0c f4       	brge	.+2      	; 0x228c <main+0x5e0>
    228a:	37 cf       	rjmp	.-402    	; 0x20fa <main+0x44e>
  {
    wdt_reset();
    _delay_ms(10);
  }
  PORTC |= (1 << PC7);
    228c:	a5 e3       	ldi	r26, 0x35	; 53
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e5 e3       	ldi	r30, 0x35	; 53
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	80 68       	ori	r24, 0x80	; 128
    2298:	8c 93       	st	X, r24
  for (int cyx = 0; cyx < 50; cyx++)
    229a:	fe 01       	movw	r30, r28
    229c:	e9 56       	subi	r30, 0x69	; 105
    229e:	fd 4f       	sbci	r31, 0xFD	; 253
    22a0:	11 82       	std	Z+1, r1	; 0x01
    22a2:	10 82       	st	Z, r1
    22a4:	c0 c0       	rjmp	.+384    	; 0x2426 <main+0x77a>
  {
    wdt_reset();
    22a6:	a8 95       	wdr
    22a8:	fe 01       	movw	r30, r28
    22aa:	e1 5c       	subi	r30, 0xC1	; 193
    22ac:	fe 4f       	sbci	r31, 0xFE	; 254
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e2       	ldi	r26, 0x20	; 32
    22b4:	b1 e4       	ldi	r27, 0x41	; 65
    22b6:	80 83       	st	Z, r24
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	a2 83       	std	Z+2, r26	; 0x02
    22bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	8e 01       	movw	r16, r28
    22c0:	05 5c       	subi	r16, 0xC5	; 197
    22c2:	1e 4f       	sbci	r17, 0xFE	; 254
    22c4:	fe 01       	movw	r30, r28
    22c6:	e1 5c       	subi	r30, 0xC1	; 193
    22c8:	fe 4f       	sbci	r31, 0xFE	; 254
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	26 e6       	ldi	r18, 0x66	; 102
    22d4:	36 e6       	ldi	r19, 0x66	; 102
    22d6:	46 e6       	ldi	r20, 0x66	; 102
    22d8:	55 e4       	ldi	r21, 0x45	; 69
    22da:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	f8 01       	movw	r30, r16
    22e4:	80 83       	st	Z, r24
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	a2 83       	std	Z+2, r26	; 0x02
    22ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ec:	fe 01       	movw	r30, r28
    22ee:	e5 5c       	subi	r30, 0xC5	; 197
    22f0:	fe 4f       	sbci	r31, 0xFE	; 254
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	44 f4       	brge	.+16     	; 0x231a <main+0x66e>
		__ticks = 1;
    230a:	fe 01       	movw	r30, r28
    230c:	e7 5c       	subi	r30, 0xC7	; 199
    230e:	fe 4f       	sbci	r31, 0xFE	; 254
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	91 83       	std	Z+1, r25	; 0x01
    2316:	80 83       	st	Z, r24
    2318:	64 c0       	rjmp	.+200    	; 0x23e2 <main+0x736>
	else if (__tmp > 65535)
    231a:	fe 01       	movw	r30, r28
    231c:	e5 5c       	subi	r30, 0xC5	; 197
    231e:	fe 4f       	sbci	r31, 0xFE	; 254
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	93 81       	ldd	r25, Z+3	; 0x03
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	0c f0       	brlt	.+2      	; 0x233a <main+0x68e>
    2338:	43 c0       	rjmp	.+134    	; 0x23c0 <main+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233a:	fe 01       	movw	r30, r28
    233c:	e1 5c       	subi	r30, 0xC1	; 193
    233e:	fe 4f       	sbci	r31, 0xFE	; 254
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	8e 01       	movw	r16, r28
    235a:	07 5c       	subi	r16, 0xC7	; 199
    235c:	1e 4f       	sbci	r17, 0xFE	; 254
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	f8 01       	movw	r30, r16
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	80 83       	st	Z, r24
    2370:	1f c0       	rjmp	.+62     	; 0x23b0 <main+0x704>
    2372:	fe 01       	movw	r30, r28
    2374:	e9 5c       	subi	r30, 0xC9	; 201
    2376:	fe 4f       	sbci	r31, 0xFE	; 254
    2378:	80 e7       	ldi	r24, 0x70	; 112
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	80 83       	st	Z, r24
    2380:	fe 01       	movw	r30, r28
    2382:	e9 5c       	subi	r30, 0xC9	; 201
    2384:	fe 4f       	sbci	r31, 0xFE	; 254
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <main+0x6de>
    238e:	fe 01       	movw	r30, r28
    2390:	e9 5c       	subi	r30, 0xC9	; 201
    2392:	fe 4f       	sbci	r31, 0xFE	; 254
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	de 01       	movw	r26, r28
    239a:	a7 5c       	subi	r26, 0xC7	; 199
    239c:	be 4f       	sbci	r27, 0xFE	; 254
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 5c       	subi	r30, 0xC7	; 199
    23a2:	fe 4f       	sbci	r31, 0xFE	; 254
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	11 96       	adiw	r26, 0x01	; 1
    23ac:	9c 93       	st	X, r25
    23ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 5c       	subi	r30, 0xC7	; 199
    23b4:	fe 4f       	sbci	r31, 0xFE	; 254
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	d1 f6       	brne	.-76     	; 0x2372 <main+0x6c6>
    23be:	27 c0       	rjmp	.+78     	; 0x240e <main+0x762>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c0:	8e 01       	movw	r16, r28
    23c2:	07 5c       	subi	r16, 0xC7	; 199
    23c4:	1e 4f       	sbci	r17, 0xFE	; 254
    23c6:	fe 01       	movw	r30, r28
    23c8:	e5 5c       	subi	r30, 0xC5	; 197
    23ca:	fe 4f       	sbci	r31, 0xFE	; 254
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	f8 01       	movw	r30, r16
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	80 83       	st	Z, r24
    23e2:	de 01       	movw	r26, r28
    23e4:	ab 5c       	subi	r26, 0xCB	; 203
    23e6:	be 4f       	sbci	r27, 0xFE	; 254
    23e8:	fe 01       	movw	r30, r28
    23ea:	e7 5c       	subi	r30, 0xC7	; 199
    23ec:	fe 4f       	sbci	r31, 0xFE	; 254
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	8d 93       	st	X+, r24
    23f4:	9c 93       	st	X, r25
    23f6:	fe 01       	movw	r30, r28
    23f8:	eb 5c       	subi	r30, 0xCB	; 203
    23fa:	fe 4f       	sbci	r31, 0xFE	; 254
    23fc:	80 81       	ld	r24, Z
    23fe:	91 81       	ldd	r25, Z+1	; 0x01
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <main+0x754>
    2404:	fe 01       	movw	r30, r28
    2406:	eb 5c       	subi	r30, 0xCB	; 203
    2408:	fe 4f       	sbci	r31, 0xFE	; 254
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	80 83       	st	Z, r24
  {
    wdt_reset();
    _delay_ms(10);
  }
  PORTC |= (1 << PC7);
  for (int cyx = 0; cyx < 50; cyx++)
    240e:	de 01       	movw	r26, r28
    2410:	a9 56       	subi	r26, 0x69	; 105
    2412:	bd 4f       	sbci	r27, 0xFD	; 253
    2414:	fe 01       	movw	r30, r28
    2416:	e9 56       	subi	r30, 0x69	; 105
    2418:	fd 4f       	sbci	r31, 0xFD	; 253
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	11 96       	adiw	r26, 0x01	; 1
    2422:	9c 93       	st	X, r25
    2424:	8e 93       	st	-X, r24
    2426:	fe 01       	movw	r30, r28
    2428:	e9 56       	subi	r30, 0x69	; 105
    242a:	fd 4f       	sbci	r31, 0xFD	; 253
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	82 33       	cpi	r24, 0x32	; 50
    2432:	91 05       	cpc	r25, r1
    2434:	0c f4       	brge	.+2      	; 0x2438 <main+0x78c>
    2436:	37 cf       	rjmp	.-402    	; 0x22a6 <main+0x5fa>
  {
    wdt_reset();
    _delay_ms(10);
  }

  uartPuts("\r\n... WDT enable");
    2438:	80 e9       	ldi	r24, 0x90	; 144
    243a:	92 e0       	ldi	r25, 0x02	; 2
    243c:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  WDTCR = _BV(WDE) | 0b101;
    2440:	e1 e4       	ldi	r30, 0x41	; 65
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	8d e0       	ldi	r24, 0x0D	; 13
    2446:	80 83       	st	Z, r24

  sei();
    2448:	78 94       	sei

  uartPuts("\r\n... PWM");
    244a:	81 ea       	ldi	r24, 0xA1	; 161
    244c:	92 e0       	ldi	r25, 0x02	; 2
    244e:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  InitPWM();
    2452:	0e 94 ac 09 	call	0x1358	; 0x1358 <InitPWM>
  SetColor(0xF, 0xFF, 0x00, 0x00);
    2456:	8f e0       	ldi	r24, 0x0F	; 15
    2458:	6f ef       	ldi	r22, 0xFF	; 255
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>

  wdt_reset();
    2462:	a8 95       	wdr

  uartPuts("\r\n... Shifter");
    2464:	8b ea       	ldi	r24, 0xAB	; 171
    2466:	92 e0       	ldi	r25, 0x02	; 2
    2468:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  shift_init();
    246c:	0e 94 2f 0b 	call	0x165e	; 0x165e <shift_init>
  SetColor(0xF, 0xFF, 0xFF, 0x00);
    2470:	8f e0       	ldi	r24, 0x0F	; 15
    2472:	6f ef       	ldi	r22, 0xFF	; 255
    2474:	4f ef       	ldi	r20, 0xFF	; 255
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>

  wdt_reset();
    247c:	a8 95       	wdr

  uartPuts("\r\n... LDR ADC");
    247e:	89 eb       	ldi	r24, 0xB9	; 185
    2480:	92 e0       	ldi	r25, 0x02	; 2
    2482:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  ldr_init();
    2486:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <ldr_init>
  SetColor(0xF, 0x00, 0xFF, 0xFF);
    248a:	8f e0       	ldi	r24, 0x0F	; 15
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	4f ef       	ldi	r20, 0xFF	; 255
    2490:	2f ef       	ldi	r18, 0xFF	; 255
    2492:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>

  wdt_reset();
    2496:	a8 95       	wdr

  uartPuts("\r\n... RTC");
    2498:	87 ec       	ldi	r24, 0xC7	; 199
    249a:	92 e0       	ldi	r25, 0x02	; 2
    249c:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  DATETIME time;
  DATETIME utctime;
  uint8_t i2c_errorcode;
  uint8_t i2c_status;
  if (!i2c_rtc_init(&i2c_errorcode, &i2c_status)) // initialize rtc
    24a0:	ce 01       	movw	r24, r28
    24a2:	8b 53       	subi	r24, 0x3B	; 59
    24a4:	9d 4f       	sbci	r25, 0xFD	; 253
    24a6:	9e 01       	movw	r18, r28
    24a8:	2a 53       	subi	r18, 0x3A	; 58
    24aa:	3d 4f       	sbci	r19, 0xFD	; 253
    24ac:	b9 01       	movw	r22, r18
    24ae:	0e 94 90 08 	call	0x1120	; 0x1120 <i2c_rtc_init>
    24b2:	88 23       	and	r24, r24
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <main+0x80c>
    24b6:	78 c1       	rjmp	.+752    	; 0x27a8 <main+0xafc>
  {
    uartPuts(" FAILED !!!\r\n");
    24b8:	81 ed       	ldi	r24, 0xD1	; 209
    24ba:	92 e0       	ldi	r25, 0x02	; 2
    24bc:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    for (;;)
    {
      SetColor(0xF, 0x00, 0x00, 0x00);
    24c0:	8f e0       	ldi	r24, 0x0F	; 15
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	40 e0       	ldi	r20, 0x00	; 0
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    24cc:	fe 01       	movw	r30, r28
    24ce:	ef 5c       	subi	r30, 0xCF	; 207
    24d0:	fe 4f       	sbci	r31, 0xFE	; 254
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	a0 ea       	ldi	r26, 0xA0	; 160
    24d8:	b1 e4       	ldi	r27, 0x41	; 65
    24da:	80 83       	st	Z, r24
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	a2 83       	std	Z+2, r26	; 0x02
    24e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e2:	8e 01       	movw	r16, r28
    24e4:	03 5d       	subi	r16, 0xD3	; 211
    24e6:	1e 4f       	sbci	r17, 0xFE	; 254
    24e8:	fe 01       	movw	r30, r28
    24ea:	ef 5c       	subi	r30, 0xCF	; 207
    24ec:	fe 4f       	sbci	r31, 0xFE	; 254
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	26 e6       	ldi	r18, 0x66	; 102
    24f8:	36 e6       	ldi	r19, 0x66	; 102
    24fa:	46 e6       	ldi	r20, 0x66	; 102
    24fc:	55 e4       	ldi	r21, 0x45	; 69
    24fe:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	f8 01       	movw	r30, r16
    2508:	80 83       	st	Z, r24
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	a2 83       	std	Z+2, r26	; 0x02
    250e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2510:	fe 01       	movw	r30, r28
    2512:	e3 5d       	subi	r30, 0xD3	; 211
    2514:	fe 4f       	sbci	r31, 0xFE	; 254
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e8       	ldi	r20, 0x80	; 128
    2524:	5f e3       	ldi	r21, 0x3F	; 63
    2526:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    252a:	88 23       	and	r24, r24
    252c:	44 f4       	brge	.+16     	; 0x253e <main+0x892>
		__ticks = 1;
    252e:	fe 01       	movw	r30, r28
    2530:	e5 5d       	subi	r30, 0xD5	; 213
    2532:	fe 4f       	sbci	r31, 0xFE	; 254
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
    253c:	64 c0       	rjmp	.+200    	; 0x2606 <main+0x95a>
	else if (__tmp > 65535)
    253e:	fe 01       	movw	r30, r28
    2540:	e3 5d       	subi	r30, 0xD3	; 211
    2542:	fe 4f       	sbci	r31, 0xFE	; 254
    2544:	60 81       	ld	r22, Z
    2546:	71 81       	ldd	r23, Z+1	; 0x01
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	57 e4       	ldi	r21, 0x47	; 71
    2554:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	0c f0       	brlt	.+2      	; 0x255e <main+0x8b2>
    255c:	43 c0       	rjmp	.+134    	; 0x25e4 <main+0x938>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	fe 01       	movw	r30, r28
    2560:	ef 5c       	subi	r30, 0xCF	; 207
    2562:	fe 4f       	sbci	r31, 0xFE	; 254
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e2       	ldi	r20, 0x20	; 32
    2572:	51 e4       	ldi	r21, 0x41	; 65
    2574:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	8e 01       	movw	r16, r28
    257e:	05 5d       	subi	r16, 0xD5	; 213
    2580:	1e 4f       	sbci	r17, 0xFE	; 254
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	f8 01       	movw	r30, r16
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	80 83       	st	Z, r24
    2594:	1f c0       	rjmp	.+62     	; 0x25d4 <main+0x928>
    2596:	fe 01       	movw	r30, r28
    2598:	e7 5d       	subi	r30, 0xD7	; 215
    259a:	fe 4f       	sbci	r31, 0xFE	; 254
    259c:	80 e7       	ldi	r24, 0x70	; 112
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	fe 01       	movw	r30, r28
    25a6:	e7 5d       	subi	r30, 0xD7	; 215
    25a8:	fe 4f       	sbci	r31, 0xFE	; 254
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <main+0x902>
    25b2:	fe 01       	movw	r30, r28
    25b4:	e7 5d       	subi	r30, 0xD7	; 215
    25b6:	fe 4f       	sbci	r31, 0xFE	; 254
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25bc:	de 01       	movw	r26, r28
    25be:	a5 5d       	subi	r26, 0xD5	; 213
    25c0:	be 4f       	sbci	r27, 0xFE	; 254
    25c2:	fe 01       	movw	r30, r28
    25c4:	e5 5d       	subi	r30, 0xD5	; 213
    25c6:	fe 4f       	sbci	r31, 0xFE	; 254
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	11 96       	adiw	r26, 0x01	; 1
    25d0:	9c 93       	st	X, r25
    25d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d4:	fe 01       	movw	r30, r28
    25d6:	e5 5d       	subi	r30, 0xD5	; 213
    25d8:	fe 4f       	sbci	r31, 0xFE	; 254
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	d1 f6       	brne	.-76     	; 0x2596 <main+0x8ea>
    25e2:	27 c0       	rjmp	.+78     	; 0x2632 <main+0x986>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	8e 01       	movw	r16, r28
    25e6:	05 5d       	subi	r16, 0xD5	; 213
    25e8:	1e 4f       	sbci	r17, 0xFE	; 254
    25ea:	fe 01       	movw	r30, r28
    25ec:	e3 5d       	subi	r30, 0xD3	; 211
    25ee:	fe 4f       	sbci	r31, 0xFE	; 254
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	f8 01       	movw	r30, r16
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
    2606:	de 01       	movw	r26, r28
    2608:	a9 5d       	subi	r26, 0xD9	; 217
    260a:	be 4f       	sbci	r27, 0xFE	; 254
    260c:	fe 01       	movw	r30, r28
    260e:	e5 5d       	subi	r30, 0xD5	; 213
    2610:	fe 4f       	sbci	r31, 0xFE	; 254
    2612:	80 81       	ld	r24, Z
    2614:	91 81       	ldd	r25, Z+1	; 0x01
    2616:	8d 93       	st	X+, r24
    2618:	9c 93       	st	X, r25
    261a:	fe 01       	movw	r30, r28
    261c:	e9 5d       	subi	r30, 0xD9	; 217
    261e:	fe 4f       	sbci	r31, 0xFE	; 254
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <main+0x978>
    2628:	fe 01       	movw	r30, r28
    262a:	e9 5d       	subi	r30, 0xD9	; 217
    262c:	fe 4f       	sbci	r31, 0xFE	; 254
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
      _delay_ms(20);
      SetColor(0xF, 0xff, 0xff, 0xff);
    2632:	8f e0       	ldi	r24, 0x0F	; 15
    2634:	6f ef       	ldi	r22, 0xFF	; 255
    2636:	4f ef       	ldi	r20, 0xFF	; 255
    2638:	2f ef       	ldi	r18, 0xFF	; 255
    263a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    263e:	fe 01       	movw	r30, r28
    2640:	ed 5d       	subi	r30, 0xDD	; 221
    2642:	fe 4f       	sbci	r31, 0xFE	; 254
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a0 ea       	ldi	r26, 0xA0	; 160
    264a:	b1 e4       	ldi	r27, 0x41	; 65
    264c:	80 83       	st	Z, r24
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	a2 83       	std	Z+2, r26	; 0x02
    2652:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2654:	8e 01       	movw	r16, r28
    2656:	01 5e       	subi	r16, 0xE1	; 225
    2658:	1e 4f       	sbci	r17, 0xFE	; 254
    265a:	fe 01       	movw	r30, r28
    265c:	ed 5d       	subi	r30, 0xDD	; 221
    265e:	fe 4f       	sbci	r31, 0xFE	; 254
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	26 e6       	ldi	r18, 0x66	; 102
    266a:	36 e6       	ldi	r19, 0x66	; 102
    266c:	46 e6       	ldi	r20, 0x66	; 102
    266e:	55 e4       	ldi	r21, 0x45	; 69
    2670:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	f8 01       	movw	r30, r16
    267a:	80 83       	st	Z, r24
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	a2 83       	std	Z+2, r26	; 0x02
    2680:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2682:	fe 01       	movw	r30, r28
    2684:	e1 5e       	subi	r30, 0xE1	; 225
    2686:	fe 4f       	sbci	r31, 0xFE	; 254
    2688:	60 81       	ld	r22, Z
    268a:	71 81       	ldd	r23, Z+1	; 0x01
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	93 81       	ldd	r25, Z+3	; 0x03
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    269c:	88 23       	and	r24, r24
    269e:	44 f4       	brge	.+16     	; 0x26b0 <main+0xa04>
		__ticks = 1;
    26a0:	fe 01       	movw	r30, r28
    26a2:	e3 5e       	subi	r30, 0xE3	; 227
    26a4:	fe 4f       	sbci	r31, 0xFE	; 254
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
    26ae:	64 c0       	rjmp	.+200    	; 0x2778 <main+0xacc>
	else if (__tmp > 65535)
    26b0:	fe 01       	movw	r30, r28
    26b2:	e1 5e       	subi	r30, 0xE1	; 225
    26b4:	fe 4f       	sbci	r31, 0xFE	; 254
    26b6:	60 81       	ld	r22, Z
    26b8:	71 81       	ldd	r23, Z+1	; 0x01
    26ba:	82 81       	ldd	r24, Z+2	; 0x02
    26bc:	93 81       	ldd	r25, Z+3	; 0x03
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	3f ef       	ldi	r19, 0xFF	; 255
    26c2:	4f e7       	ldi	r20, 0x7F	; 127
    26c4:	57 e4       	ldi	r21, 0x47	; 71
    26c6:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    26ca:	18 16       	cp	r1, r24
    26cc:	0c f0       	brlt	.+2      	; 0x26d0 <main+0xa24>
    26ce:	43 c0       	rjmp	.+134    	; 0x2756 <main+0xaaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d0:	fe 01       	movw	r30, r28
    26d2:	ed 5d       	subi	r30, 0xDD	; 221
    26d4:	fe 4f       	sbci	r31, 0xFE	; 254
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8e 01       	movw	r16, r28
    26f0:	03 5e       	subi	r16, 0xE3	; 227
    26f2:	1e 4f       	sbci	r17, 0xFE	; 254
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	f8 01       	movw	r30, r16
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	80 83       	st	Z, r24
    2706:	1f c0       	rjmp	.+62     	; 0x2746 <main+0xa9a>
    2708:	fe 01       	movw	r30, r28
    270a:	e5 5e       	subi	r30, 0xE5	; 229
    270c:	fe 4f       	sbci	r31, 0xFE	; 254
    270e:	80 e7       	ldi	r24, 0x70	; 112
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
    2716:	fe 01       	movw	r30, r28
    2718:	e5 5e       	subi	r30, 0xE5	; 229
    271a:	fe 4f       	sbci	r31, 0xFE	; 254
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <main+0xa74>
    2724:	fe 01       	movw	r30, r28
    2726:	e5 5e       	subi	r30, 0xE5	; 229
    2728:	fe 4f       	sbci	r31, 0xFE	; 254
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	de 01       	movw	r26, r28
    2730:	a3 5e       	subi	r26, 0xE3	; 227
    2732:	be 4f       	sbci	r27, 0xFE	; 254
    2734:	fe 01       	movw	r30, r28
    2736:	e3 5e       	subi	r30, 0xE3	; 227
    2738:	fe 4f       	sbci	r31, 0xFE	; 254
    273a:	80 81       	ld	r24, Z
    273c:	91 81       	ldd	r25, Z+1	; 0x01
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	11 96       	adiw	r26, 0x01	; 1
    2742:	9c 93       	st	X, r25
    2744:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	fe 01       	movw	r30, r28
    2748:	e3 5e       	subi	r30, 0xE3	; 227
    274a:	fe 4f       	sbci	r31, 0xFE	; 254
    274c:	80 81       	ld	r24, Z
    274e:	91 81       	ldd	r25, Z+1	; 0x01
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	d1 f6       	brne	.-76     	; 0x2708 <main+0xa5c>
    2754:	b5 ce       	rjmp	.-662    	; 0x24c0 <main+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2756:	8e 01       	movw	r16, r28
    2758:	03 5e       	subi	r16, 0xE3	; 227
    275a:	1e 4f       	sbci	r17, 0xFE	; 254
    275c:	fe 01       	movw	r30, r28
    275e:	e1 5e       	subi	r30, 0xE1	; 225
    2760:	fe 4f       	sbci	r31, 0xFE	; 254
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	f8 01       	movw	r30, r16
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
    2778:	de 01       	movw	r26, r28
    277a:	a7 5e       	subi	r26, 0xE7	; 231
    277c:	be 4f       	sbci	r27, 0xFE	; 254
    277e:	fe 01       	movw	r30, r28
    2780:	e3 5e       	subi	r30, 0xE3	; 227
    2782:	fe 4f       	sbci	r31, 0xFE	; 254
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	9c 93       	st	X, r25
    278c:	8e 93       	st	-X, r24
    278e:	fe 01       	movw	r30, r28
    2790:	e7 5e       	subi	r30, 0xE7	; 231
    2792:	fe 4f       	sbci	r31, 0xFE	; 254
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <main+0xaec>
    279c:	fe 01       	movw	r30, r28
    279e:	e7 5e       	subi	r30, 0xE7	; 231
    27a0:	fe 4f       	sbci	r31, 0xFE	; 254
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	80 83       	st	Z, r24
    27a6:	8c ce       	rjmp	.-744    	; 0x24c0 <main+0x814>
      _delay_ms(20);
    }
  }
  wdt_reset();
    27a8:	a8 95       	wdr
  int res1 = i2c_rtc_read(&time, 1);
    27aa:	ce 01       	movw	r24, r28
    27ac:	85 55       	subi	r24, 0x55	; 85
    27ae:	9d 4f       	sbci	r25, 0xFD	; 253
    27b0:	61 e0       	ldi	r22, 0x01	; 1
    27b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    27b6:	fe 01       	movw	r30, r28
    27b8:	e7 55       	subi	r30, 0x57	; 87
    27ba:	fd 4f       	sbci	r31, 0xFD	; 253
    27bc:	88 2f       	mov	r24, r24
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	80 83       	st	Z, r24
  if (res1)
    27c4:	fe 01       	movw	r30, r28
    27c6:	e7 55       	subi	r30, 0x57	; 87
    27c8:	fd 4f       	sbci	r31, 0xFD	; 253
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	c1 f0       	breq	.+48     	; 0x2802 <main+0xb56>
  {
    TimeInfo(time, 0, 1);
    27d2:	fe 01       	movw	r30, r28
    27d4:	e5 55       	subi	r30, 0x55	; 85
    27d6:	fd 4f       	sbci	r31, 0xFD	; 253
    27d8:	c0 80       	ld	r12, Z
    27da:	d1 80       	ldd	r13, Z+1	; 0x01
    27dc:	e2 80       	ldd	r14, Z+2	; 0x02
    27de:	f3 80       	ldd	r15, Z+3	; 0x03
    27e0:	04 81       	ldd	r16, Z+4	; 0x04
    27e2:	15 81       	ldd	r17, Z+5	; 0x05
    27e4:	26 81       	ldd	r18, Z+6	; 0x06
    27e6:	37 81       	ldd	r19, Z+7	; 0x07
    27e8:	40 85       	ldd	r20, Z+8	; 0x08
    27ea:	51 85       	ldd	r21, Z+9	; 0x09
    27ec:	62 85       	ldd	r22, Z+10	; 0x0a
    27ee:	73 85       	ldd	r23, Z+11	; 0x0b
    27f0:	84 85       	ldd	r24, Z+12	; 0x0c
    27f2:	aa 24       	eor	r10, r10
    27f4:	bb 24       	eor	r11, r11
    27f6:	88 24       	eor	r8, r8
    27f8:	99 24       	eor	r9, r9
    27fa:	83 94       	inc	r8
    27fc:	0e 94 22 0c 	call	0x1844	; 0x1844 <TimeInfo>
    2800:	04 c0       	rjmp	.+8      	; 0x280a <main+0xb5e>
  }
  else
  {
    uartPuts(" ... RTC error!!!\r\n");
    2802:	8f ed       	ldi	r24, 0xDF	; 223
    2804:	92 e0       	ldi	r25, 0x02	; 2
    2806:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  }

  uartPuts("\r\n... LED Check");
    280a:	83 ef       	ldi	r24, 0xF3	; 243
    280c:	92 e0       	ldi	r25, 0x02	; 2
    280e:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  shift32_output(0);
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
  SetColor(0xFF, 0xFF, 0xFF, 0xFF);
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	6f ef       	ldi	r22, 0xFF	; 255
    2822:	4f ef       	ldi	r20, 0xFF	; 255
    2824:	2f ef       	ldi	r18, 0xFF	; 255
    2826:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>

  wdt_reset();
    282a:	a8 95       	wdr

  unsigned long uiScrollingBit = 0x80000000;
    282c:	fe 01       	movw	r30, r28
    282e:	eb 55       	subi	r30, 0x5B	; 91
    2830:	fd 4f       	sbci	r31, 0xFD	; 253
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 e0       	ldi	r26, 0x00	; 0
    2838:	b0 e8       	ldi	r27, 0x80	; 128
    283a:	80 83       	st	Z, r24
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	a2 83       	std	Z+2, r26	; 0x02
    2840:	b3 83       	std	Z+3, r27	; 0x03
    2842:	d2 c0       	rjmp	.+420    	; 0x29e8 <main+0xd3c>
  while (uiScrollingBit)
  {
    wdt_reset();
    2844:	a8 95       	wdr
    shift32_output(uiScrollingBit);
    2846:	fe 01       	movw	r30, r28
    2848:	eb 55       	subi	r30, 0x5B	; 91
    284a:	fd 4f       	sbci	r31, 0xFD	; 253
    284c:	80 81       	ld	r24, Z
    284e:	91 81       	ldd	r25, Z+1	; 0x01
    2850:	a2 81       	ldd	r26, Z+2	; 0x02
    2852:	b3 81       	ldd	r27, Z+3	; 0x03
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
    uiScrollingBit >>= 1;
    285c:	9e 01       	movw	r18, r28
    285e:	2b 55       	subi	r18, 0x5B	; 91
    2860:	3d 4f       	sbci	r19, 0xFD	; 253
    2862:	fe 01       	movw	r30, r28
    2864:	eb 55       	subi	r30, 0x5B	; 91
    2866:	fd 4f       	sbci	r31, 0xFD	; 253
    2868:	80 81       	ld	r24, Z
    286a:	91 81       	ldd	r25, Z+1	; 0x01
    286c:	a2 81       	ldd	r26, Z+2	; 0x02
    286e:	b3 81       	ldd	r27, Z+3	; 0x03
    2870:	b6 95       	lsr	r27
    2872:	a7 95       	ror	r26
    2874:	97 95       	ror	r25
    2876:	87 95       	ror	r24
    2878:	f9 01       	movw	r30, r18
    287a:	80 83       	st	Z, r24
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	a2 83       	std	Z+2, r26	; 0x02
    2880:	b3 83       	std	Z+3, r27	; 0x03
    2882:	fe 01       	movw	r30, r28
    2884:	eb 5e       	subi	r30, 0xEB	; 235
    2886:	fe 4f       	sbci	r31, 0xFE	; 254
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a0 ea       	ldi	r26, 0xA0	; 160
    288e:	b1 e4       	ldi	r27, 0x41	; 65
    2890:	80 83       	st	Z, r24
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	a2 83       	std	Z+2, r26	; 0x02
    2896:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2898:	8e 01       	movw	r16, r28
    289a:	0f 5e       	subi	r16, 0xEF	; 239
    289c:	1e 4f       	sbci	r17, 0xFE	; 254
    289e:	fe 01       	movw	r30, r28
    28a0:	eb 5e       	subi	r30, 0xEB	; 235
    28a2:	fe 4f       	sbci	r31, 0xFE	; 254
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	26 e6       	ldi	r18, 0x66	; 102
    28ae:	36 e6       	ldi	r19, 0x66	; 102
    28b0:	46 e6       	ldi	r20, 0x66	; 102
    28b2:	55 e4       	ldi	r21, 0x45	; 69
    28b4:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	f8 01       	movw	r30, r16
    28be:	80 83       	st	Z, r24
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	a2 83       	std	Z+2, r26	; 0x02
    28c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28c6:	fe 01       	movw	r30, r28
    28c8:	ef 5e       	subi	r30, 0xEF	; 239
    28ca:	fe 4f       	sbci	r31, 0xFE	; 254
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	44 f4       	brge	.+16     	; 0x28f4 <main+0xc48>
		__ticks = 1;
    28e4:	fe 01       	movw	r30, r28
    28e6:	e1 5f       	subi	r30, 0xF1	; 241
    28e8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	80 83       	st	Z, r24
    28f2:	64 c0       	rjmp	.+200    	; 0x29bc <main+0xd10>
	else if (__tmp > 65535)
    28f4:	fe 01       	movw	r30, r28
    28f6:	ef 5e       	subi	r30, 0xEF	; 239
    28f8:	fe 4f       	sbci	r31, 0xFE	; 254
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	3f ef       	ldi	r19, 0xFF	; 255
    2906:	4f e7       	ldi	r20, 0x7F	; 127
    2908:	57 e4       	ldi	r21, 0x47	; 71
    290a:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    290e:	18 16       	cp	r1, r24
    2910:	0c f0       	brlt	.+2      	; 0x2914 <main+0xc68>
    2912:	43 c0       	rjmp	.+134    	; 0x299a <main+0xcee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	fe 01       	movw	r30, r28
    2916:	eb 5e       	subi	r30, 0xEB	; 235
    2918:	fe 4f       	sbci	r31, 0xFE	; 254
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8e 01       	movw	r16, r28
    2934:	01 5f       	subi	r16, 0xF1	; 241
    2936:	1e 4f       	sbci	r17, 0xFE	; 254
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	f8 01       	movw	r30, r16
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	1f c0       	rjmp	.+62     	; 0x298a <main+0xcde>
    294c:	fe 01       	movw	r30, r28
    294e:	e3 5f       	subi	r30, 0xF3	; 243
    2950:	fe 4f       	sbci	r31, 0xFE	; 254
    2952:	80 e7       	ldi	r24, 0x70	; 112
    2954:	91 e0       	ldi	r25, 0x01	; 1
    2956:	91 83       	std	Z+1, r25	; 0x01
    2958:	80 83       	st	Z, r24
    295a:	fe 01       	movw	r30, r28
    295c:	e3 5f       	subi	r30, 0xF3	; 243
    295e:	fe 4f       	sbci	r31, 0xFE	; 254
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <main+0xcb8>
    2968:	fe 01       	movw	r30, r28
    296a:	e3 5f       	subi	r30, 0xF3	; 243
    296c:	fe 4f       	sbci	r31, 0xFE	; 254
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2972:	de 01       	movw	r26, r28
    2974:	a1 5f       	subi	r26, 0xF1	; 241
    2976:	be 4f       	sbci	r27, 0xFE	; 254
    2978:	fe 01       	movw	r30, r28
    297a:	e1 5f       	subi	r30, 0xF1	; 241
    297c:	fe 4f       	sbci	r31, 0xFE	; 254
    297e:	80 81       	ld	r24, Z
    2980:	91 81       	ldd	r25, Z+1	; 0x01
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	11 96       	adiw	r26, 0x01	; 1
    2986:	9c 93       	st	X, r25
    2988:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	fe 01       	movw	r30, r28
    298c:	e1 5f       	subi	r30, 0xF1	; 241
    298e:	fe 4f       	sbci	r31, 0xFE	; 254
    2990:	80 81       	ld	r24, Z
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	d1 f6       	brne	.-76     	; 0x294c <main+0xca0>
    2998:	27 c0       	rjmp	.+78     	; 0x29e8 <main+0xd3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299a:	8e 01       	movw	r16, r28
    299c:	01 5f       	subi	r16, 0xF1	; 241
    299e:	1e 4f       	sbci	r17, 0xFE	; 254
    29a0:	fe 01       	movw	r30, r28
    29a2:	ef 5e       	subi	r30, 0xEF	; 239
    29a4:	fe 4f       	sbci	r31, 0xFE	; 254
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	f8 01       	movw	r30, r16
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	80 83       	st	Z, r24
    29bc:	de 01       	movw	r26, r28
    29be:	a5 5f       	subi	r26, 0xF5	; 245
    29c0:	be 4f       	sbci	r27, 0xFE	; 254
    29c2:	fe 01       	movw	r30, r28
    29c4:	e1 5f       	subi	r30, 0xF1	; 241
    29c6:	fe 4f       	sbci	r31, 0xFE	; 254
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	8d 93       	st	X+, r24
    29ce:	9c 93       	st	X, r25
    29d0:	fe 01       	movw	r30, r28
    29d2:	e5 5f       	subi	r30, 0xF5	; 245
    29d4:	fe 4f       	sbci	r31, 0xFE	; 254
    29d6:	80 81       	ld	r24, Z
    29d8:	91 81       	ldd	r25, Z+1	; 0x01
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <main+0xd2e>
    29de:	fe 01       	movw	r30, r28
    29e0:	e5 5f       	subi	r30, 0xF5	; 245
    29e2:	fe 4f       	sbci	r31, 0xFE	; 254
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	80 83       	st	Z, r24
  SetColor(0xFF, 0xFF, 0xFF, 0xFF);

  wdt_reset();

  unsigned long uiScrollingBit = 0x80000000;
  while (uiScrollingBit)
    29e8:	fe 01       	movw	r30, r28
    29ea:	eb 55       	subi	r30, 0x5B	; 91
    29ec:	fd 4f       	sbci	r31, 0xFD	; 253
    29ee:	80 81       	ld	r24, Z
    29f0:	91 81       	ldd	r25, Z+1	; 0x01
    29f2:	a2 81       	ldd	r26, Z+2	; 0x02
    29f4:	b3 81       	ldd	r27, Z+3	; 0x03
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	a1 05       	cpc	r26, r1
    29fa:	b1 05       	cpc	r27, r1
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <main+0xd54>
    29fe:	22 cf       	rjmp	.-444    	; 0x2844 <main+0xb98>
    wdt_reset();
    shift32_output(uiScrollingBit);
    uiScrollingBit >>= 1;
    _delay_ms(20);
  }
  shift32_output(uiScrollingBit);
    2a00:	fe 01       	movw	r30, r28
    2a02:	eb 55       	subi	r30, 0x5B	; 91
    2a04:	fd 4f       	sbci	r31, 0xFD	; 253
    2a06:	80 81       	ld	r24, Z
    2a08:	91 81       	ldd	r25, Z+1	; 0x01
    2a0a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a0c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
  for (int cyx = 0; cyx < 50; cyx++)
    2a16:	fe 01       	movw	r30, r28
    2a18:	eb 56       	subi	r30, 0x6B	; 107
    2a1a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a1c:	11 82       	std	Z+1, r1	; 0x01
    2a1e:	10 82       	st	Z, r1
    2a20:	c0 c0       	rjmp	.+384    	; 0x2ba2 <main+0xef6>
  {
    wdt_reset();
    2a22:	a8 95       	wdr
    2a24:	fe 01       	movw	r30, r28
    2a26:	e9 5f       	subi	r30, 0xF9	; 249
    2a28:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	a0 e2       	ldi	r26, 0x20	; 32
    2a30:	b1 e4       	ldi	r27, 0x41	; 65
    2a32:	80 83       	st	Z, r24
    2a34:	91 83       	std	Z+1, r25	; 0x01
    2a36:	a2 83       	std	Z+2, r26	; 0x02
    2a38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3a:	8e 01       	movw	r16, r28
    2a3c:	0d 5f       	subi	r16, 0xFD	; 253
    2a3e:	1e 4f       	sbci	r17, 0xFE	; 254
    2a40:	fe 01       	movw	r30, r28
    2a42:	e9 5f       	subi	r30, 0xF9	; 249
    2a44:	fe 4f       	sbci	r31, 0xFE	; 254
    2a46:	60 81       	ld	r22, Z
    2a48:	71 81       	ldd	r23, Z+1	; 0x01
    2a4a:	82 81       	ldd	r24, Z+2	; 0x02
    2a4c:	93 81       	ldd	r25, Z+3	; 0x03
    2a4e:	26 e6       	ldi	r18, 0x66	; 102
    2a50:	36 e6       	ldi	r19, 0x66	; 102
    2a52:	46 e6       	ldi	r20, 0x66	; 102
    2a54:	55 e4       	ldi	r21, 0x45	; 69
    2a56:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	f8 01       	movw	r30, r16
    2a60:	80 83       	st	Z, r24
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	a2 83       	std	Z+2, r26	; 0x02
    2a66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ed 5f       	subi	r30, 0xFD	; 253
    2a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	44 f4       	brge	.+16     	; 0x2a96 <main+0xdea>
		__ticks = 1;
    2a86:	fe 01       	movw	r30, r28
    2a88:	ef 5f       	subi	r30, 0xFF	; 255
    2a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	80 83       	st	Z, r24
    2a94:	64 c0       	rjmp	.+200    	; 0x2b5e <main+0xeb2>
	else if (__tmp > 65535)
    2a96:	fe 01       	movw	r30, r28
    2a98:	ed 5f       	subi	r30, 0xFD	; 253
    2a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	0c f0       	brlt	.+2      	; 0x2ab6 <main+0xe0a>
    2ab4:	43 c0       	rjmp	.+134    	; 0x2b3c <main+0xe90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e9 5f       	subi	r30, 0xF9	; 249
    2aba:	fe 4f       	sbci	r31, 0xFE	; 254
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e2       	ldi	r20, 0x20	; 32
    2aca:	51 e4       	ldi	r21, 0x41	; 65
    2acc:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	8e 01       	movw	r16, r28
    2ad6:	0f 5f       	subi	r16, 0xFF	; 255
    2ad8:	1e 4f       	sbci	r17, 0xFE	; 254
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
    2aec:	1f c0       	rjmp	.+62     	; 0x2b2c <main+0xe80>
    2aee:	fe 01       	movw	r30, r28
    2af0:	e1 50       	subi	r30, 0x01	; 1
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	80 e7       	ldi	r24, 0x70	; 112
    2af6:	91 e0       	ldi	r25, 0x01	; 1
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	80 83       	st	Z, r24
    2afc:	fe 01       	movw	r30, r28
    2afe:	e1 50       	subi	r30, 0x01	; 1
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <main+0xe5a>
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e1 50       	subi	r30, 0x01	; 1
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	de 01       	movw	r26, r28
    2b16:	af 5f       	subi	r26, 0xFF	; 255
    2b18:	be 4f       	sbci	r27, 0xFE	; 254
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	ef 5f       	subi	r30, 0xFF	; 255
    2b1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	11 96       	adiw	r26, 0x01	; 1
    2b28:	9c 93       	st	X, r25
    2b2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ef 5f       	subi	r30, 0xFF	; 255
    2b30:	fe 4f       	sbci	r31, 0xFE	; 254
    2b32:	80 81       	ld	r24, Z
    2b34:	91 81       	ldd	r25, Z+1	; 0x01
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	d1 f6       	brne	.-76     	; 0x2aee <main+0xe42>
    2b3a:	27 c0       	rjmp	.+78     	; 0x2b8a <main+0xede>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3c:	8e 01       	movw	r16, r28
    2b3e:	0f 5f       	subi	r16, 0xFF	; 255
    2b40:	1e 4f       	sbci	r17, 0xFE	; 254
    2b42:	fe 01       	movw	r30, r28
    2b44:	ed 5f       	subi	r30, 0xFD	; 253
    2b46:	fe 4f       	sbci	r31, 0xFE	; 254
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	f8 01       	movw	r30, r16
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    2b5e:	de 01       	movw	r26, r28
    2b60:	a3 50       	subi	r26, 0x03	; 3
    2b62:	bf 4f       	sbci	r27, 0xFF	; 255
    2b64:	fe 01       	movw	r30, r28
    2b66:	ef 5f       	subi	r30, 0xFF	; 255
    2b68:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	8d 93       	st	X+, r24
    2b70:	9c 93       	st	X, r25
    2b72:	fe 01       	movw	r30, r28
    2b74:	e3 50       	subi	r30, 0x03	; 3
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <main+0xed0>
    2b80:	fe 01       	movw	r30, r28
    2b82:	e3 50       	subi	r30, 0x03	; 3
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	80 83       	st	Z, r24
    shift32_output(uiScrollingBit);
    uiScrollingBit >>= 1;
    _delay_ms(20);
  }
  shift32_output(uiScrollingBit);
  for (int cyx = 0; cyx < 50; cyx++)
    2b8a:	de 01       	movw	r26, r28
    2b8c:	ab 56       	subi	r26, 0x6B	; 107
    2b8e:	bd 4f       	sbci	r27, 0xFD	; 253
    2b90:	fe 01       	movw	r30, r28
    2b92:	eb 56       	subi	r30, 0x6B	; 107
    2b94:	fd 4f       	sbci	r31, 0xFD	; 253
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	11 96       	adiw	r26, 0x01	; 1
    2b9e:	9c 93       	st	X, r25
    2ba0:	8e 93       	st	-X, r24
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	eb 56       	subi	r30, 0x6B	; 107
    2ba6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	82 33       	cpi	r24, 0x32	; 50
    2bae:	91 05       	cpc	r25, r1
    2bb0:	0c f4       	brge	.+2      	; 0x2bb4 <main+0xf08>
    2bb2:	37 cf       	rjmp	.-402    	; 0x2a22 <main+0xd76>
  {
    wdt_reset();
    _delay_ms(10);
  }
  uiScrollingBit = 1;
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	eb 55       	subi	r30, 0x5B	; 91
    2bb8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e0       	ldi	r26, 0x00	; 0
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	80 83       	st	Z, r24
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	a2 83       	std	Z+2, r26	; 0x02
    2bc8:	b3 83       	std	Z+3, r27	; 0x03
    2bca:	d2 c0       	rjmp	.+420    	; 0x2d70 <main+0x10c4>
  while (uiScrollingBit)
  {
    wdt_reset();
    2bcc:	a8 95       	wdr
    shift32_output(uiScrollingBit);
    2bce:	fe 01       	movw	r30, r28
    2bd0:	eb 55       	subi	r30, 0x5B	; 91
    2bd2:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	a2 81       	ldd	r26, Z+2	; 0x02
    2bda:	b3 81       	ldd	r27, Z+3	; 0x03
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
    uiScrollingBit <<= 1;
    2be4:	9e 01       	movw	r18, r28
    2be6:	2b 55       	subi	r18, 0x5B	; 91
    2be8:	3d 4f       	sbci	r19, 0xFD	; 253
    2bea:	fe 01       	movw	r30, r28
    2bec:	eb 55       	subi	r30, 0x5B	; 91
    2bee:	fd 4f       	sbci	r31, 0xFD	; 253
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	a2 81       	ldd	r26, Z+2	; 0x02
    2bf6:	b3 81       	ldd	r27, Z+3	; 0x03
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	aa 1f       	adc	r26, r26
    2bfe:	bb 1f       	adc	r27, r27
    2c00:	f9 01       	movw	r30, r18
    2c02:	80 83       	st	Z, r24
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	a2 83       	std	Z+2, r26	; 0x02
    2c08:	b3 83       	std	Z+3, r27	; 0x03
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e7 50       	subi	r30, 0x07	; 7
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	a0 ea       	ldi	r26, 0xA0	; 160
    2c16:	b1 e4       	ldi	r27, 0x41	; 65
    2c18:	80 83       	st	Z, r24
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	a2 83       	std	Z+2, r26	; 0x02
    2c1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	8e 01       	movw	r16, r28
    2c22:	0b 50       	subi	r16, 0x0B	; 11
    2c24:	1f 4f       	sbci	r17, 0xFF	; 255
    2c26:	fe 01       	movw	r30, r28
    2c28:	e7 50       	subi	r30, 0x07	; 7
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	60 81       	ld	r22, Z
    2c2e:	71 81       	ldd	r23, Z+1	; 0x01
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	26 e6       	ldi	r18, 0x66	; 102
    2c36:	36 e6       	ldi	r19, 0x66	; 102
    2c38:	46 e6       	ldi	r20, 0x66	; 102
    2c3a:	55 e4       	ldi	r21, 0x45	; 69
    2c3c:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	f8 01       	movw	r30, r16
    2c46:	80 83       	st	Z, r24
    2c48:	91 83       	std	Z+1, r25	; 0x01
    2c4a:	a2 83       	std	Z+2, r26	; 0x02
    2c4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c4e:	fe 01       	movw	r30, r28
    2c50:	eb 50       	subi	r30, 0x0B	; 11
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	44 f4       	brge	.+16     	; 0x2c7c <main+0xfd0>
		__ticks = 1;
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	ed 50       	subi	r30, 0x0D	; 13
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	80 83       	st	Z, r24
    2c7a:	64 c0       	rjmp	.+200    	; 0x2d44 <main+0x1098>
	else if (__tmp > 65535)
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	eb 50       	subi	r30, 0x0B	; 11
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	3f ef       	ldi	r19, 0xFF	; 255
    2c8e:	4f e7       	ldi	r20, 0x7F	; 127
    2c90:	57 e4       	ldi	r21, 0x47	; 71
    2c92:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    2c96:	18 16       	cp	r1, r24
    2c98:	0c f0       	brlt	.+2      	; 0x2c9c <main+0xff0>
    2c9a:	43 c0       	rjmp	.+134    	; 0x2d22 <main+0x1076>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e7 50       	subi	r30, 0x07	; 7
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8e 01       	movw	r16, r28
    2cbc:	0d 50       	subi	r16, 0x0D	; 13
    2cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	f8 01       	movw	r30, r16
    2cce:	91 83       	std	Z+1, r25	; 0x01
    2cd0:	80 83       	st	Z, r24
    2cd2:	1f c0       	rjmp	.+62     	; 0x2d12 <main+0x1066>
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ef 50       	subi	r30, 0x0F	; 15
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 e7       	ldi	r24, 0x70	; 112
    2cdc:	91 e0       	ldi	r25, 0x01	; 1
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ef 50       	subi	r30, 0x0F	; 15
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 81       	ld	r24, Z
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <main+0x1040>
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ef 50       	subi	r30, 0x0F	; 15
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfa:	de 01       	movw	r26, r28
    2cfc:	ad 50       	subi	r26, 0x0D	; 13
    2cfe:	bf 4f       	sbci	r27, 0xFF	; 255
    2d00:	fe 01       	movw	r30, r28
    2d02:	ed 50       	subi	r30, 0x0D	; 13
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	11 96       	adiw	r26, 0x01	; 1
    2d0e:	9c 93       	st	X, r25
    2d10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d12:	fe 01       	movw	r30, r28
    2d14:	ed 50       	subi	r30, 0x0D	; 13
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	80 81       	ld	r24, Z
    2d1a:	91 81       	ldd	r25, Z+1	; 0x01
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	d1 f6       	brne	.-76     	; 0x2cd4 <main+0x1028>
    2d20:	27 c0       	rjmp	.+78     	; 0x2d70 <main+0x10c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d22:	8e 01       	movw	r16, r28
    2d24:	0d 50       	subi	r16, 0x0D	; 13
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	fe 01       	movw	r30, r28
    2d2a:	eb 50       	subi	r30, 0x0B	; 11
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	f8 01       	movw	r30, r16
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	80 83       	st	Z, r24
    2d44:	de 01       	movw	r26, r28
    2d46:	a1 51       	subi	r26, 0x11	; 17
    2d48:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	ed 50       	subi	r30, 0x0D	; 13
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	80 81       	ld	r24, Z
    2d52:	91 81       	ldd	r25, Z+1	; 0x01
    2d54:	8d 93       	st	X+, r24
    2d56:	9c 93       	st	X, r25
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e1 51       	subi	r30, 0x11	; 17
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <main+0x10b6>
    2d66:	fe 01       	movw	r30, r28
    2d68:	e1 51       	subi	r30, 0x11	; 17
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
  {
    wdt_reset();
    _delay_ms(10);
  }
  uiScrollingBit = 1;
  while (uiScrollingBit)
    2d70:	fe 01       	movw	r30, r28
    2d72:	eb 55       	subi	r30, 0x5B	; 91
    2d74:	fd 4f       	sbci	r31, 0xFD	; 253
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	a2 81       	ldd	r26, Z+2	; 0x02
    2d7c:	b3 81       	ldd	r27, Z+3	; 0x03
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	a1 05       	cpc	r26, r1
    2d82:	b1 05       	cpc	r27, r1
    2d84:	09 f0       	breq	.+2      	; 0x2d88 <main+0x10dc>
    2d86:	22 cf       	rjmp	.-444    	; 0x2bcc <main+0xf20>
    shift32_output(uiScrollingBit);
    uiScrollingBit <<= 1;
    _delay_ms(20);
  }

  wdt_reset();
    2d88:	a8 95       	wdr

  uartPuts("\r\n... RGB Check");
    2d8a:	83 e0       	ldi	r24, 0x03	; 3
    2d8c:	93 e0       	ldi	r25, 0x03	; 3
    2d8e:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  shift32_output(0xffffffff);
    2d92:	6f ef       	ldi	r22, 0xFF	; 255
    2d94:	7f ef       	ldi	r23, 0xFF	; 255
    2d96:	8f ef       	ldi	r24, 0xFF	; 255
    2d98:	9f ef       	ldi	r25, 0xFF	; 255
    2d9a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
  SetColor(0x7F, 0xFF, 0x00, 0x00);
    2d9e:	8f e7       	ldi	r24, 0x7F	; 127
    2da0:	6f ef       	ldi	r22, 0xFF	; 255
    2da2:	40 e0       	ldi	r20, 0x00	; 0
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
  for (int cyx = 0; cyx < 20; cyx++)
    2daa:	fe 01       	movw	r30, r28
    2dac:	ed 56       	subi	r30, 0x6D	; 109
    2dae:	fd 4f       	sbci	r31, 0xFD	; 253
    2db0:	11 82       	std	Z+1, r1	; 0x01
    2db2:	10 82       	st	Z, r1
    2db4:	c0 c0       	rjmp	.+384    	; 0x2f36 <main+0x128a>
  {
    wdt_reset();
    2db6:	a8 95       	wdr
    2db8:	fe 01       	movw	r30, r28
    2dba:	e5 51       	subi	r30, 0x15	; 21
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a0 e2       	ldi	r26, 0x20	; 32
    2dc4:	b1 e4       	ldi	r27, 0x41	; 65
    2dc6:	80 83       	st	Z, r24
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	a2 83       	std	Z+2, r26	; 0x02
    2dcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dce:	8e 01       	movw	r16, r28
    2dd0:	09 51       	subi	r16, 0x19	; 25
    2dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e5 51       	subi	r30, 0x15	; 21
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	60 81       	ld	r22, Z
    2ddc:	71 81       	ldd	r23, Z+1	; 0x01
    2dde:	82 81       	ldd	r24, Z+2	; 0x02
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	26 e6       	ldi	r18, 0x66	; 102
    2de4:	36 e6       	ldi	r19, 0x66	; 102
    2de6:	46 e6       	ldi	r20, 0x66	; 102
    2de8:	55 e4       	ldi	r21, 0x45	; 69
    2dea:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	f8 01       	movw	r30, r16
    2df4:	80 83       	st	Z, r24
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	a2 83       	std	Z+2, r26	; 0x02
    2dfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e9 51       	subi	r30, 0x19	; 25
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	60 81       	ld	r22, Z
    2e04:	71 81       	ldd	r23, Z+1	; 0x01
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e8       	ldi	r20, 0x80	; 128
    2e10:	5f e3       	ldi	r21, 0x3F	; 63
    2e12:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    2e16:	88 23       	and	r24, r24
    2e18:	44 f4       	brge	.+16     	; 0x2e2a <main+0x117e>
		__ticks = 1;
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	eb 51       	subi	r30, 0x1B	; 27
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	91 83       	std	Z+1, r25	; 0x01
    2e26:	80 83       	st	Z, r24
    2e28:	64 c0       	rjmp	.+200    	; 0x2ef2 <main+0x1246>
	else if (__tmp > 65535)
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e9 51       	subi	r30, 0x19	; 25
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	3f ef       	ldi	r19, 0xFF	; 255
    2e3c:	4f e7       	ldi	r20, 0x7F	; 127
    2e3e:	57 e4       	ldi	r21, 0x47	; 71
    2e40:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    2e44:	18 16       	cp	r1, r24
    2e46:	0c f0       	brlt	.+2      	; 0x2e4a <main+0x119e>
    2e48:	43 c0       	rjmp	.+134    	; 0x2ed0 <main+0x1224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e5 51       	subi	r30, 0x15	; 21
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	60 81       	ld	r22, Z
    2e52:	71 81       	ldd	r23, Z+1	; 0x01
    2e54:	82 81       	ldd	r24, Z+2	; 0x02
    2e56:	93 81       	ldd	r25, Z+3	; 0x03
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e2       	ldi	r20, 0x20	; 32
    2e5e:	51 e4       	ldi	r21, 0x41	; 65
    2e60:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	8e 01       	movw	r16, r28
    2e6a:	0b 51       	subi	r16, 0x1B	; 27
    2e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6e:	bc 01       	movw	r22, r24
    2e70:	cd 01       	movw	r24, r26
    2e72:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	f8 01       	movw	r30, r16
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	80 83       	st	Z, r24
    2e80:	1f c0       	rjmp	.+62     	; 0x2ec0 <main+0x1214>
    2e82:	fe 01       	movw	r30, r28
    2e84:	ed 51       	subi	r30, 0x1D	; 29
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	80 e7       	ldi	r24, 0x70	; 112
    2e8a:	91 e0       	ldi	r25, 0x01	; 1
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	80 83       	st	Z, r24
    2e90:	fe 01       	movw	r30, r28
    2e92:	ed 51       	subi	r30, 0x1D	; 29
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <main+0x11ee>
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	ed 51       	subi	r30, 0x1D	; 29
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea8:	de 01       	movw	r26, r28
    2eaa:	ab 51       	subi	r26, 0x1B	; 27
    2eac:	bf 4f       	sbci	r27, 0xFF	; 255
    2eae:	fe 01       	movw	r30, r28
    2eb0:	eb 51       	subi	r30, 0x1B	; 27
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	11 96       	adiw	r26, 0x01	; 1
    2ebc:	9c 93       	st	X, r25
    2ebe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	eb 51       	subi	r30, 0x1B	; 27
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	d1 f6       	brne	.-76     	; 0x2e82 <main+0x11d6>
    2ece:	27 c0       	rjmp	.+78     	; 0x2f1e <main+0x1272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed0:	8e 01       	movw	r16, r28
    2ed2:	0b 51       	subi	r16, 0x1B	; 27
    2ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e9 51       	subi	r30, 0x19	; 25
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	f8 01       	movw	r30, r16
    2eee:	91 83       	std	Z+1, r25	; 0x01
    2ef0:	80 83       	st	Z, r24
    2ef2:	de 01       	movw	r26, r28
    2ef4:	af 51       	subi	r26, 0x1F	; 31
    2ef6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef8:	fe 01       	movw	r30, r28
    2efa:	eb 51       	subi	r30, 0x1B	; 27
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	80 81       	ld	r24, Z
    2f00:	91 81       	ldd	r25, Z+1	; 0x01
    2f02:	8d 93       	st	X+, r24
    2f04:	9c 93       	st	X, r25
    2f06:	fe 01       	movw	r30, r28
    2f08:	ef 51       	subi	r30, 0x1F	; 31
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <main+0x1264>
    2f14:	fe 01       	movw	r30, r28
    2f16:	ef 51       	subi	r30, 0x1F	; 31
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	91 83       	std	Z+1, r25	; 0x01
    2f1c:	80 83       	st	Z, r24
  wdt_reset();

  uartPuts("\r\n... RGB Check");
  shift32_output(0xffffffff);
  SetColor(0x7F, 0xFF, 0x00, 0x00);
  for (int cyx = 0; cyx < 20; cyx++)
    2f1e:	de 01       	movw	r26, r28
    2f20:	ad 56       	subi	r26, 0x6D	; 109
    2f22:	bd 4f       	sbci	r27, 0xFD	; 253
    2f24:	fe 01       	movw	r30, r28
    2f26:	ed 56       	subi	r30, 0x6D	; 109
    2f28:	fd 4f       	sbci	r31, 0xFD	; 253
    2f2a:	80 81       	ld	r24, Z
    2f2c:	91 81       	ldd	r25, Z+1	; 0x01
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	11 96       	adiw	r26, 0x01	; 1
    2f32:	9c 93       	st	X, r25
    2f34:	8e 93       	st	-X, r24
    2f36:	fe 01       	movw	r30, r28
    2f38:	ed 56       	subi	r30, 0x6D	; 109
    2f3a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f3c:	80 81       	ld	r24, Z
    2f3e:	91 81       	ldd	r25, Z+1	; 0x01
    2f40:	84 31       	cpi	r24, 0x14	; 20
    2f42:	91 05       	cpc	r25, r1
    2f44:	0c f4       	brge	.+2      	; 0x2f48 <main+0x129c>
    2f46:	37 cf       	rjmp	.-402    	; 0x2db6 <main+0x110a>
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x7F, 0x00, 0xFF, 0x00);
    2f48:	8f e7       	ldi	r24, 0x7F	; 127
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	4f ef       	ldi	r20, 0xFF	; 255
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
  for (int cyx = 0; cyx < 20; cyx++)
    2f54:	fe 01       	movw	r30, r28
    2f56:	ef 56       	subi	r30, 0x6F	; 111
    2f58:	fd 4f       	sbci	r31, 0xFD	; 253
    2f5a:	11 82       	std	Z+1, r1	; 0x01
    2f5c:	10 82       	st	Z, r1
    2f5e:	c0 c0       	rjmp	.+384    	; 0x30e0 <main+0x1434>
  {
    wdt_reset();
    2f60:	a8 95       	wdr
    2f62:	fe 01       	movw	r30, r28
    2f64:	e3 52       	subi	r30, 0x23	; 35
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	a0 e2       	ldi	r26, 0x20	; 32
    2f6e:	b1 e4       	ldi	r27, 0x41	; 65
    2f70:	80 83       	st	Z, r24
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	a2 83       	std	Z+2, r26	; 0x02
    2f76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f78:	8e 01       	movw	r16, r28
    2f7a:	07 52       	subi	r16, 0x27	; 39
    2f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e3 52       	subi	r30, 0x23	; 35
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	60 81       	ld	r22, Z
    2f86:	71 81       	ldd	r23, Z+1	; 0x01
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	26 e6       	ldi	r18, 0x66	; 102
    2f8e:	36 e6       	ldi	r19, 0x66	; 102
    2f90:	46 e6       	ldi	r20, 0x66	; 102
    2f92:	55 e4       	ldi	r21, 0x45	; 69
    2f94:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	80 83       	st	Z, r24
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	a2 83       	std	Z+2, r26	; 0x02
    2fa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e7 52       	subi	r30, 0x27	; 39
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	60 81       	ld	r22, Z
    2fae:	71 81       	ldd	r23, Z+1	; 0x01
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e8       	ldi	r20, 0x80	; 128
    2fba:	5f e3       	ldi	r21, 0x3F	; 63
    2fbc:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    2fc0:	88 23       	and	r24, r24
    2fc2:	44 f4       	brge	.+16     	; 0x2fd4 <main+0x1328>
		__ticks = 1;
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e9 52       	subi	r30, 0x29	; 41
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
    2fd2:	64 c0       	rjmp	.+200    	; 0x309c <main+0x13f0>
	else if (__tmp > 65535)
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e7 52       	subi	r30, 0x27	; 39
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	0c f0       	brlt	.+2      	; 0x2ff4 <main+0x1348>
    2ff2:	43 c0       	rjmp	.+134    	; 0x307a <main+0x13ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e3 52       	subi	r30, 0x23	; 35
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	60 81       	ld	r22, Z
    2ffc:	71 81       	ldd	r23, Z+1	; 0x01
    2ffe:	82 81       	ldd	r24, Z+2	; 0x02
    3000:	93 81       	ldd	r25, Z+3	; 0x03
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e2       	ldi	r20, 0x20	; 32
    3008:	51 e4       	ldi	r21, 0x41	; 65
    300a:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	8e 01       	movw	r16, r28
    3014:	09 52       	subi	r16, 0x29	; 41
    3016:	1f 4f       	sbci	r17, 0xFF	; 255
    3018:	bc 01       	movw	r22, r24
    301a:	cd 01       	movw	r24, r26
    301c:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	f8 01       	movw	r30, r16
    3026:	91 83       	std	Z+1, r25	; 0x01
    3028:	80 83       	st	Z, r24
    302a:	1f c0       	rjmp	.+62     	; 0x306a <main+0x13be>
    302c:	fe 01       	movw	r30, r28
    302e:	eb 52       	subi	r30, 0x2B	; 43
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 e7       	ldi	r24, 0x70	; 112
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
    303a:	fe 01       	movw	r30, r28
    303c:	eb 52       	subi	r30, 0x2B	; 43
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	80 81       	ld	r24, Z
    3042:	91 81       	ldd	r25, Z+1	; 0x01
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <main+0x1398>
    3048:	fe 01       	movw	r30, r28
    304a:	eb 52       	subi	r30, 0x2B	; 43
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	91 83       	std	Z+1, r25	; 0x01
    3050:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3052:	de 01       	movw	r26, r28
    3054:	a9 52       	subi	r26, 0x29	; 41
    3056:	bf 4f       	sbci	r27, 0xFF	; 255
    3058:	fe 01       	movw	r30, r28
    305a:	e9 52       	subi	r30, 0x29	; 41
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	80 81       	ld	r24, Z
    3060:	91 81       	ldd	r25, Z+1	; 0x01
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	11 96       	adiw	r26, 0x01	; 1
    3066:	9c 93       	st	X, r25
    3068:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306a:	fe 01       	movw	r30, r28
    306c:	e9 52       	subi	r30, 0x29	; 41
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	d1 f6       	brne	.-76     	; 0x302c <main+0x1380>
    3078:	27 c0       	rjmp	.+78     	; 0x30c8 <main+0x141c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	8e 01       	movw	r16, r28
    307c:	09 52       	subi	r16, 0x29	; 41
    307e:	1f 4f       	sbci	r17, 0xFF	; 255
    3080:	fe 01       	movw	r30, r28
    3082:	e7 52       	subi	r30, 0x27	; 39
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	60 81       	ld	r22, Z
    3088:	71 81       	ldd	r23, Z+1	; 0x01
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	f8 01       	movw	r30, r16
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
    309c:	de 01       	movw	r26, r28
    309e:	ad 52       	subi	r26, 0x2D	; 45
    30a0:	bf 4f       	sbci	r27, 0xFF	; 255
    30a2:	fe 01       	movw	r30, r28
    30a4:	e9 52       	subi	r30, 0x29	; 41
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	8d 93       	st	X+, r24
    30ae:	9c 93       	st	X, r25
    30b0:	fe 01       	movw	r30, r28
    30b2:	ed 52       	subi	r30, 0x2D	; 45
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <main+0x140e>
    30be:	fe 01       	movw	r30, r28
    30c0:	ed 52       	subi	r30, 0x2D	; 45
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	80 83       	st	Z, r24
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x7F, 0x00, 0xFF, 0x00);
  for (int cyx = 0; cyx < 20; cyx++)
    30c8:	de 01       	movw	r26, r28
    30ca:	af 56       	subi	r26, 0x6F	; 111
    30cc:	bd 4f       	sbci	r27, 0xFD	; 253
    30ce:	fe 01       	movw	r30, r28
    30d0:	ef 56       	subi	r30, 0x6F	; 111
    30d2:	fd 4f       	sbci	r31, 0xFD	; 253
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	11 96       	adiw	r26, 0x01	; 1
    30dc:	9c 93       	st	X, r25
    30de:	8e 93       	st	-X, r24
    30e0:	fe 01       	movw	r30, r28
    30e2:	ef 56       	subi	r30, 0x6F	; 111
    30e4:	fd 4f       	sbci	r31, 0xFD	; 253
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	84 31       	cpi	r24, 0x14	; 20
    30ec:	91 05       	cpc	r25, r1
    30ee:	0c f4       	brge	.+2      	; 0x30f2 <main+0x1446>
    30f0:	37 cf       	rjmp	.-402    	; 0x2f60 <main+0x12b4>
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x7F, 0x00, 0x00, 0xFF);
    30f2:	8f e7       	ldi	r24, 0x7F	; 127
    30f4:	60 e0       	ldi	r22, 0x00	; 0
    30f6:	40 e0       	ldi	r20, 0x00	; 0
    30f8:	2f ef       	ldi	r18, 0xFF	; 255
    30fa:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
  for (int cyx = 0; cyx < 20; cyx++)
    30fe:	fe 01       	movw	r30, r28
    3100:	e1 57       	subi	r30, 0x71	; 113
    3102:	fd 4f       	sbci	r31, 0xFD	; 253
    3104:	11 82       	std	Z+1, r1	; 0x01
    3106:	10 82       	st	Z, r1
    3108:	c0 c0       	rjmp	.+384    	; 0x328a <main+0x15de>
  {
    wdt_reset();
    310a:	a8 95       	wdr
    310c:	fe 01       	movw	r30, r28
    310e:	e1 53       	subi	r30, 0x31	; 49
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	a0 e2       	ldi	r26, 0x20	; 32
    3118:	b1 e4       	ldi	r27, 0x41	; 65
    311a:	80 83       	st	Z, r24
    311c:	91 83       	std	Z+1, r25	; 0x01
    311e:	a2 83       	std	Z+2, r26	; 0x02
    3120:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3122:	8e 01       	movw	r16, r28
    3124:	05 53       	subi	r16, 0x35	; 53
    3126:	1f 4f       	sbci	r17, 0xFF	; 255
    3128:	fe 01       	movw	r30, r28
    312a:	e1 53       	subi	r30, 0x31	; 49
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	60 81       	ld	r22, Z
    3130:	71 81       	ldd	r23, Z+1	; 0x01
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	93 81       	ldd	r25, Z+3	; 0x03
    3136:	26 e6       	ldi	r18, 0x66	; 102
    3138:	36 e6       	ldi	r19, 0x66	; 102
    313a:	46 e6       	ldi	r20, 0x66	; 102
    313c:	55 e4       	ldi	r21, 0x45	; 69
    313e:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	f8 01       	movw	r30, r16
    3148:	80 83       	st	Z, r24
    314a:	91 83       	std	Z+1, r25	; 0x01
    314c:	a2 83       	std	Z+2, r26	; 0x02
    314e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3150:	fe 01       	movw	r30, r28
    3152:	e5 53       	subi	r30, 0x35	; 53
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	60 81       	ld	r22, Z
    3158:	71 81       	ldd	r23, Z+1	; 0x01
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	93 81       	ldd	r25, Z+3	; 0x03
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e8       	ldi	r20, 0x80	; 128
    3164:	5f e3       	ldi	r21, 0x3F	; 63
    3166:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    316a:	88 23       	and	r24, r24
    316c:	44 f4       	brge	.+16     	; 0x317e <main+0x14d2>
		__ticks = 1;
    316e:	fe 01       	movw	r30, r28
    3170:	e7 53       	subi	r30, 0x37	; 55
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	91 83       	std	Z+1, r25	; 0x01
    317a:	80 83       	st	Z, r24
    317c:	64 c0       	rjmp	.+200    	; 0x3246 <main+0x159a>
	else if (__tmp > 65535)
    317e:	fe 01       	movw	r30, r28
    3180:	e5 53       	subi	r30, 0x35	; 53
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	60 81       	ld	r22, Z
    3186:	71 81       	ldd	r23, Z+1	; 0x01
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	3f ef       	ldi	r19, 0xFF	; 255
    3190:	4f e7       	ldi	r20, 0x7F	; 127
    3192:	57 e4       	ldi	r21, 0x47	; 71
    3194:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    3198:	18 16       	cp	r1, r24
    319a:	0c f0       	brlt	.+2      	; 0x319e <main+0x14f2>
    319c:	43 c0       	rjmp	.+134    	; 0x3224 <main+0x1578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319e:	fe 01       	movw	r30, r28
    31a0:	e1 53       	subi	r30, 0x31	; 49
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	60 81       	ld	r22, Z
    31a6:	71 81       	ldd	r23, Z+1	; 0x01
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e2       	ldi	r20, 0x20	; 32
    31b2:	51 e4       	ldi	r21, 0x41	; 65
    31b4:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	8e 01       	movw	r16, r28
    31be:	07 53       	subi	r16, 0x37	; 55
    31c0:	1f 4f       	sbci	r17, 0xFF	; 255
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	f8 01       	movw	r30, r16
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	80 83       	st	Z, r24
    31d4:	1f c0       	rjmp	.+62     	; 0x3214 <main+0x1568>
    31d6:	fe 01       	movw	r30, r28
    31d8:	e9 53       	subi	r30, 0x39	; 57
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 e7       	ldi	r24, 0x70	; 112
    31de:	91 e0       	ldi	r25, 0x01	; 1
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
    31e4:	fe 01       	movw	r30, r28
    31e6:	e9 53       	subi	r30, 0x39	; 57
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	80 81       	ld	r24, Z
    31ec:	91 81       	ldd	r25, Z+1	; 0x01
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	f1 f7       	brne	.-4      	; 0x31ee <main+0x1542>
    31f2:	fe 01       	movw	r30, r28
    31f4:	e9 53       	subi	r30, 0x39	; 57
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fc:	de 01       	movw	r26, r28
    31fe:	a7 53       	subi	r26, 0x37	; 55
    3200:	bf 4f       	sbci	r27, 0xFF	; 255
    3202:	fe 01       	movw	r30, r28
    3204:	e7 53       	subi	r30, 0x37	; 55
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	80 81       	ld	r24, Z
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	11 96       	adiw	r26, 0x01	; 1
    3210:	9c 93       	st	X, r25
    3212:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3214:	fe 01       	movw	r30, r28
    3216:	e7 53       	subi	r30, 0x37	; 55
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	d1 f6       	brne	.-76     	; 0x31d6 <main+0x152a>
    3222:	27 c0       	rjmp	.+78     	; 0x3272 <main+0x15c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3224:	8e 01       	movw	r16, r28
    3226:	07 53       	subi	r16, 0x37	; 55
    3228:	1f 4f       	sbci	r17, 0xFF	; 255
    322a:	fe 01       	movw	r30, r28
    322c:	e5 53       	subi	r30, 0x35	; 53
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	f8 01       	movw	r30, r16
    3242:	91 83       	std	Z+1, r25	; 0x01
    3244:	80 83       	st	Z, r24
    3246:	de 01       	movw	r26, r28
    3248:	ab 53       	subi	r26, 0x3B	; 59
    324a:	bf 4f       	sbci	r27, 0xFF	; 255
    324c:	fe 01       	movw	r30, r28
    324e:	e7 53       	subi	r30, 0x37	; 55
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	80 81       	ld	r24, Z
    3254:	91 81       	ldd	r25, Z+1	; 0x01
    3256:	8d 93       	st	X+, r24
    3258:	9c 93       	st	X, r25
    325a:	fe 01       	movw	r30, r28
    325c:	eb 53       	subi	r30, 0x3B	; 59
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	80 81       	ld	r24, Z
    3262:	91 81       	ldd	r25, Z+1	; 0x01
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <main+0x15b8>
    3268:	fe 01       	movw	r30, r28
    326a:	eb 53       	subi	r30, 0x3B	; 59
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x7F, 0x00, 0x00, 0xFF);
  for (int cyx = 0; cyx < 20; cyx++)
    3272:	de 01       	movw	r26, r28
    3274:	a1 57       	subi	r26, 0x71	; 113
    3276:	bd 4f       	sbci	r27, 0xFD	; 253
    3278:	fe 01       	movw	r30, r28
    327a:	e1 57       	subi	r30, 0x71	; 113
    327c:	fd 4f       	sbci	r31, 0xFD	; 253
    327e:	80 81       	ld	r24, Z
    3280:	91 81       	ldd	r25, Z+1	; 0x01
    3282:	01 96       	adiw	r24, 0x01	; 1
    3284:	11 96       	adiw	r26, 0x01	; 1
    3286:	9c 93       	st	X, r25
    3288:	8e 93       	st	-X, r24
    328a:	fe 01       	movw	r30, r28
    328c:	e1 57       	subi	r30, 0x71	; 113
    328e:	fd 4f       	sbci	r31, 0xFD	; 253
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	84 31       	cpi	r24, 0x14	; 20
    3296:	91 05       	cpc	r25, r1
    3298:	0c f4       	brge	.+2      	; 0x329c <main+0x15f0>
    329a:	37 cf       	rjmp	.-402    	; 0x310a <main+0x145e>
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x00, 0xFF, 0xFF, 0xFF);
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	6f ef       	ldi	r22, 0xFF	; 255
    32a0:	4f ef       	ldi	r20, 0xFF	; 255
    32a2:	2f ef       	ldi	r18, 0xFF	; 255
    32a4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>

  wdt_reset();
    32a8:	a8 95       	wdr

  uint8_t uiBrightControl = 1;
    32aa:	fe 01       	movw	r30, r28
    32ac:	e9 53       	subi	r30, 0x39	; 57
    32ae:	fd 4f       	sbci	r31, 0xFD	; 253
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	80 83       	st	Z, r24
  read_byte(cBrightControl, &uiBrightControl);
    32b4:	9e 01       	movw	r18, r28
    32b6:	29 53       	subi	r18, 0x39	; 57
    32b8:	3d 4f       	sbci	r19, 0xFD	; 253
    32ba:	82 e0       	ldi	r24, 0x02	; 2
    32bc:	b9 01       	movw	r22, r18
    32be:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <read_byte>

  char s[100];
  sprintf(s, "%d", uiBrightControl);
    32c2:	fe 01       	movw	r30, r28
    32c4:	e9 53       	subi	r30, 0x39	; 57
    32c6:	fd 4f       	sbci	r31, 0xFD	; 253
    32c8:	80 81       	ld	r24, Z
    32ca:	28 2f       	mov	r18, r24
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <main+0x1624>
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <main+0x1626>
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <main+0x1628>
    32d4:	ed b7       	in	r30, 0x3d	; 61
    32d6:	fe b7       	in	r31, 0x3e	; 62
    32d8:	31 96       	adiw	r30, 0x01	; 1
    32da:	ce 01       	movw	r24, r28
    32dc:	88 53       	subi	r24, 0x38	; 56
    32de:	9d 4f       	sbci	r25, 0xFD	; 253
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
    32e4:	83 e1       	ldi	r24, 0x13	; 19
    32e6:	93 e0       	ldi	r25, 0x03	; 3
    32e8:	93 83       	std	Z+3, r25	; 0x03
    32ea:	82 83       	std	Z+2, r24	; 0x02
    32ec:	35 83       	std	Z+5, r19	; 0x05
    32ee:	24 83       	std	Z+4, r18	; 0x04
    32f0:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    32f4:	2d b7       	in	r18, 0x3d	; 61
    32f6:	3e b7       	in	r19, 0x3e	; 62
    32f8:	2a 5f       	subi	r18, 0xFA	; 250
    32fa:	3f 4f       	sbci	r19, 0xFF	; 255
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	3e bf       	out	0x3e, r19	; 62
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	2d bf       	out	0x3d, r18	; 61
  uartPuts("\r\n... Brightness:");
    3306:	86 e1       	ldi	r24, 0x16	; 22
    3308:	93 e0       	ldi	r25, 0x03	; 3
    330a:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  uartPuts(s);
    330e:	ce 01       	movw	r24, r28
    3310:	88 53       	subi	r24, 0x38	; 56
    3312:	9d 4f       	sbci	r25, 0xFD	; 253
    3314:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>

  unsigned char uiR;
  unsigned char uiG;
  unsigned char uiB;
  unsigned char uiRGB;
  read_byte(cRGB_R, &uiR);
    3318:	9e 01       	movw	r18, r28
    331a:	24 5d       	subi	r18, 0xD4	; 212
    331c:	3c 4f       	sbci	r19, 0xFC	; 252
    331e:	84 e0       	ldi	r24, 0x04	; 4
    3320:	b9 01       	movw	r22, r18
    3322:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <read_byte>
  read_byte(cRGB_G, &uiG);
    3326:	9e 01       	movw	r18, r28
    3328:	23 5d       	subi	r18, 0xD3	; 211
    332a:	3c 4f       	sbci	r19, 0xFC	; 252
    332c:	85 e0       	ldi	r24, 0x05	; 5
    332e:	b9 01       	movw	r22, r18
    3330:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <read_byte>
  read_byte(cRGB_B, &uiB);
    3334:	9e 01       	movw	r18, r28
    3336:	22 5d       	subi	r18, 0xD2	; 210
    3338:	3c 4f       	sbci	r19, 0xFC	; 252
    333a:	86 e0       	ldi	r24, 0x06	; 6
    333c:	b9 01       	movw	r22, r18
    333e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <read_byte>
  read_byte(cRGB_Mode, &uiRGB);
    3342:	9e 01       	movw	r18, r28
    3344:	21 5d       	subi	r18, 0xD1	; 209
    3346:	3c 4f       	sbci	r19, 0xFC	; 252
    3348:	83 e0       	ldi	r24, 0x03	; 3
    334a:	b9 01       	movw	r22, r18
    334c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <read_byte>

  if (!uiRGB)
    3350:	fe 01       	movw	r30, r28
    3352:	e1 5d       	subi	r30, 0xD1	; 209
    3354:	fc 4f       	sbci	r31, 0xFC	; 252
    3356:	80 81       	ld	r24, Z
    3358:	88 23       	and	r24, r24
    335a:	e1 f5       	brne	.+120    	; 0x33d4 <main+0x1728>
  {
    sprintf(s, "\r\n... RGB color: #%02x%02x%02x", uiR, uiG, uiB);
    335c:	fe 01       	movw	r30, r28
    335e:	e4 5d       	subi	r30, 0xD4	; 212
    3360:	fc 4f       	sbci	r31, 0xFC	; 252
    3362:	80 81       	ld	r24, Z
    3364:	48 2f       	mov	r20, r24
    3366:	50 e0       	ldi	r21, 0x00	; 0
    3368:	fe 01       	movw	r30, r28
    336a:	e3 5d       	subi	r30, 0xD3	; 211
    336c:	fc 4f       	sbci	r31, 0xFC	; 252
    336e:	80 81       	ld	r24, Z
    3370:	68 2f       	mov	r22, r24
    3372:	70 e0       	ldi	r23, 0x00	; 0
    3374:	fe 01       	movw	r30, r28
    3376:	e2 5d       	subi	r30, 0xD2	; 210
    3378:	fc 4f       	sbci	r31, 0xFC	; 252
    337a:	80 81       	ld	r24, Z
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	8d b7       	in	r24, 0x3d	; 61
    3382:	9e b7       	in	r25, 0x3e	; 62
    3384:	0a 97       	sbiw	r24, 0x0a	; 10
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	9e bf       	out	0x3e, r25	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	8d bf       	out	0x3d, r24	; 61
    3390:	ed b7       	in	r30, 0x3d	; 61
    3392:	fe b7       	in	r31, 0x3e	; 62
    3394:	31 96       	adiw	r30, 0x01	; 1
    3396:	ce 01       	movw	r24, r28
    3398:	88 53       	subi	r24, 0x38	; 56
    339a:	9d 4f       	sbci	r25, 0xFD	; 253
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24
    33a0:	88 e2       	ldi	r24, 0x28	; 40
    33a2:	93 e0       	ldi	r25, 0x03	; 3
    33a4:	93 83       	std	Z+3, r25	; 0x03
    33a6:	82 83       	std	Z+2, r24	; 0x02
    33a8:	55 83       	std	Z+5, r21	; 0x05
    33aa:	44 83       	std	Z+4, r20	; 0x04
    33ac:	77 83       	std	Z+7, r23	; 0x07
    33ae:	66 83       	std	Z+6, r22	; 0x06
    33b0:	31 87       	std	Z+9, r19	; 0x09
    33b2:	20 87       	std	Z+8, r18	; 0x08
    33b4:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    33b8:	ed b7       	in	r30, 0x3d	; 61
    33ba:	fe b7       	in	r31, 0x3e	; 62
    33bc:	3a 96       	adiw	r30, 0x0a	; 10
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	fe bf       	out	0x3e, r31	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	ed bf       	out	0x3d, r30	; 61
    uartPuts(s);
    33c8:	ce 01       	movw	r24, r28
    33ca:	88 53       	subi	r24, 0x38	; 56
    33cc:	9d 4f       	sbci	r25, 0xFD	; 253
    33ce:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    33d2:	04 c0       	rjmp	.+8      	; 0x33dc <main+0x1730>
  }
  else
  {
    uartPuts("\r\n... RGB Auto");
    33d4:	87 e4       	ldi	r24, 0x47	; 71
    33d6:	93 e0       	ldi	r25, 0x03	; 3
    33d8:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
  }

  uartPuts("\r\nReady...\r\n");
    33dc:	86 e5       	ldi	r24, 0x56	; 86
    33de:	93 e0       	ldi	r25, 0x03	; 3
    33e0:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>

  long uiCount = -1;
    33e4:	fe 01       	movw	r30, r28
    33e6:	ef 55       	subi	r30, 0x5F	; 95
    33e8:	fd 4f       	sbci	r31, 0xFD	; 253
    33ea:	8f ef       	ldi	r24, 0xFF	; 255
    33ec:	9f ef       	ldi	r25, 0xFF	; 255
    33ee:	af ef       	ldi	r26, 0xFF	; 255
    33f0:	bf ef       	ldi	r27, 0xFF	; 255
    33f2:	80 83       	st	Z, r24
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	a2 83       	std	Z+2, r26	; 0x02
    33f8:	b3 83       	std	Z+3, r27	; 0x03

  uint16_t Button1 = 0;
    33fa:	fe 01       	movw	r30, r28
    33fc:	e1 56       	subi	r30, 0x61	; 97
    33fe:	fd 4f       	sbci	r31, 0xFD	; 253
    3400:	11 82       	std	Z+1, r1	; 0x01
    3402:	10 82       	st	Z, r1
  uint16_t Button2 = 0;
    3404:	fe 01       	movw	r30, r28
    3406:	e3 56       	subi	r30, 0x63	; 99
    3408:	fd 4f       	sbci	r31, 0xFD	; 253
    340a:	11 82       	std	Z+1, r1	; 0x01
    340c:	10 82       	st	Z, r1
  uint16_t Button3 = 0;
    340e:	fe 01       	movw	r30, r28
    3410:	e5 56       	subi	r30, 0x65	; 101
    3412:	fd 4f       	sbci	r31, 0xFD	; 253
    3414:	11 82       	std	Z+1, r1	; 0x01
    3416:	10 82       	st	Z, r1

  while (1)
  {
    wdt_reset();
    3418:	a8 95       	wdr
    341a:	fe 01       	movw	r30, r28
    341c:	ef 53       	subi	r30, 0x3F	; 63
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	a0 e8       	ldi	r26, 0x80	; 128
    3426:	bf e3       	ldi	r27, 0x3F	; 63
    3428:	80 83       	st	Z, r24
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	a2 83       	std	Z+2, r26	; 0x02
    342e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3430:	8e 01       	movw	r16, r28
    3432:	03 54       	subi	r16, 0x43	; 67
    3434:	1f 4f       	sbci	r17, 0xFF	; 255
    3436:	fe 01       	movw	r30, r28
    3438:	ef 53       	subi	r30, 0x3F	; 63
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	60 81       	ld	r22, Z
    343e:	71 81       	ldd	r23, Z+1	; 0x01
    3440:	82 81       	ldd	r24, Z+2	; 0x02
    3442:	93 81       	ldd	r25, Z+3	; 0x03
    3444:	26 e6       	ldi	r18, 0x66	; 102
    3446:	36 e6       	ldi	r19, 0x66	; 102
    3448:	46 e6       	ldi	r20, 0x66	; 102
    344a:	55 e4       	ldi	r21, 0x45	; 69
    344c:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	f8 01       	movw	r30, r16
    3456:	80 83       	st	Z, r24
    3458:	91 83       	std	Z+1, r25	; 0x01
    345a:	a2 83       	std	Z+2, r26	; 0x02
    345c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    345e:	fe 01       	movw	r30, r28
    3460:	e3 54       	subi	r30, 0x43	; 67
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	60 81       	ld	r22, Z
    3466:	71 81       	ldd	r23, Z+1	; 0x01
    3468:	82 81       	ldd	r24, Z+2	; 0x02
    346a:	93 81       	ldd	r25, Z+3	; 0x03
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e8       	ldi	r20, 0x80	; 128
    3472:	5f e3       	ldi	r21, 0x3F	; 63
    3474:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    3478:	88 23       	and	r24, r24
    347a:	44 f4       	brge	.+16     	; 0x348c <main+0x17e0>
		__ticks = 1;
    347c:	fe 01       	movw	r30, r28
    347e:	e5 54       	subi	r30, 0x45	; 69
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	80 83       	st	Z, r24
    348a:	64 c0       	rjmp	.+200    	; 0x3554 <main+0x18a8>
	else if (__tmp > 65535)
    348c:	fe 01       	movw	r30, r28
    348e:	e3 54       	subi	r30, 0x43	; 67
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	3f ef       	ldi	r19, 0xFF	; 255
    349e:	4f e7       	ldi	r20, 0x7F	; 127
    34a0:	57 e4       	ldi	r21, 0x47	; 71
    34a2:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    34a6:	18 16       	cp	r1, r24
    34a8:	0c f0       	brlt	.+2      	; 0x34ac <main+0x1800>
    34aa:	43 c0       	rjmp	.+134    	; 0x3532 <main+0x1886>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ac:	fe 01       	movw	r30, r28
    34ae:	ef 53       	subi	r30, 0x3F	; 63
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	60 81       	ld	r22, Z
    34b4:	71 81       	ldd	r23, Z+1	; 0x01
    34b6:	82 81       	ldd	r24, Z+2	; 0x02
    34b8:	93 81       	ldd	r25, Z+3	; 0x03
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	40 e2       	ldi	r20, 0x20	; 32
    34c0:	51 e4       	ldi	r21, 0x41	; 65
    34c2:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	8e 01       	movw	r16, r28
    34cc:	05 54       	subi	r16, 0x45	; 69
    34ce:	1f 4f       	sbci	r17, 0xFF	; 255
    34d0:	bc 01       	movw	r22, r24
    34d2:	cd 01       	movw	r24, r26
    34d4:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	f8 01       	movw	r30, r16
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
    34e2:	1f c0       	rjmp	.+62     	; 0x3522 <main+0x1876>
    34e4:	fe 01       	movw	r30, r28
    34e6:	e7 54       	subi	r30, 0x47	; 71
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	80 e7       	ldi	r24, 0x70	; 112
    34ec:	91 e0       	ldi	r25, 0x01	; 1
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	80 83       	st	Z, r24
    34f2:	fe 01       	movw	r30, r28
    34f4:	e7 54       	subi	r30, 0x47	; 71
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 81       	ld	r24, Z
    34fa:	91 81       	ldd	r25, Z+1	; 0x01
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	f1 f7       	brne	.-4      	; 0x34fc <main+0x1850>
    3500:	fe 01       	movw	r30, r28
    3502:	e7 54       	subi	r30, 0x47	; 71
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	91 83       	std	Z+1, r25	; 0x01
    3508:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    350a:	de 01       	movw	r26, r28
    350c:	a5 54       	subi	r26, 0x45	; 69
    350e:	bf 4f       	sbci	r27, 0xFF	; 255
    3510:	fe 01       	movw	r30, r28
    3512:	e5 54       	subi	r30, 0x45	; 69
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	80 81       	ld	r24, Z
    3518:	91 81       	ldd	r25, Z+1	; 0x01
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	11 96       	adiw	r26, 0x01	; 1
    351e:	9c 93       	st	X, r25
    3520:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3522:	fe 01       	movw	r30, r28
    3524:	e5 54       	subi	r30, 0x45	; 69
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	91 81       	ldd	r25, Z+1	; 0x01
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	d1 f6       	brne	.-76     	; 0x34e4 <main+0x1838>
    3530:	27 c0       	rjmp	.+78     	; 0x3580 <main+0x18d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3532:	8e 01       	movw	r16, r28
    3534:	05 54       	subi	r16, 0x45	; 69
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	fe 01       	movw	r30, r28
    353a:	e3 54       	subi	r30, 0x43	; 67
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	60 81       	ld	r22, Z
    3540:	71 81       	ldd	r23, Z+1	; 0x01
    3542:	82 81       	ldd	r24, Z+2	; 0x02
    3544:	93 81       	ldd	r25, Z+3	; 0x03
    3546:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	f8 01       	movw	r30, r16
    3550:	91 83       	std	Z+1, r25	; 0x01
    3552:	80 83       	st	Z, r24
    3554:	de 01       	movw	r26, r28
    3556:	a9 54       	subi	r26, 0x49	; 73
    3558:	bf 4f       	sbci	r27, 0xFF	; 255
    355a:	fe 01       	movw	r30, r28
    355c:	e5 54       	subi	r30, 0x45	; 69
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	80 81       	ld	r24, Z
    3562:	91 81       	ldd	r25, Z+1	; 0x01
    3564:	8d 93       	st	X+, r24
    3566:	9c 93       	st	X, r25
    3568:	fe 01       	movw	r30, r28
    356a:	e9 54       	subi	r30, 0x49	; 73
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <main+0x18c6>
    3576:	fe 01       	movw	r30, r28
    3578:	e9 54       	subi	r30, 0x49	; 73
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	80 83       	st	Z, r24
    _delay_ms(1);
    uiCount++;
    3580:	9e 01       	movw	r18, r28
    3582:	2f 55       	subi	r18, 0x5F	; 95
    3584:	3d 4f       	sbci	r19, 0xFD	; 253
    3586:	fe 01       	movw	r30, r28
    3588:	ef 55       	subi	r30, 0x5F	; 95
    358a:	fd 4f       	sbci	r31, 0xFD	; 253
    358c:	80 81       	ld	r24, Z
    358e:	91 81       	ldd	r25, Z+1	; 0x01
    3590:	a2 81       	ldd	r26, Z+2	; 0x02
    3592:	b3 81       	ldd	r27, Z+3	; 0x03
    3594:	01 96       	adiw	r24, 0x01	; 1
    3596:	a1 1d       	adc	r26, r1
    3598:	b1 1d       	adc	r27, r1
    359a:	f9 01       	movw	r30, r18
    359c:	80 83       	st	Z, r24
    359e:	91 83       	std	Z+1, r25	; 0x01
    35a0:	a2 83       	std	Z+2, r26	; 0x02
    35a2:	b3 83       	std	Z+3, r27	; 0x03

    // alle 1ms

    ldr_read();
    35a4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <ldr_read>

    uint8_t uiBright = 0xff;
    35a8:	fe 01       	movw	r30, r28
    35aa:	e2 57       	subi	r30, 0x72	; 114
    35ac:	fd 4f       	sbci	r31, 0xFD	; 253
    35ae:	8f ef       	ldi	r24, 0xFF	; 255
    35b0:	80 83       	st	Z, r24
    if (uiBrightControl != 0)
    35b2:	fe 01       	movw	r30, r28
    35b4:	e9 53       	subi	r30, 0x39	; 57
    35b6:	fd 4f       	sbci	r31, 0xFD	; 253
    35b8:	80 81       	ld	r24, Z
    35ba:	88 23       	and	r24, r24
    35bc:	31 f0       	breq	.+12     	; 0x35ca <main+0x191e>
    {
      uiBright = ldr_get_brightness();
    35be:	0e 94 43 09 	call	0x1286	; 0x1286 <ldr_get_brightness>
    35c2:	fe 01       	movw	r30, r28
    35c4:	e2 57       	subi	r30, 0x72	; 114
    35c6:	fd 4f       	sbci	r31, 0xFD	; 253
    35c8:	80 83       	st	Z, r24
    }
    if (uiBright < 128)
    35ca:	fe 01       	movw	r30, r28
    35cc:	e2 57       	subi	r30, 0x72	; 114
    35ce:	fd 4f       	sbci	r31, 0xFD	; 253
    35d0:	80 81       	ld	r24, Z
    35d2:	88 23       	and	r24, r24
    35d4:	54 f0       	brlt	.+20     	; 0x35ea <main+0x193e>
    {
      uiBright = (uiBright >> 1) + 64;
    35d6:	fe 01       	movw	r30, r28
    35d8:	e2 57       	subi	r30, 0x72	; 114
    35da:	fd 4f       	sbci	r31, 0xFD	; 253
    35dc:	80 81       	ld	r24, Z
    35de:	86 95       	lsr	r24
    35e0:	fe 01       	movw	r30, r28
    35e2:	e2 57       	subi	r30, 0x72	; 114
    35e4:	fd 4f       	sbci	r31, 0xFD	; 253
    35e6:	80 5c       	subi	r24, 0xC0	; 192
    35e8:	80 83       	st	Z, r24
    }
    SetColor(uiBright, uiR, uiG, uiB);
    35ea:	fe 01       	movw	r30, r28
    35ec:	e4 5d       	subi	r30, 0xD4	; 212
    35ee:	fc 4f       	sbci	r31, 0xFC	; 252
    35f0:	20 81       	ld	r18, Z
    35f2:	fe 01       	movw	r30, r28
    35f4:	e3 5d       	subi	r30, 0xD3	; 211
    35f6:	fc 4f       	sbci	r31, 0xFC	; 252
    35f8:	30 81       	ld	r19, Z
    35fa:	fe 01       	movw	r30, r28
    35fc:	e2 5d       	subi	r30, 0xD2	; 210
    35fe:	fc 4f       	sbci	r31, 0xFC	; 252
    3600:	90 81       	ld	r25, Z
    3602:	fe 01       	movw	r30, r28
    3604:	e2 57       	subi	r30, 0x72	; 114
    3606:	fd 4f       	sbci	r31, 0xFD	; 253
    3608:	80 81       	ld	r24, Z
    360a:	62 2f       	mov	r22, r18
    360c:	43 2f       	mov	r20, r19
    360e:	29 2f       	mov	r18, r25
    3610:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>

    if (uiCount % 10)
    3614:	fe 01       	movw	r30, r28
    3616:	ef 55       	subi	r30, 0x5F	; 95
    3618:	fd 4f       	sbci	r31, 0xFD	; 253
    361a:	80 81       	ld	r24, Z
    361c:	91 81       	ldd	r25, Z+1	; 0x01
    361e:	a2 81       	ldd	r26, Z+2	; 0x02
    3620:	b3 81       	ldd	r27, Z+3	; 0x03
    3622:	2a e0       	ldi	r18, 0x0A	; 10
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	bc 01       	movw	r22, r24
    362c:	cd 01       	movw	r24, r26
    362e:	0e 94 d3 3d 	call	0x7ba6	; 0x7ba6 <__divmodsi4>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	00 97       	sbiw	r24, 0x00	; 0
    3638:	a1 05       	cpc	r26, r1
    363a:	b1 05       	cpc	r27, r1
    363c:	09 f0       	breq	.+2      	; 0x3640 <main+0x1994>
    363e:	ec ce       	rjmp	.-552    	; 0x3418 <main+0x176c>
      continue;
    }

    // ca. alle 10ms

    if (uart_str_complete)
    3640:	80 91 79 05 	lds	r24, 0x0579
    3644:	88 23       	and	r24, r24
    3646:	11 f4       	brne	.+4      	; 0x364c <main+0x19a0>
    3648:	0c 94 b6 2a 	jmp	0x556c	; 0x556c <main+0x38c0>
    {
      if (uart_string[0] == '>')
    364c:	80 91 b9 00 	lds	r24, 0x00B9
    3650:	8e 33       	cpi	r24, 0x3E	; 62
    3652:	11 f0       	breq	.+4      	; 0x3658 <main+0x19ac>
    3654:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <main+0x3604>
      {
        switch (uart_string[1])
    3658:	80 91 ba 00 	lds	r24, 0x00BA
    365c:	28 2f       	mov	r18, r24
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	cf 5b       	subi	r28, 0xBF	; 191
    3662:	db 4f       	sbci	r29, 0xFB	; 251
    3664:	39 83       	std	Y+1, r19	; 0x01
    3666:	28 83       	st	Y, r18
    3668:	c1 54       	subi	r28, 0x41	; 65
    366a:	d4 40       	sbci	r29, 0x04	; 4
    366c:	cf 5b       	subi	r28, 0xBF	; 191
    366e:	db 4f       	sbci	r29, 0xFB	; 251
    3670:	88 81       	ld	r24, Y
    3672:	99 81       	ldd	r25, Y+1	; 0x01
    3674:	c1 54       	subi	r28, 0x41	; 65
    3676:	d4 40       	sbci	r29, 0x04	; 4
    3678:	8c 36       	cpi	r24, 0x6C	; 108
    367a:	91 05       	cpc	r25, r1
    367c:	09 f4       	brne	.+2      	; 0x3680 <main+0x19d4>
    367e:	b9 c7       	rjmp	.+3954   	; 0x45f2 <main+0x2946>
    3680:	cf 5b       	subi	r28, 0xBF	; 191
    3682:	db 4f       	sbci	r29, 0xFB	; 251
    3684:	e8 81       	ld	r30, Y
    3686:	f9 81       	ldd	r31, Y+1	; 0x01
    3688:	c1 54       	subi	r28, 0x41	; 65
    368a:	d4 40       	sbci	r29, 0x04	; 4
    368c:	ed 36       	cpi	r30, 0x6D	; 109
    368e:	f1 05       	cpc	r31, r1
    3690:	0c f0       	brlt	.+2      	; 0x3694 <main+0x19e8>
    3692:	7b c0       	rjmp	.+246    	; 0x378a <main+0x1ade>
    3694:	cf 5b       	subi	r28, 0xBF	; 191
    3696:	db 4f       	sbci	r29, 0xFB	; 251
    3698:	28 81       	ld	r18, Y
    369a:	39 81       	ldd	r19, Y+1	; 0x01
    369c:	c1 54       	subi	r28, 0x41	; 65
    369e:	d4 40       	sbci	r29, 0x04	; 4
    36a0:	29 35       	cpi	r18, 0x59	; 89
    36a2:	31 05       	cpc	r19, r1
    36a4:	11 f4       	brne	.+4      	; 0x36aa <main+0x19fe>
    36a6:	0c 94 b5 28 	jmp	0x516a	; 0x516a <main+0x34be>
    36aa:	cf 5b       	subi	r28, 0xBF	; 191
    36ac:	db 4f       	sbci	r29, 0xFB	; 251
    36ae:	88 81       	ld	r24, Y
    36b0:	99 81       	ldd	r25, Y+1	; 0x01
    36b2:	c1 54       	subi	r28, 0x41	; 65
    36b4:	d4 40       	sbci	r29, 0x04	; 4
    36b6:	8a 35       	cpi	r24, 0x5A	; 90
    36b8:	91 05       	cpc	r25, r1
    36ba:	0c f0       	brlt	.+2      	; 0x36be <main+0x1a12>
    36bc:	43 c0       	rjmp	.+134    	; 0x3744 <main+0x1a98>
    36be:	cf 5b       	subi	r28, 0xBF	; 191
    36c0:	db 4f       	sbci	r29, 0xFB	; 251
    36c2:	e8 81       	ld	r30, Y
    36c4:	f9 81       	ldd	r31, Y+1	; 0x01
    36c6:	c1 54       	subi	r28, 0x41	; 65
    36c8:	d4 40       	sbci	r29, 0x04	; 4
    36ca:	e4 34       	cpi	r30, 0x44	; 68
    36cc:	f1 05       	cpc	r31, r1
    36ce:	11 f4       	brne	.+4      	; 0x36d4 <main+0x1a28>
    36d0:	0c 94 b4 27 	jmp	0x4f68	; 0x4f68 <main+0x32bc>
    36d4:	cf 5b       	subi	r28, 0xBF	; 191
    36d6:	db 4f       	sbci	r29, 0xFB	; 251
    36d8:	28 81       	ld	r18, Y
    36da:	39 81       	ldd	r19, Y+1	; 0x01
    36dc:	c1 54       	subi	r28, 0x41	; 65
    36de:	d4 40       	sbci	r29, 0x04	; 4
    36e0:	25 34       	cpi	r18, 0x45	; 69
    36e2:	31 05       	cpc	r19, r1
    36e4:	14 f5       	brge	.+68     	; 0x372a <main+0x1a7e>
    36e6:	cf 5b       	subi	r28, 0xBF	; 191
    36e8:	db 4f       	sbci	r29, 0xFB	; 251
    36ea:	88 81       	ld	r24, Y
    36ec:	99 81       	ldd	r25, Y+1	; 0x01
    36ee:	c1 54       	subi	r28, 0x41	; 65
    36f0:	d4 40       	sbci	r29, 0x04	; 4
    36f2:	8d 32       	cpi	r24, 0x2D	; 45
    36f4:	91 05       	cpc	r25, r1
    36f6:	11 f4       	brne	.+4      	; 0x36fc <main+0x1a50>
    36f8:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <main+0x2fc4>
    36fc:	cf 5b       	subi	r28, 0xBF	; 191
    36fe:	db 4f       	sbci	r29, 0xFB	; 251
    3700:	e8 81       	ld	r30, Y
    3702:	f9 81       	ldd	r31, Y+1	; 0x01
    3704:	c1 54       	subi	r28, 0x41	; 65
    3706:	d4 40       	sbci	r29, 0x04	; 4
    3708:	ef 33       	cpi	r30, 0x3F	; 63
    370a:	f1 05       	cpc	r31, r1
    370c:	09 f4       	brne	.+2      	; 0x3710 <main+0x1a64>
    370e:	95 c0       	rjmp	.+298    	; 0x383a <main+0x1b8e>
    3710:	cf 5b       	subi	r28, 0xBF	; 191
    3712:	db 4f       	sbci	r29, 0xFB	; 251
    3714:	28 81       	ld	r18, Y
    3716:	39 81       	ldd	r19, Y+1	; 0x01
    3718:	c1 54       	subi	r28, 0x41	; 65
    371a:	d4 40       	sbci	r29, 0x04	; 4
    371c:	2b 32       	cpi	r18, 0x2B	; 43
    371e:	31 05       	cpc	r19, r1
    3720:	11 f4       	brne	.+4      	; 0x3726 <main+0x1a7a>
    3722:	0c 94 19 26 	jmp	0x4c32	; 0x4c32 <main+0x2f86>
    3726:	0c 94 36 29 	jmp	0x526c	; 0x526c <main+0x35c0>
    372a:	cf 5b       	subi	r28, 0xBF	; 191
    372c:	db 4f       	sbci	r29, 0xFB	; 251
    372e:	88 81       	ld	r24, Y
    3730:	99 81       	ldd	r25, Y+1	; 0x01
    3732:	c1 54       	subi	r28, 0x41	; 65
    3734:	d4 40       	sbci	r29, 0x04	; 4
    3736:	8d 34       	cpi	r24, 0x4D	; 77
    3738:	91 05       	cpc	r25, r1
    373a:	11 f4       	brne	.+4      	; 0x3740 <main+0x1a94>
    373c:	0c 94 35 28 	jmp	0x506a	; 0x506a <main+0x33be>
    3740:	0c 94 36 29 	jmp	0x526c	; 0x526c <main+0x35c0>
    3744:	cf 5b       	subi	r28, 0xBF	; 191
    3746:	db 4f       	sbci	r29, 0xFB	; 251
    3748:	e8 81       	ld	r30, Y
    374a:	f9 81       	ldd	r31, Y+1	; 0x01
    374c:	c1 54       	subi	r28, 0x41	; 65
    374e:	d4 40       	sbci	r29, 0x04	; 4
    3750:	e3 36       	cpi	r30, 0x63	; 99
    3752:	f1 05       	cpc	r31, r1
    3754:	11 f4       	brne	.+4      	; 0x375a <main+0x1aae>
    3756:	0c 94 c3 24 	jmp	0x4986	; 0x4986 <main+0x2cda>
    375a:	cf 5b       	subi	r28, 0xBF	; 191
    375c:	db 4f       	sbci	r29, 0xFB	; 251
    375e:	28 81       	ld	r18, Y
    3760:	39 81       	ldd	r19, Y+1	; 0x01
    3762:	c1 54       	subi	r28, 0x41	; 65
    3764:	d4 40       	sbci	r29, 0x04	; 4
    3766:	28 36       	cpi	r18, 0x68	; 104
    3768:	31 05       	cpc	r19, r1
    376a:	11 f4       	brne	.+4      	; 0x3770 <main+0x1ac4>
    376c:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <main+0x30ba>
    3770:	cf 5b       	subi	r28, 0xBF	; 191
    3772:	db 4f       	sbci	r29, 0xFB	; 251
    3774:	88 81       	ld	r24, Y
    3776:	99 81       	ldd	r25, Y+1	; 0x01
    3778:	c1 54       	subi	r28, 0x41	; 65
    377a:	d4 40       	sbci	r29, 0x04	; 4
    377c:	82 36       	cpi	r24, 0x62	; 98
    377e:	91 05       	cpc	r25, r1
    3780:	11 f4       	brne	.+4      	; 0x3786 <main+0x1ada>
    3782:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <main+0x2ab4>
    3786:	0c 94 36 29 	jmp	0x526c	; 0x526c <main+0x35c0>
    378a:	cf 5b       	subi	r28, 0xBF	; 191
    378c:	db 4f       	sbci	r29, 0xFB	; 251
    378e:	e8 81       	ld	r30, Y
    3790:	f9 81       	ldd	r31, Y+1	; 0x01
    3792:	c1 54       	subi	r28, 0x41	; 65
    3794:	d4 40       	sbci	r29, 0x04	; 4
    3796:	e2 37       	cpi	r30, 0x72	; 114
    3798:	f1 05       	cpc	r31, r1
    379a:	11 f4       	brne	.+4      	; 0x37a0 <main+0x1af4>
    379c:	0c 94 ab 23 	jmp	0x4756	; 0x4756 <main+0x2aaa>
    37a0:	cf 5b       	subi	r28, 0xBF	; 191
    37a2:	db 4f       	sbci	r29, 0xFB	; 251
    37a4:	28 81       	ld	r18, Y
    37a6:	39 81       	ldd	r19, Y+1	; 0x01
    37a8:	c1 54       	subi	r28, 0x41	; 65
    37aa:	d4 40       	sbci	r29, 0x04	; 4
    37ac:	23 37       	cpi	r18, 0x73	; 115
    37ae:	31 05       	cpc	r19, r1
    37b0:	0c f5       	brge	.+66     	; 0x37f4 <main+0x1b48>
    37b2:	cf 5b       	subi	r28, 0xBF	; 191
    37b4:	db 4f       	sbci	r29, 0xFB	; 251
    37b6:	88 81       	ld	r24, Y
    37b8:	99 81       	ldd	r25, Y+1	; 0x01
    37ba:	c1 54       	subi	r28, 0x41	; 65
    37bc:	d4 40       	sbci	r29, 0x04	; 4
    37be:	80 37       	cpi	r24, 0x70	; 112
    37c0:	91 05       	cpc	r25, r1
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <main+0x1b1a>
    37c4:	79 c0       	rjmp	.+242    	; 0x38b8 <main+0x1c0c>
    37c6:	cf 5b       	subi	r28, 0xBF	; 191
    37c8:	db 4f       	sbci	r29, 0xFB	; 251
    37ca:	e8 81       	ld	r30, Y
    37cc:	f9 81       	ldd	r31, Y+1	; 0x01
    37ce:	c1 54       	subi	r28, 0x41	; 65
    37d0:	d4 40       	sbci	r29, 0x04	; 4
    37d2:	e1 37       	cpi	r30, 0x71	; 113
    37d4:	f1 05       	cpc	r31, r1
    37d6:	0c f0       	brlt	.+2      	; 0x37da <main+0x1b2e>
    37d8:	a1 c5       	rjmp	.+2882   	; 0x431c <main+0x2670>
    37da:	cf 5b       	subi	r28, 0xBF	; 191
    37dc:	db 4f       	sbci	r29, 0xFB	; 251
    37de:	28 81       	ld	r18, Y
    37e0:	39 81       	ldd	r19, Y+1	; 0x01
    37e2:	c1 54       	subi	r28, 0x41	; 65
    37e4:	d4 40       	sbci	r29, 0x04	; 4
    37e6:	2d 36       	cpi	r18, 0x6D	; 109
    37e8:	31 05       	cpc	r19, r1
    37ea:	11 f4       	brne	.+4      	; 0x37f0 <main+0x1b44>
    37ec:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <main+0x31bc>
    37f0:	0c 94 36 29 	jmp	0x526c	; 0x526c <main+0x35c0>
    37f4:	cf 5b       	subi	r28, 0xBF	; 191
    37f6:	db 4f       	sbci	r29, 0xFB	; 251
    37f8:	88 81       	ld	r24, Y
    37fa:	99 81       	ldd	r25, Y+1	; 0x01
    37fc:	c1 54       	subi	r28, 0x41	; 65
    37fe:	d4 40       	sbci	r29, 0x04	; 4
    3800:	85 37       	cpi	r24, 0x75	; 117
    3802:	91 05       	cpc	r25, r1
    3804:	11 f4       	brne	.+4      	; 0x380a <main+0x1b5e>
    3806:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <main+0x2e10>
    380a:	cf 5b       	subi	r28, 0xBF	; 191
    380c:	db 4f       	sbci	r29, 0xFB	; 251
    380e:	e8 81       	ld	r30, Y
    3810:	f9 81       	ldd	r31, Y+1	; 0x01
    3812:	c1 54       	subi	r28, 0x41	; 65
    3814:	d4 40       	sbci	r29, 0x04	; 4
    3816:	ea 37       	cpi	r30, 0x7A	; 122
    3818:	f1 05       	cpc	r31, r1
    381a:	11 f4       	brne	.+4      	; 0x3820 <main+0x1b74>
    381c:	0c 94 57 26 	jmp	0x4cae	; 0x4cae <main+0x3002>
    3820:	cf 5b       	subi	r28, 0xBF	; 191
    3822:	db 4f       	sbci	r29, 0xFB	; 251
    3824:	28 81       	ld	r18, Y
    3826:	39 81       	ldd	r19, Y+1	; 0x01
    3828:	c1 54       	subi	r28, 0x41	; 65
    382a:	d4 40       	sbci	r29, 0x04	; 4
    382c:	24 37       	cpi	r18, 0x74	; 116
    382e:	31 05       	cpc	r19, r1
    3830:	11 f4       	brne	.+4      	; 0x3836 <main+0x1b8a>
    3832:	0c 94 fa 25 	jmp	0x4bf4	; 0x4bf4 <main+0x2f48>
    3836:	0c 94 36 29 	jmp	0x526c	; 0x526c <main+0x35c0>
        {
        case '?':
          {
            char s[200];
            sprintf(s, "\r\nBrightness: %d\r\nPWM-Color: #%02x%02x%02x\r\n", uiBright, g_cPWMr, g_cPWMg, g_cPWMb);
    383a:	fe 01       	movw	r30, r28
    383c:	e2 57       	subi	r30, 0x72	; 114
    383e:	fd 4f       	sbci	r31, 0xFD	; 253
    3840:	80 81       	ld	r24, Z
    3842:	48 2f       	mov	r20, r24
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	80 91 72 05 	lds	r24, 0x0572
    384a:	68 2f       	mov	r22, r24
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	80 91 73 05 	lds	r24, 0x0573
    3852:	a8 2f       	mov	r26, r24
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	80 91 74 05 	lds	r24, 0x0574
    385a:	28 2f       	mov	r18, r24
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	8d b7       	in	r24, 0x3d	; 61
    3860:	9e b7       	in	r25, 0x3e	; 62
    3862:	0c 97       	sbiw	r24, 0x0c	; 12
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	9e bf       	out	0x3e, r25	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	8d bf       	out	0x3d, r24	; 61
    386e:	ed b7       	in	r30, 0x3d	; 61
    3870:	fe b7       	in	r31, 0x3e	; 62
    3872:	31 96       	adiw	r30, 0x01	; 1
    3874:	ce 01       	movw	r24, r28
    3876:	8e 59       	subi	r24, 0x9E	; 158
    3878:	9c 4f       	sbci	r25, 0xFC	; 252
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	80 83       	st	Z, r24
    387e:	83 e6       	ldi	r24, 0x63	; 99
    3880:	93 e0       	ldi	r25, 0x03	; 3
    3882:	93 83       	std	Z+3, r25	; 0x03
    3884:	82 83       	std	Z+2, r24	; 0x02
    3886:	55 83       	std	Z+5, r21	; 0x05
    3888:	44 83       	std	Z+4, r20	; 0x04
    388a:	77 83       	std	Z+7, r23	; 0x07
    388c:	66 83       	std	Z+6, r22	; 0x06
    388e:	b1 87       	std	Z+9, r27	; 0x09
    3890:	a0 87       	std	Z+8, r26	; 0x08
    3892:	33 87       	std	Z+11, r19	; 0x0b
    3894:	22 87       	std	Z+10, r18	; 0x0a
    3896:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    389a:	ed b7       	in	r30, 0x3d	; 61
    389c:	fe b7       	in	r31, 0x3e	; 62
    389e:	3c 96       	adiw	r30, 0x0c	; 12
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	fe bf       	out	0x3e, r31	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	ed bf       	out	0x3d, r30	; 61
            uartPuts(s);
    38aa:	ce 01       	movw	r24, r28
    38ac:	8e 59       	subi	r24, 0x9E	; 158
    38ae:	9c 4f       	sbci	r25, 0xFC	; 252
    38b0:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    38b4:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <main+0x3604>
          }
          break;
        case 'p':
          uartPuts("\r\nParty-Mode...\r\n");
    38b8:	80 e9       	ldi	r24, 0x90	; 144
    38ba:	93 e0       	ldi	r25, 0x03	; 3
    38bc:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
          shift32_output(0xffffffff);
    38c0:	6f ef       	ldi	r22, 0xFF	; 255
    38c2:	7f ef       	ldi	r23, 0xFF	; 255
    38c4:	8f ef       	ldi	r24, 0xFF	; 255
    38c6:	9f ef       	ldi	r25, 0xFF	; 255
    38c8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
          uart_str_complete = 0;
    38cc:	10 92 79 05 	sts	0x0579, r1
    38d0:	17 c5       	rjmp	.+2606   	; 0x4300 <main+0x2654>
          while (!uart_str_complete)
          {
            SetColor(0xFF, 0x80, 0x00, 0x00);
    38d2:	8f ef       	ldi	r24, 0xFF	; 255
    38d4:	60 e8       	ldi	r22, 0x80	; 128
    38d6:	40 e0       	ldi	r20, 0x00	; 0
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
            wdt_reset();
    38de:	a8 95       	wdr
    38e0:	fe 01       	movw	r30, r28
    38e2:	ed 54       	subi	r30, 0x4D	; 77
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	a0 ea       	ldi	r26, 0xA0	; 160
    38ec:	b1 e4       	ldi	r27, 0x41	; 65
    38ee:	80 83       	st	Z, r24
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	a2 83       	std	Z+2, r26	; 0x02
    38f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f6:	8e 01       	movw	r16, r28
    38f8:	01 55       	subi	r16, 0x51	; 81
    38fa:	1f 4f       	sbci	r17, 0xFF	; 255
    38fc:	fe 01       	movw	r30, r28
    38fe:	ed 54       	subi	r30, 0x4D	; 77
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	60 81       	ld	r22, Z
    3904:	71 81       	ldd	r23, Z+1	; 0x01
    3906:	82 81       	ldd	r24, Z+2	; 0x02
    3908:	93 81       	ldd	r25, Z+3	; 0x03
    390a:	26 e6       	ldi	r18, 0x66	; 102
    390c:	36 e6       	ldi	r19, 0x66	; 102
    390e:	46 e6       	ldi	r20, 0x66	; 102
    3910:	55 e4       	ldi	r21, 0x45	; 69
    3912:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	f8 01       	movw	r30, r16
    391c:	80 83       	st	Z, r24
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	a2 83       	std	Z+2, r26	; 0x02
    3922:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3924:	fe 01       	movw	r30, r28
    3926:	e1 55       	subi	r30, 0x51	; 81
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e8       	ldi	r20, 0x80	; 128
    3938:	5f e3       	ldi	r21, 0x3F	; 63
    393a:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    393e:	88 23       	and	r24, r24
    3940:	44 f4       	brge	.+16     	; 0x3952 <main+0x1ca6>
		__ticks = 1;
    3942:	fe 01       	movw	r30, r28
    3944:	e3 55       	subi	r30, 0x53	; 83
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	80 83       	st	Z, r24
    3950:	64 c0       	rjmp	.+200    	; 0x3a1a <main+0x1d6e>
	else if (__tmp > 65535)
    3952:	fe 01       	movw	r30, r28
    3954:	e1 55       	subi	r30, 0x51	; 81
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	82 81       	ldd	r24, Z+2	; 0x02
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	3f ef       	ldi	r19, 0xFF	; 255
    3964:	4f e7       	ldi	r20, 0x7F	; 127
    3966:	57 e4       	ldi	r21, 0x47	; 71
    3968:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    396c:	18 16       	cp	r1, r24
    396e:	0c f0       	brlt	.+2      	; 0x3972 <main+0x1cc6>
    3970:	43 c0       	rjmp	.+134    	; 0x39f8 <main+0x1d4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3972:	fe 01       	movw	r30, r28
    3974:	ed 54       	subi	r30, 0x4D	; 77
    3976:	ff 4f       	sbci	r31, 0xFF	; 255
    3978:	60 81       	ld	r22, Z
    397a:	71 81       	ldd	r23, Z+1	; 0x01
    397c:	82 81       	ldd	r24, Z+2	; 0x02
    397e:	93 81       	ldd	r25, Z+3	; 0x03
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e2       	ldi	r20, 0x20	; 32
    3986:	51 e4       	ldi	r21, 0x41	; 65
    3988:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	8e 01       	movw	r16, r28
    3992:	03 55       	subi	r16, 0x53	; 83
    3994:	1f 4f       	sbci	r17, 0xFF	; 255
    3996:	bc 01       	movw	r22, r24
    3998:	cd 01       	movw	r24, r26
    399a:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	f8 01       	movw	r30, r16
    39a4:	91 83       	std	Z+1, r25	; 0x01
    39a6:	80 83       	st	Z, r24
    39a8:	1f c0       	rjmp	.+62     	; 0x39e8 <main+0x1d3c>
    39aa:	fe 01       	movw	r30, r28
    39ac:	e5 55       	subi	r30, 0x55	; 85
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	80 e7       	ldi	r24, 0x70	; 112
    39b2:	91 e0       	ldi	r25, 0x01	; 1
    39b4:	91 83       	std	Z+1, r25	; 0x01
    39b6:	80 83       	st	Z, r24
    39b8:	fe 01       	movw	r30, r28
    39ba:	e5 55       	subi	r30, 0x55	; 85
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	80 81       	ld	r24, Z
    39c0:	91 81       	ldd	r25, Z+1	; 0x01
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	f1 f7       	brne	.-4      	; 0x39c2 <main+0x1d16>
    39c6:	fe 01       	movw	r30, r28
    39c8:	e5 55       	subi	r30, 0x55	; 85
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	91 83       	std	Z+1, r25	; 0x01
    39ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d0:	de 01       	movw	r26, r28
    39d2:	a3 55       	subi	r26, 0x53	; 83
    39d4:	bf 4f       	sbci	r27, 0xFF	; 255
    39d6:	fe 01       	movw	r30, r28
    39d8:	e3 55       	subi	r30, 0x53	; 83
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	80 81       	ld	r24, Z
    39de:	91 81       	ldd	r25, Z+1	; 0x01
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	11 96       	adiw	r26, 0x01	; 1
    39e4:	9c 93       	st	X, r25
    39e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e8:	fe 01       	movw	r30, r28
    39ea:	e3 55       	subi	r30, 0x53	; 83
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	80 81       	ld	r24, Z
    39f0:	91 81       	ldd	r25, Z+1	; 0x01
    39f2:	00 97       	sbiw	r24, 0x00	; 0
    39f4:	d1 f6       	brne	.-76     	; 0x39aa <main+0x1cfe>
    39f6:	27 c0       	rjmp	.+78     	; 0x3a46 <main+0x1d9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f8:	8e 01       	movw	r16, r28
    39fa:	03 55       	subi	r16, 0x53	; 83
    39fc:	1f 4f       	sbci	r17, 0xFF	; 255
    39fe:	fe 01       	movw	r30, r28
    3a00:	e1 55       	subi	r30, 0x51	; 81
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	60 81       	ld	r22, Z
    3a06:	71 81       	ldd	r23, Z+1	; 0x01
    3a08:	82 81       	ldd	r24, Z+2	; 0x02
    3a0a:	93 81       	ldd	r25, Z+3	; 0x03
    3a0c:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	f8 01       	movw	r30, r16
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	80 83       	st	Z, r24
    3a1a:	de 01       	movw	r26, r28
    3a1c:	a7 55       	subi	r26, 0x57	; 87
    3a1e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a20:	fe 01       	movw	r30, r28
    3a22:	e3 55       	subi	r30, 0x53	; 83
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	80 81       	ld	r24, Z
    3a28:	91 81       	ldd	r25, Z+1	; 0x01
    3a2a:	8d 93       	st	X+, r24
    3a2c:	9c 93       	st	X, r25
    3a2e:	fe 01       	movw	r30, r28
    3a30:	e7 55       	subi	r30, 0x57	; 87
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	80 81       	ld	r24, Z
    3a36:	91 81       	ldd	r25, Z+1	; 0x01
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	f1 f7       	brne	.-4      	; 0x3a38 <main+0x1d8c>
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	e7 55       	subi	r30, 0x57	; 87
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	80 83       	st	Z, r24
            _delay_ms(20);
            SetColor(0xFF, 0xFF, 0x00, 0x00);
    3a46:	8f ef       	ldi	r24, 0xFF	; 255
    3a48:	6f ef       	ldi	r22, 0xFF	; 255
    3a4a:	40 e0       	ldi	r20, 0x00	; 0
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
            wdt_reset();
    3a52:	a8 95       	wdr
    3a54:	fe 01       	movw	r30, r28
    3a56:	eb 55       	subi	r30, 0x5B	; 91
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	a8 e4       	ldi	r26, 0x48	; 72
    3a60:	b3 e4       	ldi	r27, 0x43	; 67
    3a62:	80 83       	st	Z, r24
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	a2 83       	std	Z+2, r26	; 0x02
    3a68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6a:	8e 01       	movw	r16, r28
    3a6c:	0f 55       	subi	r16, 0x5F	; 95
    3a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a70:	fe 01       	movw	r30, r28
    3a72:	eb 55       	subi	r30, 0x5B	; 91
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	60 81       	ld	r22, Z
    3a78:	71 81       	ldd	r23, Z+1	; 0x01
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	26 e6       	ldi	r18, 0x66	; 102
    3a80:	36 e6       	ldi	r19, 0x66	; 102
    3a82:	46 e6       	ldi	r20, 0x66	; 102
    3a84:	55 e4       	ldi	r21, 0x45	; 69
    3a86:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	f8 01       	movw	r30, r16
    3a90:	80 83       	st	Z, r24
    3a92:	91 83       	std	Z+1, r25	; 0x01
    3a94:	a2 83       	std	Z+2, r26	; 0x02
    3a96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a98:	fe 01       	movw	r30, r28
    3a9a:	ef 55       	subi	r30, 0x5F	; 95
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e8       	ldi	r20, 0x80	; 128
    3aac:	5f e3       	ldi	r21, 0x3F	; 63
    3aae:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    3ab2:	88 23       	and	r24, r24
    3ab4:	44 f4       	brge	.+16     	; 0x3ac6 <main+0x1e1a>
		__ticks = 1;
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e1 56       	subi	r30, 0x61	; 97
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
    3ac4:	64 c0       	rjmp	.+200    	; 0x3b8e <main+0x1ee2>
	else if (__tmp > 65535)
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	ef 55       	subi	r30, 0x5F	; 95
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	60 81       	ld	r22, Z
    3ace:	71 81       	ldd	r23, Z+1	; 0x01
    3ad0:	82 81       	ldd	r24, Z+2	; 0x02
    3ad2:	93 81       	ldd	r25, Z+3	; 0x03
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	3f ef       	ldi	r19, 0xFF	; 255
    3ad8:	4f e7       	ldi	r20, 0x7F	; 127
    3ada:	57 e4       	ldi	r21, 0x47	; 71
    3adc:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    3ae0:	18 16       	cp	r1, r24
    3ae2:	0c f0       	brlt	.+2      	; 0x3ae6 <main+0x1e3a>
    3ae4:	43 c0       	rjmp	.+134    	; 0x3b6c <main+0x1ec0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	eb 55       	subi	r30, 0x5B	; 91
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	60 81       	ld	r22, Z
    3aee:	71 81       	ldd	r23, Z+1	; 0x01
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	40 e2       	ldi	r20, 0x20	; 32
    3afa:	51 e4       	ldi	r21, 0x41	; 65
    3afc:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	8e 01       	movw	r16, r28
    3b06:	01 56       	subi	r16, 0x61	; 97
    3b08:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0a:	bc 01       	movw	r22, r24
    3b0c:	cd 01       	movw	r24, r26
    3b0e:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	f8 01       	movw	r30, r16
    3b18:	91 83       	std	Z+1, r25	; 0x01
    3b1a:	80 83       	st	Z, r24
    3b1c:	1f c0       	rjmp	.+62     	; 0x3b5c <main+0x1eb0>
    3b1e:	fe 01       	movw	r30, r28
    3b20:	e3 56       	subi	r30, 0x63	; 99
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	80 e7       	ldi	r24, 0x70	; 112
    3b26:	91 e0       	ldi	r25, 0x01	; 1
    3b28:	91 83       	std	Z+1, r25	; 0x01
    3b2a:	80 83       	st	Z, r24
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e3 56       	subi	r30, 0x63	; 99
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	80 81       	ld	r24, Z
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	f1 f7       	brne	.-4      	; 0x3b36 <main+0x1e8a>
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e3 56       	subi	r30, 0x63	; 99
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	91 83       	std	Z+1, r25	; 0x01
    3b42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b44:	de 01       	movw	r26, r28
    3b46:	a1 56       	subi	r26, 0x61	; 97
    3b48:	bf 4f       	sbci	r27, 0xFF	; 255
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e1 56       	subi	r30, 0x61	; 97
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	80 81       	ld	r24, Z
    3b52:	91 81       	ldd	r25, Z+1	; 0x01
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	11 96       	adiw	r26, 0x01	; 1
    3b58:	9c 93       	st	X, r25
    3b5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	e1 56       	subi	r30, 0x61	; 97
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	80 81       	ld	r24, Z
    3b64:	91 81       	ldd	r25, Z+1	; 0x01
    3b66:	00 97       	sbiw	r24, 0x00	; 0
    3b68:	d1 f6       	brne	.-76     	; 0x3b1e <main+0x1e72>
    3b6a:	27 c0       	rjmp	.+78     	; 0x3bba <main+0x1f0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6c:	8e 01       	movw	r16, r28
    3b6e:	01 56       	subi	r16, 0x61	; 97
    3b70:	1f 4f       	sbci	r17, 0xFF	; 255
    3b72:	fe 01       	movw	r30, r28
    3b74:	ef 55       	subi	r30, 0x5F	; 95
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	60 81       	ld	r22, Z
    3b7a:	71 81       	ldd	r23, Z+1	; 0x01
    3b7c:	82 81       	ldd	r24, Z+2	; 0x02
    3b7e:	93 81       	ldd	r25, Z+3	; 0x03
    3b80:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	f8 01       	movw	r30, r16
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	80 83       	st	Z, r24
    3b8e:	de 01       	movw	r26, r28
    3b90:	a5 56       	subi	r26, 0x65	; 101
    3b92:	bf 4f       	sbci	r27, 0xFF	; 255
    3b94:	fe 01       	movw	r30, r28
    3b96:	e1 56       	subi	r30, 0x61	; 97
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	80 81       	ld	r24, Z
    3b9c:	91 81       	ldd	r25, Z+1	; 0x01
    3b9e:	8d 93       	st	X+, r24
    3ba0:	9c 93       	st	X, r25
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e5 56       	subi	r30, 0x65	; 101
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	80 81       	ld	r24, Z
    3baa:	91 81       	ldd	r25, Z+1	; 0x01
    3bac:	01 97       	sbiw	r24, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <main+0x1f00>
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	e5 56       	subi	r30, 0x65	; 101
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	91 83       	std	Z+1, r25	; 0x01
    3bb8:	80 83       	st	Z, r24
            _delay_ms(200);
            SetColor(0xFF, 0x00, 0x80, 0x00);
    3bba:	8f ef       	ldi	r24, 0xFF	; 255
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	40 e8       	ldi	r20, 0x80	; 128
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
            wdt_reset();
    3bc6:	a8 95       	wdr
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e9 56       	subi	r30, 0x69	; 105
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	a0 ea       	ldi	r26, 0xA0	; 160
    3bd4:	b1 e4       	ldi	r27, 0x41	; 65
    3bd6:	80 83       	st	Z, r24
    3bd8:	91 83       	std	Z+1, r25	; 0x01
    3bda:	a2 83       	std	Z+2, r26	; 0x02
    3bdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bde:	8e 01       	movw	r16, r28
    3be0:	0d 56       	subi	r16, 0x6D	; 109
    3be2:	1f 4f       	sbci	r17, 0xFF	; 255
    3be4:	fe 01       	movw	r30, r28
    3be6:	e9 56       	subi	r30, 0x69	; 105
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	60 81       	ld	r22, Z
    3bec:	71 81       	ldd	r23, Z+1	; 0x01
    3bee:	82 81       	ldd	r24, Z+2	; 0x02
    3bf0:	93 81       	ldd	r25, Z+3	; 0x03
    3bf2:	26 e6       	ldi	r18, 0x66	; 102
    3bf4:	36 e6       	ldi	r19, 0x66	; 102
    3bf6:	46 e6       	ldi	r20, 0x66	; 102
    3bf8:	55 e4       	ldi	r21, 0x45	; 69
    3bfa:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	f8 01       	movw	r30, r16
    3c04:	80 83       	st	Z, r24
    3c06:	91 83       	std	Z+1, r25	; 0x01
    3c08:	a2 83       	std	Z+2, r26	; 0x02
    3c0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	ed 56       	subi	r30, 0x6D	; 109
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	60 81       	ld	r22, Z
    3c14:	71 81       	ldd	r23, Z+1	; 0x01
    3c16:	82 81       	ldd	r24, Z+2	; 0x02
    3c18:	93 81       	ldd	r25, Z+3	; 0x03
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	40 e8       	ldi	r20, 0x80	; 128
    3c20:	5f e3       	ldi	r21, 0x3F	; 63
    3c22:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    3c26:	88 23       	and	r24, r24
    3c28:	44 f4       	brge	.+16     	; 0x3c3a <main+0x1f8e>
		__ticks = 1;
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	ef 56       	subi	r30, 0x6F	; 111
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	80 83       	st	Z, r24
    3c38:	64 c0       	rjmp	.+200    	; 0x3d02 <main+0x2056>
	else if (__tmp > 65535)
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	ed 56       	subi	r30, 0x6D	; 109
    3c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c40:	60 81       	ld	r22, Z
    3c42:	71 81       	ldd	r23, Z+1	; 0x01
    3c44:	82 81       	ldd	r24, Z+2	; 0x02
    3c46:	93 81       	ldd	r25, Z+3	; 0x03
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	3f ef       	ldi	r19, 0xFF	; 255
    3c4c:	4f e7       	ldi	r20, 0x7F	; 127
    3c4e:	57 e4       	ldi	r21, 0x47	; 71
    3c50:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    3c54:	18 16       	cp	r1, r24
    3c56:	0c f0       	brlt	.+2      	; 0x3c5a <main+0x1fae>
    3c58:	43 c0       	rjmp	.+134    	; 0x3ce0 <main+0x2034>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	e9 56       	subi	r30, 0x69	; 105
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	60 81       	ld	r22, Z
    3c62:	71 81       	ldd	r23, Z+1	; 0x01
    3c64:	82 81       	ldd	r24, Z+2	; 0x02
    3c66:	93 81       	ldd	r25, Z+3	; 0x03
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	40 e2       	ldi	r20, 0x20	; 32
    3c6e:	51 e4       	ldi	r21, 0x41	; 65
    3c70:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	8e 01       	movw	r16, r28
    3c7a:	0f 56       	subi	r16, 0x6F	; 111
    3c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c7e:	bc 01       	movw	r22, r24
    3c80:	cd 01       	movw	r24, r26
    3c82:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	91 83       	std	Z+1, r25	; 0x01
    3c8e:	80 83       	st	Z, r24
    3c90:	1f c0       	rjmp	.+62     	; 0x3cd0 <main+0x2024>
    3c92:	fe 01       	movw	r30, r28
    3c94:	e1 57       	subi	r30, 0x71	; 113
    3c96:	ff 4f       	sbci	r31, 0xFF	; 255
    3c98:	80 e7       	ldi	r24, 0x70	; 112
    3c9a:	91 e0       	ldi	r25, 0x01	; 1
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e1 57       	subi	r30, 0x71	; 113
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	80 81       	ld	r24, Z
    3ca8:	91 81       	ldd	r25, Z+1	; 0x01
    3caa:	01 97       	sbiw	r24, 0x01	; 1
    3cac:	f1 f7       	brne	.-4      	; 0x3caa <main+0x1ffe>
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e1 57       	subi	r30, 0x71	; 113
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	91 83       	std	Z+1, r25	; 0x01
    3cb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb8:	de 01       	movw	r26, r28
    3cba:	af 56       	subi	r26, 0x6F	; 111
    3cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	ef 56       	subi	r30, 0x6F	; 111
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	80 81       	ld	r24, Z
    3cc6:	91 81       	ldd	r25, Z+1	; 0x01
    3cc8:	01 97       	sbiw	r24, 0x01	; 1
    3cca:	11 96       	adiw	r26, 0x01	; 1
    3ccc:	9c 93       	st	X, r25
    3cce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	ef 56       	subi	r30, 0x6F	; 111
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	80 81       	ld	r24, Z
    3cd8:	91 81       	ldd	r25, Z+1	; 0x01
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	d1 f6       	brne	.-76     	; 0x3c92 <main+0x1fe6>
    3cde:	27 c0       	rjmp	.+78     	; 0x3d2e <main+0x2082>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce0:	8e 01       	movw	r16, r28
    3ce2:	0f 56       	subi	r16, 0x6F	; 111
    3ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	ed 56       	subi	r30, 0x6D	; 109
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	60 81       	ld	r22, Z
    3cee:	71 81       	ldd	r23, Z+1	; 0x01
    3cf0:	82 81       	ldd	r24, Z+2	; 0x02
    3cf2:	93 81       	ldd	r25, Z+3	; 0x03
    3cf4:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	f8 01       	movw	r30, r16
    3cfe:	91 83       	std	Z+1, r25	; 0x01
    3d00:	80 83       	st	Z, r24
    3d02:	de 01       	movw	r26, r28
    3d04:	a3 57       	subi	r26, 0x73	; 115
    3d06:	bf 4f       	sbci	r27, 0xFF	; 255
    3d08:	fe 01       	movw	r30, r28
    3d0a:	ef 56       	subi	r30, 0x6F	; 111
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	80 81       	ld	r24, Z
    3d10:	91 81       	ldd	r25, Z+1	; 0x01
    3d12:	8d 93       	st	X+, r24
    3d14:	9c 93       	st	X, r25
    3d16:	fe 01       	movw	r30, r28
    3d18:	e3 57       	subi	r30, 0x73	; 115
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	80 81       	ld	r24, Z
    3d1e:	91 81       	ldd	r25, Z+1	; 0x01
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <main+0x2074>
    3d24:	fe 01       	movw	r30, r28
    3d26:	e3 57       	subi	r30, 0x73	; 115
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
            _delay_ms(20);
            SetColor(0xFF, 0x00, 0xFF, 0x00);
    3d2e:	8f ef       	ldi	r24, 0xFF	; 255
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	4f ef       	ldi	r20, 0xFF	; 255
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
            wdt_reset();
    3d3a:	a8 95       	wdr
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	e7 57       	subi	r30, 0x77	; 119
    3d40:	ff 4f       	sbci	r31, 0xFF	; 255
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	a8 e4       	ldi	r26, 0x48	; 72
    3d48:	b3 e4       	ldi	r27, 0x43	; 67
    3d4a:	80 83       	st	Z, r24
    3d4c:	91 83       	std	Z+1, r25	; 0x01
    3d4e:	a2 83       	std	Z+2, r26	; 0x02
    3d50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d52:	8e 01       	movw	r16, r28
    3d54:	0b 57       	subi	r16, 0x7B	; 123
    3d56:	1f 4f       	sbci	r17, 0xFF	; 255
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e7 57       	subi	r30, 0x77	; 119
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	60 81       	ld	r22, Z
    3d60:	71 81       	ldd	r23, Z+1	; 0x01
    3d62:	82 81       	ldd	r24, Z+2	; 0x02
    3d64:	93 81       	ldd	r25, Z+3	; 0x03
    3d66:	26 e6       	ldi	r18, 0x66	; 102
    3d68:	36 e6       	ldi	r19, 0x66	; 102
    3d6a:	46 e6       	ldi	r20, 0x66	; 102
    3d6c:	55 e4       	ldi	r21, 0x45	; 69
    3d6e:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3d72:	dc 01       	movw	r26, r24
    3d74:	cb 01       	movw	r24, r22
    3d76:	f8 01       	movw	r30, r16
    3d78:	80 83       	st	Z, r24
    3d7a:	91 83       	std	Z+1, r25	; 0x01
    3d7c:	a2 83       	std	Z+2, r26	; 0x02
    3d7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d80:	fe 01       	movw	r30, r28
    3d82:	eb 57       	subi	r30, 0x7B	; 123
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	60 81       	ld	r22, Z
    3d88:	71 81       	ldd	r23, Z+1	; 0x01
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	93 81       	ldd	r25, Z+3	; 0x03
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e8       	ldi	r20, 0x80	; 128
    3d94:	5f e3       	ldi	r21, 0x3F	; 63
    3d96:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    3d9a:	88 23       	and	r24, r24
    3d9c:	44 f4       	brge	.+16     	; 0x3dae <main+0x2102>
		__ticks = 1;
    3d9e:	fe 01       	movw	r30, r28
    3da0:	ed 57       	subi	r30, 0x7D	; 125
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	91 83       	std	Z+1, r25	; 0x01
    3daa:	80 83       	st	Z, r24
    3dac:	64 c0       	rjmp	.+200    	; 0x3e76 <main+0x21ca>
	else if (__tmp > 65535)
    3dae:	fe 01       	movw	r30, r28
    3db0:	eb 57       	subi	r30, 0x7B	; 123
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	3f ef       	ldi	r19, 0xFF	; 255
    3dc0:	4f e7       	ldi	r20, 0x7F	; 127
    3dc2:	57 e4       	ldi	r21, 0x47	; 71
    3dc4:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    3dc8:	18 16       	cp	r1, r24
    3dca:	0c f0       	brlt	.+2      	; 0x3dce <main+0x2122>
    3dcc:	43 c0       	rjmp	.+134    	; 0x3e54 <main+0x21a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dce:	fe 01       	movw	r30, r28
    3dd0:	e7 57       	subi	r30, 0x77	; 119
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	60 81       	ld	r22, Z
    3dd6:	71 81       	ldd	r23, Z+1	; 0x01
    3dd8:	82 81       	ldd	r24, Z+2	; 0x02
    3dda:	93 81       	ldd	r25, Z+3	; 0x03
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	40 e2       	ldi	r20, 0x20	; 32
    3de2:	51 e4       	ldi	r21, 0x41	; 65
    3de4:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	8e 01       	movw	r16, r28
    3dee:	0d 57       	subi	r16, 0x7D	; 125
    3df0:	1f 4f       	sbci	r17, 0xFF	; 255
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	f8 01       	movw	r30, r16
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	80 83       	st	Z, r24
    3e04:	1f c0       	rjmp	.+62     	; 0x3e44 <main+0x2198>
    3e06:	fe 01       	movw	r30, r28
    3e08:	ef 57       	subi	r30, 0x7F	; 127
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	80 e7       	ldi	r24, 0x70	; 112
    3e0e:	91 e0       	ldi	r25, 0x01	; 1
    3e10:	91 83       	std	Z+1, r25	; 0x01
    3e12:	80 83       	st	Z, r24
    3e14:	fe 01       	movw	r30, r28
    3e16:	ef 57       	subi	r30, 0x7F	; 127
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	80 81       	ld	r24, Z
    3e1c:	91 81       	ldd	r25, Z+1	; 0x01
    3e1e:	01 97       	sbiw	r24, 0x01	; 1
    3e20:	f1 f7       	brne	.-4      	; 0x3e1e <main+0x2172>
    3e22:	fe 01       	movw	r30, r28
    3e24:	ef 57       	subi	r30, 0x7F	; 127
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2c:	de 01       	movw	r26, r28
    3e2e:	ad 57       	subi	r26, 0x7D	; 125
    3e30:	bf 4f       	sbci	r27, 0xFF	; 255
    3e32:	fe 01       	movw	r30, r28
    3e34:	ed 57       	subi	r30, 0x7D	; 125
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	80 81       	ld	r24, Z
    3e3a:	91 81       	ldd	r25, Z+1	; 0x01
    3e3c:	01 97       	sbiw	r24, 0x01	; 1
    3e3e:	11 96       	adiw	r26, 0x01	; 1
    3e40:	9c 93       	st	X, r25
    3e42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e44:	fe 01       	movw	r30, r28
    3e46:	ed 57       	subi	r30, 0x7D	; 125
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	00 97       	sbiw	r24, 0x00	; 0
    3e50:	d1 f6       	brne	.-76     	; 0x3e06 <main+0x215a>
    3e52:	27 c0       	rjmp	.+78     	; 0x3ea2 <main+0x21f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e54:	8e 01       	movw	r16, r28
    3e56:	0d 57       	subi	r16, 0x7D	; 125
    3e58:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	eb 57       	subi	r30, 0x7B	; 123
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	60 81       	ld	r22, Z
    3e62:	71 81       	ldd	r23, Z+1	; 0x01
    3e64:	82 81       	ldd	r24, Z+2	; 0x02
    3e66:	93 81       	ldd	r25, Z+3	; 0x03
    3e68:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	f8 01       	movw	r30, r16
    3e72:	91 83       	std	Z+1, r25	; 0x01
    3e74:	80 83       	st	Z, r24
    3e76:	de 01       	movw	r26, r28
    3e78:	a1 58       	subi	r26, 0x81	; 129
    3e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	ed 57       	subi	r30, 0x7D	; 125
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 81       	ld	r24, Z
    3e84:	91 81       	ldd	r25, Z+1	; 0x01
    3e86:	8d 93       	st	X+, r24
    3e88:	9c 93       	st	X, r25
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	e1 58       	subi	r30, 0x81	; 129
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	80 81       	ld	r24, Z
    3e92:	91 81       	ldd	r25, Z+1	; 0x01
    3e94:	01 97       	sbiw	r24, 0x01	; 1
    3e96:	f1 f7       	brne	.-4      	; 0x3e94 <main+0x21e8>
    3e98:	fe 01       	movw	r30, r28
    3e9a:	e1 58       	subi	r30, 0x81	; 129
    3e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9e:	91 83       	std	Z+1, r25	; 0x01
    3ea0:	80 83       	st	Z, r24
            _delay_ms(200);
            SetColor(0xFF, 0x00, 0x00, 0x80);
    3ea2:	8f ef       	ldi	r24, 0xFF	; 255
    3ea4:	60 e0       	ldi	r22, 0x00	; 0
    3ea6:	40 e0       	ldi	r20, 0x00	; 0
    3ea8:	20 e8       	ldi	r18, 0x80	; 128
    3eaa:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
            wdt_reset();
    3eae:	a8 95       	wdr
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e5 58       	subi	r30, 0x85	; 133
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	a0 ea       	ldi	r26, 0xA0	; 160
    3ebc:	b1 e4       	ldi	r27, 0x41	; 65
    3ebe:	80 83       	st	Z, r24
    3ec0:	91 83       	std	Z+1, r25	; 0x01
    3ec2:	a2 83       	std	Z+2, r26	; 0x02
    3ec4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec6:	8e 01       	movw	r16, r28
    3ec8:	09 58       	subi	r16, 0x89	; 137
    3eca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e5 58       	subi	r30, 0x85	; 133
    3ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed2:	60 81       	ld	r22, Z
    3ed4:	71 81       	ldd	r23, Z+1	; 0x01
    3ed6:	82 81       	ldd	r24, Z+2	; 0x02
    3ed8:	93 81       	ldd	r25, Z+3	; 0x03
    3eda:	26 e6       	ldi	r18, 0x66	; 102
    3edc:	36 e6       	ldi	r19, 0x66	; 102
    3ede:	46 e6       	ldi	r20, 0x66	; 102
    3ee0:	55 e4       	ldi	r21, 0x45	; 69
    3ee2:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	f8 01       	movw	r30, r16
    3eec:	80 83       	st	Z, r24
    3eee:	91 83       	std	Z+1, r25	; 0x01
    3ef0:	a2 83       	std	Z+2, r26	; 0x02
    3ef2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e9 58       	subi	r30, 0x89	; 137
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	60 81       	ld	r22, Z
    3efc:	71 81       	ldd	r23, Z+1	; 0x01
    3efe:	82 81       	ldd	r24, Z+2	; 0x02
    3f00:	93 81       	ldd	r25, Z+3	; 0x03
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e8       	ldi	r20, 0x80	; 128
    3f08:	5f e3       	ldi	r21, 0x3F	; 63
    3f0a:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    3f0e:	88 23       	and	r24, r24
    3f10:	44 f4       	brge	.+16     	; 0x3f22 <main+0x2276>
		__ticks = 1;
    3f12:	fe 01       	movw	r30, r28
    3f14:	eb 58       	subi	r30, 0x8B	; 139
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	91 83       	std	Z+1, r25	; 0x01
    3f1e:	80 83       	st	Z, r24
    3f20:	64 c0       	rjmp	.+200    	; 0x3fea <main+0x233e>
	else if (__tmp > 65535)
    3f22:	fe 01       	movw	r30, r28
    3f24:	e9 58       	subi	r30, 0x89	; 137
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	60 81       	ld	r22, Z
    3f2a:	71 81       	ldd	r23, Z+1	; 0x01
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	93 81       	ldd	r25, Z+3	; 0x03
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	3f ef       	ldi	r19, 0xFF	; 255
    3f34:	4f e7       	ldi	r20, 0x7F	; 127
    3f36:	57 e4       	ldi	r21, 0x47	; 71
    3f38:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    3f3c:	18 16       	cp	r1, r24
    3f3e:	0c f0       	brlt	.+2      	; 0x3f42 <main+0x2296>
    3f40:	43 c0       	rjmp	.+134    	; 0x3fc8 <main+0x231c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f42:	fe 01       	movw	r30, r28
    3f44:	e5 58       	subi	r30, 0x85	; 133
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	93 81       	ldd	r25, Z+3	; 0x03
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	40 e2       	ldi	r20, 0x20	; 32
    3f56:	51 e4       	ldi	r21, 0x41	; 65
    3f58:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	8e 01       	movw	r16, r28
    3f62:	0b 58       	subi	r16, 0x8B	; 139
    3f64:	1f 4f       	sbci	r17, 0xFF	; 255
    3f66:	bc 01       	movw	r22, r24
    3f68:	cd 01       	movw	r24, r26
    3f6a:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3f6e:	dc 01       	movw	r26, r24
    3f70:	cb 01       	movw	r24, r22
    3f72:	f8 01       	movw	r30, r16
    3f74:	91 83       	std	Z+1, r25	; 0x01
    3f76:	80 83       	st	Z, r24
    3f78:	1f c0       	rjmp	.+62     	; 0x3fb8 <main+0x230c>
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	ed 58       	subi	r30, 0x8D	; 141
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	80 e7       	ldi	r24, 0x70	; 112
    3f82:	91 e0       	ldi	r25, 0x01	; 1
    3f84:	91 83       	std	Z+1, r25	; 0x01
    3f86:	80 83       	st	Z, r24
    3f88:	fe 01       	movw	r30, r28
    3f8a:	ed 58       	subi	r30, 0x8D	; 141
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	01 97       	sbiw	r24, 0x01	; 1
    3f94:	f1 f7       	brne	.-4      	; 0x3f92 <main+0x22e6>
    3f96:	fe 01       	movw	r30, r28
    3f98:	ed 58       	subi	r30, 0x8D	; 141
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	91 83       	std	Z+1, r25	; 0x01
    3f9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa0:	de 01       	movw	r26, r28
    3fa2:	ab 58       	subi	r26, 0x8B	; 139
    3fa4:	bf 4f       	sbci	r27, 0xFF	; 255
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	eb 58       	subi	r30, 0x8B	; 139
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	80 81       	ld	r24, Z
    3fae:	91 81       	ldd	r25, Z+1	; 0x01
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	11 96       	adiw	r26, 0x01	; 1
    3fb4:	9c 93       	st	X, r25
    3fb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb8:	fe 01       	movw	r30, r28
    3fba:	eb 58       	subi	r30, 0x8B	; 139
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	80 81       	ld	r24, Z
    3fc0:	91 81       	ldd	r25, Z+1	; 0x01
    3fc2:	00 97       	sbiw	r24, 0x00	; 0
    3fc4:	d1 f6       	brne	.-76     	; 0x3f7a <main+0x22ce>
    3fc6:	27 c0       	rjmp	.+78     	; 0x4016 <main+0x236a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc8:	8e 01       	movw	r16, r28
    3fca:	0b 58       	subi	r16, 0x8B	; 139
    3fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e9 58       	subi	r30, 0x89	; 137
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	60 81       	ld	r22, Z
    3fd6:	71 81       	ldd	r23, Z+1	; 0x01
    3fd8:	82 81       	ldd	r24, Z+2	; 0x02
    3fda:	93 81       	ldd	r25, Z+3	; 0x03
    3fdc:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	f8 01       	movw	r30, r16
    3fe6:	91 83       	std	Z+1, r25	; 0x01
    3fe8:	80 83       	st	Z, r24
    3fea:	de 01       	movw	r26, r28
    3fec:	af 58       	subi	r26, 0x8F	; 143
    3fee:	bf 4f       	sbci	r27, 0xFF	; 255
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	eb 58       	subi	r30, 0x8B	; 139
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	80 81       	ld	r24, Z
    3ff8:	91 81       	ldd	r25, Z+1	; 0x01
    3ffa:	8d 93       	st	X+, r24
    3ffc:	9c 93       	st	X, r25
    3ffe:	fe 01       	movw	r30, r28
    4000:	ef 58       	subi	r30, 0x8F	; 143
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 81       	ld	r24, Z
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	f1 f7       	brne	.-4      	; 0x4008 <main+0x235c>
    400c:	fe 01       	movw	r30, r28
    400e:	ef 58       	subi	r30, 0x8F	; 143
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	80 83       	st	Z, r24
            _delay_ms(20);
            SetColor(0xFF, 0x00, 0x00, 0xFF);
    4016:	8f ef       	ldi	r24, 0xFF	; 255
    4018:	60 e0       	ldi	r22, 0x00	; 0
    401a:	40 e0       	ldi	r20, 0x00	; 0
    401c:	2f ef       	ldi	r18, 0xFF	; 255
    401e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
            wdt_reset();
    4022:	a8 95       	wdr
    4024:	fe 01       	movw	r30, r28
    4026:	e3 59       	subi	r30, 0x93	; 147
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	a8 e4       	ldi	r26, 0x48	; 72
    4030:	b3 e4       	ldi	r27, 0x43	; 67
    4032:	80 83       	st	Z, r24
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	a2 83       	std	Z+2, r26	; 0x02
    4038:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403a:	8e 01       	movw	r16, r28
    403c:	07 59       	subi	r16, 0x97	; 151
    403e:	1f 4f       	sbci	r17, 0xFF	; 255
    4040:	fe 01       	movw	r30, r28
    4042:	e3 59       	subi	r30, 0x93	; 147
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	60 81       	ld	r22, Z
    4048:	71 81       	ldd	r23, Z+1	; 0x01
    404a:	82 81       	ldd	r24, Z+2	; 0x02
    404c:	93 81       	ldd	r25, Z+3	; 0x03
    404e:	26 e6       	ldi	r18, 0x66	; 102
    4050:	36 e6       	ldi	r19, 0x66	; 102
    4052:	46 e6       	ldi	r20, 0x66	; 102
    4054:	55 e4       	ldi	r21, 0x45	; 69
    4056:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	f8 01       	movw	r30, r16
    4060:	80 83       	st	Z, r24
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	a2 83       	std	Z+2, r26	; 0x02
    4066:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4068:	fe 01       	movw	r30, r28
    406a:	e7 59       	subi	r30, 0x97	; 151
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	60 81       	ld	r22, Z
    4070:	71 81       	ldd	r23, Z+1	; 0x01
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	93 81       	ldd	r25, Z+3	; 0x03
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	40 e8       	ldi	r20, 0x80	; 128
    407c:	5f e3       	ldi	r21, 0x3F	; 63
    407e:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    4082:	88 23       	and	r24, r24
    4084:	44 f4       	brge	.+16     	; 0x4096 <main+0x23ea>
		__ticks = 1;
    4086:	fe 01       	movw	r30, r28
    4088:	e9 59       	subi	r30, 0x99	; 153
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	91 83       	std	Z+1, r25	; 0x01
    4092:	80 83       	st	Z, r24
    4094:	64 c0       	rjmp	.+200    	; 0x415e <main+0x24b2>
	else if (__tmp > 65535)
    4096:	fe 01       	movw	r30, r28
    4098:	e7 59       	subi	r30, 0x97	; 151
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	60 81       	ld	r22, Z
    409e:	71 81       	ldd	r23, Z+1	; 0x01
    40a0:	82 81       	ldd	r24, Z+2	; 0x02
    40a2:	93 81       	ldd	r25, Z+3	; 0x03
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	3f ef       	ldi	r19, 0xFF	; 255
    40a8:	4f e7       	ldi	r20, 0x7F	; 127
    40aa:	57 e4       	ldi	r21, 0x47	; 71
    40ac:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    40b0:	18 16       	cp	r1, r24
    40b2:	0c f0       	brlt	.+2      	; 0x40b6 <main+0x240a>
    40b4:	43 c0       	rjmp	.+134    	; 0x413c <main+0x2490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b6:	fe 01       	movw	r30, r28
    40b8:	e3 59       	subi	r30, 0x93	; 147
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	60 81       	ld	r22, Z
    40be:	71 81       	ldd	r23, Z+1	; 0x01
    40c0:	82 81       	ldd	r24, Z+2	; 0x02
    40c2:	93 81       	ldd	r25, Z+3	; 0x03
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e2       	ldi	r20, 0x20	; 32
    40ca:	51 e4       	ldi	r21, 0x41	; 65
    40cc:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	8e 01       	movw	r16, r28
    40d6:	09 59       	subi	r16, 0x99	; 153
    40d8:	1f 4f       	sbci	r17, 0xFF	; 255
    40da:	bc 01       	movw	r22, r24
    40dc:	cd 01       	movw	r24, r26
    40de:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	f8 01       	movw	r30, r16
    40e8:	91 83       	std	Z+1, r25	; 0x01
    40ea:	80 83       	st	Z, r24
    40ec:	1f c0       	rjmp	.+62     	; 0x412c <main+0x2480>
    40ee:	fe 01       	movw	r30, r28
    40f0:	eb 59       	subi	r30, 0x9B	; 155
    40f2:	ff 4f       	sbci	r31, 0xFF	; 255
    40f4:	80 e7       	ldi	r24, 0x70	; 112
    40f6:	91 e0       	ldi	r25, 0x01	; 1
    40f8:	91 83       	std	Z+1, r25	; 0x01
    40fa:	80 83       	st	Z, r24
    40fc:	fe 01       	movw	r30, r28
    40fe:	eb 59       	subi	r30, 0x9B	; 155
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	80 81       	ld	r24, Z
    4104:	91 81       	ldd	r25, Z+1	; 0x01
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	f1 f7       	brne	.-4      	; 0x4106 <main+0x245a>
    410a:	fe 01       	movw	r30, r28
    410c:	eb 59       	subi	r30, 0x9B	; 155
    410e:	ff 4f       	sbci	r31, 0xFF	; 255
    4110:	91 83       	std	Z+1, r25	; 0x01
    4112:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4114:	de 01       	movw	r26, r28
    4116:	a9 59       	subi	r26, 0x99	; 153
    4118:	bf 4f       	sbci	r27, 0xFF	; 255
    411a:	fe 01       	movw	r30, r28
    411c:	e9 59       	subi	r30, 0x99	; 153
    411e:	ff 4f       	sbci	r31, 0xFF	; 255
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	11 96       	adiw	r26, 0x01	; 1
    4128:	9c 93       	st	X, r25
    412a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    412c:	fe 01       	movw	r30, r28
    412e:	e9 59       	subi	r30, 0x99	; 153
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	80 81       	ld	r24, Z
    4134:	91 81       	ldd	r25, Z+1	; 0x01
    4136:	00 97       	sbiw	r24, 0x00	; 0
    4138:	d1 f6       	brne	.-76     	; 0x40ee <main+0x2442>
    413a:	27 c0       	rjmp	.+78     	; 0x418a <main+0x24de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    413c:	8e 01       	movw	r16, r28
    413e:	09 59       	subi	r16, 0x99	; 153
    4140:	1f 4f       	sbci	r17, 0xFF	; 255
    4142:	fe 01       	movw	r30, r28
    4144:	e7 59       	subi	r30, 0x97	; 151
    4146:	ff 4f       	sbci	r31, 0xFF	; 255
    4148:	60 81       	ld	r22, Z
    414a:	71 81       	ldd	r23, Z+1	; 0x01
    414c:	82 81       	ldd	r24, Z+2	; 0x02
    414e:	93 81       	ldd	r25, Z+3	; 0x03
    4150:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	f8 01       	movw	r30, r16
    415a:	91 83       	std	Z+1, r25	; 0x01
    415c:	80 83       	st	Z, r24
    415e:	de 01       	movw	r26, r28
    4160:	ad 59       	subi	r26, 0x9D	; 157
    4162:	bf 4f       	sbci	r27, 0xFF	; 255
    4164:	fe 01       	movw	r30, r28
    4166:	e9 59       	subi	r30, 0x99	; 153
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	80 81       	ld	r24, Z
    416c:	91 81       	ldd	r25, Z+1	; 0x01
    416e:	8d 93       	st	X+, r24
    4170:	9c 93       	st	X, r25
    4172:	fe 01       	movw	r30, r28
    4174:	ed 59       	subi	r30, 0x9D	; 157
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	80 81       	ld	r24, Z
    417a:	91 81       	ldd	r25, Z+1	; 0x01
    417c:	01 97       	sbiw	r24, 0x01	; 1
    417e:	f1 f7       	brne	.-4      	; 0x417c <main+0x24d0>
    4180:	fe 01       	movw	r30, r28
    4182:	ed 59       	subi	r30, 0x9D	; 157
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	91 83       	std	Z+1, r25	; 0x01
    4188:	80 83       	st	Z, r24
            _delay_ms(200);
            SetColor(0xFF, 0xFF, 0xFF, 0xFF);
    418a:	8f ef       	ldi	r24, 0xFF	; 255
    418c:	6f ef       	ldi	r22, 0xFF	; 255
    418e:	4f ef       	ldi	r20, 0xFF	; 255
    4190:	2f ef       	ldi	r18, 0xFF	; 255
    4192:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
            wdt_reset();
    4196:	a8 95       	wdr
    4198:	fe 01       	movw	r30, r28
    419a:	e1 5a       	subi	r30, 0xA1	; 161
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	a8 e4       	ldi	r26, 0x48	; 72
    41a4:	b3 e4       	ldi	r27, 0x43	; 67
    41a6:	80 83       	st	Z, r24
    41a8:	91 83       	std	Z+1, r25	; 0x01
    41aa:	a2 83       	std	Z+2, r26	; 0x02
    41ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ae:	8e 01       	movw	r16, r28
    41b0:	05 5a       	subi	r16, 0xA5	; 165
    41b2:	1f 4f       	sbci	r17, 0xFF	; 255
    41b4:	fe 01       	movw	r30, r28
    41b6:	e1 5a       	subi	r30, 0xA1	; 161
    41b8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ba:	60 81       	ld	r22, Z
    41bc:	71 81       	ldd	r23, Z+1	; 0x01
    41be:	82 81       	ldd	r24, Z+2	; 0x02
    41c0:	93 81       	ldd	r25, Z+3	; 0x03
    41c2:	26 e6       	ldi	r18, 0x66	; 102
    41c4:	36 e6       	ldi	r19, 0x66	; 102
    41c6:	46 e6       	ldi	r20, 0x66	; 102
    41c8:	55 e4       	ldi	r21, 0x45	; 69
    41ca:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    41ce:	dc 01       	movw	r26, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	f8 01       	movw	r30, r16
    41d4:	80 83       	st	Z, r24
    41d6:	91 83       	std	Z+1, r25	; 0x01
    41d8:	a2 83       	std	Z+2, r26	; 0x02
    41da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41dc:	fe 01       	movw	r30, r28
    41de:	e5 5a       	subi	r30, 0xA5	; 165
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	60 81       	ld	r22, Z
    41e4:	71 81       	ldd	r23, Z+1	; 0x01
    41e6:	82 81       	ldd	r24, Z+2	; 0x02
    41e8:	93 81       	ldd	r25, Z+3	; 0x03
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	40 e8       	ldi	r20, 0x80	; 128
    41f0:	5f e3       	ldi	r21, 0x3F	; 63
    41f2:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    41f6:	88 23       	and	r24, r24
    41f8:	44 f4       	brge	.+16     	; 0x420a <main+0x255e>
		__ticks = 1;
    41fa:	fe 01       	movw	r30, r28
    41fc:	e7 5a       	subi	r30, 0xA7	; 167
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	91 83       	std	Z+1, r25	; 0x01
    4206:	80 83       	st	Z, r24
    4208:	64 c0       	rjmp	.+200    	; 0x42d2 <main+0x2626>
	else if (__tmp > 65535)
    420a:	fe 01       	movw	r30, r28
    420c:	e5 5a       	subi	r30, 0xA5	; 165
    420e:	ff 4f       	sbci	r31, 0xFF	; 255
    4210:	60 81       	ld	r22, Z
    4212:	71 81       	ldd	r23, Z+1	; 0x01
    4214:	82 81       	ldd	r24, Z+2	; 0x02
    4216:	93 81       	ldd	r25, Z+3	; 0x03
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	3f ef       	ldi	r19, 0xFF	; 255
    421c:	4f e7       	ldi	r20, 0x7F	; 127
    421e:	57 e4       	ldi	r21, 0x47	; 71
    4220:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    4224:	18 16       	cp	r1, r24
    4226:	0c f0       	brlt	.+2      	; 0x422a <main+0x257e>
    4228:	43 c0       	rjmp	.+134    	; 0x42b0 <main+0x2604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422a:	fe 01       	movw	r30, r28
    422c:	e1 5a       	subi	r30, 0xA1	; 161
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	60 81       	ld	r22, Z
    4232:	71 81       	ldd	r23, Z+1	; 0x01
    4234:	82 81       	ldd	r24, Z+2	; 0x02
    4236:	93 81       	ldd	r25, Z+3	; 0x03
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	40 e2       	ldi	r20, 0x20	; 32
    423e:	51 e4       	ldi	r21, 0x41	; 65
    4240:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	8e 01       	movw	r16, r28
    424a:	07 5a       	subi	r16, 0xA7	; 167
    424c:	1f 4f       	sbci	r17, 0xFF	; 255
    424e:	bc 01       	movw	r22, r24
    4250:	cd 01       	movw	r24, r26
    4252:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	f8 01       	movw	r30, r16
    425c:	91 83       	std	Z+1, r25	; 0x01
    425e:	80 83       	st	Z, r24
    4260:	1f c0       	rjmp	.+62     	; 0x42a0 <main+0x25f4>
    4262:	fe 01       	movw	r30, r28
    4264:	e9 5a       	subi	r30, 0xA9	; 169
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	80 e7       	ldi	r24, 0x70	; 112
    426a:	91 e0       	ldi	r25, 0x01	; 1
    426c:	91 83       	std	Z+1, r25	; 0x01
    426e:	80 83       	st	Z, r24
    4270:	fe 01       	movw	r30, r28
    4272:	e9 5a       	subi	r30, 0xA9	; 169
    4274:	ff 4f       	sbci	r31, 0xFF	; 255
    4276:	80 81       	ld	r24, Z
    4278:	91 81       	ldd	r25, Z+1	; 0x01
    427a:	01 97       	sbiw	r24, 0x01	; 1
    427c:	f1 f7       	brne	.-4      	; 0x427a <main+0x25ce>
    427e:	fe 01       	movw	r30, r28
    4280:	e9 5a       	subi	r30, 0xA9	; 169
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	91 83       	std	Z+1, r25	; 0x01
    4286:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4288:	de 01       	movw	r26, r28
    428a:	a7 5a       	subi	r26, 0xA7	; 167
    428c:	bf 4f       	sbci	r27, 0xFF	; 255
    428e:	fe 01       	movw	r30, r28
    4290:	e7 5a       	subi	r30, 0xA7	; 167
    4292:	ff 4f       	sbci	r31, 0xFF	; 255
    4294:	80 81       	ld	r24, Z
    4296:	91 81       	ldd	r25, Z+1	; 0x01
    4298:	01 97       	sbiw	r24, 0x01	; 1
    429a:	11 96       	adiw	r26, 0x01	; 1
    429c:	9c 93       	st	X, r25
    429e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a0:	fe 01       	movw	r30, r28
    42a2:	e7 5a       	subi	r30, 0xA7	; 167
    42a4:	ff 4f       	sbci	r31, 0xFF	; 255
    42a6:	80 81       	ld	r24, Z
    42a8:	91 81       	ldd	r25, Z+1	; 0x01
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	d1 f6       	brne	.-76     	; 0x4262 <main+0x25b6>
    42ae:	28 c0       	rjmp	.+80     	; 0x4300 <main+0x2654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42b0:	8e 01       	movw	r16, r28
    42b2:	07 5a       	subi	r16, 0xA7	; 167
    42b4:	1f 4f       	sbci	r17, 0xFF	; 255
    42b6:	fe 01       	movw	r30, r28
    42b8:	e5 5a       	subi	r30, 0xA5	; 165
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	60 81       	ld	r22, Z
    42be:	71 81       	ldd	r23, Z+1	; 0x01
    42c0:	82 81       	ldd	r24, Z+2	; 0x02
    42c2:	93 81       	ldd	r25, Z+3	; 0x03
    42c4:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	f8 01       	movw	r30, r16
    42ce:	91 83       	std	Z+1, r25	; 0x01
    42d0:	80 83       	st	Z, r24
    42d2:	de 01       	movw	r26, r28
    42d4:	ab 5a       	subi	r26, 0xAB	; 171
    42d6:	bf 4f       	sbci	r27, 0xFF	; 255
    42d8:	fe 01       	movw	r30, r28
    42da:	e7 5a       	subi	r30, 0xA7	; 167
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	80 81       	ld	r24, Z
    42e0:	91 81       	ldd	r25, Z+1	; 0x01
    42e2:	11 96       	adiw	r26, 0x01	; 1
    42e4:	9c 93       	st	X, r25
    42e6:	8e 93       	st	-X, r24
    42e8:	fe 01       	movw	r30, r28
    42ea:	eb 5a       	subi	r30, 0xAB	; 171
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	80 81       	ld	r24, Z
    42f0:	91 81       	ldd	r25, Z+1	; 0x01
    42f2:	01 97       	sbiw	r24, 0x01	; 1
    42f4:	f1 f7       	brne	.-4      	; 0x42f2 <main+0x2646>
    42f6:	fe 01       	movw	r30, r28
    42f8:	eb 5a       	subi	r30, 0xAB	; 171
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	91 83       	std	Z+1, r25	; 0x01
    42fe:	80 83       	st	Z, r24
          break;
        case 'p':
          uartPuts("\r\nParty-Mode...\r\n");
          shift32_output(0xffffffff);
          uart_str_complete = 0;
          while (!uart_str_complete)
    4300:	80 91 79 05 	lds	r24, 0x0579
    4304:	88 23       	and	r24, r24
    4306:	09 f4       	brne	.+2      	; 0x430a <main+0x265e>
    4308:	e4 ca       	rjmp	.-2616   	; 0x38d2 <main+0x1c26>
            _delay_ms(200);
            SetColor(0xFF, 0xFF, 0xFF, 0xFF);
            wdt_reset();
            _delay_ms(200);
          }
          wdt_reset();
    430a:	a8 95       	wdr
          SetColor(0, 0, 0, 0);
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	60 e0       	ldi	r22, 0x00	; 0
    4310:	40 e0       	ldi	r20, 0x00	; 0
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    4318:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <main+0x3604>
          break;
        case 'q':
          {
            long q1 = hex2dez((char*) &uart_string[2]);
    431c:	8b eb       	ldi	r24, 0xBB	; 187
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    4324:	fe 01       	movw	r30, r28
    4326:	e3 58       	subi	r30, 0x83	; 131
    4328:	fd 4f       	sbci	r31, 0xFD	; 253
    432a:	aa 27       	eor	r26, r26
    432c:	97 fd       	sbrc	r25, 7
    432e:	a0 95       	com	r26
    4330:	ba 2f       	mov	r27, r26
    4332:	80 83       	st	Z, r24
    4334:	91 83       	std	Z+1, r25	; 0x01
    4336:	a2 83       	std	Z+2, r26	; 0x02
    4338:	b3 83       	std	Z+3, r27	; 0x03
            q1 <<= 8;
    433a:	9e 01       	movw	r18, r28
    433c:	23 58       	subi	r18, 0x83	; 131
    433e:	3d 4f       	sbci	r19, 0xFD	; 253
    4340:	fe 01       	movw	r30, r28
    4342:	e3 58       	subi	r30, 0x83	; 131
    4344:	fd 4f       	sbci	r31, 0xFD	; 253
    4346:	80 81       	ld	r24, Z
    4348:	91 81       	ldd	r25, Z+1	; 0x01
    434a:	a2 81       	ldd	r26, Z+2	; 0x02
    434c:	b3 81       	ldd	r27, Z+3	; 0x03
    434e:	ba 2f       	mov	r27, r26
    4350:	a9 2f       	mov	r26, r25
    4352:	98 2f       	mov	r25, r24
    4354:	88 27       	eor	r24, r24
    4356:	f9 01       	movw	r30, r18
    4358:	80 83       	st	Z, r24
    435a:	91 83       	std	Z+1, r25	; 0x01
    435c:	a2 83       	std	Z+2, r26	; 0x02
    435e:	b3 83       	std	Z+3, r27	; 0x03
            q1 |= hex2dez((char*) &uart_string[4]);
    4360:	8d eb       	ldi	r24, 0xBD	; 189
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    4368:	9c 01       	movw	r18, r24
    436a:	44 27       	eor	r20, r20
    436c:	37 fd       	sbrc	r19, 7
    436e:	40 95       	com	r20
    4370:	54 2f       	mov	r21, r20
    4372:	be 01       	movw	r22, r28
    4374:	63 58       	subi	r22, 0x83	; 131
    4376:	7d 4f       	sbci	r23, 0xFD	; 253
    4378:	fe 01       	movw	r30, r28
    437a:	e3 58       	subi	r30, 0x83	; 131
    437c:	fd 4f       	sbci	r31, 0xFD	; 253
    437e:	80 81       	ld	r24, Z
    4380:	91 81       	ldd	r25, Z+1	; 0x01
    4382:	a2 81       	ldd	r26, Z+2	; 0x02
    4384:	b3 81       	ldd	r27, Z+3	; 0x03
    4386:	82 2b       	or	r24, r18
    4388:	93 2b       	or	r25, r19
    438a:	a4 2b       	or	r26, r20
    438c:	b5 2b       	or	r27, r21
    438e:	fb 01       	movw	r30, r22
    4390:	80 83       	st	Z, r24
    4392:	91 83       	std	Z+1, r25	; 0x01
    4394:	a2 83       	std	Z+2, r26	; 0x02
    4396:	b3 83       	std	Z+3, r27	; 0x03
            q1 <<= 8;
    4398:	9e 01       	movw	r18, r28
    439a:	23 58       	subi	r18, 0x83	; 131
    439c:	3d 4f       	sbci	r19, 0xFD	; 253
    439e:	fe 01       	movw	r30, r28
    43a0:	e3 58       	subi	r30, 0x83	; 131
    43a2:	fd 4f       	sbci	r31, 0xFD	; 253
    43a4:	80 81       	ld	r24, Z
    43a6:	91 81       	ldd	r25, Z+1	; 0x01
    43a8:	a2 81       	ldd	r26, Z+2	; 0x02
    43aa:	b3 81       	ldd	r27, Z+3	; 0x03
    43ac:	ba 2f       	mov	r27, r26
    43ae:	a9 2f       	mov	r26, r25
    43b0:	98 2f       	mov	r25, r24
    43b2:	88 27       	eor	r24, r24
    43b4:	f9 01       	movw	r30, r18
    43b6:	80 83       	st	Z, r24
    43b8:	91 83       	std	Z+1, r25	; 0x01
    43ba:	a2 83       	std	Z+2, r26	; 0x02
    43bc:	b3 83       	std	Z+3, r27	; 0x03
            q1 |= hex2dez((char*) &uart_string[6]);
    43be:	8f eb       	ldi	r24, 0xBF	; 191
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    43c6:	9c 01       	movw	r18, r24
    43c8:	44 27       	eor	r20, r20
    43ca:	37 fd       	sbrc	r19, 7
    43cc:	40 95       	com	r20
    43ce:	54 2f       	mov	r21, r20
    43d0:	be 01       	movw	r22, r28
    43d2:	63 58       	subi	r22, 0x83	; 131
    43d4:	7d 4f       	sbci	r23, 0xFD	; 253
    43d6:	fe 01       	movw	r30, r28
    43d8:	e3 58       	subi	r30, 0x83	; 131
    43da:	fd 4f       	sbci	r31, 0xFD	; 253
    43dc:	80 81       	ld	r24, Z
    43de:	91 81       	ldd	r25, Z+1	; 0x01
    43e0:	a2 81       	ldd	r26, Z+2	; 0x02
    43e2:	b3 81       	ldd	r27, Z+3	; 0x03
    43e4:	82 2b       	or	r24, r18
    43e6:	93 2b       	or	r25, r19
    43e8:	a4 2b       	or	r26, r20
    43ea:	b5 2b       	or	r27, r21
    43ec:	fb 01       	movw	r30, r22
    43ee:	80 83       	st	Z, r24
    43f0:	91 83       	std	Z+1, r25	; 0x01
    43f2:	a2 83       	std	Z+2, r26	; 0x02
    43f4:	b3 83       	std	Z+3, r27	; 0x03
            q1 <<= 8;
    43f6:	9e 01       	movw	r18, r28
    43f8:	23 58       	subi	r18, 0x83	; 131
    43fa:	3d 4f       	sbci	r19, 0xFD	; 253
    43fc:	fe 01       	movw	r30, r28
    43fe:	e3 58       	subi	r30, 0x83	; 131
    4400:	fd 4f       	sbci	r31, 0xFD	; 253
    4402:	80 81       	ld	r24, Z
    4404:	91 81       	ldd	r25, Z+1	; 0x01
    4406:	a2 81       	ldd	r26, Z+2	; 0x02
    4408:	b3 81       	ldd	r27, Z+3	; 0x03
    440a:	ba 2f       	mov	r27, r26
    440c:	a9 2f       	mov	r26, r25
    440e:	98 2f       	mov	r25, r24
    4410:	88 27       	eor	r24, r24
    4412:	f9 01       	movw	r30, r18
    4414:	80 83       	st	Z, r24
    4416:	91 83       	std	Z+1, r25	; 0x01
    4418:	a2 83       	std	Z+2, r26	; 0x02
    441a:	b3 83       	std	Z+3, r27	; 0x03
            q1 |= hex2dez((char*) &uart_string[8]);
    441c:	81 ec       	ldi	r24, 0xC1	; 193
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    4424:	9c 01       	movw	r18, r24
    4426:	44 27       	eor	r20, r20
    4428:	37 fd       	sbrc	r19, 7
    442a:	40 95       	com	r20
    442c:	54 2f       	mov	r21, r20
    442e:	be 01       	movw	r22, r28
    4430:	63 58       	subi	r22, 0x83	; 131
    4432:	7d 4f       	sbci	r23, 0xFD	; 253
    4434:	fe 01       	movw	r30, r28
    4436:	e3 58       	subi	r30, 0x83	; 131
    4438:	fd 4f       	sbci	r31, 0xFD	; 253
    443a:	80 81       	ld	r24, Z
    443c:	91 81       	ldd	r25, Z+1	; 0x01
    443e:	a2 81       	ldd	r26, Z+2	; 0x02
    4440:	b3 81       	ldd	r27, Z+3	; 0x03
    4442:	82 2b       	or	r24, r18
    4444:	93 2b       	or	r25, r19
    4446:	a4 2b       	or	r26, r20
    4448:	b5 2b       	or	r27, r21
    444a:	fb 01       	movw	r30, r22
    444c:	80 83       	st	Z, r24
    444e:	91 83       	std	Z+1, r25	; 0x01
    4450:	a2 83       	std	Z+2, r26	; 0x02
    4452:	b3 83       	std	Z+3, r27	; 0x03
            shift32_output(q1);
    4454:	fe 01       	movw	r30, r28
    4456:	e3 58       	subi	r30, 0x83	; 131
    4458:	fd 4f       	sbci	r31, 0xFD	; 253
    445a:	80 81       	ld	r24, Z
    445c:	91 81       	ldd	r25, Z+1	; 0x01
    445e:	a2 81       	ldd	r26, Z+2	; 0x02
    4460:	b3 81       	ldd	r27, Z+3	; 0x03
    4462:	bc 01       	movw	r22, r24
    4464:	cd 01       	movw	r24, r26
    4466:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
            uart_str_complete = 0;
    446a:	10 92 79 05 	sts	0x0579, r1
    446e:	b5 c0       	rjmp	.+362    	; 0x45da <main+0x292e>
            while (!uart_str_complete)
            {
              wdt_reset();
    4470:	a8 95       	wdr
    4472:	fe 01       	movw	r30, r28
    4474:	ef 5a       	subi	r30, 0xAF	; 175
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	80 e0       	ldi	r24, 0x00	; 0
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	a8 e4       	ldi	r26, 0x48	; 72
    447e:	b3 e4       	ldi	r27, 0x43	; 67
    4480:	80 83       	st	Z, r24
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	a2 83       	std	Z+2, r26	; 0x02
    4486:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4488:	8e 01       	movw	r16, r28
    448a:	03 5b       	subi	r16, 0xB3	; 179
    448c:	1f 4f       	sbci	r17, 0xFF	; 255
    448e:	fe 01       	movw	r30, r28
    4490:	ef 5a       	subi	r30, 0xAF	; 175
    4492:	ff 4f       	sbci	r31, 0xFF	; 255
    4494:	60 81       	ld	r22, Z
    4496:	71 81       	ldd	r23, Z+1	; 0x01
    4498:	82 81       	ldd	r24, Z+2	; 0x02
    449a:	93 81       	ldd	r25, Z+3	; 0x03
    449c:	26 e6       	ldi	r18, 0x66	; 102
    449e:	36 e6       	ldi	r19, 0x66	; 102
    44a0:	46 e6       	ldi	r20, 0x66	; 102
    44a2:	55 e4       	ldi	r21, 0x45	; 69
    44a4:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	f8 01       	movw	r30, r16
    44ae:	80 83       	st	Z, r24
    44b0:	91 83       	std	Z+1, r25	; 0x01
    44b2:	a2 83       	std	Z+2, r26	; 0x02
    44b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44b6:	fe 01       	movw	r30, r28
    44b8:	e3 5b       	subi	r30, 0xB3	; 179
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	60 81       	ld	r22, Z
    44be:	71 81       	ldd	r23, Z+1	; 0x01
    44c0:	82 81       	ldd	r24, Z+2	; 0x02
    44c2:	93 81       	ldd	r25, Z+3	; 0x03
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	40 e8       	ldi	r20, 0x80	; 128
    44ca:	5f e3       	ldi	r21, 0x3F	; 63
    44cc:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    44d0:	88 23       	and	r24, r24
    44d2:	44 f4       	brge	.+16     	; 0x44e4 <main+0x2838>
		__ticks = 1;
    44d4:	fe 01       	movw	r30, r28
    44d6:	e5 5b       	subi	r30, 0xB5	; 181
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	91 83       	std	Z+1, r25	; 0x01
    44e0:	80 83       	st	Z, r24
    44e2:	64 c0       	rjmp	.+200    	; 0x45ac <main+0x2900>
	else if (__tmp > 65535)
    44e4:	fe 01       	movw	r30, r28
    44e6:	e3 5b       	subi	r30, 0xB3	; 179
    44e8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ea:	60 81       	ld	r22, Z
    44ec:	71 81       	ldd	r23, Z+1	; 0x01
    44ee:	82 81       	ldd	r24, Z+2	; 0x02
    44f0:	93 81       	ldd	r25, Z+3	; 0x03
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	3f ef       	ldi	r19, 0xFF	; 255
    44f6:	4f e7       	ldi	r20, 0x7F	; 127
    44f8:	57 e4       	ldi	r21, 0x47	; 71
    44fa:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    44fe:	18 16       	cp	r1, r24
    4500:	0c f0       	brlt	.+2      	; 0x4504 <main+0x2858>
    4502:	43 c0       	rjmp	.+134    	; 0x458a <main+0x28de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4504:	fe 01       	movw	r30, r28
    4506:	ef 5a       	subi	r30, 0xAF	; 175
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	60 81       	ld	r22, Z
    450c:	71 81       	ldd	r23, Z+1	; 0x01
    450e:	82 81       	ldd	r24, Z+2	; 0x02
    4510:	93 81       	ldd	r25, Z+3	; 0x03
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	40 e2       	ldi	r20, 0x20	; 32
    4518:	51 e4       	ldi	r21, 0x41	; 65
    451a:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    451e:	dc 01       	movw	r26, r24
    4520:	cb 01       	movw	r24, r22
    4522:	8e 01       	movw	r16, r28
    4524:	05 5b       	subi	r16, 0xB5	; 181
    4526:	1f 4f       	sbci	r17, 0xFF	; 255
    4528:	bc 01       	movw	r22, r24
    452a:	cd 01       	movw	r24, r26
    452c:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	f8 01       	movw	r30, r16
    4536:	91 83       	std	Z+1, r25	; 0x01
    4538:	80 83       	st	Z, r24
    453a:	1f c0       	rjmp	.+62     	; 0x457a <main+0x28ce>
    453c:	fe 01       	movw	r30, r28
    453e:	e7 5b       	subi	r30, 0xB7	; 183
    4540:	ff 4f       	sbci	r31, 0xFF	; 255
    4542:	80 e7       	ldi	r24, 0x70	; 112
    4544:	91 e0       	ldi	r25, 0x01	; 1
    4546:	91 83       	std	Z+1, r25	; 0x01
    4548:	80 83       	st	Z, r24
    454a:	fe 01       	movw	r30, r28
    454c:	e7 5b       	subi	r30, 0xB7	; 183
    454e:	ff 4f       	sbci	r31, 0xFF	; 255
    4550:	80 81       	ld	r24, Z
    4552:	91 81       	ldd	r25, Z+1	; 0x01
    4554:	01 97       	sbiw	r24, 0x01	; 1
    4556:	f1 f7       	brne	.-4      	; 0x4554 <main+0x28a8>
    4558:	fe 01       	movw	r30, r28
    455a:	e7 5b       	subi	r30, 0xB7	; 183
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	91 83       	std	Z+1, r25	; 0x01
    4560:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4562:	de 01       	movw	r26, r28
    4564:	a5 5b       	subi	r26, 0xB5	; 181
    4566:	bf 4f       	sbci	r27, 0xFF	; 255
    4568:	fe 01       	movw	r30, r28
    456a:	e5 5b       	subi	r30, 0xB5	; 181
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	80 81       	ld	r24, Z
    4570:	91 81       	ldd	r25, Z+1	; 0x01
    4572:	01 97       	sbiw	r24, 0x01	; 1
    4574:	11 96       	adiw	r26, 0x01	; 1
    4576:	9c 93       	st	X, r25
    4578:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    457a:	fe 01       	movw	r30, r28
    457c:	e5 5b       	subi	r30, 0xB5	; 181
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	80 81       	ld	r24, Z
    4582:	91 81       	ldd	r25, Z+1	; 0x01
    4584:	00 97       	sbiw	r24, 0x00	; 0
    4586:	d1 f6       	brne	.-76     	; 0x453c <main+0x2890>
    4588:	28 c0       	rjmp	.+80     	; 0x45da <main+0x292e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    458a:	8e 01       	movw	r16, r28
    458c:	05 5b       	subi	r16, 0xB5	; 181
    458e:	1f 4f       	sbci	r17, 0xFF	; 255
    4590:	fe 01       	movw	r30, r28
    4592:	e3 5b       	subi	r30, 0xB3	; 179
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	60 81       	ld	r22, Z
    4598:	71 81       	ldd	r23, Z+1	; 0x01
    459a:	82 81       	ldd	r24, Z+2	; 0x02
    459c:	93 81       	ldd	r25, Z+3	; 0x03
    459e:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	f8 01       	movw	r30, r16
    45a8:	91 83       	std	Z+1, r25	; 0x01
    45aa:	80 83       	st	Z, r24
    45ac:	de 01       	movw	r26, r28
    45ae:	a9 5b       	subi	r26, 0xB9	; 185
    45b0:	bf 4f       	sbci	r27, 0xFF	; 255
    45b2:	fe 01       	movw	r30, r28
    45b4:	e5 5b       	subi	r30, 0xB5	; 181
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	80 81       	ld	r24, Z
    45ba:	91 81       	ldd	r25, Z+1	; 0x01
    45bc:	11 96       	adiw	r26, 0x01	; 1
    45be:	9c 93       	st	X, r25
    45c0:	8e 93       	st	-X, r24
    45c2:	fe 01       	movw	r30, r28
    45c4:	e9 5b       	subi	r30, 0xB9	; 185
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	80 81       	ld	r24, Z
    45ca:	91 81       	ldd	r25, Z+1	; 0x01
    45cc:	01 97       	sbiw	r24, 0x01	; 1
    45ce:	f1 f7       	brne	.-4      	; 0x45cc <main+0x2920>
    45d0:	fe 01       	movw	r30, r28
    45d2:	e9 5b       	subi	r30, 0xB9	; 185
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	91 83       	std	Z+1, r25	; 0x01
    45d8:	80 83       	st	Z, r24
            q1 |= hex2dez((char*) &uart_string[6]);
            q1 <<= 8;
            q1 |= hex2dez((char*) &uart_string[8]);
            shift32_output(q1);
            uart_str_complete = 0;
            while (!uart_str_complete)
    45da:	80 91 79 05 	lds	r24, 0x0579
    45de:	88 23       	and	r24, r24
    45e0:	09 f4       	brne	.+2      	; 0x45e4 <main+0x2938>
    45e2:	46 cf       	rjmp	.-372    	; 0x4470 <main+0x27c4>
            {
              wdt_reset();
              _delay_ms(200);
            }
            SetColor(0, 0, 0, 0);
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	60 e0       	ldi	r22, 0x00	; 0
    45e8:	40 e0       	ldi	r20, 0x00	; 0
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    45f0:	5f c6       	rjmp	.+3262   	; 0x52b0 <main+0x3604>
          }
          break;
        case 'l':
          uartPuts("\r\nLight-Mode...\r\n");
    45f2:	82 ea       	ldi	r24, 0xA2	; 162
    45f4:	93 e0       	ldi	r25, 0x03	; 3
    45f6:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
          shift32_output(0xffffffff);
    45fa:	6f ef       	ldi	r22, 0xFF	; 255
    45fc:	7f ef       	ldi	r23, 0xFF	; 255
    45fe:	8f ef       	ldi	r24, 0xFF	; 255
    4600:	9f ef       	ldi	r25, 0xFF	; 255
    4602:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
          uart_str_complete = 0;
    4606:	10 92 79 05 	sts	0x0579, r1
          SetColor(0xFF, 0xFF, 0xFF, 0xFF);
    460a:	8f ef       	ldi	r24, 0xFF	; 255
    460c:	6f ef       	ldi	r22, 0xFF	; 255
    460e:	4f ef       	ldi	r20, 0xFF	; 255
    4610:	2f ef       	ldi	r18, 0xFF	; 255
    4612:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    4616:	86 c0       	rjmp	.+268    	; 0x4724 <main+0x2a78>
          while (!uart_str_complete)
          {
            wdt_reset();
    4618:	a8 95       	wdr
    461a:	fe 01       	movw	r30, r28
    461c:	ed 5b       	subi	r30, 0xBD	; 189
    461e:	ff 4f       	sbci	r31, 0xFF	; 255
    4620:	80 e0       	ldi	r24, 0x00	; 0
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	a0 ea       	ldi	r26, 0xA0	; 160
    4626:	b1 e4       	ldi	r27, 0x41	; 65
    4628:	80 83       	st	Z, r24
    462a:	91 83       	std	Z+1, r25	; 0x01
    462c:	a2 83       	std	Z+2, r26	; 0x02
    462e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4630:	8e 01       	movw	r16, r28
    4632:	01 5c       	subi	r16, 0xC1	; 193
    4634:	1f 4f       	sbci	r17, 0xFF	; 255
    4636:	fe 01       	movw	r30, r28
    4638:	ed 5b       	subi	r30, 0xBD	; 189
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	60 81       	ld	r22, Z
    463e:	71 81       	ldd	r23, Z+1	; 0x01
    4640:	82 81       	ldd	r24, Z+2	; 0x02
    4642:	93 81       	ldd	r25, Z+3	; 0x03
    4644:	26 e6       	ldi	r18, 0x66	; 102
    4646:	36 e6       	ldi	r19, 0x66	; 102
    4648:	46 e6       	ldi	r20, 0x66	; 102
    464a:	55 e4       	ldi	r21, 0x45	; 69
    464c:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    4650:	dc 01       	movw	r26, r24
    4652:	cb 01       	movw	r24, r22
    4654:	f8 01       	movw	r30, r16
    4656:	80 83       	st	Z, r24
    4658:	91 83       	std	Z+1, r25	; 0x01
    465a:	a2 83       	std	Z+2, r26	; 0x02
    465c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    465e:	fe 01       	movw	r30, r28
    4660:	ff 96       	adiw	r30, 0x3f	; 63
    4662:	60 81       	ld	r22, Z
    4664:	71 81       	ldd	r23, Z+1	; 0x01
    4666:	82 81       	ldd	r24, Z+2	; 0x02
    4668:	93 81       	ldd	r25, Z+3	; 0x03
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	40 e8       	ldi	r20, 0x80	; 128
    4670:	5f e3       	ldi	r21, 0x3F	; 63
    4672:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    4676:	88 23       	and	r24, r24
    4678:	2c f4       	brge	.+10     	; 0x4684 <main+0x29d8>
		__ticks = 1;
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	9e af       	std	Y+62, r25	; 0x3e
    4680:	8d af       	std	Y+61, r24	; 0x3d
    4682:	46 c0       	rjmp	.+140    	; 0x4710 <main+0x2a64>
	else if (__tmp > 65535)
    4684:	fe 01       	movw	r30, r28
    4686:	ff 96       	adiw	r30, 0x3f	; 63
    4688:	60 81       	ld	r22, Z
    468a:	71 81       	ldd	r23, Z+1	; 0x01
    468c:	82 81       	ldd	r24, Z+2	; 0x02
    468e:	93 81       	ldd	r25, Z+3	; 0x03
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	3f ef       	ldi	r19, 0xFF	; 255
    4694:	4f e7       	ldi	r20, 0x7F	; 127
    4696:	57 e4       	ldi	r21, 0x47	; 71
    4698:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    469c:	18 16       	cp	r1, r24
    469e:	64 f5       	brge	.+88     	; 0x46f8 <main+0x2a4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46a0:	fe 01       	movw	r30, r28
    46a2:	ed 5b       	subi	r30, 0xBD	; 189
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	60 81       	ld	r22, Z
    46a8:	71 81       	ldd	r23, Z+1	; 0x01
    46aa:	82 81       	ldd	r24, Z+2	; 0x02
    46ac:	93 81       	ldd	r25, Z+3	; 0x03
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	40 e2       	ldi	r20, 0x20	; 32
    46b4:	51 e4       	ldi	r21, 0x41	; 65
    46b6:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    46ba:	dc 01       	movw	r26, r24
    46bc:	cb 01       	movw	r24, r22
    46be:	bc 01       	movw	r22, r24
    46c0:	cd 01       	movw	r24, r26
    46c2:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	9e af       	std	Y+62, r25	; 0x3e
    46cc:	8d af       	std	Y+61, r24	; 0x3d
    46ce:	0f c0       	rjmp	.+30     	; 0x46ee <main+0x2a42>
    46d0:	80 e7       	ldi	r24, 0x70	; 112
    46d2:	91 e0       	ldi	r25, 0x01	; 1
    46d4:	9c af       	std	Y+60, r25	; 0x3c
    46d6:	8b af       	std	Y+59, r24	; 0x3b
    46d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    46da:	9c ad       	ldd	r25, Y+60	; 0x3c
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	f1 f7       	brne	.-4      	; 0x46dc <main+0x2a30>
    46e0:	9c af       	std	Y+60, r25	; 0x3c
    46e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    46e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    46e8:	01 97       	sbiw	r24, 0x01	; 1
    46ea:	9e af       	std	Y+62, r25	; 0x3e
    46ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    46f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    46f2:	00 97       	sbiw	r24, 0x00	; 0
    46f4:	69 f7       	brne	.-38     	; 0x46d0 <main+0x2a24>
    46f6:	16 c0       	rjmp	.+44     	; 0x4724 <main+0x2a78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46f8:	fe 01       	movw	r30, r28
    46fa:	ff 96       	adiw	r30, 0x3f	; 63
    46fc:	60 81       	ld	r22, Z
    46fe:	71 81       	ldd	r23, Z+1	; 0x01
    4700:	82 81       	ldd	r24, Z+2	; 0x02
    4702:	93 81       	ldd	r25, Z+3	; 0x03
    4704:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	9e af       	std	Y+62, r25	; 0x3e
    470e:	8d af       	std	Y+61, r24	; 0x3d
    4710:	8d ad       	ldd	r24, Y+61	; 0x3d
    4712:	9e ad       	ldd	r25, Y+62	; 0x3e
    4714:	9a af       	std	Y+58, r25	; 0x3a
    4716:	89 af       	std	Y+57, r24	; 0x39
    4718:	89 ad       	ldd	r24, Y+57	; 0x39
    471a:	9a ad       	ldd	r25, Y+58	; 0x3a
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	f1 f7       	brne	.-4      	; 0x471c <main+0x2a70>
    4720:	9a af       	std	Y+58, r25	; 0x3a
    4722:	89 af       	std	Y+57, r24	; 0x39
        case 'l':
          uartPuts("\r\nLight-Mode...\r\n");
          shift32_output(0xffffffff);
          uart_str_complete = 0;
          SetColor(0xFF, 0xFF, 0xFF, 0xFF);
          while (!uart_str_complete)
    4724:	80 91 79 05 	lds	r24, 0x0579
    4728:	88 23       	and	r24, r24
    472a:	09 f4       	brne	.+2      	; 0x472e <main+0x2a82>
    472c:	75 cf       	rjmp	.-278    	; 0x4618 <main+0x296c>
          {
            wdt_reset();
            _delay_ms(20);
          }
          wdt_reset();
    472e:	a8 95       	wdr
          SetColor(0, 0, 0, 0);
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	60 e0       	ldi	r22, 0x00	; 0
    4734:	40 e0       	ldi	r20, 0x00	; 0
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
          lLEDs_LastValue = 0xffffffff;
    473c:	8f ef       	ldi	r24, 0xFF	; 255
    473e:	9f ef       	ldi	r25, 0xFF	; 255
    4740:	af ef       	ldi	r26, 0xFF	; 255
    4742:	bf ef       	ldi	r27, 0xFF	; 255
    4744:	80 93 75 05 	sts	0x0575, r24
    4748:	90 93 76 05 	sts	0x0576, r25
    474c:	a0 93 77 05 	sts	0x0577, r26
    4750:	b0 93 78 05 	sts	0x0578, r27
    4754:	ad c5       	rjmp	.+2906   	; 0x52b0 <main+0x3604>
          break;
        case 'r':
          uartPuts("\r\nRebooting via Watchdog...\r\n");
    4756:	84 eb       	ldi	r24, 0xB4	; 180
    4758:	93 e0       	ldi	r25, 0x03	; 3
    475a:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    475e:	ff cf       	rjmp	.-2      	; 0x475e <main+0x2ab2>
          while (1)
            ;
          break;
        case 'b':
          {
            switch (uart_string[2])
    4760:	80 91 bb 00 	lds	r24, 0x00BB
    4764:	28 2f       	mov	r18, r24
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	c1 5c       	subi	r28, 0xC1	; 193
    476a:	db 4f       	sbci	r29, 0xFB	; 251
    476c:	39 83       	std	Y+1, r19	; 0x01
    476e:	28 83       	st	Y, r18
    4770:	cf 53       	subi	r28, 0x3F	; 63
    4772:	d4 40       	sbci	r29, 0x04	; 4
    4774:	c1 5c       	subi	r28, 0xC1	; 193
    4776:	db 4f       	sbci	r29, 0xFB	; 251
    4778:	88 81       	ld	r24, Y
    477a:	99 81       	ldd	r25, Y+1	; 0x01
    477c:	cf 53       	subi	r28, 0x3F	; 63
    477e:	d4 40       	sbci	r29, 0x04	; 4
    4780:	8b 32       	cpi	r24, 0x2B	; 43
    4782:	91 05       	cpc	r25, r1
    4784:	59 f0       	breq	.+22     	; 0x479c <main+0x2af0>
    4786:	c1 5c       	subi	r28, 0xC1	; 193
    4788:	db 4f       	sbci	r29, 0xFB	; 251
    478a:	e8 81       	ld	r30, Y
    478c:	f9 81       	ldd	r31, Y+1	; 0x01
    478e:	cf 53       	subi	r28, 0x3F	; 63
    4790:	d4 40       	sbci	r29, 0x04	; 4
    4792:	ed 32       	cpi	r30, 0x2D	; 45
    4794:	f1 05       	cpc	r31, r1
    4796:	09 f4       	brne	.+2      	; 0x479a <main+0x2aee>
    4798:	4c c0       	rjmp	.+152    	; 0x4832 <main+0x2b86>
    479a:	95 c0       	rjmp	.+298    	; 0x48c6 <main+0x2c1a>
            {
            case '+':
              {
                uiBrightControl = 1;
    479c:	fe 01       	movw	r30, r28
    479e:	e9 53       	subi	r30, 0x39	; 57
    47a0:	fd 4f       	sbci	r31, 0xFD	; 253
    47a2:	81 e0       	ldi	r24, 0x01	; 1
    47a4:	80 83       	st	Z, r24
                save_byte(cBrightControl, uiBrightControl);
    47a6:	fe 01       	movw	r30, r28
    47a8:	e9 53       	subi	r30, 0x39	; 57
    47aa:	fd 4f       	sbci	r31, 0xFD	; 253
    47ac:	90 81       	ld	r25, Z
    47ae:	82 e0       	ldi	r24, 0x02	; 2
    47b0:	69 2f       	mov	r22, r25
    47b2:	0e 94 bf 01 	call	0x37e	; 0x37e <save_byte>
                char s[100];
                sprintf(s, "brightness control is %s\r\n", uiBrightControl != 0 ? "active" : "inactive");
    47b6:	fe 01       	movw	r30, r28
    47b8:	e9 53       	subi	r30, 0x39	; 57
    47ba:	fd 4f       	sbci	r31, 0xFD	; 253
    47bc:	80 81       	ld	r24, Z
    47be:	88 23       	and	r24, r24
    47c0:	49 f0       	breq	.+18     	; 0x47d4 <main+0x2b28>
    47c2:	22 ed       	ldi	r18, 0xD2	; 210
    47c4:	33 e0       	ldi	r19, 0x03	; 3
    47c6:	c3 5c       	subi	r28, 0xC3	; 195
    47c8:	db 4f       	sbci	r29, 0xFB	; 251
    47ca:	39 83       	std	Y+1, r19	; 0x01
    47cc:	28 83       	st	Y, r18
    47ce:	cd 53       	subi	r28, 0x3D	; 61
    47d0:	d4 40       	sbci	r29, 0x04	; 4
    47d2:	08 c0       	rjmp	.+16     	; 0x47e4 <main+0x2b38>
    47d4:	89 ed       	ldi	r24, 0xD9	; 217
    47d6:	93 e0       	ldi	r25, 0x03	; 3
    47d8:	c3 5c       	subi	r28, 0xC3	; 195
    47da:	db 4f       	sbci	r29, 0xFB	; 251
    47dc:	99 83       	std	Y+1, r25	; 0x01
    47de:	88 83       	st	Y, r24
    47e0:	cd 53       	subi	r28, 0x3D	; 61
    47e2:	d4 40       	sbci	r29, 0x04	; 4
    47e4:	00 d0       	rcall	.+0      	; 0x47e6 <main+0x2b3a>
    47e6:	00 d0       	rcall	.+0      	; 0x47e8 <main+0x2b3c>
    47e8:	00 d0       	rcall	.+0      	; 0x47ea <main+0x2b3e>
    47ea:	ed b7       	in	r30, 0x3d	; 61
    47ec:	fe b7       	in	r31, 0x3e	; 62
    47ee:	31 96       	adiw	r30, 0x01	; 1
    47f0:	ce 01       	movw	r24, r28
    47f2:	8e 59       	subi	r24, 0x9E	; 158
    47f4:	9c 4f       	sbci	r25, 0xFC	; 252
    47f6:	91 83       	std	Z+1, r25	; 0x01
    47f8:	80 83       	st	Z, r24
    47fa:	82 ee       	ldi	r24, 0xE2	; 226
    47fc:	93 e0       	ldi	r25, 0x03	; 3
    47fe:	93 83       	std	Z+3, r25	; 0x03
    4800:	82 83       	std	Z+2, r24	; 0x02
    4802:	c3 5c       	subi	r28, 0xC3	; 195
    4804:	db 4f       	sbci	r29, 0xFB	; 251
    4806:	28 81       	ld	r18, Y
    4808:	39 81       	ldd	r19, Y+1	; 0x01
    480a:	cd 53       	subi	r28, 0x3D	; 61
    480c:	d4 40       	sbci	r29, 0x04	; 4
    480e:	35 83       	std	Z+5, r19	; 0x05
    4810:	24 83       	std	Z+4, r18	; 0x04
    4812:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    4816:	8d b7       	in	r24, 0x3d	; 61
    4818:	9e b7       	in	r25, 0x3e	; 62
    481a:	06 96       	adiw	r24, 0x06	; 6
    481c:	0f b6       	in	r0, 0x3f	; 63
    481e:	f8 94       	cli
    4820:	9e bf       	out	0x3e, r25	; 62
    4822:	0f be       	out	0x3f, r0	; 63
    4824:	8d bf       	out	0x3d, r24	; 61
                uartPuts(s);
    4826:	ce 01       	movw	r24, r28
    4828:	8e 59       	subi	r24, 0x9E	; 158
    482a:	9c 4f       	sbci	r25, 0xFC	; 252
    482c:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    4830:	3f c5       	rjmp	.+2686   	; 0x52b0 <main+0x3604>
              }
              break;
            case '-':
              {
                uiBrightControl = 0;
    4832:	fe 01       	movw	r30, r28
    4834:	e9 53       	subi	r30, 0x39	; 57
    4836:	fd 4f       	sbci	r31, 0xFD	; 253
    4838:	10 82       	st	Z, r1
                save_byte(cBrightControl, uiBrightControl);
    483a:	fe 01       	movw	r30, r28
    483c:	e9 53       	subi	r30, 0x39	; 57
    483e:	fd 4f       	sbci	r31, 0xFD	; 253
    4840:	90 81       	ld	r25, Z
    4842:	82 e0       	ldi	r24, 0x02	; 2
    4844:	69 2f       	mov	r22, r25
    4846:	0e 94 bf 01 	call	0x37e	; 0x37e <save_byte>
                char s[100];
                sprintf(s, "brightness control is %s\r\n", uiBrightControl != 0 ? "active" : "inactive");
    484a:	fe 01       	movw	r30, r28
    484c:	e9 53       	subi	r30, 0x39	; 57
    484e:	fd 4f       	sbci	r31, 0xFD	; 253
    4850:	80 81       	ld	r24, Z
    4852:	88 23       	and	r24, r24
    4854:	49 f0       	breq	.+18     	; 0x4868 <main+0x2bbc>
    4856:	e2 ed       	ldi	r30, 0xD2	; 210
    4858:	f3 e0       	ldi	r31, 0x03	; 3
    485a:	c5 5c       	subi	r28, 0xC5	; 197
    485c:	db 4f       	sbci	r29, 0xFB	; 251
    485e:	f9 83       	std	Y+1, r31	; 0x01
    4860:	e8 83       	st	Y, r30
    4862:	cb 53       	subi	r28, 0x3B	; 59
    4864:	d4 40       	sbci	r29, 0x04	; 4
    4866:	08 c0       	rjmp	.+16     	; 0x4878 <main+0x2bcc>
    4868:	29 ed       	ldi	r18, 0xD9	; 217
    486a:	33 e0       	ldi	r19, 0x03	; 3
    486c:	c5 5c       	subi	r28, 0xC5	; 197
    486e:	db 4f       	sbci	r29, 0xFB	; 251
    4870:	39 83       	std	Y+1, r19	; 0x01
    4872:	28 83       	st	Y, r18
    4874:	cb 53       	subi	r28, 0x3B	; 59
    4876:	d4 40       	sbci	r29, 0x04	; 4
    4878:	00 d0       	rcall	.+0      	; 0x487a <main+0x2bce>
    487a:	00 d0       	rcall	.+0      	; 0x487c <main+0x2bd0>
    487c:	00 d0       	rcall	.+0      	; 0x487e <main+0x2bd2>
    487e:	ed b7       	in	r30, 0x3d	; 61
    4880:	fe b7       	in	r31, 0x3e	; 62
    4882:	31 96       	adiw	r30, 0x01	; 1
    4884:	ce 01       	movw	r24, r28
    4886:	8e 59       	subi	r24, 0x9E	; 158
    4888:	9c 4f       	sbci	r25, 0xFC	; 252
    488a:	91 83       	std	Z+1, r25	; 0x01
    488c:	80 83       	st	Z, r24
    488e:	82 ee       	ldi	r24, 0xE2	; 226
    4890:	93 e0       	ldi	r25, 0x03	; 3
    4892:	93 83       	std	Z+3, r25	; 0x03
    4894:	82 83       	std	Z+2, r24	; 0x02
    4896:	c5 5c       	subi	r28, 0xC5	; 197
    4898:	db 4f       	sbci	r29, 0xFB	; 251
    489a:	88 81       	ld	r24, Y
    489c:	99 81       	ldd	r25, Y+1	; 0x01
    489e:	cb 53       	subi	r28, 0x3B	; 59
    48a0:	d4 40       	sbci	r29, 0x04	; 4
    48a2:	95 83       	std	Z+5, r25	; 0x05
    48a4:	84 83       	std	Z+4, r24	; 0x04
    48a6:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    48aa:	ed b7       	in	r30, 0x3d	; 61
    48ac:	fe b7       	in	r31, 0x3e	; 62
    48ae:	36 96       	adiw	r30, 0x06	; 6
    48b0:	0f b6       	in	r0, 0x3f	; 63
    48b2:	f8 94       	cli
    48b4:	fe bf       	out	0x3e, r31	; 62
    48b6:	0f be       	out	0x3f, r0	; 63
    48b8:	ed bf       	out	0x3d, r30	; 61
                uartPuts(s);
    48ba:	ce 01       	movw	r24, r28
    48bc:	8e 59       	subi	r24, 0x9E	; 158
    48be:	9c 4f       	sbci	r25, 0xFC	; 252
    48c0:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    48c4:	f5 c4       	rjmp	.+2538   	; 0x52b0 <main+0x3604>
              }
              break;
            default:
              {
                uiBrightControl = uiBrightControl != 0 ? 0 : 1;
    48c6:	fe 01       	movw	r30, r28
    48c8:	e9 53       	subi	r30, 0x39	; 57
    48ca:	fd 4f       	sbci	r31, 0xFD	; 253
    48cc:	80 81       	ld	r24, Z
    48ce:	c6 5c       	subi	r28, 0xC6	; 198
    48d0:	db 4f       	sbci	r29, 0xFB	; 251
    48d2:	18 82       	st	Y, r1
    48d4:	ca 53       	subi	r28, 0x3A	; 58
    48d6:	d4 40       	sbci	r29, 0x04	; 4
    48d8:	88 23       	and	r24, r24
    48da:	31 f4       	brne	.+12     	; 0x48e8 <main+0x2c3c>
    48dc:	f1 e0       	ldi	r31, 0x01	; 1
    48de:	c6 5c       	subi	r28, 0xC6	; 198
    48e0:	db 4f       	sbci	r29, 0xFB	; 251
    48e2:	f8 83       	st	Y, r31
    48e4:	ca 53       	subi	r28, 0x3A	; 58
    48e6:	d4 40       	sbci	r29, 0x04	; 4
    48e8:	fe 01       	movw	r30, r28
    48ea:	e9 53       	subi	r30, 0x39	; 57
    48ec:	fd 4f       	sbci	r31, 0xFD	; 253
    48ee:	c6 5c       	subi	r28, 0xC6	; 198
    48f0:	db 4f       	sbci	r29, 0xFB	; 251
    48f2:	28 81       	ld	r18, Y
    48f4:	ca 53       	subi	r28, 0x3A	; 58
    48f6:	d4 40       	sbci	r29, 0x04	; 4
    48f8:	20 83       	st	Z, r18
                save_byte(cBrightControl, uiBrightControl);
    48fa:	fe 01       	movw	r30, r28
    48fc:	e9 53       	subi	r30, 0x39	; 57
    48fe:	fd 4f       	sbci	r31, 0xFD	; 253
    4900:	90 81       	ld	r25, Z
    4902:	82 e0       	ldi	r24, 0x02	; 2
    4904:	69 2f       	mov	r22, r25
    4906:	0e 94 bf 01 	call	0x37e	; 0x37e <save_byte>
                char s[100];
                sprintf(s, "brightness control is %s\r\n", uiBrightControl != 0 ? "active" : "inactive");
    490a:	fe 01       	movw	r30, r28
    490c:	e9 53       	subi	r30, 0x39	; 57
    490e:	fd 4f       	sbci	r31, 0xFD	; 253
    4910:	80 81       	ld	r24, Z
    4912:	88 23       	and	r24, r24
    4914:	49 f0       	breq	.+18     	; 0x4928 <main+0x2c7c>
    4916:	82 ed       	ldi	r24, 0xD2	; 210
    4918:	93 e0       	ldi	r25, 0x03	; 3
    491a:	c8 5c       	subi	r28, 0xC8	; 200
    491c:	db 4f       	sbci	r29, 0xFB	; 251
    491e:	99 83       	std	Y+1, r25	; 0x01
    4920:	88 83       	st	Y, r24
    4922:	c8 53       	subi	r28, 0x38	; 56
    4924:	d4 40       	sbci	r29, 0x04	; 4
    4926:	08 c0       	rjmp	.+16     	; 0x4938 <main+0x2c8c>
    4928:	e9 ed       	ldi	r30, 0xD9	; 217
    492a:	f3 e0       	ldi	r31, 0x03	; 3
    492c:	c8 5c       	subi	r28, 0xC8	; 200
    492e:	db 4f       	sbci	r29, 0xFB	; 251
    4930:	f9 83       	std	Y+1, r31	; 0x01
    4932:	e8 83       	st	Y, r30
    4934:	c8 53       	subi	r28, 0x38	; 56
    4936:	d4 40       	sbci	r29, 0x04	; 4
    4938:	00 d0       	rcall	.+0      	; 0x493a <main+0x2c8e>
    493a:	00 d0       	rcall	.+0      	; 0x493c <main+0x2c90>
    493c:	00 d0       	rcall	.+0      	; 0x493e <main+0x2c92>
    493e:	ed b7       	in	r30, 0x3d	; 61
    4940:	fe b7       	in	r31, 0x3e	; 62
    4942:	31 96       	adiw	r30, 0x01	; 1
    4944:	ce 01       	movw	r24, r28
    4946:	8e 59       	subi	r24, 0x9E	; 158
    4948:	9c 4f       	sbci	r25, 0xFC	; 252
    494a:	91 83       	std	Z+1, r25	; 0x01
    494c:	80 83       	st	Z, r24
    494e:	82 ee       	ldi	r24, 0xE2	; 226
    4950:	93 e0       	ldi	r25, 0x03	; 3
    4952:	93 83       	std	Z+3, r25	; 0x03
    4954:	82 83       	std	Z+2, r24	; 0x02
    4956:	c8 5c       	subi	r28, 0xC8	; 200
    4958:	db 4f       	sbci	r29, 0xFB	; 251
    495a:	28 81       	ld	r18, Y
    495c:	39 81       	ldd	r19, Y+1	; 0x01
    495e:	c8 53       	subi	r28, 0x38	; 56
    4960:	d4 40       	sbci	r29, 0x04	; 4
    4962:	35 83       	std	Z+5, r19	; 0x05
    4964:	24 83       	std	Z+4, r18	; 0x04
    4966:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    496a:	8d b7       	in	r24, 0x3d	; 61
    496c:	9e b7       	in	r25, 0x3e	; 62
    496e:	06 96       	adiw	r24, 0x06	; 6
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	9e bf       	out	0x3e, r25	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	8d bf       	out	0x3d, r24	; 61
                uartPuts(s);
    497a:	ce 01       	movw	r24, r28
    497c:	8e 59       	subi	r24, 0x9E	; 158
    497e:	9c 4f       	sbci	r25, 0xFC	; 252
    4980:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    4984:	95 c4       	rjmp	.+2346   	; 0x52b0 <main+0x3604>
            }
          }
          break;
        case 'c':
          {
            int r = hex2dez((char*) &uart_string[2]);
    4986:	8b eb       	ldi	r24, 0xBB	; 187
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    498e:	fe 01       	movw	r30, r28
    4990:	e5 58       	subi	r30, 0x85	; 133
    4992:	fd 4f       	sbci	r31, 0xFD	; 253
    4994:	91 83       	std	Z+1, r25	; 0x01
    4996:	80 83       	st	Z, r24
            int g = hex2dez((char*) &uart_string[4]);
    4998:	8d eb       	ldi	r24, 0xBD	; 189
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    49a0:	fe 01       	movw	r30, r28
    49a2:	e7 58       	subi	r30, 0x87	; 135
    49a4:	fd 4f       	sbci	r31, 0xFD	; 253
    49a6:	91 83       	std	Z+1, r25	; 0x01
    49a8:	80 83       	st	Z, r24
            int b = hex2dez((char*) &uart_string[6]);
    49aa:	8f eb       	ldi	r24, 0xBF	; 191
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    49b2:	fe 01       	movw	r30, r28
    49b4:	e9 58       	subi	r30, 0x89	; 137
    49b6:	fd 4f       	sbci	r31, 0xFD	; 253
    49b8:	91 83       	std	Z+1, r25	; 0x01
    49ba:	80 83       	st	Z, r24
            if (r < 0 || g < 0 || b < 0)
    49bc:	fe 01       	movw	r30, r28
    49be:	e5 58       	subi	r30, 0x85	; 133
    49c0:	fd 4f       	sbci	r31, 0xFD	; 253
    49c2:	80 81       	ld	r24, Z
    49c4:	91 81       	ldd	r25, Z+1	; 0x01
    49c6:	99 23       	and	r25, r25
    49c8:	74 f0       	brlt	.+28     	; 0x49e6 <main+0x2d3a>
    49ca:	fe 01       	movw	r30, r28
    49cc:	e7 58       	subi	r30, 0x87	; 135
    49ce:	fd 4f       	sbci	r31, 0xFD	; 253
    49d0:	80 81       	ld	r24, Z
    49d2:	91 81       	ldd	r25, Z+1	; 0x01
    49d4:	99 23       	and	r25, r25
    49d6:	3c f0       	brlt	.+14     	; 0x49e6 <main+0x2d3a>
    49d8:	fe 01       	movw	r30, r28
    49da:	e9 58       	subi	r30, 0x89	; 137
    49dc:	fd 4f       	sbci	r31, 0xFD	; 253
    49de:	80 81       	ld	r24, Z
    49e0:	91 81       	ldd	r25, Z+1	; 0x01
    49e2:	99 23       	and	r25, r25
    49e4:	cc f4       	brge	.+50     	; 0x4a18 <main+0x2d6c>
            {
              if (uiRGB)
    49e6:	fe 01       	movw	r30, r28
    49e8:	e1 5d       	subi	r30, 0xD1	; 209
    49ea:	fc 4f       	sbci	r31, 0xFC	; 252
    49ec:	80 81       	ld	r24, Z
    49ee:	88 23       	and	r24, r24
    49f0:	29 f0       	breq	.+10     	; 0x49fc <main+0x2d50>
                uiRGB = 0;
    49f2:	fe 01       	movw	r30, r28
    49f4:	e1 5d       	subi	r30, 0xD1	; 209
    49f6:	fc 4f       	sbci	r31, 0xFC	; 252
    49f8:	10 82       	st	Z, r1
    49fa:	05 c0       	rjmp	.+10     	; 0x4a06 <main+0x2d5a>
              else
                uiRGB = 1;
    49fc:	fe 01       	movw	r30, r28
    49fe:	e1 5d       	subi	r30, 0xD1	; 209
    4a00:	fc 4f       	sbci	r31, 0xFC	; 252
    4a02:	81 e0       	ldi	r24, 0x01	; 1
    4a04:	80 83       	st	Z, r24
              save_byte(cRGB_Mode, uiRGB);
    4a06:	fe 01       	movw	r30, r28
    4a08:	e1 5d       	subi	r30, 0xD1	; 209
    4a0a:	fc 4f       	sbci	r31, 0xFC	; 252
    4a0c:	90 81       	ld	r25, Z
    4a0e:	83 e0       	ldi	r24, 0x03	; 3
    4a10:	69 2f       	mov	r22, r25
    4a12:	0e 94 bf 01 	call	0x37e	; 0x37e <save_byte>
    4a16:	4c c4       	rjmp	.+2200   	; 0x52b0 <main+0x3604>
              break;
            }
            uiRGB = 0;
    4a18:	fe 01       	movw	r30, r28
    4a1a:	e1 5d       	subi	r30, 0xD1	; 209
    4a1c:	fc 4f       	sbci	r31, 0xFC	; 252
    4a1e:	10 82       	st	Z, r1
            uiR = r;
    4a20:	fe 01       	movw	r30, r28
    4a22:	e5 58       	subi	r30, 0x85	; 133
    4a24:	fd 4f       	sbci	r31, 0xFD	; 253
    4a26:	80 81       	ld	r24, Z
    4a28:	fe 01       	movw	r30, r28
    4a2a:	e4 5d       	subi	r30, 0xD4	; 212
    4a2c:	fc 4f       	sbci	r31, 0xFC	; 252
    4a2e:	80 83       	st	Z, r24
            uiG = g;
    4a30:	fe 01       	movw	r30, r28
    4a32:	e7 58       	subi	r30, 0x87	; 135
    4a34:	fd 4f       	sbci	r31, 0xFD	; 253
    4a36:	80 81       	ld	r24, Z
    4a38:	fe 01       	movw	r30, r28
    4a3a:	e3 5d       	subi	r30, 0xD3	; 211
    4a3c:	fc 4f       	sbci	r31, 0xFC	; 252
    4a3e:	80 83       	st	Z, r24
            uiB = b;
    4a40:	fe 01       	movw	r30, r28
    4a42:	e9 58       	subi	r30, 0x89	; 137
    4a44:	fd 4f       	sbci	r31, 0xFD	; 253
    4a46:	80 81       	ld	r24, Z
    4a48:	fe 01       	movw	r30, r28
    4a4a:	e2 5d       	subi	r30, 0xD2	; 210
    4a4c:	fc 4f       	sbci	r31, 0xFC	; 252
    4a4e:	80 83       	st	Z, r24
            SetColor(uiBright, uiR, uiG, uiB);
    4a50:	fe 01       	movw	r30, r28
    4a52:	e4 5d       	subi	r30, 0xD4	; 212
    4a54:	fc 4f       	sbci	r31, 0xFC	; 252
    4a56:	20 81       	ld	r18, Z
    4a58:	fe 01       	movw	r30, r28
    4a5a:	e3 5d       	subi	r30, 0xD3	; 211
    4a5c:	fc 4f       	sbci	r31, 0xFC	; 252
    4a5e:	30 81       	ld	r19, Z
    4a60:	fe 01       	movw	r30, r28
    4a62:	e2 5d       	subi	r30, 0xD2	; 210
    4a64:	fc 4f       	sbci	r31, 0xFC	; 252
    4a66:	90 81       	ld	r25, Z
    4a68:	fe 01       	movw	r30, r28
    4a6a:	e2 57       	subi	r30, 0x72	; 114
    4a6c:	fd 4f       	sbci	r31, 0xFD	; 253
    4a6e:	80 81       	ld	r24, Z
    4a70:	62 2f       	mov	r22, r18
    4a72:	43 2f       	mov	r20, r19
    4a74:	29 2f       	mov	r18, r25
    4a76:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
            save_byte(cRGB_R, uiR);
    4a7a:	fe 01       	movw	r30, r28
    4a7c:	e4 5d       	subi	r30, 0xD4	; 212
    4a7e:	fc 4f       	sbci	r31, 0xFC	; 252
    4a80:	90 81       	ld	r25, Z
    4a82:	84 e0       	ldi	r24, 0x04	; 4
    4a84:	69 2f       	mov	r22, r25
    4a86:	0e 94 bf 01 	call	0x37e	; 0x37e <save_byte>
            save_byte(cRGB_G, uiG);
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	e3 5d       	subi	r30, 0xD3	; 211
    4a8e:	fc 4f       	sbci	r31, 0xFC	; 252
    4a90:	90 81       	ld	r25, Z
    4a92:	85 e0       	ldi	r24, 0x05	; 5
    4a94:	69 2f       	mov	r22, r25
    4a96:	0e 94 bf 01 	call	0x37e	; 0x37e <save_byte>
            save_byte(cRGB_B, uiB);
    4a9a:	fe 01       	movw	r30, r28
    4a9c:	e2 5d       	subi	r30, 0xD2	; 210
    4a9e:	fc 4f       	sbci	r31, 0xFC	; 252
    4aa0:	90 81       	ld	r25, Z
    4aa2:	86 e0       	ldi	r24, 0x06	; 6
    4aa4:	69 2f       	mov	r22, r25
    4aa6:	0e 94 bf 01 	call	0x37e	; 0x37e <save_byte>
            save_byte(cRGB_Mode, uiRGB);
    4aaa:	fe 01       	movw	r30, r28
    4aac:	e1 5d       	subi	r30, 0xD1	; 209
    4aae:	fc 4f       	sbci	r31, 0xFC	; 252
    4ab0:	90 81       	ld	r25, Z
    4ab2:	83 e0       	ldi	r24, 0x03	; 3
    4ab4:	69 2f       	mov	r22, r25
    4ab6:	0e 94 bf 01 	call	0x37e	; 0x37e <save_byte>
    4aba:	fa c3       	rjmp	.+2036   	; 0x52b0 <main+0x3604>
          }
          break;
        case 'u':
          {
            int h = hex2dez((char*) &uart_string[2]);
    4abc:	8b eb       	ldi	r24, 0xBB	; 187
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	eb 58       	subi	r30, 0x8B	; 139
    4ac8:	fd 4f       	sbci	r31, 0xFD	; 253
    4aca:	91 83       	std	Z+1, r25	; 0x01
    4acc:	80 83       	st	Z, r24
            int m = hex2dez((char*) &uart_string[4]);
    4ace:	8d eb       	ldi	r24, 0xBD	; 189
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    4ad6:	fe 01       	movw	r30, r28
    4ad8:	ed 58       	subi	r30, 0x8D	; 141
    4ada:	fd 4f       	sbci	r31, 0xFD	; 253
    4adc:	91 83       	std	Z+1, r25	; 0x01
    4ade:	80 83       	st	Z, r24
            int s = hex2dez((char*) &uart_string[6]);
    4ae0:	8f eb       	ldi	r24, 0xBF	; 191
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    4ae8:	fe 01       	movw	r30, r28
    4aea:	ef 58       	subi	r30, 0x8F	; 143
    4aec:	fd 4f       	sbci	r31, 0xFD	; 253
    4aee:	91 83       	std	Z+1, r25	; 0x01
    4af0:	80 83       	st	Z, r24
            int D = hex2dez((char*) &uart_string[8]);
    4af2:	81 ec       	ldi	r24, 0xC1	; 193
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    4afa:	fe 01       	movw	r30, r28
    4afc:	e1 59       	subi	r30, 0x91	; 145
    4afe:	fd 4f       	sbci	r31, 0xFD	; 253
    4b00:	91 83       	std	Z+1, r25	; 0x01
    4b02:	80 83       	st	Z, r24
            int M = hex2dez((char*) &uart_string[10]);
    4b04:	83 ec       	ldi	r24, 0xC3	; 195
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    4b0c:	fe 01       	movw	r30, r28
    4b0e:	e3 59       	subi	r30, 0x93	; 147
    4b10:	fd 4f       	sbci	r31, 0xFD	; 253
    4b12:	91 83       	std	Z+1, r25	; 0x01
    4b14:	80 83       	st	Z, r24
            int Y = hex2dez((char*) &uart_string[12]);
    4b16:	85 ec       	ldi	r24, 0xC5	; 197
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <hex2dez>
    4b1e:	fe 01       	movw	r30, r28
    4b20:	e5 59       	subi	r30, 0x95	; 149
    4b22:	fd 4f       	sbci	r31, 0xFD	; 253
    4b24:	91 83       	std	Z+1, r25	; 0x01
    4b26:	80 83       	st	Z, r24
            if (h < 0 || m < 0 || s < 0 || D < 0 || M < 0 || Y < 0)
    4b28:	fe 01       	movw	r30, r28
    4b2a:	eb 58       	subi	r30, 0x8B	; 139
    4b2c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b2e:	80 81       	ld	r24, Z
    4b30:	91 81       	ldd	r25, Z+1	; 0x01
    4b32:	99 23       	and	r25, r25
    4b34:	0c f4       	brge	.+2      	; 0x4b38 <main+0x2e8c>
    4b36:	bc c3       	rjmp	.+1912   	; 0x52b0 <main+0x3604>
    4b38:	fe 01       	movw	r30, r28
    4b3a:	ed 58       	subi	r30, 0x8D	; 141
    4b3c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b3e:	80 81       	ld	r24, Z
    4b40:	91 81       	ldd	r25, Z+1	; 0x01
    4b42:	99 23       	and	r25, r25
    4b44:	0c f4       	brge	.+2      	; 0x4b48 <main+0x2e9c>
    4b46:	b4 c3       	rjmp	.+1896   	; 0x52b0 <main+0x3604>
    4b48:	fe 01       	movw	r30, r28
    4b4a:	ef 58       	subi	r30, 0x8F	; 143
    4b4c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b4e:	80 81       	ld	r24, Z
    4b50:	91 81       	ldd	r25, Z+1	; 0x01
    4b52:	99 23       	and	r25, r25
    4b54:	0c f4       	brge	.+2      	; 0x4b58 <main+0x2eac>
    4b56:	ac c3       	rjmp	.+1880   	; 0x52b0 <main+0x3604>
    4b58:	fe 01       	movw	r30, r28
    4b5a:	e1 59       	subi	r30, 0x91	; 145
    4b5c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b5e:	80 81       	ld	r24, Z
    4b60:	91 81       	ldd	r25, Z+1	; 0x01
    4b62:	99 23       	and	r25, r25
    4b64:	0c f4       	brge	.+2      	; 0x4b68 <main+0x2ebc>
    4b66:	a4 c3       	rjmp	.+1864   	; 0x52b0 <main+0x3604>
    4b68:	fe 01       	movw	r30, r28
    4b6a:	e3 59       	subi	r30, 0x93	; 147
    4b6c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b6e:	80 81       	ld	r24, Z
    4b70:	91 81       	ldd	r25, Z+1	; 0x01
    4b72:	99 23       	and	r25, r25
    4b74:	0c f4       	brge	.+2      	; 0x4b78 <main+0x2ecc>
    4b76:	9c c3       	rjmp	.+1848   	; 0x52b0 <main+0x3604>
    4b78:	fe 01       	movw	r30, r28
    4b7a:	e5 59       	subi	r30, 0x95	; 149
    4b7c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b7e:	80 81       	ld	r24, Z
    4b80:	91 81       	ldd	r25, Z+1	; 0x01
    4b82:	99 23       	and	r25, r25
    4b84:	0c f4       	brge	.+2      	; 0x4b88 <main+0x2edc>
    4b86:	94 c3       	rjmp	.+1832   	; 0x52b0 <main+0x3604>
            {
              break;
            }
            time.hh = h;
    4b88:	fe 01       	movw	r30, r28
    4b8a:	eb 58       	subi	r30, 0x8B	; 139
    4b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b8e:	80 81       	ld	r24, Z
    4b90:	fe 01       	movw	r30, r28
    4b92:	e5 55       	subi	r30, 0x55	; 85
    4b94:	fd 4f       	sbci	r31, 0xFD	; 253
    4b96:	83 83       	std	Z+3, r24	; 0x03
            time.mm = m;
    4b98:	fe 01       	movw	r30, r28
    4b9a:	ed 58       	subi	r30, 0x8D	; 141
    4b9c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b9e:	80 81       	ld	r24, Z
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e5 55       	subi	r30, 0x55	; 85
    4ba4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ba6:	84 83       	std	Z+4, r24	; 0x04
            time.ss = s;
    4ba8:	fe 01       	movw	r30, r28
    4baa:	ef 58       	subi	r30, 0x8F	; 143
    4bac:	fd 4f       	sbci	r31, 0xFD	; 253
    4bae:	80 81       	ld	r24, Z
    4bb0:	fe 01       	movw	r30, r28
    4bb2:	e5 55       	subi	r30, 0x55	; 85
    4bb4:	fd 4f       	sbci	r31, 0xFD	; 253
    4bb6:	85 83       	std	Z+5, r24	; 0x05
            time.DD = D;
    4bb8:	fe 01       	movw	r30, r28
    4bba:	e1 59       	subi	r30, 0x91	; 145
    4bbc:	fd 4f       	sbci	r31, 0xFD	; 253
    4bbe:	80 81       	ld	r24, Z
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	e5 55       	subi	r30, 0x55	; 85
    4bc4:	fd 4f       	sbci	r31, 0xFD	; 253
    4bc6:	82 83       	std	Z+2, r24	; 0x02
            time.MM = M;
    4bc8:	fe 01       	movw	r30, r28
    4bca:	e3 59       	subi	r30, 0x93	; 147
    4bcc:	fd 4f       	sbci	r31, 0xFD	; 253
    4bce:	80 81       	ld	r24, Z
    4bd0:	fe 01       	movw	r30, r28
    4bd2:	e5 55       	subi	r30, 0x55	; 85
    4bd4:	fd 4f       	sbci	r31, 0xFD	; 253
    4bd6:	81 83       	std	Z+1, r24	; 0x01
            time.YY = Y;
    4bd8:	fe 01       	movw	r30, r28
    4bda:	e5 59       	subi	r30, 0x95	; 149
    4bdc:	fd 4f       	sbci	r31, 0xFD	; 253
    4bde:	80 81       	ld	r24, Z
    4be0:	fe 01       	movw	r30, r28
    4be2:	e5 55       	subi	r30, 0x55	; 85
    4be4:	fd 4f       	sbci	r31, 0xFD	; 253
    4be6:	80 83       	st	Z, r24
            i2c_rtc_write(&time);
    4be8:	ce 01       	movw	r24, r28
    4bea:	85 55       	subi	r24, 0x55	; 85
    4bec:	9d 4f       	sbci	r25, 0xFD	; 253
    4bee:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    4bf2:	5e c3       	rjmp	.+1724   	; 0x52b0 <main+0x3604>
          }
          break;
        case 't':
          {
            if (uiScrollingBit)
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	eb 55       	subi	r30, 0x5B	; 91
    4bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    4bfa:	80 81       	ld	r24, Z
    4bfc:	91 81       	ldd	r25, Z+1	; 0x01
    4bfe:	a2 81       	ldd	r26, Z+2	; 0x02
    4c00:	b3 81       	ldd	r27, Z+3	; 0x03
    4c02:	00 97       	sbiw	r24, 0x00	; 0
    4c04:	a1 05       	cpc	r26, r1
    4c06:	b1 05       	cpc	r27, r1
    4c08:	41 f0       	breq	.+16     	; 0x4c1a <main+0x2f6e>
            {
              uiScrollingBit = 0;
    4c0a:	fe 01       	movw	r30, r28
    4c0c:	eb 55       	subi	r30, 0x5B	; 91
    4c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    4c10:	10 82       	st	Z, r1
    4c12:	11 82       	std	Z+1, r1	; 0x01
    4c14:	12 82       	std	Z+2, r1	; 0x02
    4c16:	13 82       	std	Z+3, r1	; 0x03
    4c18:	4b c3       	rjmp	.+1686   	; 0x52b0 <main+0x3604>
            }
            else
            {
              uiScrollingBit = 0x80000000;
    4c1a:	fe 01       	movw	r30, r28
    4c1c:	eb 55       	subi	r30, 0x5B	; 91
    4c1e:	fd 4f       	sbci	r31, 0xFD	; 253
    4c20:	80 e0       	ldi	r24, 0x00	; 0
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	a0 e0       	ldi	r26, 0x00	; 0
    4c26:	b0 e8       	ldi	r27, 0x80	; 128
    4c28:	80 83       	st	Z, r24
    4c2a:	91 83       	std	Z+1, r25	; 0x01
    4c2c:	a2 83       	std	Z+2, r26	; 0x02
    4c2e:	b3 83       	std	Z+3, r27	; 0x03
    4c30:	3f c3       	rjmp	.+1662   	; 0x52b0 <main+0x3604>
            }
          }
          break;
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    4c32:	ce 01       	movw	r24, r28
    4c34:	85 55       	subi	r24, 0x55	; 85
    4c36:	9d 4f       	sbci	r25, 0xFD	; 253
    4c38:	60 e0       	ldi	r22, 0x00	; 0
    4c3a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    4c3e:	fe 01       	movw	r30, r28
    4c40:	e7 59       	subi	r30, 0x97	; 151
    4c42:	fd 4f       	sbci	r31, 0xFD	; 253
    4c44:	88 2f       	mov	r24, r24
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	91 83       	std	Z+1, r25	; 0x01
    4c4a:	80 83       	st	Z, r24
            add_minute(&time);
    4c4c:	ce 01       	movw	r24, r28
    4c4e:	85 55       	subi	r24, 0x55	; 85
    4c50:	9d 4f       	sbci	r25, 0xFD	; 253
    4c52:	0e 94 94 04 	call	0x928	; 0x928 <add_minute>
            res = i2c_rtc_write(&time);
    4c56:	ce 01       	movw	r24, r28
    4c58:	85 55       	subi	r24, 0x55	; 85
    4c5a:	9d 4f       	sbci	r25, 0xFD	; 253
    4c5c:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    4c60:	fe 01       	movw	r30, r28
    4c62:	e7 59       	subi	r30, 0x97	; 151
    4c64:	fd 4f       	sbci	r31, 0xFD	; 253
    4c66:	88 2f       	mov	r24, r24
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	91 83       	std	Z+1, r25	; 0x01
    4c6c:	80 83       	st	Z, r24
    4c6e:	20 c3       	rjmp	.+1600   	; 0x52b0 <main+0x3604>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    4c70:	ce 01       	movw	r24, r28
    4c72:	85 55       	subi	r24, 0x55	; 85
    4c74:	9d 4f       	sbci	r25, 0xFD	; 253
    4c76:	60 e0       	ldi	r22, 0x00	; 0
    4c78:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    4c7c:	fe 01       	movw	r30, r28
    4c7e:	e9 59       	subi	r30, 0x99	; 153
    4c80:	fd 4f       	sbci	r31, 0xFD	; 253
    4c82:	88 2f       	mov	r24, r24
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	91 83       	std	Z+1, r25	; 0x01
    4c88:	80 83       	st	Z, r24
            sub_minute(&time);
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	85 55       	subi	r24, 0x55	; 85
    4c8e:	9d 4f       	sbci	r25, 0xFD	; 253
    4c90:	0e 94 b3 04 	call	0x966	; 0x966 <sub_minute>
            res = i2c_rtc_write(&time);
    4c94:	ce 01       	movw	r24, r28
    4c96:	85 55       	subi	r24, 0x55	; 85
    4c98:	9d 4f       	sbci	r25, 0xFD	; 253
    4c9a:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    4c9e:	fe 01       	movw	r30, r28
    4ca0:	e9 59       	subi	r30, 0x99	; 153
    4ca2:	fd 4f       	sbci	r31, 0xFD	; 253
    4ca4:	88 2f       	mov	r24, r24
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	91 83       	std	Z+1, r25	; 0x01
    4caa:	80 83       	st	Z, r24
    4cac:	01 c3       	rjmp	.+1538   	; 0x52b0 <main+0x3604>
          }
          break;
        case 'z':
          switch (uart_string[2])
    4cae:	80 91 bb 00 	lds	r24, 0x00BB
    4cb2:	e8 2f       	mov	r30, r24
    4cb4:	f0 e0       	ldi	r31, 0x00	; 0
    4cb6:	ca 5c       	subi	r28, 0xCA	; 202
    4cb8:	db 4f       	sbci	r29, 0xFB	; 251
    4cba:	f9 83       	std	Y+1, r31	; 0x01
    4cbc:	e8 83       	st	Y, r30
    4cbe:	c6 53       	subi	r28, 0x36	; 54
    4cc0:	d4 40       	sbci	r29, 0x04	; 4
    4cc2:	ca 5c       	subi	r28, 0xCA	; 202
    4cc4:	db 4f       	sbci	r29, 0xFB	; 251
    4cc6:	28 81       	ld	r18, Y
    4cc8:	39 81       	ldd	r19, Y+1	; 0x01
    4cca:	c6 53       	subi	r28, 0x36	; 54
    4ccc:	d4 40       	sbci	r29, 0x04	; 4
    4cce:	2b 32       	cpi	r18, 0x2B	; 43
    4cd0:	31 05       	cpc	r19, r1
    4cd2:	51 f0       	breq	.+20     	; 0x4ce8 <main+0x303c>
    4cd4:	ca 5c       	subi	r28, 0xCA	; 202
    4cd6:	db 4f       	sbci	r29, 0xFB	; 251
    4cd8:	88 81       	ld	r24, Y
    4cda:	99 81       	ldd	r25, Y+1	; 0x01
    4cdc:	c6 53       	subi	r28, 0x36	; 54
    4cde:	d4 40       	sbci	r29, 0x04	; 4
    4ce0:	8d 32       	cpi	r24, 0x2D	; 45
    4ce2:	91 05       	cpc	r25, r1
    4ce4:	71 f0       	breq	.+28     	; 0x4d02 <main+0x3056>
    4ce6:	1a c0       	rjmp	.+52     	; 0x4d1c <main+0x3070>
          {
          case '+':
            {
              if (rtc_offset > 11)
    4ce8:	80 91 29 05 	lds	r24, 0x0529
    4cec:	8c 30       	cpi	r24, 0x0C	; 12
    4cee:	1c f0       	brlt	.+6      	; 0x4cf6 <main+0x304a>
                rtc_offset = -13;
    4cf0:	83 ef       	ldi	r24, 0xF3	; 243
    4cf2:	80 93 29 05 	sts	0x0529, r24
              set_offset(rtc_offset + 1);
    4cf6:	80 91 29 05 	lds	r24, 0x0529
    4cfa:	8f 5f       	subi	r24, 0xFF	; 255
    4cfc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <set_offset>
    4d00:	d7 c2       	rjmp	.+1454   	; 0x52b0 <main+0x3604>
            }
            break;
          case '-':
            {
              if (rtc_offset < -11)
    4d02:	80 91 29 05 	lds	r24, 0x0529
    4d06:	85 3f       	cpi	r24, 0xF5	; 245
    4d08:	1c f4       	brge	.+6      	; 0x4d10 <main+0x3064>
                rtc_offset = 13;
    4d0a:	8d e0       	ldi	r24, 0x0D	; 13
    4d0c:	80 93 29 05 	sts	0x0529, r24
              set_offset(rtc_offset - 1);
    4d10:	80 91 29 05 	lds	r24, 0x0529
    4d14:	81 50       	subi	r24, 0x01	; 1
    4d16:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <set_offset>
    4d1a:	ca c2       	rjmp	.+1428   	; 0x52b0 <main+0x3604>
            }
            break;
          default:
            {
              char s[100];
              sprintf(s, "z macht keinen sinn mit '%c'...\r\n", uart_string[2]);
    4d1c:	80 91 bb 00 	lds	r24, 0x00BB
    4d20:	28 2f       	mov	r18, r24
    4d22:	30 e0       	ldi	r19, 0x00	; 0
    4d24:	00 d0       	rcall	.+0      	; 0x4d26 <main+0x307a>
    4d26:	00 d0       	rcall	.+0      	; 0x4d28 <main+0x307c>
    4d28:	00 d0       	rcall	.+0      	; 0x4d2a <main+0x307e>
    4d2a:	ed b7       	in	r30, 0x3d	; 61
    4d2c:	fe b7       	in	r31, 0x3e	; 62
    4d2e:	31 96       	adiw	r30, 0x01	; 1
    4d30:	ce 01       	movw	r24, r28
    4d32:	8e 59       	subi	r24, 0x9E	; 158
    4d34:	9c 4f       	sbci	r25, 0xFC	; 252
    4d36:	91 83       	std	Z+1, r25	; 0x01
    4d38:	80 83       	st	Z, r24
    4d3a:	8d ef       	ldi	r24, 0xFD	; 253
    4d3c:	93 e0       	ldi	r25, 0x03	; 3
    4d3e:	93 83       	std	Z+3, r25	; 0x03
    4d40:	82 83       	std	Z+2, r24	; 0x02
    4d42:	35 83       	std	Z+5, r19	; 0x05
    4d44:	24 83       	std	Z+4, r18	; 0x04
    4d46:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    4d4a:	ed b7       	in	r30, 0x3d	; 61
    4d4c:	fe b7       	in	r31, 0x3e	; 62
    4d4e:	36 96       	adiw	r30, 0x06	; 6
    4d50:	0f b6       	in	r0, 0x3f	; 63
    4d52:	f8 94       	cli
    4d54:	fe bf       	out	0x3e, r31	; 62
    4d56:	0f be       	out	0x3f, r0	; 63
    4d58:	ed bf       	out	0x3d, r30	; 61
              uartPuts(s);
    4d5a:	ce 01       	movw	r24, r28
    4d5c:	8e 59       	subi	r24, 0x9E	; 158
    4d5e:	9c 4f       	sbci	r25, 0xFC	; 252
    4d60:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    4d64:	a5 c2       	rjmp	.+1354   	; 0x52b0 <main+0x3604>
            }
            break;
          }
          break;
        case 'h':
          switch (uart_string[2])
    4d66:	80 91 bb 00 	lds	r24, 0x00BB
    4d6a:	28 2f       	mov	r18, r24
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	cc 5c       	subi	r28, 0xCC	; 204
    4d70:	db 4f       	sbci	r29, 0xFB	; 251
    4d72:	39 83       	std	Y+1, r19	; 0x01
    4d74:	28 83       	st	Y, r18
    4d76:	c4 53       	subi	r28, 0x34	; 52
    4d78:	d4 40       	sbci	r29, 0x04	; 4
    4d7a:	cc 5c       	subi	r28, 0xCC	; 204
    4d7c:	db 4f       	sbci	r29, 0xFB	; 251
    4d7e:	88 81       	ld	r24, Y
    4d80:	99 81       	ldd	r25, Y+1	; 0x01
    4d82:	c4 53       	subi	r28, 0x34	; 52
    4d84:	d4 40       	sbci	r29, 0x04	; 4
    4d86:	8b 32       	cpi	r24, 0x2B	; 43
    4d88:	91 05       	cpc	r25, r1
    4d8a:	51 f0       	breq	.+20     	; 0x4da0 <main+0x30f4>
    4d8c:	cc 5c       	subi	r28, 0xCC	; 204
    4d8e:	db 4f       	sbci	r29, 0xFB	; 251
    4d90:	e8 81       	ld	r30, Y
    4d92:	f9 81       	ldd	r31, Y+1	; 0x01
    4d94:	c4 53       	subi	r28, 0x34	; 52
    4d96:	d4 40       	sbci	r29, 0x04	; 4
    4d98:	ed 32       	cpi	r30, 0x2D	; 45
    4d9a:	f1 05       	cpc	r31, r1
    4d9c:	01 f1       	breq	.+64     	; 0x4dde <main+0x3132>
    4d9e:	3e c0       	rjmp	.+124    	; 0x4e1c <main+0x3170>
          {
          case '+':
            {
              int res = i2c_rtc_read(&time, 0);
    4da0:	ce 01       	movw	r24, r28
    4da2:	85 55       	subi	r24, 0x55	; 85
    4da4:	9d 4f       	sbci	r25, 0xFD	; 253
    4da6:	60 e0       	ldi	r22, 0x00	; 0
    4da8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    4dac:	fe 01       	movw	r30, r28
    4dae:	eb 59       	subi	r30, 0x9B	; 155
    4db0:	fd 4f       	sbci	r31, 0xFD	; 253
    4db2:	88 2f       	mov	r24, r24
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	91 83       	std	Z+1, r25	; 0x01
    4db8:	80 83       	st	Z, r24
              add_hour(&time);
    4dba:	ce 01       	movw	r24, r28
    4dbc:	85 55       	subi	r24, 0x55	; 85
    4dbe:	9d 4f       	sbci	r25, 0xFD	; 253
    4dc0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <add_hour>
              res = i2c_rtc_write(&time);
    4dc4:	ce 01       	movw	r24, r28
    4dc6:	85 55       	subi	r24, 0x55	; 85
    4dc8:	9d 4f       	sbci	r25, 0xFD	; 253
    4dca:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    4dce:	fe 01       	movw	r30, r28
    4dd0:	eb 59       	subi	r30, 0x9B	; 155
    4dd2:	fd 4f       	sbci	r31, 0xFD	; 253
    4dd4:	88 2f       	mov	r24, r24
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	91 83       	std	Z+1, r25	; 0x01
    4dda:	80 83       	st	Z, r24
    4ddc:	69 c2       	rjmp	.+1234   	; 0x52b0 <main+0x3604>
            }
            break;
          case '-':
            {
              int res = i2c_rtc_read(&time, 0);
    4dde:	ce 01       	movw	r24, r28
    4de0:	85 55       	subi	r24, 0x55	; 85
    4de2:	9d 4f       	sbci	r25, 0xFD	; 253
    4de4:	60 e0       	ldi	r22, 0x00	; 0
    4de6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    4dea:	fe 01       	movw	r30, r28
    4dec:	ed 59       	subi	r30, 0x9D	; 157
    4dee:	fd 4f       	sbci	r31, 0xFD	; 253
    4df0:	88 2f       	mov	r24, r24
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	91 83       	std	Z+1, r25	; 0x01
    4df6:	80 83       	st	Z, r24
              sub_hour(&time);
    4df8:	ce 01       	movw	r24, r28
    4dfa:	85 55       	subi	r24, 0x55	; 85
    4dfc:	9d 4f       	sbci	r25, 0xFD	; 253
    4dfe:	0e 94 73 04 	call	0x8e6	; 0x8e6 <sub_hour>
              res = i2c_rtc_write(&time);
    4e02:	ce 01       	movw	r24, r28
    4e04:	85 55       	subi	r24, 0x55	; 85
    4e06:	9d 4f       	sbci	r25, 0xFD	; 253
    4e08:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    4e0c:	fe 01       	movw	r30, r28
    4e0e:	ed 59       	subi	r30, 0x9D	; 157
    4e10:	fd 4f       	sbci	r31, 0xFD	; 253
    4e12:	88 2f       	mov	r24, r24
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	91 83       	std	Z+1, r25	; 0x01
    4e18:	80 83       	st	Z, r24
    4e1a:	4a c2       	rjmp	.+1172   	; 0x52b0 <main+0x3604>
            }
            break;
          default:
            {
              char s[100];
              sprintf(s, "h macht keinen sinn mit '%c'...\r\n", uart_string[2]);
    4e1c:	80 91 bb 00 	lds	r24, 0x00BB
    4e20:	28 2f       	mov	r18, r24
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	00 d0       	rcall	.+0      	; 0x4e26 <main+0x317a>
    4e26:	00 d0       	rcall	.+0      	; 0x4e28 <main+0x317c>
    4e28:	00 d0       	rcall	.+0      	; 0x4e2a <main+0x317e>
    4e2a:	ed b7       	in	r30, 0x3d	; 61
    4e2c:	fe b7       	in	r31, 0x3e	; 62
    4e2e:	31 96       	adiw	r30, 0x01	; 1
    4e30:	ce 01       	movw	r24, r28
    4e32:	8e 59       	subi	r24, 0x9E	; 158
    4e34:	9c 4f       	sbci	r25, 0xFC	; 252
    4e36:	91 83       	std	Z+1, r25	; 0x01
    4e38:	80 83       	st	Z, r24
    4e3a:	8f e1       	ldi	r24, 0x1F	; 31
    4e3c:	94 e0       	ldi	r25, 0x04	; 4
    4e3e:	93 83       	std	Z+3, r25	; 0x03
    4e40:	82 83       	std	Z+2, r24	; 0x02
    4e42:	35 83       	std	Z+5, r19	; 0x05
    4e44:	24 83       	std	Z+4, r18	; 0x04
    4e46:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    4e4a:	2d b7       	in	r18, 0x3d	; 61
    4e4c:	3e b7       	in	r19, 0x3e	; 62
    4e4e:	2a 5f       	subi	r18, 0xFA	; 250
    4e50:	3f 4f       	sbci	r19, 0xFF	; 255
    4e52:	0f b6       	in	r0, 0x3f	; 63
    4e54:	f8 94       	cli
    4e56:	3e bf       	out	0x3e, r19	; 62
    4e58:	0f be       	out	0x3f, r0	; 63
    4e5a:	2d bf       	out	0x3d, r18	; 61
              uartPuts(s);
    4e5c:	ce 01       	movw	r24, r28
    4e5e:	8e 59       	subi	r24, 0x9E	; 158
    4e60:	9c 4f       	sbci	r25, 0xFC	; 252
    4e62:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    4e66:	24 c2       	rjmp	.+1096   	; 0x52b0 <main+0x3604>
            }
            break;
          }
          break;
        case 'm':
          switch (uart_string[2])
    4e68:	80 91 bb 00 	lds	r24, 0x00BB
    4e6c:	e8 2f       	mov	r30, r24
    4e6e:	f0 e0       	ldi	r31, 0x00	; 0
    4e70:	ce 5c       	subi	r28, 0xCE	; 206
    4e72:	db 4f       	sbci	r29, 0xFB	; 251
    4e74:	f9 83       	std	Y+1, r31	; 0x01
    4e76:	e8 83       	st	Y, r30
    4e78:	c2 53       	subi	r28, 0x32	; 50
    4e7a:	d4 40       	sbci	r29, 0x04	; 4
    4e7c:	ce 5c       	subi	r28, 0xCE	; 206
    4e7e:	db 4f       	sbci	r29, 0xFB	; 251
    4e80:	28 81       	ld	r18, Y
    4e82:	39 81       	ldd	r19, Y+1	; 0x01
    4e84:	c2 53       	subi	r28, 0x32	; 50
    4e86:	d4 40       	sbci	r29, 0x04	; 4
    4e88:	2b 32       	cpi	r18, 0x2B	; 43
    4e8a:	31 05       	cpc	r19, r1
    4e8c:	51 f0       	breq	.+20     	; 0x4ea2 <main+0x31f6>
    4e8e:	ce 5c       	subi	r28, 0xCE	; 206
    4e90:	db 4f       	sbci	r29, 0xFB	; 251
    4e92:	88 81       	ld	r24, Y
    4e94:	99 81       	ldd	r25, Y+1	; 0x01
    4e96:	c2 53       	subi	r28, 0x32	; 50
    4e98:	d4 40       	sbci	r29, 0x04	; 4
    4e9a:	8d 32       	cpi	r24, 0x2D	; 45
    4e9c:	91 05       	cpc	r25, r1
    4e9e:	01 f1       	breq	.+64     	; 0x4ee0 <main+0x3234>
    4ea0:	3e c0       	rjmp	.+124    	; 0x4f1e <main+0x3272>
          {
          case '+':
            {
              int res = i2c_rtc_read(&time, 0);
    4ea2:	ce 01       	movw	r24, r28
    4ea4:	85 55       	subi	r24, 0x55	; 85
    4ea6:	9d 4f       	sbci	r25, 0xFD	; 253
    4ea8:	60 e0       	ldi	r22, 0x00	; 0
    4eaa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    4eae:	fe 01       	movw	r30, r28
    4eb0:	ef 59       	subi	r30, 0x9F	; 159
    4eb2:	fd 4f       	sbci	r31, 0xFD	; 253
    4eb4:	88 2f       	mov	r24, r24
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	91 83       	std	Z+1, r25	; 0x01
    4eba:	80 83       	st	Z, r24
              add_minute(&time);
    4ebc:	ce 01       	movw	r24, r28
    4ebe:	85 55       	subi	r24, 0x55	; 85
    4ec0:	9d 4f       	sbci	r25, 0xFD	; 253
    4ec2:	0e 94 94 04 	call	0x928	; 0x928 <add_minute>
              res = i2c_rtc_write(&time);
    4ec6:	ce 01       	movw	r24, r28
    4ec8:	85 55       	subi	r24, 0x55	; 85
    4eca:	9d 4f       	sbci	r25, 0xFD	; 253
    4ecc:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    4ed0:	fe 01       	movw	r30, r28
    4ed2:	ef 59       	subi	r30, 0x9F	; 159
    4ed4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ed6:	88 2f       	mov	r24, r24
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	91 83       	std	Z+1, r25	; 0x01
    4edc:	80 83       	st	Z, r24
    4ede:	e8 c1       	rjmp	.+976    	; 0x52b0 <main+0x3604>
            }
            break;
          case '-':
            {
              int res = i2c_rtc_read(&time, 0);
    4ee0:	ce 01       	movw	r24, r28
    4ee2:	85 55       	subi	r24, 0x55	; 85
    4ee4:	9d 4f       	sbci	r25, 0xFD	; 253
    4ee6:	60 e0       	ldi	r22, 0x00	; 0
    4ee8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    4eec:	fe 01       	movw	r30, r28
    4eee:	e1 5a       	subi	r30, 0xA1	; 161
    4ef0:	fd 4f       	sbci	r31, 0xFD	; 253
    4ef2:	88 2f       	mov	r24, r24
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	91 83       	std	Z+1, r25	; 0x01
    4ef8:	80 83       	st	Z, r24
              sub_minute(&time);
    4efa:	ce 01       	movw	r24, r28
    4efc:	85 55       	subi	r24, 0x55	; 85
    4efe:	9d 4f       	sbci	r25, 0xFD	; 253
    4f00:	0e 94 b3 04 	call	0x966	; 0x966 <sub_minute>
              res = i2c_rtc_write(&time);
    4f04:	ce 01       	movw	r24, r28
    4f06:	85 55       	subi	r24, 0x55	; 85
    4f08:	9d 4f       	sbci	r25, 0xFD	; 253
    4f0a:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    4f0e:	fe 01       	movw	r30, r28
    4f10:	e1 5a       	subi	r30, 0xA1	; 161
    4f12:	fd 4f       	sbci	r31, 0xFD	; 253
    4f14:	88 2f       	mov	r24, r24
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	91 83       	std	Z+1, r25	; 0x01
    4f1a:	80 83       	st	Z, r24
    4f1c:	c9 c1       	rjmp	.+914    	; 0x52b0 <main+0x3604>
            }
            break;
          default:
            {
              char s[100];
              sprintf(s, "m macht keinen sinn mit '%c'...\r\n", uart_string[2]);
    4f1e:	80 91 bb 00 	lds	r24, 0x00BB
    4f22:	28 2f       	mov	r18, r24
    4f24:	30 e0       	ldi	r19, 0x00	; 0
    4f26:	00 d0       	rcall	.+0      	; 0x4f28 <main+0x327c>
    4f28:	00 d0       	rcall	.+0      	; 0x4f2a <main+0x327e>
    4f2a:	00 d0       	rcall	.+0      	; 0x4f2c <main+0x3280>
    4f2c:	ed b7       	in	r30, 0x3d	; 61
    4f2e:	fe b7       	in	r31, 0x3e	; 62
    4f30:	31 96       	adiw	r30, 0x01	; 1
    4f32:	ce 01       	movw	r24, r28
    4f34:	8e 59       	subi	r24, 0x9E	; 158
    4f36:	9c 4f       	sbci	r25, 0xFC	; 252
    4f38:	91 83       	std	Z+1, r25	; 0x01
    4f3a:	80 83       	st	Z, r24
    4f3c:	81 e4       	ldi	r24, 0x41	; 65
    4f3e:	94 e0       	ldi	r25, 0x04	; 4
    4f40:	93 83       	std	Z+3, r25	; 0x03
    4f42:	82 83       	std	Z+2, r24	; 0x02
    4f44:	35 83       	std	Z+5, r19	; 0x05
    4f46:	24 83       	std	Z+4, r18	; 0x04
    4f48:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    4f4c:	ed b7       	in	r30, 0x3d	; 61
    4f4e:	fe b7       	in	r31, 0x3e	; 62
    4f50:	36 96       	adiw	r30, 0x06	; 6
    4f52:	0f b6       	in	r0, 0x3f	; 63
    4f54:	f8 94       	cli
    4f56:	fe bf       	out	0x3e, r31	; 62
    4f58:	0f be       	out	0x3f, r0	; 63
    4f5a:	ed bf       	out	0x3d, r30	; 61
              uartPuts(s);
    4f5c:	ce 01       	movw	r24, r28
    4f5e:	8e 59       	subi	r24, 0x9E	; 158
    4f60:	9c 4f       	sbci	r25, 0xFC	; 252
    4f62:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    4f66:	a4 c1       	rjmp	.+840    	; 0x52b0 <main+0x3604>
            }
            break;
          }
          break;
        case 'D':
          switch (uart_string[2])
    4f68:	80 91 bb 00 	lds	r24, 0x00BB
    4f6c:	28 2f       	mov	r18, r24
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	c0 5d       	subi	r28, 0xD0	; 208
    4f72:	db 4f       	sbci	r29, 0xFB	; 251
    4f74:	39 83       	std	Y+1, r19	; 0x01
    4f76:	28 83       	st	Y, r18
    4f78:	c0 53       	subi	r28, 0x30	; 48
    4f7a:	d4 40       	sbci	r29, 0x04	; 4
    4f7c:	c0 5d       	subi	r28, 0xD0	; 208
    4f7e:	db 4f       	sbci	r29, 0xFB	; 251
    4f80:	88 81       	ld	r24, Y
    4f82:	99 81       	ldd	r25, Y+1	; 0x01
    4f84:	c0 53       	subi	r28, 0x30	; 48
    4f86:	d4 40       	sbci	r29, 0x04	; 4
    4f88:	8b 32       	cpi	r24, 0x2B	; 43
    4f8a:	91 05       	cpc	r25, r1
    4f8c:	51 f0       	breq	.+20     	; 0x4fa2 <main+0x32f6>
    4f8e:	c0 5d       	subi	r28, 0xD0	; 208
    4f90:	db 4f       	sbci	r29, 0xFB	; 251
    4f92:	e8 81       	ld	r30, Y
    4f94:	f9 81       	ldd	r31, Y+1	; 0x01
    4f96:	c0 53       	subi	r28, 0x30	; 48
    4f98:	d4 40       	sbci	r29, 0x04	; 4
    4f9a:	ed 32       	cpi	r30, 0x2D	; 45
    4f9c:	f1 05       	cpc	r31, r1
    4f9e:	01 f1       	breq	.+64     	; 0x4fe0 <main+0x3334>
    4fa0:	3e c0       	rjmp	.+124    	; 0x501e <main+0x3372>
          {
          case '+':
            {
              int res = i2c_rtc_read(&time, 0);
    4fa2:	ce 01       	movw	r24, r28
    4fa4:	85 55       	subi	r24, 0x55	; 85
    4fa6:	9d 4f       	sbci	r25, 0xFD	; 253
    4fa8:	60 e0       	ldi	r22, 0x00	; 0
    4faa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    4fae:	fe 01       	movw	r30, r28
    4fb0:	e3 5a       	subi	r30, 0xA3	; 163
    4fb2:	fd 4f       	sbci	r31, 0xFD	; 253
    4fb4:	88 2f       	mov	r24, r24
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	91 83       	std	Z+1, r25	; 0x01
    4fba:	80 83       	st	Z, r24
              add_day(&time);
    4fbc:	ce 01       	movw	r24, r28
    4fbe:	85 55       	subi	r24, 0x55	; 85
    4fc0:	9d 4f       	sbci	r25, 0xFD	; 253
    4fc2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <add_day>
              res = i2c_rtc_write(&time);
    4fc6:	ce 01       	movw	r24, r28
    4fc8:	85 55       	subi	r24, 0x55	; 85
    4fca:	9d 4f       	sbci	r25, 0xFD	; 253
    4fcc:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	e3 5a       	subi	r30, 0xA3	; 163
    4fd4:	fd 4f       	sbci	r31, 0xFD	; 253
    4fd6:	88 2f       	mov	r24, r24
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	91 83       	std	Z+1, r25	; 0x01
    4fdc:	80 83       	st	Z, r24
    4fde:	68 c1       	rjmp	.+720    	; 0x52b0 <main+0x3604>
            }
            break;
          case '-':
            {
              int res = i2c_rtc_read(&time, 0);
    4fe0:	ce 01       	movw	r24, r28
    4fe2:	85 55       	subi	r24, 0x55	; 85
    4fe4:	9d 4f       	sbci	r25, 0xFD	; 253
    4fe6:	60 e0       	ldi	r22, 0x00	; 0
    4fe8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    4fec:	fe 01       	movw	r30, r28
    4fee:	e5 5a       	subi	r30, 0xA5	; 165
    4ff0:	fd 4f       	sbci	r31, 0xFD	; 253
    4ff2:	88 2f       	mov	r24, r24
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	91 83       	std	Z+1, r25	; 0x01
    4ff8:	80 83       	st	Z, r24
              sub_day(&time);
    4ffa:	ce 01       	movw	r24, r28
    4ffc:	85 55       	subi	r24, 0x55	; 85
    4ffe:	9d 4f       	sbci	r25, 0xFD	; 253
    5000:	0e 94 e6 03 	call	0x7cc	; 0x7cc <sub_day>
              res = i2c_rtc_write(&time);
    5004:	ce 01       	movw	r24, r28
    5006:	85 55       	subi	r24, 0x55	; 85
    5008:	9d 4f       	sbci	r25, 0xFD	; 253
    500a:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    500e:	fe 01       	movw	r30, r28
    5010:	e5 5a       	subi	r30, 0xA5	; 165
    5012:	fd 4f       	sbci	r31, 0xFD	; 253
    5014:	88 2f       	mov	r24, r24
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	91 83       	std	Z+1, r25	; 0x01
    501a:	80 83       	st	Z, r24
    501c:	49 c1       	rjmp	.+658    	; 0x52b0 <main+0x3604>
            }
            break;
          default:
            {
              char s[100];
              sprintf(s, "D macht keinen sinn mit '%c'...\r\n", uart_string[2]);
    501e:	80 91 bb 00 	lds	r24, 0x00BB
    5022:	28 2f       	mov	r18, r24
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	00 d0       	rcall	.+0      	; 0x5028 <main+0x337c>
    5028:	00 d0       	rcall	.+0      	; 0x502a <main+0x337e>
    502a:	00 d0       	rcall	.+0      	; 0x502c <main+0x3380>
    502c:	ed b7       	in	r30, 0x3d	; 61
    502e:	fe b7       	in	r31, 0x3e	; 62
    5030:	31 96       	adiw	r30, 0x01	; 1
    5032:	ce 01       	movw	r24, r28
    5034:	8e 59       	subi	r24, 0x9E	; 158
    5036:	9c 4f       	sbci	r25, 0xFC	; 252
    5038:	91 83       	std	Z+1, r25	; 0x01
    503a:	80 83       	st	Z, r24
    503c:	83 e6       	ldi	r24, 0x63	; 99
    503e:	94 e0       	ldi	r25, 0x04	; 4
    5040:	93 83       	std	Z+3, r25	; 0x03
    5042:	82 83       	std	Z+2, r24	; 0x02
    5044:	35 83       	std	Z+5, r19	; 0x05
    5046:	24 83       	std	Z+4, r18	; 0x04
    5048:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    504c:	2d b7       	in	r18, 0x3d	; 61
    504e:	3e b7       	in	r19, 0x3e	; 62
    5050:	2a 5f       	subi	r18, 0xFA	; 250
    5052:	3f 4f       	sbci	r19, 0xFF	; 255
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	f8 94       	cli
    5058:	3e bf       	out	0x3e, r19	; 62
    505a:	0f be       	out	0x3f, r0	; 63
    505c:	2d bf       	out	0x3d, r18	; 61
              uartPuts(s);
    505e:	ce 01       	movw	r24, r28
    5060:	8e 59       	subi	r24, 0x9E	; 158
    5062:	9c 4f       	sbci	r25, 0xFC	; 252
    5064:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    5068:	23 c1       	rjmp	.+582    	; 0x52b0 <main+0x3604>
            }
            break;
          }
          break;
        case 'M':
          switch (uart_string[2])
    506a:	80 91 bb 00 	lds	r24, 0x00BB
    506e:	e8 2f       	mov	r30, r24
    5070:	f0 e0       	ldi	r31, 0x00	; 0
    5072:	c2 5d       	subi	r28, 0xD2	; 210
    5074:	db 4f       	sbci	r29, 0xFB	; 251
    5076:	f9 83       	std	Y+1, r31	; 0x01
    5078:	e8 83       	st	Y, r30
    507a:	ce 52       	subi	r28, 0x2E	; 46
    507c:	d4 40       	sbci	r29, 0x04	; 4
    507e:	c2 5d       	subi	r28, 0xD2	; 210
    5080:	db 4f       	sbci	r29, 0xFB	; 251
    5082:	28 81       	ld	r18, Y
    5084:	39 81       	ldd	r19, Y+1	; 0x01
    5086:	ce 52       	subi	r28, 0x2E	; 46
    5088:	d4 40       	sbci	r29, 0x04	; 4
    508a:	2b 32       	cpi	r18, 0x2B	; 43
    508c:	31 05       	cpc	r19, r1
    508e:	51 f0       	breq	.+20     	; 0x50a4 <main+0x33f8>
    5090:	c2 5d       	subi	r28, 0xD2	; 210
    5092:	db 4f       	sbci	r29, 0xFB	; 251
    5094:	88 81       	ld	r24, Y
    5096:	99 81       	ldd	r25, Y+1	; 0x01
    5098:	ce 52       	subi	r28, 0x2E	; 46
    509a:	d4 40       	sbci	r29, 0x04	; 4
    509c:	8d 32       	cpi	r24, 0x2D	; 45
    509e:	91 05       	cpc	r25, r1
    50a0:	01 f1       	breq	.+64     	; 0x50e2 <main+0x3436>
    50a2:	3e c0       	rjmp	.+124    	; 0x5120 <main+0x3474>
          {
          case '+':
            {
              int res = i2c_rtc_read(&time, 0);
    50a4:	ce 01       	movw	r24, r28
    50a6:	85 55       	subi	r24, 0x55	; 85
    50a8:	9d 4f       	sbci	r25, 0xFD	; 253
    50aa:	60 e0       	ldi	r22, 0x00	; 0
    50ac:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    50b0:	fe 01       	movw	r30, r28
    50b2:	e7 5a       	subi	r30, 0xA7	; 167
    50b4:	fd 4f       	sbci	r31, 0xFD	; 253
    50b6:	88 2f       	mov	r24, r24
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	91 83       	std	Z+1, r25	; 0x01
    50bc:	80 83       	st	Z, r24
              add_month(&time);
    50be:	ce 01       	movw	r24, r28
    50c0:	85 55       	subi	r24, 0x55	; 85
    50c2:	9d 4f       	sbci	r25, 0xFD	; 253
    50c4:	0e 94 3a 03 	call	0x674	; 0x674 <add_month>
              res = i2c_rtc_write(&time);
    50c8:	ce 01       	movw	r24, r28
    50ca:	85 55       	subi	r24, 0x55	; 85
    50cc:	9d 4f       	sbci	r25, 0xFD	; 253
    50ce:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    50d2:	fe 01       	movw	r30, r28
    50d4:	e7 5a       	subi	r30, 0xA7	; 167
    50d6:	fd 4f       	sbci	r31, 0xFD	; 253
    50d8:	88 2f       	mov	r24, r24
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	91 83       	std	Z+1, r25	; 0x01
    50de:	80 83       	st	Z, r24
    50e0:	e7 c0       	rjmp	.+462    	; 0x52b0 <main+0x3604>
            }
            break;
          case '-':
            {
              int res = i2c_rtc_read(&time, 0);
    50e2:	ce 01       	movw	r24, r28
    50e4:	85 55       	subi	r24, 0x55	; 85
    50e6:	9d 4f       	sbci	r25, 0xFD	; 253
    50e8:	60 e0       	ldi	r22, 0x00	; 0
    50ea:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    50ee:	fe 01       	movw	r30, r28
    50f0:	e9 5a       	subi	r30, 0xA9	; 169
    50f2:	fd 4f       	sbci	r31, 0xFD	; 253
    50f4:	88 2f       	mov	r24, r24
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	91 83       	std	Z+1, r25	; 0x01
    50fa:	80 83       	st	Z, r24
              sub_month(&time);
    50fc:	ce 01       	movw	r24, r28
    50fe:	85 55       	subi	r24, 0x55	; 85
    5100:	9d 4f       	sbci	r25, 0xFD	; 253
    5102:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <sub_month>
              res = i2c_rtc_write(&time);
    5106:	ce 01       	movw	r24, r28
    5108:	85 55       	subi	r24, 0x55	; 85
    510a:	9d 4f       	sbci	r25, 0xFD	; 253
    510c:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    5110:	fe 01       	movw	r30, r28
    5112:	e9 5a       	subi	r30, 0xA9	; 169
    5114:	fd 4f       	sbci	r31, 0xFD	; 253
    5116:	88 2f       	mov	r24, r24
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	91 83       	std	Z+1, r25	; 0x01
    511c:	80 83       	st	Z, r24
    511e:	c8 c0       	rjmp	.+400    	; 0x52b0 <main+0x3604>
            }
            break;
          default:
            {
              char s[100];
              sprintf(s, "M macht keinen sinn mit '%c'...\r\n", uart_string[2]);
    5120:	80 91 bb 00 	lds	r24, 0x00BB
    5124:	28 2f       	mov	r18, r24
    5126:	30 e0       	ldi	r19, 0x00	; 0
    5128:	00 d0       	rcall	.+0      	; 0x512a <main+0x347e>
    512a:	00 d0       	rcall	.+0      	; 0x512c <main+0x3480>
    512c:	00 d0       	rcall	.+0      	; 0x512e <main+0x3482>
    512e:	ed b7       	in	r30, 0x3d	; 61
    5130:	fe b7       	in	r31, 0x3e	; 62
    5132:	31 96       	adiw	r30, 0x01	; 1
    5134:	ce 01       	movw	r24, r28
    5136:	8e 59       	subi	r24, 0x9E	; 158
    5138:	9c 4f       	sbci	r25, 0xFC	; 252
    513a:	91 83       	std	Z+1, r25	; 0x01
    513c:	80 83       	st	Z, r24
    513e:	85 e8       	ldi	r24, 0x85	; 133
    5140:	94 e0       	ldi	r25, 0x04	; 4
    5142:	93 83       	std	Z+3, r25	; 0x03
    5144:	82 83       	std	Z+2, r24	; 0x02
    5146:	35 83       	std	Z+5, r19	; 0x05
    5148:	24 83       	std	Z+4, r18	; 0x04
    514a:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    514e:	ed b7       	in	r30, 0x3d	; 61
    5150:	fe b7       	in	r31, 0x3e	; 62
    5152:	36 96       	adiw	r30, 0x06	; 6
    5154:	0f b6       	in	r0, 0x3f	; 63
    5156:	f8 94       	cli
    5158:	fe bf       	out	0x3e, r31	; 62
    515a:	0f be       	out	0x3f, r0	; 63
    515c:	ed bf       	out	0x3d, r30	; 61
              uartPuts(s);
    515e:	ce 01       	movw	r24, r28
    5160:	8e 59       	subi	r24, 0x9E	; 158
    5162:	9c 4f       	sbci	r25, 0xFC	; 252
    5164:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    5168:	a3 c0       	rjmp	.+326    	; 0x52b0 <main+0x3604>
            }
            break;
          }
          break;
        case 'Y':
          switch (uart_string[2])
    516a:	80 91 bb 00 	lds	r24, 0x00BB
    516e:	28 2f       	mov	r18, r24
    5170:	30 e0       	ldi	r19, 0x00	; 0
    5172:	c4 5d       	subi	r28, 0xD4	; 212
    5174:	db 4f       	sbci	r29, 0xFB	; 251
    5176:	39 83       	std	Y+1, r19	; 0x01
    5178:	28 83       	st	Y, r18
    517a:	cc 52       	subi	r28, 0x2C	; 44
    517c:	d4 40       	sbci	r29, 0x04	; 4
    517e:	c4 5d       	subi	r28, 0xD4	; 212
    5180:	db 4f       	sbci	r29, 0xFB	; 251
    5182:	88 81       	ld	r24, Y
    5184:	99 81       	ldd	r25, Y+1	; 0x01
    5186:	cc 52       	subi	r28, 0x2C	; 44
    5188:	d4 40       	sbci	r29, 0x04	; 4
    518a:	8b 32       	cpi	r24, 0x2B	; 43
    518c:	91 05       	cpc	r25, r1
    518e:	51 f0       	breq	.+20     	; 0x51a4 <main+0x34f8>
    5190:	c4 5d       	subi	r28, 0xD4	; 212
    5192:	db 4f       	sbci	r29, 0xFB	; 251
    5194:	e8 81       	ld	r30, Y
    5196:	f9 81       	ldd	r31, Y+1	; 0x01
    5198:	cc 52       	subi	r28, 0x2C	; 44
    519a:	d4 40       	sbci	r29, 0x04	; 4
    519c:	ed 32       	cpi	r30, 0x2D	; 45
    519e:	f1 05       	cpc	r31, r1
    51a0:	01 f1       	breq	.+64     	; 0x51e2 <main+0x3536>
    51a2:	3e c0       	rjmp	.+124    	; 0x5220 <main+0x3574>
          {
          case '+':
            {
              int res = i2c_rtc_read(&time, 0);
    51a4:	ce 01       	movw	r24, r28
    51a6:	85 55       	subi	r24, 0x55	; 85
    51a8:	9d 4f       	sbci	r25, 0xFD	; 253
    51aa:	60 e0       	ldi	r22, 0x00	; 0
    51ac:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    51b0:	fe 01       	movw	r30, r28
    51b2:	eb 5a       	subi	r30, 0xAB	; 171
    51b4:	fd 4f       	sbci	r31, 0xFD	; 253
    51b6:	88 2f       	mov	r24, r24
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	91 83       	std	Z+1, r25	; 0x01
    51bc:	80 83       	st	Z, r24
              add_year(&time);
    51be:	ce 01       	movw	r24, r28
    51c0:	85 55       	subi	r24, 0x55	; 85
    51c2:	9d 4f       	sbci	r25, 0xFD	; 253
    51c4:	0e 94 14 03 	call	0x628	; 0x628 <add_year>
              res = i2c_rtc_write(&time);
    51c8:	ce 01       	movw	r24, r28
    51ca:	85 55       	subi	r24, 0x55	; 85
    51cc:	9d 4f       	sbci	r25, 0xFD	; 253
    51ce:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    51d2:	fe 01       	movw	r30, r28
    51d4:	eb 5a       	subi	r30, 0xAB	; 171
    51d6:	fd 4f       	sbci	r31, 0xFD	; 253
    51d8:	88 2f       	mov	r24, r24
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	91 83       	std	Z+1, r25	; 0x01
    51de:	80 83       	st	Z, r24
    51e0:	67 c0       	rjmp	.+206    	; 0x52b0 <main+0x3604>
            }
            break;
          case '-':
            {
              int res = i2c_rtc_read(&time, 0);
    51e2:	ce 01       	movw	r24, r28
    51e4:	85 55       	subi	r24, 0x55	; 85
    51e6:	9d 4f       	sbci	r25, 0xFD	; 253
    51e8:	60 e0       	ldi	r22, 0x00	; 0
    51ea:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    51ee:	fe 01       	movw	r30, r28
    51f0:	ed 5a       	subi	r30, 0xAD	; 173
    51f2:	fd 4f       	sbci	r31, 0xFD	; 253
    51f4:	88 2f       	mov	r24, r24
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	91 83       	std	Z+1, r25	; 0x01
    51fa:	80 83       	st	Z, r24
              sub_year(&time);
    51fc:	ce 01       	movw	r24, r28
    51fe:	85 55       	subi	r24, 0x55	; 85
    5200:	9d 4f       	sbci	r25, 0xFD	; 253
    5202:	0e 94 27 03 	call	0x64e	; 0x64e <sub_year>
              res = i2c_rtc_write(&time);
    5206:	ce 01       	movw	r24, r28
    5208:	85 55       	subi	r24, 0x55	; 85
    520a:	9d 4f       	sbci	r25, 0xFD	; 253
    520c:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    5210:	fe 01       	movw	r30, r28
    5212:	ed 5a       	subi	r30, 0xAD	; 173
    5214:	fd 4f       	sbci	r31, 0xFD	; 253
    5216:	88 2f       	mov	r24, r24
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	91 83       	std	Z+1, r25	; 0x01
    521c:	80 83       	st	Z, r24
    521e:	48 c0       	rjmp	.+144    	; 0x52b0 <main+0x3604>
            }
            break;
          default:
            {
              char s[100];
              sprintf(s, "Y macht keinen sinn mit '%c'...\r\n", uart_string[2]);
    5220:	80 91 bb 00 	lds	r24, 0x00BB
    5224:	28 2f       	mov	r18, r24
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	00 d0       	rcall	.+0      	; 0x522a <main+0x357e>
    522a:	00 d0       	rcall	.+0      	; 0x522c <main+0x3580>
    522c:	00 d0       	rcall	.+0      	; 0x522e <main+0x3582>
    522e:	ed b7       	in	r30, 0x3d	; 61
    5230:	fe b7       	in	r31, 0x3e	; 62
    5232:	31 96       	adiw	r30, 0x01	; 1
    5234:	ce 01       	movw	r24, r28
    5236:	8e 59       	subi	r24, 0x9E	; 158
    5238:	9c 4f       	sbci	r25, 0xFC	; 252
    523a:	91 83       	std	Z+1, r25	; 0x01
    523c:	80 83       	st	Z, r24
    523e:	87 ea       	ldi	r24, 0xA7	; 167
    5240:	94 e0       	ldi	r25, 0x04	; 4
    5242:	93 83       	std	Z+3, r25	; 0x03
    5244:	82 83       	std	Z+2, r24	; 0x02
    5246:	35 83       	std	Z+5, r19	; 0x05
    5248:	24 83       	std	Z+4, r18	; 0x04
    524a:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    524e:	2d b7       	in	r18, 0x3d	; 61
    5250:	3e b7       	in	r19, 0x3e	; 62
    5252:	2a 5f       	subi	r18, 0xFA	; 250
    5254:	3f 4f       	sbci	r19, 0xFF	; 255
    5256:	0f b6       	in	r0, 0x3f	; 63
    5258:	f8 94       	cli
    525a:	3e bf       	out	0x3e, r19	; 62
    525c:	0f be       	out	0x3f, r0	; 63
    525e:	2d bf       	out	0x3d, r18	; 61
              uartPuts(s);
    5260:	ce 01       	movw	r24, r28
    5262:	8e 59       	subi	r24, 0x9E	; 158
    5264:	9c 4f       	sbci	r25, 0xFC	; 252
    5266:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
    526a:	22 c0       	rjmp	.+68     	; 0x52b0 <main+0x3604>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "was soll ich mit '%s' anfangen?\r\n", uart_string);
    526c:	00 d0       	rcall	.+0      	; 0x526e <main+0x35c2>
    526e:	00 d0       	rcall	.+0      	; 0x5270 <main+0x35c4>
    5270:	00 d0       	rcall	.+0      	; 0x5272 <main+0x35c6>
    5272:	ed b7       	in	r30, 0x3d	; 61
    5274:	fe b7       	in	r31, 0x3e	; 62
    5276:	31 96       	adiw	r30, 0x01	; 1
    5278:	ce 01       	movw	r24, r28
    527a:	8e 59       	subi	r24, 0x9E	; 158
    527c:	9c 4f       	sbci	r25, 0xFC	; 252
    527e:	91 83       	std	Z+1, r25	; 0x01
    5280:	80 83       	st	Z, r24
    5282:	89 ec       	ldi	r24, 0xC9	; 201
    5284:	94 e0       	ldi	r25, 0x04	; 4
    5286:	93 83       	std	Z+3, r25	; 0x03
    5288:	82 83       	std	Z+2, r24	; 0x02
    528a:	89 eb       	ldi	r24, 0xB9	; 185
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	95 83       	std	Z+5, r25	; 0x05
    5290:	84 83       	std	Z+4, r24	; 0x04
    5292:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    5296:	8d b7       	in	r24, 0x3d	; 61
    5298:	9e b7       	in	r25, 0x3e	; 62
    529a:	06 96       	adiw	r24, 0x06	; 6
    529c:	0f b6       	in	r0, 0x3f	; 63
    529e:	f8 94       	cli
    52a0:	9e bf       	out	0x3e, r25	; 62
    52a2:	0f be       	out	0x3f, r0	; 63
    52a4:	8d bf       	out	0x3d, r24	; 61
            uartPuts(s);
    52a6:	ce 01       	movw	r24, r28
    52a8:	8e 59       	subi	r24, 0x9E	; 158
    52aa:	9c 4f       	sbci	r25, 0xFC	; 252
    52ac:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>

          }
        }
      }
      int res1 = i2c_rtc_read(&time, 1);
    52b0:	ce 01       	movw	r24, r28
    52b2:	85 55       	subi	r24, 0x55	; 85
    52b4:	9d 4f       	sbci	r25, 0xFD	; 253
    52b6:	61 e0       	ldi	r22, 0x01	; 1
    52b8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    52bc:	fe 01       	movw	r30, r28
    52be:	ed 57       	subi	r30, 0x7D	; 125
    52c0:	fd 4f       	sbci	r31, 0xFD	; 253
    52c2:	88 2f       	mov	r24, r24
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	91 83       	std	Z+1, r25	; 0x01
    52c8:	80 83       	st	Z, r24
      int res2 = i2c_rtc_read(&utctime, 0);
    52ca:	ce 01       	movw	r24, r28
    52cc:	88 54       	subi	r24, 0x48	; 72
    52ce:	9d 4f       	sbci	r25, 0xFD	; 253
    52d0:	60 e0       	ldi	r22, 0x00	; 0
    52d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    52d6:	fe 01       	movw	r30, r28
    52d8:	ef 57       	subi	r30, 0x7F	; 127
    52da:	fd 4f       	sbci	r31, 0xFD	; 253
    52dc:	88 2f       	mov	r24, r24
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	91 83       	std	Z+1, r25	; 0x01
    52e2:	80 83       	st	Z, r24
      if (!res1 || !res2)
    52e4:	fe 01       	movw	r30, r28
    52e6:	ed 57       	subi	r30, 0x7D	; 125
    52e8:	fd 4f       	sbci	r31, 0xFD	; 253
    52ea:	80 81       	ld	r24, Z
    52ec:	91 81       	ldd	r25, Z+1	; 0x01
    52ee:	00 97       	sbiw	r24, 0x00	; 0
    52f0:	41 f0       	breq	.+16     	; 0x5302 <main+0x3656>
    52f2:	fe 01       	movw	r30, r28
    52f4:	ef 57       	subi	r30, 0x7F	; 127
    52f6:	fd 4f       	sbci	r31, 0xFD	; 253
    52f8:	80 81       	ld	r24, Z
    52fa:	91 81       	ldd	r25, Z+1	; 0x01
    52fc:	00 97       	sbiw	r24, 0x00	; 0
    52fe:	09 f0       	breq	.+2      	; 0x5302 <main+0x3656>
    5300:	1c c1       	rjmp	.+568    	; 0x553a <main+0x388e>
      {
        uartPuts("RTC error\r\n");
    5302:	8b ee       	ldi	r24, 0xEB	; 235
    5304:	94 e0       	ldi	r25, 0x04	; 4
    5306:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
        for (uiCount = 0; uiCount < 40; uiCount++)
    530a:	fe 01       	movw	r30, r28
    530c:	ef 55       	subi	r30, 0x5F	; 95
    530e:	fd 4f       	sbci	r31, 0xFD	; 253
    5310:	10 82       	st	Z, r1
    5312:	11 82       	std	Z+1, r1	; 0x01
    5314:	12 82       	std	Z+2, r1	; 0x02
    5316:	13 82       	std	Z+3, r1	; 0x03
    5318:	02 c1       	rjmp	.+516    	; 0x551e <main+0x3872>
        {
          SetColor(0x01, 0x01, 0x01, 0x01);
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	61 e0       	ldi	r22, 0x01	; 1
    531e:	41 e0       	ldi	r20, 0x01	; 1
    5320:	21 e0       	ldi	r18, 0x01	; 1
    5322:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    5326:	80 e0       	ldi	r24, 0x00	; 0
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	a8 e4       	ldi	r26, 0x48	; 72
    532c:	b2 e4       	ldi	r27, 0x42	; 66
    532e:	8d ab       	std	Y+53, r24	; 0x35
    5330:	9e ab       	std	Y+54, r25	; 0x36
    5332:	af ab       	std	Y+55, r26	; 0x37
    5334:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5336:	6d a9       	ldd	r22, Y+53	; 0x35
    5338:	7e a9       	ldd	r23, Y+54	; 0x36
    533a:	8f a9       	ldd	r24, Y+55	; 0x37
    533c:	98 ad       	ldd	r25, Y+56	; 0x38
    533e:	26 e6       	ldi	r18, 0x66	; 102
    5340:	36 e6       	ldi	r19, 0x66	; 102
    5342:	46 e6       	ldi	r20, 0x66	; 102
    5344:	55 e4       	ldi	r21, 0x45	; 69
    5346:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    534a:	dc 01       	movw	r26, r24
    534c:	cb 01       	movw	r24, r22
    534e:	89 ab       	std	Y+49, r24	; 0x31
    5350:	9a ab       	std	Y+50, r25	; 0x32
    5352:	ab ab       	std	Y+51, r26	; 0x33
    5354:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5356:	69 a9       	ldd	r22, Y+49	; 0x31
    5358:	7a a9       	ldd	r23, Y+50	; 0x32
    535a:	8b a9       	ldd	r24, Y+51	; 0x33
    535c:	9c a9       	ldd	r25, Y+52	; 0x34
    535e:	20 e0       	ldi	r18, 0x00	; 0
    5360:	30 e0       	ldi	r19, 0x00	; 0
    5362:	40 e8       	ldi	r20, 0x80	; 128
    5364:	5f e3       	ldi	r21, 0x3F	; 63
    5366:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    536a:	88 23       	and	r24, r24
    536c:	2c f4       	brge	.+10     	; 0x5378 <main+0x36cc>
		__ticks = 1;
    536e:	81 e0       	ldi	r24, 0x01	; 1
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	98 ab       	std	Y+48, r25	; 0x30
    5374:	8f a7       	std	Y+47, r24	; 0x2f
    5376:	3f c0       	rjmp	.+126    	; 0x53f6 <main+0x374a>
	else if (__tmp > 65535)
    5378:	69 a9       	ldd	r22, Y+49	; 0x31
    537a:	7a a9       	ldd	r23, Y+50	; 0x32
    537c:	8b a9       	ldd	r24, Y+51	; 0x33
    537e:	9c a9       	ldd	r25, Y+52	; 0x34
    5380:	20 e0       	ldi	r18, 0x00	; 0
    5382:	3f ef       	ldi	r19, 0xFF	; 255
    5384:	4f e7       	ldi	r20, 0x7F	; 127
    5386:	57 e4       	ldi	r21, 0x47	; 71
    5388:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    538c:	18 16       	cp	r1, r24
    538e:	4c f5       	brge	.+82     	; 0x53e2 <main+0x3736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5390:	6d a9       	ldd	r22, Y+53	; 0x35
    5392:	7e a9       	ldd	r23, Y+54	; 0x36
    5394:	8f a9       	ldd	r24, Y+55	; 0x37
    5396:	98 ad       	ldd	r25, Y+56	; 0x38
    5398:	20 e0       	ldi	r18, 0x00	; 0
    539a:	30 e0       	ldi	r19, 0x00	; 0
    539c:	40 e2       	ldi	r20, 0x20	; 32
    539e:	51 e4       	ldi	r21, 0x41	; 65
    53a0:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    53a4:	dc 01       	movw	r26, r24
    53a6:	cb 01       	movw	r24, r22
    53a8:	bc 01       	movw	r22, r24
    53aa:	cd 01       	movw	r24, r26
    53ac:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    53b0:	dc 01       	movw	r26, r24
    53b2:	cb 01       	movw	r24, r22
    53b4:	98 ab       	std	Y+48, r25	; 0x30
    53b6:	8f a7       	std	Y+47, r24	; 0x2f
    53b8:	0f c0       	rjmp	.+30     	; 0x53d8 <main+0x372c>
    53ba:	80 e7       	ldi	r24, 0x70	; 112
    53bc:	91 e0       	ldi	r25, 0x01	; 1
    53be:	9e a7       	std	Y+46, r25	; 0x2e
    53c0:	8d a7       	std	Y+45, r24	; 0x2d
    53c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    53c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    53c6:	01 97       	sbiw	r24, 0x01	; 1
    53c8:	f1 f7       	brne	.-4      	; 0x53c6 <main+0x371a>
    53ca:	9e a7       	std	Y+46, r25	; 0x2e
    53cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    53d0:	98 a9       	ldd	r25, Y+48	; 0x30
    53d2:	01 97       	sbiw	r24, 0x01	; 1
    53d4:	98 ab       	std	Y+48, r25	; 0x30
    53d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    53da:	98 a9       	ldd	r25, Y+48	; 0x30
    53dc:	00 97       	sbiw	r24, 0x00	; 0
    53de:	69 f7       	brne	.-38     	; 0x53ba <main+0x370e>
    53e0:	14 c0       	rjmp	.+40     	; 0x540a <main+0x375e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53e2:	69 a9       	ldd	r22, Y+49	; 0x31
    53e4:	7a a9       	ldd	r23, Y+50	; 0x32
    53e6:	8b a9       	ldd	r24, Y+51	; 0x33
    53e8:	9c a9       	ldd	r25, Y+52	; 0x34
    53ea:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    53ee:	dc 01       	movw	r26, r24
    53f0:	cb 01       	movw	r24, r22
    53f2:	98 ab       	std	Y+48, r25	; 0x30
    53f4:	8f a7       	std	Y+47, r24	; 0x2f
    53f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    53f8:	98 a9       	ldd	r25, Y+48	; 0x30
    53fa:	9c a7       	std	Y+44, r25	; 0x2c
    53fc:	8b a7       	std	Y+43, r24	; 0x2b
    53fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    5400:	9c a5       	ldd	r25, Y+44	; 0x2c
    5402:	01 97       	sbiw	r24, 0x01	; 1
    5404:	f1 f7       	brne	.-4      	; 0x5402 <main+0x3756>
    5406:	9c a7       	std	Y+44, r25	; 0x2c
    5408:	8b a7       	std	Y+43, r24	; 0x2b
          _delay_ms(50);
          SetColor(0xff, 0xff, 0xff, 0xff);
    540a:	8f ef       	ldi	r24, 0xFF	; 255
    540c:	6f ef       	ldi	r22, 0xFF	; 255
    540e:	4f ef       	ldi	r20, 0xFF	; 255
    5410:	2f ef       	ldi	r18, 0xFF	; 255
    5412:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	a8 e4       	ldi	r26, 0x48	; 72
    541c:	b2 e4       	ldi	r27, 0x42	; 66
    541e:	8f a3       	std	Y+39, r24	; 0x27
    5420:	98 a7       	std	Y+40, r25	; 0x28
    5422:	a9 a7       	std	Y+41, r26	; 0x29
    5424:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5426:	6f a1       	ldd	r22, Y+39	; 0x27
    5428:	78 a5       	ldd	r23, Y+40	; 0x28
    542a:	89 a5       	ldd	r24, Y+41	; 0x29
    542c:	9a a5       	ldd	r25, Y+42	; 0x2a
    542e:	26 e6       	ldi	r18, 0x66	; 102
    5430:	36 e6       	ldi	r19, 0x66	; 102
    5432:	46 e6       	ldi	r20, 0x66	; 102
    5434:	55 e4       	ldi	r21, 0x45	; 69
    5436:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    543a:	dc 01       	movw	r26, r24
    543c:	cb 01       	movw	r24, r22
    543e:	8b a3       	std	Y+35, r24	; 0x23
    5440:	9c a3       	std	Y+36, r25	; 0x24
    5442:	ad a3       	std	Y+37, r26	; 0x25
    5444:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5446:	6b a1       	ldd	r22, Y+35	; 0x23
    5448:	7c a1       	ldd	r23, Y+36	; 0x24
    544a:	8d a1       	ldd	r24, Y+37	; 0x25
    544c:	9e a1       	ldd	r25, Y+38	; 0x26
    544e:	20 e0       	ldi	r18, 0x00	; 0
    5450:	30 e0       	ldi	r19, 0x00	; 0
    5452:	40 e8       	ldi	r20, 0x80	; 128
    5454:	5f e3       	ldi	r21, 0x3F	; 63
    5456:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    545a:	88 23       	and	r24, r24
    545c:	2c f4       	brge	.+10     	; 0x5468 <main+0x37bc>
		__ticks = 1;
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	9a a3       	std	Y+34, r25	; 0x22
    5464:	89 a3       	std	Y+33, r24	; 0x21
    5466:	3f c0       	rjmp	.+126    	; 0x54e6 <main+0x383a>
	else if (__tmp > 65535)
    5468:	6b a1       	ldd	r22, Y+35	; 0x23
    546a:	7c a1       	ldd	r23, Y+36	; 0x24
    546c:	8d a1       	ldd	r24, Y+37	; 0x25
    546e:	9e a1       	ldd	r25, Y+38	; 0x26
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	3f ef       	ldi	r19, 0xFF	; 255
    5474:	4f e7       	ldi	r20, 0x7F	; 127
    5476:	57 e4       	ldi	r21, 0x47	; 71
    5478:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    547c:	18 16       	cp	r1, r24
    547e:	4c f5       	brge	.+82     	; 0x54d2 <main+0x3826>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5480:	6f a1       	ldd	r22, Y+39	; 0x27
    5482:	78 a5       	ldd	r23, Y+40	; 0x28
    5484:	89 a5       	ldd	r24, Y+41	; 0x29
    5486:	9a a5       	ldd	r25, Y+42	; 0x2a
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	40 e2       	ldi	r20, 0x20	; 32
    548e:	51 e4       	ldi	r21, 0x41	; 65
    5490:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	bc 01       	movw	r22, r24
    549a:	cd 01       	movw	r24, r26
    549c:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    54a0:	dc 01       	movw	r26, r24
    54a2:	cb 01       	movw	r24, r22
    54a4:	9a a3       	std	Y+34, r25	; 0x22
    54a6:	89 a3       	std	Y+33, r24	; 0x21
    54a8:	0f c0       	rjmp	.+30     	; 0x54c8 <main+0x381c>
    54aa:	80 e7       	ldi	r24, 0x70	; 112
    54ac:	91 e0       	ldi	r25, 0x01	; 1
    54ae:	98 a3       	std	Y+32, r25	; 0x20
    54b0:	8f 8f       	std	Y+31, r24	; 0x1f
    54b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    54b4:	98 a1       	ldd	r25, Y+32	; 0x20
    54b6:	01 97       	sbiw	r24, 0x01	; 1
    54b8:	f1 f7       	brne	.-4      	; 0x54b6 <main+0x380a>
    54ba:	98 a3       	std	Y+32, r25	; 0x20
    54bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54be:	89 a1       	ldd	r24, Y+33	; 0x21
    54c0:	9a a1       	ldd	r25, Y+34	; 0x22
    54c2:	01 97       	sbiw	r24, 0x01	; 1
    54c4:	9a a3       	std	Y+34, r25	; 0x22
    54c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54c8:	89 a1       	ldd	r24, Y+33	; 0x21
    54ca:	9a a1       	ldd	r25, Y+34	; 0x22
    54cc:	00 97       	sbiw	r24, 0x00	; 0
    54ce:	69 f7       	brne	.-38     	; 0x54aa <main+0x37fe>
    54d0:	14 c0       	rjmp	.+40     	; 0x54fa <main+0x384e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54d2:	6b a1       	ldd	r22, Y+35	; 0x23
    54d4:	7c a1       	ldd	r23, Y+36	; 0x24
    54d6:	8d a1       	ldd	r24, Y+37	; 0x25
    54d8:	9e a1       	ldd	r25, Y+38	; 0x26
    54da:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	9a a3       	std	Y+34, r25	; 0x22
    54e4:	89 a3       	std	Y+33, r24	; 0x21
    54e6:	89 a1       	ldd	r24, Y+33	; 0x21
    54e8:	9a a1       	ldd	r25, Y+34	; 0x22
    54ea:	9e 8f       	std	Y+30, r25	; 0x1e
    54ec:	8d 8f       	std	Y+29, r24	; 0x1d
    54ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    54f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    54f2:	01 97       	sbiw	r24, 0x01	; 1
    54f4:	f1 f7       	brne	.-4      	; 0x54f2 <main+0x3846>
    54f6:	9e 8f       	std	Y+30, r25	; 0x1e
    54f8:	8d 8f       	std	Y+29, r24	; 0x1d
      int res1 = i2c_rtc_read(&time, 1);
      int res2 = i2c_rtc_read(&utctime, 0);
      if (!res1 || !res2)
      {
        uartPuts("RTC error\r\n");
        for (uiCount = 0; uiCount < 40; uiCount++)
    54fa:	9e 01       	movw	r18, r28
    54fc:	2f 55       	subi	r18, 0x5F	; 95
    54fe:	3d 4f       	sbci	r19, 0xFD	; 253
    5500:	fe 01       	movw	r30, r28
    5502:	ef 55       	subi	r30, 0x5F	; 95
    5504:	fd 4f       	sbci	r31, 0xFD	; 253
    5506:	80 81       	ld	r24, Z
    5508:	91 81       	ldd	r25, Z+1	; 0x01
    550a:	a2 81       	ldd	r26, Z+2	; 0x02
    550c:	b3 81       	ldd	r27, Z+3	; 0x03
    550e:	01 96       	adiw	r24, 0x01	; 1
    5510:	a1 1d       	adc	r26, r1
    5512:	b1 1d       	adc	r27, r1
    5514:	f9 01       	movw	r30, r18
    5516:	80 83       	st	Z, r24
    5518:	91 83       	std	Z+1, r25	; 0x01
    551a:	a2 83       	std	Z+2, r26	; 0x02
    551c:	b3 83       	std	Z+3, r27	; 0x03
    551e:	fe 01       	movw	r30, r28
    5520:	ef 55       	subi	r30, 0x5F	; 95
    5522:	fd 4f       	sbci	r31, 0xFD	; 253
    5524:	80 81       	ld	r24, Z
    5526:	91 81       	ldd	r25, Z+1	; 0x01
    5528:	a2 81       	ldd	r26, Z+2	; 0x02
    552a:	b3 81       	ldd	r27, Z+3	; 0x03
    552c:	88 32       	cpi	r24, 0x28	; 40
    552e:	91 05       	cpc	r25, r1
    5530:	a1 05       	cpc	r26, r1
    5532:	b1 05       	cpc	r27, r1
    5534:	0c f4       	brge	.+2      	; 0x5538 <main+0x388c>
    5536:	f1 ce       	rjmp	.-542    	; 0x531a <main+0x366e>
    5538:	ff cf       	rjmp	.-2      	; 0x5538 <main+0x388c>
          _delay_ms(50);
        }
        while (1)
          ;
      }
      TimeInfo(time, 1, 0);
    553a:	fe 01       	movw	r30, r28
    553c:	e5 55       	subi	r30, 0x55	; 85
    553e:	fd 4f       	sbci	r31, 0xFD	; 253
    5540:	c0 80       	ld	r12, Z
    5542:	d1 80       	ldd	r13, Z+1	; 0x01
    5544:	e2 80       	ldd	r14, Z+2	; 0x02
    5546:	f3 80       	ldd	r15, Z+3	; 0x03
    5548:	04 81       	ldd	r16, Z+4	; 0x04
    554a:	15 81       	ldd	r17, Z+5	; 0x05
    554c:	26 81       	ldd	r18, Z+6	; 0x06
    554e:	37 81       	ldd	r19, Z+7	; 0x07
    5550:	40 85       	ldd	r20, Z+8	; 0x08
    5552:	51 85       	ldd	r21, Z+9	; 0x09
    5554:	62 85       	ldd	r22, Z+10	; 0x0a
    5556:	73 85       	ldd	r23, Z+11	; 0x0b
    5558:	84 85       	ldd	r24, Z+12	; 0x0c
    555a:	aa 24       	eor	r10, r10
    555c:	bb 24       	eor	r11, r11
    555e:	a3 94       	inc	r10
    5560:	88 24       	eor	r8, r8
    5562:	99 24       	eor	r9, r9
    5564:	0e 94 22 0c 	call	0x1844	; 0x1844 <TimeInfo>
      uart_str_complete = 0;
    5568:	10 92 79 05 	sts	0x0579, r1
    }

    if (uiCount % 100)
    556c:	fe 01       	movw	r30, r28
    556e:	ef 55       	subi	r30, 0x5F	; 95
    5570:	fd 4f       	sbci	r31, 0xFD	; 253
    5572:	80 81       	ld	r24, Z
    5574:	91 81       	ldd	r25, Z+1	; 0x01
    5576:	a2 81       	ldd	r26, Z+2	; 0x02
    5578:	b3 81       	ldd	r27, Z+3	; 0x03
    557a:	24 e6       	ldi	r18, 0x64	; 100
    557c:	30 e0       	ldi	r19, 0x00	; 0
    557e:	40 e0       	ldi	r20, 0x00	; 0
    5580:	50 e0       	ldi	r21, 0x00	; 0
    5582:	bc 01       	movw	r22, r24
    5584:	cd 01       	movw	r24, r26
    5586:	0e 94 d3 3d 	call	0x7ba6	; 0x7ba6 <__divmodsi4>
    558a:	dc 01       	movw	r26, r24
    558c:	cb 01       	movw	r24, r22
    558e:	00 97       	sbiw	r24, 0x00	; 0
    5590:	a1 05       	cpc	r26, r1
    5592:	b1 05       	cpc	r27, r1
    5594:	11 f0       	breq	.+4      	; 0x559a <main+0x38ee>
    5596:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <main+0x176c>
      continue;
    }

    // ca. alle 100ms

    if (!(PINA & _BV(PA7)))
    559a:	e9 e3       	ldi	r30, 0x39	; 57
    559c:	f0 e0       	ldi	r31, 0x00	; 0
    559e:	80 81       	ld	r24, Z
    55a0:	88 23       	and	r24, r24
    55a2:	6c f0       	brlt	.+26     	; 0x55be <main+0x3912>
    {
      Button1++;
    55a4:	de 01       	movw	r26, r28
    55a6:	a1 56       	subi	r26, 0x61	; 97
    55a8:	bd 4f       	sbci	r27, 0xFD	; 253
    55aa:	fe 01       	movw	r30, r28
    55ac:	e1 56       	subi	r30, 0x61	; 97
    55ae:	fd 4f       	sbci	r31, 0xFD	; 253
    55b0:	80 81       	ld	r24, Z
    55b2:	91 81       	ldd	r25, Z+1	; 0x01
    55b4:	01 96       	adiw	r24, 0x01	; 1
    55b6:	11 96       	adiw	r26, 0x01	; 1
    55b8:	9c 93       	st	X, r25
    55ba:	8e 93       	st	-X, r24
    55bc:	05 c0       	rjmp	.+10     	; 0x55c8 <main+0x391c>
    }
    else
    {
      Button1 = 0;
    55be:	fe 01       	movw	r30, r28
    55c0:	e1 56       	subi	r30, 0x61	; 97
    55c2:	fd 4f       	sbci	r31, 0xFD	; 253
    55c4:	11 82       	std	Z+1, r1	; 0x01
    55c6:	10 82       	st	Z, r1
    }

    if (!(PINA & _BV(PA6)))
    55c8:	e9 e3       	ldi	r30, 0x39	; 57
    55ca:	f0 e0       	ldi	r31, 0x00	; 0
    55cc:	80 81       	ld	r24, Z
    55ce:	88 2f       	mov	r24, r24
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	80 74       	andi	r24, 0x40	; 64
    55d4:	90 70       	andi	r25, 0x00	; 0
    55d6:	00 97       	sbiw	r24, 0x00	; 0
    55d8:	69 f4       	brne	.+26     	; 0x55f4 <main+0x3948>
    {
      Button2++;
    55da:	de 01       	movw	r26, r28
    55dc:	a3 56       	subi	r26, 0x63	; 99
    55de:	bd 4f       	sbci	r27, 0xFD	; 253
    55e0:	fe 01       	movw	r30, r28
    55e2:	e3 56       	subi	r30, 0x63	; 99
    55e4:	fd 4f       	sbci	r31, 0xFD	; 253
    55e6:	80 81       	ld	r24, Z
    55e8:	91 81       	ldd	r25, Z+1	; 0x01
    55ea:	01 96       	adiw	r24, 0x01	; 1
    55ec:	11 96       	adiw	r26, 0x01	; 1
    55ee:	9c 93       	st	X, r25
    55f0:	8e 93       	st	-X, r24
    55f2:	05 c0       	rjmp	.+10     	; 0x55fe <main+0x3952>
    }
    else
    {
      Button2 = 0;
    55f4:	fe 01       	movw	r30, r28
    55f6:	e3 56       	subi	r30, 0x63	; 99
    55f8:	fd 4f       	sbci	r31, 0xFD	; 253
    55fa:	11 82       	std	Z+1, r1	; 0x01
    55fc:	10 82       	st	Z, r1
    }

    if (!(PINA & _BV(PA6)))
    55fe:	e9 e3       	ldi	r30, 0x39	; 57
    5600:	f0 e0       	ldi	r31, 0x00	; 0
    5602:	80 81       	ld	r24, Z
    5604:	88 2f       	mov	r24, r24
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	80 74       	andi	r24, 0x40	; 64
    560a:	90 70       	andi	r25, 0x00	; 0
    560c:	00 97       	sbiw	r24, 0x00	; 0
    560e:	69 f4       	brne	.+26     	; 0x562a <main+0x397e>
    {
      Button3++;
    5610:	de 01       	movw	r26, r28
    5612:	a5 56       	subi	r26, 0x65	; 101
    5614:	bd 4f       	sbci	r27, 0xFD	; 253
    5616:	fe 01       	movw	r30, r28
    5618:	e5 56       	subi	r30, 0x65	; 101
    561a:	fd 4f       	sbci	r31, 0xFD	; 253
    561c:	80 81       	ld	r24, Z
    561e:	91 81       	ldd	r25, Z+1	; 0x01
    5620:	01 96       	adiw	r24, 0x01	; 1
    5622:	11 96       	adiw	r26, 0x01	; 1
    5624:	9c 93       	st	X, r25
    5626:	8e 93       	st	-X, r24
    5628:	05 c0       	rjmp	.+10     	; 0x5634 <main+0x3988>
    }
    else
    {
      Button3 = 0;
    562a:	fe 01       	movw	r30, r28
    562c:	e5 56       	subi	r30, 0x65	; 101
    562e:	fd 4f       	sbci	r31, 0xFD	; 253
    5630:	11 82       	std	Z+1, r1	; 0x01
    5632:	10 82       	st	Z, r1
    }

    if (Button1 > 1)
    5634:	fe 01       	movw	r30, r28
    5636:	e1 56       	subi	r30, 0x61	; 97
    5638:	fd 4f       	sbci	r31, 0xFD	; 253
    563a:	80 81       	ld	r24, Z
    563c:	91 81       	ldd	r25, Z+1	; 0x01
    563e:	82 30       	cpi	r24, 0x02	; 2
    5640:	91 05       	cpc	r25, r1
    5642:	08 f4       	brcc	.+2      	; 0x5646 <main+0x399a>
    5644:	7b c0       	rjmp	.+246    	; 0x573c <main+0x3a90>
    {
      if (((Button1 + 10) % 12) == 0 || Button1 > 36)
    5646:	fe 01       	movw	r30, r28
    5648:	e1 56       	subi	r30, 0x61	; 97
    564a:	fd 4f       	sbci	r31, 0xFD	; 253
    564c:	80 81       	ld	r24, Z
    564e:	91 81       	ldd	r25, Z+1	; 0x01
    5650:	0a 96       	adiw	r24, 0x0a	; 10
    5652:	2c e0       	ldi	r18, 0x0C	; 12
    5654:	30 e0       	ldi	r19, 0x00	; 0
    5656:	b9 01       	movw	r22, r18
    5658:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <__udivmodhi4>
    565c:	00 97       	sbiw	r24, 0x00	; 0
    565e:	49 f0       	breq	.+18     	; 0x5672 <main+0x39c6>
    5660:	fe 01       	movw	r30, r28
    5662:	e1 56       	subi	r30, 0x61	; 97
    5664:	fd 4f       	sbci	r31, 0xFD	; 253
    5666:	80 81       	ld	r24, Z
    5668:	91 81       	ldd	r25, Z+1	; 0x01
    566a:	85 32       	cpi	r24, 0x25	; 37
    566c:	91 05       	cpc	r25, r1
    566e:	08 f4       	brcc	.+2      	; 0x5672 <main+0x39c6>
    5670:	65 c0       	rjmp	.+202    	; 0x573c <main+0x3a90>
      {
        uartPuts("Hour++\r\n");
    5672:	87 ef       	ldi	r24, 0xF7	; 247
    5674:	94 e0       	ldi	r25, 0x04	; 4
    5676:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
        int res = i2c_rtc_read(&time, 0);
    567a:	ce 01       	movw	r24, r28
    567c:	85 55       	subi	r24, 0x55	; 85
    567e:	9d 4f       	sbci	r25, 0xFD	; 253
    5680:	60 e0       	ldi	r22, 0x00	; 0
    5682:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    5686:	fe 01       	movw	r30, r28
    5688:	ef 5a       	subi	r30, 0xAF	; 175
    568a:	fd 4f       	sbci	r31, 0xFD	; 253
    568c:	88 2f       	mov	r24, r24
    568e:	90 e0       	ldi	r25, 0x00	; 0
    5690:	91 83       	std	Z+1, r25	; 0x01
    5692:	80 83       	st	Z, r24
        if (!res)
    5694:	fe 01       	movw	r30, r28
    5696:	ef 5a       	subi	r30, 0xAF	; 175
    5698:	fd 4f       	sbci	r31, 0xFD	; 253
    569a:	80 81       	ld	r24, Z
    569c:	91 81       	ldd	r25, Z+1	; 0x01
    569e:	00 97       	sbiw	r24, 0x00	; 0
    56a0:	09 f4       	brne	.+2      	; 0x56a4 <main+0x39f8>
    56a2:	ff cf       	rjmp	.-2      	; 0x56a2 <main+0x39f6>
        {
          while (1)
            ;
        }
        add_hour(&time);
    56a4:	ce 01       	movw	r24, r28
    56a6:	85 55       	subi	r24, 0x55	; 85
    56a8:	9d 4f       	sbci	r25, 0xFD	; 253
    56aa:	0e 94 54 04 	call	0x8a8	; 0x8a8 <add_hour>
        res = i2c_rtc_write(&time);
    56ae:	ce 01       	movw	r24, r28
    56b0:	85 55       	subi	r24, 0x55	; 85
    56b2:	9d 4f       	sbci	r25, 0xFD	; 253
    56b4:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
    56b8:	fe 01       	movw	r30, r28
    56ba:	ef 5a       	subi	r30, 0xAF	; 175
    56bc:	fd 4f       	sbci	r31, 0xFD	; 253
    56be:	88 2f       	mov	r24, r24
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	91 83       	std	Z+1, r25	; 0x01
    56c4:	80 83       	st	Z, r24
        char s[100];
        sprintf(s, "time : %02d:%02d:%02d\r\n", time.hh, time.mm, time.ss);
    56c6:	fe 01       	movw	r30, r28
    56c8:	e5 55       	subi	r30, 0x55	; 85
    56ca:	fd 4f       	sbci	r31, 0xFD	; 253
    56cc:	83 81       	ldd	r24, Z+3	; 0x03
    56ce:	48 2f       	mov	r20, r24
    56d0:	50 e0       	ldi	r21, 0x00	; 0
    56d2:	fe 01       	movw	r30, r28
    56d4:	e5 55       	subi	r30, 0x55	; 85
    56d6:	fd 4f       	sbci	r31, 0xFD	; 253
    56d8:	84 81       	ldd	r24, Z+4	; 0x04
    56da:	68 2f       	mov	r22, r24
    56dc:	70 e0       	ldi	r23, 0x00	; 0
    56de:	fe 01       	movw	r30, r28
    56e0:	e5 55       	subi	r30, 0x55	; 85
    56e2:	fd 4f       	sbci	r31, 0xFD	; 253
    56e4:	85 81       	ldd	r24, Z+5	; 0x05
    56e6:	28 2f       	mov	r18, r24
    56e8:	30 e0       	ldi	r19, 0x00	; 0
    56ea:	8d b7       	in	r24, 0x3d	; 61
    56ec:	9e b7       	in	r25, 0x3e	; 62
    56ee:	0a 97       	sbiw	r24, 0x0a	; 10
    56f0:	0f b6       	in	r0, 0x3f	; 63
    56f2:	f8 94       	cli
    56f4:	9e bf       	out	0x3e, r25	; 62
    56f6:	0f be       	out	0x3f, r0	; 63
    56f8:	8d bf       	out	0x3d, r24	; 61
    56fa:	ed b7       	in	r30, 0x3d	; 61
    56fc:	fe b7       	in	r31, 0x3e	; 62
    56fe:	31 96       	adiw	r30, 0x01	; 1
    5700:	ce 01       	movw	r24, r28
    5702:	8e 59       	subi	r24, 0x9E	; 158
    5704:	9c 4f       	sbci	r25, 0xFC	; 252
    5706:	91 83       	std	Z+1, r25	; 0x01
    5708:	80 83       	st	Z, r24
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	95 e0       	ldi	r25, 0x05	; 5
    570e:	93 83       	std	Z+3, r25	; 0x03
    5710:	82 83       	std	Z+2, r24	; 0x02
    5712:	55 83       	std	Z+5, r21	; 0x05
    5714:	44 83       	std	Z+4, r20	; 0x04
    5716:	77 83       	std	Z+7, r23	; 0x07
    5718:	66 83       	std	Z+6, r22	; 0x06
    571a:	31 87       	std	Z+9, r19	; 0x09
    571c:	20 87       	std	Z+8, r18	; 0x08
    571e:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    5722:	ed b7       	in	r30, 0x3d	; 61
    5724:	fe b7       	in	r31, 0x3e	; 62
    5726:	3a 96       	adiw	r30, 0x0a	; 10
    5728:	0f b6       	in	r0, 0x3f	; 63
    572a:	f8 94       	cli
    572c:	fe bf       	out	0x3e, r31	; 62
    572e:	0f be       	out	0x3f, r0	; 63
    5730:	ed bf       	out	0x3d, r30	; 61
        uartPuts(s);
    5732:	ce 01       	movw	r24, r28
    5734:	8e 59       	subi	r24, 0x9E	; 158
    5736:	9c 4f       	sbci	r25, 0xFC	; 252
    5738:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
      }
    }

    if (Button2 > 1)
    573c:	fe 01       	movw	r30, r28
    573e:	e3 56       	subi	r30, 0x63	; 99
    5740:	fd 4f       	sbci	r31, 0xFD	; 253
    5742:	80 81       	ld	r24, Z
    5744:	91 81       	ldd	r25, Z+1	; 0x01
    5746:	82 30       	cpi	r24, 0x02	; 2
    5748:	91 05       	cpc	r25, r1
    574a:	08 f4       	brcc	.+2      	; 0x574e <main+0x3aa2>
    574c:	74 c0       	rjmp	.+232    	; 0x5836 <main+0x3b8a>
    {
      if (((Button2 + 10) % 12) == 0 || Button2 > 36)
    574e:	fe 01       	movw	r30, r28
    5750:	e3 56       	subi	r30, 0x63	; 99
    5752:	fd 4f       	sbci	r31, 0xFD	; 253
    5754:	80 81       	ld	r24, Z
    5756:	91 81       	ldd	r25, Z+1	; 0x01
    5758:	0a 96       	adiw	r24, 0x0a	; 10
    575a:	2c e0       	ldi	r18, 0x0C	; 12
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	b9 01       	movw	r22, r18
    5760:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <__udivmodhi4>
    5764:	00 97       	sbiw	r24, 0x00	; 0
    5766:	49 f0       	breq	.+18     	; 0x577a <main+0x3ace>
    5768:	fe 01       	movw	r30, r28
    576a:	e3 56       	subi	r30, 0x63	; 99
    576c:	fd 4f       	sbci	r31, 0xFD	; 253
    576e:	80 81       	ld	r24, Z
    5770:	91 81       	ldd	r25, Z+1	; 0x01
    5772:	85 32       	cpi	r24, 0x25	; 37
    5774:	91 05       	cpc	r25, r1
    5776:	08 f4       	brcc	.+2      	; 0x577a <main+0x3ace>
    5778:	5e c0       	rjmp	.+188    	; 0x5836 <main+0x3b8a>
      {
        uartPuts("Min++\r\n");
    577a:	88 e1       	ldi	r24, 0x18	; 24
    577c:	95 e0       	ldi	r25, 0x05	; 5
    577e:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
        int res = i2c_rtc_read(&time, 0);
    5782:	ce 01       	movw	r24, r28
    5784:	85 55       	subi	r24, 0x55	; 85
    5786:	9d 4f       	sbci	r25, 0xFD	; 253
    5788:	60 e0       	ldi	r22, 0x00	; 0
    578a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    578e:	fe 01       	movw	r30, r28
    5790:	e1 5b       	subi	r30, 0xB1	; 177
    5792:	fd 4f       	sbci	r31, 0xFD	; 253
    5794:	88 2f       	mov	r24, r24
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	91 83       	std	Z+1, r25	; 0x01
    579a:	80 83       	st	Z, r24
        if (!res)
    579c:	fe 01       	movw	r30, r28
    579e:	e1 5b       	subi	r30, 0xB1	; 177
    57a0:	fd 4f       	sbci	r31, 0xFD	; 253
    57a2:	80 81       	ld	r24, Z
    57a4:	91 81       	ldd	r25, Z+1	; 0x01
    57a6:	00 97       	sbiw	r24, 0x00	; 0
    57a8:	09 f4       	brne	.+2      	; 0x57ac <main+0x3b00>
    57aa:	ff cf       	rjmp	.-2      	; 0x57aa <main+0x3afe>
        {
          while (1)
            ;
        }
        add_minute(&time);
    57ac:	ce 01       	movw	r24, r28
    57ae:	85 55       	subi	r24, 0x55	; 85
    57b0:	9d 4f       	sbci	r25, 0xFD	; 253
    57b2:	0e 94 94 04 	call	0x928	; 0x928 <add_minute>
        i2c_rtc_write(&time);
    57b6:	ce 01       	movw	r24, r28
    57b8:	85 55       	subi	r24, 0x55	; 85
    57ba:	9d 4f       	sbci	r25, 0xFD	; 253
    57bc:	0e 94 c2 02 	call	0x584	; 0x584 <i2c_rtc_write>
        char s[100];
        sprintf(s, "time : %02d:%02d:%02d\r\n", time.hh, time.mm, time.ss);
    57c0:	fe 01       	movw	r30, r28
    57c2:	e5 55       	subi	r30, 0x55	; 85
    57c4:	fd 4f       	sbci	r31, 0xFD	; 253
    57c6:	83 81       	ldd	r24, Z+3	; 0x03
    57c8:	48 2f       	mov	r20, r24
    57ca:	50 e0       	ldi	r21, 0x00	; 0
    57cc:	fe 01       	movw	r30, r28
    57ce:	e5 55       	subi	r30, 0x55	; 85
    57d0:	fd 4f       	sbci	r31, 0xFD	; 253
    57d2:	84 81       	ldd	r24, Z+4	; 0x04
    57d4:	68 2f       	mov	r22, r24
    57d6:	70 e0       	ldi	r23, 0x00	; 0
    57d8:	fe 01       	movw	r30, r28
    57da:	e5 55       	subi	r30, 0x55	; 85
    57dc:	fd 4f       	sbci	r31, 0xFD	; 253
    57de:	85 81       	ldd	r24, Z+5	; 0x05
    57e0:	28 2f       	mov	r18, r24
    57e2:	30 e0       	ldi	r19, 0x00	; 0
    57e4:	8d b7       	in	r24, 0x3d	; 61
    57e6:	9e b7       	in	r25, 0x3e	; 62
    57e8:	0a 97       	sbiw	r24, 0x0a	; 10
    57ea:	0f b6       	in	r0, 0x3f	; 63
    57ec:	f8 94       	cli
    57ee:	9e bf       	out	0x3e, r25	; 62
    57f0:	0f be       	out	0x3f, r0	; 63
    57f2:	8d bf       	out	0x3d, r24	; 61
    57f4:	ed b7       	in	r30, 0x3d	; 61
    57f6:	fe b7       	in	r31, 0x3e	; 62
    57f8:	31 96       	adiw	r30, 0x01	; 1
    57fa:	ce 01       	movw	r24, r28
    57fc:	8e 59       	subi	r24, 0x9E	; 158
    57fe:	9c 4f       	sbci	r25, 0xFC	; 252
    5800:	91 83       	std	Z+1, r25	; 0x01
    5802:	80 83       	st	Z, r24
    5804:	80 e0       	ldi	r24, 0x00	; 0
    5806:	95 e0       	ldi	r25, 0x05	; 5
    5808:	93 83       	std	Z+3, r25	; 0x03
    580a:	82 83       	std	Z+2, r24	; 0x02
    580c:	55 83       	std	Z+5, r21	; 0x05
    580e:	44 83       	std	Z+4, r20	; 0x04
    5810:	77 83       	std	Z+7, r23	; 0x07
    5812:	66 83       	std	Z+6, r22	; 0x06
    5814:	31 87       	std	Z+9, r19	; 0x09
    5816:	20 87       	std	Z+8, r18	; 0x08
    5818:	0e 94 47 3e 	call	0x7c8e	; 0x7c8e <sprintf>
    581c:	ed b7       	in	r30, 0x3d	; 61
    581e:	fe b7       	in	r31, 0x3e	; 62
    5820:	3a 96       	adiw	r30, 0x0a	; 10
    5822:	0f b6       	in	r0, 0x3f	; 63
    5824:	f8 94       	cli
    5826:	fe bf       	out	0x3e, r31	; 62
    5828:	0f be       	out	0x3f, r0	; 63
    582a:	ed bf       	out	0x3d, r30	; 61
        uartPuts(s);
    582c:	ce 01       	movw	r24, r28
    582e:	8e 59       	subi	r24, 0x9E	; 158
    5830:	9c 4f       	sbci	r25, 0xFC	; 252
    5832:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
      }
    }

    if (uiScrollingBit)
    5836:	fe 01       	movw	r30, r28
    5838:	eb 55       	subi	r30, 0x5B	; 91
    583a:	fd 4f       	sbci	r31, 0xFD	; 253
    583c:	80 81       	ld	r24, Z
    583e:	91 81       	ldd	r25, Z+1	; 0x01
    5840:	a2 81       	ldd	r26, Z+2	; 0x02
    5842:	b3 81       	ldd	r27, Z+3	; 0x03
    5844:	00 97       	sbiw	r24, 0x00	; 0
    5846:	a1 05       	cpc	r26, r1
    5848:	b1 05       	cpc	r27, r1
    584a:	a1 f1       	breq	.+104    	; 0x58b4 <main+0x3c08>
    {
      uiScrollingBit >>= 1;
    584c:	9e 01       	movw	r18, r28
    584e:	2b 55       	subi	r18, 0x5B	; 91
    5850:	3d 4f       	sbci	r19, 0xFD	; 253
    5852:	fe 01       	movw	r30, r28
    5854:	eb 55       	subi	r30, 0x5B	; 91
    5856:	fd 4f       	sbci	r31, 0xFD	; 253
    5858:	80 81       	ld	r24, Z
    585a:	91 81       	ldd	r25, Z+1	; 0x01
    585c:	a2 81       	ldd	r26, Z+2	; 0x02
    585e:	b3 81       	ldd	r27, Z+3	; 0x03
    5860:	b6 95       	lsr	r27
    5862:	a7 95       	ror	r26
    5864:	97 95       	ror	r25
    5866:	87 95       	ror	r24
    5868:	f9 01       	movw	r30, r18
    586a:	80 83       	st	Z, r24
    586c:	91 83       	std	Z+1, r25	; 0x01
    586e:	a2 83       	std	Z+2, r26	; 0x02
    5870:	b3 83       	std	Z+3, r27	; 0x03
      if (!uiScrollingBit)
    5872:	fe 01       	movw	r30, r28
    5874:	eb 55       	subi	r30, 0x5B	; 91
    5876:	fd 4f       	sbci	r31, 0xFD	; 253
    5878:	80 81       	ld	r24, Z
    587a:	91 81       	ldd	r25, Z+1	; 0x01
    587c:	a2 81       	ldd	r26, Z+2	; 0x02
    587e:	b3 81       	ldd	r27, Z+3	; 0x03
    5880:	00 97       	sbiw	r24, 0x00	; 0
    5882:	a1 05       	cpc	r26, r1
    5884:	b1 05       	cpc	r27, r1
    5886:	59 f4       	brne	.+22     	; 0x589e <main+0x3bf2>
      {
        uiScrollingBit = 0x80000000;
    5888:	fe 01       	movw	r30, r28
    588a:	eb 55       	subi	r30, 0x5B	; 91
    588c:	fd 4f       	sbci	r31, 0xFD	; 253
    588e:	80 e0       	ldi	r24, 0x00	; 0
    5890:	90 e0       	ldi	r25, 0x00	; 0
    5892:	a0 e0       	ldi	r26, 0x00	; 0
    5894:	b0 e8       	ldi	r27, 0x80	; 128
    5896:	80 83       	st	Z, r24
    5898:	91 83       	std	Z+1, r25	; 0x01
    589a:	a2 83       	std	Z+2, r26	; 0x02
    589c:	b3 83       	std	Z+3, r27	; 0x03
      }
      shift32_output(uiScrollingBit);
    589e:	fe 01       	movw	r30, r28
    58a0:	eb 55       	subi	r30, 0x5B	; 91
    58a2:	fd 4f       	sbci	r31, 0xFD	; 253
    58a4:	80 81       	ld	r24, Z
    58a6:	91 81       	ldd	r25, Z+1	; 0x01
    58a8:	a2 81       	ldd	r26, Z+2	; 0x02
    58aa:	b3 81       	ldd	r27, Z+3	; 0x03
    58ac:	bc 01       	movw	r22, r24
    58ae:	cd 01       	movw	r24, r26
    58b0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
    }

    if (uiCount % 1000)
    58b4:	fe 01       	movw	r30, r28
    58b6:	ef 55       	subi	r30, 0x5F	; 95
    58b8:	fd 4f       	sbci	r31, 0xFD	; 253
    58ba:	80 81       	ld	r24, Z
    58bc:	91 81       	ldd	r25, Z+1	; 0x01
    58be:	a2 81       	ldd	r26, Z+2	; 0x02
    58c0:	b3 81       	ldd	r27, Z+3	; 0x03
    58c2:	28 ee       	ldi	r18, 0xE8	; 232
    58c4:	33 e0       	ldi	r19, 0x03	; 3
    58c6:	40 e0       	ldi	r20, 0x00	; 0
    58c8:	50 e0       	ldi	r21, 0x00	; 0
    58ca:	bc 01       	movw	r22, r24
    58cc:	cd 01       	movw	r24, r26
    58ce:	0e 94 d3 3d 	call	0x7ba6	; 0x7ba6 <__divmodsi4>
    58d2:	dc 01       	movw	r26, r24
    58d4:	cb 01       	movw	r24, r22
    58d6:	00 97       	sbiw	r24, 0x00	; 0
    58d8:	a1 05       	cpc	r26, r1
    58da:	b1 05       	cpc	r27, r1
    58dc:	11 f0       	breq	.+4      	; 0x58e2 <main+0x3c36>
    58de:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <main+0x176c>
      continue;
    }

    // ca. alle 1s

    int res1 = i2c_rtc_read(&time, 1);
    58e2:	ce 01       	movw	r24, r28
    58e4:	85 55       	subi	r24, 0x55	; 85
    58e6:	9d 4f       	sbci	r25, 0xFD	; 253
    58e8:	61 e0       	ldi	r22, 0x01	; 1
    58ea:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    58ee:	fe 01       	movw	r30, r28
    58f0:	e4 57       	subi	r30, 0x74	; 116
    58f2:	fd 4f       	sbci	r31, 0xFD	; 253
    58f4:	88 2f       	mov	r24, r24
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	91 83       	std	Z+1, r25	; 0x01
    58fa:	80 83       	st	Z, r24
    int res2 = i2c_rtc_read(&utctime, 0);
    58fc:	ce 01       	movw	r24, r28
    58fe:	88 54       	subi	r24, 0x48	; 72
    5900:	9d 4f       	sbci	r25, 0xFD	; 253
    5902:	60 e0       	ldi	r22, 0x00	; 0
    5904:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <i2c_rtc_read>
    5908:	fe 01       	movw	r30, r28
    590a:	e6 57       	subi	r30, 0x76	; 118
    590c:	fd 4f       	sbci	r31, 0xFD	; 253
    590e:	88 2f       	mov	r24, r24
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	91 83       	std	Z+1, r25	; 0x01
    5914:	80 83       	st	Z, r24
    SetColor(uiBright, uiR, uiG, uiB);
    5916:	fe 01       	movw	r30, r28
    5918:	e4 5d       	subi	r30, 0xD4	; 212
    591a:	fc 4f       	sbci	r31, 0xFC	; 252
    591c:	20 81       	ld	r18, Z
    591e:	fe 01       	movw	r30, r28
    5920:	e3 5d       	subi	r30, 0xD3	; 211
    5922:	fc 4f       	sbci	r31, 0xFC	; 252
    5924:	30 81       	ld	r19, Z
    5926:	fe 01       	movw	r30, r28
    5928:	e2 5d       	subi	r30, 0xD2	; 210
    592a:	fc 4f       	sbci	r31, 0xFC	; 252
    592c:	90 81       	ld	r25, Z
    592e:	fe 01       	movw	r30, r28
    5930:	e2 57       	subi	r30, 0x72	; 114
    5932:	fd 4f       	sbci	r31, 0xFD	; 253
    5934:	80 81       	ld	r24, Z
    5936:	62 2f       	mov	r22, r18
    5938:	43 2f       	mov	r20, r19
    593a:	29 2f       	mov	r18, r25
    593c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    if (!res1 || !res2)
    5940:	fe 01       	movw	r30, r28
    5942:	e4 57       	subi	r30, 0x74	; 116
    5944:	fd 4f       	sbci	r31, 0xFD	; 253
    5946:	80 81       	ld	r24, Z
    5948:	91 81       	ldd	r25, Z+1	; 0x01
    594a:	00 97       	sbiw	r24, 0x00	; 0
    594c:	41 f0       	breq	.+16     	; 0x595e <main+0x3cb2>
    594e:	fe 01       	movw	r30, r28
    5950:	e6 57       	subi	r30, 0x76	; 118
    5952:	fd 4f       	sbci	r31, 0xFD	; 253
    5954:	80 81       	ld	r24, Z
    5956:	91 81       	ldd	r25, Z+1	; 0x01
    5958:	00 97       	sbiw	r24, 0x00	; 0
    595a:	09 f0       	breq	.+2      	; 0x595e <main+0x3cb2>
    595c:	1c c1       	rjmp	.+568    	; 0x5b96 <main+0x3eea>
    {
      uartPuts("RTC error\r\n");
    595e:	8b ee       	ldi	r24, 0xEB	; 235
    5960:	94 e0       	ldi	r25, 0x04	; 4
    5962:	0e 94 81 0a 	call	0x1502	; 0x1502 <uartPuts>
      for (uiCount = 0; uiCount < 40; uiCount++)
    5966:	fe 01       	movw	r30, r28
    5968:	ef 55       	subi	r30, 0x5F	; 95
    596a:	fd 4f       	sbci	r31, 0xFD	; 253
    596c:	10 82       	st	Z, r1
    596e:	11 82       	std	Z+1, r1	; 0x01
    5970:	12 82       	std	Z+2, r1	; 0x02
    5972:	13 82       	std	Z+3, r1	; 0x03
    5974:	02 c1       	rjmp	.+516    	; 0x5b7a <main+0x3ece>
      {
        SetColor(0x01, 0x01, 0x01, 0x01);
    5976:	81 e0       	ldi	r24, 0x01	; 1
    5978:	61 e0       	ldi	r22, 0x01	; 1
    597a:	41 e0       	ldi	r20, 0x01	; 1
    597c:	21 e0       	ldi	r18, 0x01	; 1
    597e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    5982:	80 e0       	ldi	r24, 0x00	; 0
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	a8 e4       	ldi	r26, 0x48	; 72
    5988:	b2 e4       	ldi	r27, 0x42	; 66
    598a:	89 8f       	std	Y+25, r24	; 0x19
    598c:	9a 8f       	std	Y+26, r25	; 0x1a
    598e:	ab 8f       	std	Y+27, r26	; 0x1b
    5990:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5992:	69 8d       	ldd	r22, Y+25	; 0x19
    5994:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5996:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5998:	9c 8d       	ldd	r25, Y+28	; 0x1c
    599a:	26 e6       	ldi	r18, 0x66	; 102
    599c:	36 e6       	ldi	r19, 0x66	; 102
    599e:	46 e6       	ldi	r20, 0x66	; 102
    59a0:	55 e4       	ldi	r21, 0x45	; 69
    59a2:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    59a6:	dc 01       	movw	r26, r24
    59a8:	cb 01       	movw	r24, r22
    59aa:	8d 8b       	std	Y+21, r24	; 0x15
    59ac:	9e 8b       	std	Y+22, r25	; 0x16
    59ae:	af 8b       	std	Y+23, r26	; 0x17
    59b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    59b2:	6d 89       	ldd	r22, Y+21	; 0x15
    59b4:	7e 89       	ldd	r23, Y+22	; 0x16
    59b6:	8f 89       	ldd	r24, Y+23	; 0x17
    59b8:	98 8d       	ldd	r25, Y+24	; 0x18
    59ba:	20 e0       	ldi	r18, 0x00	; 0
    59bc:	30 e0       	ldi	r19, 0x00	; 0
    59be:	40 e8       	ldi	r20, 0x80	; 128
    59c0:	5f e3       	ldi	r21, 0x3F	; 63
    59c2:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    59c6:	88 23       	and	r24, r24
    59c8:	2c f4       	brge	.+10     	; 0x59d4 <main+0x3d28>
		__ticks = 1;
    59ca:	81 e0       	ldi	r24, 0x01	; 1
    59cc:	90 e0       	ldi	r25, 0x00	; 0
    59ce:	9c 8b       	std	Y+20, r25	; 0x14
    59d0:	8b 8b       	std	Y+19, r24	; 0x13
    59d2:	3f c0       	rjmp	.+126    	; 0x5a52 <main+0x3da6>
	else if (__tmp > 65535)
    59d4:	6d 89       	ldd	r22, Y+21	; 0x15
    59d6:	7e 89       	ldd	r23, Y+22	; 0x16
    59d8:	8f 89       	ldd	r24, Y+23	; 0x17
    59da:	98 8d       	ldd	r25, Y+24	; 0x18
    59dc:	20 e0       	ldi	r18, 0x00	; 0
    59de:	3f ef       	ldi	r19, 0xFF	; 255
    59e0:	4f e7       	ldi	r20, 0x7F	; 127
    59e2:	57 e4       	ldi	r21, 0x47	; 71
    59e4:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    59e8:	18 16       	cp	r1, r24
    59ea:	4c f5       	brge	.+82     	; 0x5a3e <main+0x3d92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59ec:	69 8d       	ldd	r22, Y+25	; 0x19
    59ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59f4:	20 e0       	ldi	r18, 0x00	; 0
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	40 e2       	ldi	r20, 0x20	; 32
    59fa:	51 e4       	ldi	r21, 0x41	; 65
    59fc:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    5a00:	dc 01       	movw	r26, r24
    5a02:	cb 01       	movw	r24, r22
    5a04:	bc 01       	movw	r22, r24
    5a06:	cd 01       	movw	r24, r26
    5a08:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    5a0c:	dc 01       	movw	r26, r24
    5a0e:	cb 01       	movw	r24, r22
    5a10:	9c 8b       	std	Y+20, r25	; 0x14
    5a12:	8b 8b       	std	Y+19, r24	; 0x13
    5a14:	0f c0       	rjmp	.+30     	; 0x5a34 <main+0x3d88>
    5a16:	80 e7       	ldi	r24, 0x70	; 112
    5a18:	91 e0       	ldi	r25, 0x01	; 1
    5a1a:	9a 8b       	std	Y+18, r25	; 0x12
    5a1c:	89 8b       	std	Y+17, r24	; 0x11
    5a1e:	89 89       	ldd	r24, Y+17	; 0x11
    5a20:	9a 89       	ldd	r25, Y+18	; 0x12
    5a22:	01 97       	sbiw	r24, 0x01	; 1
    5a24:	f1 f7       	brne	.-4      	; 0x5a22 <main+0x3d76>
    5a26:	9a 8b       	std	Y+18, r25	; 0x12
    5a28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    5a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    5a2e:	01 97       	sbiw	r24, 0x01	; 1
    5a30:	9c 8b       	std	Y+20, r25	; 0x14
    5a32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a34:	8b 89       	ldd	r24, Y+19	; 0x13
    5a36:	9c 89       	ldd	r25, Y+20	; 0x14
    5a38:	00 97       	sbiw	r24, 0x00	; 0
    5a3a:	69 f7       	brne	.-38     	; 0x5a16 <main+0x3d6a>
    5a3c:	14 c0       	rjmp	.+40     	; 0x5a66 <main+0x3dba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    5a40:	7e 89       	ldd	r23, Y+22	; 0x16
    5a42:	8f 89       	ldd	r24, Y+23	; 0x17
    5a44:	98 8d       	ldd	r25, Y+24	; 0x18
    5a46:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    5a4a:	dc 01       	movw	r26, r24
    5a4c:	cb 01       	movw	r24, r22
    5a4e:	9c 8b       	std	Y+20, r25	; 0x14
    5a50:	8b 8b       	std	Y+19, r24	; 0x13
    5a52:	8b 89       	ldd	r24, Y+19	; 0x13
    5a54:	9c 89       	ldd	r25, Y+20	; 0x14
    5a56:	98 8b       	std	Y+16, r25	; 0x10
    5a58:	8f 87       	std	Y+15, r24	; 0x0f
    5a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a5c:	98 89       	ldd	r25, Y+16	; 0x10
    5a5e:	01 97       	sbiw	r24, 0x01	; 1
    5a60:	f1 f7       	brne	.-4      	; 0x5a5e <main+0x3db2>
    5a62:	98 8b       	std	Y+16, r25	; 0x10
    5a64:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(50);
        SetColor(0xff, 0xff, 0xff, 0xff);
    5a66:	8f ef       	ldi	r24, 0xFF	; 255
    5a68:	6f ef       	ldi	r22, 0xFF	; 255
    5a6a:	4f ef       	ldi	r20, 0xFF	; 255
    5a6c:	2f ef       	ldi	r18, 0xFF	; 255
    5a6e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SetColor>
    5a72:	80 e0       	ldi	r24, 0x00	; 0
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	a8 e4       	ldi	r26, 0x48	; 72
    5a78:	b2 e4       	ldi	r27, 0x42	; 66
    5a7a:	8b 87       	std	Y+11, r24	; 0x0b
    5a7c:	9c 87       	std	Y+12, r25	; 0x0c
    5a7e:	ad 87       	std	Y+13, r26	; 0x0d
    5a80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a8a:	26 e6       	ldi	r18, 0x66	; 102
    5a8c:	36 e6       	ldi	r19, 0x66	; 102
    5a8e:	46 e6       	ldi	r20, 0x66	; 102
    5a90:	55 e4       	ldi	r21, 0x45	; 69
    5a92:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    5a96:	dc 01       	movw	r26, r24
    5a98:	cb 01       	movw	r24, r22
    5a9a:	8f 83       	std	Y+7, r24	; 0x07
    5a9c:	98 87       	std	Y+8, r25	; 0x08
    5a9e:	a9 87       	std	Y+9, r26	; 0x09
    5aa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    5aa4:	78 85       	ldd	r23, Y+8	; 0x08
    5aa6:	89 85       	ldd	r24, Y+9	; 0x09
    5aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aaa:	20 e0       	ldi	r18, 0x00	; 0
    5aac:	30 e0       	ldi	r19, 0x00	; 0
    5aae:	40 e8       	ldi	r20, 0x80	; 128
    5ab0:	5f e3       	ldi	r21, 0x3F	; 63
    5ab2:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__ltsf2>
    5ab6:	88 23       	and	r24, r24
    5ab8:	2c f4       	brge	.+10     	; 0x5ac4 <main+0x3e18>
		__ticks = 1;
    5aba:	81 e0       	ldi	r24, 0x01	; 1
    5abc:	90 e0       	ldi	r25, 0x00	; 0
    5abe:	9e 83       	std	Y+6, r25	; 0x06
    5ac0:	8d 83       	std	Y+5, r24	; 0x05
    5ac2:	3f c0       	rjmp	.+126    	; 0x5b42 <main+0x3e96>
	else if (__tmp > 65535)
    5ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ac6:	78 85       	ldd	r23, Y+8	; 0x08
    5ac8:	89 85       	ldd	r24, Y+9	; 0x09
    5aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	3f ef       	ldi	r19, 0xFF	; 255
    5ad0:	4f e7       	ldi	r20, 0x7F	; 127
    5ad2:	57 e4       	ldi	r21, 0x47	; 71
    5ad4:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__gtsf2>
    5ad8:	18 16       	cp	r1, r24
    5ada:	4c f5       	brge	.+82     	; 0x5b2e <main+0x3e82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ae4:	20 e0       	ldi	r18, 0x00	; 0
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	40 e2       	ldi	r20, 0x20	; 32
    5aea:	51 e4       	ldi	r21, 0x41	; 65
    5aec:	0e 94 fd 39 	call	0x73fa	; 0x73fa <__mulsf3>
    5af0:	dc 01       	movw	r26, r24
    5af2:	cb 01       	movw	r24, r22
    5af4:	bc 01       	movw	r22, r24
    5af6:	cd 01       	movw	r24, r26
    5af8:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    5afc:	dc 01       	movw	r26, r24
    5afe:	cb 01       	movw	r24, r22
    5b00:	9e 83       	std	Y+6, r25	; 0x06
    5b02:	8d 83       	std	Y+5, r24	; 0x05
    5b04:	0f c0       	rjmp	.+30     	; 0x5b24 <main+0x3e78>
    5b06:	80 e7       	ldi	r24, 0x70	; 112
    5b08:	91 e0       	ldi	r25, 0x01	; 1
    5b0a:	9c 83       	std	Y+4, r25	; 0x04
    5b0c:	8b 83       	std	Y+3, r24	; 0x03
    5b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b10:	9c 81       	ldd	r25, Y+4	; 0x04
    5b12:	01 97       	sbiw	r24, 0x01	; 1
    5b14:	f1 f7       	brne	.-4      	; 0x5b12 <main+0x3e66>
    5b16:	9c 83       	std	Y+4, r25	; 0x04
    5b18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b1e:	01 97       	sbiw	r24, 0x01	; 1
    5b20:	9e 83       	std	Y+6, r25	; 0x06
    5b22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b24:	8d 81       	ldd	r24, Y+5	; 0x05
    5b26:	9e 81       	ldd	r25, Y+6	; 0x06
    5b28:	00 97       	sbiw	r24, 0x00	; 0
    5b2a:	69 f7       	brne	.-38     	; 0x5b06 <main+0x3e5a>
    5b2c:	14 c0       	rjmp	.+40     	; 0x5b56 <main+0x3eaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b30:	78 85       	ldd	r23, Y+8	; 0x08
    5b32:	89 85       	ldd	r24, Y+9	; 0x09
    5b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b36:	0e 94 27 38 	call	0x704e	; 0x704e <__fixunssfsi>
    5b3a:	dc 01       	movw	r26, r24
    5b3c:	cb 01       	movw	r24, r22
    5b3e:	9e 83       	std	Y+6, r25	; 0x06
    5b40:	8d 83       	std	Y+5, r24	; 0x05
    5b42:	8d 81       	ldd	r24, Y+5	; 0x05
    5b44:	9e 81       	ldd	r25, Y+6	; 0x06
    5b46:	9a 83       	std	Y+2, r25	; 0x02
    5b48:	89 83       	std	Y+1, r24	; 0x01
    5b4a:	89 81       	ldd	r24, Y+1	; 0x01
    5b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b4e:	01 97       	sbiw	r24, 0x01	; 1
    5b50:	f1 f7       	brne	.-4      	; 0x5b4e <main+0x3ea2>
    5b52:	9a 83       	std	Y+2, r25	; 0x02
    5b54:	89 83       	std	Y+1, r24	; 0x01
    int res2 = i2c_rtc_read(&utctime, 0);
    SetColor(uiBright, uiR, uiG, uiB);
    if (!res1 || !res2)
    {
      uartPuts("RTC error\r\n");
      for (uiCount = 0; uiCount < 40; uiCount++)
    5b56:	9e 01       	movw	r18, r28
    5b58:	2f 55       	subi	r18, 0x5F	; 95
    5b5a:	3d 4f       	sbci	r19, 0xFD	; 253
    5b5c:	fe 01       	movw	r30, r28
    5b5e:	ef 55       	subi	r30, 0x5F	; 95
    5b60:	fd 4f       	sbci	r31, 0xFD	; 253
    5b62:	80 81       	ld	r24, Z
    5b64:	91 81       	ldd	r25, Z+1	; 0x01
    5b66:	a2 81       	ldd	r26, Z+2	; 0x02
    5b68:	b3 81       	ldd	r27, Z+3	; 0x03
    5b6a:	01 96       	adiw	r24, 0x01	; 1
    5b6c:	a1 1d       	adc	r26, r1
    5b6e:	b1 1d       	adc	r27, r1
    5b70:	f9 01       	movw	r30, r18
    5b72:	80 83       	st	Z, r24
    5b74:	91 83       	std	Z+1, r25	; 0x01
    5b76:	a2 83       	std	Z+2, r26	; 0x02
    5b78:	b3 83       	std	Z+3, r27	; 0x03
    5b7a:	fe 01       	movw	r30, r28
    5b7c:	ef 55       	subi	r30, 0x5F	; 95
    5b7e:	fd 4f       	sbci	r31, 0xFD	; 253
    5b80:	80 81       	ld	r24, Z
    5b82:	91 81       	ldd	r25, Z+1	; 0x01
    5b84:	a2 81       	ldd	r26, Z+2	; 0x02
    5b86:	b3 81       	ldd	r27, Z+3	; 0x03
    5b88:	88 32       	cpi	r24, 0x28	; 40
    5b8a:	91 05       	cpc	r25, r1
    5b8c:	a1 05       	cpc	r26, r1
    5b8e:	b1 05       	cpc	r27, r1
    5b90:	0c f4       	brge	.+2      	; 0x5b94 <main+0x3ee8>
    5b92:	f1 ce       	rjmp	.-542    	; 0x5976 <main+0x3cca>
    5b94:	ff cf       	rjmp	.-2      	; 0x5b94 <main+0x3ee8>
      }
      while (1)
        ;
    }

    long lLEDs = 0;
    5b96:	fe 01       	movw	r30, r28
    5b98:	ea 57       	subi	r30, 0x7A	; 122
    5b9a:	fd 4f       	sbci	r31, 0xFD	; 253
    5b9c:	10 82       	st	Z, r1
    5b9e:	11 82       	std	Z+1, r1	; 0x01
    5ba0:	12 82       	std	Z+2, r1	; 0x02
    5ba2:	13 82       	std	Z+3, r1	; 0x03
    lLEDs |= pgm_read_dword(words+def_es);
    5ba4:	fe 01       	movw	r30, r28
    5ba6:	e3 5b       	subi	r30, 0xB3	; 179
    5ba8:	fd 4f       	sbci	r31, 0xFD	; 253
    5baa:	84 e5       	ldi	r24, 0x54	; 84
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	91 83       	std	Z+1, r25	; 0x01
    5bb0:	80 83       	st	Z, r24
    5bb2:	fe 01       	movw	r30, r28
    5bb4:	e3 5b       	subi	r30, 0xB3	; 179
    5bb6:	fd 4f       	sbci	r31, 0xFD	; 253
    5bb8:	80 81       	ld	r24, Z
    5bba:	91 81       	ldd	r25, Z+1	; 0x01
    5bbc:	9c 01       	movw	r18, r24
    5bbe:	f9 01       	movw	r30, r18
    5bc0:	85 91       	lpm	r24, Z+
    5bc2:	95 91       	lpm	r25, Z+
    5bc4:	a5 91       	lpm	r26, Z+
    5bc6:	b4 91       	lpm	r27, Z+
    5bc8:	9f 01       	movw	r18, r30
    5bca:	fe 01       	movw	r30, r28
    5bcc:	e7 5b       	subi	r30, 0xB7	; 183
    5bce:	fd 4f       	sbci	r31, 0xFD	; 253
    5bd0:	80 83       	st	Z, r24
    5bd2:	91 83       	std	Z+1, r25	; 0x01
    5bd4:	a2 83       	std	Z+2, r26	; 0x02
    5bd6:	b3 83       	std	Z+3, r27	; 0x03
    5bd8:	fe 01       	movw	r30, r28
    5bda:	e3 5b       	subi	r30, 0xB3	; 179
    5bdc:	fd 4f       	sbci	r31, 0xFD	; 253
    5bde:	31 83       	std	Z+1, r19	; 0x01
    5be0:	20 83       	st	Z, r18
    5be2:	fe 01       	movw	r30, r28
    5be4:	e7 5b       	subi	r30, 0xB7	; 183
    5be6:	fd 4f       	sbci	r31, 0xFD	; 253
    5be8:	20 81       	ld	r18, Z
    5bea:	31 81       	ldd	r19, Z+1	; 0x01
    5bec:	42 81       	ldd	r20, Z+2	; 0x02
    5bee:	53 81       	ldd	r21, Z+3	; 0x03
    5bf0:	fe 01       	movw	r30, r28
    5bf2:	ea 57       	subi	r30, 0x7A	; 122
    5bf4:	fd 4f       	sbci	r31, 0xFD	; 253
    5bf6:	80 81       	ld	r24, Z
    5bf8:	91 81       	ldd	r25, Z+1	; 0x01
    5bfa:	a2 81       	ldd	r26, Z+2	; 0x02
    5bfc:	b3 81       	ldd	r27, Z+3	; 0x03
    5bfe:	82 2b       	or	r24, r18
    5c00:	93 2b       	or	r25, r19
    5c02:	a4 2b       	or	r26, r20
    5c04:	b5 2b       	or	r27, r21
    5c06:	fe 01       	movw	r30, r28
    5c08:	ea 57       	subi	r30, 0x7A	; 122
    5c0a:	fd 4f       	sbci	r31, 0xFD	; 253
    5c0c:	80 83       	st	Z, r24
    5c0e:	91 83       	std	Z+1, r25	; 0x01
    5c10:	a2 83       	std	Z+2, r26	; 0x02
    5c12:	b3 83       	std	Z+3, r27	; 0x03
    lLEDs |= pgm_read_dword(words+def_ist);
    5c14:	fe 01       	movw	r30, r28
    5c16:	e9 5b       	subi	r30, 0xB9	; 185
    5c18:	fd 4f       	sbci	r31, 0xFD	; 253
    5c1a:	88 e5       	ldi	r24, 0x58	; 88
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	91 83       	std	Z+1, r25	; 0x01
    5c20:	80 83       	st	Z, r24
    5c22:	fe 01       	movw	r30, r28
    5c24:	e9 5b       	subi	r30, 0xB9	; 185
    5c26:	fd 4f       	sbci	r31, 0xFD	; 253
    5c28:	80 81       	ld	r24, Z
    5c2a:	91 81       	ldd	r25, Z+1	; 0x01
    5c2c:	9c 01       	movw	r18, r24
    5c2e:	f9 01       	movw	r30, r18
    5c30:	85 91       	lpm	r24, Z+
    5c32:	95 91       	lpm	r25, Z+
    5c34:	a5 91       	lpm	r26, Z+
    5c36:	b4 91       	lpm	r27, Z+
    5c38:	9f 01       	movw	r18, r30
    5c3a:	fe 01       	movw	r30, r28
    5c3c:	ed 5b       	subi	r30, 0xBD	; 189
    5c3e:	fd 4f       	sbci	r31, 0xFD	; 253
    5c40:	80 83       	st	Z, r24
    5c42:	91 83       	std	Z+1, r25	; 0x01
    5c44:	a2 83       	std	Z+2, r26	; 0x02
    5c46:	b3 83       	std	Z+3, r27	; 0x03
    5c48:	fe 01       	movw	r30, r28
    5c4a:	e9 5b       	subi	r30, 0xB9	; 185
    5c4c:	fd 4f       	sbci	r31, 0xFD	; 253
    5c4e:	31 83       	std	Z+1, r19	; 0x01
    5c50:	20 83       	st	Z, r18
    5c52:	fe 01       	movw	r30, r28
    5c54:	ed 5b       	subi	r30, 0xBD	; 189
    5c56:	fd 4f       	sbci	r31, 0xFD	; 253
    5c58:	20 81       	ld	r18, Z
    5c5a:	31 81       	ldd	r19, Z+1	; 0x01
    5c5c:	42 81       	ldd	r20, Z+2	; 0x02
    5c5e:	53 81       	ldd	r21, Z+3	; 0x03
    5c60:	fe 01       	movw	r30, r28
    5c62:	ea 57       	subi	r30, 0x7A	; 122
    5c64:	fd 4f       	sbci	r31, 0xFD	; 253
    5c66:	80 81       	ld	r24, Z
    5c68:	91 81       	ldd	r25, Z+1	; 0x01
    5c6a:	a2 81       	ldd	r26, Z+2	; 0x02
    5c6c:	b3 81       	ldd	r27, Z+3	; 0x03
    5c6e:	82 2b       	or	r24, r18
    5c70:	93 2b       	or	r25, r19
    5c72:	a4 2b       	or	r26, r20
    5c74:	b5 2b       	or	r27, r21
    5c76:	fe 01       	movw	r30, r28
    5c78:	ea 57       	subi	r30, 0x7A	; 122
    5c7a:	fd 4f       	sbci	r31, 0xFD	; 253
    5c7c:	80 83       	st	Z, r24
    5c7e:	91 83       	std	Z+1, r25	; 0x01
    5c80:	a2 83       	std	Z+2, r26	; 0x02
    5c82:	b3 83       	std	Z+3, r27	; 0x03
    lLEDs |= pgm_read_dword(words+def_uhr);
    5c84:	fe 01       	movw	r30, r28
    5c86:	ef 5b       	subi	r30, 0xBF	; 191
    5c88:	fd 4f       	sbci	r31, 0xFD	; 253
    5c8a:	8c ea       	ldi	r24, 0xAC	; 172
    5c8c:	90 e0       	ldi	r25, 0x00	; 0
    5c8e:	91 83       	std	Z+1, r25	; 0x01
    5c90:	80 83       	st	Z, r24
    5c92:	fe 01       	movw	r30, r28
    5c94:	ef 5b       	subi	r30, 0xBF	; 191
    5c96:	fd 4f       	sbci	r31, 0xFD	; 253
    5c98:	80 81       	ld	r24, Z
    5c9a:	91 81       	ldd	r25, Z+1	; 0x01
    5c9c:	9c 01       	movw	r18, r24
    5c9e:	f9 01       	movw	r30, r18
    5ca0:	85 91       	lpm	r24, Z+
    5ca2:	95 91       	lpm	r25, Z+
    5ca4:	a5 91       	lpm	r26, Z+
    5ca6:	b4 91       	lpm	r27, Z+
    5ca8:	9f 01       	movw	r18, r30
    5caa:	fe 01       	movw	r30, r28
    5cac:	e3 5c       	subi	r30, 0xC3	; 195
    5cae:	fd 4f       	sbci	r31, 0xFD	; 253
    5cb0:	80 83       	st	Z, r24
    5cb2:	91 83       	std	Z+1, r25	; 0x01
    5cb4:	a2 83       	std	Z+2, r26	; 0x02
    5cb6:	b3 83       	std	Z+3, r27	; 0x03
    5cb8:	fe 01       	movw	r30, r28
    5cba:	ef 5b       	subi	r30, 0xBF	; 191
    5cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    5cbe:	31 83       	std	Z+1, r19	; 0x01
    5cc0:	20 83       	st	Z, r18
    5cc2:	fe 01       	movw	r30, r28
    5cc4:	e3 5c       	subi	r30, 0xC3	; 195
    5cc6:	fd 4f       	sbci	r31, 0xFD	; 253
    5cc8:	20 81       	ld	r18, Z
    5cca:	31 81       	ldd	r19, Z+1	; 0x01
    5ccc:	42 81       	ldd	r20, Z+2	; 0x02
    5cce:	53 81       	ldd	r21, Z+3	; 0x03
    5cd0:	fe 01       	movw	r30, r28
    5cd2:	ea 57       	subi	r30, 0x7A	; 122
    5cd4:	fd 4f       	sbci	r31, 0xFD	; 253
    5cd6:	80 81       	ld	r24, Z
    5cd8:	91 81       	ldd	r25, Z+1	; 0x01
    5cda:	a2 81       	ldd	r26, Z+2	; 0x02
    5cdc:	b3 81       	ldd	r27, Z+3	; 0x03
    5cde:	82 2b       	or	r24, r18
    5ce0:	93 2b       	or	r25, r19
    5ce2:	a4 2b       	or	r26, r20
    5ce4:	b5 2b       	or	r27, r21
    5ce6:	fe 01       	movw	r30, r28
    5ce8:	ea 57       	subi	r30, 0x7A	; 122
    5cea:	fd 4f       	sbci	r31, 0xFD	; 253
    5cec:	80 83       	st	Z, r24
    5cee:	91 83       	std	Z+1, r25	; 0x01
    5cf0:	a2 83       	std	Z+2, r26	; 0x02
    5cf2:	b3 83       	std	Z+3, r27	; 0x03

    switch (time.mm % 5)
    5cf4:	fe 01       	movw	r30, r28
    5cf6:	e5 55       	subi	r30, 0x55	; 85
    5cf8:	fd 4f       	sbci	r31, 0xFD	; 253
    5cfa:	84 81       	ldd	r24, Z+4	; 0x04
    5cfc:	95 e0       	ldi	r25, 0x05	; 5
    5cfe:	69 2f       	mov	r22, r25
    5d00:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <__udivmodqi4>
    5d04:	89 2f       	mov	r24, r25
    5d06:	28 2f       	mov	r18, r24
    5d08:	30 e0       	ldi	r19, 0x00	; 0
    5d0a:	c6 5d       	subi	r28, 0xD6	; 214
    5d0c:	db 4f       	sbci	r29, 0xFB	; 251
    5d0e:	39 83       	std	Y+1, r19	; 0x01
    5d10:	28 83       	st	Y, r18
    5d12:	ca 52       	subi	r28, 0x2A	; 42
    5d14:	d4 40       	sbci	r29, 0x04	; 4
    5d16:	c6 5d       	subi	r28, 0xD6	; 214
    5d18:	db 4f       	sbci	r29, 0xFB	; 251
    5d1a:	88 81       	ld	r24, Y
    5d1c:	99 81       	ldd	r25, Y+1	; 0x01
    5d1e:	ca 52       	subi	r28, 0x2A	; 42
    5d20:	d4 40       	sbci	r29, 0x04	; 4
    5d22:	82 30       	cpi	r24, 0x02	; 2
    5d24:	91 05       	cpc	r25, r1
    5d26:	09 f4       	brne	.+2      	; 0x5d2a <main+0x407e>
    5d28:	6b c0       	rjmp	.+214    	; 0x5e00 <main+0x4154>
    5d2a:	c6 5d       	subi	r28, 0xD6	; 214
    5d2c:	db 4f       	sbci	r29, 0xFB	; 251
    5d2e:	e8 81       	ld	r30, Y
    5d30:	f9 81       	ldd	r31, Y+1	; 0x01
    5d32:	ca 52       	subi	r28, 0x2A	; 42
    5d34:	d4 40       	sbci	r29, 0x04	; 4
    5d36:	e3 30       	cpi	r30, 0x03	; 3
    5d38:	f1 05       	cpc	r31, r1
    5d3a:	a4 f4       	brge	.+40     	; 0x5d64 <main+0x40b8>
    5d3c:	c6 5d       	subi	r28, 0xD6	; 214
    5d3e:	db 4f       	sbci	r29, 0xFB	; 251
    5d40:	28 81       	ld	r18, Y
    5d42:	39 81       	ldd	r19, Y+1	; 0x01
    5d44:	ca 52       	subi	r28, 0x2A	; 42
    5d46:	d4 40       	sbci	r29, 0x04	; 4
    5d48:	21 15       	cp	r18, r1
    5d4a:	31 05       	cpc	r19, r1
    5d4c:	09 f4       	brne	.+2      	; 0x5d50 <main+0x40a4>
    5d4e:	52 c2       	rjmp	.+1188   	; 0x61f4 <main+0x4548>
    5d50:	c6 5d       	subi	r28, 0xD6	; 214
    5d52:	db 4f       	sbci	r29, 0xFB	; 251
    5d54:	88 81       	ld	r24, Y
    5d56:	99 81       	ldd	r25, Y+1	; 0x01
    5d58:	ca 52       	subi	r28, 0x2A	; 42
    5d5a:	d4 40       	sbci	r29, 0x04	; 4
    5d5c:	81 30       	cpi	r24, 0x01	; 1
    5d5e:	91 05       	cpc	r25, r1
    5d60:	b1 f0       	breq	.+44     	; 0x5d8e <main+0x40e2>
    5d62:	48 c2       	rjmp	.+1168   	; 0x61f4 <main+0x4548>
    5d64:	c6 5d       	subi	r28, 0xD6	; 214
    5d66:	db 4f       	sbci	r29, 0xFB	; 251
    5d68:	e8 81       	ld	r30, Y
    5d6a:	f9 81       	ldd	r31, Y+1	; 0x01
    5d6c:	ca 52       	subi	r28, 0x2A	; 42
    5d6e:	d4 40       	sbci	r29, 0x04	; 4
    5d70:	e3 30       	cpi	r30, 0x03	; 3
    5d72:	f1 05       	cpc	r31, r1
    5d74:	09 f4       	brne	.+2      	; 0x5d78 <main+0x40cc>
    5d76:	b5 c0       	rjmp	.+362    	; 0x5ee2 <main+0x4236>
    5d78:	c6 5d       	subi	r28, 0xD6	; 214
    5d7a:	db 4f       	sbci	r29, 0xFB	; 251
    5d7c:	28 81       	ld	r18, Y
    5d7e:	39 81       	ldd	r19, Y+1	; 0x01
    5d80:	ca 52       	subi	r28, 0x2A	; 42
    5d82:	d4 40       	sbci	r29, 0x04	; 4
    5d84:	24 30       	cpi	r18, 0x04	; 4
    5d86:	31 05       	cpc	r19, r1
    5d88:	09 f4       	brne	.+2      	; 0x5d8c <main+0x40e0>
    5d8a:	54 c1       	rjmp	.+680    	; 0x6034 <main+0x4388>
    5d8c:	33 c2       	rjmp	.+1126   	; 0x61f4 <main+0x4548>
    {
    case 0:
      break;
    case 1:
      lLEDs |= pgm_read_dword(words+def_mp4);
    5d8e:	fe 01       	movw	r30, r28
    5d90:	e5 5c       	subi	r30, 0xC5	; 197
    5d92:	fd 4f       	sbci	r31, 0xFD	; 253
    5d94:	8c eb       	ldi	r24, 0xBC	; 188
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	91 83       	std	Z+1, r25	; 0x01
    5d9a:	80 83       	st	Z, r24
    5d9c:	fe 01       	movw	r30, r28
    5d9e:	e5 5c       	subi	r30, 0xC5	; 197
    5da0:	fd 4f       	sbci	r31, 0xFD	; 253
    5da2:	80 81       	ld	r24, Z
    5da4:	91 81       	ldd	r25, Z+1	; 0x01
    5da6:	9c 01       	movw	r18, r24
    5da8:	f9 01       	movw	r30, r18
    5daa:	85 91       	lpm	r24, Z+
    5dac:	95 91       	lpm	r25, Z+
    5dae:	a5 91       	lpm	r26, Z+
    5db0:	b4 91       	lpm	r27, Z+
    5db2:	9f 01       	movw	r18, r30
    5db4:	fe 01       	movw	r30, r28
    5db6:	e9 5c       	subi	r30, 0xC9	; 201
    5db8:	fd 4f       	sbci	r31, 0xFD	; 253
    5dba:	80 83       	st	Z, r24
    5dbc:	91 83       	std	Z+1, r25	; 0x01
    5dbe:	a2 83       	std	Z+2, r26	; 0x02
    5dc0:	b3 83       	std	Z+3, r27	; 0x03
    5dc2:	fe 01       	movw	r30, r28
    5dc4:	e5 5c       	subi	r30, 0xC5	; 197
    5dc6:	fd 4f       	sbci	r31, 0xFD	; 253
    5dc8:	31 83       	std	Z+1, r19	; 0x01
    5dca:	20 83       	st	Z, r18
    5dcc:	fe 01       	movw	r30, r28
    5dce:	e9 5c       	subi	r30, 0xC9	; 201
    5dd0:	fd 4f       	sbci	r31, 0xFD	; 253
    5dd2:	20 81       	ld	r18, Z
    5dd4:	31 81       	ldd	r19, Z+1	; 0x01
    5dd6:	42 81       	ldd	r20, Z+2	; 0x02
    5dd8:	53 81       	ldd	r21, Z+3	; 0x03
    5dda:	fe 01       	movw	r30, r28
    5ddc:	ea 57       	subi	r30, 0x7A	; 122
    5dde:	fd 4f       	sbci	r31, 0xFD	; 253
    5de0:	80 81       	ld	r24, Z
    5de2:	91 81       	ldd	r25, Z+1	; 0x01
    5de4:	a2 81       	ldd	r26, Z+2	; 0x02
    5de6:	b3 81       	ldd	r27, Z+3	; 0x03
    5de8:	82 2b       	or	r24, r18
    5dea:	93 2b       	or	r25, r19
    5dec:	a4 2b       	or	r26, r20
    5dee:	b5 2b       	or	r27, r21
    5df0:	fe 01       	movw	r30, r28
    5df2:	ea 57       	subi	r30, 0x7A	; 122
    5df4:	fd 4f       	sbci	r31, 0xFD	; 253
    5df6:	80 83       	st	Z, r24
    5df8:	91 83       	std	Z+1, r25	; 0x01
    5dfa:	a2 83       	std	Z+2, r26	; 0x02
    5dfc:	b3 83       	std	Z+3, r27	; 0x03
    5dfe:	fa c1       	rjmp	.+1012   	; 0x61f4 <main+0x4548>
      break;
    case 2:
      lLEDs |= pgm_read_dword(words+def_mp4);
    5e00:	fe 01       	movw	r30, r28
    5e02:	eb 5c       	subi	r30, 0xCB	; 203
    5e04:	fd 4f       	sbci	r31, 0xFD	; 253
    5e06:	8c eb       	ldi	r24, 0xBC	; 188
    5e08:	90 e0       	ldi	r25, 0x00	; 0
    5e0a:	91 83       	std	Z+1, r25	; 0x01
    5e0c:	80 83       	st	Z, r24
    5e0e:	fe 01       	movw	r30, r28
    5e10:	eb 5c       	subi	r30, 0xCB	; 203
    5e12:	fd 4f       	sbci	r31, 0xFD	; 253
    5e14:	80 81       	ld	r24, Z
    5e16:	91 81       	ldd	r25, Z+1	; 0x01
    5e18:	9c 01       	movw	r18, r24
    5e1a:	f9 01       	movw	r30, r18
    5e1c:	85 91       	lpm	r24, Z+
    5e1e:	95 91       	lpm	r25, Z+
    5e20:	a5 91       	lpm	r26, Z+
    5e22:	b4 91       	lpm	r27, Z+
    5e24:	9f 01       	movw	r18, r30
    5e26:	fe 01       	movw	r30, r28
    5e28:	ef 5c       	subi	r30, 0xCF	; 207
    5e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    5e2c:	80 83       	st	Z, r24
    5e2e:	91 83       	std	Z+1, r25	; 0x01
    5e30:	a2 83       	std	Z+2, r26	; 0x02
    5e32:	b3 83       	std	Z+3, r27	; 0x03
    5e34:	fe 01       	movw	r30, r28
    5e36:	eb 5c       	subi	r30, 0xCB	; 203
    5e38:	fd 4f       	sbci	r31, 0xFD	; 253
    5e3a:	31 83       	std	Z+1, r19	; 0x01
    5e3c:	20 83       	st	Z, r18
    5e3e:	fe 01       	movw	r30, r28
    5e40:	ef 5c       	subi	r30, 0xCF	; 207
    5e42:	fd 4f       	sbci	r31, 0xFD	; 253
    5e44:	20 81       	ld	r18, Z
    5e46:	31 81       	ldd	r19, Z+1	; 0x01
    5e48:	42 81       	ldd	r20, Z+2	; 0x02
    5e4a:	53 81       	ldd	r21, Z+3	; 0x03
    5e4c:	fe 01       	movw	r30, r28
    5e4e:	ea 57       	subi	r30, 0x7A	; 122
    5e50:	fd 4f       	sbci	r31, 0xFD	; 253
    5e52:	80 81       	ld	r24, Z
    5e54:	91 81       	ldd	r25, Z+1	; 0x01
    5e56:	a2 81       	ldd	r26, Z+2	; 0x02
    5e58:	b3 81       	ldd	r27, Z+3	; 0x03
    5e5a:	82 2b       	or	r24, r18
    5e5c:	93 2b       	or	r25, r19
    5e5e:	a4 2b       	or	r26, r20
    5e60:	b5 2b       	or	r27, r21
    5e62:	fe 01       	movw	r30, r28
    5e64:	ea 57       	subi	r30, 0x7A	; 122
    5e66:	fd 4f       	sbci	r31, 0xFD	; 253
    5e68:	80 83       	st	Z, r24
    5e6a:	91 83       	std	Z+1, r25	; 0x01
    5e6c:	a2 83       	std	Z+2, r26	; 0x02
    5e6e:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp2);
    5e70:	fe 01       	movw	r30, r28
    5e72:	e1 5d       	subi	r30, 0xD1	; 209
    5e74:	fd 4f       	sbci	r31, 0xFD	; 253
    5e76:	84 eb       	ldi	r24, 0xB4	; 180
    5e78:	90 e0       	ldi	r25, 0x00	; 0
    5e7a:	91 83       	std	Z+1, r25	; 0x01
    5e7c:	80 83       	st	Z, r24
    5e7e:	fe 01       	movw	r30, r28
    5e80:	e1 5d       	subi	r30, 0xD1	; 209
    5e82:	fd 4f       	sbci	r31, 0xFD	; 253
    5e84:	80 81       	ld	r24, Z
    5e86:	91 81       	ldd	r25, Z+1	; 0x01
    5e88:	9c 01       	movw	r18, r24
    5e8a:	f9 01       	movw	r30, r18
    5e8c:	85 91       	lpm	r24, Z+
    5e8e:	95 91       	lpm	r25, Z+
    5e90:	a5 91       	lpm	r26, Z+
    5e92:	b4 91       	lpm	r27, Z+
    5e94:	9f 01       	movw	r18, r30
    5e96:	fe 01       	movw	r30, r28
    5e98:	e5 5d       	subi	r30, 0xD5	; 213
    5e9a:	fd 4f       	sbci	r31, 0xFD	; 253
    5e9c:	80 83       	st	Z, r24
    5e9e:	91 83       	std	Z+1, r25	; 0x01
    5ea0:	a2 83       	std	Z+2, r26	; 0x02
    5ea2:	b3 83       	std	Z+3, r27	; 0x03
    5ea4:	fe 01       	movw	r30, r28
    5ea6:	e1 5d       	subi	r30, 0xD1	; 209
    5ea8:	fd 4f       	sbci	r31, 0xFD	; 253
    5eaa:	31 83       	std	Z+1, r19	; 0x01
    5eac:	20 83       	st	Z, r18
    5eae:	fe 01       	movw	r30, r28
    5eb0:	e5 5d       	subi	r30, 0xD5	; 213
    5eb2:	fd 4f       	sbci	r31, 0xFD	; 253
    5eb4:	20 81       	ld	r18, Z
    5eb6:	31 81       	ldd	r19, Z+1	; 0x01
    5eb8:	42 81       	ldd	r20, Z+2	; 0x02
    5eba:	53 81       	ldd	r21, Z+3	; 0x03
    5ebc:	fe 01       	movw	r30, r28
    5ebe:	ea 57       	subi	r30, 0x7A	; 122
    5ec0:	fd 4f       	sbci	r31, 0xFD	; 253
    5ec2:	80 81       	ld	r24, Z
    5ec4:	91 81       	ldd	r25, Z+1	; 0x01
    5ec6:	a2 81       	ldd	r26, Z+2	; 0x02
    5ec8:	b3 81       	ldd	r27, Z+3	; 0x03
    5eca:	82 2b       	or	r24, r18
    5ecc:	93 2b       	or	r25, r19
    5ece:	a4 2b       	or	r26, r20
    5ed0:	b5 2b       	or	r27, r21
    5ed2:	fe 01       	movw	r30, r28
    5ed4:	ea 57       	subi	r30, 0x7A	; 122
    5ed6:	fd 4f       	sbci	r31, 0xFD	; 253
    5ed8:	80 83       	st	Z, r24
    5eda:	91 83       	std	Z+1, r25	; 0x01
    5edc:	a2 83       	std	Z+2, r26	; 0x02
    5ede:	b3 83       	std	Z+3, r27	; 0x03
    5ee0:	89 c1       	rjmp	.+786    	; 0x61f4 <main+0x4548>
      break;
    case 3:
      lLEDs |= pgm_read_dword(words+def_mp4);
    5ee2:	fe 01       	movw	r30, r28
    5ee4:	e7 5d       	subi	r30, 0xD7	; 215
    5ee6:	fd 4f       	sbci	r31, 0xFD	; 253
    5ee8:	8c eb       	ldi	r24, 0xBC	; 188
    5eea:	90 e0       	ldi	r25, 0x00	; 0
    5eec:	91 83       	std	Z+1, r25	; 0x01
    5eee:	80 83       	st	Z, r24
    5ef0:	fe 01       	movw	r30, r28
    5ef2:	e7 5d       	subi	r30, 0xD7	; 215
    5ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    5ef6:	80 81       	ld	r24, Z
    5ef8:	91 81       	ldd	r25, Z+1	; 0x01
    5efa:	9c 01       	movw	r18, r24
    5efc:	f9 01       	movw	r30, r18
    5efe:	85 91       	lpm	r24, Z+
    5f00:	95 91       	lpm	r25, Z+
    5f02:	a5 91       	lpm	r26, Z+
    5f04:	b4 91       	lpm	r27, Z+
    5f06:	9f 01       	movw	r18, r30
    5f08:	fe 01       	movw	r30, r28
    5f0a:	eb 5d       	subi	r30, 0xDB	; 219
    5f0c:	fd 4f       	sbci	r31, 0xFD	; 253
    5f0e:	80 83       	st	Z, r24
    5f10:	91 83       	std	Z+1, r25	; 0x01
    5f12:	a2 83       	std	Z+2, r26	; 0x02
    5f14:	b3 83       	std	Z+3, r27	; 0x03
    5f16:	fe 01       	movw	r30, r28
    5f18:	e7 5d       	subi	r30, 0xD7	; 215
    5f1a:	fd 4f       	sbci	r31, 0xFD	; 253
    5f1c:	31 83       	std	Z+1, r19	; 0x01
    5f1e:	20 83       	st	Z, r18
    5f20:	fe 01       	movw	r30, r28
    5f22:	eb 5d       	subi	r30, 0xDB	; 219
    5f24:	fd 4f       	sbci	r31, 0xFD	; 253
    5f26:	20 81       	ld	r18, Z
    5f28:	31 81       	ldd	r19, Z+1	; 0x01
    5f2a:	42 81       	ldd	r20, Z+2	; 0x02
    5f2c:	53 81       	ldd	r21, Z+3	; 0x03
    5f2e:	fe 01       	movw	r30, r28
    5f30:	ea 57       	subi	r30, 0x7A	; 122
    5f32:	fd 4f       	sbci	r31, 0xFD	; 253
    5f34:	80 81       	ld	r24, Z
    5f36:	91 81       	ldd	r25, Z+1	; 0x01
    5f38:	a2 81       	ldd	r26, Z+2	; 0x02
    5f3a:	b3 81       	ldd	r27, Z+3	; 0x03
    5f3c:	82 2b       	or	r24, r18
    5f3e:	93 2b       	or	r25, r19
    5f40:	a4 2b       	or	r26, r20
    5f42:	b5 2b       	or	r27, r21
    5f44:	fe 01       	movw	r30, r28
    5f46:	ea 57       	subi	r30, 0x7A	; 122
    5f48:	fd 4f       	sbci	r31, 0xFD	; 253
    5f4a:	80 83       	st	Z, r24
    5f4c:	91 83       	std	Z+1, r25	; 0x01
    5f4e:	a2 83       	std	Z+2, r26	; 0x02
    5f50:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp2);
    5f52:	fe 01       	movw	r30, r28
    5f54:	ed 5d       	subi	r30, 0xDD	; 221
    5f56:	fd 4f       	sbci	r31, 0xFD	; 253
    5f58:	84 eb       	ldi	r24, 0xB4	; 180
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	91 83       	std	Z+1, r25	; 0x01
    5f5e:	80 83       	st	Z, r24
    5f60:	fe 01       	movw	r30, r28
    5f62:	ed 5d       	subi	r30, 0xDD	; 221
    5f64:	fd 4f       	sbci	r31, 0xFD	; 253
    5f66:	80 81       	ld	r24, Z
    5f68:	91 81       	ldd	r25, Z+1	; 0x01
    5f6a:	9c 01       	movw	r18, r24
    5f6c:	f9 01       	movw	r30, r18
    5f6e:	85 91       	lpm	r24, Z+
    5f70:	95 91       	lpm	r25, Z+
    5f72:	a5 91       	lpm	r26, Z+
    5f74:	b4 91       	lpm	r27, Z+
    5f76:	9f 01       	movw	r18, r30
    5f78:	fe 01       	movw	r30, r28
    5f7a:	e1 5e       	subi	r30, 0xE1	; 225
    5f7c:	fd 4f       	sbci	r31, 0xFD	; 253
    5f7e:	80 83       	st	Z, r24
    5f80:	91 83       	std	Z+1, r25	; 0x01
    5f82:	a2 83       	std	Z+2, r26	; 0x02
    5f84:	b3 83       	std	Z+3, r27	; 0x03
    5f86:	fe 01       	movw	r30, r28
    5f88:	ed 5d       	subi	r30, 0xDD	; 221
    5f8a:	fd 4f       	sbci	r31, 0xFD	; 253
    5f8c:	31 83       	std	Z+1, r19	; 0x01
    5f8e:	20 83       	st	Z, r18
    5f90:	fe 01       	movw	r30, r28
    5f92:	e1 5e       	subi	r30, 0xE1	; 225
    5f94:	fd 4f       	sbci	r31, 0xFD	; 253
    5f96:	20 81       	ld	r18, Z
    5f98:	31 81       	ldd	r19, Z+1	; 0x01
    5f9a:	42 81       	ldd	r20, Z+2	; 0x02
    5f9c:	53 81       	ldd	r21, Z+3	; 0x03
    5f9e:	fe 01       	movw	r30, r28
    5fa0:	ea 57       	subi	r30, 0x7A	; 122
    5fa2:	fd 4f       	sbci	r31, 0xFD	; 253
    5fa4:	80 81       	ld	r24, Z
    5fa6:	91 81       	ldd	r25, Z+1	; 0x01
    5fa8:	a2 81       	ldd	r26, Z+2	; 0x02
    5faa:	b3 81       	ldd	r27, Z+3	; 0x03
    5fac:	82 2b       	or	r24, r18
    5fae:	93 2b       	or	r25, r19
    5fb0:	a4 2b       	or	r26, r20
    5fb2:	b5 2b       	or	r27, r21
    5fb4:	fe 01       	movw	r30, r28
    5fb6:	ea 57       	subi	r30, 0x7A	; 122
    5fb8:	fd 4f       	sbci	r31, 0xFD	; 253
    5fba:	80 83       	st	Z, r24
    5fbc:	91 83       	std	Z+1, r25	; 0x01
    5fbe:	a2 83       	std	Z+2, r26	; 0x02
    5fc0:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp1);
    5fc2:	fe 01       	movw	r30, r28
    5fc4:	e3 5e       	subi	r30, 0xE3	; 227
    5fc6:	fd 4f       	sbci	r31, 0xFD	; 253
    5fc8:	80 eb       	ldi	r24, 0xB0	; 176
    5fca:	90 e0       	ldi	r25, 0x00	; 0
    5fcc:	91 83       	std	Z+1, r25	; 0x01
    5fce:	80 83       	st	Z, r24
    5fd0:	fe 01       	movw	r30, r28
    5fd2:	e3 5e       	subi	r30, 0xE3	; 227
    5fd4:	fd 4f       	sbci	r31, 0xFD	; 253
    5fd6:	80 81       	ld	r24, Z
    5fd8:	91 81       	ldd	r25, Z+1	; 0x01
    5fda:	9c 01       	movw	r18, r24
    5fdc:	f9 01       	movw	r30, r18
    5fde:	85 91       	lpm	r24, Z+
    5fe0:	95 91       	lpm	r25, Z+
    5fe2:	a5 91       	lpm	r26, Z+
    5fe4:	b4 91       	lpm	r27, Z+
    5fe6:	9f 01       	movw	r18, r30
    5fe8:	fe 01       	movw	r30, r28
    5fea:	e7 5e       	subi	r30, 0xE7	; 231
    5fec:	fd 4f       	sbci	r31, 0xFD	; 253
    5fee:	80 83       	st	Z, r24
    5ff0:	91 83       	std	Z+1, r25	; 0x01
    5ff2:	a2 83       	std	Z+2, r26	; 0x02
    5ff4:	b3 83       	std	Z+3, r27	; 0x03
    5ff6:	fe 01       	movw	r30, r28
    5ff8:	e3 5e       	subi	r30, 0xE3	; 227
    5ffa:	fd 4f       	sbci	r31, 0xFD	; 253
    5ffc:	31 83       	std	Z+1, r19	; 0x01
    5ffe:	20 83       	st	Z, r18
    6000:	fe 01       	movw	r30, r28
    6002:	e7 5e       	subi	r30, 0xE7	; 231
    6004:	fd 4f       	sbci	r31, 0xFD	; 253
    6006:	20 81       	ld	r18, Z
    6008:	31 81       	ldd	r19, Z+1	; 0x01
    600a:	42 81       	ldd	r20, Z+2	; 0x02
    600c:	53 81       	ldd	r21, Z+3	; 0x03
    600e:	fe 01       	movw	r30, r28
    6010:	ea 57       	subi	r30, 0x7A	; 122
    6012:	fd 4f       	sbci	r31, 0xFD	; 253
    6014:	80 81       	ld	r24, Z
    6016:	91 81       	ldd	r25, Z+1	; 0x01
    6018:	a2 81       	ldd	r26, Z+2	; 0x02
    601a:	b3 81       	ldd	r27, Z+3	; 0x03
    601c:	82 2b       	or	r24, r18
    601e:	93 2b       	or	r25, r19
    6020:	a4 2b       	or	r26, r20
    6022:	b5 2b       	or	r27, r21
    6024:	fe 01       	movw	r30, r28
    6026:	ea 57       	subi	r30, 0x7A	; 122
    6028:	fd 4f       	sbci	r31, 0xFD	; 253
    602a:	80 83       	st	Z, r24
    602c:	91 83       	std	Z+1, r25	; 0x01
    602e:	a2 83       	std	Z+2, r26	; 0x02
    6030:	b3 83       	std	Z+3, r27	; 0x03
    6032:	e0 c0       	rjmp	.+448    	; 0x61f4 <main+0x4548>
      break;
    case 4:
      lLEDs |= pgm_read_dword(words+def_mp4);
    6034:	fe 01       	movw	r30, r28
    6036:	e9 5e       	subi	r30, 0xE9	; 233
    6038:	fd 4f       	sbci	r31, 0xFD	; 253
    603a:	8c eb       	ldi	r24, 0xBC	; 188
    603c:	90 e0       	ldi	r25, 0x00	; 0
    603e:	91 83       	std	Z+1, r25	; 0x01
    6040:	80 83       	st	Z, r24
    6042:	fe 01       	movw	r30, r28
    6044:	e9 5e       	subi	r30, 0xE9	; 233
    6046:	fd 4f       	sbci	r31, 0xFD	; 253
    6048:	80 81       	ld	r24, Z
    604a:	91 81       	ldd	r25, Z+1	; 0x01
    604c:	9c 01       	movw	r18, r24
    604e:	f9 01       	movw	r30, r18
    6050:	85 91       	lpm	r24, Z+
    6052:	95 91       	lpm	r25, Z+
    6054:	a5 91       	lpm	r26, Z+
    6056:	b4 91       	lpm	r27, Z+
    6058:	9f 01       	movw	r18, r30
    605a:	fe 01       	movw	r30, r28
    605c:	ed 5e       	subi	r30, 0xED	; 237
    605e:	fd 4f       	sbci	r31, 0xFD	; 253
    6060:	80 83       	st	Z, r24
    6062:	91 83       	std	Z+1, r25	; 0x01
    6064:	a2 83       	std	Z+2, r26	; 0x02
    6066:	b3 83       	std	Z+3, r27	; 0x03
    6068:	fe 01       	movw	r30, r28
    606a:	e9 5e       	subi	r30, 0xE9	; 233
    606c:	fd 4f       	sbci	r31, 0xFD	; 253
    606e:	31 83       	std	Z+1, r19	; 0x01
    6070:	20 83       	st	Z, r18
    6072:	fe 01       	movw	r30, r28
    6074:	ed 5e       	subi	r30, 0xED	; 237
    6076:	fd 4f       	sbci	r31, 0xFD	; 253
    6078:	20 81       	ld	r18, Z
    607a:	31 81       	ldd	r19, Z+1	; 0x01
    607c:	42 81       	ldd	r20, Z+2	; 0x02
    607e:	53 81       	ldd	r21, Z+3	; 0x03
    6080:	fe 01       	movw	r30, r28
    6082:	ea 57       	subi	r30, 0x7A	; 122
    6084:	fd 4f       	sbci	r31, 0xFD	; 253
    6086:	80 81       	ld	r24, Z
    6088:	91 81       	ldd	r25, Z+1	; 0x01
    608a:	a2 81       	ldd	r26, Z+2	; 0x02
    608c:	b3 81       	ldd	r27, Z+3	; 0x03
    608e:	82 2b       	or	r24, r18
    6090:	93 2b       	or	r25, r19
    6092:	a4 2b       	or	r26, r20
    6094:	b5 2b       	or	r27, r21
    6096:	fe 01       	movw	r30, r28
    6098:	ea 57       	subi	r30, 0x7A	; 122
    609a:	fd 4f       	sbci	r31, 0xFD	; 253
    609c:	80 83       	st	Z, r24
    609e:	91 83       	std	Z+1, r25	; 0x01
    60a0:	a2 83       	std	Z+2, r26	; 0x02
    60a2:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp2);
    60a4:	fe 01       	movw	r30, r28
    60a6:	ef 5e       	subi	r30, 0xEF	; 239
    60a8:	fd 4f       	sbci	r31, 0xFD	; 253
    60aa:	84 eb       	ldi	r24, 0xB4	; 180
    60ac:	90 e0       	ldi	r25, 0x00	; 0
    60ae:	91 83       	std	Z+1, r25	; 0x01
    60b0:	80 83       	st	Z, r24
    60b2:	fe 01       	movw	r30, r28
    60b4:	ef 5e       	subi	r30, 0xEF	; 239
    60b6:	fd 4f       	sbci	r31, 0xFD	; 253
    60b8:	80 81       	ld	r24, Z
    60ba:	91 81       	ldd	r25, Z+1	; 0x01
    60bc:	9c 01       	movw	r18, r24
    60be:	f9 01       	movw	r30, r18
    60c0:	85 91       	lpm	r24, Z+
    60c2:	95 91       	lpm	r25, Z+
    60c4:	a5 91       	lpm	r26, Z+
    60c6:	b4 91       	lpm	r27, Z+
    60c8:	9f 01       	movw	r18, r30
    60ca:	fe 01       	movw	r30, r28
    60cc:	e3 5f       	subi	r30, 0xF3	; 243
    60ce:	fd 4f       	sbci	r31, 0xFD	; 253
    60d0:	80 83       	st	Z, r24
    60d2:	91 83       	std	Z+1, r25	; 0x01
    60d4:	a2 83       	std	Z+2, r26	; 0x02
    60d6:	b3 83       	std	Z+3, r27	; 0x03
    60d8:	fe 01       	movw	r30, r28
    60da:	ef 5e       	subi	r30, 0xEF	; 239
    60dc:	fd 4f       	sbci	r31, 0xFD	; 253
    60de:	31 83       	std	Z+1, r19	; 0x01
    60e0:	20 83       	st	Z, r18
    60e2:	fe 01       	movw	r30, r28
    60e4:	e3 5f       	subi	r30, 0xF3	; 243
    60e6:	fd 4f       	sbci	r31, 0xFD	; 253
    60e8:	20 81       	ld	r18, Z
    60ea:	31 81       	ldd	r19, Z+1	; 0x01
    60ec:	42 81       	ldd	r20, Z+2	; 0x02
    60ee:	53 81       	ldd	r21, Z+3	; 0x03
    60f0:	fe 01       	movw	r30, r28
    60f2:	ea 57       	subi	r30, 0x7A	; 122
    60f4:	fd 4f       	sbci	r31, 0xFD	; 253
    60f6:	80 81       	ld	r24, Z
    60f8:	91 81       	ldd	r25, Z+1	; 0x01
    60fa:	a2 81       	ldd	r26, Z+2	; 0x02
    60fc:	b3 81       	ldd	r27, Z+3	; 0x03
    60fe:	82 2b       	or	r24, r18
    6100:	93 2b       	or	r25, r19
    6102:	a4 2b       	or	r26, r20
    6104:	b5 2b       	or	r27, r21
    6106:	fe 01       	movw	r30, r28
    6108:	ea 57       	subi	r30, 0x7A	; 122
    610a:	fd 4f       	sbci	r31, 0xFD	; 253
    610c:	80 83       	st	Z, r24
    610e:	91 83       	std	Z+1, r25	; 0x01
    6110:	a2 83       	std	Z+2, r26	; 0x02
    6112:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp1);
    6114:	fe 01       	movw	r30, r28
    6116:	e5 5f       	subi	r30, 0xF5	; 245
    6118:	fd 4f       	sbci	r31, 0xFD	; 253
    611a:	80 eb       	ldi	r24, 0xB0	; 176
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	91 83       	std	Z+1, r25	; 0x01
    6120:	80 83       	st	Z, r24
    6122:	fe 01       	movw	r30, r28
    6124:	e5 5f       	subi	r30, 0xF5	; 245
    6126:	fd 4f       	sbci	r31, 0xFD	; 253
    6128:	80 81       	ld	r24, Z
    612a:	91 81       	ldd	r25, Z+1	; 0x01
    612c:	9c 01       	movw	r18, r24
    612e:	f9 01       	movw	r30, r18
    6130:	85 91       	lpm	r24, Z+
    6132:	95 91       	lpm	r25, Z+
    6134:	a5 91       	lpm	r26, Z+
    6136:	b4 91       	lpm	r27, Z+
    6138:	9f 01       	movw	r18, r30
    613a:	fe 01       	movw	r30, r28
    613c:	e9 5f       	subi	r30, 0xF9	; 249
    613e:	fd 4f       	sbci	r31, 0xFD	; 253
    6140:	80 83       	st	Z, r24
    6142:	91 83       	std	Z+1, r25	; 0x01
    6144:	a2 83       	std	Z+2, r26	; 0x02
    6146:	b3 83       	std	Z+3, r27	; 0x03
    6148:	fe 01       	movw	r30, r28
    614a:	e5 5f       	subi	r30, 0xF5	; 245
    614c:	fd 4f       	sbci	r31, 0xFD	; 253
    614e:	31 83       	std	Z+1, r19	; 0x01
    6150:	20 83       	st	Z, r18
    6152:	fe 01       	movw	r30, r28
    6154:	e9 5f       	subi	r30, 0xF9	; 249
    6156:	fd 4f       	sbci	r31, 0xFD	; 253
    6158:	20 81       	ld	r18, Z
    615a:	31 81       	ldd	r19, Z+1	; 0x01
    615c:	42 81       	ldd	r20, Z+2	; 0x02
    615e:	53 81       	ldd	r21, Z+3	; 0x03
    6160:	fe 01       	movw	r30, r28
    6162:	ea 57       	subi	r30, 0x7A	; 122
    6164:	fd 4f       	sbci	r31, 0xFD	; 253
    6166:	80 81       	ld	r24, Z
    6168:	91 81       	ldd	r25, Z+1	; 0x01
    616a:	a2 81       	ldd	r26, Z+2	; 0x02
    616c:	b3 81       	ldd	r27, Z+3	; 0x03
    616e:	82 2b       	or	r24, r18
    6170:	93 2b       	or	r25, r19
    6172:	a4 2b       	or	r26, r20
    6174:	b5 2b       	or	r27, r21
    6176:	fe 01       	movw	r30, r28
    6178:	ea 57       	subi	r30, 0x7A	; 122
    617a:	fd 4f       	sbci	r31, 0xFD	; 253
    617c:	80 83       	st	Z, r24
    617e:	91 83       	std	Z+1, r25	; 0x01
    6180:	a2 83       	std	Z+2, r26	; 0x02
    6182:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp3);
    6184:	fe 01       	movw	r30, r28
    6186:	eb 5f       	subi	r30, 0xFB	; 251
    6188:	fd 4f       	sbci	r31, 0xFD	; 253
    618a:	88 eb       	ldi	r24, 0xB8	; 184
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	91 83       	std	Z+1, r25	; 0x01
    6190:	80 83       	st	Z, r24
    6192:	fe 01       	movw	r30, r28
    6194:	eb 5f       	subi	r30, 0xFB	; 251
    6196:	fd 4f       	sbci	r31, 0xFD	; 253
    6198:	80 81       	ld	r24, Z
    619a:	91 81       	ldd	r25, Z+1	; 0x01
    619c:	9c 01       	movw	r18, r24
    619e:	f9 01       	movw	r30, r18
    61a0:	85 91       	lpm	r24, Z+
    61a2:	95 91       	lpm	r25, Z+
    61a4:	a5 91       	lpm	r26, Z+
    61a6:	b4 91       	lpm	r27, Z+
    61a8:	9f 01       	movw	r18, r30
    61aa:	fe 01       	movw	r30, r28
    61ac:	ef 5f       	subi	r30, 0xFF	; 255
    61ae:	fd 4f       	sbci	r31, 0xFD	; 253
    61b0:	80 83       	st	Z, r24
    61b2:	91 83       	std	Z+1, r25	; 0x01
    61b4:	a2 83       	std	Z+2, r26	; 0x02
    61b6:	b3 83       	std	Z+3, r27	; 0x03
    61b8:	fe 01       	movw	r30, r28
    61ba:	eb 5f       	subi	r30, 0xFB	; 251
    61bc:	fd 4f       	sbci	r31, 0xFD	; 253
    61be:	31 83       	std	Z+1, r19	; 0x01
    61c0:	20 83       	st	Z, r18
    61c2:	fe 01       	movw	r30, r28
    61c4:	ef 5f       	subi	r30, 0xFF	; 255
    61c6:	fd 4f       	sbci	r31, 0xFD	; 253
    61c8:	20 81       	ld	r18, Z
    61ca:	31 81       	ldd	r19, Z+1	; 0x01
    61cc:	42 81       	ldd	r20, Z+2	; 0x02
    61ce:	53 81       	ldd	r21, Z+3	; 0x03
    61d0:	fe 01       	movw	r30, r28
    61d2:	ea 57       	subi	r30, 0x7A	; 122
    61d4:	fd 4f       	sbci	r31, 0xFD	; 253
    61d6:	80 81       	ld	r24, Z
    61d8:	91 81       	ldd	r25, Z+1	; 0x01
    61da:	a2 81       	ldd	r26, Z+2	; 0x02
    61dc:	b3 81       	ldd	r27, Z+3	; 0x03
    61de:	82 2b       	or	r24, r18
    61e0:	93 2b       	or	r25, r19
    61e2:	a4 2b       	or	r26, r20
    61e4:	b5 2b       	or	r27, r21
    61e6:	fe 01       	movw	r30, r28
    61e8:	ea 57       	subi	r30, 0x7A	; 122
    61ea:	fd 4f       	sbci	r31, 0xFD	; 253
    61ec:	80 83       	st	Z, r24
    61ee:	91 83       	std	Z+1, r25	; 0x01
    61f0:	a2 83       	std	Z+2, r26	; 0x02
    61f2:	b3 83       	std	Z+3, r27	; 0x03
      break;
    }
    uint8_t hoffset = 0;
    61f4:	fe 01       	movw	r30, r28
    61f6:	eb 57       	subi	r30, 0x7B	; 123
    61f8:	fd 4f       	sbci	r31, 0xFD	; 253
    61fa:	10 82       	st	Z, r1
    if (time.mm < 5)
    61fc:	fe 01       	movw	r30, r28
    61fe:	e5 55       	subi	r30, 0x55	; 85
    6200:	fd 4f       	sbci	r31, 0xFD	; 253
    6202:	84 81       	ldd	r24, Z+4	; 0x04
    6204:	85 30       	cpi	r24, 0x05	; 5
    6206:	08 f4       	brcc	.+2      	; 0x620a <main+0x455e>
    6208:	82 c5       	rjmp	.+2820   	; 0x6d0e <main+0x5062>
    {
    }
    else if (time.mm < 10)
    620a:	fe 01       	movw	r30, r28
    620c:	e5 55       	subi	r30, 0x55	; 85
    620e:	fd 4f       	sbci	r31, 0xFD	; 253
    6210:	84 81       	ldd	r24, Z+4	; 0x04
    6212:	8a 30       	cpi	r24, 0x0A	; 10
    6214:	08 f0       	brcs	.+2      	; 0x6218 <main+0x456c>
    6216:	71 c0       	rjmp	.+226    	; 0x62fa <main+0x464e>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    6218:	fe 01       	movw	r30, r28
    621a:	e1 50       	subi	r30, 0x01	; 1
    621c:	fe 4f       	sbci	r31, 0xFE	; 254
    621e:	8c e5       	ldi	r24, 0x5C	; 92
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	91 83       	std	Z+1, r25	; 0x01
    6224:	80 83       	st	Z, r24
    6226:	fe 01       	movw	r30, r28
    6228:	e1 50       	subi	r30, 0x01	; 1
    622a:	fe 4f       	sbci	r31, 0xFE	; 254
    622c:	80 81       	ld	r24, Z
    622e:	91 81       	ldd	r25, Z+1	; 0x01
    6230:	9c 01       	movw	r18, r24
    6232:	f9 01       	movw	r30, r18
    6234:	85 91       	lpm	r24, Z+
    6236:	95 91       	lpm	r25, Z+
    6238:	a5 91       	lpm	r26, Z+
    623a:	b4 91       	lpm	r27, Z+
    623c:	9f 01       	movw	r18, r30
    623e:	fe 01       	movw	r30, r28
    6240:	e5 50       	subi	r30, 0x05	; 5
    6242:	fe 4f       	sbci	r31, 0xFE	; 254
    6244:	80 83       	st	Z, r24
    6246:	91 83       	std	Z+1, r25	; 0x01
    6248:	a2 83       	std	Z+2, r26	; 0x02
    624a:	b3 83       	std	Z+3, r27	; 0x03
    624c:	fe 01       	movw	r30, r28
    624e:	e1 50       	subi	r30, 0x01	; 1
    6250:	fe 4f       	sbci	r31, 0xFE	; 254
    6252:	31 83       	std	Z+1, r19	; 0x01
    6254:	20 83       	st	Z, r18
    6256:	fe 01       	movw	r30, r28
    6258:	e5 50       	subi	r30, 0x05	; 5
    625a:	fe 4f       	sbci	r31, 0xFE	; 254
    625c:	20 81       	ld	r18, Z
    625e:	31 81       	ldd	r19, Z+1	; 0x01
    6260:	42 81       	ldd	r20, Z+2	; 0x02
    6262:	53 81       	ldd	r21, Z+3	; 0x03
    6264:	fe 01       	movw	r30, r28
    6266:	ea 57       	subi	r30, 0x7A	; 122
    6268:	fd 4f       	sbci	r31, 0xFD	; 253
    626a:	80 81       	ld	r24, Z
    626c:	91 81       	ldd	r25, Z+1	; 0x01
    626e:	a2 81       	ldd	r26, Z+2	; 0x02
    6270:	b3 81       	ldd	r27, Z+3	; 0x03
    6272:	82 2b       	or	r24, r18
    6274:	93 2b       	or	r25, r19
    6276:	a4 2b       	or	r26, r20
    6278:	b5 2b       	or	r27, r21
    627a:	fe 01       	movw	r30, r28
    627c:	ea 57       	subi	r30, 0x7A	; 122
    627e:	fd 4f       	sbci	r31, 0xFD	; 253
    6280:	80 83       	st	Z, r24
    6282:	91 83       	std	Z+1, r25	; 0x01
    6284:	a2 83       	std	Z+2, r26	; 0x02
    6286:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    6288:	fe 01       	movw	r30, r28
    628a:	e7 50       	subi	r30, 0x07	; 7
    628c:	fe 4f       	sbci	r31, 0xFE	; 254
    628e:	80 e7       	ldi	r24, 0x70	; 112
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	91 83       	std	Z+1, r25	; 0x01
    6294:	80 83       	st	Z, r24
    6296:	fe 01       	movw	r30, r28
    6298:	e7 50       	subi	r30, 0x07	; 7
    629a:	fe 4f       	sbci	r31, 0xFE	; 254
    629c:	80 81       	ld	r24, Z
    629e:	91 81       	ldd	r25, Z+1	; 0x01
    62a0:	9c 01       	movw	r18, r24
    62a2:	f9 01       	movw	r30, r18
    62a4:	85 91       	lpm	r24, Z+
    62a6:	95 91       	lpm	r25, Z+
    62a8:	a5 91       	lpm	r26, Z+
    62aa:	b4 91       	lpm	r27, Z+
    62ac:	9f 01       	movw	r18, r30
    62ae:	fe 01       	movw	r30, r28
    62b0:	eb 50       	subi	r30, 0x0B	; 11
    62b2:	fe 4f       	sbci	r31, 0xFE	; 254
    62b4:	80 83       	st	Z, r24
    62b6:	91 83       	std	Z+1, r25	; 0x01
    62b8:	a2 83       	std	Z+2, r26	; 0x02
    62ba:	b3 83       	std	Z+3, r27	; 0x03
    62bc:	fe 01       	movw	r30, r28
    62be:	e7 50       	subi	r30, 0x07	; 7
    62c0:	fe 4f       	sbci	r31, 0xFE	; 254
    62c2:	31 83       	std	Z+1, r19	; 0x01
    62c4:	20 83       	st	Z, r18
    62c6:	fe 01       	movw	r30, r28
    62c8:	eb 50       	subi	r30, 0x0B	; 11
    62ca:	fe 4f       	sbci	r31, 0xFE	; 254
    62cc:	20 81       	ld	r18, Z
    62ce:	31 81       	ldd	r19, Z+1	; 0x01
    62d0:	42 81       	ldd	r20, Z+2	; 0x02
    62d2:	53 81       	ldd	r21, Z+3	; 0x03
    62d4:	fe 01       	movw	r30, r28
    62d6:	ea 57       	subi	r30, 0x7A	; 122
    62d8:	fd 4f       	sbci	r31, 0xFD	; 253
    62da:	80 81       	ld	r24, Z
    62dc:	91 81       	ldd	r25, Z+1	; 0x01
    62de:	a2 81       	ldd	r26, Z+2	; 0x02
    62e0:	b3 81       	ldd	r27, Z+3	; 0x03
    62e2:	82 2b       	or	r24, r18
    62e4:	93 2b       	or	r25, r19
    62e6:	a4 2b       	or	r26, r20
    62e8:	b5 2b       	or	r27, r21
    62ea:	fe 01       	movw	r30, r28
    62ec:	ea 57       	subi	r30, 0x7A	; 122
    62ee:	fd 4f       	sbci	r31, 0xFD	; 253
    62f0:	80 83       	st	Z, r24
    62f2:	91 83       	std	Z+1, r25	; 0x01
    62f4:	a2 83       	std	Z+2, r26	; 0x02
    62f6:	b3 83       	std	Z+3, r27	; 0x03
    62f8:	0a c5       	rjmp	.+2580   	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 15)
    62fa:	fe 01       	movw	r30, r28
    62fc:	e5 55       	subi	r30, 0x55	; 85
    62fe:	fd 4f       	sbci	r31, 0xFD	; 253
    6300:	84 81       	ldd	r24, Z+4	; 0x04
    6302:	8f 30       	cpi	r24, 0x0F	; 15
    6304:	08 f0       	brcs	.+2      	; 0x6308 <main+0x465c>
    6306:	71 c0       	rjmp	.+226    	; 0x63ea <main+0x473e>
    {
      lLEDs |= pgm_read_dword(words+def_zehnM);
    6308:	fe 01       	movw	r30, r28
    630a:	ed 50       	subi	r30, 0x0D	; 13
    630c:	fe 4f       	sbci	r31, 0xFE	; 254
    630e:	80 e6       	ldi	r24, 0x60	; 96
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	91 83       	std	Z+1, r25	; 0x01
    6314:	80 83       	st	Z, r24
    6316:	fe 01       	movw	r30, r28
    6318:	ed 50       	subi	r30, 0x0D	; 13
    631a:	fe 4f       	sbci	r31, 0xFE	; 254
    631c:	80 81       	ld	r24, Z
    631e:	91 81       	ldd	r25, Z+1	; 0x01
    6320:	9c 01       	movw	r18, r24
    6322:	f9 01       	movw	r30, r18
    6324:	85 91       	lpm	r24, Z+
    6326:	95 91       	lpm	r25, Z+
    6328:	a5 91       	lpm	r26, Z+
    632a:	b4 91       	lpm	r27, Z+
    632c:	9f 01       	movw	r18, r30
    632e:	fe 01       	movw	r30, r28
    6330:	e1 51       	subi	r30, 0x11	; 17
    6332:	fe 4f       	sbci	r31, 0xFE	; 254
    6334:	80 83       	st	Z, r24
    6336:	91 83       	std	Z+1, r25	; 0x01
    6338:	a2 83       	std	Z+2, r26	; 0x02
    633a:	b3 83       	std	Z+3, r27	; 0x03
    633c:	fe 01       	movw	r30, r28
    633e:	ed 50       	subi	r30, 0x0D	; 13
    6340:	fe 4f       	sbci	r31, 0xFE	; 254
    6342:	31 83       	std	Z+1, r19	; 0x01
    6344:	20 83       	st	Z, r18
    6346:	fe 01       	movw	r30, r28
    6348:	e1 51       	subi	r30, 0x11	; 17
    634a:	fe 4f       	sbci	r31, 0xFE	; 254
    634c:	20 81       	ld	r18, Z
    634e:	31 81       	ldd	r19, Z+1	; 0x01
    6350:	42 81       	ldd	r20, Z+2	; 0x02
    6352:	53 81       	ldd	r21, Z+3	; 0x03
    6354:	fe 01       	movw	r30, r28
    6356:	ea 57       	subi	r30, 0x7A	; 122
    6358:	fd 4f       	sbci	r31, 0xFD	; 253
    635a:	80 81       	ld	r24, Z
    635c:	91 81       	ldd	r25, Z+1	; 0x01
    635e:	a2 81       	ldd	r26, Z+2	; 0x02
    6360:	b3 81       	ldd	r27, Z+3	; 0x03
    6362:	82 2b       	or	r24, r18
    6364:	93 2b       	or	r25, r19
    6366:	a4 2b       	or	r26, r20
    6368:	b5 2b       	or	r27, r21
    636a:	fe 01       	movw	r30, r28
    636c:	ea 57       	subi	r30, 0x7A	; 122
    636e:	fd 4f       	sbci	r31, 0xFD	; 253
    6370:	80 83       	st	Z, r24
    6372:	91 83       	std	Z+1, r25	; 0x01
    6374:	a2 83       	std	Z+2, r26	; 0x02
    6376:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    6378:	fe 01       	movw	r30, r28
    637a:	e3 51       	subi	r30, 0x13	; 19
    637c:	fe 4f       	sbci	r31, 0xFE	; 254
    637e:	80 e7       	ldi	r24, 0x70	; 112
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	91 83       	std	Z+1, r25	; 0x01
    6384:	80 83       	st	Z, r24
    6386:	fe 01       	movw	r30, r28
    6388:	e3 51       	subi	r30, 0x13	; 19
    638a:	fe 4f       	sbci	r31, 0xFE	; 254
    638c:	80 81       	ld	r24, Z
    638e:	91 81       	ldd	r25, Z+1	; 0x01
    6390:	9c 01       	movw	r18, r24
    6392:	f9 01       	movw	r30, r18
    6394:	85 91       	lpm	r24, Z+
    6396:	95 91       	lpm	r25, Z+
    6398:	a5 91       	lpm	r26, Z+
    639a:	b4 91       	lpm	r27, Z+
    639c:	9f 01       	movw	r18, r30
    639e:	fe 01       	movw	r30, r28
    63a0:	e7 51       	subi	r30, 0x17	; 23
    63a2:	fe 4f       	sbci	r31, 0xFE	; 254
    63a4:	80 83       	st	Z, r24
    63a6:	91 83       	std	Z+1, r25	; 0x01
    63a8:	a2 83       	std	Z+2, r26	; 0x02
    63aa:	b3 83       	std	Z+3, r27	; 0x03
    63ac:	fe 01       	movw	r30, r28
    63ae:	e3 51       	subi	r30, 0x13	; 19
    63b0:	fe 4f       	sbci	r31, 0xFE	; 254
    63b2:	31 83       	std	Z+1, r19	; 0x01
    63b4:	20 83       	st	Z, r18
    63b6:	fe 01       	movw	r30, r28
    63b8:	e7 51       	subi	r30, 0x17	; 23
    63ba:	fe 4f       	sbci	r31, 0xFE	; 254
    63bc:	20 81       	ld	r18, Z
    63be:	31 81       	ldd	r19, Z+1	; 0x01
    63c0:	42 81       	ldd	r20, Z+2	; 0x02
    63c2:	53 81       	ldd	r21, Z+3	; 0x03
    63c4:	fe 01       	movw	r30, r28
    63c6:	ea 57       	subi	r30, 0x7A	; 122
    63c8:	fd 4f       	sbci	r31, 0xFD	; 253
    63ca:	80 81       	ld	r24, Z
    63cc:	91 81       	ldd	r25, Z+1	; 0x01
    63ce:	a2 81       	ldd	r26, Z+2	; 0x02
    63d0:	b3 81       	ldd	r27, Z+3	; 0x03
    63d2:	82 2b       	or	r24, r18
    63d4:	93 2b       	or	r25, r19
    63d6:	a4 2b       	or	r26, r20
    63d8:	b5 2b       	or	r27, r21
    63da:	fe 01       	movw	r30, r28
    63dc:	ea 57       	subi	r30, 0x7A	; 122
    63de:	fd 4f       	sbci	r31, 0xFD	; 253
    63e0:	80 83       	st	Z, r24
    63e2:	91 83       	std	Z+1, r25	; 0x01
    63e4:	a2 83       	std	Z+2, r26	; 0x02
    63e6:	b3 83       	std	Z+3, r27	; 0x03
    63e8:	92 c4       	rjmp	.+2340   	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 20)
    63ea:	fe 01       	movw	r30, r28
    63ec:	e5 55       	subi	r30, 0x55	; 85
    63ee:	fd 4f       	sbci	r31, 0xFD	; 253
    63f0:	84 81       	ldd	r24, Z+4	; 0x04
    63f2:	84 31       	cpi	r24, 0x14	; 20
    63f4:	08 f0       	brcs	.+2      	; 0x63f8 <main+0x474c>
    63f6:	71 c0       	rjmp	.+226    	; 0x64da <main+0x482e>
    {
      lLEDs |= pgm_read_dword(words+def_viertelM);
    63f8:	fe 01       	movw	r30, r28
    63fa:	e9 51       	subi	r30, 0x19	; 25
    63fc:	fe 4f       	sbci	r31, 0xFE	; 254
    63fe:	8c e6       	ldi	r24, 0x6C	; 108
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	91 83       	std	Z+1, r25	; 0x01
    6404:	80 83       	st	Z, r24
    6406:	fe 01       	movw	r30, r28
    6408:	e9 51       	subi	r30, 0x19	; 25
    640a:	fe 4f       	sbci	r31, 0xFE	; 254
    640c:	80 81       	ld	r24, Z
    640e:	91 81       	ldd	r25, Z+1	; 0x01
    6410:	9c 01       	movw	r18, r24
    6412:	f9 01       	movw	r30, r18
    6414:	85 91       	lpm	r24, Z+
    6416:	95 91       	lpm	r25, Z+
    6418:	a5 91       	lpm	r26, Z+
    641a:	b4 91       	lpm	r27, Z+
    641c:	9f 01       	movw	r18, r30
    641e:	fe 01       	movw	r30, r28
    6420:	ed 51       	subi	r30, 0x1D	; 29
    6422:	fe 4f       	sbci	r31, 0xFE	; 254
    6424:	80 83       	st	Z, r24
    6426:	91 83       	std	Z+1, r25	; 0x01
    6428:	a2 83       	std	Z+2, r26	; 0x02
    642a:	b3 83       	std	Z+3, r27	; 0x03
    642c:	fe 01       	movw	r30, r28
    642e:	e9 51       	subi	r30, 0x19	; 25
    6430:	fe 4f       	sbci	r31, 0xFE	; 254
    6432:	31 83       	std	Z+1, r19	; 0x01
    6434:	20 83       	st	Z, r18
    6436:	fe 01       	movw	r30, r28
    6438:	ed 51       	subi	r30, 0x1D	; 29
    643a:	fe 4f       	sbci	r31, 0xFE	; 254
    643c:	20 81       	ld	r18, Z
    643e:	31 81       	ldd	r19, Z+1	; 0x01
    6440:	42 81       	ldd	r20, Z+2	; 0x02
    6442:	53 81       	ldd	r21, Z+3	; 0x03
    6444:	fe 01       	movw	r30, r28
    6446:	ea 57       	subi	r30, 0x7A	; 122
    6448:	fd 4f       	sbci	r31, 0xFD	; 253
    644a:	80 81       	ld	r24, Z
    644c:	91 81       	ldd	r25, Z+1	; 0x01
    644e:	a2 81       	ldd	r26, Z+2	; 0x02
    6450:	b3 81       	ldd	r27, Z+3	; 0x03
    6452:	82 2b       	or	r24, r18
    6454:	93 2b       	or	r25, r19
    6456:	a4 2b       	or	r26, r20
    6458:	b5 2b       	or	r27, r21
    645a:	fe 01       	movw	r30, r28
    645c:	ea 57       	subi	r30, 0x7A	; 122
    645e:	fd 4f       	sbci	r31, 0xFD	; 253
    6460:	80 83       	st	Z, r24
    6462:	91 83       	std	Z+1, r25	; 0x01
    6464:	a2 83       	std	Z+2, r26	; 0x02
    6466:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    6468:	fe 01       	movw	r30, r28
    646a:	ef 51       	subi	r30, 0x1F	; 31
    646c:	fe 4f       	sbci	r31, 0xFE	; 254
    646e:	80 e7       	ldi	r24, 0x70	; 112
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	91 83       	std	Z+1, r25	; 0x01
    6474:	80 83       	st	Z, r24
    6476:	fe 01       	movw	r30, r28
    6478:	ef 51       	subi	r30, 0x1F	; 31
    647a:	fe 4f       	sbci	r31, 0xFE	; 254
    647c:	80 81       	ld	r24, Z
    647e:	91 81       	ldd	r25, Z+1	; 0x01
    6480:	9c 01       	movw	r18, r24
    6482:	f9 01       	movw	r30, r18
    6484:	85 91       	lpm	r24, Z+
    6486:	95 91       	lpm	r25, Z+
    6488:	a5 91       	lpm	r26, Z+
    648a:	b4 91       	lpm	r27, Z+
    648c:	9f 01       	movw	r18, r30
    648e:	fe 01       	movw	r30, r28
    6490:	e3 52       	subi	r30, 0x23	; 35
    6492:	fe 4f       	sbci	r31, 0xFE	; 254
    6494:	80 83       	st	Z, r24
    6496:	91 83       	std	Z+1, r25	; 0x01
    6498:	a2 83       	std	Z+2, r26	; 0x02
    649a:	b3 83       	std	Z+3, r27	; 0x03
    649c:	fe 01       	movw	r30, r28
    649e:	ef 51       	subi	r30, 0x1F	; 31
    64a0:	fe 4f       	sbci	r31, 0xFE	; 254
    64a2:	31 83       	std	Z+1, r19	; 0x01
    64a4:	20 83       	st	Z, r18
    64a6:	fe 01       	movw	r30, r28
    64a8:	e3 52       	subi	r30, 0x23	; 35
    64aa:	fe 4f       	sbci	r31, 0xFE	; 254
    64ac:	20 81       	ld	r18, Z
    64ae:	31 81       	ldd	r19, Z+1	; 0x01
    64b0:	42 81       	ldd	r20, Z+2	; 0x02
    64b2:	53 81       	ldd	r21, Z+3	; 0x03
    64b4:	fe 01       	movw	r30, r28
    64b6:	ea 57       	subi	r30, 0x7A	; 122
    64b8:	fd 4f       	sbci	r31, 0xFD	; 253
    64ba:	80 81       	ld	r24, Z
    64bc:	91 81       	ldd	r25, Z+1	; 0x01
    64be:	a2 81       	ldd	r26, Z+2	; 0x02
    64c0:	b3 81       	ldd	r27, Z+3	; 0x03
    64c2:	82 2b       	or	r24, r18
    64c4:	93 2b       	or	r25, r19
    64c6:	a4 2b       	or	r26, r20
    64c8:	b5 2b       	or	r27, r21
    64ca:	fe 01       	movw	r30, r28
    64cc:	ea 57       	subi	r30, 0x7A	; 122
    64ce:	fd 4f       	sbci	r31, 0xFD	; 253
    64d0:	80 83       	st	Z, r24
    64d2:	91 83       	std	Z+1, r25	; 0x01
    64d4:	a2 83       	std	Z+2, r26	; 0x02
    64d6:	b3 83       	std	Z+3, r27	; 0x03
    64d8:	1a c4       	rjmp	.+2100   	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 25)
    64da:	fe 01       	movw	r30, r28
    64dc:	e5 55       	subi	r30, 0x55	; 85
    64de:	fd 4f       	sbci	r31, 0xFD	; 253
    64e0:	84 81       	ldd	r24, Z+4	; 0x04
    64e2:	89 31       	cpi	r24, 0x19	; 25
    64e4:	08 f0       	brcs	.+2      	; 0x64e8 <main+0x483c>
    64e6:	71 c0       	rjmp	.+226    	; 0x65ca <main+0x491e>
    {
      lLEDs |= pgm_read_dword(words+def_zwanzigM);
    64e8:	fe 01       	movw	r30, r28
    64ea:	e5 52       	subi	r30, 0x25	; 37
    64ec:	fe 4f       	sbci	r31, 0xFE	; 254
    64ee:	84 e6       	ldi	r24, 0x64	; 100
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	91 83       	std	Z+1, r25	; 0x01
    64f4:	80 83       	st	Z, r24
    64f6:	fe 01       	movw	r30, r28
    64f8:	e5 52       	subi	r30, 0x25	; 37
    64fa:	fe 4f       	sbci	r31, 0xFE	; 254
    64fc:	80 81       	ld	r24, Z
    64fe:	91 81       	ldd	r25, Z+1	; 0x01
    6500:	9c 01       	movw	r18, r24
    6502:	f9 01       	movw	r30, r18
    6504:	85 91       	lpm	r24, Z+
    6506:	95 91       	lpm	r25, Z+
    6508:	a5 91       	lpm	r26, Z+
    650a:	b4 91       	lpm	r27, Z+
    650c:	9f 01       	movw	r18, r30
    650e:	fe 01       	movw	r30, r28
    6510:	e9 52       	subi	r30, 0x29	; 41
    6512:	fe 4f       	sbci	r31, 0xFE	; 254
    6514:	80 83       	st	Z, r24
    6516:	91 83       	std	Z+1, r25	; 0x01
    6518:	a2 83       	std	Z+2, r26	; 0x02
    651a:	b3 83       	std	Z+3, r27	; 0x03
    651c:	fe 01       	movw	r30, r28
    651e:	e5 52       	subi	r30, 0x25	; 37
    6520:	fe 4f       	sbci	r31, 0xFE	; 254
    6522:	31 83       	std	Z+1, r19	; 0x01
    6524:	20 83       	st	Z, r18
    6526:	fe 01       	movw	r30, r28
    6528:	e9 52       	subi	r30, 0x29	; 41
    652a:	fe 4f       	sbci	r31, 0xFE	; 254
    652c:	20 81       	ld	r18, Z
    652e:	31 81       	ldd	r19, Z+1	; 0x01
    6530:	42 81       	ldd	r20, Z+2	; 0x02
    6532:	53 81       	ldd	r21, Z+3	; 0x03
    6534:	fe 01       	movw	r30, r28
    6536:	ea 57       	subi	r30, 0x7A	; 122
    6538:	fd 4f       	sbci	r31, 0xFD	; 253
    653a:	80 81       	ld	r24, Z
    653c:	91 81       	ldd	r25, Z+1	; 0x01
    653e:	a2 81       	ldd	r26, Z+2	; 0x02
    6540:	b3 81       	ldd	r27, Z+3	; 0x03
    6542:	82 2b       	or	r24, r18
    6544:	93 2b       	or	r25, r19
    6546:	a4 2b       	or	r26, r20
    6548:	b5 2b       	or	r27, r21
    654a:	fe 01       	movw	r30, r28
    654c:	ea 57       	subi	r30, 0x7A	; 122
    654e:	fd 4f       	sbci	r31, 0xFD	; 253
    6550:	80 83       	st	Z, r24
    6552:	91 83       	std	Z+1, r25	; 0x01
    6554:	a2 83       	std	Z+2, r26	; 0x02
    6556:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    6558:	fe 01       	movw	r30, r28
    655a:	eb 52       	subi	r30, 0x2B	; 43
    655c:	fe 4f       	sbci	r31, 0xFE	; 254
    655e:	80 e7       	ldi	r24, 0x70	; 112
    6560:	90 e0       	ldi	r25, 0x00	; 0
    6562:	91 83       	std	Z+1, r25	; 0x01
    6564:	80 83       	st	Z, r24
    6566:	fe 01       	movw	r30, r28
    6568:	eb 52       	subi	r30, 0x2B	; 43
    656a:	fe 4f       	sbci	r31, 0xFE	; 254
    656c:	80 81       	ld	r24, Z
    656e:	91 81       	ldd	r25, Z+1	; 0x01
    6570:	9c 01       	movw	r18, r24
    6572:	f9 01       	movw	r30, r18
    6574:	85 91       	lpm	r24, Z+
    6576:	95 91       	lpm	r25, Z+
    6578:	a5 91       	lpm	r26, Z+
    657a:	b4 91       	lpm	r27, Z+
    657c:	9f 01       	movw	r18, r30
    657e:	fe 01       	movw	r30, r28
    6580:	ef 52       	subi	r30, 0x2F	; 47
    6582:	fe 4f       	sbci	r31, 0xFE	; 254
    6584:	80 83       	st	Z, r24
    6586:	91 83       	std	Z+1, r25	; 0x01
    6588:	a2 83       	std	Z+2, r26	; 0x02
    658a:	b3 83       	std	Z+3, r27	; 0x03
    658c:	fe 01       	movw	r30, r28
    658e:	eb 52       	subi	r30, 0x2B	; 43
    6590:	fe 4f       	sbci	r31, 0xFE	; 254
    6592:	31 83       	std	Z+1, r19	; 0x01
    6594:	20 83       	st	Z, r18
    6596:	fe 01       	movw	r30, r28
    6598:	ef 52       	subi	r30, 0x2F	; 47
    659a:	fe 4f       	sbci	r31, 0xFE	; 254
    659c:	20 81       	ld	r18, Z
    659e:	31 81       	ldd	r19, Z+1	; 0x01
    65a0:	42 81       	ldd	r20, Z+2	; 0x02
    65a2:	53 81       	ldd	r21, Z+3	; 0x03
    65a4:	fe 01       	movw	r30, r28
    65a6:	ea 57       	subi	r30, 0x7A	; 122
    65a8:	fd 4f       	sbci	r31, 0xFD	; 253
    65aa:	80 81       	ld	r24, Z
    65ac:	91 81       	ldd	r25, Z+1	; 0x01
    65ae:	a2 81       	ldd	r26, Z+2	; 0x02
    65b0:	b3 81       	ldd	r27, Z+3	; 0x03
    65b2:	82 2b       	or	r24, r18
    65b4:	93 2b       	or	r25, r19
    65b6:	a4 2b       	or	r26, r20
    65b8:	b5 2b       	or	r27, r21
    65ba:	fe 01       	movw	r30, r28
    65bc:	ea 57       	subi	r30, 0x7A	; 122
    65be:	fd 4f       	sbci	r31, 0xFD	; 253
    65c0:	80 83       	st	Z, r24
    65c2:	91 83       	std	Z+1, r25	; 0x01
    65c4:	a2 83       	std	Z+2, r26	; 0x02
    65c6:	b3 83       	std	Z+3, r27	; 0x03
    65c8:	a2 c3       	rjmp	.+1860   	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 30)
    65ca:	fe 01       	movw	r30, r28
    65cc:	e5 55       	subi	r30, 0x55	; 85
    65ce:	fd 4f       	sbci	r31, 0xFD	; 253
    65d0:	84 81       	ldd	r24, Z+4	; 0x04
    65d2:	8e 31       	cpi	r24, 0x1E	; 30
    65d4:	08 f0       	brcs	.+2      	; 0x65d8 <main+0x492c>
    65d6:	ae c0       	rjmp	.+348    	; 0x6734 <main+0x4a88>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    65d8:	fe 01       	movw	r30, r28
    65da:	e1 53       	subi	r30, 0x31	; 49
    65dc:	fe 4f       	sbci	r31, 0xFE	; 254
    65de:	8c e5       	ldi	r24, 0x5C	; 92
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	91 83       	std	Z+1, r25	; 0x01
    65e4:	80 83       	st	Z, r24
    65e6:	fe 01       	movw	r30, r28
    65e8:	e1 53       	subi	r30, 0x31	; 49
    65ea:	fe 4f       	sbci	r31, 0xFE	; 254
    65ec:	80 81       	ld	r24, Z
    65ee:	91 81       	ldd	r25, Z+1	; 0x01
    65f0:	9c 01       	movw	r18, r24
    65f2:	f9 01       	movw	r30, r18
    65f4:	85 91       	lpm	r24, Z+
    65f6:	95 91       	lpm	r25, Z+
    65f8:	a5 91       	lpm	r26, Z+
    65fa:	b4 91       	lpm	r27, Z+
    65fc:	9f 01       	movw	r18, r30
    65fe:	fe 01       	movw	r30, r28
    6600:	e5 53       	subi	r30, 0x35	; 53
    6602:	fe 4f       	sbci	r31, 0xFE	; 254
    6604:	80 83       	st	Z, r24
    6606:	91 83       	std	Z+1, r25	; 0x01
    6608:	a2 83       	std	Z+2, r26	; 0x02
    660a:	b3 83       	std	Z+3, r27	; 0x03
    660c:	fe 01       	movw	r30, r28
    660e:	e1 53       	subi	r30, 0x31	; 49
    6610:	fe 4f       	sbci	r31, 0xFE	; 254
    6612:	31 83       	std	Z+1, r19	; 0x01
    6614:	20 83       	st	Z, r18
    6616:	fe 01       	movw	r30, r28
    6618:	e5 53       	subi	r30, 0x35	; 53
    661a:	fe 4f       	sbci	r31, 0xFE	; 254
    661c:	20 81       	ld	r18, Z
    661e:	31 81       	ldd	r19, Z+1	; 0x01
    6620:	42 81       	ldd	r20, Z+2	; 0x02
    6622:	53 81       	ldd	r21, Z+3	; 0x03
    6624:	fe 01       	movw	r30, r28
    6626:	ea 57       	subi	r30, 0x7A	; 122
    6628:	fd 4f       	sbci	r31, 0xFD	; 253
    662a:	80 81       	ld	r24, Z
    662c:	91 81       	ldd	r25, Z+1	; 0x01
    662e:	a2 81       	ldd	r26, Z+2	; 0x02
    6630:	b3 81       	ldd	r27, Z+3	; 0x03
    6632:	82 2b       	or	r24, r18
    6634:	93 2b       	or	r25, r19
    6636:	a4 2b       	or	r26, r20
    6638:	b5 2b       	or	r27, r21
    663a:	fe 01       	movw	r30, r28
    663c:	ea 57       	subi	r30, 0x7A	; 122
    663e:	fd 4f       	sbci	r31, 0xFD	; 253
    6640:	80 83       	st	Z, r24
    6642:	91 83       	std	Z+1, r25	; 0x01
    6644:	a2 83       	std	Z+2, r26	; 0x02
    6646:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    6648:	fe 01       	movw	r30, r28
    664a:	e7 53       	subi	r30, 0x37	; 55
    664c:	fe 4f       	sbci	r31, 0xFE	; 254
    664e:	84 e7       	ldi	r24, 0x74	; 116
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	91 83       	std	Z+1, r25	; 0x01
    6654:	80 83       	st	Z, r24
    6656:	fe 01       	movw	r30, r28
    6658:	e7 53       	subi	r30, 0x37	; 55
    665a:	fe 4f       	sbci	r31, 0xFE	; 254
    665c:	80 81       	ld	r24, Z
    665e:	91 81       	ldd	r25, Z+1	; 0x01
    6660:	9c 01       	movw	r18, r24
    6662:	f9 01       	movw	r30, r18
    6664:	85 91       	lpm	r24, Z+
    6666:	95 91       	lpm	r25, Z+
    6668:	a5 91       	lpm	r26, Z+
    666a:	b4 91       	lpm	r27, Z+
    666c:	9f 01       	movw	r18, r30
    666e:	fe 01       	movw	r30, r28
    6670:	eb 53       	subi	r30, 0x3B	; 59
    6672:	fe 4f       	sbci	r31, 0xFE	; 254
    6674:	80 83       	st	Z, r24
    6676:	91 83       	std	Z+1, r25	; 0x01
    6678:	a2 83       	std	Z+2, r26	; 0x02
    667a:	b3 83       	std	Z+3, r27	; 0x03
    667c:	fe 01       	movw	r30, r28
    667e:	e7 53       	subi	r30, 0x37	; 55
    6680:	fe 4f       	sbci	r31, 0xFE	; 254
    6682:	31 83       	std	Z+1, r19	; 0x01
    6684:	20 83       	st	Z, r18
    6686:	fe 01       	movw	r30, r28
    6688:	eb 53       	subi	r30, 0x3B	; 59
    668a:	fe 4f       	sbci	r31, 0xFE	; 254
    668c:	20 81       	ld	r18, Z
    668e:	31 81       	ldd	r19, Z+1	; 0x01
    6690:	42 81       	ldd	r20, Z+2	; 0x02
    6692:	53 81       	ldd	r21, Z+3	; 0x03
    6694:	fe 01       	movw	r30, r28
    6696:	ea 57       	subi	r30, 0x7A	; 122
    6698:	fd 4f       	sbci	r31, 0xFD	; 253
    669a:	80 81       	ld	r24, Z
    669c:	91 81       	ldd	r25, Z+1	; 0x01
    669e:	a2 81       	ldd	r26, Z+2	; 0x02
    66a0:	b3 81       	ldd	r27, Z+3	; 0x03
    66a2:	82 2b       	or	r24, r18
    66a4:	93 2b       	or	r25, r19
    66a6:	a4 2b       	or	r26, r20
    66a8:	b5 2b       	or	r27, r21
    66aa:	fe 01       	movw	r30, r28
    66ac:	ea 57       	subi	r30, 0x7A	; 122
    66ae:	fd 4f       	sbci	r31, 0xFD	; 253
    66b0:	80 83       	st	Z, r24
    66b2:	91 83       	std	Z+1, r25	; 0x01
    66b4:	a2 83       	std	Z+2, r26	; 0x02
    66b6:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_halb);
    66b8:	fe 01       	movw	r30, r28
    66ba:	ed 53       	subi	r30, 0x3D	; 61
    66bc:	fe 4f       	sbci	r31, 0xFE	; 254
    66be:	88 e7       	ldi	r24, 0x78	; 120
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	91 83       	std	Z+1, r25	; 0x01
    66c4:	80 83       	st	Z, r24
    66c6:	fe 01       	movw	r30, r28
    66c8:	ed 53       	subi	r30, 0x3D	; 61
    66ca:	fe 4f       	sbci	r31, 0xFE	; 254
    66cc:	80 81       	ld	r24, Z
    66ce:	91 81       	ldd	r25, Z+1	; 0x01
    66d0:	9c 01       	movw	r18, r24
    66d2:	f9 01       	movw	r30, r18
    66d4:	85 91       	lpm	r24, Z+
    66d6:	95 91       	lpm	r25, Z+
    66d8:	a5 91       	lpm	r26, Z+
    66da:	b4 91       	lpm	r27, Z+
    66dc:	9f 01       	movw	r18, r30
    66de:	fe 01       	movw	r30, r28
    66e0:	e1 54       	subi	r30, 0x41	; 65
    66e2:	fe 4f       	sbci	r31, 0xFE	; 254
    66e4:	80 83       	st	Z, r24
    66e6:	91 83       	std	Z+1, r25	; 0x01
    66e8:	a2 83       	std	Z+2, r26	; 0x02
    66ea:	b3 83       	std	Z+3, r27	; 0x03
    66ec:	fe 01       	movw	r30, r28
    66ee:	ed 53       	subi	r30, 0x3D	; 61
    66f0:	fe 4f       	sbci	r31, 0xFE	; 254
    66f2:	31 83       	std	Z+1, r19	; 0x01
    66f4:	20 83       	st	Z, r18
    66f6:	fe 01       	movw	r30, r28
    66f8:	e1 54       	subi	r30, 0x41	; 65
    66fa:	fe 4f       	sbci	r31, 0xFE	; 254
    66fc:	20 81       	ld	r18, Z
    66fe:	31 81       	ldd	r19, Z+1	; 0x01
    6700:	42 81       	ldd	r20, Z+2	; 0x02
    6702:	53 81       	ldd	r21, Z+3	; 0x03
    6704:	fe 01       	movw	r30, r28
    6706:	ea 57       	subi	r30, 0x7A	; 122
    6708:	fd 4f       	sbci	r31, 0xFD	; 253
    670a:	80 81       	ld	r24, Z
    670c:	91 81       	ldd	r25, Z+1	; 0x01
    670e:	a2 81       	ldd	r26, Z+2	; 0x02
    6710:	b3 81       	ldd	r27, Z+3	; 0x03
    6712:	82 2b       	or	r24, r18
    6714:	93 2b       	or	r25, r19
    6716:	a4 2b       	or	r26, r20
    6718:	b5 2b       	or	r27, r21
    671a:	fe 01       	movw	r30, r28
    671c:	ea 57       	subi	r30, 0x7A	; 122
    671e:	fd 4f       	sbci	r31, 0xFD	; 253
    6720:	80 83       	st	Z, r24
    6722:	91 83       	std	Z+1, r25	; 0x01
    6724:	a2 83       	std	Z+2, r26	; 0x02
    6726:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    6728:	fe 01       	movw	r30, r28
    672a:	eb 57       	subi	r30, 0x7B	; 123
    672c:	fd 4f       	sbci	r31, 0xFD	; 253
    672e:	81 e0       	ldi	r24, 0x01	; 1
    6730:	80 83       	st	Z, r24
    6732:	ed c2       	rjmp	.+1498   	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 35)
    6734:	fe 01       	movw	r30, r28
    6736:	e5 55       	subi	r30, 0x55	; 85
    6738:	fd 4f       	sbci	r31, 0xFD	; 253
    673a:	84 81       	ldd	r24, Z+4	; 0x04
    673c:	83 32       	cpi	r24, 0x23	; 35
    673e:	08 f0       	brcs	.+2      	; 0x6742 <main+0x4a96>
    6740:	3e c0       	rjmp	.+124    	; 0x67be <main+0x4b12>
    {
      lLEDs |= pgm_read_dword(words+def_halb);
    6742:	fe 01       	movw	r30, r28
    6744:	e3 54       	subi	r30, 0x43	; 67
    6746:	fe 4f       	sbci	r31, 0xFE	; 254
    6748:	88 e7       	ldi	r24, 0x78	; 120
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	91 83       	std	Z+1, r25	; 0x01
    674e:	80 83       	st	Z, r24
    6750:	fe 01       	movw	r30, r28
    6752:	e3 54       	subi	r30, 0x43	; 67
    6754:	fe 4f       	sbci	r31, 0xFE	; 254
    6756:	80 81       	ld	r24, Z
    6758:	91 81       	ldd	r25, Z+1	; 0x01
    675a:	9c 01       	movw	r18, r24
    675c:	f9 01       	movw	r30, r18
    675e:	85 91       	lpm	r24, Z+
    6760:	95 91       	lpm	r25, Z+
    6762:	a5 91       	lpm	r26, Z+
    6764:	b4 91       	lpm	r27, Z+
    6766:	9f 01       	movw	r18, r30
    6768:	fe 01       	movw	r30, r28
    676a:	e7 54       	subi	r30, 0x47	; 71
    676c:	fe 4f       	sbci	r31, 0xFE	; 254
    676e:	80 83       	st	Z, r24
    6770:	91 83       	std	Z+1, r25	; 0x01
    6772:	a2 83       	std	Z+2, r26	; 0x02
    6774:	b3 83       	std	Z+3, r27	; 0x03
    6776:	fe 01       	movw	r30, r28
    6778:	e3 54       	subi	r30, 0x43	; 67
    677a:	fe 4f       	sbci	r31, 0xFE	; 254
    677c:	31 83       	std	Z+1, r19	; 0x01
    677e:	20 83       	st	Z, r18
    6780:	fe 01       	movw	r30, r28
    6782:	e7 54       	subi	r30, 0x47	; 71
    6784:	fe 4f       	sbci	r31, 0xFE	; 254
    6786:	20 81       	ld	r18, Z
    6788:	31 81       	ldd	r19, Z+1	; 0x01
    678a:	42 81       	ldd	r20, Z+2	; 0x02
    678c:	53 81       	ldd	r21, Z+3	; 0x03
    678e:	fe 01       	movw	r30, r28
    6790:	ea 57       	subi	r30, 0x7A	; 122
    6792:	fd 4f       	sbci	r31, 0xFD	; 253
    6794:	80 81       	ld	r24, Z
    6796:	91 81       	ldd	r25, Z+1	; 0x01
    6798:	a2 81       	ldd	r26, Z+2	; 0x02
    679a:	b3 81       	ldd	r27, Z+3	; 0x03
    679c:	82 2b       	or	r24, r18
    679e:	93 2b       	or	r25, r19
    67a0:	a4 2b       	or	r26, r20
    67a2:	b5 2b       	or	r27, r21
    67a4:	fe 01       	movw	r30, r28
    67a6:	ea 57       	subi	r30, 0x7A	; 122
    67a8:	fd 4f       	sbci	r31, 0xFD	; 253
    67aa:	80 83       	st	Z, r24
    67ac:	91 83       	std	Z+1, r25	; 0x01
    67ae:	a2 83       	std	Z+2, r26	; 0x02
    67b0:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    67b2:	fe 01       	movw	r30, r28
    67b4:	eb 57       	subi	r30, 0x7B	; 123
    67b6:	fd 4f       	sbci	r31, 0xFD	; 253
    67b8:	81 e0       	ldi	r24, 0x01	; 1
    67ba:	80 83       	st	Z, r24
    67bc:	a8 c2       	rjmp	.+1360   	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 40)
    67be:	fe 01       	movw	r30, r28
    67c0:	e5 55       	subi	r30, 0x55	; 85
    67c2:	fd 4f       	sbci	r31, 0xFD	; 253
    67c4:	84 81       	ldd	r24, Z+4	; 0x04
    67c6:	88 32       	cpi	r24, 0x28	; 40
    67c8:	08 f0       	brcs	.+2      	; 0x67cc <main+0x4b20>
    67ca:	ae c0       	rjmp	.+348    	; 0x6928 <main+0x4c7c>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    67cc:	fe 01       	movw	r30, r28
    67ce:	e9 54       	subi	r30, 0x49	; 73
    67d0:	fe 4f       	sbci	r31, 0xFE	; 254
    67d2:	8c e5       	ldi	r24, 0x5C	; 92
    67d4:	90 e0       	ldi	r25, 0x00	; 0
    67d6:	91 83       	std	Z+1, r25	; 0x01
    67d8:	80 83       	st	Z, r24
    67da:	fe 01       	movw	r30, r28
    67dc:	e9 54       	subi	r30, 0x49	; 73
    67de:	fe 4f       	sbci	r31, 0xFE	; 254
    67e0:	80 81       	ld	r24, Z
    67e2:	91 81       	ldd	r25, Z+1	; 0x01
    67e4:	9c 01       	movw	r18, r24
    67e6:	f9 01       	movw	r30, r18
    67e8:	85 91       	lpm	r24, Z+
    67ea:	95 91       	lpm	r25, Z+
    67ec:	a5 91       	lpm	r26, Z+
    67ee:	b4 91       	lpm	r27, Z+
    67f0:	9f 01       	movw	r18, r30
    67f2:	fe 01       	movw	r30, r28
    67f4:	ed 54       	subi	r30, 0x4D	; 77
    67f6:	fe 4f       	sbci	r31, 0xFE	; 254
    67f8:	80 83       	st	Z, r24
    67fa:	91 83       	std	Z+1, r25	; 0x01
    67fc:	a2 83       	std	Z+2, r26	; 0x02
    67fe:	b3 83       	std	Z+3, r27	; 0x03
    6800:	fe 01       	movw	r30, r28
    6802:	e9 54       	subi	r30, 0x49	; 73
    6804:	fe 4f       	sbci	r31, 0xFE	; 254
    6806:	31 83       	std	Z+1, r19	; 0x01
    6808:	20 83       	st	Z, r18
    680a:	fe 01       	movw	r30, r28
    680c:	ed 54       	subi	r30, 0x4D	; 77
    680e:	fe 4f       	sbci	r31, 0xFE	; 254
    6810:	20 81       	ld	r18, Z
    6812:	31 81       	ldd	r19, Z+1	; 0x01
    6814:	42 81       	ldd	r20, Z+2	; 0x02
    6816:	53 81       	ldd	r21, Z+3	; 0x03
    6818:	fe 01       	movw	r30, r28
    681a:	ea 57       	subi	r30, 0x7A	; 122
    681c:	fd 4f       	sbci	r31, 0xFD	; 253
    681e:	80 81       	ld	r24, Z
    6820:	91 81       	ldd	r25, Z+1	; 0x01
    6822:	a2 81       	ldd	r26, Z+2	; 0x02
    6824:	b3 81       	ldd	r27, Z+3	; 0x03
    6826:	82 2b       	or	r24, r18
    6828:	93 2b       	or	r25, r19
    682a:	a4 2b       	or	r26, r20
    682c:	b5 2b       	or	r27, r21
    682e:	fe 01       	movw	r30, r28
    6830:	ea 57       	subi	r30, 0x7A	; 122
    6832:	fd 4f       	sbci	r31, 0xFD	; 253
    6834:	80 83       	st	Z, r24
    6836:	91 83       	std	Z+1, r25	; 0x01
    6838:	a2 83       	std	Z+2, r26	; 0x02
    683a:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    683c:	fe 01       	movw	r30, r28
    683e:	ef 54       	subi	r30, 0x4F	; 79
    6840:	fe 4f       	sbci	r31, 0xFE	; 254
    6842:	80 e7       	ldi	r24, 0x70	; 112
    6844:	90 e0       	ldi	r25, 0x00	; 0
    6846:	91 83       	std	Z+1, r25	; 0x01
    6848:	80 83       	st	Z, r24
    684a:	fe 01       	movw	r30, r28
    684c:	ef 54       	subi	r30, 0x4F	; 79
    684e:	fe 4f       	sbci	r31, 0xFE	; 254
    6850:	80 81       	ld	r24, Z
    6852:	91 81       	ldd	r25, Z+1	; 0x01
    6854:	9c 01       	movw	r18, r24
    6856:	f9 01       	movw	r30, r18
    6858:	85 91       	lpm	r24, Z+
    685a:	95 91       	lpm	r25, Z+
    685c:	a5 91       	lpm	r26, Z+
    685e:	b4 91       	lpm	r27, Z+
    6860:	9f 01       	movw	r18, r30
    6862:	fe 01       	movw	r30, r28
    6864:	e3 55       	subi	r30, 0x53	; 83
    6866:	fe 4f       	sbci	r31, 0xFE	; 254
    6868:	80 83       	st	Z, r24
    686a:	91 83       	std	Z+1, r25	; 0x01
    686c:	a2 83       	std	Z+2, r26	; 0x02
    686e:	b3 83       	std	Z+3, r27	; 0x03
    6870:	fe 01       	movw	r30, r28
    6872:	ef 54       	subi	r30, 0x4F	; 79
    6874:	fe 4f       	sbci	r31, 0xFE	; 254
    6876:	31 83       	std	Z+1, r19	; 0x01
    6878:	20 83       	st	Z, r18
    687a:	fe 01       	movw	r30, r28
    687c:	e3 55       	subi	r30, 0x53	; 83
    687e:	fe 4f       	sbci	r31, 0xFE	; 254
    6880:	20 81       	ld	r18, Z
    6882:	31 81       	ldd	r19, Z+1	; 0x01
    6884:	42 81       	ldd	r20, Z+2	; 0x02
    6886:	53 81       	ldd	r21, Z+3	; 0x03
    6888:	fe 01       	movw	r30, r28
    688a:	ea 57       	subi	r30, 0x7A	; 122
    688c:	fd 4f       	sbci	r31, 0xFD	; 253
    688e:	80 81       	ld	r24, Z
    6890:	91 81       	ldd	r25, Z+1	; 0x01
    6892:	a2 81       	ldd	r26, Z+2	; 0x02
    6894:	b3 81       	ldd	r27, Z+3	; 0x03
    6896:	82 2b       	or	r24, r18
    6898:	93 2b       	or	r25, r19
    689a:	a4 2b       	or	r26, r20
    689c:	b5 2b       	or	r27, r21
    689e:	fe 01       	movw	r30, r28
    68a0:	ea 57       	subi	r30, 0x7A	; 122
    68a2:	fd 4f       	sbci	r31, 0xFD	; 253
    68a4:	80 83       	st	Z, r24
    68a6:	91 83       	std	Z+1, r25	; 0x01
    68a8:	a2 83       	std	Z+2, r26	; 0x02
    68aa:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_halb);
    68ac:	fe 01       	movw	r30, r28
    68ae:	e5 55       	subi	r30, 0x55	; 85
    68b0:	fe 4f       	sbci	r31, 0xFE	; 254
    68b2:	88 e7       	ldi	r24, 0x78	; 120
    68b4:	90 e0       	ldi	r25, 0x00	; 0
    68b6:	91 83       	std	Z+1, r25	; 0x01
    68b8:	80 83       	st	Z, r24
    68ba:	fe 01       	movw	r30, r28
    68bc:	e5 55       	subi	r30, 0x55	; 85
    68be:	fe 4f       	sbci	r31, 0xFE	; 254
    68c0:	80 81       	ld	r24, Z
    68c2:	91 81       	ldd	r25, Z+1	; 0x01
    68c4:	9c 01       	movw	r18, r24
    68c6:	f9 01       	movw	r30, r18
    68c8:	85 91       	lpm	r24, Z+
    68ca:	95 91       	lpm	r25, Z+
    68cc:	a5 91       	lpm	r26, Z+
    68ce:	b4 91       	lpm	r27, Z+
    68d0:	9f 01       	movw	r18, r30
    68d2:	fe 01       	movw	r30, r28
    68d4:	e9 55       	subi	r30, 0x59	; 89
    68d6:	fe 4f       	sbci	r31, 0xFE	; 254
    68d8:	80 83       	st	Z, r24
    68da:	91 83       	std	Z+1, r25	; 0x01
    68dc:	a2 83       	std	Z+2, r26	; 0x02
    68de:	b3 83       	std	Z+3, r27	; 0x03
    68e0:	fe 01       	movw	r30, r28
    68e2:	e5 55       	subi	r30, 0x55	; 85
    68e4:	fe 4f       	sbci	r31, 0xFE	; 254
    68e6:	31 83       	std	Z+1, r19	; 0x01
    68e8:	20 83       	st	Z, r18
    68ea:	fe 01       	movw	r30, r28
    68ec:	e9 55       	subi	r30, 0x59	; 89
    68ee:	fe 4f       	sbci	r31, 0xFE	; 254
    68f0:	20 81       	ld	r18, Z
    68f2:	31 81       	ldd	r19, Z+1	; 0x01
    68f4:	42 81       	ldd	r20, Z+2	; 0x02
    68f6:	53 81       	ldd	r21, Z+3	; 0x03
    68f8:	fe 01       	movw	r30, r28
    68fa:	ea 57       	subi	r30, 0x7A	; 122
    68fc:	fd 4f       	sbci	r31, 0xFD	; 253
    68fe:	80 81       	ld	r24, Z
    6900:	91 81       	ldd	r25, Z+1	; 0x01
    6902:	a2 81       	ldd	r26, Z+2	; 0x02
    6904:	b3 81       	ldd	r27, Z+3	; 0x03
    6906:	82 2b       	or	r24, r18
    6908:	93 2b       	or	r25, r19
    690a:	a4 2b       	or	r26, r20
    690c:	b5 2b       	or	r27, r21
    690e:	fe 01       	movw	r30, r28
    6910:	ea 57       	subi	r30, 0x7A	; 122
    6912:	fd 4f       	sbci	r31, 0xFD	; 253
    6914:	80 83       	st	Z, r24
    6916:	91 83       	std	Z+1, r25	; 0x01
    6918:	a2 83       	std	Z+2, r26	; 0x02
    691a:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    691c:	fe 01       	movw	r30, r28
    691e:	eb 57       	subi	r30, 0x7B	; 123
    6920:	fd 4f       	sbci	r31, 0xFD	; 253
    6922:	81 e0       	ldi	r24, 0x01	; 1
    6924:	80 83       	st	Z, r24
    6926:	f3 c1       	rjmp	.+998    	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 45)
    6928:	fe 01       	movw	r30, r28
    692a:	e5 55       	subi	r30, 0x55	; 85
    692c:	fd 4f       	sbci	r31, 0xFD	; 253
    692e:	84 81       	ldd	r24, Z+4	; 0x04
    6930:	8d 32       	cpi	r24, 0x2D	; 45
    6932:	08 f0       	brcs	.+2      	; 0x6936 <main+0x4c8a>
    6934:	76 c0       	rjmp	.+236    	; 0x6a22 <main+0x4d76>
    {
      lLEDs |= pgm_read_dword(words+def_zwanzigM);
    6936:	fe 01       	movw	r30, r28
    6938:	eb 55       	subi	r30, 0x5B	; 91
    693a:	fe 4f       	sbci	r31, 0xFE	; 254
    693c:	84 e6       	ldi	r24, 0x64	; 100
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	91 83       	std	Z+1, r25	; 0x01
    6942:	80 83       	st	Z, r24
    6944:	fe 01       	movw	r30, r28
    6946:	eb 55       	subi	r30, 0x5B	; 91
    6948:	fe 4f       	sbci	r31, 0xFE	; 254
    694a:	80 81       	ld	r24, Z
    694c:	91 81       	ldd	r25, Z+1	; 0x01
    694e:	9c 01       	movw	r18, r24
    6950:	f9 01       	movw	r30, r18
    6952:	85 91       	lpm	r24, Z+
    6954:	95 91       	lpm	r25, Z+
    6956:	a5 91       	lpm	r26, Z+
    6958:	b4 91       	lpm	r27, Z+
    695a:	9f 01       	movw	r18, r30
    695c:	fe 01       	movw	r30, r28
    695e:	ef 55       	subi	r30, 0x5F	; 95
    6960:	fe 4f       	sbci	r31, 0xFE	; 254
    6962:	80 83       	st	Z, r24
    6964:	91 83       	std	Z+1, r25	; 0x01
    6966:	a2 83       	std	Z+2, r26	; 0x02
    6968:	b3 83       	std	Z+3, r27	; 0x03
    696a:	fe 01       	movw	r30, r28
    696c:	eb 55       	subi	r30, 0x5B	; 91
    696e:	fe 4f       	sbci	r31, 0xFE	; 254
    6970:	31 83       	std	Z+1, r19	; 0x01
    6972:	20 83       	st	Z, r18
    6974:	fe 01       	movw	r30, r28
    6976:	ef 55       	subi	r30, 0x5F	; 95
    6978:	fe 4f       	sbci	r31, 0xFE	; 254
    697a:	20 81       	ld	r18, Z
    697c:	31 81       	ldd	r19, Z+1	; 0x01
    697e:	42 81       	ldd	r20, Z+2	; 0x02
    6980:	53 81       	ldd	r21, Z+3	; 0x03
    6982:	fe 01       	movw	r30, r28
    6984:	ea 57       	subi	r30, 0x7A	; 122
    6986:	fd 4f       	sbci	r31, 0xFD	; 253
    6988:	80 81       	ld	r24, Z
    698a:	91 81       	ldd	r25, Z+1	; 0x01
    698c:	a2 81       	ldd	r26, Z+2	; 0x02
    698e:	b3 81       	ldd	r27, Z+3	; 0x03
    6990:	82 2b       	or	r24, r18
    6992:	93 2b       	or	r25, r19
    6994:	a4 2b       	or	r26, r20
    6996:	b5 2b       	or	r27, r21
    6998:	fe 01       	movw	r30, r28
    699a:	ea 57       	subi	r30, 0x7A	; 122
    699c:	fd 4f       	sbci	r31, 0xFD	; 253
    699e:	80 83       	st	Z, r24
    69a0:	91 83       	std	Z+1, r25	; 0x01
    69a2:	a2 83       	std	Z+2, r26	; 0x02
    69a4:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    69a6:	fe 01       	movw	r30, r28
    69a8:	e1 56       	subi	r30, 0x61	; 97
    69aa:	fe 4f       	sbci	r31, 0xFE	; 254
    69ac:	84 e7       	ldi	r24, 0x74	; 116
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	91 83       	std	Z+1, r25	; 0x01
    69b2:	80 83       	st	Z, r24
    69b4:	fe 01       	movw	r30, r28
    69b6:	e1 56       	subi	r30, 0x61	; 97
    69b8:	fe 4f       	sbci	r31, 0xFE	; 254
    69ba:	80 81       	ld	r24, Z
    69bc:	91 81       	ldd	r25, Z+1	; 0x01
    69be:	9c 01       	movw	r18, r24
    69c0:	f9 01       	movw	r30, r18
    69c2:	85 91       	lpm	r24, Z+
    69c4:	95 91       	lpm	r25, Z+
    69c6:	a5 91       	lpm	r26, Z+
    69c8:	b4 91       	lpm	r27, Z+
    69ca:	9f 01       	movw	r18, r30
    69cc:	fe 01       	movw	r30, r28
    69ce:	e5 56       	subi	r30, 0x65	; 101
    69d0:	fe 4f       	sbci	r31, 0xFE	; 254
    69d2:	80 83       	st	Z, r24
    69d4:	91 83       	std	Z+1, r25	; 0x01
    69d6:	a2 83       	std	Z+2, r26	; 0x02
    69d8:	b3 83       	std	Z+3, r27	; 0x03
    69da:	fe 01       	movw	r30, r28
    69dc:	e1 56       	subi	r30, 0x61	; 97
    69de:	fe 4f       	sbci	r31, 0xFE	; 254
    69e0:	31 83       	std	Z+1, r19	; 0x01
    69e2:	20 83       	st	Z, r18
    69e4:	fe 01       	movw	r30, r28
    69e6:	e5 56       	subi	r30, 0x65	; 101
    69e8:	fe 4f       	sbci	r31, 0xFE	; 254
    69ea:	20 81       	ld	r18, Z
    69ec:	31 81       	ldd	r19, Z+1	; 0x01
    69ee:	42 81       	ldd	r20, Z+2	; 0x02
    69f0:	53 81       	ldd	r21, Z+3	; 0x03
    69f2:	fe 01       	movw	r30, r28
    69f4:	ea 57       	subi	r30, 0x7A	; 122
    69f6:	fd 4f       	sbci	r31, 0xFD	; 253
    69f8:	80 81       	ld	r24, Z
    69fa:	91 81       	ldd	r25, Z+1	; 0x01
    69fc:	a2 81       	ldd	r26, Z+2	; 0x02
    69fe:	b3 81       	ldd	r27, Z+3	; 0x03
    6a00:	82 2b       	or	r24, r18
    6a02:	93 2b       	or	r25, r19
    6a04:	a4 2b       	or	r26, r20
    6a06:	b5 2b       	or	r27, r21
    6a08:	fe 01       	movw	r30, r28
    6a0a:	ea 57       	subi	r30, 0x7A	; 122
    6a0c:	fd 4f       	sbci	r31, 0xFD	; 253
    6a0e:	80 83       	st	Z, r24
    6a10:	91 83       	std	Z+1, r25	; 0x01
    6a12:	a2 83       	std	Z+2, r26	; 0x02
    6a14:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    6a16:	fe 01       	movw	r30, r28
    6a18:	eb 57       	subi	r30, 0x7B	; 123
    6a1a:	fd 4f       	sbci	r31, 0xFD	; 253
    6a1c:	81 e0       	ldi	r24, 0x01	; 1
    6a1e:	80 83       	st	Z, r24
    6a20:	76 c1       	rjmp	.+748    	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 50)
    6a22:	fe 01       	movw	r30, r28
    6a24:	e5 55       	subi	r30, 0x55	; 85
    6a26:	fd 4f       	sbci	r31, 0xFD	; 253
    6a28:	84 81       	ldd	r24, Z+4	; 0x04
    6a2a:	82 33       	cpi	r24, 0x32	; 50
    6a2c:	08 f0       	brcs	.+2      	; 0x6a30 <main+0x4d84>
    6a2e:	76 c0       	rjmp	.+236    	; 0x6b1c <main+0x4e70>
    {
      lLEDs |= pgm_read_dword(words+def_viertelM);
    6a30:	fe 01       	movw	r30, r28
    6a32:	e7 56       	subi	r30, 0x67	; 103
    6a34:	fe 4f       	sbci	r31, 0xFE	; 254
    6a36:	8c e6       	ldi	r24, 0x6C	; 108
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	91 83       	std	Z+1, r25	; 0x01
    6a3c:	80 83       	st	Z, r24
    6a3e:	fe 01       	movw	r30, r28
    6a40:	e7 56       	subi	r30, 0x67	; 103
    6a42:	fe 4f       	sbci	r31, 0xFE	; 254
    6a44:	80 81       	ld	r24, Z
    6a46:	91 81       	ldd	r25, Z+1	; 0x01
    6a48:	9c 01       	movw	r18, r24
    6a4a:	f9 01       	movw	r30, r18
    6a4c:	85 91       	lpm	r24, Z+
    6a4e:	95 91       	lpm	r25, Z+
    6a50:	a5 91       	lpm	r26, Z+
    6a52:	b4 91       	lpm	r27, Z+
    6a54:	9f 01       	movw	r18, r30
    6a56:	fe 01       	movw	r30, r28
    6a58:	eb 56       	subi	r30, 0x6B	; 107
    6a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    6a5c:	80 83       	st	Z, r24
    6a5e:	91 83       	std	Z+1, r25	; 0x01
    6a60:	a2 83       	std	Z+2, r26	; 0x02
    6a62:	b3 83       	std	Z+3, r27	; 0x03
    6a64:	fe 01       	movw	r30, r28
    6a66:	e7 56       	subi	r30, 0x67	; 103
    6a68:	fe 4f       	sbci	r31, 0xFE	; 254
    6a6a:	31 83       	std	Z+1, r19	; 0x01
    6a6c:	20 83       	st	Z, r18
    6a6e:	fe 01       	movw	r30, r28
    6a70:	eb 56       	subi	r30, 0x6B	; 107
    6a72:	fe 4f       	sbci	r31, 0xFE	; 254
    6a74:	20 81       	ld	r18, Z
    6a76:	31 81       	ldd	r19, Z+1	; 0x01
    6a78:	42 81       	ldd	r20, Z+2	; 0x02
    6a7a:	53 81       	ldd	r21, Z+3	; 0x03
    6a7c:	fe 01       	movw	r30, r28
    6a7e:	ea 57       	subi	r30, 0x7A	; 122
    6a80:	fd 4f       	sbci	r31, 0xFD	; 253
    6a82:	80 81       	ld	r24, Z
    6a84:	91 81       	ldd	r25, Z+1	; 0x01
    6a86:	a2 81       	ldd	r26, Z+2	; 0x02
    6a88:	b3 81       	ldd	r27, Z+3	; 0x03
    6a8a:	82 2b       	or	r24, r18
    6a8c:	93 2b       	or	r25, r19
    6a8e:	a4 2b       	or	r26, r20
    6a90:	b5 2b       	or	r27, r21
    6a92:	fe 01       	movw	r30, r28
    6a94:	ea 57       	subi	r30, 0x7A	; 122
    6a96:	fd 4f       	sbci	r31, 0xFD	; 253
    6a98:	80 83       	st	Z, r24
    6a9a:	91 83       	std	Z+1, r25	; 0x01
    6a9c:	a2 83       	std	Z+2, r26	; 0x02
    6a9e:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    6aa0:	fe 01       	movw	r30, r28
    6aa2:	ed 56       	subi	r30, 0x6D	; 109
    6aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    6aa6:	84 e7       	ldi	r24, 0x74	; 116
    6aa8:	90 e0       	ldi	r25, 0x00	; 0
    6aaa:	91 83       	std	Z+1, r25	; 0x01
    6aac:	80 83       	st	Z, r24
    6aae:	fe 01       	movw	r30, r28
    6ab0:	ed 56       	subi	r30, 0x6D	; 109
    6ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    6ab4:	80 81       	ld	r24, Z
    6ab6:	91 81       	ldd	r25, Z+1	; 0x01
    6ab8:	9c 01       	movw	r18, r24
    6aba:	f9 01       	movw	r30, r18
    6abc:	85 91       	lpm	r24, Z+
    6abe:	95 91       	lpm	r25, Z+
    6ac0:	a5 91       	lpm	r26, Z+
    6ac2:	b4 91       	lpm	r27, Z+
    6ac4:	9f 01       	movw	r18, r30
    6ac6:	fe 01       	movw	r30, r28
    6ac8:	e1 57       	subi	r30, 0x71	; 113
    6aca:	fe 4f       	sbci	r31, 0xFE	; 254
    6acc:	80 83       	st	Z, r24
    6ace:	91 83       	std	Z+1, r25	; 0x01
    6ad0:	a2 83       	std	Z+2, r26	; 0x02
    6ad2:	b3 83       	std	Z+3, r27	; 0x03
    6ad4:	fe 01       	movw	r30, r28
    6ad6:	ed 56       	subi	r30, 0x6D	; 109
    6ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    6ada:	31 83       	std	Z+1, r19	; 0x01
    6adc:	20 83       	st	Z, r18
    6ade:	fe 01       	movw	r30, r28
    6ae0:	e1 57       	subi	r30, 0x71	; 113
    6ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    6ae4:	20 81       	ld	r18, Z
    6ae6:	31 81       	ldd	r19, Z+1	; 0x01
    6ae8:	42 81       	ldd	r20, Z+2	; 0x02
    6aea:	53 81       	ldd	r21, Z+3	; 0x03
    6aec:	fe 01       	movw	r30, r28
    6aee:	ea 57       	subi	r30, 0x7A	; 122
    6af0:	fd 4f       	sbci	r31, 0xFD	; 253
    6af2:	80 81       	ld	r24, Z
    6af4:	91 81       	ldd	r25, Z+1	; 0x01
    6af6:	a2 81       	ldd	r26, Z+2	; 0x02
    6af8:	b3 81       	ldd	r27, Z+3	; 0x03
    6afa:	82 2b       	or	r24, r18
    6afc:	93 2b       	or	r25, r19
    6afe:	a4 2b       	or	r26, r20
    6b00:	b5 2b       	or	r27, r21
    6b02:	fe 01       	movw	r30, r28
    6b04:	ea 57       	subi	r30, 0x7A	; 122
    6b06:	fd 4f       	sbci	r31, 0xFD	; 253
    6b08:	80 83       	st	Z, r24
    6b0a:	91 83       	std	Z+1, r25	; 0x01
    6b0c:	a2 83       	std	Z+2, r26	; 0x02
    6b0e:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    6b10:	fe 01       	movw	r30, r28
    6b12:	eb 57       	subi	r30, 0x7B	; 123
    6b14:	fd 4f       	sbci	r31, 0xFD	; 253
    6b16:	81 e0       	ldi	r24, 0x01	; 1
    6b18:	80 83       	st	Z, r24
    6b1a:	f9 c0       	rjmp	.+498    	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 55)
    6b1c:	fe 01       	movw	r30, r28
    6b1e:	e5 55       	subi	r30, 0x55	; 85
    6b20:	fd 4f       	sbci	r31, 0xFD	; 253
    6b22:	84 81       	ldd	r24, Z+4	; 0x04
    6b24:	87 33       	cpi	r24, 0x37	; 55
    6b26:	08 f0       	brcs	.+2      	; 0x6b2a <main+0x4e7e>
    6b28:	76 c0       	rjmp	.+236    	; 0x6c16 <main+0x4f6a>
    {
      lLEDs |= pgm_read_dword(words+def_zehnM);
    6b2a:	fe 01       	movw	r30, r28
    6b2c:	e3 57       	subi	r30, 0x73	; 115
    6b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    6b30:	80 e6       	ldi	r24, 0x60	; 96
    6b32:	90 e0       	ldi	r25, 0x00	; 0
    6b34:	91 83       	std	Z+1, r25	; 0x01
    6b36:	80 83       	st	Z, r24
    6b38:	fe 01       	movw	r30, r28
    6b3a:	e3 57       	subi	r30, 0x73	; 115
    6b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    6b3e:	80 81       	ld	r24, Z
    6b40:	91 81       	ldd	r25, Z+1	; 0x01
    6b42:	9c 01       	movw	r18, r24
    6b44:	f9 01       	movw	r30, r18
    6b46:	85 91       	lpm	r24, Z+
    6b48:	95 91       	lpm	r25, Z+
    6b4a:	a5 91       	lpm	r26, Z+
    6b4c:	b4 91       	lpm	r27, Z+
    6b4e:	9f 01       	movw	r18, r30
    6b50:	fe 01       	movw	r30, r28
    6b52:	e7 57       	subi	r30, 0x77	; 119
    6b54:	fe 4f       	sbci	r31, 0xFE	; 254
    6b56:	80 83       	st	Z, r24
    6b58:	91 83       	std	Z+1, r25	; 0x01
    6b5a:	a2 83       	std	Z+2, r26	; 0x02
    6b5c:	b3 83       	std	Z+3, r27	; 0x03
    6b5e:	fe 01       	movw	r30, r28
    6b60:	e3 57       	subi	r30, 0x73	; 115
    6b62:	fe 4f       	sbci	r31, 0xFE	; 254
    6b64:	31 83       	std	Z+1, r19	; 0x01
    6b66:	20 83       	st	Z, r18
    6b68:	fe 01       	movw	r30, r28
    6b6a:	e7 57       	subi	r30, 0x77	; 119
    6b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    6b6e:	20 81       	ld	r18, Z
    6b70:	31 81       	ldd	r19, Z+1	; 0x01
    6b72:	42 81       	ldd	r20, Z+2	; 0x02
    6b74:	53 81       	ldd	r21, Z+3	; 0x03
    6b76:	fe 01       	movw	r30, r28
    6b78:	ea 57       	subi	r30, 0x7A	; 122
    6b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    6b7c:	80 81       	ld	r24, Z
    6b7e:	91 81       	ldd	r25, Z+1	; 0x01
    6b80:	a2 81       	ldd	r26, Z+2	; 0x02
    6b82:	b3 81       	ldd	r27, Z+3	; 0x03
    6b84:	82 2b       	or	r24, r18
    6b86:	93 2b       	or	r25, r19
    6b88:	a4 2b       	or	r26, r20
    6b8a:	b5 2b       	or	r27, r21
    6b8c:	fe 01       	movw	r30, r28
    6b8e:	ea 57       	subi	r30, 0x7A	; 122
    6b90:	fd 4f       	sbci	r31, 0xFD	; 253
    6b92:	80 83       	st	Z, r24
    6b94:	91 83       	std	Z+1, r25	; 0x01
    6b96:	a2 83       	std	Z+2, r26	; 0x02
    6b98:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    6b9a:	fe 01       	movw	r30, r28
    6b9c:	e9 57       	subi	r30, 0x79	; 121
    6b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    6ba0:	84 e7       	ldi	r24, 0x74	; 116
    6ba2:	90 e0       	ldi	r25, 0x00	; 0
    6ba4:	91 83       	std	Z+1, r25	; 0x01
    6ba6:	80 83       	st	Z, r24
    6ba8:	fe 01       	movw	r30, r28
    6baa:	e9 57       	subi	r30, 0x79	; 121
    6bac:	fe 4f       	sbci	r31, 0xFE	; 254
    6bae:	80 81       	ld	r24, Z
    6bb0:	91 81       	ldd	r25, Z+1	; 0x01
    6bb2:	9c 01       	movw	r18, r24
    6bb4:	f9 01       	movw	r30, r18
    6bb6:	85 91       	lpm	r24, Z+
    6bb8:	95 91       	lpm	r25, Z+
    6bba:	a5 91       	lpm	r26, Z+
    6bbc:	b4 91       	lpm	r27, Z+
    6bbe:	9f 01       	movw	r18, r30
    6bc0:	fe 01       	movw	r30, r28
    6bc2:	ed 57       	subi	r30, 0x7D	; 125
    6bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    6bc6:	80 83       	st	Z, r24
    6bc8:	91 83       	std	Z+1, r25	; 0x01
    6bca:	a2 83       	std	Z+2, r26	; 0x02
    6bcc:	b3 83       	std	Z+3, r27	; 0x03
    6bce:	fe 01       	movw	r30, r28
    6bd0:	e9 57       	subi	r30, 0x79	; 121
    6bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    6bd4:	31 83       	std	Z+1, r19	; 0x01
    6bd6:	20 83       	st	Z, r18
    6bd8:	fe 01       	movw	r30, r28
    6bda:	ed 57       	subi	r30, 0x7D	; 125
    6bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    6bde:	20 81       	ld	r18, Z
    6be0:	31 81       	ldd	r19, Z+1	; 0x01
    6be2:	42 81       	ldd	r20, Z+2	; 0x02
    6be4:	53 81       	ldd	r21, Z+3	; 0x03
    6be6:	fe 01       	movw	r30, r28
    6be8:	ea 57       	subi	r30, 0x7A	; 122
    6bea:	fd 4f       	sbci	r31, 0xFD	; 253
    6bec:	80 81       	ld	r24, Z
    6bee:	91 81       	ldd	r25, Z+1	; 0x01
    6bf0:	a2 81       	ldd	r26, Z+2	; 0x02
    6bf2:	b3 81       	ldd	r27, Z+3	; 0x03
    6bf4:	82 2b       	or	r24, r18
    6bf6:	93 2b       	or	r25, r19
    6bf8:	a4 2b       	or	r26, r20
    6bfa:	b5 2b       	or	r27, r21
    6bfc:	fe 01       	movw	r30, r28
    6bfe:	ea 57       	subi	r30, 0x7A	; 122
    6c00:	fd 4f       	sbci	r31, 0xFD	; 253
    6c02:	80 83       	st	Z, r24
    6c04:	91 83       	std	Z+1, r25	; 0x01
    6c06:	a2 83       	std	Z+2, r26	; 0x02
    6c08:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    6c0a:	fe 01       	movw	r30, r28
    6c0c:	eb 57       	subi	r30, 0x7B	; 123
    6c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    6c10:	81 e0       	ldi	r24, 0x01	; 1
    6c12:	80 83       	st	Z, r24
    6c14:	7c c0       	rjmp	.+248    	; 0x6d0e <main+0x5062>
    }
    else if (time.mm < 60)
    6c16:	fe 01       	movw	r30, r28
    6c18:	e5 55       	subi	r30, 0x55	; 85
    6c1a:	fd 4f       	sbci	r31, 0xFD	; 253
    6c1c:	84 81       	ldd	r24, Z+4	; 0x04
    6c1e:	8c 33       	cpi	r24, 0x3C	; 60
    6c20:	08 f0       	brcs	.+2      	; 0x6c24 <main+0x4f78>
    6c22:	75 c0       	rjmp	.+234    	; 0x6d0e <main+0x5062>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    6c24:	fe 01       	movw	r30, r28
    6c26:	ef 57       	subi	r30, 0x7F	; 127
    6c28:	fe 4f       	sbci	r31, 0xFE	; 254
    6c2a:	8c e5       	ldi	r24, 0x5C	; 92
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	91 83       	std	Z+1, r25	; 0x01
    6c30:	80 83       	st	Z, r24
    6c32:	fe 01       	movw	r30, r28
    6c34:	ef 57       	subi	r30, 0x7F	; 127
    6c36:	fe 4f       	sbci	r31, 0xFE	; 254
    6c38:	80 81       	ld	r24, Z
    6c3a:	91 81       	ldd	r25, Z+1	; 0x01
    6c3c:	9c 01       	movw	r18, r24
    6c3e:	f9 01       	movw	r30, r18
    6c40:	85 91       	lpm	r24, Z+
    6c42:	95 91       	lpm	r25, Z+
    6c44:	a5 91       	lpm	r26, Z+
    6c46:	b4 91       	lpm	r27, Z+
    6c48:	9f 01       	movw	r18, r30
    6c4a:	fe 01       	movw	r30, r28
    6c4c:	e3 58       	subi	r30, 0x83	; 131
    6c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    6c50:	80 83       	st	Z, r24
    6c52:	91 83       	std	Z+1, r25	; 0x01
    6c54:	a2 83       	std	Z+2, r26	; 0x02
    6c56:	b3 83       	std	Z+3, r27	; 0x03
    6c58:	fe 01       	movw	r30, r28
    6c5a:	ef 57       	subi	r30, 0x7F	; 127
    6c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    6c5e:	31 83       	std	Z+1, r19	; 0x01
    6c60:	20 83       	st	Z, r18
    6c62:	fe 01       	movw	r30, r28
    6c64:	e3 58       	subi	r30, 0x83	; 131
    6c66:	fe 4f       	sbci	r31, 0xFE	; 254
    6c68:	20 81       	ld	r18, Z
    6c6a:	31 81       	ldd	r19, Z+1	; 0x01
    6c6c:	42 81       	ldd	r20, Z+2	; 0x02
    6c6e:	53 81       	ldd	r21, Z+3	; 0x03
    6c70:	fe 01       	movw	r30, r28
    6c72:	ea 57       	subi	r30, 0x7A	; 122
    6c74:	fd 4f       	sbci	r31, 0xFD	; 253
    6c76:	80 81       	ld	r24, Z
    6c78:	91 81       	ldd	r25, Z+1	; 0x01
    6c7a:	a2 81       	ldd	r26, Z+2	; 0x02
    6c7c:	b3 81       	ldd	r27, Z+3	; 0x03
    6c7e:	82 2b       	or	r24, r18
    6c80:	93 2b       	or	r25, r19
    6c82:	a4 2b       	or	r26, r20
    6c84:	b5 2b       	or	r27, r21
    6c86:	fe 01       	movw	r30, r28
    6c88:	ea 57       	subi	r30, 0x7A	; 122
    6c8a:	fd 4f       	sbci	r31, 0xFD	; 253
    6c8c:	80 83       	st	Z, r24
    6c8e:	91 83       	std	Z+1, r25	; 0x01
    6c90:	a2 83       	std	Z+2, r26	; 0x02
    6c92:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    6c94:	fe 01       	movw	r30, r28
    6c96:	e5 58       	subi	r30, 0x85	; 133
    6c98:	fe 4f       	sbci	r31, 0xFE	; 254
    6c9a:	84 e7       	ldi	r24, 0x74	; 116
    6c9c:	90 e0       	ldi	r25, 0x00	; 0
    6c9e:	91 83       	std	Z+1, r25	; 0x01
    6ca0:	80 83       	st	Z, r24
    6ca2:	fe 01       	movw	r30, r28
    6ca4:	e5 58       	subi	r30, 0x85	; 133
    6ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    6ca8:	80 81       	ld	r24, Z
    6caa:	91 81       	ldd	r25, Z+1	; 0x01
    6cac:	9c 01       	movw	r18, r24
    6cae:	f9 01       	movw	r30, r18
    6cb0:	85 91       	lpm	r24, Z+
    6cb2:	95 91       	lpm	r25, Z+
    6cb4:	a5 91       	lpm	r26, Z+
    6cb6:	b4 91       	lpm	r27, Z+
    6cb8:	9f 01       	movw	r18, r30
    6cba:	fe 01       	movw	r30, r28
    6cbc:	e9 58       	subi	r30, 0x89	; 137
    6cbe:	fe 4f       	sbci	r31, 0xFE	; 254
    6cc0:	80 83       	st	Z, r24
    6cc2:	91 83       	std	Z+1, r25	; 0x01
    6cc4:	a2 83       	std	Z+2, r26	; 0x02
    6cc6:	b3 83       	std	Z+3, r27	; 0x03
    6cc8:	fe 01       	movw	r30, r28
    6cca:	e5 58       	subi	r30, 0x85	; 133
    6ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    6cce:	31 83       	std	Z+1, r19	; 0x01
    6cd0:	20 83       	st	Z, r18
    6cd2:	fe 01       	movw	r30, r28
    6cd4:	e9 58       	subi	r30, 0x89	; 137
    6cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    6cd8:	20 81       	ld	r18, Z
    6cda:	31 81       	ldd	r19, Z+1	; 0x01
    6cdc:	42 81       	ldd	r20, Z+2	; 0x02
    6cde:	53 81       	ldd	r21, Z+3	; 0x03
    6ce0:	fe 01       	movw	r30, r28
    6ce2:	ea 57       	subi	r30, 0x7A	; 122
    6ce4:	fd 4f       	sbci	r31, 0xFD	; 253
    6ce6:	80 81       	ld	r24, Z
    6ce8:	91 81       	ldd	r25, Z+1	; 0x01
    6cea:	a2 81       	ldd	r26, Z+2	; 0x02
    6cec:	b3 81       	ldd	r27, Z+3	; 0x03
    6cee:	82 2b       	or	r24, r18
    6cf0:	93 2b       	or	r25, r19
    6cf2:	a4 2b       	or	r26, r20
    6cf4:	b5 2b       	or	r27, r21
    6cf6:	fe 01       	movw	r30, r28
    6cf8:	ea 57       	subi	r30, 0x7A	; 122
    6cfa:	fd 4f       	sbci	r31, 0xFD	; 253
    6cfc:	80 83       	st	Z, r24
    6cfe:	91 83       	std	Z+1, r25	; 0x01
    6d00:	a2 83       	std	Z+2, r26	; 0x02
    6d02:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    6d04:	fe 01       	movw	r30, r28
    6d06:	eb 57       	subi	r30, 0x7B	; 123
    6d08:	fd 4f       	sbci	r31, 0xFD	; 253
    6d0a:	81 e0       	ldi	r24, 0x01	; 1
    6d0c:	80 83       	st	Z, r24
    }

    int def_h[25] =
      { def_zwoelfH, def_einsH, def_zweiH, def_dreiH, def_vierH, def_fuenfH, def_sechsH, def_siebenH, def_achtH, def_neunH, def_zehnH, def_elfH, def_zwoelfH, def_einsH, def_zweiH, def_dreiH, def_vierH, def_fuenfH, def_sechsH, def_siebenH, def_achtH, def_neunH, def_zehnH, def_elfH, def_zwoelfH };
    6d0e:	ce 01       	movw	r24, r28
    6d10:	80 5d       	subi	r24, 0xD0	; 208
    6d12:	9c 4f       	sbci	r25, 0xFC	; 252
    6d14:	cb 5b       	subi	r28, 0xBB	; 187
    6d16:	db 4f       	sbci	r29, 0xFB	; 251
    6d18:	99 83       	std	Y+1, r25	; 0x01
    6d1a:	88 83       	st	Y, r24
    6d1c:	c5 54       	subi	r28, 0x45	; 69
    6d1e:	d4 40       	sbci	r29, 0x04	; 4
    6d20:	24 ea       	ldi	r18, 0xA4	; 164
    6d22:	31 e0       	ldi	r19, 0x01	; 1
    6d24:	c9 5b       	subi	r28, 0xB9	; 185
    6d26:	db 4f       	sbci	r29, 0xFB	; 251
    6d28:	39 83       	std	Y+1, r19	; 0x01
    6d2a:	28 83       	st	Y, r18
    6d2c:	c7 54       	subi	r28, 0x47	; 71
    6d2e:	d4 40       	sbci	r29, 0x04	; 4
    6d30:	32 e3       	ldi	r19, 0x32	; 50
    6d32:	c7 5b       	subi	r28, 0xB7	; 183
    6d34:	db 4f       	sbci	r29, 0xFB	; 251
    6d36:	38 83       	st	Y, r19
    6d38:	c9 54       	subi	r28, 0x49	; 73
    6d3a:	d4 40       	sbci	r29, 0x04	; 4
    6d3c:	c9 5b       	subi	r28, 0xB9	; 185
    6d3e:	db 4f       	sbci	r29, 0xFB	; 251
    6d40:	e8 81       	ld	r30, Y
    6d42:	f9 81       	ldd	r31, Y+1	; 0x01
    6d44:	c7 54       	subi	r28, 0x47	; 71
    6d46:	d4 40       	sbci	r29, 0x04	; 4
    6d48:	00 80       	ld	r0, Z
    6d4a:	c9 5b       	subi	r28, 0xB9	; 185
    6d4c:	db 4f       	sbci	r29, 0xFB	; 251
    6d4e:	28 81       	ld	r18, Y
    6d50:	39 81       	ldd	r19, Y+1	; 0x01
    6d52:	c7 54       	subi	r28, 0x47	; 71
    6d54:	d4 40       	sbci	r29, 0x04	; 4
    6d56:	2f 5f       	subi	r18, 0xFF	; 255
    6d58:	3f 4f       	sbci	r19, 0xFF	; 255
    6d5a:	c9 5b       	subi	r28, 0xB9	; 185
    6d5c:	db 4f       	sbci	r29, 0xFB	; 251
    6d5e:	39 83       	std	Y+1, r19	; 0x01
    6d60:	28 83       	st	Y, r18
    6d62:	c7 54       	subi	r28, 0x47	; 71
    6d64:	d4 40       	sbci	r29, 0x04	; 4
    6d66:	cb 5b       	subi	r28, 0xBB	; 187
    6d68:	db 4f       	sbci	r29, 0xFB	; 251
    6d6a:	e8 81       	ld	r30, Y
    6d6c:	f9 81       	ldd	r31, Y+1	; 0x01
    6d6e:	c5 54       	subi	r28, 0x45	; 69
    6d70:	d4 40       	sbci	r29, 0x04	; 4
    6d72:	00 82       	st	Z, r0
    6d74:	cb 5b       	subi	r28, 0xBB	; 187
    6d76:	db 4f       	sbci	r29, 0xFB	; 251
    6d78:	28 81       	ld	r18, Y
    6d7a:	39 81       	ldd	r19, Y+1	; 0x01
    6d7c:	c5 54       	subi	r28, 0x45	; 69
    6d7e:	d4 40       	sbci	r29, 0x04	; 4
    6d80:	2f 5f       	subi	r18, 0xFF	; 255
    6d82:	3f 4f       	sbci	r19, 0xFF	; 255
    6d84:	cb 5b       	subi	r28, 0xBB	; 187
    6d86:	db 4f       	sbci	r29, 0xFB	; 251
    6d88:	39 83       	std	Y+1, r19	; 0x01
    6d8a:	28 83       	st	Y, r18
    6d8c:	c5 54       	subi	r28, 0x45	; 69
    6d8e:	d4 40       	sbci	r29, 0x04	; 4
    6d90:	c7 5b       	subi	r28, 0xB7	; 183
    6d92:	db 4f       	sbci	r29, 0xFB	; 251
    6d94:	38 81       	ld	r19, Y
    6d96:	c9 54       	subi	r28, 0x49	; 73
    6d98:	d4 40       	sbci	r29, 0x04	; 4
    6d9a:	31 50       	subi	r19, 0x01	; 1
    6d9c:	c7 5b       	subi	r28, 0xB7	; 183
    6d9e:	db 4f       	sbci	r29, 0xFB	; 251
    6da0:	38 83       	st	Y, r19
    6da2:	c9 54       	subi	r28, 0x49	; 73
    6da4:	d4 40       	sbci	r29, 0x04	; 4
    6da6:	c7 5b       	subi	r28, 0xB7	; 183
    6da8:	db 4f       	sbci	r29, 0xFB	; 251
    6daa:	88 81       	ld	r24, Y
    6dac:	c9 54       	subi	r28, 0x49	; 73
    6dae:	d4 40       	sbci	r29, 0x04	; 4
    6db0:	88 23       	and	r24, r24
    6db2:	21 f6       	brne	.-120    	; 0x6d3c <main+0x5090>
    lLEDs |= pgm_read_dword(words + def_h[time.hh + hoffset]);
    6db4:	fe 01       	movw	r30, r28
    6db6:	e5 55       	subi	r30, 0x55	; 85
    6db8:	fd 4f       	sbci	r31, 0xFD	; 253
    6dba:	83 81       	ldd	r24, Z+3	; 0x03
    6dbc:	28 2f       	mov	r18, r24
    6dbe:	30 e0       	ldi	r19, 0x00	; 0
    6dc0:	fe 01       	movw	r30, r28
    6dc2:	eb 57       	subi	r30, 0x7B	; 123
    6dc4:	fd 4f       	sbci	r31, 0xFD	; 253
    6dc6:	80 81       	ld	r24, Z
    6dc8:	88 2f       	mov	r24, r24
    6dca:	90 e0       	ldi	r25, 0x00	; 0
    6dcc:	82 0f       	add	r24, r18
    6dce:	93 1f       	adc	r25, r19
    6dd0:	9e 01       	movw	r18, r28
    6dd2:	20 5d       	subi	r18, 0xD0	; 208
    6dd4:	3c 4f       	sbci	r19, 0xFC	; 252
    6dd6:	88 0f       	add	r24, r24
    6dd8:	99 1f       	adc	r25, r25
    6dda:	f9 01       	movw	r30, r18
    6ddc:	e8 0f       	add	r30, r24
    6dde:	f9 1f       	adc	r31, r25
    6de0:	80 81       	ld	r24, Z
    6de2:	91 81       	ldd	r25, Z+1	; 0x01
    6de4:	88 0f       	add	r24, r24
    6de6:	99 1f       	adc	r25, r25
    6de8:	88 0f       	add	r24, r24
    6dea:	99 1f       	adc	r25, r25
    6dec:	8c 5a       	subi	r24, 0xAC	; 172
    6dee:	9f 4f       	sbci	r25, 0xFF	; 255
    6df0:	fe 01       	movw	r30, r28
    6df2:	eb 58       	subi	r30, 0x8B	; 139
    6df4:	fe 4f       	sbci	r31, 0xFE	; 254
    6df6:	91 83       	std	Z+1, r25	; 0x01
    6df8:	80 83       	st	Z, r24
    6dfa:	fe 01       	movw	r30, r28
    6dfc:	eb 58       	subi	r30, 0x8B	; 139
    6dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    6e00:	80 81       	ld	r24, Z
    6e02:	91 81       	ldd	r25, Z+1	; 0x01
    6e04:	9c 01       	movw	r18, r24
    6e06:	f9 01       	movw	r30, r18
    6e08:	85 91       	lpm	r24, Z+
    6e0a:	95 91       	lpm	r25, Z+
    6e0c:	a5 91       	lpm	r26, Z+
    6e0e:	b4 91       	lpm	r27, Z+
    6e10:	9f 01       	movw	r18, r30
    6e12:	fe 01       	movw	r30, r28
    6e14:	ef 58       	subi	r30, 0x8F	; 143
    6e16:	fe 4f       	sbci	r31, 0xFE	; 254
    6e18:	80 83       	st	Z, r24
    6e1a:	91 83       	std	Z+1, r25	; 0x01
    6e1c:	a2 83       	std	Z+2, r26	; 0x02
    6e1e:	b3 83       	std	Z+3, r27	; 0x03
    6e20:	fe 01       	movw	r30, r28
    6e22:	eb 58       	subi	r30, 0x8B	; 139
    6e24:	fe 4f       	sbci	r31, 0xFE	; 254
    6e26:	31 83       	std	Z+1, r19	; 0x01
    6e28:	20 83       	st	Z, r18
    6e2a:	fe 01       	movw	r30, r28
    6e2c:	ef 58       	subi	r30, 0x8F	; 143
    6e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    6e30:	20 81       	ld	r18, Z
    6e32:	31 81       	ldd	r19, Z+1	; 0x01
    6e34:	42 81       	ldd	r20, Z+2	; 0x02
    6e36:	53 81       	ldd	r21, Z+3	; 0x03
    6e38:	fe 01       	movw	r30, r28
    6e3a:	ea 57       	subi	r30, 0x7A	; 122
    6e3c:	fd 4f       	sbci	r31, 0xFD	; 253
    6e3e:	80 81       	ld	r24, Z
    6e40:	91 81       	ldd	r25, Z+1	; 0x01
    6e42:	a2 81       	ldd	r26, Z+2	; 0x02
    6e44:	b3 81       	ldd	r27, Z+3	; 0x03
    6e46:	82 2b       	or	r24, r18
    6e48:	93 2b       	or	r25, r19
    6e4a:	a4 2b       	or	r26, r20
    6e4c:	b5 2b       	or	r27, r21
    6e4e:	fe 01       	movw	r30, r28
    6e50:	ea 57       	subi	r30, 0x7A	; 122
    6e52:	fd 4f       	sbci	r31, 0xFD	; 253
    6e54:	80 83       	st	Z, r24
    6e56:	91 83       	std	Z+1, r25	; 0x01
    6e58:	a2 83       	std	Z+2, r26	; 0x02
    6e5a:	b3 83       	std	Z+3, r27	; 0x03

    if (!uiScrollingBit)
    6e5c:	fe 01       	movw	r30, r28
    6e5e:	eb 55       	subi	r30, 0x5B	; 91
    6e60:	fd 4f       	sbci	r31, 0xFD	; 253
    6e62:	80 81       	ld	r24, Z
    6e64:	91 81       	ldd	r25, Z+1	; 0x01
    6e66:	a2 81       	ldd	r26, Z+2	; 0x02
    6e68:	b3 81       	ldd	r27, Z+3	; 0x03
    6e6a:	00 97       	sbiw	r24, 0x00	; 0
    6e6c:	a1 05       	cpc	r26, r1
    6e6e:	b1 05       	cpc	r27, r1
    6e70:	59 f4       	brne	.+22     	; 0x6e88 <main+0x51dc>
    {
      shift32_output(lLEDs);
    6e72:	fe 01       	movw	r30, r28
    6e74:	ea 57       	subi	r30, 0x7A	; 122
    6e76:	fd 4f       	sbci	r31, 0xFD	; 253
    6e78:	80 81       	ld	r24, Z
    6e7a:	91 81       	ldd	r25, Z+1	; 0x01
    6e7c:	a2 81       	ldd	r26, Z+2	; 0x02
    6e7e:	b3 81       	ldd	r27, Z+3	; 0x03
    6e80:	bc 01       	movw	r22, r24
    6e82:	cd 01       	movw	r24, r26
    6e84:	0e 94 ac 0a 	call	0x1558	; 0x1558 <shift32_output>
    }

    if (time.ss == 0)
    6e88:	fe 01       	movw	r30, r28
    6e8a:	e5 55       	subi	r30, 0x55	; 85
    6e8c:	fd 4f       	sbci	r31, 0xFD	; 253
    6e8e:	85 81       	ldd	r24, Z+5	; 0x05
    6e90:	88 23       	and	r24, r24
    6e92:	b1 f4       	brne	.+44     	; 0x6ec0 <main+0x5214>
    {
      TimeInfo(time, 0, 0);
    6e94:	fe 01       	movw	r30, r28
    6e96:	e5 55       	subi	r30, 0x55	; 85
    6e98:	fd 4f       	sbci	r31, 0xFD	; 253
    6e9a:	c0 80       	ld	r12, Z
    6e9c:	d1 80       	ldd	r13, Z+1	; 0x01
    6e9e:	e2 80       	ldd	r14, Z+2	; 0x02
    6ea0:	f3 80       	ldd	r15, Z+3	; 0x03
    6ea2:	04 81       	ldd	r16, Z+4	; 0x04
    6ea4:	15 81       	ldd	r17, Z+5	; 0x05
    6ea6:	26 81       	ldd	r18, Z+6	; 0x06
    6ea8:	37 81       	ldd	r19, Z+7	; 0x07
    6eaa:	40 85       	ldd	r20, Z+8	; 0x08
    6eac:	51 85       	ldd	r21, Z+9	; 0x09
    6eae:	62 85       	ldd	r22, Z+10	; 0x0a
    6eb0:	73 85       	ldd	r23, Z+11	; 0x0b
    6eb2:	84 85       	ldd	r24, Z+12	; 0x0c
    6eb4:	aa 24       	eor	r10, r10
    6eb6:	bb 24       	eor	r11, r11
    6eb8:	88 24       	eor	r8, r8
    6eba:	99 24       	eor	r9, r9
    6ebc:	0e 94 22 0c 	call	0x1844	; 0x1844 <TimeInfo>
    }

    if (uiRGB)
    6ec0:	fe 01       	movw	r30, r28
    6ec2:	e1 5d       	subi	r30, 0xD1	; 209
    6ec4:	fc 4f       	sbci	r31, 0xFC	; 252
    6ec6:	80 81       	ld	r24, Z
    6ec8:	88 23       	and	r24, r24
    6eca:	09 f4       	brne	.+2      	; 0x6ece <main+0x5222>
    6ecc:	b7 c0       	rjmp	.+366    	; 0x703c <main+0x5390>
    {
      if (time.sunrise == 0)
    6ece:	fe 01       	movw	r30, r28
    6ed0:	e5 55       	subi	r30, 0x55	; 85
    6ed2:	fd 4f       	sbci	r31, 0xFD	; 253
    6ed4:	80 85       	ldd	r24, Z+8	; 0x08
    6ed6:	88 23       	and	r24, r24
    6ed8:	81 f4       	brne	.+32     	; 0x6efa <main+0x524e>
      {
        uiR = 0x01;
    6eda:	fe 01       	movw	r30, r28
    6edc:	e4 5d       	subi	r30, 0xD4	; 212
    6ede:	fc 4f       	sbci	r31, 0xFC	; 252
    6ee0:	81 e0       	ldi	r24, 0x01	; 1
    6ee2:	80 83       	st	Z, r24
        uiG = 0x01;
    6ee4:	fe 01       	movw	r30, r28
    6ee6:	e3 5d       	subi	r30, 0xD3	; 211
    6ee8:	fc 4f       	sbci	r31, 0xFC	; 252
    6eea:	81 e0       	ldi	r24, 0x01	; 1
    6eec:	80 83       	st	Z, r24
        uiB = 0x55;
    6eee:	fe 01       	movw	r30, r28
    6ef0:	e2 5d       	subi	r30, 0xD2	; 210
    6ef2:	fc 4f       	sbci	r31, 0xFC	; 252
    6ef4:	85 e5       	ldi	r24, 0x55	; 85
    6ef6:	80 83       	st	Z, r24
    6ef8:	a1 c0       	rjmp	.+322    	; 0x703c <main+0x5390>
      }
      else if (time.sunrise >= 100)
    6efa:	fe 01       	movw	r30, r28
    6efc:	e5 55       	subi	r30, 0x55	; 85
    6efe:	fd 4f       	sbci	r31, 0xFD	; 253
    6f00:	80 85       	ldd	r24, Z+8	; 0x08
    6f02:	84 36       	cpi	r24, 0x64	; 100
    6f04:	80 f0       	brcs	.+32     	; 0x6f26 <main+0x527a>
      {
        uiR = 0xff;
    6f06:	fe 01       	movw	r30, r28
    6f08:	e4 5d       	subi	r30, 0xD4	; 212
    6f0a:	fc 4f       	sbci	r31, 0xFC	; 252
    6f0c:	8f ef       	ldi	r24, 0xFF	; 255
    6f0e:	80 83       	st	Z, r24
        uiG = 0xff;
    6f10:	fe 01       	movw	r30, r28
    6f12:	e3 5d       	subi	r30, 0xD3	; 211
    6f14:	fc 4f       	sbci	r31, 0xFC	; 252
    6f16:	8f ef       	ldi	r24, 0xFF	; 255
    6f18:	80 83       	st	Z, r24
        uiB = 0x80;
    6f1a:	fe 01       	movw	r30, r28
    6f1c:	e2 5d       	subi	r30, 0xD2	; 210
    6f1e:	fc 4f       	sbci	r31, 0xFC	; 252
    6f20:	80 e8       	ldi	r24, 0x80	; 128
    6f22:	80 83       	st	Z, r24
    6f24:	8b c0       	rjmp	.+278    	; 0x703c <main+0x5390>
      }
      else if (time.sunrise < 50)
    6f26:	fe 01       	movw	r30, r28
    6f28:	e5 55       	subi	r30, 0x55	; 85
    6f2a:	fd 4f       	sbci	r31, 0xFD	; 253
    6f2c:	80 85       	ldd	r24, Z+8	; 0x08
    6f2e:	82 33       	cpi	r24, 0x32	; 50
    6f30:	38 f5       	brcc	.+78     	; 0x6f80 <main+0x52d4>
      {
        uiR = 0x01 + (time.sunrise * 0xfe) / 50;
    6f32:	fe 01       	movw	r30, r28
    6f34:	e5 55       	subi	r30, 0x55	; 85
    6f36:	fd 4f       	sbci	r31, 0xFD	; 253
    6f38:	80 85       	ldd	r24, Z+8	; 0x08
    6f3a:	88 2f       	mov	r24, r24
    6f3c:	90 e0       	ldi	r25, 0x00	; 0
    6f3e:	9c 01       	movw	r18, r24
    6f40:	22 0f       	add	r18, r18
    6f42:	33 1f       	adc	r19, r19
    6f44:	c9 01       	movw	r24, r18
    6f46:	96 95       	lsr	r25
    6f48:	98 2f       	mov	r25, r24
    6f4a:	88 27       	eor	r24, r24
    6f4c:	97 95       	ror	r25
    6f4e:	87 95       	ror	r24
    6f50:	82 1b       	sub	r24, r18
    6f52:	93 0b       	sbc	r25, r19
    6f54:	22 e3       	ldi	r18, 0x32	; 50
    6f56:	30 e0       	ldi	r19, 0x00	; 0
    6f58:	b9 01       	movw	r22, r18
    6f5a:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <__divmodhi4>
    6f5e:	cb 01       	movw	r24, r22
    6f60:	8f 5f       	subi	r24, 0xFF	; 255
    6f62:	fe 01       	movw	r30, r28
    6f64:	e4 5d       	subi	r30, 0xD4	; 212
    6f66:	fc 4f       	sbci	r31, 0xFC	; 252
    6f68:	80 83       	st	Z, r24
        uiG = 0x01;
    6f6a:	fe 01       	movw	r30, r28
    6f6c:	e3 5d       	subi	r30, 0xD3	; 211
    6f6e:	fc 4f       	sbci	r31, 0xFC	; 252
    6f70:	81 e0       	ldi	r24, 0x01	; 1
    6f72:	80 83       	st	Z, r24
        uiB = 0x55;
    6f74:	fe 01       	movw	r30, r28
    6f76:	e2 5d       	subi	r30, 0xD2	; 210
    6f78:	fc 4f       	sbci	r31, 0xFC	; 252
    6f7a:	85 e5       	ldi	r24, 0x55	; 85
    6f7c:	80 83       	st	Z, r24
    6f7e:	5e c0       	rjmp	.+188    	; 0x703c <main+0x5390>
      }
      else if (time.sunrise > 50)
    6f80:	fe 01       	movw	r30, r28
    6f82:	e5 55       	subi	r30, 0x55	; 85
    6f84:	fd 4f       	sbci	r31, 0xFD	; 253
    6f86:	80 85       	ldd	r24, Z+8	; 0x08
    6f88:	83 33       	cpi	r24, 0x33	; 51
    6f8a:	08 f4       	brcc	.+2      	; 0x6f8e <main+0x52e2>
    6f8c:	57 c0       	rjmp	.+174    	; 0x703c <main+0x5390>
      {
        uiR = 0xff;
    6f8e:	fe 01       	movw	r30, r28
    6f90:	e4 5d       	subi	r30, 0xD4	; 212
    6f92:	fc 4f       	sbci	r31, 0xFC	; 252
    6f94:	8f ef       	ldi	r24, 0xFF	; 255
    6f96:	80 83       	st	Z, r24
        long x = (time.sunrise - 50);
    6f98:	fe 01       	movw	r30, r28
    6f9a:	e5 55       	subi	r30, 0x55	; 85
    6f9c:	fd 4f       	sbci	r31, 0xFD	; 253
    6f9e:	80 85       	ldd	r24, Z+8	; 0x08
    6fa0:	88 2f       	mov	r24, r24
    6fa2:	90 e0       	ldi	r25, 0x00	; 0
    6fa4:	c2 97       	sbiw	r24, 0x32	; 50
    6fa6:	fe 01       	movw	r30, r28
    6fa8:	e3 59       	subi	r30, 0x93	; 147
    6faa:	fe 4f       	sbci	r31, 0xFE	; 254
    6fac:	aa 27       	eor	r26, r26
    6fae:	97 fd       	sbrc	r25, 7
    6fb0:	a0 95       	com	r26
    6fb2:	ba 2f       	mov	r27, r26
    6fb4:	80 83       	st	Z, r24
    6fb6:	91 83       	std	Z+1, r25	; 0x01
    6fb8:	a2 83       	std	Z+2, r26	; 0x02
    6fba:	b3 83       	std	Z+3, r27	; 0x03
        uiG = 0x33 + ((0xcc * (x)) / 50);
    6fbc:	fe 01       	movw	r30, r28
    6fbe:	e3 59       	subi	r30, 0x93	; 147
    6fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    6fc2:	80 81       	ld	r24, Z
    6fc4:	91 81       	ldd	r25, Z+1	; 0x01
    6fc6:	a2 81       	ldd	r26, Z+2	; 0x02
    6fc8:	b3 81       	ldd	r27, Z+3	; 0x03
    6fca:	2c ec       	ldi	r18, 0xCC	; 204
    6fcc:	30 e0       	ldi	r19, 0x00	; 0
    6fce:	40 e0       	ldi	r20, 0x00	; 0
    6fd0:	50 e0       	ldi	r21, 0x00	; 0
    6fd2:	bc 01       	movw	r22, r24
    6fd4:	cd 01       	movw	r24, r26
    6fd6:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <__mulsi3>
    6fda:	dc 01       	movw	r26, r24
    6fdc:	cb 01       	movw	r24, r22
    6fde:	22 e3       	ldi	r18, 0x32	; 50
    6fe0:	30 e0       	ldi	r19, 0x00	; 0
    6fe2:	40 e0       	ldi	r20, 0x00	; 0
    6fe4:	50 e0       	ldi	r21, 0x00	; 0
    6fe6:	bc 01       	movw	r22, r24
    6fe8:	cd 01       	movw	r24, r26
    6fea:	0e 94 d3 3d 	call	0x7ba6	; 0x7ba6 <__divmodsi4>
    6fee:	da 01       	movw	r26, r20
    6ff0:	c9 01       	movw	r24, r18
    6ff2:	8d 5c       	subi	r24, 0xCD	; 205
    6ff4:	fe 01       	movw	r30, r28
    6ff6:	e3 5d       	subi	r30, 0xD3	; 211
    6ff8:	fc 4f       	sbci	r31, 0xFC	; 252
    6ffa:	80 83       	st	Z, r24
        uiB = 0x55 + ((0x2b * (x)) / 50);
    6ffc:	fe 01       	movw	r30, r28
    6ffe:	e3 59       	subi	r30, 0x93	; 147
    7000:	fe 4f       	sbci	r31, 0xFE	; 254
    7002:	80 81       	ld	r24, Z
    7004:	91 81       	ldd	r25, Z+1	; 0x01
    7006:	a2 81       	ldd	r26, Z+2	; 0x02
    7008:	b3 81       	ldd	r27, Z+3	; 0x03
    700a:	2b e2       	ldi	r18, 0x2B	; 43
    700c:	30 e0       	ldi	r19, 0x00	; 0
    700e:	40 e0       	ldi	r20, 0x00	; 0
    7010:	50 e0       	ldi	r21, 0x00	; 0
    7012:	bc 01       	movw	r22, r24
    7014:	cd 01       	movw	r24, r26
    7016:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <__mulsi3>
    701a:	dc 01       	movw	r26, r24
    701c:	cb 01       	movw	r24, r22
    701e:	22 e3       	ldi	r18, 0x32	; 50
    7020:	30 e0       	ldi	r19, 0x00	; 0
    7022:	40 e0       	ldi	r20, 0x00	; 0
    7024:	50 e0       	ldi	r21, 0x00	; 0
    7026:	bc 01       	movw	r22, r24
    7028:	cd 01       	movw	r24, r26
    702a:	0e 94 d3 3d 	call	0x7ba6	; 0x7ba6 <__divmodsi4>
    702e:	da 01       	movw	r26, r20
    7030:	c9 01       	movw	r24, r18
    7032:	8b 5a       	subi	r24, 0xAB	; 171
    7034:	fe 01       	movw	r30, r28
    7036:	e2 5d       	subi	r30, 0xD2	; 210
    7038:	fc 4f       	sbci	r31, 0xFC	; 252
    703a:	80 83       	st	Z, r24
      }
    }

    uiCount = 0;
    703c:	fe 01       	movw	r30, r28
    703e:	ef 55       	subi	r30, 0x5F	; 95
    7040:	fd 4f       	sbci	r31, 0xFD	; 253
    7042:	10 82       	st	Z, r1
    7044:	11 82       	std	Z+1, r1	; 0x01
    7046:	12 82       	std	Z+2, r1	; 0x02
    7048:	13 82       	std	Z+3, r1	; 0x03
    704a:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <main+0x176c>

0000704e <__fixunssfsi>:
    704e:	ef 92       	push	r14
    7050:	ff 92       	push	r15
    7052:	0f 93       	push	r16
    7054:	1f 93       	push	r17
    7056:	7b 01       	movw	r14, r22
    7058:	8c 01       	movw	r16, r24
    705a:	20 e0       	ldi	r18, 0x00	; 0
    705c:	30 e0       	ldi	r19, 0x00	; 0
    705e:	40 e0       	ldi	r20, 0x00	; 0
    7060:	5f e4       	ldi	r21, 0x4F	; 79
    7062:	0e 94 27 3b 	call	0x764e	; 0x764e <__gesf2>
    7066:	88 23       	and	r24, r24
    7068:	8c f0       	brlt	.+34     	; 0x708c <__fixunssfsi+0x3e>
    706a:	c8 01       	movw	r24, r16
    706c:	b7 01       	movw	r22, r14
    706e:	20 e0       	ldi	r18, 0x00	; 0
    7070:	30 e0       	ldi	r19, 0x00	; 0
    7072:	40 e0       	ldi	r20, 0x00	; 0
    7074:	5f e4       	ldi	r21, 0x4F	; 79
    7076:	0e 94 9f 39 	call	0x733e	; 0x733e <__subsf3>
    707a:	0e 94 87 3b 	call	0x770e	; 0x770e <__fixsfsi>
    707e:	9b 01       	movw	r18, r22
    7080:	ac 01       	movw	r20, r24
    7082:	20 50       	subi	r18, 0x00	; 0
    7084:	30 40       	sbci	r19, 0x00	; 0
    7086:	40 40       	sbci	r20, 0x00	; 0
    7088:	50 48       	sbci	r21, 0x80	; 128
    708a:	06 c0       	rjmp	.+12     	; 0x7098 <__fixunssfsi+0x4a>
    708c:	c8 01       	movw	r24, r16
    708e:	b7 01       	movw	r22, r14
    7090:	0e 94 87 3b 	call	0x770e	; 0x770e <__fixsfsi>
    7094:	9b 01       	movw	r18, r22
    7096:	ac 01       	movw	r20, r24
    7098:	b9 01       	movw	r22, r18
    709a:	ca 01       	movw	r24, r20
    709c:	1f 91       	pop	r17
    709e:	0f 91       	pop	r16
    70a0:	ff 90       	pop	r15
    70a2:	ef 90       	pop	r14
    70a4:	08 95       	ret

000070a6 <_fpadd_parts>:
    70a6:	a0 e0       	ldi	r26, 0x00	; 0
    70a8:	b0 e0       	ldi	r27, 0x00	; 0
    70aa:	e9 e5       	ldi	r30, 0x59	; 89
    70ac:	f8 e3       	ldi	r31, 0x38	; 56
    70ae:	0c 94 10 3e 	jmp	0x7c20	; 0x7c20 <__prologue_saves__>
    70b2:	dc 01       	movw	r26, r24
    70b4:	2b 01       	movw	r4, r22
    70b6:	fa 01       	movw	r30, r20
    70b8:	9c 91       	ld	r25, X
    70ba:	92 30       	cpi	r25, 0x02	; 2
    70bc:	08 f4       	brcc	.+2      	; 0x70c0 <_fpadd_parts+0x1a>
    70be:	39 c1       	rjmp	.+626    	; 0x7332 <_fpadd_parts+0x28c>
    70c0:	eb 01       	movw	r28, r22
    70c2:	88 81       	ld	r24, Y
    70c4:	82 30       	cpi	r24, 0x02	; 2
    70c6:	08 f4       	brcc	.+2      	; 0x70ca <_fpadd_parts+0x24>
    70c8:	33 c1       	rjmp	.+614    	; 0x7330 <_fpadd_parts+0x28a>
    70ca:	94 30       	cpi	r25, 0x04	; 4
    70cc:	69 f4       	brne	.+26     	; 0x70e8 <_fpadd_parts+0x42>
    70ce:	84 30       	cpi	r24, 0x04	; 4
    70d0:	09 f0       	breq	.+2      	; 0x70d4 <_fpadd_parts+0x2e>
    70d2:	2f c1       	rjmp	.+606    	; 0x7332 <_fpadd_parts+0x28c>
    70d4:	11 96       	adiw	r26, 0x01	; 1
    70d6:	9c 91       	ld	r25, X
    70d8:	11 97       	sbiw	r26, 0x01	; 1
    70da:	89 81       	ldd	r24, Y+1	; 0x01
    70dc:	98 17       	cp	r25, r24
    70de:	09 f4       	brne	.+2      	; 0x70e2 <_fpadd_parts+0x3c>
    70e0:	28 c1       	rjmp	.+592    	; 0x7332 <_fpadd_parts+0x28c>
    70e2:	a0 e2       	ldi	r26, 0x20	; 32
    70e4:	b5 e0       	ldi	r27, 0x05	; 5
    70e6:	25 c1       	rjmp	.+586    	; 0x7332 <_fpadd_parts+0x28c>
    70e8:	84 30       	cpi	r24, 0x04	; 4
    70ea:	09 f4       	brne	.+2      	; 0x70ee <_fpadd_parts+0x48>
    70ec:	21 c1       	rjmp	.+578    	; 0x7330 <_fpadd_parts+0x28a>
    70ee:	82 30       	cpi	r24, 0x02	; 2
    70f0:	a9 f4       	brne	.+42     	; 0x711c <_fpadd_parts+0x76>
    70f2:	92 30       	cpi	r25, 0x02	; 2
    70f4:	09 f0       	breq	.+2      	; 0x70f8 <_fpadd_parts+0x52>
    70f6:	1d c1       	rjmp	.+570    	; 0x7332 <_fpadd_parts+0x28c>
    70f8:	9a 01       	movw	r18, r20
    70fa:	ad 01       	movw	r20, r26
    70fc:	88 e0       	ldi	r24, 0x08	; 8
    70fe:	ea 01       	movw	r28, r20
    7100:	09 90       	ld	r0, Y+
    7102:	ae 01       	movw	r20, r28
    7104:	e9 01       	movw	r28, r18
    7106:	09 92       	st	Y+, r0
    7108:	9e 01       	movw	r18, r28
    710a:	81 50       	subi	r24, 0x01	; 1
    710c:	c1 f7       	brne	.-16     	; 0x70fe <_fpadd_parts+0x58>
    710e:	e2 01       	movw	r28, r4
    7110:	89 81       	ldd	r24, Y+1	; 0x01
    7112:	11 96       	adiw	r26, 0x01	; 1
    7114:	9c 91       	ld	r25, X
    7116:	89 23       	and	r24, r25
    7118:	81 83       	std	Z+1, r24	; 0x01
    711a:	08 c1       	rjmp	.+528    	; 0x732c <_fpadd_parts+0x286>
    711c:	92 30       	cpi	r25, 0x02	; 2
    711e:	09 f4       	brne	.+2      	; 0x7122 <_fpadd_parts+0x7c>
    7120:	07 c1       	rjmp	.+526    	; 0x7330 <_fpadd_parts+0x28a>
    7122:	12 96       	adiw	r26, 0x02	; 2
    7124:	2d 90       	ld	r2, X+
    7126:	3c 90       	ld	r3, X
    7128:	13 97       	sbiw	r26, 0x03	; 3
    712a:	eb 01       	movw	r28, r22
    712c:	8a 81       	ldd	r24, Y+2	; 0x02
    712e:	9b 81       	ldd	r25, Y+3	; 0x03
    7130:	14 96       	adiw	r26, 0x04	; 4
    7132:	ad 90       	ld	r10, X+
    7134:	bd 90       	ld	r11, X+
    7136:	cd 90       	ld	r12, X+
    7138:	dc 90       	ld	r13, X
    713a:	17 97       	sbiw	r26, 0x07	; 7
    713c:	ec 80       	ldd	r14, Y+4	; 0x04
    713e:	fd 80       	ldd	r15, Y+5	; 0x05
    7140:	0e 81       	ldd	r16, Y+6	; 0x06
    7142:	1f 81       	ldd	r17, Y+7	; 0x07
    7144:	91 01       	movw	r18, r2
    7146:	28 1b       	sub	r18, r24
    7148:	39 0b       	sbc	r19, r25
    714a:	b9 01       	movw	r22, r18
    714c:	37 ff       	sbrs	r19, 7
    714e:	04 c0       	rjmp	.+8      	; 0x7158 <_fpadd_parts+0xb2>
    7150:	66 27       	eor	r22, r22
    7152:	77 27       	eor	r23, r23
    7154:	62 1b       	sub	r22, r18
    7156:	73 0b       	sbc	r23, r19
    7158:	60 32       	cpi	r22, 0x20	; 32
    715a:	71 05       	cpc	r23, r1
    715c:	0c f0       	brlt	.+2      	; 0x7160 <_fpadd_parts+0xba>
    715e:	61 c0       	rjmp	.+194    	; 0x7222 <_fpadd_parts+0x17c>
    7160:	12 16       	cp	r1, r18
    7162:	13 06       	cpc	r1, r19
    7164:	6c f5       	brge	.+90     	; 0x71c0 <_fpadd_parts+0x11a>
    7166:	37 01       	movw	r6, r14
    7168:	48 01       	movw	r8, r16
    716a:	06 2e       	mov	r0, r22
    716c:	04 c0       	rjmp	.+8      	; 0x7176 <_fpadd_parts+0xd0>
    716e:	96 94       	lsr	r9
    7170:	87 94       	ror	r8
    7172:	77 94       	ror	r7
    7174:	67 94       	ror	r6
    7176:	0a 94       	dec	r0
    7178:	d2 f7       	brpl	.-12     	; 0x716e <_fpadd_parts+0xc8>
    717a:	21 e0       	ldi	r18, 0x01	; 1
    717c:	30 e0       	ldi	r19, 0x00	; 0
    717e:	40 e0       	ldi	r20, 0x00	; 0
    7180:	50 e0       	ldi	r21, 0x00	; 0
    7182:	04 c0       	rjmp	.+8      	; 0x718c <_fpadd_parts+0xe6>
    7184:	22 0f       	add	r18, r18
    7186:	33 1f       	adc	r19, r19
    7188:	44 1f       	adc	r20, r20
    718a:	55 1f       	adc	r21, r21
    718c:	6a 95       	dec	r22
    718e:	d2 f7       	brpl	.-12     	; 0x7184 <_fpadd_parts+0xde>
    7190:	21 50       	subi	r18, 0x01	; 1
    7192:	30 40       	sbci	r19, 0x00	; 0
    7194:	40 40       	sbci	r20, 0x00	; 0
    7196:	50 40       	sbci	r21, 0x00	; 0
    7198:	2e 21       	and	r18, r14
    719a:	3f 21       	and	r19, r15
    719c:	40 23       	and	r20, r16
    719e:	51 23       	and	r21, r17
    71a0:	21 15       	cp	r18, r1
    71a2:	31 05       	cpc	r19, r1
    71a4:	41 05       	cpc	r20, r1
    71a6:	51 05       	cpc	r21, r1
    71a8:	21 f0       	breq	.+8      	; 0x71b2 <_fpadd_parts+0x10c>
    71aa:	21 e0       	ldi	r18, 0x01	; 1
    71ac:	30 e0       	ldi	r19, 0x00	; 0
    71ae:	40 e0       	ldi	r20, 0x00	; 0
    71b0:	50 e0       	ldi	r21, 0x00	; 0
    71b2:	79 01       	movw	r14, r18
    71b4:	8a 01       	movw	r16, r20
    71b6:	e6 28       	or	r14, r6
    71b8:	f7 28       	or	r15, r7
    71ba:	08 29       	or	r16, r8
    71bc:	19 29       	or	r17, r9
    71be:	3c c0       	rjmp	.+120    	; 0x7238 <_fpadd_parts+0x192>
    71c0:	23 2b       	or	r18, r19
    71c2:	d1 f1       	breq	.+116    	; 0x7238 <_fpadd_parts+0x192>
    71c4:	26 0e       	add	r2, r22
    71c6:	37 1e       	adc	r3, r23
    71c8:	35 01       	movw	r6, r10
    71ca:	46 01       	movw	r8, r12
    71cc:	06 2e       	mov	r0, r22
    71ce:	04 c0       	rjmp	.+8      	; 0x71d8 <_fpadd_parts+0x132>
    71d0:	96 94       	lsr	r9
    71d2:	87 94       	ror	r8
    71d4:	77 94       	ror	r7
    71d6:	67 94       	ror	r6
    71d8:	0a 94       	dec	r0
    71da:	d2 f7       	brpl	.-12     	; 0x71d0 <_fpadd_parts+0x12a>
    71dc:	21 e0       	ldi	r18, 0x01	; 1
    71de:	30 e0       	ldi	r19, 0x00	; 0
    71e0:	40 e0       	ldi	r20, 0x00	; 0
    71e2:	50 e0       	ldi	r21, 0x00	; 0
    71e4:	04 c0       	rjmp	.+8      	; 0x71ee <_fpadd_parts+0x148>
    71e6:	22 0f       	add	r18, r18
    71e8:	33 1f       	adc	r19, r19
    71ea:	44 1f       	adc	r20, r20
    71ec:	55 1f       	adc	r21, r21
    71ee:	6a 95       	dec	r22
    71f0:	d2 f7       	brpl	.-12     	; 0x71e6 <_fpadd_parts+0x140>
    71f2:	21 50       	subi	r18, 0x01	; 1
    71f4:	30 40       	sbci	r19, 0x00	; 0
    71f6:	40 40       	sbci	r20, 0x00	; 0
    71f8:	50 40       	sbci	r21, 0x00	; 0
    71fa:	2a 21       	and	r18, r10
    71fc:	3b 21       	and	r19, r11
    71fe:	4c 21       	and	r20, r12
    7200:	5d 21       	and	r21, r13
    7202:	21 15       	cp	r18, r1
    7204:	31 05       	cpc	r19, r1
    7206:	41 05       	cpc	r20, r1
    7208:	51 05       	cpc	r21, r1
    720a:	21 f0       	breq	.+8      	; 0x7214 <_fpadd_parts+0x16e>
    720c:	21 e0       	ldi	r18, 0x01	; 1
    720e:	30 e0       	ldi	r19, 0x00	; 0
    7210:	40 e0       	ldi	r20, 0x00	; 0
    7212:	50 e0       	ldi	r21, 0x00	; 0
    7214:	59 01       	movw	r10, r18
    7216:	6a 01       	movw	r12, r20
    7218:	a6 28       	or	r10, r6
    721a:	b7 28       	or	r11, r7
    721c:	c8 28       	or	r12, r8
    721e:	d9 28       	or	r13, r9
    7220:	0b c0       	rjmp	.+22     	; 0x7238 <_fpadd_parts+0x192>
    7222:	82 15       	cp	r24, r2
    7224:	93 05       	cpc	r25, r3
    7226:	2c f0       	brlt	.+10     	; 0x7232 <_fpadd_parts+0x18c>
    7228:	1c 01       	movw	r2, r24
    722a:	aa 24       	eor	r10, r10
    722c:	bb 24       	eor	r11, r11
    722e:	65 01       	movw	r12, r10
    7230:	03 c0       	rjmp	.+6      	; 0x7238 <_fpadd_parts+0x192>
    7232:	ee 24       	eor	r14, r14
    7234:	ff 24       	eor	r15, r15
    7236:	87 01       	movw	r16, r14
    7238:	11 96       	adiw	r26, 0x01	; 1
    723a:	9c 91       	ld	r25, X
    723c:	d2 01       	movw	r26, r4
    723e:	11 96       	adiw	r26, 0x01	; 1
    7240:	8c 91       	ld	r24, X
    7242:	98 17       	cp	r25, r24
    7244:	09 f4       	brne	.+2      	; 0x7248 <_fpadd_parts+0x1a2>
    7246:	45 c0       	rjmp	.+138    	; 0x72d2 <_fpadd_parts+0x22c>
    7248:	99 23       	and	r25, r25
    724a:	39 f0       	breq	.+14     	; 0x725a <_fpadd_parts+0x1b4>
    724c:	a8 01       	movw	r20, r16
    724e:	97 01       	movw	r18, r14
    7250:	2a 19       	sub	r18, r10
    7252:	3b 09       	sbc	r19, r11
    7254:	4c 09       	sbc	r20, r12
    7256:	5d 09       	sbc	r21, r13
    7258:	06 c0       	rjmp	.+12     	; 0x7266 <_fpadd_parts+0x1c0>
    725a:	a6 01       	movw	r20, r12
    725c:	95 01       	movw	r18, r10
    725e:	2e 19       	sub	r18, r14
    7260:	3f 09       	sbc	r19, r15
    7262:	40 0b       	sbc	r20, r16
    7264:	51 0b       	sbc	r21, r17
    7266:	57 fd       	sbrc	r21, 7
    7268:	08 c0       	rjmp	.+16     	; 0x727a <_fpadd_parts+0x1d4>
    726a:	11 82       	std	Z+1, r1	; 0x01
    726c:	33 82       	std	Z+3, r3	; 0x03
    726e:	22 82       	std	Z+2, r2	; 0x02
    7270:	24 83       	std	Z+4, r18	; 0x04
    7272:	35 83       	std	Z+5, r19	; 0x05
    7274:	46 83       	std	Z+6, r20	; 0x06
    7276:	57 83       	std	Z+7, r21	; 0x07
    7278:	1d c0       	rjmp	.+58     	; 0x72b4 <_fpadd_parts+0x20e>
    727a:	81 e0       	ldi	r24, 0x01	; 1
    727c:	81 83       	std	Z+1, r24	; 0x01
    727e:	33 82       	std	Z+3, r3	; 0x03
    7280:	22 82       	std	Z+2, r2	; 0x02
    7282:	88 27       	eor	r24, r24
    7284:	99 27       	eor	r25, r25
    7286:	dc 01       	movw	r26, r24
    7288:	82 1b       	sub	r24, r18
    728a:	93 0b       	sbc	r25, r19
    728c:	a4 0b       	sbc	r26, r20
    728e:	b5 0b       	sbc	r27, r21
    7290:	84 83       	std	Z+4, r24	; 0x04
    7292:	95 83       	std	Z+5, r25	; 0x05
    7294:	a6 83       	std	Z+6, r26	; 0x06
    7296:	b7 83       	std	Z+7, r27	; 0x07
    7298:	0d c0       	rjmp	.+26     	; 0x72b4 <_fpadd_parts+0x20e>
    729a:	22 0f       	add	r18, r18
    729c:	33 1f       	adc	r19, r19
    729e:	44 1f       	adc	r20, r20
    72a0:	55 1f       	adc	r21, r21
    72a2:	24 83       	std	Z+4, r18	; 0x04
    72a4:	35 83       	std	Z+5, r19	; 0x05
    72a6:	46 83       	std	Z+6, r20	; 0x06
    72a8:	57 83       	std	Z+7, r21	; 0x07
    72aa:	82 81       	ldd	r24, Z+2	; 0x02
    72ac:	93 81       	ldd	r25, Z+3	; 0x03
    72ae:	01 97       	sbiw	r24, 0x01	; 1
    72b0:	93 83       	std	Z+3, r25	; 0x03
    72b2:	82 83       	std	Z+2, r24	; 0x02
    72b4:	24 81       	ldd	r18, Z+4	; 0x04
    72b6:	35 81       	ldd	r19, Z+5	; 0x05
    72b8:	46 81       	ldd	r20, Z+6	; 0x06
    72ba:	57 81       	ldd	r21, Z+7	; 0x07
    72bc:	da 01       	movw	r26, r20
    72be:	c9 01       	movw	r24, r18
    72c0:	01 97       	sbiw	r24, 0x01	; 1
    72c2:	a1 09       	sbc	r26, r1
    72c4:	b1 09       	sbc	r27, r1
    72c6:	8f 5f       	subi	r24, 0xFF	; 255
    72c8:	9f 4f       	sbci	r25, 0xFF	; 255
    72ca:	af 4f       	sbci	r26, 0xFF	; 255
    72cc:	bf 43       	sbci	r27, 0x3F	; 63
    72ce:	28 f3       	brcs	.-54     	; 0x729a <_fpadd_parts+0x1f4>
    72d0:	0b c0       	rjmp	.+22     	; 0x72e8 <_fpadd_parts+0x242>
    72d2:	91 83       	std	Z+1, r25	; 0x01
    72d4:	33 82       	std	Z+3, r3	; 0x03
    72d6:	22 82       	std	Z+2, r2	; 0x02
    72d8:	ea 0c       	add	r14, r10
    72da:	fb 1c       	adc	r15, r11
    72dc:	0c 1d       	adc	r16, r12
    72de:	1d 1d       	adc	r17, r13
    72e0:	e4 82       	std	Z+4, r14	; 0x04
    72e2:	f5 82       	std	Z+5, r15	; 0x05
    72e4:	06 83       	std	Z+6, r16	; 0x06
    72e6:	17 83       	std	Z+7, r17	; 0x07
    72e8:	83 e0       	ldi	r24, 0x03	; 3
    72ea:	80 83       	st	Z, r24
    72ec:	24 81       	ldd	r18, Z+4	; 0x04
    72ee:	35 81       	ldd	r19, Z+5	; 0x05
    72f0:	46 81       	ldd	r20, Z+6	; 0x06
    72f2:	57 81       	ldd	r21, Z+7	; 0x07
    72f4:	57 ff       	sbrs	r21, 7
    72f6:	1a c0       	rjmp	.+52     	; 0x732c <_fpadd_parts+0x286>
    72f8:	c9 01       	movw	r24, r18
    72fa:	aa 27       	eor	r26, r26
    72fc:	97 fd       	sbrc	r25, 7
    72fe:	a0 95       	com	r26
    7300:	ba 2f       	mov	r27, r26
    7302:	81 70       	andi	r24, 0x01	; 1
    7304:	90 70       	andi	r25, 0x00	; 0
    7306:	a0 70       	andi	r26, 0x00	; 0
    7308:	b0 70       	andi	r27, 0x00	; 0
    730a:	56 95       	lsr	r21
    730c:	47 95       	ror	r20
    730e:	37 95       	ror	r19
    7310:	27 95       	ror	r18
    7312:	82 2b       	or	r24, r18
    7314:	93 2b       	or	r25, r19
    7316:	a4 2b       	or	r26, r20
    7318:	b5 2b       	or	r27, r21
    731a:	84 83       	std	Z+4, r24	; 0x04
    731c:	95 83       	std	Z+5, r25	; 0x05
    731e:	a6 83       	std	Z+6, r26	; 0x06
    7320:	b7 83       	std	Z+7, r27	; 0x07
    7322:	82 81       	ldd	r24, Z+2	; 0x02
    7324:	93 81       	ldd	r25, Z+3	; 0x03
    7326:	01 96       	adiw	r24, 0x01	; 1
    7328:	93 83       	std	Z+3, r25	; 0x03
    732a:	82 83       	std	Z+2, r24	; 0x02
    732c:	df 01       	movw	r26, r30
    732e:	01 c0       	rjmp	.+2      	; 0x7332 <_fpadd_parts+0x28c>
    7330:	d2 01       	movw	r26, r4
    7332:	cd 01       	movw	r24, r26
    7334:	cd b7       	in	r28, 0x3d	; 61
    7336:	de b7       	in	r29, 0x3e	; 62
    7338:	e2 e1       	ldi	r30, 0x12	; 18
    733a:	0c 94 2c 3e 	jmp	0x7c58	; 0x7c58 <__epilogue_restores__>

0000733e <__subsf3>:
    733e:	a0 e2       	ldi	r26, 0x20	; 32
    7340:	b0 e0       	ldi	r27, 0x00	; 0
    7342:	e5 ea       	ldi	r30, 0xA5	; 165
    7344:	f9 e3       	ldi	r31, 0x39	; 57
    7346:	0c 94 1c 3e 	jmp	0x7c38	; 0x7c38 <__prologue_saves__+0x18>
    734a:	69 83       	std	Y+1, r22	; 0x01
    734c:	7a 83       	std	Y+2, r23	; 0x02
    734e:	8b 83       	std	Y+3, r24	; 0x03
    7350:	9c 83       	std	Y+4, r25	; 0x04
    7352:	2d 83       	std	Y+5, r18	; 0x05
    7354:	3e 83       	std	Y+6, r19	; 0x06
    7356:	4f 83       	std	Y+7, r20	; 0x07
    7358:	58 87       	std	Y+8, r21	; 0x08
    735a:	e9 e0       	ldi	r30, 0x09	; 9
    735c:	ee 2e       	mov	r14, r30
    735e:	f1 2c       	mov	r15, r1
    7360:	ec 0e       	add	r14, r28
    7362:	fd 1e       	adc	r15, r29
    7364:	ce 01       	movw	r24, r28
    7366:	01 96       	adiw	r24, 0x01	; 1
    7368:	b7 01       	movw	r22, r14
    736a:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    736e:	8e 01       	movw	r16, r28
    7370:	0f 5e       	subi	r16, 0xEF	; 239
    7372:	1f 4f       	sbci	r17, 0xFF	; 255
    7374:	ce 01       	movw	r24, r28
    7376:	05 96       	adiw	r24, 0x05	; 5
    7378:	b8 01       	movw	r22, r16
    737a:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    737e:	8a 89       	ldd	r24, Y+18	; 0x12
    7380:	91 e0       	ldi	r25, 0x01	; 1
    7382:	89 27       	eor	r24, r25
    7384:	8a 8b       	std	Y+18, r24	; 0x12
    7386:	c7 01       	movw	r24, r14
    7388:	b8 01       	movw	r22, r16
    738a:	ae 01       	movw	r20, r28
    738c:	47 5e       	subi	r20, 0xE7	; 231
    738e:	5f 4f       	sbci	r21, 0xFF	; 255
    7390:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_fpadd_parts>
    7394:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__pack_f>
    7398:	a0 96       	adiw	r28, 0x20	; 32
    739a:	e6 e0       	ldi	r30, 0x06	; 6
    739c:	0c 94 38 3e 	jmp	0x7c70	; 0x7c70 <__epilogue_restores__+0x18>

000073a0 <__addsf3>:
    73a0:	a0 e2       	ldi	r26, 0x20	; 32
    73a2:	b0 e0       	ldi	r27, 0x00	; 0
    73a4:	e6 ed       	ldi	r30, 0xD6	; 214
    73a6:	f9 e3       	ldi	r31, 0x39	; 57
    73a8:	0c 94 1c 3e 	jmp	0x7c38	; 0x7c38 <__prologue_saves__+0x18>
    73ac:	69 83       	std	Y+1, r22	; 0x01
    73ae:	7a 83       	std	Y+2, r23	; 0x02
    73b0:	8b 83       	std	Y+3, r24	; 0x03
    73b2:	9c 83       	std	Y+4, r25	; 0x04
    73b4:	2d 83       	std	Y+5, r18	; 0x05
    73b6:	3e 83       	std	Y+6, r19	; 0x06
    73b8:	4f 83       	std	Y+7, r20	; 0x07
    73ba:	58 87       	std	Y+8, r21	; 0x08
    73bc:	f9 e0       	ldi	r31, 0x09	; 9
    73be:	ef 2e       	mov	r14, r31
    73c0:	f1 2c       	mov	r15, r1
    73c2:	ec 0e       	add	r14, r28
    73c4:	fd 1e       	adc	r15, r29
    73c6:	ce 01       	movw	r24, r28
    73c8:	01 96       	adiw	r24, 0x01	; 1
    73ca:	b7 01       	movw	r22, r14
    73cc:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    73d0:	8e 01       	movw	r16, r28
    73d2:	0f 5e       	subi	r16, 0xEF	; 239
    73d4:	1f 4f       	sbci	r17, 0xFF	; 255
    73d6:	ce 01       	movw	r24, r28
    73d8:	05 96       	adiw	r24, 0x05	; 5
    73da:	b8 01       	movw	r22, r16
    73dc:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    73e0:	c7 01       	movw	r24, r14
    73e2:	b8 01       	movw	r22, r16
    73e4:	ae 01       	movw	r20, r28
    73e6:	47 5e       	subi	r20, 0xE7	; 231
    73e8:	5f 4f       	sbci	r21, 0xFF	; 255
    73ea:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_fpadd_parts>
    73ee:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__pack_f>
    73f2:	a0 96       	adiw	r28, 0x20	; 32
    73f4:	e6 e0       	ldi	r30, 0x06	; 6
    73f6:	0c 94 38 3e 	jmp	0x7c70	; 0x7c70 <__epilogue_restores__+0x18>

000073fa <__mulsf3>:
    73fa:	a0 e2       	ldi	r26, 0x20	; 32
    73fc:	b0 e0       	ldi	r27, 0x00	; 0
    73fe:	e3 e0       	ldi	r30, 0x03	; 3
    7400:	fa e3       	ldi	r31, 0x3A	; 58
    7402:	0c 94 10 3e 	jmp	0x7c20	; 0x7c20 <__prologue_saves__>
    7406:	69 83       	std	Y+1, r22	; 0x01
    7408:	7a 83       	std	Y+2, r23	; 0x02
    740a:	8b 83       	std	Y+3, r24	; 0x03
    740c:	9c 83       	std	Y+4, r25	; 0x04
    740e:	2d 83       	std	Y+5, r18	; 0x05
    7410:	3e 83       	std	Y+6, r19	; 0x06
    7412:	4f 83       	std	Y+7, r20	; 0x07
    7414:	58 87       	std	Y+8, r21	; 0x08
    7416:	ce 01       	movw	r24, r28
    7418:	01 96       	adiw	r24, 0x01	; 1
    741a:	be 01       	movw	r22, r28
    741c:	67 5f       	subi	r22, 0xF7	; 247
    741e:	7f 4f       	sbci	r23, 0xFF	; 255
    7420:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    7424:	ce 01       	movw	r24, r28
    7426:	05 96       	adiw	r24, 0x05	; 5
    7428:	be 01       	movw	r22, r28
    742a:	6f 5e       	subi	r22, 0xEF	; 239
    742c:	7f 4f       	sbci	r23, 0xFF	; 255
    742e:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    7432:	99 85       	ldd	r25, Y+9	; 0x09
    7434:	92 30       	cpi	r25, 0x02	; 2
    7436:	88 f0       	brcs	.+34     	; 0x745a <__mulsf3+0x60>
    7438:	89 89       	ldd	r24, Y+17	; 0x11
    743a:	82 30       	cpi	r24, 0x02	; 2
    743c:	c8 f0       	brcs	.+50     	; 0x7470 <__mulsf3+0x76>
    743e:	94 30       	cpi	r25, 0x04	; 4
    7440:	19 f4       	brne	.+6      	; 0x7448 <__mulsf3+0x4e>
    7442:	82 30       	cpi	r24, 0x02	; 2
    7444:	51 f4       	brne	.+20     	; 0x745a <__mulsf3+0x60>
    7446:	04 c0       	rjmp	.+8      	; 0x7450 <__mulsf3+0x56>
    7448:	84 30       	cpi	r24, 0x04	; 4
    744a:	29 f4       	brne	.+10     	; 0x7456 <__mulsf3+0x5c>
    744c:	92 30       	cpi	r25, 0x02	; 2
    744e:	81 f4       	brne	.+32     	; 0x7470 <__mulsf3+0x76>
    7450:	80 e2       	ldi	r24, 0x20	; 32
    7452:	95 e0       	ldi	r25, 0x05	; 5
    7454:	c6 c0       	rjmp	.+396    	; 0x75e2 <__mulsf3+0x1e8>
    7456:	92 30       	cpi	r25, 0x02	; 2
    7458:	49 f4       	brne	.+18     	; 0x746c <__mulsf3+0x72>
    745a:	20 e0       	ldi	r18, 0x00	; 0
    745c:	9a 85       	ldd	r25, Y+10	; 0x0a
    745e:	8a 89       	ldd	r24, Y+18	; 0x12
    7460:	98 13       	cpse	r25, r24
    7462:	21 e0       	ldi	r18, 0x01	; 1
    7464:	2a 87       	std	Y+10, r18	; 0x0a
    7466:	ce 01       	movw	r24, r28
    7468:	09 96       	adiw	r24, 0x09	; 9
    746a:	bb c0       	rjmp	.+374    	; 0x75e2 <__mulsf3+0x1e8>
    746c:	82 30       	cpi	r24, 0x02	; 2
    746e:	49 f4       	brne	.+18     	; 0x7482 <__mulsf3+0x88>
    7470:	20 e0       	ldi	r18, 0x00	; 0
    7472:	9a 85       	ldd	r25, Y+10	; 0x0a
    7474:	8a 89       	ldd	r24, Y+18	; 0x12
    7476:	98 13       	cpse	r25, r24
    7478:	21 e0       	ldi	r18, 0x01	; 1
    747a:	2a 8b       	std	Y+18, r18	; 0x12
    747c:	ce 01       	movw	r24, r28
    747e:	41 96       	adiw	r24, 0x11	; 17
    7480:	b0 c0       	rjmp	.+352    	; 0x75e2 <__mulsf3+0x1e8>
    7482:	2d 84       	ldd	r2, Y+13	; 0x0d
    7484:	3e 84       	ldd	r3, Y+14	; 0x0e
    7486:	4f 84       	ldd	r4, Y+15	; 0x0f
    7488:	58 88       	ldd	r5, Y+16	; 0x10
    748a:	6d 88       	ldd	r6, Y+21	; 0x15
    748c:	7e 88       	ldd	r7, Y+22	; 0x16
    748e:	8f 88       	ldd	r8, Y+23	; 0x17
    7490:	98 8c       	ldd	r9, Y+24	; 0x18
    7492:	ee 24       	eor	r14, r14
    7494:	ff 24       	eor	r15, r15
    7496:	87 01       	movw	r16, r14
    7498:	aa 24       	eor	r10, r10
    749a:	bb 24       	eor	r11, r11
    749c:	65 01       	movw	r12, r10
    749e:	40 e0       	ldi	r20, 0x00	; 0
    74a0:	50 e0       	ldi	r21, 0x00	; 0
    74a2:	60 e0       	ldi	r22, 0x00	; 0
    74a4:	70 e0       	ldi	r23, 0x00	; 0
    74a6:	e0 e0       	ldi	r30, 0x00	; 0
    74a8:	f0 e0       	ldi	r31, 0x00	; 0
    74aa:	c1 01       	movw	r24, r2
    74ac:	81 70       	andi	r24, 0x01	; 1
    74ae:	90 70       	andi	r25, 0x00	; 0
    74b0:	89 2b       	or	r24, r25
    74b2:	e9 f0       	breq	.+58     	; 0x74ee <__mulsf3+0xf4>
    74b4:	e6 0c       	add	r14, r6
    74b6:	f7 1c       	adc	r15, r7
    74b8:	08 1d       	adc	r16, r8
    74ba:	19 1d       	adc	r17, r9
    74bc:	9a 01       	movw	r18, r20
    74be:	ab 01       	movw	r20, r22
    74c0:	2a 0d       	add	r18, r10
    74c2:	3b 1d       	adc	r19, r11
    74c4:	4c 1d       	adc	r20, r12
    74c6:	5d 1d       	adc	r21, r13
    74c8:	80 e0       	ldi	r24, 0x00	; 0
    74ca:	90 e0       	ldi	r25, 0x00	; 0
    74cc:	a0 e0       	ldi	r26, 0x00	; 0
    74ce:	b0 e0       	ldi	r27, 0x00	; 0
    74d0:	e6 14       	cp	r14, r6
    74d2:	f7 04       	cpc	r15, r7
    74d4:	08 05       	cpc	r16, r8
    74d6:	19 05       	cpc	r17, r9
    74d8:	20 f4       	brcc	.+8      	; 0x74e2 <__mulsf3+0xe8>
    74da:	81 e0       	ldi	r24, 0x01	; 1
    74dc:	90 e0       	ldi	r25, 0x00	; 0
    74de:	a0 e0       	ldi	r26, 0x00	; 0
    74e0:	b0 e0       	ldi	r27, 0x00	; 0
    74e2:	ba 01       	movw	r22, r20
    74e4:	a9 01       	movw	r20, r18
    74e6:	48 0f       	add	r20, r24
    74e8:	59 1f       	adc	r21, r25
    74ea:	6a 1f       	adc	r22, r26
    74ec:	7b 1f       	adc	r23, r27
    74ee:	aa 0c       	add	r10, r10
    74f0:	bb 1c       	adc	r11, r11
    74f2:	cc 1c       	adc	r12, r12
    74f4:	dd 1c       	adc	r13, r13
    74f6:	97 fe       	sbrs	r9, 7
    74f8:	08 c0       	rjmp	.+16     	; 0x750a <__mulsf3+0x110>
    74fa:	81 e0       	ldi	r24, 0x01	; 1
    74fc:	90 e0       	ldi	r25, 0x00	; 0
    74fe:	a0 e0       	ldi	r26, 0x00	; 0
    7500:	b0 e0       	ldi	r27, 0x00	; 0
    7502:	a8 2a       	or	r10, r24
    7504:	b9 2a       	or	r11, r25
    7506:	ca 2a       	or	r12, r26
    7508:	db 2a       	or	r13, r27
    750a:	31 96       	adiw	r30, 0x01	; 1
    750c:	e0 32       	cpi	r30, 0x20	; 32
    750e:	f1 05       	cpc	r31, r1
    7510:	49 f0       	breq	.+18     	; 0x7524 <__mulsf3+0x12a>
    7512:	66 0c       	add	r6, r6
    7514:	77 1c       	adc	r7, r7
    7516:	88 1c       	adc	r8, r8
    7518:	99 1c       	adc	r9, r9
    751a:	56 94       	lsr	r5
    751c:	47 94       	ror	r4
    751e:	37 94       	ror	r3
    7520:	27 94       	ror	r2
    7522:	c3 cf       	rjmp	.-122    	; 0x74aa <__mulsf3+0xb0>
    7524:	fa 85       	ldd	r31, Y+10	; 0x0a
    7526:	ea 89       	ldd	r30, Y+18	; 0x12
    7528:	2b 89       	ldd	r18, Y+19	; 0x13
    752a:	3c 89       	ldd	r19, Y+20	; 0x14
    752c:	8b 85       	ldd	r24, Y+11	; 0x0b
    752e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7530:	28 0f       	add	r18, r24
    7532:	39 1f       	adc	r19, r25
    7534:	2e 5f       	subi	r18, 0xFE	; 254
    7536:	3f 4f       	sbci	r19, 0xFF	; 255
    7538:	17 c0       	rjmp	.+46     	; 0x7568 <__mulsf3+0x16e>
    753a:	ca 01       	movw	r24, r20
    753c:	81 70       	andi	r24, 0x01	; 1
    753e:	90 70       	andi	r25, 0x00	; 0
    7540:	89 2b       	or	r24, r25
    7542:	61 f0       	breq	.+24     	; 0x755c <__mulsf3+0x162>
    7544:	16 95       	lsr	r17
    7546:	07 95       	ror	r16
    7548:	f7 94       	ror	r15
    754a:	e7 94       	ror	r14
    754c:	80 e0       	ldi	r24, 0x00	; 0
    754e:	90 e0       	ldi	r25, 0x00	; 0
    7550:	a0 e0       	ldi	r26, 0x00	; 0
    7552:	b0 e8       	ldi	r27, 0x80	; 128
    7554:	e8 2a       	or	r14, r24
    7556:	f9 2a       	or	r15, r25
    7558:	0a 2b       	or	r16, r26
    755a:	1b 2b       	or	r17, r27
    755c:	76 95       	lsr	r23
    755e:	67 95       	ror	r22
    7560:	57 95       	ror	r21
    7562:	47 95       	ror	r20
    7564:	2f 5f       	subi	r18, 0xFF	; 255
    7566:	3f 4f       	sbci	r19, 0xFF	; 255
    7568:	77 fd       	sbrc	r23, 7
    756a:	e7 cf       	rjmp	.-50     	; 0x753a <__mulsf3+0x140>
    756c:	0c c0       	rjmp	.+24     	; 0x7586 <__mulsf3+0x18c>
    756e:	44 0f       	add	r20, r20
    7570:	55 1f       	adc	r21, r21
    7572:	66 1f       	adc	r22, r22
    7574:	77 1f       	adc	r23, r23
    7576:	17 fd       	sbrc	r17, 7
    7578:	41 60       	ori	r20, 0x01	; 1
    757a:	ee 0c       	add	r14, r14
    757c:	ff 1c       	adc	r15, r15
    757e:	00 1f       	adc	r16, r16
    7580:	11 1f       	adc	r17, r17
    7582:	21 50       	subi	r18, 0x01	; 1
    7584:	30 40       	sbci	r19, 0x00	; 0
    7586:	40 30       	cpi	r20, 0x00	; 0
    7588:	90 e0       	ldi	r25, 0x00	; 0
    758a:	59 07       	cpc	r21, r25
    758c:	90 e0       	ldi	r25, 0x00	; 0
    758e:	69 07       	cpc	r22, r25
    7590:	90 e4       	ldi	r25, 0x40	; 64
    7592:	79 07       	cpc	r23, r25
    7594:	60 f3       	brcs	.-40     	; 0x756e <__mulsf3+0x174>
    7596:	2b 8f       	std	Y+27, r18	; 0x1b
    7598:	3c 8f       	std	Y+28, r19	; 0x1c
    759a:	db 01       	movw	r26, r22
    759c:	ca 01       	movw	r24, r20
    759e:	8f 77       	andi	r24, 0x7F	; 127
    75a0:	90 70       	andi	r25, 0x00	; 0
    75a2:	a0 70       	andi	r26, 0x00	; 0
    75a4:	b0 70       	andi	r27, 0x00	; 0
    75a6:	80 34       	cpi	r24, 0x40	; 64
    75a8:	91 05       	cpc	r25, r1
    75aa:	a1 05       	cpc	r26, r1
    75ac:	b1 05       	cpc	r27, r1
    75ae:	61 f4       	brne	.+24     	; 0x75c8 <__mulsf3+0x1ce>
    75b0:	47 fd       	sbrc	r20, 7
    75b2:	0a c0       	rjmp	.+20     	; 0x75c8 <__mulsf3+0x1ce>
    75b4:	e1 14       	cp	r14, r1
    75b6:	f1 04       	cpc	r15, r1
    75b8:	01 05       	cpc	r16, r1
    75ba:	11 05       	cpc	r17, r1
    75bc:	29 f0       	breq	.+10     	; 0x75c8 <__mulsf3+0x1ce>
    75be:	40 5c       	subi	r20, 0xC0	; 192
    75c0:	5f 4f       	sbci	r21, 0xFF	; 255
    75c2:	6f 4f       	sbci	r22, 0xFF	; 255
    75c4:	7f 4f       	sbci	r23, 0xFF	; 255
    75c6:	40 78       	andi	r20, 0x80	; 128
    75c8:	1a 8e       	std	Y+26, r1	; 0x1a
    75ca:	fe 17       	cp	r31, r30
    75cc:	11 f0       	breq	.+4      	; 0x75d2 <__mulsf3+0x1d8>
    75ce:	81 e0       	ldi	r24, 0x01	; 1
    75d0:	8a 8f       	std	Y+26, r24	; 0x1a
    75d2:	4d 8f       	std	Y+29, r20	; 0x1d
    75d4:	5e 8f       	std	Y+30, r21	; 0x1e
    75d6:	6f 8f       	std	Y+31, r22	; 0x1f
    75d8:	78 a3       	std	Y+32, r23	; 0x20
    75da:	83 e0       	ldi	r24, 0x03	; 3
    75dc:	89 8f       	std	Y+25, r24	; 0x19
    75de:	ce 01       	movw	r24, r28
    75e0:	49 96       	adiw	r24, 0x19	; 25
    75e2:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__pack_f>
    75e6:	a0 96       	adiw	r28, 0x20	; 32
    75e8:	e2 e1       	ldi	r30, 0x12	; 18
    75ea:	0c 94 2c 3e 	jmp	0x7c58	; 0x7c58 <__epilogue_restores__>

000075ee <__gtsf2>:
    75ee:	a8 e1       	ldi	r26, 0x18	; 24
    75f0:	b0 e0       	ldi	r27, 0x00	; 0
    75f2:	ed ef       	ldi	r30, 0xFD	; 253
    75f4:	fa e3       	ldi	r31, 0x3A	; 58
    75f6:	0c 94 1c 3e 	jmp	0x7c38	; 0x7c38 <__prologue_saves__+0x18>
    75fa:	69 83       	std	Y+1, r22	; 0x01
    75fc:	7a 83       	std	Y+2, r23	; 0x02
    75fe:	8b 83       	std	Y+3, r24	; 0x03
    7600:	9c 83       	std	Y+4, r25	; 0x04
    7602:	2d 83       	std	Y+5, r18	; 0x05
    7604:	3e 83       	std	Y+6, r19	; 0x06
    7606:	4f 83       	std	Y+7, r20	; 0x07
    7608:	58 87       	std	Y+8, r21	; 0x08
    760a:	89 e0       	ldi	r24, 0x09	; 9
    760c:	e8 2e       	mov	r14, r24
    760e:	f1 2c       	mov	r15, r1
    7610:	ec 0e       	add	r14, r28
    7612:	fd 1e       	adc	r15, r29
    7614:	ce 01       	movw	r24, r28
    7616:	01 96       	adiw	r24, 0x01	; 1
    7618:	b7 01       	movw	r22, r14
    761a:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    761e:	8e 01       	movw	r16, r28
    7620:	0f 5e       	subi	r16, 0xEF	; 239
    7622:	1f 4f       	sbci	r17, 0xFF	; 255
    7624:	ce 01       	movw	r24, r28
    7626:	05 96       	adiw	r24, 0x05	; 5
    7628:	b8 01       	movw	r22, r16
    762a:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    762e:	89 85       	ldd	r24, Y+9	; 0x09
    7630:	82 30       	cpi	r24, 0x02	; 2
    7632:	40 f0       	brcs	.+16     	; 0x7644 <__gtsf2+0x56>
    7634:	89 89       	ldd	r24, Y+17	; 0x11
    7636:	82 30       	cpi	r24, 0x02	; 2
    7638:	28 f0       	brcs	.+10     	; 0x7644 <__gtsf2+0x56>
    763a:	c7 01       	movw	r24, r14
    763c:	b8 01       	movw	r22, r16
    763e:	0e 94 28 3d 	call	0x7a50	; 0x7a50 <__fpcmp_parts_f>
    7642:	01 c0       	rjmp	.+2      	; 0x7646 <__gtsf2+0x58>
    7644:	8f ef       	ldi	r24, 0xFF	; 255
    7646:	68 96       	adiw	r28, 0x18	; 24
    7648:	e6 e0       	ldi	r30, 0x06	; 6
    764a:	0c 94 38 3e 	jmp	0x7c70	; 0x7c70 <__epilogue_restores__+0x18>

0000764e <__gesf2>:
    764e:	a8 e1       	ldi	r26, 0x18	; 24
    7650:	b0 e0       	ldi	r27, 0x00	; 0
    7652:	ed e2       	ldi	r30, 0x2D	; 45
    7654:	fb e3       	ldi	r31, 0x3B	; 59
    7656:	0c 94 1c 3e 	jmp	0x7c38	; 0x7c38 <__prologue_saves__+0x18>
    765a:	69 83       	std	Y+1, r22	; 0x01
    765c:	7a 83       	std	Y+2, r23	; 0x02
    765e:	8b 83       	std	Y+3, r24	; 0x03
    7660:	9c 83       	std	Y+4, r25	; 0x04
    7662:	2d 83       	std	Y+5, r18	; 0x05
    7664:	3e 83       	std	Y+6, r19	; 0x06
    7666:	4f 83       	std	Y+7, r20	; 0x07
    7668:	58 87       	std	Y+8, r21	; 0x08
    766a:	89 e0       	ldi	r24, 0x09	; 9
    766c:	e8 2e       	mov	r14, r24
    766e:	f1 2c       	mov	r15, r1
    7670:	ec 0e       	add	r14, r28
    7672:	fd 1e       	adc	r15, r29
    7674:	ce 01       	movw	r24, r28
    7676:	01 96       	adiw	r24, 0x01	; 1
    7678:	b7 01       	movw	r22, r14
    767a:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    767e:	8e 01       	movw	r16, r28
    7680:	0f 5e       	subi	r16, 0xEF	; 239
    7682:	1f 4f       	sbci	r17, 0xFF	; 255
    7684:	ce 01       	movw	r24, r28
    7686:	05 96       	adiw	r24, 0x05	; 5
    7688:	b8 01       	movw	r22, r16
    768a:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    768e:	89 85       	ldd	r24, Y+9	; 0x09
    7690:	82 30       	cpi	r24, 0x02	; 2
    7692:	40 f0       	brcs	.+16     	; 0x76a4 <__gesf2+0x56>
    7694:	89 89       	ldd	r24, Y+17	; 0x11
    7696:	82 30       	cpi	r24, 0x02	; 2
    7698:	28 f0       	brcs	.+10     	; 0x76a4 <__gesf2+0x56>
    769a:	c7 01       	movw	r24, r14
    769c:	b8 01       	movw	r22, r16
    769e:	0e 94 28 3d 	call	0x7a50	; 0x7a50 <__fpcmp_parts_f>
    76a2:	01 c0       	rjmp	.+2      	; 0x76a6 <__gesf2+0x58>
    76a4:	8f ef       	ldi	r24, 0xFF	; 255
    76a6:	68 96       	adiw	r28, 0x18	; 24
    76a8:	e6 e0       	ldi	r30, 0x06	; 6
    76aa:	0c 94 38 3e 	jmp	0x7c70	; 0x7c70 <__epilogue_restores__+0x18>

000076ae <__ltsf2>:
    76ae:	a8 e1       	ldi	r26, 0x18	; 24
    76b0:	b0 e0       	ldi	r27, 0x00	; 0
    76b2:	ed e5       	ldi	r30, 0x5D	; 93
    76b4:	fb e3       	ldi	r31, 0x3B	; 59
    76b6:	0c 94 1c 3e 	jmp	0x7c38	; 0x7c38 <__prologue_saves__+0x18>
    76ba:	69 83       	std	Y+1, r22	; 0x01
    76bc:	7a 83       	std	Y+2, r23	; 0x02
    76be:	8b 83       	std	Y+3, r24	; 0x03
    76c0:	9c 83       	std	Y+4, r25	; 0x04
    76c2:	2d 83       	std	Y+5, r18	; 0x05
    76c4:	3e 83       	std	Y+6, r19	; 0x06
    76c6:	4f 83       	std	Y+7, r20	; 0x07
    76c8:	58 87       	std	Y+8, r21	; 0x08
    76ca:	89 e0       	ldi	r24, 0x09	; 9
    76cc:	e8 2e       	mov	r14, r24
    76ce:	f1 2c       	mov	r15, r1
    76d0:	ec 0e       	add	r14, r28
    76d2:	fd 1e       	adc	r15, r29
    76d4:	ce 01       	movw	r24, r28
    76d6:	01 96       	adiw	r24, 0x01	; 1
    76d8:	b7 01       	movw	r22, r14
    76da:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    76de:	8e 01       	movw	r16, r28
    76e0:	0f 5e       	subi	r16, 0xEF	; 239
    76e2:	1f 4f       	sbci	r17, 0xFF	; 255
    76e4:	ce 01       	movw	r24, r28
    76e6:	05 96       	adiw	r24, 0x05	; 5
    76e8:	b8 01       	movw	r22, r16
    76ea:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    76ee:	89 85       	ldd	r24, Y+9	; 0x09
    76f0:	82 30       	cpi	r24, 0x02	; 2
    76f2:	40 f0       	brcs	.+16     	; 0x7704 <__ltsf2+0x56>
    76f4:	89 89       	ldd	r24, Y+17	; 0x11
    76f6:	82 30       	cpi	r24, 0x02	; 2
    76f8:	28 f0       	brcs	.+10     	; 0x7704 <__ltsf2+0x56>
    76fa:	c7 01       	movw	r24, r14
    76fc:	b8 01       	movw	r22, r16
    76fe:	0e 94 28 3d 	call	0x7a50	; 0x7a50 <__fpcmp_parts_f>
    7702:	01 c0       	rjmp	.+2      	; 0x7706 <__ltsf2+0x58>
    7704:	81 e0       	ldi	r24, 0x01	; 1
    7706:	68 96       	adiw	r28, 0x18	; 24
    7708:	e6 e0       	ldi	r30, 0x06	; 6
    770a:	0c 94 38 3e 	jmp	0x7c70	; 0x7c70 <__epilogue_restores__+0x18>

0000770e <__fixsfsi>:
    770e:	ac e0       	ldi	r26, 0x0C	; 12
    7710:	b0 e0       	ldi	r27, 0x00	; 0
    7712:	ed e8       	ldi	r30, 0x8D	; 141
    7714:	fb e3       	ldi	r31, 0x3B	; 59
    7716:	0c 94 20 3e 	jmp	0x7c40	; 0x7c40 <__prologue_saves__+0x20>
    771a:	69 83       	std	Y+1, r22	; 0x01
    771c:	7a 83       	std	Y+2, r23	; 0x02
    771e:	8b 83       	std	Y+3, r24	; 0x03
    7720:	9c 83       	std	Y+4, r25	; 0x04
    7722:	ce 01       	movw	r24, r28
    7724:	01 96       	adiw	r24, 0x01	; 1
    7726:	be 01       	movw	r22, r28
    7728:	6b 5f       	subi	r22, 0xFB	; 251
    772a:	7f 4f       	sbci	r23, 0xFF	; 255
    772c:	0e 94 b0 3c 	call	0x7960	; 0x7960 <__unpack_f>
    7730:	8d 81       	ldd	r24, Y+5	; 0x05
    7732:	82 30       	cpi	r24, 0x02	; 2
    7734:	61 f1       	breq	.+88     	; 0x778e <__fixsfsi+0x80>
    7736:	82 30       	cpi	r24, 0x02	; 2
    7738:	50 f1       	brcs	.+84     	; 0x778e <__fixsfsi+0x80>
    773a:	84 30       	cpi	r24, 0x04	; 4
    773c:	21 f4       	brne	.+8      	; 0x7746 <__fixsfsi+0x38>
    773e:	8e 81       	ldd	r24, Y+6	; 0x06
    7740:	88 23       	and	r24, r24
    7742:	51 f1       	breq	.+84     	; 0x7798 <__fixsfsi+0x8a>
    7744:	2e c0       	rjmp	.+92     	; 0x77a2 <__fixsfsi+0x94>
    7746:	2f 81       	ldd	r18, Y+7	; 0x07
    7748:	38 85       	ldd	r19, Y+8	; 0x08
    774a:	37 fd       	sbrc	r19, 7
    774c:	20 c0       	rjmp	.+64     	; 0x778e <__fixsfsi+0x80>
    774e:	6e 81       	ldd	r22, Y+6	; 0x06
    7750:	2f 31       	cpi	r18, 0x1F	; 31
    7752:	31 05       	cpc	r19, r1
    7754:	1c f0       	brlt	.+6      	; 0x775c <__fixsfsi+0x4e>
    7756:	66 23       	and	r22, r22
    7758:	f9 f0       	breq	.+62     	; 0x7798 <__fixsfsi+0x8a>
    775a:	23 c0       	rjmp	.+70     	; 0x77a2 <__fixsfsi+0x94>
    775c:	8e e1       	ldi	r24, 0x1E	; 30
    775e:	90 e0       	ldi	r25, 0x00	; 0
    7760:	82 1b       	sub	r24, r18
    7762:	93 0b       	sbc	r25, r19
    7764:	29 85       	ldd	r18, Y+9	; 0x09
    7766:	3a 85       	ldd	r19, Y+10	; 0x0a
    7768:	4b 85       	ldd	r20, Y+11	; 0x0b
    776a:	5c 85       	ldd	r21, Y+12	; 0x0c
    776c:	04 c0       	rjmp	.+8      	; 0x7776 <__fixsfsi+0x68>
    776e:	56 95       	lsr	r21
    7770:	47 95       	ror	r20
    7772:	37 95       	ror	r19
    7774:	27 95       	ror	r18
    7776:	8a 95       	dec	r24
    7778:	d2 f7       	brpl	.-12     	; 0x776e <__fixsfsi+0x60>
    777a:	66 23       	and	r22, r22
    777c:	b1 f0       	breq	.+44     	; 0x77aa <__fixsfsi+0x9c>
    777e:	50 95       	com	r21
    7780:	40 95       	com	r20
    7782:	30 95       	com	r19
    7784:	21 95       	neg	r18
    7786:	3f 4f       	sbci	r19, 0xFF	; 255
    7788:	4f 4f       	sbci	r20, 0xFF	; 255
    778a:	5f 4f       	sbci	r21, 0xFF	; 255
    778c:	0e c0       	rjmp	.+28     	; 0x77aa <__fixsfsi+0x9c>
    778e:	20 e0       	ldi	r18, 0x00	; 0
    7790:	30 e0       	ldi	r19, 0x00	; 0
    7792:	40 e0       	ldi	r20, 0x00	; 0
    7794:	50 e0       	ldi	r21, 0x00	; 0
    7796:	09 c0       	rjmp	.+18     	; 0x77aa <__fixsfsi+0x9c>
    7798:	2f ef       	ldi	r18, 0xFF	; 255
    779a:	3f ef       	ldi	r19, 0xFF	; 255
    779c:	4f ef       	ldi	r20, 0xFF	; 255
    779e:	5f e7       	ldi	r21, 0x7F	; 127
    77a0:	04 c0       	rjmp	.+8      	; 0x77aa <__fixsfsi+0x9c>
    77a2:	20 e0       	ldi	r18, 0x00	; 0
    77a4:	30 e0       	ldi	r19, 0x00	; 0
    77a6:	40 e0       	ldi	r20, 0x00	; 0
    77a8:	50 e8       	ldi	r21, 0x80	; 128
    77aa:	b9 01       	movw	r22, r18
    77ac:	ca 01       	movw	r24, r20
    77ae:	2c 96       	adiw	r28, 0x0c	; 12
    77b0:	e2 e0       	ldi	r30, 0x02	; 2
    77b2:	0c 94 3c 3e 	jmp	0x7c78	; 0x7c78 <__epilogue_restores__+0x20>

000077b6 <__pack_f>:
    77b6:	df 92       	push	r13
    77b8:	ef 92       	push	r14
    77ba:	ff 92       	push	r15
    77bc:	0f 93       	push	r16
    77be:	1f 93       	push	r17
    77c0:	fc 01       	movw	r30, r24
    77c2:	e4 80       	ldd	r14, Z+4	; 0x04
    77c4:	f5 80       	ldd	r15, Z+5	; 0x05
    77c6:	06 81       	ldd	r16, Z+6	; 0x06
    77c8:	17 81       	ldd	r17, Z+7	; 0x07
    77ca:	d1 80       	ldd	r13, Z+1	; 0x01
    77cc:	80 81       	ld	r24, Z
    77ce:	82 30       	cpi	r24, 0x02	; 2
    77d0:	48 f4       	brcc	.+18     	; 0x77e4 <__pack_f+0x2e>
    77d2:	80 e0       	ldi	r24, 0x00	; 0
    77d4:	90 e0       	ldi	r25, 0x00	; 0
    77d6:	a0 e1       	ldi	r26, 0x10	; 16
    77d8:	b0 e0       	ldi	r27, 0x00	; 0
    77da:	e8 2a       	or	r14, r24
    77dc:	f9 2a       	or	r15, r25
    77de:	0a 2b       	or	r16, r26
    77e0:	1b 2b       	or	r17, r27
    77e2:	a5 c0       	rjmp	.+330    	; 0x792e <__pack_f+0x178>
    77e4:	84 30       	cpi	r24, 0x04	; 4
    77e6:	09 f4       	brne	.+2      	; 0x77ea <__pack_f+0x34>
    77e8:	9f c0       	rjmp	.+318    	; 0x7928 <__pack_f+0x172>
    77ea:	82 30       	cpi	r24, 0x02	; 2
    77ec:	21 f4       	brne	.+8      	; 0x77f6 <__pack_f+0x40>
    77ee:	ee 24       	eor	r14, r14
    77f0:	ff 24       	eor	r15, r15
    77f2:	87 01       	movw	r16, r14
    77f4:	05 c0       	rjmp	.+10     	; 0x7800 <__pack_f+0x4a>
    77f6:	e1 14       	cp	r14, r1
    77f8:	f1 04       	cpc	r15, r1
    77fa:	01 05       	cpc	r16, r1
    77fc:	11 05       	cpc	r17, r1
    77fe:	19 f4       	brne	.+6      	; 0x7806 <__pack_f+0x50>
    7800:	e0 e0       	ldi	r30, 0x00	; 0
    7802:	f0 e0       	ldi	r31, 0x00	; 0
    7804:	96 c0       	rjmp	.+300    	; 0x7932 <__pack_f+0x17c>
    7806:	62 81       	ldd	r22, Z+2	; 0x02
    7808:	73 81       	ldd	r23, Z+3	; 0x03
    780a:	9f ef       	ldi	r25, 0xFF	; 255
    780c:	62 38       	cpi	r22, 0x82	; 130
    780e:	79 07       	cpc	r23, r25
    7810:	0c f0       	brlt	.+2      	; 0x7814 <__pack_f+0x5e>
    7812:	5b c0       	rjmp	.+182    	; 0x78ca <__pack_f+0x114>
    7814:	22 e8       	ldi	r18, 0x82	; 130
    7816:	3f ef       	ldi	r19, 0xFF	; 255
    7818:	26 1b       	sub	r18, r22
    781a:	37 0b       	sbc	r19, r23
    781c:	2a 31       	cpi	r18, 0x1A	; 26
    781e:	31 05       	cpc	r19, r1
    7820:	2c f0       	brlt	.+10     	; 0x782c <__pack_f+0x76>
    7822:	20 e0       	ldi	r18, 0x00	; 0
    7824:	30 e0       	ldi	r19, 0x00	; 0
    7826:	40 e0       	ldi	r20, 0x00	; 0
    7828:	50 e0       	ldi	r21, 0x00	; 0
    782a:	2a c0       	rjmp	.+84     	; 0x7880 <__pack_f+0xca>
    782c:	b8 01       	movw	r22, r16
    782e:	a7 01       	movw	r20, r14
    7830:	02 2e       	mov	r0, r18
    7832:	04 c0       	rjmp	.+8      	; 0x783c <__pack_f+0x86>
    7834:	76 95       	lsr	r23
    7836:	67 95       	ror	r22
    7838:	57 95       	ror	r21
    783a:	47 95       	ror	r20
    783c:	0a 94       	dec	r0
    783e:	d2 f7       	brpl	.-12     	; 0x7834 <__pack_f+0x7e>
    7840:	81 e0       	ldi	r24, 0x01	; 1
    7842:	90 e0       	ldi	r25, 0x00	; 0
    7844:	a0 e0       	ldi	r26, 0x00	; 0
    7846:	b0 e0       	ldi	r27, 0x00	; 0
    7848:	04 c0       	rjmp	.+8      	; 0x7852 <__pack_f+0x9c>
    784a:	88 0f       	add	r24, r24
    784c:	99 1f       	adc	r25, r25
    784e:	aa 1f       	adc	r26, r26
    7850:	bb 1f       	adc	r27, r27
    7852:	2a 95       	dec	r18
    7854:	d2 f7       	brpl	.-12     	; 0x784a <__pack_f+0x94>
    7856:	01 97       	sbiw	r24, 0x01	; 1
    7858:	a1 09       	sbc	r26, r1
    785a:	b1 09       	sbc	r27, r1
    785c:	8e 21       	and	r24, r14
    785e:	9f 21       	and	r25, r15
    7860:	a0 23       	and	r26, r16
    7862:	b1 23       	and	r27, r17
    7864:	00 97       	sbiw	r24, 0x00	; 0
    7866:	a1 05       	cpc	r26, r1
    7868:	b1 05       	cpc	r27, r1
    786a:	21 f0       	breq	.+8      	; 0x7874 <__pack_f+0xbe>
    786c:	81 e0       	ldi	r24, 0x01	; 1
    786e:	90 e0       	ldi	r25, 0x00	; 0
    7870:	a0 e0       	ldi	r26, 0x00	; 0
    7872:	b0 e0       	ldi	r27, 0x00	; 0
    7874:	9a 01       	movw	r18, r20
    7876:	ab 01       	movw	r20, r22
    7878:	28 2b       	or	r18, r24
    787a:	39 2b       	or	r19, r25
    787c:	4a 2b       	or	r20, r26
    787e:	5b 2b       	or	r21, r27
    7880:	da 01       	movw	r26, r20
    7882:	c9 01       	movw	r24, r18
    7884:	8f 77       	andi	r24, 0x7F	; 127
    7886:	90 70       	andi	r25, 0x00	; 0
    7888:	a0 70       	andi	r26, 0x00	; 0
    788a:	b0 70       	andi	r27, 0x00	; 0
    788c:	80 34       	cpi	r24, 0x40	; 64
    788e:	91 05       	cpc	r25, r1
    7890:	a1 05       	cpc	r26, r1
    7892:	b1 05       	cpc	r27, r1
    7894:	39 f4       	brne	.+14     	; 0x78a4 <__pack_f+0xee>
    7896:	27 ff       	sbrs	r18, 7
    7898:	09 c0       	rjmp	.+18     	; 0x78ac <__pack_f+0xf6>
    789a:	20 5c       	subi	r18, 0xC0	; 192
    789c:	3f 4f       	sbci	r19, 0xFF	; 255
    789e:	4f 4f       	sbci	r20, 0xFF	; 255
    78a0:	5f 4f       	sbci	r21, 0xFF	; 255
    78a2:	04 c0       	rjmp	.+8      	; 0x78ac <__pack_f+0xf6>
    78a4:	21 5c       	subi	r18, 0xC1	; 193
    78a6:	3f 4f       	sbci	r19, 0xFF	; 255
    78a8:	4f 4f       	sbci	r20, 0xFF	; 255
    78aa:	5f 4f       	sbci	r21, 0xFF	; 255
    78ac:	e0 e0       	ldi	r30, 0x00	; 0
    78ae:	f0 e0       	ldi	r31, 0x00	; 0
    78b0:	20 30       	cpi	r18, 0x00	; 0
    78b2:	a0 e0       	ldi	r26, 0x00	; 0
    78b4:	3a 07       	cpc	r19, r26
    78b6:	a0 e0       	ldi	r26, 0x00	; 0
    78b8:	4a 07       	cpc	r20, r26
    78ba:	a0 e4       	ldi	r26, 0x40	; 64
    78bc:	5a 07       	cpc	r21, r26
    78be:	10 f0       	brcs	.+4      	; 0x78c4 <__pack_f+0x10e>
    78c0:	e1 e0       	ldi	r30, 0x01	; 1
    78c2:	f0 e0       	ldi	r31, 0x00	; 0
    78c4:	79 01       	movw	r14, r18
    78c6:	8a 01       	movw	r16, r20
    78c8:	27 c0       	rjmp	.+78     	; 0x7918 <__pack_f+0x162>
    78ca:	60 38       	cpi	r22, 0x80	; 128
    78cc:	71 05       	cpc	r23, r1
    78ce:	64 f5       	brge	.+88     	; 0x7928 <__pack_f+0x172>
    78d0:	fb 01       	movw	r30, r22
    78d2:	e1 58       	subi	r30, 0x81	; 129
    78d4:	ff 4f       	sbci	r31, 0xFF	; 255
    78d6:	d8 01       	movw	r26, r16
    78d8:	c7 01       	movw	r24, r14
    78da:	8f 77       	andi	r24, 0x7F	; 127
    78dc:	90 70       	andi	r25, 0x00	; 0
    78de:	a0 70       	andi	r26, 0x00	; 0
    78e0:	b0 70       	andi	r27, 0x00	; 0
    78e2:	80 34       	cpi	r24, 0x40	; 64
    78e4:	91 05       	cpc	r25, r1
    78e6:	a1 05       	cpc	r26, r1
    78e8:	b1 05       	cpc	r27, r1
    78ea:	39 f4       	brne	.+14     	; 0x78fa <__pack_f+0x144>
    78ec:	e7 fe       	sbrs	r14, 7
    78ee:	0d c0       	rjmp	.+26     	; 0x790a <__pack_f+0x154>
    78f0:	80 e4       	ldi	r24, 0x40	; 64
    78f2:	90 e0       	ldi	r25, 0x00	; 0
    78f4:	a0 e0       	ldi	r26, 0x00	; 0
    78f6:	b0 e0       	ldi	r27, 0x00	; 0
    78f8:	04 c0       	rjmp	.+8      	; 0x7902 <__pack_f+0x14c>
    78fa:	8f e3       	ldi	r24, 0x3F	; 63
    78fc:	90 e0       	ldi	r25, 0x00	; 0
    78fe:	a0 e0       	ldi	r26, 0x00	; 0
    7900:	b0 e0       	ldi	r27, 0x00	; 0
    7902:	e8 0e       	add	r14, r24
    7904:	f9 1e       	adc	r15, r25
    7906:	0a 1f       	adc	r16, r26
    7908:	1b 1f       	adc	r17, r27
    790a:	17 ff       	sbrs	r17, 7
    790c:	05 c0       	rjmp	.+10     	; 0x7918 <__pack_f+0x162>
    790e:	16 95       	lsr	r17
    7910:	07 95       	ror	r16
    7912:	f7 94       	ror	r15
    7914:	e7 94       	ror	r14
    7916:	31 96       	adiw	r30, 0x01	; 1
    7918:	87 e0       	ldi	r24, 0x07	; 7
    791a:	16 95       	lsr	r17
    791c:	07 95       	ror	r16
    791e:	f7 94       	ror	r15
    7920:	e7 94       	ror	r14
    7922:	8a 95       	dec	r24
    7924:	d1 f7       	brne	.-12     	; 0x791a <__pack_f+0x164>
    7926:	05 c0       	rjmp	.+10     	; 0x7932 <__pack_f+0x17c>
    7928:	ee 24       	eor	r14, r14
    792a:	ff 24       	eor	r15, r15
    792c:	87 01       	movw	r16, r14
    792e:	ef ef       	ldi	r30, 0xFF	; 255
    7930:	f0 e0       	ldi	r31, 0x00	; 0
    7932:	6e 2f       	mov	r22, r30
    7934:	67 95       	ror	r22
    7936:	66 27       	eor	r22, r22
    7938:	67 95       	ror	r22
    793a:	90 2f       	mov	r25, r16
    793c:	9f 77       	andi	r25, 0x7F	; 127
    793e:	d7 94       	ror	r13
    7940:	dd 24       	eor	r13, r13
    7942:	d7 94       	ror	r13
    7944:	8e 2f       	mov	r24, r30
    7946:	86 95       	lsr	r24
    7948:	49 2f       	mov	r20, r25
    794a:	46 2b       	or	r20, r22
    794c:	58 2f       	mov	r21, r24
    794e:	5d 29       	or	r21, r13
    7950:	b7 01       	movw	r22, r14
    7952:	ca 01       	movw	r24, r20
    7954:	1f 91       	pop	r17
    7956:	0f 91       	pop	r16
    7958:	ff 90       	pop	r15
    795a:	ef 90       	pop	r14
    795c:	df 90       	pop	r13
    795e:	08 95       	ret

00007960 <__unpack_f>:
    7960:	fc 01       	movw	r30, r24
    7962:	db 01       	movw	r26, r22
    7964:	40 81       	ld	r20, Z
    7966:	51 81       	ldd	r21, Z+1	; 0x01
    7968:	22 81       	ldd	r18, Z+2	; 0x02
    796a:	62 2f       	mov	r22, r18
    796c:	6f 77       	andi	r22, 0x7F	; 127
    796e:	70 e0       	ldi	r23, 0x00	; 0
    7970:	22 1f       	adc	r18, r18
    7972:	22 27       	eor	r18, r18
    7974:	22 1f       	adc	r18, r18
    7976:	93 81       	ldd	r25, Z+3	; 0x03
    7978:	89 2f       	mov	r24, r25
    797a:	88 0f       	add	r24, r24
    797c:	82 2b       	or	r24, r18
    797e:	28 2f       	mov	r18, r24
    7980:	30 e0       	ldi	r19, 0x00	; 0
    7982:	99 1f       	adc	r25, r25
    7984:	99 27       	eor	r25, r25
    7986:	99 1f       	adc	r25, r25
    7988:	11 96       	adiw	r26, 0x01	; 1
    798a:	9c 93       	st	X, r25
    798c:	11 97       	sbiw	r26, 0x01	; 1
    798e:	21 15       	cp	r18, r1
    7990:	31 05       	cpc	r19, r1
    7992:	a9 f5       	brne	.+106    	; 0x79fe <__unpack_f+0x9e>
    7994:	41 15       	cp	r20, r1
    7996:	51 05       	cpc	r21, r1
    7998:	61 05       	cpc	r22, r1
    799a:	71 05       	cpc	r23, r1
    799c:	11 f4       	brne	.+4      	; 0x79a2 <__unpack_f+0x42>
    799e:	82 e0       	ldi	r24, 0x02	; 2
    79a0:	37 c0       	rjmp	.+110    	; 0x7a10 <__unpack_f+0xb0>
    79a2:	82 e8       	ldi	r24, 0x82	; 130
    79a4:	9f ef       	ldi	r25, 0xFF	; 255
    79a6:	13 96       	adiw	r26, 0x03	; 3
    79a8:	9c 93       	st	X, r25
    79aa:	8e 93       	st	-X, r24
    79ac:	12 97       	sbiw	r26, 0x02	; 2
    79ae:	9a 01       	movw	r18, r20
    79b0:	ab 01       	movw	r20, r22
    79b2:	67 e0       	ldi	r22, 0x07	; 7
    79b4:	22 0f       	add	r18, r18
    79b6:	33 1f       	adc	r19, r19
    79b8:	44 1f       	adc	r20, r20
    79ba:	55 1f       	adc	r21, r21
    79bc:	6a 95       	dec	r22
    79be:	d1 f7       	brne	.-12     	; 0x79b4 <__unpack_f+0x54>
    79c0:	83 e0       	ldi	r24, 0x03	; 3
    79c2:	8c 93       	st	X, r24
    79c4:	0d c0       	rjmp	.+26     	; 0x79e0 <__unpack_f+0x80>
    79c6:	22 0f       	add	r18, r18
    79c8:	33 1f       	adc	r19, r19
    79ca:	44 1f       	adc	r20, r20
    79cc:	55 1f       	adc	r21, r21
    79ce:	12 96       	adiw	r26, 0x02	; 2
    79d0:	8d 91       	ld	r24, X+
    79d2:	9c 91       	ld	r25, X
    79d4:	13 97       	sbiw	r26, 0x03	; 3
    79d6:	01 97       	sbiw	r24, 0x01	; 1
    79d8:	13 96       	adiw	r26, 0x03	; 3
    79da:	9c 93       	st	X, r25
    79dc:	8e 93       	st	-X, r24
    79de:	12 97       	sbiw	r26, 0x02	; 2
    79e0:	20 30       	cpi	r18, 0x00	; 0
    79e2:	80 e0       	ldi	r24, 0x00	; 0
    79e4:	38 07       	cpc	r19, r24
    79e6:	80 e0       	ldi	r24, 0x00	; 0
    79e8:	48 07       	cpc	r20, r24
    79ea:	80 e4       	ldi	r24, 0x40	; 64
    79ec:	58 07       	cpc	r21, r24
    79ee:	58 f3       	brcs	.-42     	; 0x79c6 <__unpack_f+0x66>
    79f0:	14 96       	adiw	r26, 0x04	; 4
    79f2:	2d 93       	st	X+, r18
    79f4:	3d 93       	st	X+, r19
    79f6:	4d 93       	st	X+, r20
    79f8:	5c 93       	st	X, r21
    79fa:	17 97       	sbiw	r26, 0x07	; 7
    79fc:	08 95       	ret
    79fe:	2f 3f       	cpi	r18, 0xFF	; 255
    7a00:	31 05       	cpc	r19, r1
    7a02:	79 f4       	brne	.+30     	; 0x7a22 <__unpack_f+0xc2>
    7a04:	41 15       	cp	r20, r1
    7a06:	51 05       	cpc	r21, r1
    7a08:	61 05       	cpc	r22, r1
    7a0a:	71 05       	cpc	r23, r1
    7a0c:	19 f4       	brne	.+6      	; 0x7a14 <__unpack_f+0xb4>
    7a0e:	84 e0       	ldi	r24, 0x04	; 4
    7a10:	8c 93       	st	X, r24
    7a12:	08 95       	ret
    7a14:	64 ff       	sbrs	r22, 4
    7a16:	03 c0       	rjmp	.+6      	; 0x7a1e <__unpack_f+0xbe>
    7a18:	81 e0       	ldi	r24, 0x01	; 1
    7a1a:	8c 93       	st	X, r24
    7a1c:	12 c0       	rjmp	.+36     	; 0x7a42 <__unpack_f+0xe2>
    7a1e:	1c 92       	st	X, r1
    7a20:	10 c0       	rjmp	.+32     	; 0x7a42 <__unpack_f+0xe2>
    7a22:	2f 57       	subi	r18, 0x7F	; 127
    7a24:	30 40       	sbci	r19, 0x00	; 0
    7a26:	13 96       	adiw	r26, 0x03	; 3
    7a28:	3c 93       	st	X, r19
    7a2a:	2e 93       	st	-X, r18
    7a2c:	12 97       	sbiw	r26, 0x02	; 2
    7a2e:	83 e0       	ldi	r24, 0x03	; 3
    7a30:	8c 93       	st	X, r24
    7a32:	87 e0       	ldi	r24, 0x07	; 7
    7a34:	44 0f       	add	r20, r20
    7a36:	55 1f       	adc	r21, r21
    7a38:	66 1f       	adc	r22, r22
    7a3a:	77 1f       	adc	r23, r23
    7a3c:	8a 95       	dec	r24
    7a3e:	d1 f7       	brne	.-12     	; 0x7a34 <__unpack_f+0xd4>
    7a40:	70 64       	ori	r23, 0x40	; 64
    7a42:	14 96       	adiw	r26, 0x04	; 4
    7a44:	4d 93       	st	X+, r20
    7a46:	5d 93       	st	X+, r21
    7a48:	6d 93       	st	X+, r22
    7a4a:	7c 93       	st	X, r23
    7a4c:	17 97       	sbiw	r26, 0x07	; 7
    7a4e:	08 95       	ret

00007a50 <__fpcmp_parts_f>:
    7a50:	1f 93       	push	r17
    7a52:	dc 01       	movw	r26, r24
    7a54:	fb 01       	movw	r30, r22
    7a56:	9c 91       	ld	r25, X
    7a58:	92 30       	cpi	r25, 0x02	; 2
    7a5a:	08 f4       	brcc	.+2      	; 0x7a5e <__fpcmp_parts_f+0xe>
    7a5c:	47 c0       	rjmp	.+142    	; 0x7aec <__fpcmp_parts_f+0x9c>
    7a5e:	80 81       	ld	r24, Z
    7a60:	82 30       	cpi	r24, 0x02	; 2
    7a62:	08 f4       	brcc	.+2      	; 0x7a66 <__fpcmp_parts_f+0x16>
    7a64:	43 c0       	rjmp	.+134    	; 0x7aec <__fpcmp_parts_f+0x9c>
    7a66:	94 30       	cpi	r25, 0x04	; 4
    7a68:	51 f4       	brne	.+20     	; 0x7a7e <__fpcmp_parts_f+0x2e>
    7a6a:	11 96       	adiw	r26, 0x01	; 1
    7a6c:	1c 91       	ld	r17, X
    7a6e:	84 30       	cpi	r24, 0x04	; 4
    7a70:	99 f5       	brne	.+102    	; 0x7ad8 <__fpcmp_parts_f+0x88>
    7a72:	81 81       	ldd	r24, Z+1	; 0x01
    7a74:	68 2f       	mov	r22, r24
    7a76:	70 e0       	ldi	r23, 0x00	; 0
    7a78:	61 1b       	sub	r22, r17
    7a7a:	71 09       	sbc	r23, r1
    7a7c:	3f c0       	rjmp	.+126    	; 0x7afc <__fpcmp_parts_f+0xac>
    7a7e:	84 30       	cpi	r24, 0x04	; 4
    7a80:	21 f0       	breq	.+8      	; 0x7a8a <__fpcmp_parts_f+0x3a>
    7a82:	92 30       	cpi	r25, 0x02	; 2
    7a84:	31 f4       	brne	.+12     	; 0x7a92 <__fpcmp_parts_f+0x42>
    7a86:	82 30       	cpi	r24, 0x02	; 2
    7a88:	b9 f1       	breq	.+110    	; 0x7af8 <__fpcmp_parts_f+0xa8>
    7a8a:	81 81       	ldd	r24, Z+1	; 0x01
    7a8c:	88 23       	and	r24, r24
    7a8e:	89 f1       	breq	.+98     	; 0x7af2 <__fpcmp_parts_f+0xa2>
    7a90:	2d c0       	rjmp	.+90     	; 0x7aec <__fpcmp_parts_f+0x9c>
    7a92:	11 96       	adiw	r26, 0x01	; 1
    7a94:	1c 91       	ld	r17, X
    7a96:	11 97       	sbiw	r26, 0x01	; 1
    7a98:	82 30       	cpi	r24, 0x02	; 2
    7a9a:	f1 f0       	breq	.+60     	; 0x7ad8 <__fpcmp_parts_f+0x88>
    7a9c:	81 81       	ldd	r24, Z+1	; 0x01
    7a9e:	18 17       	cp	r17, r24
    7aa0:	d9 f4       	brne	.+54     	; 0x7ad8 <__fpcmp_parts_f+0x88>
    7aa2:	12 96       	adiw	r26, 0x02	; 2
    7aa4:	2d 91       	ld	r18, X+
    7aa6:	3c 91       	ld	r19, X
    7aa8:	13 97       	sbiw	r26, 0x03	; 3
    7aaa:	82 81       	ldd	r24, Z+2	; 0x02
    7aac:	93 81       	ldd	r25, Z+3	; 0x03
    7aae:	82 17       	cp	r24, r18
    7ab0:	93 07       	cpc	r25, r19
    7ab2:	94 f0       	brlt	.+36     	; 0x7ad8 <__fpcmp_parts_f+0x88>
    7ab4:	28 17       	cp	r18, r24
    7ab6:	39 07       	cpc	r19, r25
    7ab8:	bc f0       	brlt	.+46     	; 0x7ae8 <__fpcmp_parts_f+0x98>
    7aba:	14 96       	adiw	r26, 0x04	; 4
    7abc:	8d 91       	ld	r24, X+
    7abe:	9d 91       	ld	r25, X+
    7ac0:	0d 90       	ld	r0, X+
    7ac2:	bc 91       	ld	r27, X
    7ac4:	a0 2d       	mov	r26, r0
    7ac6:	24 81       	ldd	r18, Z+4	; 0x04
    7ac8:	35 81       	ldd	r19, Z+5	; 0x05
    7aca:	46 81       	ldd	r20, Z+6	; 0x06
    7acc:	57 81       	ldd	r21, Z+7	; 0x07
    7ace:	28 17       	cp	r18, r24
    7ad0:	39 07       	cpc	r19, r25
    7ad2:	4a 07       	cpc	r20, r26
    7ad4:	5b 07       	cpc	r21, r27
    7ad6:	18 f4       	brcc	.+6      	; 0x7ade <__fpcmp_parts_f+0x8e>
    7ad8:	11 23       	and	r17, r17
    7ada:	41 f0       	breq	.+16     	; 0x7aec <__fpcmp_parts_f+0x9c>
    7adc:	0a c0       	rjmp	.+20     	; 0x7af2 <__fpcmp_parts_f+0xa2>
    7ade:	82 17       	cp	r24, r18
    7ae0:	93 07       	cpc	r25, r19
    7ae2:	a4 07       	cpc	r26, r20
    7ae4:	b5 07       	cpc	r27, r21
    7ae6:	40 f4       	brcc	.+16     	; 0x7af8 <__fpcmp_parts_f+0xa8>
    7ae8:	11 23       	and	r17, r17
    7aea:	19 f0       	breq	.+6      	; 0x7af2 <__fpcmp_parts_f+0xa2>
    7aec:	61 e0       	ldi	r22, 0x01	; 1
    7aee:	70 e0       	ldi	r23, 0x00	; 0
    7af0:	05 c0       	rjmp	.+10     	; 0x7afc <__fpcmp_parts_f+0xac>
    7af2:	6f ef       	ldi	r22, 0xFF	; 255
    7af4:	7f ef       	ldi	r23, 0xFF	; 255
    7af6:	02 c0       	rjmp	.+4      	; 0x7afc <__fpcmp_parts_f+0xac>
    7af8:	60 e0       	ldi	r22, 0x00	; 0
    7afa:	70 e0       	ldi	r23, 0x00	; 0
    7afc:	cb 01       	movw	r24, r22
    7afe:	1f 91       	pop	r17
    7b00:	08 95       	ret

00007b02 <__mulsi3>:
    7b02:	62 9f       	mul	r22, r18
    7b04:	d0 01       	movw	r26, r0
    7b06:	73 9f       	mul	r23, r19
    7b08:	f0 01       	movw	r30, r0
    7b0a:	82 9f       	mul	r24, r18
    7b0c:	e0 0d       	add	r30, r0
    7b0e:	f1 1d       	adc	r31, r1
    7b10:	64 9f       	mul	r22, r20
    7b12:	e0 0d       	add	r30, r0
    7b14:	f1 1d       	adc	r31, r1
    7b16:	92 9f       	mul	r25, r18
    7b18:	f0 0d       	add	r31, r0
    7b1a:	83 9f       	mul	r24, r19
    7b1c:	f0 0d       	add	r31, r0
    7b1e:	74 9f       	mul	r23, r20
    7b20:	f0 0d       	add	r31, r0
    7b22:	65 9f       	mul	r22, r21
    7b24:	f0 0d       	add	r31, r0
    7b26:	99 27       	eor	r25, r25
    7b28:	72 9f       	mul	r23, r18
    7b2a:	b0 0d       	add	r27, r0
    7b2c:	e1 1d       	adc	r30, r1
    7b2e:	f9 1f       	adc	r31, r25
    7b30:	63 9f       	mul	r22, r19
    7b32:	b0 0d       	add	r27, r0
    7b34:	e1 1d       	adc	r30, r1
    7b36:	f9 1f       	adc	r31, r25
    7b38:	bd 01       	movw	r22, r26
    7b3a:	cf 01       	movw	r24, r30
    7b3c:	11 24       	eor	r1, r1
    7b3e:	08 95       	ret

00007b40 <__udivmodqi4>:
    7b40:	99 1b       	sub	r25, r25
    7b42:	79 e0       	ldi	r23, 0x09	; 9
    7b44:	04 c0       	rjmp	.+8      	; 0x7b4e <__udivmodqi4_ep>

00007b46 <__udivmodqi4_loop>:
    7b46:	99 1f       	adc	r25, r25
    7b48:	96 17       	cp	r25, r22
    7b4a:	08 f0       	brcs	.+2      	; 0x7b4e <__udivmodqi4_ep>
    7b4c:	96 1b       	sub	r25, r22

00007b4e <__udivmodqi4_ep>:
    7b4e:	88 1f       	adc	r24, r24
    7b50:	7a 95       	dec	r23
    7b52:	c9 f7       	brne	.-14     	; 0x7b46 <__udivmodqi4_loop>
    7b54:	80 95       	com	r24
    7b56:	08 95       	ret

00007b58 <__udivmodhi4>:
    7b58:	aa 1b       	sub	r26, r26
    7b5a:	bb 1b       	sub	r27, r27
    7b5c:	51 e1       	ldi	r21, 0x11	; 17
    7b5e:	07 c0       	rjmp	.+14     	; 0x7b6e <__udivmodhi4_ep>

00007b60 <__udivmodhi4_loop>:
    7b60:	aa 1f       	adc	r26, r26
    7b62:	bb 1f       	adc	r27, r27
    7b64:	a6 17       	cp	r26, r22
    7b66:	b7 07       	cpc	r27, r23
    7b68:	10 f0       	brcs	.+4      	; 0x7b6e <__udivmodhi4_ep>
    7b6a:	a6 1b       	sub	r26, r22
    7b6c:	b7 0b       	sbc	r27, r23

00007b6e <__udivmodhi4_ep>:
    7b6e:	88 1f       	adc	r24, r24
    7b70:	99 1f       	adc	r25, r25
    7b72:	5a 95       	dec	r21
    7b74:	a9 f7       	brne	.-22     	; 0x7b60 <__udivmodhi4_loop>
    7b76:	80 95       	com	r24
    7b78:	90 95       	com	r25
    7b7a:	bc 01       	movw	r22, r24
    7b7c:	cd 01       	movw	r24, r26
    7b7e:	08 95       	ret

00007b80 <__divmodhi4>:
    7b80:	97 fb       	bst	r25, 7
    7b82:	09 2e       	mov	r0, r25
    7b84:	07 26       	eor	r0, r23
    7b86:	0a d0       	rcall	.+20     	; 0x7b9c <__divmodhi4_neg1>
    7b88:	77 fd       	sbrc	r23, 7
    7b8a:	04 d0       	rcall	.+8      	; 0x7b94 <__divmodhi4_neg2>
    7b8c:	e5 df       	rcall	.-54     	; 0x7b58 <__udivmodhi4>
    7b8e:	06 d0       	rcall	.+12     	; 0x7b9c <__divmodhi4_neg1>
    7b90:	00 20       	and	r0, r0
    7b92:	1a f4       	brpl	.+6      	; 0x7b9a <__divmodhi4_exit>

00007b94 <__divmodhi4_neg2>:
    7b94:	70 95       	com	r23
    7b96:	61 95       	neg	r22
    7b98:	7f 4f       	sbci	r23, 0xFF	; 255

00007b9a <__divmodhi4_exit>:
    7b9a:	08 95       	ret

00007b9c <__divmodhi4_neg1>:
    7b9c:	f6 f7       	brtc	.-4      	; 0x7b9a <__divmodhi4_exit>
    7b9e:	90 95       	com	r25
    7ba0:	81 95       	neg	r24
    7ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ba4:	08 95       	ret

00007ba6 <__divmodsi4>:
    7ba6:	97 fb       	bst	r25, 7
    7ba8:	09 2e       	mov	r0, r25
    7baa:	05 26       	eor	r0, r21
    7bac:	0e d0       	rcall	.+28     	; 0x7bca <__divmodsi4_neg1>
    7bae:	57 fd       	sbrc	r21, 7
    7bb0:	04 d0       	rcall	.+8      	; 0x7bba <__divmodsi4_neg2>
    7bb2:	14 d0       	rcall	.+40     	; 0x7bdc <__udivmodsi4>
    7bb4:	0a d0       	rcall	.+20     	; 0x7bca <__divmodsi4_neg1>
    7bb6:	00 1c       	adc	r0, r0
    7bb8:	38 f4       	brcc	.+14     	; 0x7bc8 <__divmodsi4_exit>

00007bba <__divmodsi4_neg2>:
    7bba:	50 95       	com	r21
    7bbc:	40 95       	com	r20
    7bbe:	30 95       	com	r19
    7bc0:	21 95       	neg	r18
    7bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    7bc4:	4f 4f       	sbci	r20, 0xFF	; 255
    7bc6:	5f 4f       	sbci	r21, 0xFF	; 255

00007bc8 <__divmodsi4_exit>:
    7bc8:	08 95       	ret

00007bca <__divmodsi4_neg1>:
    7bca:	f6 f7       	brtc	.-4      	; 0x7bc8 <__divmodsi4_exit>
    7bcc:	90 95       	com	r25
    7bce:	80 95       	com	r24
    7bd0:	70 95       	com	r23
    7bd2:	61 95       	neg	r22
    7bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    7bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    7bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bda:	08 95       	ret

00007bdc <__udivmodsi4>:
    7bdc:	a1 e2       	ldi	r26, 0x21	; 33
    7bde:	1a 2e       	mov	r1, r26
    7be0:	aa 1b       	sub	r26, r26
    7be2:	bb 1b       	sub	r27, r27
    7be4:	fd 01       	movw	r30, r26
    7be6:	0d c0       	rjmp	.+26     	; 0x7c02 <__udivmodsi4_ep>

00007be8 <__udivmodsi4_loop>:
    7be8:	aa 1f       	adc	r26, r26
    7bea:	bb 1f       	adc	r27, r27
    7bec:	ee 1f       	adc	r30, r30
    7bee:	ff 1f       	adc	r31, r31
    7bf0:	a2 17       	cp	r26, r18
    7bf2:	b3 07       	cpc	r27, r19
    7bf4:	e4 07       	cpc	r30, r20
    7bf6:	f5 07       	cpc	r31, r21
    7bf8:	20 f0       	brcs	.+8      	; 0x7c02 <__udivmodsi4_ep>
    7bfa:	a2 1b       	sub	r26, r18
    7bfc:	b3 0b       	sbc	r27, r19
    7bfe:	e4 0b       	sbc	r30, r20
    7c00:	f5 0b       	sbc	r31, r21

00007c02 <__udivmodsi4_ep>:
    7c02:	66 1f       	adc	r22, r22
    7c04:	77 1f       	adc	r23, r23
    7c06:	88 1f       	adc	r24, r24
    7c08:	99 1f       	adc	r25, r25
    7c0a:	1a 94       	dec	r1
    7c0c:	69 f7       	brne	.-38     	; 0x7be8 <__udivmodsi4_loop>
    7c0e:	60 95       	com	r22
    7c10:	70 95       	com	r23
    7c12:	80 95       	com	r24
    7c14:	90 95       	com	r25
    7c16:	9b 01       	movw	r18, r22
    7c18:	ac 01       	movw	r20, r24
    7c1a:	bd 01       	movw	r22, r26
    7c1c:	cf 01       	movw	r24, r30
    7c1e:	08 95       	ret

00007c20 <__prologue_saves__>:
    7c20:	2f 92       	push	r2
    7c22:	3f 92       	push	r3
    7c24:	4f 92       	push	r4
    7c26:	5f 92       	push	r5
    7c28:	6f 92       	push	r6
    7c2a:	7f 92       	push	r7
    7c2c:	8f 92       	push	r8
    7c2e:	9f 92       	push	r9
    7c30:	af 92       	push	r10
    7c32:	bf 92       	push	r11
    7c34:	cf 92       	push	r12
    7c36:	df 92       	push	r13
    7c38:	ef 92       	push	r14
    7c3a:	ff 92       	push	r15
    7c3c:	0f 93       	push	r16
    7c3e:	1f 93       	push	r17
    7c40:	cf 93       	push	r28
    7c42:	df 93       	push	r29
    7c44:	cd b7       	in	r28, 0x3d	; 61
    7c46:	de b7       	in	r29, 0x3e	; 62
    7c48:	ca 1b       	sub	r28, r26
    7c4a:	db 0b       	sbc	r29, r27
    7c4c:	0f b6       	in	r0, 0x3f	; 63
    7c4e:	f8 94       	cli
    7c50:	de bf       	out	0x3e, r29	; 62
    7c52:	0f be       	out	0x3f, r0	; 63
    7c54:	cd bf       	out	0x3d, r28	; 61
    7c56:	09 94       	ijmp

00007c58 <__epilogue_restores__>:
    7c58:	2a 88       	ldd	r2, Y+18	; 0x12
    7c5a:	39 88       	ldd	r3, Y+17	; 0x11
    7c5c:	48 88       	ldd	r4, Y+16	; 0x10
    7c5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7c60:	6e 84       	ldd	r6, Y+14	; 0x0e
    7c62:	7d 84       	ldd	r7, Y+13	; 0x0d
    7c64:	8c 84       	ldd	r8, Y+12	; 0x0c
    7c66:	9b 84       	ldd	r9, Y+11	; 0x0b
    7c68:	aa 84       	ldd	r10, Y+10	; 0x0a
    7c6a:	b9 84       	ldd	r11, Y+9	; 0x09
    7c6c:	c8 84       	ldd	r12, Y+8	; 0x08
    7c6e:	df 80       	ldd	r13, Y+7	; 0x07
    7c70:	ee 80       	ldd	r14, Y+6	; 0x06
    7c72:	fd 80       	ldd	r15, Y+5	; 0x05
    7c74:	0c 81       	ldd	r16, Y+4	; 0x04
    7c76:	1b 81       	ldd	r17, Y+3	; 0x03
    7c78:	aa 81       	ldd	r26, Y+2	; 0x02
    7c7a:	b9 81       	ldd	r27, Y+1	; 0x01
    7c7c:	ce 0f       	add	r28, r30
    7c7e:	d1 1d       	adc	r29, r1
    7c80:	0f b6       	in	r0, 0x3f	; 63
    7c82:	f8 94       	cli
    7c84:	de bf       	out	0x3e, r29	; 62
    7c86:	0f be       	out	0x3f, r0	; 63
    7c88:	cd bf       	out	0x3d, r28	; 61
    7c8a:	ed 01       	movw	r28, r26
    7c8c:	08 95       	ret

00007c8e <sprintf>:
    7c8e:	ae e0       	ldi	r26, 0x0E	; 14
    7c90:	b0 e0       	ldi	r27, 0x00	; 0
    7c92:	ed e4       	ldi	r30, 0x4D	; 77
    7c94:	fe e3       	ldi	r31, 0x3E	; 62
    7c96:	0c 94 1e 3e 	jmp	0x7c3c	; 0x7c3c <__prologue_saves__+0x1c>
    7c9a:	0d 89       	ldd	r16, Y+21	; 0x15
    7c9c:	1e 89       	ldd	r17, Y+22	; 0x16
    7c9e:	86 e0       	ldi	r24, 0x06	; 6
    7ca0:	8c 83       	std	Y+4, r24	; 0x04
    7ca2:	1a 83       	std	Y+2, r17	; 0x02
    7ca4:	09 83       	std	Y+1, r16	; 0x01
    7ca6:	8f ef       	ldi	r24, 0xFF	; 255
    7ca8:	9f e7       	ldi	r25, 0x7F	; 127
    7caa:	9e 83       	std	Y+6, r25	; 0x06
    7cac:	8d 83       	std	Y+5, r24	; 0x05
    7cae:	9e 01       	movw	r18, r28
    7cb0:	27 5e       	subi	r18, 0xE7	; 231
    7cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    7cb4:	ce 01       	movw	r24, r28
    7cb6:	01 96       	adiw	r24, 0x01	; 1
    7cb8:	6f 89       	ldd	r22, Y+23	; 0x17
    7cba:	78 8d       	ldd	r23, Y+24	; 0x18
    7cbc:	a9 01       	movw	r20, r18
    7cbe:	0e 94 6b 3e 	call	0x7cd6	; 0x7cd6 <vfprintf>
    7cc2:	2f 81       	ldd	r18, Y+7	; 0x07
    7cc4:	38 85       	ldd	r19, Y+8	; 0x08
    7cc6:	02 0f       	add	r16, r18
    7cc8:	13 1f       	adc	r17, r19
    7cca:	f8 01       	movw	r30, r16
    7ccc:	10 82       	st	Z, r1
    7cce:	2e 96       	adiw	r28, 0x0e	; 14
    7cd0:	e4 e0       	ldi	r30, 0x04	; 4
    7cd2:	0c 94 3a 3e 	jmp	0x7c74	; 0x7c74 <__epilogue_restores__+0x1c>

00007cd6 <vfprintf>:
    7cd6:	ab e0       	ldi	r26, 0x0B	; 11
    7cd8:	b0 e0       	ldi	r27, 0x00	; 0
    7cda:	e1 e7       	ldi	r30, 0x71	; 113
    7cdc:	fe e3       	ldi	r31, 0x3E	; 62
    7cde:	0c 94 10 3e 	jmp	0x7c20	; 0x7c20 <__prologue_saves__>
    7ce2:	3c 01       	movw	r6, r24
    7ce4:	2b 01       	movw	r4, r22
    7ce6:	5a 01       	movw	r10, r20
    7ce8:	fc 01       	movw	r30, r24
    7cea:	17 82       	std	Z+7, r1	; 0x07
    7cec:	16 82       	std	Z+6, r1	; 0x06
    7cee:	83 81       	ldd	r24, Z+3	; 0x03
    7cf0:	81 fd       	sbrc	r24, 1
    7cf2:	03 c0       	rjmp	.+6      	; 0x7cfa <vfprintf+0x24>
    7cf4:	6f ef       	ldi	r22, 0xFF	; 255
    7cf6:	7f ef       	ldi	r23, 0xFF	; 255
    7cf8:	c6 c1       	rjmp	.+908    	; 0x8086 <vfprintf+0x3b0>
    7cfa:	9a e0       	ldi	r25, 0x0A	; 10
    7cfc:	89 2e       	mov	r8, r25
    7cfe:	1e 01       	movw	r2, r28
    7d00:	08 94       	sec
    7d02:	21 1c       	adc	r2, r1
    7d04:	31 1c       	adc	r3, r1
    7d06:	f3 01       	movw	r30, r6
    7d08:	23 81       	ldd	r18, Z+3	; 0x03
    7d0a:	f2 01       	movw	r30, r4
    7d0c:	23 fd       	sbrc	r18, 3
    7d0e:	85 91       	lpm	r24, Z+
    7d10:	23 ff       	sbrs	r18, 3
    7d12:	81 91       	ld	r24, Z+
    7d14:	2f 01       	movw	r4, r30
    7d16:	88 23       	and	r24, r24
    7d18:	09 f4       	brne	.+2      	; 0x7d1c <vfprintf+0x46>
    7d1a:	b2 c1       	rjmp	.+868    	; 0x8080 <vfprintf+0x3aa>
    7d1c:	85 32       	cpi	r24, 0x25	; 37
    7d1e:	39 f4       	brne	.+14     	; 0x7d2e <vfprintf+0x58>
    7d20:	23 fd       	sbrc	r18, 3
    7d22:	85 91       	lpm	r24, Z+
    7d24:	23 ff       	sbrs	r18, 3
    7d26:	81 91       	ld	r24, Z+
    7d28:	2f 01       	movw	r4, r30
    7d2a:	85 32       	cpi	r24, 0x25	; 37
    7d2c:	29 f4       	brne	.+10     	; 0x7d38 <vfprintf+0x62>
    7d2e:	90 e0       	ldi	r25, 0x00	; 0
    7d30:	b3 01       	movw	r22, r6
    7d32:	0e 94 5e 40 	call	0x80bc	; 0x80bc <fputc>
    7d36:	e7 cf       	rjmp	.-50     	; 0x7d06 <vfprintf+0x30>
    7d38:	98 2f       	mov	r25, r24
    7d3a:	ff 24       	eor	r15, r15
    7d3c:	ee 24       	eor	r14, r14
    7d3e:	99 24       	eor	r9, r9
    7d40:	ff e1       	ldi	r31, 0x1F	; 31
    7d42:	ff 15       	cp	r31, r15
    7d44:	d0 f0       	brcs	.+52     	; 0x7d7a <vfprintf+0xa4>
    7d46:	9b 32       	cpi	r25, 0x2B	; 43
    7d48:	69 f0       	breq	.+26     	; 0x7d64 <vfprintf+0x8e>
    7d4a:	9c 32       	cpi	r25, 0x2C	; 44
    7d4c:	28 f4       	brcc	.+10     	; 0x7d58 <vfprintf+0x82>
    7d4e:	90 32       	cpi	r25, 0x20	; 32
    7d50:	59 f0       	breq	.+22     	; 0x7d68 <vfprintf+0x92>
    7d52:	93 32       	cpi	r25, 0x23	; 35
    7d54:	91 f4       	brne	.+36     	; 0x7d7a <vfprintf+0xa4>
    7d56:	0e c0       	rjmp	.+28     	; 0x7d74 <vfprintf+0x9e>
    7d58:	9d 32       	cpi	r25, 0x2D	; 45
    7d5a:	49 f0       	breq	.+18     	; 0x7d6e <vfprintf+0x98>
    7d5c:	90 33       	cpi	r25, 0x30	; 48
    7d5e:	69 f4       	brne	.+26     	; 0x7d7a <vfprintf+0xa4>
    7d60:	41 e0       	ldi	r20, 0x01	; 1
    7d62:	24 c0       	rjmp	.+72     	; 0x7dac <vfprintf+0xd6>
    7d64:	52 e0       	ldi	r21, 0x02	; 2
    7d66:	f5 2a       	or	r15, r21
    7d68:	84 e0       	ldi	r24, 0x04	; 4
    7d6a:	f8 2a       	or	r15, r24
    7d6c:	28 c0       	rjmp	.+80     	; 0x7dbe <vfprintf+0xe8>
    7d6e:	98 e0       	ldi	r25, 0x08	; 8
    7d70:	f9 2a       	or	r15, r25
    7d72:	25 c0       	rjmp	.+74     	; 0x7dbe <vfprintf+0xe8>
    7d74:	e0 e1       	ldi	r30, 0x10	; 16
    7d76:	fe 2a       	or	r15, r30
    7d78:	22 c0       	rjmp	.+68     	; 0x7dbe <vfprintf+0xe8>
    7d7a:	f7 fc       	sbrc	r15, 7
    7d7c:	29 c0       	rjmp	.+82     	; 0x7dd0 <vfprintf+0xfa>
    7d7e:	89 2f       	mov	r24, r25
    7d80:	80 53       	subi	r24, 0x30	; 48
    7d82:	8a 30       	cpi	r24, 0x0A	; 10
    7d84:	70 f4       	brcc	.+28     	; 0x7da2 <vfprintf+0xcc>
    7d86:	f6 fe       	sbrs	r15, 6
    7d88:	05 c0       	rjmp	.+10     	; 0x7d94 <vfprintf+0xbe>
    7d8a:	98 9c       	mul	r9, r8
    7d8c:	90 2c       	mov	r9, r0
    7d8e:	11 24       	eor	r1, r1
    7d90:	98 0e       	add	r9, r24
    7d92:	15 c0       	rjmp	.+42     	; 0x7dbe <vfprintf+0xe8>
    7d94:	e8 9c       	mul	r14, r8
    7d96:	e0 2c       	mov	r14, r0
    7d98:	11 24       	eor	r1, r1
    7d9a:	e8 0e       	add	r14, r24
    7d9c:	f0 e2       	ldi	r31, 0x20	; 32
    7d9e:	ff 2a       	or	r15, r31
    7da0:	0e c0       	rjmp	.+28     	; 0x7dbe <vfprintf+0xe8>
    7da2:	9e 32       	cpi	r25, 0x2E	; 46
    7da4:	29 f4       	brne	.+10     	; 0x7db0 <vfprintf+0xda>
    7da6:	f6 fc       	sbrc	r15, 6
    7da8:	6b c1       	rjmp	.+726    	; 0x8080 <vfprintf+0x3aa>
    7daa:	40 e4       	ldi	r20, 0x40	; 64
    7dac:	f4 2a       	or	r15, r20
    7dae:	07 c0       	rjmp	.+14     	; 0x7dbe <vfprintf+0xe8>
    7db0:	9c 36       	cpi	r25, 0x6C	; 108
    7db2:	19 f4       	brne	.+6      	; 0x7dba <vfprintf+0xe4>
    7db4:	50 e8       	ldi	r21, 0x80	; 128
    7db6:	f5 2a       	or	r15, r21
    7db8:	02 c0       	rjmp	.+4      	; 0x7dbe <vfprintf+0xe8>
    7dba:	98 36       	cpi	r25, 0x68	; 104
    7dbc:	49 f4       	brne	.+18     	; 0x7dd0 <vfprintf+0xfa>
    7dbe:	f2 01       	movw	r30, r4
    7dc0:	23 fd       	sbrc	r18, 3
    7dc2:	95 91       	lpm	r25, Z+
    7dc4:	23 ff       	sbrs	r18, 3
    7dc6:	91 91       	ld	r25, Z+
    7dc8:	2f 01       	movw	r4, r30
    7dca:	99 23       	and	r25, r25
    7dcc:	09 f0       	breq	.+2      	; 0x7dd0 <vfprintf+0xfa>
    7dce:	b8 cf       	rjmp	.-144    	; 0x7d40 <vfprintf+0x6a>
    7dd0:	89 2f       	mov	r24, r25
    7dd2:	85 54       	subi	r24, 0x45	; 69
    7dd4:	83 30       	cpi	r24, 0x03	; 3
    7dd6:	18 f0       	brcs	.+6      	; 0x7dde <vfprintf+0x108>
    7dd8:	80 52       	subi	r24, 0x20	; 32
    7dda:	83 30       	cpi	r24, 0x03	; 3
    7ddc:	38 f4       	brcc	.+14     	; 0x7dec <vfprintf+0x116>
    7dde:	44 e0       	ldi	r20, 0x04	; 4
    7de0:	50 e0       	ldi	r21, 0x00	; 0
    7de2:	a4 0e       	add	r10, r20
    7de4:	b5 1e       	adc	r11, r21
    7de6:	5f e3       	ldi	r21, 0x3F	; 63
    7de8:	59 83       	std	Y+1, r21	; 0x01
    7dea:	0f c0       	rjmp	.+30     	; 0x7e0a <vfprintf+0x134>
    7dec:	93 36       	cpi	r25, 0x63	; 99
    7dee:	31 f0       	breq	.+12     	; 0x7dfc <vfprintf+0x126>
    7df0:	93 37       	cpi	r25, 0x73	; 115
    7df2:	79 f0       	breq	.+30     	; 0x7e12 <vfprintf+0x13c>
    7df4:	93 35       	cpi	r25, 0x53	; 83
    7df6:	09 f0       	breq	.+2      	; 0x7dfa <vfprintf+0x124>
    7df8:	56 c0       	rjmp	.+172    	; 0x7ea6 <vfprintf+0x1d0>
    7dfa:	20 c0       	rjmp	.+64     	; 0x7e3c <vfprintf+0x166>
    7dfc:	f5 01       	movw	r30, r10
    7dfe:	80 81       	ld	r24, Z
    7e00:	89 83       	std	Y+1, r24	; 0x01
    7e02:	42 e0       	ldi	r20, 0x02	; 2
    7e04:	50 e0       	ldi	r21, 0x00	; 0
    7e06:	a4 0e       	add	r10, r20
    7e08:	b5 1e       	adc	r11, r21
    7e0a:	61 01       	movw	r12, r2
    7e0c:	01 e0       	ldi	r16, 0x01	; 1
    7e0e:	10 e0       	ldi	r17, 0x00	; 0
    7e10:	12 c0       	rjmp	.+36     	; 0x7e36 <vfprintf+0x160>
    7e12:	f5 01       	movw	r30, r10
    7e14:	c0 80       	ld	r12, Z
    7e16:	d1 80       	ldd	r13, Z+1	; 0x01
    7e18:	f6 fc       	sbrc	r15, 6
    7e1a:	03 c0       	rjmp	.+6      	; 0x7e22 <vfprintf+0x14c>
    7e1c:	6f ef       	ldi	r22, 0xFF	; 255
    7e1e:	7f ef       	ldi	r23, 0xFF	; 255
    7e20:	02 c0       	rjmp	.+4      	; 0x7e26 <vfprintf+0x150>
    7e22:	69 2d       	mov	r22, r9
    7e24:	70 e0       	ldi	r23, 0x00	; 0
    7e26:	42 e0       	ldi	r20, 0x02	; 2
    7e28:	50 e0       	ldi	r21, 0x00	; 0
    7e2a:	a4 0e       	add	r10, r20
    7e2c:	b5 1e       	adc	r11, r21
    7e2e:	c6 01       	movw	r24, r12
    7e30:	0e 94 53 40 	call	0x80a6	; 0x80a6 <strnlen>
    7e34:	8c 01       	movw	r16, r24
    7e36:	5f e7       	ldi	r21, 0x7F	; 127
    7e38:	f5 22       	and	r15, r21
    7e3a:	14 c0       	rjmp	.+40     	; 0x7e64 <vfprintf+0x18e>
    7e3c:	f5 01       	movw	r30, r10
    7e3e:	c0 80       	ld	r12, Z
    7e40:	d1 80       	ldd	r13, Z+1	; 0x01
    7e42:	f6 fc       	sbrc	r15, 6
    7e44:	03 c0       	rjmp	.+6      	; 0x7e4c <vfprintf+0x176>
    7e46:	6f ef       	ldi	r22, 0xFF	; 255
    7e48:	7f ef       	ldi	r23, 0xFF	; 255
    7e4a:	02 c0       	rjmp	.+4      	; 0x7e50 <vfprintf+0x17a>
    7e4c:	69 2d       	mov	r22, r9
    7e4e:	70 e0       	ldi	r23, 0x00	; 0
    7e50:	42 e0       	ldi	r20, 0x02	; 2
    7e52:	50 e0       	ldi	r21, 0x00	; 0
    7e54:	a4 0e       	add	r10, r20
    7e56:	b5 1e       	adc	r11, r21
    7e58:	c6 01       	movw	r24, r12
    7e5a:	0e 94 48 40 	call	0x8090	; 0x8090 <strnlen_P>
    7e5e:	8c 01       	movw	r16, r24
    7e60:	50 e8       	ldi	r21, 0x80	; 128
    7e62:	f5 2a       	or	r15, r21
    7e64:	f3 fe       	sbrs	r15, 3
    7e66:	07 c0       	rjmp	.+14     	; 0x7e76 <vfprintf+0x1a0>
    7e68:	1a c0       	rjmp	.+52     	; 0x7e9e <vfprintf+0x1c8>
    7e6a:	80 e2       	ldi	r24, 0x20	; 32
    7e6c:	90 e0       	ldi	r25, 0x00	; 0
    7e6e:	b3 01       	movw	r22, r6
    7e70:	0e 94 5e 40 	call	0x80bc	; 0x80bc <fputc>
    7e74:	ea 94       	dec	r14
    7e76:	8e 2d       	mov	r24, r14
    7e78:	90 e0       	ldi	r25, 0x00	; 0
    7e7a:	08 17       	cp	r16, r24
    7e7c:	19 07       	cpc	r17, r25
    7e7e:	a8 f3       	brcs	.-22     	; 0x7e6a <vfprintf+0x194>
    7e80:	0e c0       	rjmp	.+28     	; 0x7e9e <vfprintf+0x1c8>
    7e82:	f6 01       	movw	r30, r12
    7e84:	f7 fc       	sbrc	r15, 7
    7e86:	85 91       	lpm	r24, Z+
    7e88:	f7 fe       	sbrs	r15, 7
    7e8a:	81 91       	ld	r24, Z+
    7e8c:	6f 01       	movw	r12, r30
    7e8e:	90 e0       	ldi	r25, 0x00	; 0
    7e90:	b3 01       	movw	r22, r6
    7e92:	0e 94 5e 40 	call	0x80bc	; 0x80bc <fputc>
    7e96:	e1 10       	cpse	r14, r1
    7e98:	ea 94       	dec	r14
    7e9a:	01 50       	subi	r16, 0x01	; 1
    7e9c:	10 40       	sbci	r17, 0x00	; 0
    7e9e:	01 15       	cp	r16, r1
    7ea0:	11 05       	cpc	r17, r1
    7ea2:	79 f7       	brne	.-34     	; 0x7e82 <vfprintf+0x1ac>
    7ea4:	ea c0       	rjmp	.+468    	; 0x807a <vfprintf+0x3a4>
    7ea6:	94 36       	cpi	r25, 0x64	; 100
    7ea8:	11 f0       	breq	.+4      	; 0x7eae <vfprintf+0x1d8>
    7eaa:	99 36       	cpi	r25, 0x69	; 105
    7eac:	69 f5       	brne	.+90     	; 0x7f08 <vfprintf+0x232>
    7eae:	f7 fe       	sbrs	r15, 7
    7eb0:	08 c0       	rjmp	.+16     	; 0x7ec2 <vfprintf+0x1ec>
    7eb2:	f5 01       	movw	r30, r10
    7eb4:	20 81       	ld	r18, Z
    7eb6:	31 81       	ldd	r19, Z+1	; 0x01
    7eb8:	42 81       	ldd	r20, Z+2	; 0x02
    7eba:	53 81       	ldd	r21, Z+3	; 0x03
    7ebc:	84 e0       	ldi	r24, 0x04	; 4
    7ebe:	90 e0       	ldi	r25, 0x00	; 0
    7ec0:	0a c0       	rjmp	.+20     	; 0x7ed6 <vfprintf+0x200>
    7ec2:	f5 01       	movw	r30, r10
    7ec4:	80 81       	ld	r24, Z
    7ec6:	91 81       	ldd	r25, Z+1	; 0x01
    7ec8:	9c 01       	movw	r18, r24
    7eca:	44 27       	eor	r20, r20
    7ecc:	37 fd       	sbrc	r19, 7
    7ece:	40 95       	com	r20
    7ed0:	54 2f       	mov	r21, r20
    7ed2:	82 e0       	ldi	r24, 0x02	; 2
    7ed4:	90 e0       	ldi	r25, 0x00	; 0
    7ed6:	a8 0e       	add	r10, r24
    7ed8:	b9 1e       	adc	r11, r25
    7eda:	9f e6       	ldi	r25, 0x6F	; 111
    7edc:	f9 22       	and	r15, r25
    7ede:	57 ff       	sbrs	r21, 7
    7ee0:	09 c0       	rjmp	.+18     	; 0x7ef4 <vfprintf+0x21e>
    7ee2:	50 95       	com	r21
    7ee4:	40 95       	com	r20
    7ee6:	30 95       	com	r19
    7ee8:	21 95       	neg	r18
    7eea:	3f 4f       	sbci	r19, 0xFF	; 255
    7eec:	4f 4f       	sbci	r20, 0xFF	; 255
    7eee:	5f 4f       	sbci	r21, 0xFF	; 255
    7ef0:	e0 e8       	ldi	r30, 0x80	; 128
    7ef2:	fe 2a       	or	r15, r30
    7ef4:	ca 01       	movw	r24, r20
    7ef6:	b9 01       	movw	r22, r18
    7ef8:	a1 01       	movw	r20, r2
    7efa:	2a e0       	ldi	r18, 0x0A	; 10
    7efc:	30 e0       	ldi	r19, 0x00	; 0
    7efe:	0e 94 8a 40 	call	0x8114	; 0x8114 <__ultoa_invert>
    7f02:	d8 2e       	mov	r13, r24
    7f04:	d2 18       	sub	r13, r2
    7f06:	40 c0       	rjmp	.+128    	; 0x7f88 <vfprintf+0x2b2>
    7f08:	95 37       	cpi	r25, 0x75	; 117
    7f0a:	29 f4       	brne	.+10     	; 0x7f16 <vfprintf+0x240>
    7f0c:	1f 2d       	mov	r17, r15
    7f0e:	1f 7e       	andi	r17, 0xEF	; 239
    7f10:	2a e0       	ldi	r18, 0x0A	; 10
    7f12:	30 e0       	ldi	r19, 0x00	; 0
    7f14:	1d c0       	rjmp	.+58     	; 0x7f50 <vfprintf+0x27a>
    7f16:	1f 2d       	mov	r17, r15
    7f18:	19 7f       	andi	r17, 0xF9	; 249
    7f1a:	9f 36       	cpi	r25, 0x6F	; 111
    7f1c:	61 f0       	breq	.+24     	; 0x7f36 <vfprintf+0x260>
    7f1e:	90 37       	cpi	r25, 0x70	; 112
    7f20:	20 f4       	brcc	.+8      	; 0x7f2a <vfprintf+0x254>
    7f22:	98 35       	cpi	r25, 0x58	; 88
    7f24:	09 f0       	breq	.+2      	; 0x7f28 <vfprintf+0x252>
    7f26:	ac c0       	rjmp	.+344    	; 0x8080 <vfprintf+0x3aa>
    7f28:	0f c0       	rjmp	.+30     	; 0x7f48 <vfprintf+0x272>
    7f2a:	90 37       	cpi	r25, 0x70	; 112
    7f2c:	39 f0       	breq	.+14     	; 0x7f3c <vfprintf+0x266>
    7f2e:	98 37       	cpi	r25, 0x78	; 120
    7f30:	09 f0       	breq	.+2      	; 0x7f34 <vfprintf+0x25e>
    7f32:	a6 c0       	rjmp	.+332    	; 0x8080 <vfprintf+0x3aa>
    7f34:	04 c0       	rjmp	.+8      	; 0x7f3e <vfprintf+0x268>
    7f36:	28 e0       	ldi	r18, 0x08	; 8
    7f38:	30 e0       	ldi	r19, 0x00	; 0
    7f3a:	0a c0       	rjmp	.+20     	; 0x7f50 <vfprintf+0x27a>
    7f3c:	10 61       	ori	r17, 0x10	; 16
    7f3e:	14 fd       	sbrc	r17, 4
    7f40:	14 60       	ori	r17, 0x04	; 4
    7f42:	20 e1       	ldi	r18, 0x10	; 16
    7f44:	30 e0       	ldi	r19, 0x00	; 0
    7f46:	04 c0       	rjmp	.+8      	; 0x7f50 <vfprintf+0x27a>
    7f48:	14 fd       	sbrc	r17, 4
    7f4a:	16 60       	ori	r17, 0x06	; 6
    7f4c:	20 e1       	ldi	r18, 0x10	; 16
    7f4e:	32 e0       	ldi	r19, 0x02	; 2
    7f50:	17 ff       	sbrs	r17, 7
    7f52:	08 c0       	rjmp	.+16     	; 0x7f64 <vfprintf+0x28e>
    7f54:	f5 01       	movw	r30, r10
    7f56:	60 81       	ld	r22, Z
    7f58:	71 81       	ldd	r23, Z+1	; 0x01
    7f5a:	82 81       	ldd	r24, Z+2	; 0x02
    7f5c:	93 81       	ldd	r25, Z+3	; 0x03
    7f5e:	44 e0       	ldi	r20, 0x04	; 4
    7f60:	50 e0       	ldi	r21, 0x00	; 0
    7f62:	08 c0       	rjmp	.+16     	; 0x7f74 <vfprintf+0x29e>
    7f64:	f5 01       	movw	r30, r10
    7f66:	80 81       	ld	r24, Z
    7f68:	91 81       	ldd	r25, Z+1	; 0x01
    7f6a:	bc 01       	movw	r22, r24
    7f6c:	80 e0       	ldi	r24, 0x00	; 0
    7f6e:	90 e0       	ldi	r25, 0x00	; 0
    7f70:	42 e0       	ldi	r20, 0x02	; 2
    7f72:	50 e0       	ldi	r21, 0x00	; 0
    7f74:	a4 0e       	add	r10, r20
    7f76:	b5 1e       	adc	r11, r21
    7f78:	a1 01       	movw	r20, r2
    7f7a:	0e 94 8a 40 	call	0x8114	; 0x8114 <__ultoa_invert>
    7f7e:	d8 2e       	mov	r13, r24
    7f80:	d2 18       	sub	r13, r2
    7f82:	8f e7       	ldi	r24, 0x7F	; 127
    7f84:	f8 2e       	mov	r15, r24
    7f86:	f1 22       	and	r15, r17
    7f88:	f6 fe       	sbrs	r15, 6
    7f8a:	0b c0       	rjmp	.+22     	; 0x7fa2 <vfprintf+0x2cc>
    7f8c:	5e ef       	ldi	r21, 0xFE	; 254
    7f8e:	f5 22       	and	r15, r21
    7f90:	d9 14       	cp	r13, r9
    7f92:	38 f4       	brcc	.+14     	; 0x7fa2 <vfprintf+0x2cc>
    7f94:	f4 fe       	sbrs	r15, 4
    7f96:	07 c0       	rjmp	.+14     	; 0x7fa6 <vfprintf+0x2d0>
    7f98:	f2 fc       	sbrc	r15, 2
    7f9a:	05 c0       	rjmp	.+10     	; 0x7fa6 <vfprintf+0x2d0>
    7f9c:	8f ee       	ldi	r24, 0xEF	; 239
    7f9e:	f8 22       	and	r15, r24
    7fa0:	02 c0       	rjmp	.+4      	; 0x7fa6 <vfprintf+0x2d0>
    7fa2:	1d 2d       	mov	r17, r13
    7fa4:	01 c0       	rjmp	.+2      	; 0x7fa8 <vfprintf+0x2d2>
    7fa6:	19 2d       	mov	r17, r9
    7fa8:	f4 fe       	sbrs	r15, 4
    7faa:	0d c0       	rjmp	.+26     	; 0x7fc6 <vfprintf+0x2f0>
    7fac:	fe 01       	movw	r30, r28
    7fae:	ed 0d       	add	r30, r13
    7fb0:	f1 1d       	adc	r31, r1
    7fb2:	80 81       	ld	r24, Z
    7fb4:	80 33       	cpi	r24, 0x30	; 48
    7fb6:	19 f4       	brne	.+6      	; 0x7fbe <vfprintf+0x2e8>
    7fb8:	99 ee       	ldi	r25, 0xE9	; 233
    7fba:	f9 22       	and	r15, r25
    7fbc:	08 c0       	rjmp	.+16     	; 0x7fce <vfprintf+0x2f8>
    7fbe:	1f 5f       	subi	r17, 0xFF	; 255
    7fc0:	f2 fe       	sbrs	r15, 2
    7fc2:	05 c0       	rjmp	.+10     	; 0x7fce <vfprintf+0x2f8>
    7fc4:	03 c0       	rjmp	.+6      	; 0x7fcc <vfprintf+0x2f6>
    7fc6:	8f 2d       	mov	r24, r15
    7fc8:	86 78       	andi	r24, 0x86	; 134
    7fca:	09 f0       	breq	.+2      	; 0x7fce <vfprintf+0x2f8>
    7fcc:	1f 5f       	subi	r17, 0xFF	; 255
    7fce:	0f 2d       	mov	r16, r15
    7fd0:	f3 fc       	sbrc	r15, 3
    7fd2:	14 c0       	rjmp	.+40     	; 0x7ffc <vfprintf+0x326>
    7fd4:	f0 fe       	sbrs	r15, 0
    7fd6:	0f c0       	rjmp	.+30     	; 0x7ff6 <vfprintf+0x320>
    7fd8:	1e 15       	cp	r17, r14
    7fda:	10 f0       	brcs	.+4      	; 0x7fe0 <vfprintf+0x30a>
    7fdc:	9d 2c       	mov	r9, r13
    7fde:	0b c0       	rjmp	.+22     	; 0x7ff6 <vfprintf+0x320>
    7fe0:	9d 2c       	mov	r9, r13
    7fe2:	9e 0c       	add	r9, r14
    7fe4:	91 1a       	sub	r9, r17
    7fe6:	1e 2d       	mov	r17, r14
    7fe8:	06 c0       	rjmp	.+12     	; 0x7ff6 <vfprintf+0x320>
    7fea:	80 e2       	ldi	r24, 0x20	; 32
    7fec:	90 e0       	ldi	r25, 0x00	; 0
    7fee:	b3 01       	movw	r22, r6
    7ff0:	0e 94 5e 40 	call	0x80bc	; 0x80bc <fputc>
    7ff4:	1f 5f       	subi	r17, 0xFF	; 255
    7ff6:	1e 15       	cp	r17, r14
    7ff8:	c0 f3       	brcs	.-16     	; 0x7fea <vfprintf+0x314>
    7ffa:	04 c0       	rjmp	.+8      	; 0x8004 <vfprintf+0x32e>
    7ffc:	1e 15       	cp	r17, r14
    7ffe:	10 f4       	brcc	.+4      	; 0x8004 <vfprintf+0x32e>
    8000:	e1 1a       	sub	r14, r17
    8002:	01 c0       	rjmp	.+2      	; 0x8006 <vfprintf+0x330>
    8004:	ee 24       	eor	r14, r14
    8006:	04 ff       	sbrs	r16, 4
    8008:	0f c0       	rjmp	.+30     	; 0x8028 <vfprintf+0x352>
    800a:	80 e3       	ldi	r24, 0x30	; 48
    800c:	90 e0       	ldi	r25, 0x00	; 0
    800e:	b3 01       	movw	r22, r6
    8010:	0e 94 5e 40 	call	0x80bc	; 0x80bc <fputc>
    8014:	02 ff       	sbrs	r16, 2
    8016:	1d c0       	rjmp	.+58     	; 0x8052 <vfprintf+0x37c>
    8018:	01 fd       	sbrc	r16, 1
    801a:	03 c0       	rjmp	.+6      	; 0x8022 <vfprintf+0x34c>
    801c:	88 e7       	ldi	r24, 0x78	; 120
    801e:	90 e0       	ldi	r25, 0x00	; 0
    8020:	0e c0       	rjmp	.+28     	; 0x803e <vfprintf+0x368>
    8022:	88 e5       	ldi	r24, 0x58	; 88
    8024:	90 e0       	ldi	r25, 0x00	; 0
    8026:	0b c0       	rjmp	.+22     	; 0x803e <vfprintf+0x368>
    8028:	80 2f       	mov	r24, r16
    802a:	86 78       	andi	r24, 0x86	; 134
    802c:	91 f0       	breq	.+36     	; 0x8052 <vfprintf+0x37c>
    802e:	01 ff       	sbrs	r16, 1
    8030:	02 c0       	rjmp	.+4      	; 0x8036 <vfprintf+0x360>
    8032:	8b e2       	ldi	r24, 0x2B	; 43
    8034:	01 c0       	rjmp	.+2      	; 0x8038 <vfprintf+0x362>
    8036:	80 e2       	ldi	r24, 0x20	; 32
    8038:	f7 fc       	sbrc	r15, 7
    803a:	8d e2       	ldi	r24, 0x2D	; 45
    803c:	90 e0       	ldi	r25, 0x00	; 0
    803e:	b3 01       	movw	r22, r6
    8040:	0e 94 5e 40 	call	0x80bc	; 0x80bc <fputc>
    8044:	06 c0       	rjmp	.+12     	; 0x8052 <vfprintf+0x37c>
    8046:	80 e3       	ldi	r24, 0x30	; 48
    8048:	90 e0       	ldi	r25, 0x00	; 0
    804a:	b3 01       	movw	r22, r6
    804c:	0e 94 5e 40 	call	0x80bc	; 0x80bc <fputc>
    8050:	9a 94       	dec	r9
    8052:	d9 14       	cp	r13, r9
    8054:	c0 f3       	brcs	.-16     	; 0x8046 <vfprintf+0x370>
    8056:	da 94       	dec	r13
    8058:	f1 01       	movw	r30, r2
    805a:	ed 0d       	add	r30, r13
    805c:	f1 1d       	adc	r31, r1
    805e:	80 81       	ld	r24, Z
    8060:	90 e0       	ldi	r25, 0x00	; 0
    8062:	b3 01       	movw	r22, r6
    8064:	0e 94 5e 40 	call	0x80bc	; 0x80bc <fputc>
    8068:	dd 20       	and	r13, r13
    806a:	a9 f7       	brne	.-22     	; 0x8056 <vfprintf+0x380>
    806c:	06 c0       	rjmp	.+12     	; 0x807a <vfprintf+0x3a4>
    806e:	80 e2       	ldi	r24, 0x20	; 32
    8070:	90 e0       	ldi	r25, 0x00	; 0
    8072:	b3 01       	movw	r22, r6
    8074:	0e 94 5e 40 	call	0x80bc	; 0x80bc <fputc>
    8078:	ea 94       	dec	r14
    807a:	ee 20       	and	r14, r14
    807c:	c1 f7       	brne	.-16     	; 0x806e <vfprintf+0x398>
    807e:	43 ce       	rjmp	.-890    	; 0x7d06 <vfprintf+0x30>
    8080:	f3 01       	movw	r30, r6
    8082:	66 81       	ldd	r22, Z+6	; 0x06
    8084:	77 81       	ldd	r23, Z+7	; 0x07
    8086:	cb 01       	movw	r24, r22
    8088:	2b 96       	adiw	r28, 0x0b	; 11
    808a:	e2 e1       	ldi	r30, 0x12	; 18
    808c:	0c 94 2c 3e 	jmp	0x7c58	; 0x7c58 <__epilogue_restores__>

00008090 <strnlen_P>:
    8090:	fc 01       	movw	r30, r24
    8092:	05 90       	lpm	r0, Z+
    8094:	61 50       	subi	r22, 0x01	; 1
    8096:	70 40       	sbci	r23, 0x00	; 0
    8098:	01 10       	cpse	r0, r1
    809a:	d8 f7       	brcc	.-10     	; 0x8092 <strnlen_P+0x2>
    809c:	80 95       	com	r24
    809e:	90 95       	com	r25
    80a0:	8e 0f       	add	r24, r30
    80a2:	9f 1f       	adc	r25, r31
    80a4:	08 95       	ret

000080a6 <strnlen>:
    80a6:	fc 01       	movw	r30, r24
    80a8:	61 50       	subi	r22, 0x01	; 1
    80aa:	70 40       	sbci	r23, 0x00	; 0
    80ac:	01 90       	ld	r0, Z+
    80ae:	01 10       	cpse	r0, r1
    80b0:	d8 f7       	brcc	.-10     	; 0x80a8 <strnlen+0x2>
    80b2:	80 95       	com	r24
    80b4:	90 95       	com	r25
    80b6:	8e 0f       	add	r24, r30
    80b8:	9f 1f       	adc	r25, r31
    80ba:	08 95       	ret

000080bc <fputc>:
    80bc:	0f 93       	push	r16
    80be:	1f 93       	push	r17
    80c0:	cf 93       	push	r28
    80c2:	df 93       	push	r29
    80c4:	8c 01       	movw	r16, r24
    80c6:	eb 01       	movw	r28, r22
    80c8:	8b 81       	ldd	r24, Y+3	; 0x03
    80ca:	81 ff       	sbrs	r24, 1
    80cc:	1b c0       	rjmp	.+54     	; 0x8104 <fputc+0x48>
    80ce:	82 ff       	sbrs	r24, 2
    80d0:	0d c0       	rjmp	.+26     	; 0x80ec <fputc+0x30>
    80d2:	2e 81       	ldd	r18, Y+6	; 0x06
    80d4:	3f 81       	ldd	r19, Y+7	; 0x07
    80d6:	8c 81       	ldd	r24, Y+4	; 0x04
    80d8:	9d 81       	ldd	r25, Y+5	; 0x05
    80da:	28 17       	cp	r18, r24
    80dc:	39 07       	cpc	r19, r25
    80de:	64 f4       	brge	.+24     	; 0x80f8 <fputc+0x3c>
    80e0:	e8 81       	ld	r30, Y
    80e2:	f9 81       	ldd	r31, Y+1	; 0x01
    80e4:	01 93       	st	Z+, r16
    80e6:	f9 83       	std	Y+1, r31	; 0x01
    80e8:	e8 83       	st	Y, r30
    80ea:	06 c0       	rjmp	.+12     	; 0x80f8 <fputc+0x3c>
    80ec:	e8 85       	ldd	r30, Y+8	; 0x08
    80ee:	f9 85       	ldd	r31, Y+9	; 0x09
    80f0:	80 2f       	mov	r24, r16
    80f2:	09 95       	icall
    80f4:	89 2b       	or	r24, r25
    80f6:	31 f4       	brne	.+12     	; 0x8104 <fputc+0x48>
    80f8:	8e 81       	ldd	r24, Y+6	; 0x06
    80fa:	9f 81       	ldd	r25, Y+7	; 0x07
    80fc:	01 96       	adiw	r24, 0x01	; 1
    80fe:	9f 83       	std	Y+7, r25	; 0x07
    8100:	8e 83       	std	Y+6, r24	; 0x06
    8102:	02 c0       	rjmp	.+4      	; 0x8108 <fputc+0x4c>
    8104:	0f ef       	ldi	r16, 0xFF	; 255
    8106:	1f ef       	ldi	r17, 0xFF	; 255
    8108:	c8 01       	movw	r24, r16
    810a:	df 91       	pop	r29
    810c:	cf 91       	pop	r28
    810e:	1f 91       	pop	r17
    8110:	0f 91       	pop	r16
    8112:	08 95       	ret

00008114 <__ultoa_invert>:
    8114:	fa 01       	movw	r30, r20
    8116:	aa 27       	eor	r26, r26
    8118:	28 30       	cpi	r18, 0x08	; 8
    811a:	51 f1       	breq	.+84     	; 0x8170 <__ultoa_invert+0x5c>
    811c:	20 31       	cpi	r18, 0x10	; 16
    811e:	81 f1       	breq	.+96     	; 0x8180 <__ultoa_invert+0x6c>
    8120:	e8 94       	clt
    8122:	6f 93       	push	r22
    8124:	6e 7f       	andi	r22, 0xFE	; 254
    8126:	6e 5f       	subi	r22, 0xFE	; 254
    8128:	7f 4f       	sbci	r23, 0xFF	; 255
    812a:	8f 4f       	sbci	r24, 0xFF	; 255
    812c:	9f 4f       	sbci	r25, 0xFF	; 255
    812e:	af 4f       	sbci	r26, 0xFF	; 255
    8130:	b1 e0       	ldi	r27, 0x01	; 1
    8132:	3e d0       	rcall	.+124    	; 0x81b0 <__ultoa_invert+0x9c>
    8134:	b4 e0       	ldi	r27, 0x04	; 4
    8136:	3c d0       	rcall	.+120    	; 0x81b0 <__ultoa_invert+0x9c>
    8138:	67 0f       	add	r22, r23
    813a:	78 1f       	adc	r23, r24
    813c:	89 1f       	adc	r24, r25
    813e:	9a 1f       	adc	r25, r26
    8140:	a1 1d       	adc	r26, r1
    8142:	68 0f       	add	r22, r24
    8144:	79 1f       	adc	r23, r25
    8146:	8a 1f       	adc	r24, r26
    8148:	91 1d       	adc	r25, r1
    814a:	a1 1d       	adc	r26, r1
    814c:	6a 0f       	add	r22, r26
    814e:	71 1d       	adc	r23, r1
    8150:	81 1d       	adc	r24, r1
    8152:	91 1d       	adc	r25, r1
    8154:	a1 1d       	adc	r26, r1
    8156:	20 d0       	rcall	.+64     	; 0x8198 <__ultoa_invert+0x84>
    8158:	09 f4       	brne	.+2      	; 0x815c <__ultoa_invert+0x48>
    815a:	68 94       	set
    815c:	3f 91       	pop	r19
    815e:	2a e0       	ldi	r18, 0x0A	; 10
    8160:	26 9f       	mul	r18, r22
    8162:	11 24       	eor	r1, r1
    8164:	30 19       	sub	r19, r0
    8166:	30 5d       	subi	r19, 0xD0	; 208
    8168:	31 93       	st	Z+, r19
    816a:	de f6       	brtc	.-74     	; 0x8122 <__ultoa_invert+0xe>
    816c:	cf 01       	movw	r24, r30
    816e:	08 95       	ret
    8170:	46 2f       	mov	r20, r22
    8172:	47 70       	andi	r20, 0x07	; 7
    8174:	40 5d       	subi	r20, 0xD0	; 208
    8176:	41 93       	st	Z+, r20
    8178:	b3 e0       	ldi	r27, 0x03	; 3
    817a:	0f d0       	rcall	.+30     	; 0x819a <__ultoa_invert+0x86>
    817c:	c9 f7       	brne	.-14     	; 0x8170 <__ultoa_invert+0x5c>
    817e:	f6 cf       	rjmp	.-20     	; 0x816c <__ultoa_invert+0x58>
    8180:	46 2f       	mov	r20, r22
    8182:	4f 70       	andi	r20, 0x0F	; 15
    8184:	40 5d       	subi	r20, 0xD0	; 208
    8186:	4a 33       	cpi	r20, 0x3A	; 58
    8188:	18 f0       	brcs	.+6      	; 0x8190 <__ultoa_invert+0x7c>
    818a:	49 5d       	subi	r20, 0xD9	; 217
    818c:	31 fd       	sbrc	r19, 1
    818e:	40 52       	subi	r20, 0x20	; 32
    8190:	41 93       	st	Z+, r20
    8192:	02 d0       	rcall	.+4      	; 0x8198 <__ultoa_invert+0x84>
    8194:	a9 f7       	brne	.-22     	; 0x8180 <__ultoa_invert+0x6c>
    8196:	ea cf       	rjmp	.-44     	; 0x816c <__ultoa_invert+0x58>
    8198:	b4 e0       	ldi	r27, 0x04	; 4
    819a:	a6 95       	lsr	r26
    819c:	97 95       	ror	r25
    819e:	87 95       	ror	r24
    81a0:	77 95       	ror	r23
    81a2:	67 95       	ror	r22
    81a4:	ba 95       	dec	r27
    81a6:	c9 f7       	brne	.-14     	; 0x819a <__ultoa_invert+0x86>
    81a8:	00 97       	sbiw	r24, 0x00	; 0
    81aa:	61 05       	cpc	r22, r1
    81ac:	71 05       	cpc	r23, r1
    81ae:	08 95       	ret
    81b0:	9b 01       	movw	r18, r22
    81b2:	ac 01       	movw	r20, r24
    81b4:	0a 2e       	mov	r0, r26
    81b6:	06 94       	lsr	r0
    81b8:	57 95       	ror	r21
    81ba:	47 95       	ror	r20
    81bc:	37 95       	ror	r19
    81be:	27 95       	ror	r18
    81c0:	ba 95       	dec	r27
    81c2:	c9 f7       	brne	.-14     	; 0x81b6 <__ultoa_invert+0xa2>
    81c4:	62 0f       	add	r22, r18
    81c6:	73 1f       	adc	r23, r19
    81c8:	84 1f       	adc	r24, r20
    81ca:	95 1f       	adc	r25, r21
    81cc:	a0 1d       	adc	r26, r0
    81ce:	08 95       	ret

000081d0 <_exit>:
    81d0:	f8 94       	cli

000081d2 <__stop_program>:
    81d2:	ff cf       	rjmp	.-2      	; 0x81d2 <__stop_program>
