
wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007724  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000444  00800060  00007724  000077b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  008004a4  008004a4  00007bfc  2**0
                  ALLOC
  3 .stab         000055ec  00000000  00000000  00007bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001758  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ea80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ebf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00010839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00011724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000124d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00012634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000128c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001308f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      34:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_13>
      38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

00000054 <words>:
      54:	01 00 00 00 02 00 00 00 04 00 00 00 08 00 00 00     ................
      64:	10 00 00 00 20 00 00 00 40 00 00 00 80 00 00 00     .... ...@.......
      74:	00 01 00 00 00 02 00 00 00 04 00 00 00 18 00 00     ................
      84:	00 30 00 00 00 40 00 00 00 80 00 00 00 00 01 00     .0...@..........
      94:	00 00 02 00 00 00 04 00 00 00 08 00 00 00 10 00     ................
      a4:	00 00 20 00 00 00 40 00 00 00 80 00 00 00 00 01     .. ...@.........
      b4:	00 00 00 02 00 00 00 04 00 00 00 08 00 00 00 10     ................
      c4:	00 00 00 20 00 00 00 40                             ... ...@

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf e5       	ldi	r28, 0x5F	; 95
      d2:	d8 e0       	ldi	r29, 0x08	; 8
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	14 e0       	ldi	r17, 0x04	; 4
      da:	a0 e6       	ldi	r26, 0x60	; 96
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e4 e2       	ldi	r30, 0x24	; 36
      e0:	f7 e7       	ldi	r31, 0x77	; 119
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <.do_copy_data_start>

000000e4 <.do_copy_data_loop>:
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0

000000e8 <.do_copy_data_start>:
      e8:	a4 3a       	cpi	r26, 0xA4	; 164
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <.do_copy_data_loop>

000000ee <__do_clear_bss>:
      ee:	14 e0       	ldi	r17, 0x04	; 4
      f0:	a4 ea       	ldi	r26, 0xA4	; 164
      f2:	b4 e0       	ldi	r27, 0x04	; 4
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	a4 3f       	cpi	r26, 0xF4	; 244
      fa:	b1 07       	cpc	r27, r17
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <main>
     102:	0c 94 90 3b 	jmp	0x7720	; 0x7720 <_exit>

00000106 <__bad_interrupt>:
     106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <i2c_reset>:
 *  @return    0 = successful, else failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static uint8_t
i2c_reset (void)
{
     10a:	df 93       	push	r29
     10c:	cf 93       	push	r28
     10e:	0f 92       	push	r0
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
  uint8_t    rtc = 0;
     114:	19 82       	std	Y+1, r1	; 0x01
    {                                                                            // yes...
      rtc = I2C_ERROR_SDA_LOW;
    }
  }
#endif
  return rtc;
     116:	89 81       	ldd	r24, Y+1	; 0x01
}
     118:	0f 90       	pop	r0
     11a:	cf 91       	pop	r28
     11c:	df 91       	pop	r29
     11e:	08 95       	ret

00000120 <i2c_master_init>:
 *  @return    TRUE if successful, FALSE, if not
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_init(void)
{
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	0f 92       	push	r0
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
  static uint8_t  already_called;
  uint8_t         rtc;

  if (! already_called)
     12a:	80 91 a4 04 	lds	r24, 0x04A4
     12e:	88 23       	and	r24, r24
     130:	71 f4       	brne	.+28     	; 0x14e <i2c_master_init+0x2e>
  {
    rtc = i2c_reset ();                                                         // try to reset I2C bus
     132:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_reset>
     136:	89 83       	std	Y+1, r24	; 0x01

    TWSR = 0;                                                                   // no prescaler
     138:	e1 e2       	ldi	r30, 0x21	; 33
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	10 82       	st	Z, r1
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;                                            // must be > 10 for stable operation
     13e:	e0 e2       	ldi	r30, 0x20	; 32
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	8c e0       	ldi	r24, 0x0C	; 12
     144:	80 83       	st	Z, r24
    already_called = 1;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 a4 04 	sts	0x04A4, r24
     14c:	01 c0       	rjmp	.+2      	; 0x150 <i2c_master_init+0x30>
  }
  else
  {
    rtc = 0;
     14e:	19 82       	std	Y+1, r1	; 0x01
  }
  return rtc;
     150:	89 81       	ldd	r24, Y+1	; 0x01
}
     152:	0f 90       	pop	r0
     154:	cf 91       	pop	r28
     156:	df 91       	pop	r29
     158:	08 95       	ret

0000015a <i2c_master_start>:
 *  @return    1 = failed to access device, 0 = device accessible
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
unsigned char
i2c_master_start(uint8_t address, uint8_t * status_p)
{
     15a:	df 93       	push	r29
     15c:	cf 93       	push	r28
     15e:	00 d0       	rcall	.+0      	; 0x160 <i2c_master_start+0x6>
     160:	00 d0       	rcall	.+0      	; 0x162 <i2c_master_start+0x8>
     162:	0f 92       	push	r0
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	8a 83       	std	Y+2, r24	; 0x02
     16a:	7c 83       	std	Y+4, r23	; 0x04
     16c:	6b 83       	std	Y+3, r22	; 0x03
  uint8_t   twst;

  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);                                   // send START condition
     16e:	e6 e5       	ldi	r30, 0x56	; 86
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	84 ea       	ldi	r24, 0xA4	; 164
     174:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;                                            // wait until transmission completed
     176:	e6 e5       	ldi	r30, 0x56	; 86
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	88 23       	and	r24, r24
     17e:	dc f7       	brge	.-10     	; 0x176 <i2c_master_start+0x1c>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits.
     180:	e1 e2       	ldi	r30, 0x21	; 33
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	88 7f       	andi	r24, 0xF8	; 248
     188:	89 83       	std	Y+1, r24	; 0x01

  if ((twst != TW_START) && (twst != TW_REP_START))
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	88 30       	cpi	r24, 0x08	; 8
     18e:	51 f0       	breq	.+20     	; 0x1a4 <i2c_master_start+0x4a>
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	80 31       	cpi	r24, 0x10	; 16
     194:	39 f0       	breq	.+14     	; 0x1a4 <i2c_master_start+0x4a>
  {
    *status_p = twst;                                                           // store status
     196:	eb 81       	ldd	r30, Y+3	; 0x03
     198:	fc 81       	ldd	r31, Y+4	; 0x04
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	80 83       	st	Z, r24
    return 1;                                                                   // ERROR
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	8d 83       	std	Y+5, r24	; 0x05
     1a2:	20 c0       	rjmp	.+64     	; 0x1e4 <i2c_master_start+0x8a>
  }

  TWDR = address;                                                               // send device address
     1a4:	e3 e2       	ldi	r30, 0x23	; 35
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	8a 81       	ldd	r24, Y+2	; 0x02
     1aa:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     1ac:	e6 e5       	ldi	r30, 0x56	; 86
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	84 e8       	ldi	r24, 0x84	; 132
     1b2:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED                                             // wail until transmission completed and ACK/NACK has been received
     1b4:	e6 e5       	ldi	r30, 0x56	; 86
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	88 23       	and	r24, r24
     1bc:	dc f7       	brge	.-10     	; 0x1b4 <i2c_master_start+0x5a>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits.
     1be:	e1 e2       	ldi	r30, 0x21	; 33
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	88 7f       	andi	r24, 0xF8	; 248
     1c6:	89 83       	std	Y+1, r24	; 0x01

  if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	88 31       	cpi	r24, 0x18	; 24
     1cc:	51 f0       	breq	.+20     	; 0x1e2 <i2c_master_start+0x88>
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	80 34       	cpi	r24, 0x40	; 64
     1d2:	39 f0       	breq	.+14     	; 0x1e2 <i2c_master_start+0x88>
  {
    *status_p = twst;                                                           // store status
     1d4:	eb 81       	ldd	r30, Y+3	; 0x03
     1d6:	fc 81       	ldd	r31, Y+4	; 0x04
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	80 83       	st	Z, r24
    return 1;                                                                   // ERROR
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	8d 83       	std	Y+5, r24	; 0x05
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <i2c_master_start+0x8a>
  }

  return 0;                                                                     // OK
     1e2:	1d 82       	std	Y+5, r1	; 0x05
     1e4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	cf 91       	pop	r28
     1f2:	df 91       	pop	r29
     1f4:	08 95       	ret

000001f6 <i2c_master_start_wait>:
 *  @param    I2C address
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
i2c_master_start_wait (uint8_t address)
{
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	c6 56       	subi	r28, 0x66	; 102
     200:	d0 40       	sbci	r29, 0x00	; 0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	fe 01       	movw	r30, r28
     20e:	ea 59       	subi	r30, 0x9A	; 154
     210:	ff 4f       	sbci	r31, 0xFF	; 255
     212:	80 83       	st	Z, r24
  uint8_t   twst;

  while (1)
  {
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);                                 // send START condition
     214:	e6 e5       	ldi	r30, 0x56	; 86
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	84 ea       	ldi	r24, 0xA4	; 164
     21a:	80 83       	st	Z, r24
    WAIT_UNTIL_TRANSMISSION_COMPLETED;                                          // wait until transmission completed
     21c:	e6 e5       	ldi	r30, 0x56	; 86
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	88 23       	and	r24, r24
     224:	dc f7       	brge	.-10     	; 0x21c <i2c_master_start_wait+0x26>
    twst = TW_STATUS & 0xF8;                                                    // check value of TWI Status Register. Mask prescaler bits.
     226:	e1 e2       	ldi	r30, 0x21	; 33
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	88 7f       	andi	r24, 0xF8	; 248
     22e:	89 83       	std	Y+1, r24	; 0x01

    char s[100];

    if ((twst != TW_START) && (twst != TW_REP_START))
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	19 f0       	breq	.+6      	; 0x23c <i2c_master_start_wait+0x46>
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	80 31       	cpi	r24, 0x10	; 16
     23a:	61 f7       	brne	.-40     	; 0x214 <i2c_master_start_wait+0x1e>
    {
      continue;
    }

    TWDR = address;                                                             // send device address
     23c:	a3 e2       	ldi	r26, 0x23	; 35
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	fe 01       	movw	r30, r28
     242:	ea 59       	subi	r30, 0x9A	; 154
     244:	ff 4f       	sbci	r31, 0xFF	; 255
     246:	80 81       	ld	r24, Z
     248:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);
     24a:	e6 e5       	ldi	r30, 0x56	; 86
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	84 e8       	ldi	r24, 0x84	; 132
     250:	80 83       	st	Z, r24
    WAIT_UNTIL_TRANSMISSION_COMPLETED;                                          // wail until transmission completed
     252:	e6 e5       	ldi	r30, 0x56	; 86
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	88 23       	and	r24, r24
     25a:	dc f7       	brge	.-10     	; 0x252 <i2c_master_start_wait+0x5c>
    twst = TW_STATUS & 0xF8;                                                    // check value of TWI Status Register. Mask prescaler bits.
     25c:	e1 e2       	ldi	r30, 0x21	; 33
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	88 7f       	andi	r24, 0xF8	; 248
     264:	89 83       	std	Y+1, r24	; 0x01

    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	80 32       	cpi	r24, 0x20	; 32
     26a:	19 f0       	breq	.+6      	; 0x272 <i2c_master_start_wait+0x7c>
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	88 35       	cpi	r24, 0x58	; 88
     270:	71 f4       	brne	.+28     	; 0x28e <i2c_master_start_wait+0x98>
    {
      TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);                               // device busy, send stop condition to terminate write operation
     272:	e6 e5       	ldi	r30, 0x56	; 86
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	84 e9       	ldi	r24, 0x94	; 148
     278:	80 83       	st	Z, r24
      WAIT_UNTIL_STOP_CONDITION_EXECUTED;                                       // wait until stop condition is executed and bus released
     27a:	e6 e5       	ldi	r30, 0x56	; 86
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	80 71       	andi	r24, 0x10	; 16
     286:	90 70       	andi	r25, 0x00	; 0
     288:	00 97       	sbiw	r24, 0x00	; 0
     28a:	b9 f7       	brne	.-18     	; 0x27a <i2c_master_start_wait+0x84>
     28c:	c3 cf       	rjmp	.-122    	; 0x214 <i2c_master_start_wait+0x1e>
      continue;
    }

    // if (twst != TW_MT_SLA_ACK) return 1;
    break;
   }
     28e:	ca 59       	subi	r28, 0x9A	; 154
     290:	df 4f       	sbci	r29, 0xFF	; 255
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	08 95       	ret

000002a2 <i2c_master_rep_start>:
 *  @return    1 = failed to access device, 0 = device accessible
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_rep_start (uint8_t address, uint8_t * status_p)
{
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <i2c_master_rep_start+0x6>
     2a8:	0f 92       	push	r0
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	7b 83       	std	Y+3, r23	; 0x03
     2b2:	6a 83       	std	Y+2, r22	; 0x02
  return i2c_master_start (address, status_p);
     2b4:	2a 81       	ldd	r18, Y+2	; 0x02
     2b6:	3b 81       	ldd	r19, Y+3	; 0x03
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	b9 01       	movw	r22, r18
     2bc:	0e 94 ad 00 	call	0x15a	; 0x15a <i2c_master_start>
}
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	cf 91       	pop	r28
     2c8:	df 91       	pop	r29
     2ca:	08 95       	ret

000002cc <i2c_master_stop>:
 *  @details  Terminates the data transfer and releases the I2C bus
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
i2c_master_stop (void)
{
     2cc:	df 93       	push	r29
     2ce:	cf 93       	push	r28
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);                                   // send stop condition
     2d4:	e6 e5       	ldi	r30, 0x56	; 86
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	84 e9       	ldi	r24, 0x94	; 148
     2da:	80 83       	st	Z, r24
  WAIT_UNTIL_STOP_CONDITION_EXECUTED;                                           // wait until stop condition is executed and bus released
     2dc:	e6 e5       	ldi	r30, 0x56	; 86
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	88 2f       	mov	r24, r24
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	80 71       	andi	r24, 0x10	; 16
     2e8:	90 70       	andi	r25, 0x00	; 0
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	b9 f7       	brne	.-18     	; 0x2dc <i2c_master_stop+0x10>
}
     2ee:	cf 91       	pop	r28
     2f0:	df 91       	pop	r29
     2f2:	08 95       	ret

000002f4 <i2c_master_write>:
 *  @return    0 write successful, 1 write failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_write (uint8_t data, uint8_t * status_p)
{
     2f4:	df 93       	push	r29
     2f6:	cf 93       	push	r28
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <i2c_master_write+0x6>
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <i2c_master_write+0x8>
     2fc:	0f 92       	push	r0
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
     302:	8a 83       	std	Y+2, r24	; 0x02
     304:	7c 83       	std	Y+4, r23	; 0x04
     306:	6b 83       	std	Y+3, r22	; 0x03
  uint8_t   twst;

  TWDR = data;                                                                  // send data to the previously addressed device
     308:	e3 e2       	ldi	r30, 0x23	; 35
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	8a 81       	ldd	r24, Y+2	; 0x02
     30e:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     310:	e6 e5       	ldi	r30, 0x56	; 86
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	84 e8       	ldi	r24, 0x84	; 132
     316:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;                                            // wait until transmission completed
     318:	e6 e5       	ldi	r30, 0x56	; 86
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	88 23       	and	r24, r24
     320:	dc f7       	brge	.-10     	; 0x318 <i2c_master_write+0x24>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits
     322:	e1 e2       	ldi	r30, 0x21	; 33
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	88 7f       	andi	r24, 0xF8	; 248
     32a:	89 83       	std	Y+1, r24	; 0x01

  if (twst != TW_MT_DATA_ACK)
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	88 32       	cpi	r24, 0x28	; 40
     330:	39 f0       	breq	.+14     	; 0x340 <i2c_master_write+0x4c>
  {
    *status_p = twst;
     332:	eb 81       	ldd	r30, Y+3	; 0x03
     334:	fc 81       	ldd	r31, Y+4	; 0x04
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	80 83       	st	Z, r24
    return 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	8d 83       	std	Y+5, r24	; 0x05
     33e:	01 c0       	rjmp	.+2      	; 0x342 <i2c_master_write+0x4e>
  }

  return 0;
     340:	1d 82       	std	Y+5, r1	; 0x05
     342:	8d 81       	ldd	r24, Y+5	; 0x05
}
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	cf 91       	pop	r28
     350:	df 91       	pop	r29
     352:	08 95       	ret

00000354 <i2c_master_read_ack>:
 *  @return    byte read
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_read_ack (void)
{
     354:	df 93       	push	r29
     356:	cf 93       	push	r28
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     35c:	e6 e5       	ldi	r30, 0x56	; 86
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	84 ec       	ldi	r24, 0xC4	; 196
     362:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;
     364:	e6 e5       	ldi	r30, 0x56	; 86
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	88 23       	and	r24, r24
     36c:	dc f7       	brge	.-10     	; 0x364 <i2c_master_read_ack+0x10>
  return TWDR;
     36e:	e3 e2       	ldi	r30, 0x23	; 35
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
}/* i2c_master_readAck */
     374:	cf 91       	pop	r28
     376:	df 91       	pop	r29
     378:	08 95       	ret

0000037a <i2c_master_read_nak>:
 *  @return    byte read
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_read_nak (void)
{
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN);
     382:	e6 e5       	ldi	r30, 0x56	; 86
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	84 e8       	ldi	r24, 0x84	; 132
     388:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;
     38a:	e6 e5       	ldi	r30, 0x56	; 86
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	88 23       	and	r24, r24
     392:	dc f7       	brge	.-10     	; 0x38a <i2c_master_read_nak+0x10>
  return TWDR;
     394:	e3 e2       	ldi	r30, 0x23	; 35
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
}
     39a:	cf 91       	pop	r28
     39c:	df 91       	pop	r29
     39e:	08 95       	ret

000003a0 <save_byte>:
static uint8_t rtc_initialized = 0;
static uint8_t i2c_rtc_status;

void
save_byte(uint8_t var, uint8_t value)
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <save_byte+0x6>
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	6a 83       	std	Y+2, r22	; 0x02
  i2c_rtc_sram_write(0x10 + var, &value, 1);
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	80 5f       	subi	r24, 0xF0	; 240
     3b2:	9e 01       	movw	r18, r28
     3b4:	2e 5f       	subi	r18, 0xFE	; 254
     3b6:	3f 4f       	sbci	r19, 0xFF	; 255
     3b8:	b9 01       	movw	r22, r18
     3ba:	41 e0       	ldi	r20, 0x01	; 1
     3bc:	0e 94 c2 07 	call	0xf84	; 0xf84 <i2c_rtc_sram_write>
}
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
     3c8:	08 95       	ret

000003ca <read_byte>:

void
read_byte(uint8_t var, uint8_t *value)
{
     3ca:	df 93       	push	r29
     3cc:	cf 93       	push	r28
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <read_byte+0x6>
     3d0:	0f 92       	push	r0
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	7b 83       	std	Y+3, r23	; 0x03
     3da:	6a 83       	std	Y+2, r22	; 0x02
  i2c_rtc_sram_read(0x10 + var, value, 1);
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	80 5f       	subi	r24, 0xF0	; 240
     3e0:	2a 81       	ldd	r18, Y+2	; 0x02
     3e2:	3b 81       	ldd	r19, Y+3	; 0x03
     3e4:	b9 01       	movw	r22, r18
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	0e 94 21 08 	call	0x1042	; 0x1042 <i2c_rtc_sram_read>
}
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	cf 91       	pop	r28
     3f4:	df 91       	pop	r29
     3f6:	08 95       	ret

000003f8 <set_offset>:

int8_t rtc_offset = 0;

void
set_offset(uint8_t newoffset)
{
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	c5 56       	subi	r28, 0x65	; 101
     402:	d0 40       	sbci	r29, 0x00	; 0
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	fe 01       	movw	r30, r28
     410:	eb 59       	subi	r30, 0x9B	; 155
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	80 83       	st	Z, r24
  if (newoffset != rtc_offset)
     416:	fe 01       	movw	r30, r28
     418:	eb 59       	subi	r30, 0x9B	; 155
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	80 81       	ld	r24, Z
     41e:	28 2f       	mov	r18, r24
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	80 91 a5 04 	lds	r24, 0x04A5
     426:	99 27       	eor	r25, r25
     428:	87 fd       	sbrc	r24, 7
     42a:	90 95       	com	r25
     42c:	28 17       	cp	r18, r24
     42e:	39 07       	cpc	r19, r25
     430:	89 f1       	breq	.+98     	; 0x494 <set_offset+0x9c>
  {
    rtc_offset = newoffset;
     432:	fe 01       	movw	r30, r28
     434:	eb 59       	subi	r30, 0x9B	; 155
     436:	ff 4f       	sbci	r31, 0xFF	; 255
     438:	80 81       	ld	r24, Z
     43a:	80 93 a5 04 	sts	0x04A5, r24
    save_byte(cRTCOffset, rtc_offset);
     43e:	80 91 a5 04 	lds	r24, 0x04A5
     442:	98 2f       	mov	r25, r24
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	69 2f       	mov	r22, r25
     448:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <save_byte>
    char s[100];
    sprintf(s, "rtc offset now: %d\r\n", rtc_offset);
     44c:	80 91 a5 04 	lds	r24, 0x04A5
     450:	28 2f       	mov	r18, r24
     452:	33 27       	eor	r19, r19
     454:	27 fd       	sbrc	r18, 7
     456:	30 95       	com	r19
     458:	00 d0       	rcall	.+0      	; 0x45a <set_offset+0x62>
     45a:	00 d0       	rcall	.+0      	; 0x45c <set_offset+0x64>
     45c:	00 d0       	rcall	.+0      	; 0x45e <set_offset+0x66>
     45e:	ed b7       	in	r30, 0x3d	; 61
     460:	fe b7       	in	r31, 0x3e	; 62
     462:	31 96       	adiw	r30, 0x01	; 1
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	91 83       	std	Z+1, r25	; 0x01
     46a:	80 83       	st	Z, r24
     46c:	80 e6       	ldi	r24, 0x60	; 96
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	93 83       	std	Z+3, r25	; 0x03
     472:	82 83       	std	Z+2, r24	; 0x02
     474:	35 83       	std	Z+5, r19	; 0x05
     476:	24 83       	std	Z+4, r18	; 0x04
     478:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
     47c:	8d b7       	in	r24, 0x3d	; 61
     47e:	9e b7       	in	r25, 0x3e	; 62
     480:	06 96       	adiw	r24, 0x06	; 6
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	9e bf       	out	0x3e, r25	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	8d bf       	out	0x3d, r24	; 61
    uartPuts(s);
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  }
}
     494:	cb 59       	subi	r28, 0x9B	; 155
     496:	df 4f       	sbci	r29, 0xFF	; 255
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	08 95       	ret

000004a8 <bcdtoi>:
  return y;
}

uint8_t
bcdtoi(uint8_t bcd)
{
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <bcdtoi+0x6>
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t i = 10 * (bcd >> 4) + (bcd & 0x0F);
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	82 95       	swap	r24
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	9c 01       	movw	r18, r24
     4c0:	22 0f       	add	r18, r18
     4c2:	33 1f       	adc	r19, r19
     4c4:	c9 01       	movw	r24, r18
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	82 0f       	add	r24, r18
     4d0:	93 1f       	adc	r25, r19
     4d2:	98 2f       	mov	r25, r24
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	8f 70       	andi	r24, 0x0F	; 15
     4d8:	89 0f       	add	r24, r25
     4da:	89 83       	std	Y+1, r24	; 0x01
  return (i);
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
}
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	cf 91       	pop	r28
     4e4:	df 91       	pop	r29
     4e6:	08 95       	ret

000004e8 <itobcd>:

uint8_t
itobcd(uint8_t i)
{
     4e8:	df 93       	push	r29
     4ea:	cf 93       	push	r28
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <itobcd+0x6>
     4ee:	0f 92       	push	r0
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	8b 83       	std	Y+3, r24	; 0x03
  bcd = (i / 10) << 4;
  bcd |= (i % 10);
#else
  uint8_t r;

  bcd = div10(i, &r) << 4;
     4f6:	9e 01       	movw	r18, r28
     4f8:	2e 5f       	subi	r18, 0xFE	; 254
     4fa:	3f 4f       	sbci	r19, 0xFF	; 255
     4fc:	8b 81       	ldd	r24, Y+3	; 0x03
     4fe:	b9 01       	movw	r22, r18
     500:	0e 94 90 02 	call	0x520	; 0x520 <div10>
     504:	82 95       	swap	r24
     506:	80 7f       	andi	r24, 0xF0	; 240
     508:	89 83       	std	Y+1, r24	; 0x01
  bcd |= r;
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	89 2b       	or	r24, r25
     510:	89 83       	std	Y+1, r24	; 0x01
#endif

  return (bcd);
     512:	89 81       	ldd	r24, Y+1	; 0x01
}
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	cf 91       	pop	r28
     51c:	df 91       	pop	r29
     51e:	08 95       	ret

00000520 <div10>:
#define CTRL_REG_RS0          0x01                                              // rate select RS0
static volatile uint8_t ctrlreg;

static inline uint8_t
div10(uint8_t x, uint8_t* o_remaind)
{
     520:	df 93       	push	r29
     522:	cf 93       	push	r28
     524:	00 d0       	rcall	.+0      	; 0x526 <div10+0x6>
     526:	00 d0       	rcall	.+0      	; 0x528 <div10+0x8>
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	8a 83       	std	Y+2, r24	; 0x02
     52e:	7c 83       	std	Y+4, r23	; 0x04
     530:	6b 83       	std	Y+3, r22	; 0x03
  //    : [input]"d" (x)
  //    : "r1","r0"
  // );
  //*o_remaind = x-(10*y);
  //return y;
  uint8_t y = (((uint16_t) x) * 205) >> 11;
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	28 2f       	mov	r18, r24
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	8d ec       	ldi	r24, 0xCD	; 205
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	ac 01       	movw	r20, r24
     53e:	24 9f       	mul	r18, r20
     540:	c0 01       	movw	r24, r0
     542:	25 9f       	mul	r18, r21
     544:	90 0d       	add	r25, r0
     546:	34 9f       	mul	r19, r20
     548:	90 0d       	add	r25, r0
     54a:	11 24       	eor	r1, r1
     54c:	89 2f       	mov	r24, r25
     54e:	99 27       	eor	r25, r25
     550:	86 95       	lsr	r24
     552:	86 95       	lsr	r24
     554:	86 95       	lsr	r24
     556:	89 83       	std	Y+1, r24	; 0x01
  *o_remaind = x - (y * 10);
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	88 2f       	mov	r24, r24
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	9c 01       	movw	r18, r24
     560:	22 0f       	add	r18, r18
     562:	33 1f       	adc	r19, r19
     564:	c9 01       	movw	r24, r18
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	82 0f       	add	r24, r18
     570:	93 1f       	adc	r25, r19
     572:	90 95       	com	r25
     574:	81 95       	neg	r24
     576:	9f 4f       	sbci	r25, 0xFF	; 255
     578:	98 2f       	mov	r25, r24
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	89 0f       	add	r24, r25
     57e:	eb 81       	ldd	r30, Y+3	; 0x03
     580:	fc 81       	ldd	r31, Y+4	; 0x04
     582:	80 83       	st	Z, r24
  return y;
     584:	89 81       	ldd	r24, Y+1	; 0x01
}
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	cf 91       	pop	r28
     590:	df 91       	pop	r29
     592:	08 95       	ret

00000594 <i2c_rtc_get_status>:
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */

uint8_t
i2c_rtc_get_status(void)
{
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
  return i2c_rtc_status;
     59c:	80 91 a9 04 	lds	r24, 0x04A9
}
     5a0:	cf 91       	pop	r28
     5a2:	df 91       	pop	r29
     5a4:	08 95       	ret

000005a6 <i2c_rtc_write>:
 *  @return    TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_write(const DATETIME * datetime)
{
     5a6:	df 93       	push	r29
     5a8:	cf 93       	push	r28
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	2a 97       	sbiw	r28, 0x0a	; 10
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	9a 87       	std	Y+10, r25	; 0x0a
     5bc:	89 87       	std	Y+9, r24	; 0x09
  uint8_t rtcbuf[7];
  uint8_t rtc = false;
     5be:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
     5c0:	80 91 a6 04 	lds	r24, 0x04A6
     5c4:	88 23       	and	r24, r24
     5c6:	b9 f1       	breq	.+110    	; 0x636 <i2c_rtc_write+0x90>
  {
    rtcbuf[0] = itobcd(datetime->ss); // seconds    00-59
     5c8:	e9 85       	ldd	r30, Y+9	; 0x09
     5ca:	fa 85       	ldd	r31, Y+10	; 0x0a
     5cc:	85 81       	ldd	r24, Z+5	; 0x05
     5ce:	0e 94 74 02 	call	0x4e8	; 0x4e8 <itobcd>
     5d2:	8a 83       	std	Y+2, r24	; 0x02
    rtcbuf[1] = itobcd(datetime->mm); // minutes    00-59
     5d4:	e9 85       	ldd	r30, Y+9	; 0x09
     5d6:	fa 85       	ldd	r31, Y+10	; 0x0a
     5d8:	84 81       	ldd	r24, Z+4	; 0x04
     5da:	0e 94 74 02 	call	0x4e8	; 0x4e8 <itobcd>
     5de:	8b 83       	std	Y+3, r24	; 0x03
    rtcbuf[2] = itobcd(datetime->hh); // hours    00-23
     5e0:	e9 85       	ldd	r30, Y+9	; 0x09
     5e2:	fa 85       	ldd	r31, Y+10	; 0x0a
     5e4:	83 81       	ldd	r24, Z+3	; 0x03
     5e6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <itobcd>
     5ea:	8c 83       	std	Y+4, r24	; 0x04
    rtcbuf[3] = itobcd(datetime->wd) + 1; // weekday     1-7
     5ec:	e9 85       	ldd	r30, Y+9	; 0x09
     5ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     5f0:	86 81       	ldd	r24, Z+6	; 0x06
     5f2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <itobcd>
     5f6:	8f 5f       	subi	r24, 0xFF	; 255
     5f8:	8d 83       	std	Y+5, r24	; 0x05
    rtcbuf[4] = itobcd(datetime->DD); // day of month  00-31
     5fa:	e9 85       	ldd	r30, Y+9	; 0x09
     5fc:	fa 85       	ldd	r31, Y+10	; 0x0a
     5fe:	82 81       	ldd	r24, Z+2	; 0x02
     600:	0e 94 74 02 	call	0x4e8	; 0x4e8 <itobcd>
     604:	8e 83       	std	Y+6, r24	; 0x06
    rtcbuf[5] = itobcd(datetime->MM); // month    00-12
     606:	e9 85       	ldd	r30, Y+9	; 0x09
     608:	fa 85       	ldd	r31, Y+10	; 0x0a
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <itobcd>
     610:	8f 83       	std	Y+7, r24	; 0x07
    rtcbuf[6] = itobcd(datetime->YY); // year      00-99
     612:	e9 85       	ldd	r30, Y+9	; 0x09
     614:	fa 85       	ldd	r31, Y+10	; 0x0a
     616:	80 81       	ld	r24, Z
     618:	0e 94 74 02 	call	0x4e8	; 0x4e8 <itobcd>
     61c:	88 87       	std	Y+8, r24	; 0x08

    if (i2c_rtc_sram_write(0x00, rtcbuf, 7))
     61e:	9e 01       	movw	r18, r28
     620:	2e 5f       	subi	r18, 0xFE	; 254
     622:	3f 4f       	sbci	r19, 0xFF	; 255
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	b9 01       	movw	r22, r18
     628:	47 e0       	ldi	r20, 0x07	; 7
     62a:	0e 94 c2 07 	call	0xf84	; 0xf84 <i2c_rtc_sram_write>
     62e:	88 23       	and	r24, r24
     630:	11 f0       	breq	.+4      	; 0x636 <i2c_rtc_write+0x90>
    {
      rtc = true;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	89 83       	std	Y+1, r24	; 0x01
    }
  }
  return rtc;
     636:	89 81       	ldd	r24, Y+1	; 0x01
}
     638:	2a 96       	adiw	r28, 0x0a	; 10
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	08 95       	ret

0000064a <add_year>:

void
add_year(DATETIME * datetime)
{
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	00 d0       	rcall	.+0      	; 0x650 <add_year+0x6>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01
  datetime->YY++;
     658:	e9 81       	ldd	r30, Y+1	; 0x01
     65a:	fa 81       	ldd	r31, Y+2	; 0x02
     65c:	80 81       	ld	r24, Z
     65e:	8f 5f       	subi	r24, 0xFF	; 255
     660:	e9 81       	ldd	r30, Y+1	; 0x01
     662:	fa 81       	ldd	r31, Y+2	; 0x02
     664:	80 83       	st	Z, r24
}
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	cf 91       	pop	r28
     66c:	df 91       	pop	r29
     66e:	08 95       	ret

00000670 <sub_year>:

void
sub_year(DATETIME * datetime)
{
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	00 d0       	rcall	.+0      	; 0x676 <sub_year+0x6>
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	9a 83       	std	Y+2, r25	; 0x02
     67c:	89 83       	std	Y+1, r24	; 0x01
  datetime->YY--;
     67e:	e9 81       	ldd	r30, Y+1	; 0x01
     680:	fa 81       	ldd	r31, Y+2	; 0x02
     682:	80 81       	ld	r24, Z
     684:	81 50       	subi	r24, 0x01	; 1
     686:	e9 81       	ldd	r30, Y+1	; 0x01
     688:	fa 81       	ldd	r31, Y+2	; 0x02
     68a:	80 83       	st	Z, r24
}
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	cf 91       	pop	r28
     692:	df 91       	pop	r29
     694:	08 95       	ret

00000696 <add_month>:

void
add_month(DATETIME * datetime)
{
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	00 d0       	rcall	.+0      	; 0x69c <add_month+0x6>
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	9a 83       	std	Y+2, r25	; 0x02
     6a2:	89 83       	std	Y+1, r24	; 0x01
  datetime->MM++;
     6a4:	e9 81       	ldd	r30, Y+1	; 0x01
     6a6:	fa 81       	ldd	r31, Y+2	; 0x02
     6a8:	81 81       	ldd	r24, Z+1	; 0x01
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	e9 81       	ldd	r30, Y+1	; 0x01
     6ae:	fa 81       	ldd	r31, Y+2	; 0x02
     6b0:	81 83       	std	Z+1, r24	; 0x01
  if (datetime->MM > 12)
     6b2:	e9 81       	ldd	r30, Y+1	; 0x01
     6b4:	fa 81       	ldd	r31, Y+2	; 0x02
     6b6:	81 81       	ldd	r24, Z+1	; 0x01
     6b8:	8d 30       	cpi	r24, 0x0D	; 13
     6ba:	40 f0       	brcs	.+16     	; 0x6cc <add_month+0x36>
  {
    datetime->MM = 1;
     6bc:	e9 81       	ldd	r30, Y+1	; 0x01
     6be:	fa 81       	ldd	r31, Y+2	; 0x02
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	81 83       	std	Z+1, r24	; 0x01
    add_year(datetime);
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	0e 94 25 03 	call	0x64a	; 0x64a <add_year>
  }
}
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	08 95       	ret

000006d6 <sub_month>:

void
sub_month(DATETIME * datetime)
{
     6d6:	df 93       	push	r29
     6d8:	cf 93       	push	r28
     6da:	00 d0       	rcall	.+0      	; 0x6dc <sub_month+0x6>
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	9a 83       	std	Y+2, r25	; 0x02
     6e2:	89 83       	std	Y+1, r24	; 0x01
  datetime->MM--;
     6e4:	e9 81       	ldd	r30, Y+1	; 0x01
     6e6:	fa 81       	ldd	r31, Y+2	; 0x02
     6e8:	81 81       	ldd	r24, Z+1	; 0x01
     6ea:	81 50       	subi	r24, 0x01	; 1
     6ec:	e9 81       	ldd	r30, Y+1	; 0x01
     6ee:	fa 81       	ldd	r31, Y+2	; 0x02
     6f0:	81 83       	std	Z+1, r24	; 0x01
  if (datetime->MM < 1)
     6f2:	e9 81       	ldd	r30, Y+1	; 0x01
     6f4:	fa 81       	ldd	r31, Y+2	; 0x02
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	88 23       	and	r24, r24
     6fa:	41 f4       	brne	.+16     	; 0x70c <sub_month+0x36>
  {
    datetime->MM = 12;
     6fc:	e9 81       	ldd	r30, Y+1	; 0x01
     6fe:	fa 81       	ldd	r31, Y+2	; 0x02
     700:	8c e0       	ldi	r24, 0x0C	; 12
     702:	81 83       	std	Z+1, r24	; 0x01
    sub_year(datetime);
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	9a 81       	ldd	r25, Y+2	; 0x02
     708:	0e 94 38 03 	call	0x670	; 0x670 <sub_year>
  }
}
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	cf 91       	pop	r28
     712:	df 91       	pop	r29
     714:	08 95       	ret

00000716 <add_day>:

void
add_day(DATETIME * datetime)
{
     716:	df 93       	push	r29
     718:	cf 93       	push	r28
     71a:	00 d0       	rcall	.+0      	; 0x71c <add_day+0x6>
     71c:	00 d0       	rcall	.+0      	; 0x71e <add_day+0x8>
     71e:	00 d0       	rcall	.+0      	; 0x720 <add_day+0xa>
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	9b 83       	std	Y+3, r25	; 0x03
     726:	8a 83       	std	Y+2, r24	; 0x02
  datetime->DD++;
     728:	ea 81       	ldd	r30, Y+2	; 0x02
     72a:	fb 81       	ldd	r31, Y+3	; 0x03
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	8f 5f       	subi	r24, 0xFF	; 255
     730:	ea 81       	ldd	r30, Y+2	; 0x02
     732:	fb 81       	ldd	r31, Y+3	; 0x03
     734:	82 83       	std	Z+2, r24	; 0x02
  uint8_t days = 31;
     736:	8f e1       	ldi	r24, 0x1F	; 31
     738:	89 83       	std	Y+1, r24	; 0x01
  switch (datetime->MM)
     73a:	ea 81       	ldd	r30, Y+2	; 0x02
     73c:	fb 81       	ldd	r31, Y+3	; 0x03
     73e:	81 81       	ldd	r24, Z+1	; 0x01
     740:	28 2f       	mov	r18, r24
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	3e 83       	std	Y+6, r19	; 0x06
     746:	2d 83       	std	Y+5, r18	; 0x05
     748:	8d 81       	ldd	r24, Y+5	; 0x05
     74a:	9e 81       	ldd	r25, Y+6	; 0x06
     74c:	86 30       	cpi	r24, 0x06	; 6
     74e:	91 05       	cpc	r25, r1
     750:	d1 f0       	breq	.+52     	; 0x786 <add_day+0x70>
     752:	2d 81       	ldd	r18, Y+5	; 0x05
     754:	3e 81       	ldd	r19, Y+6	; 0x06
     756:	27 30       	cpi	r18, 0x07	; 7
     758:	31 05       	cpc	r19, r1
     75a:	5c f4       	brge	.+22     	; 0x772 <add_day+0x5c>
     75c:	8d 81       	ldd	r24, Y+5	; 0x05
     75e:	9e 81       	ldd	r25, Y+6	; 0x06
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	91 05       	cpc	r25, r1
     764:	99 f0       	breq	.+38     	; 0x78c <add_day+0x76>
     766:	2d 81       	ldd	r18, Y+5	; 0x05
     768:	3e 81       	ldd	r19, Y+6	; 0x06
     76a:	24 30       	cpi	r18, 0x04	; 4
     76c:	31 05       	cpc	r19, r1
     76e:	59 f0       	breq	.+22     	; 0x786 <add_day+0x70>
     770:	27 c0       	rjmp	.+78     	; 0x7c0 <add_day+0xaa>
     772:	8d 81       	ldd	r24, Y+5	; 0x05
     774:	9e 81       	ldd	r25, Y+6	; 0x06
     776:	89 30       	cpi	r24, 0x09	; 9
     778:	91 05       	cpc	r25, r1
     77a:	29 f0       	breq	.+10     	; 0x786 <add_day+0x70>
     77c:	2d 81       	ldd	r18, Y+5	; 0x05
     77e:	3e 81       	ldd	r19, Y+6	; 0x06
     780:	2b 30       	cpi	r18, 0x0B	; 11
     782:	31 05       	cpc	r19, r1
     784:	e9 f4       	brne	.+58     	; 0x7c0 <add_day+0xaa>
  {
  case 4:
  case 6:
  case 9:
  case 11:
    days = 30;
     786:	8e e1       	ldi	r24, 0x1E	; 30
     788:	89 83       	std	Y+1, r24	; 0x01
     78a:	1a c0       	rjmp	.+52     	; 0x7c0 <add_day+0xaa>
    break;
  case 2:
    days = ((datetime->YY % 4 == 0) && (!(datetime->YY % 100 == 0))) ? 29 : 28;
     78c:	ea 81       	ldd	r30, Y+2	; 0x02
     78e:	fb 81       	ldd	r31, Y+3	; 0x03
     790:	80 81       	ld	r24, Z
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	83 70       	andi	r24, 0x03	; 3
     798:	90 70       	andi	r25, 0x00	; 0
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	69 f4       	brne	.+26     	; 0x7b8 <add_day+0xa2>
     79e:	ea 81       	ldd	r30, Y+2	; 0x02
     7a0:	fb 81       	ldd	r31, Y+3	; 0x03
     7a2:	80 81       	ld	r24, Z
     7a4:	94 e6       	ldi	r25, 0x64	; 100
     7a6:	69 2f       	mov	r22, r25
     7a8:	0e 94 48 38 	call	0x7090	; 0x7090 <__udivmodqi4>
     7ac:	89 2f       	mov	r24, r25
     7ae:	88 23       	and	r24, r24
     7b0:	19 f0       	breq	.+6      	; 0x7b8 <add_day+0xa2>
     7b2:	3d e1       	ldi	r19, 0x1D	; 29
     7b4:	3c 83       	std	Y+4, r19	; 0x04
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <add_day+0xa6>
     7b8:	8c e1       	ldi	r24, 0x1C	; 28
     7ba:	8c 83       	std	Y+4, r24	; 0x04
     7bc:	9c 81       	ldd	r25, Y+4	; 0x04
     7be:	99 83       	std	Y+1, r25	; 0x01
    break;
  }
  if (datetime->DD > days)
     7c0:	ea 81       	ldd	r30, Y+2	; 0x02
     7c2:	fb 81       	ldd	r31, Y+3	; 0x03
     7c4:	92 81       	ldd	r25, Z+2	; 0x02
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	89 17       	cp	r24, r25
     7ca:	40 f4       	brcc	.+16     	; 0x7dc <add_day+0xc6>
  {
    datetime->DD = 1;
     7cc:	ea 81       	ldd	r30, Y+2	; 0x02
     7ce:	fb 81       	ldd	r31, Y+3	; 0x03
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	82 83       	std	Z+2, r24	; 0x02
    add_month(datetime);
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	9b 81       	ldd	r25, Y+3	; 0x03
     7d8:	0e 94 4b 03 	call	0x696	; 0x696 <add_month>
  }
}
     7dc:	26 96       	adiw	r28, 0x06	; 6
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <sub_day>:

void
sub_day(DATETIME * datetime)
{
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <sub_day+0x6>
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <sub_day+0x8>
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <sub_day+0xa>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	9b 83       	std	Y+3, r25	; 0x03
     7fe:	8a 83       	std	Y+2, r24	; 0x02
  datetime->DD--;
     800:	ea 81       	ldd	r30, Y+2	; 0x02
     802:	fb 81       	ldd	r31, Y+3	; 0x03
     804:	82 81       	ldd	r24, Z+2	; 0x02
     806:	81 50       	subi	r24, 0x01	; 1
     808:	ea 81       	ldd	r30, Y+2	; 0x02
     80a:	fb 81       	ldd	r31, Y+3	; 0x03
     80c:	82 83       	std	Z+2, r24	; 0x02
  uint8_t days = 31;
     80e:	8f e1       	ldi	r24, 0x1F	; 31
     810:	89 83       	std	Y+1, r24	; 0x01
  switch (datetime->MM - 1)
     812:	ea 81       	ldd	r30, Y+2	; 0x02
     814:	fb 81       	ldd	r31, Y+3	; 0x03
     816:	81 81       	ldd	r24, Z+1	; 0x01
     818:	88 2f       	mov	r24, r24
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9c 01       	movw	r18, r24
     81e:	21 50       	subi	r18, 0x01	; 1
     820:	30 40       	sbci	r19, 0x00	; 0
     822:	3e 83       	std	Y+6, r19	; 0x06
     824:	2d 83       	std	Y+5, r18	; 0x05
     826:	8d 81       	ldd	r24, Y+5	; 0x05
     828:	9e 81       	ldd	r25, Y+6	; 0x06
     82a:	86 30       	cpi	r24, 0x06	; 6
     82c:	91 05       	cpc	r25, r1
     82e:	d1 f0       	breq	.+52     	; 0x864 <__stack+0x5>
     830:	2d 81       	ldd	r18, Y+5	; 0x05
     832:	3e 81       	ldd	r19, Y+6	; 0x06
     834:	27 30       	cpi	r18, 0x07	; 7
     836:	31 05       	cpc	r19, r1
     838:	5c f4       	brge	.+22     	; 0x850 <sub_day+0x62>
     83a:	8d 81       	ldd	r24, Y+5	; 0x05
     83c:	9e 81       	ldd	r25, Y+6	; 0x06
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	91 05       	cpc	r25, r1
     842:	99 f0       	breq	.+38     	; 0x86a <__stack+0xb>
     844:	2d 81       	ldd	r18, Y+5	; 0x05
     846:	3e 81       	ldd	r19, Y+6	; 0x06
     848:	24 30       	cpi	r18, 0x04	; 4
     84a:	31 05       	cpc	r19, r1
     84c:	59 f0       	breq	.+22     	; 0x864 <__stack+0x5>
     84e:	27 c0       	rjmp	.+78     	; 0x89e <__stack+0x3f>
     850:	8d 81       	ldd	r24, Y+5	; 0x05
     852:	9e 81       	ldd	r25, Y+6	; 0x06
     854:	89 30       	cpi	r24, 0x09	; 9
     856:	91 05       	cpc	r25, r1
     858:	29 f0       	breq	.+10     	; 0x864 <__stack+0x5>
     85a:	2d 81       	ldd	r18, Y+5	; 0x05
     85c:	3e 81       	ldd	r19, Y+6	; 0x06
     85e:	2b 30       	cpi	r18, 0x0B	; 11
     860:	31 05       	cpc	r19, r1
     862:	e9 f4       	brne	.+58     	; 0x89e <__stack+0x3f>
  {
  case 4:
  case 6:
  case 9:
  case 11:
    days = 30;
     864:	8e e1       	ldi	r24, 0x1E	; 30
     866:	89 83       	std	Y+1, r24	; 0x01
     868:	1a c0       	rjmp	.+52     	; 0x89e <__stack+0x3f>
    break;
  case 2:
    days = ((datetime->YY % 4 == 0) && (!(datetime->YY % 100 == 0))) ? 29 : 28;
     86a:	ea 81       	ldd	r30, Y+2	; 0x02
     86c:	fb 81       	ldd	r31, Y+3	; 0x03
     86e:	80 81       	ld	r24, Z
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	83 70       	andi	r24, 0x03	; 3
     876:	90 70       	andi	r25, 0x00	; 0
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	69 f4       	brne	.+26     	; 0x896 <__stack+0x37>
     87c:	ea 81       	ldd	r30, Y+2	; 0x02
     87e:	fb 81       	ldd	r31, Y+3	; 0x03
     880:	80 81       	ld	r24, Z
     882:	94 e6       	ldi	r25, 0x64	; 100
     884:	69 2f       	mov	r22, r25
     886:	0e 94 48 38 	call	0x7090	; 0x7090 <__udivmodqi4>
     88a:	89 2f       	mov	r24, r25
     88c:	88 23       	and	r24, r24
     88e:	19 f0       	breq	.+6      	; 0x896 <__stack+0x37>
     890:	3d e1       	ldi	r19, 0x1D	; 29
     892:	3c 83       	std	Y+4, r19	; 0x04
     894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
     896:	8c e1       	ldi	r24, 0x1C	; 28
     898:	8c 83       	std	Y+4, r24	; 0x04
     89a:	9c 81       	ldd	r25, Y+4	; 0x04
     89c:	99 83       	std	Y+1, r25	; 0x01
    break;
  }
  if (datetime->DD < 1)
     89e:	ea 81       	ldd	r30, Y+2	; 0x02
     8a0:	fb 81       	ldd	r31, Y+3	; 0x03
     8a2:	82 81       	ldd	r24, Z+2	; 0x02
     8a4:	88 23       	and	r24, r24
     8a6:	41 f4       	brne	.+16     	; 0x8b8 <__stack+0x59>
  {
    datetime->DD = days;
     8a8:	ea 81       	ldd	r30, Y+2	; 0x02
     8aa:	fb 81       	ldd	r31, Y+3	; 0x03
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	82 83       	std	Z+2, r24	; 0x02
    sub_month(datetime);
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	9b 81       	ldd	r25, Y+3	; 0x03
     8b4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <sub_month>
  }
}
     8b8:	26 96       	adiw	r28, 0x06	; 6
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	cf 91       	pop	r28
     8c6:	df 91       	pop	r29
     8c8:	08 95       	ret

000008ca <add_hour>:

void
add_hour(DATETIME * datetime)
{
     8ca:	df 93       	push	r29
     8cc:	cf 93       	push	r28
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <add_hour+0x6>
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
  datetime->hh++;
     8d8:	e9 81       	ldd	r30, Y+1	; 0x01
     8da:	fa 81       	ldd	r31, Y+2	; 0x02
     8dc:	83 81       	ldd	r24, Z+3	; 0x03
     8de:	8f 5f       	subi	r24, 0xFF	; 255
     8e0:	e9 81       	ldd	r30, Y+1	; 0x01
     8e2:	fa 81       	ldd	r31, Y+2	; 0x02
     8e4:	83 83       	std	Z+3, r24	; 0x03
  if (datetime->hh > 23)
     8e6:	e9 81       	ldd	r30, Y+1	; 0x01
     8e8:	fa 81       	ldd	r31, Y+2	; 0x02
     8ea:	83 81       	ldd	r24, Z+3	; 0x03
     8ec:	88 31       	cpi	r24, 0x18	; 24
     8ee:	38 f0       	brcs	.+14     	; 0x8fe <add_hour+0x34>
  {
    datetime->hh = 0;
     8f0:	e9 81       	ldd	r30, Y+1	; 0x01
     8f2:	fa 81       	ldd	r31, Y+2	; 0x02
     8f4:	13 82       	std	Z+3, r1	; 0x03
    add_day(datetime);
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	0e 94 8b 03 	call	0x716	; 0x716 <add_day>
  }
}
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	cf 91       	pop	r28
     904:	df 91       	pop	r29
     906:	08 95       	ret

00000908 <sub_hour>:

void
sub_hour(DATETIME * datetime)
{
     908:	df 93       	push	r29
     90a:	cf 93       	push	r28
     90c:	00 d0       	rcall	.+0      	; 0x90e <sub_hour+0x6>
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	9a 83       	std	Y+2, r25	; 0x02
     914:	89 83       	std	Y+1, r24	; 0x01
  if (datetime->hh < 1)
     916:	e9 81       	ldd	r30, Y+1	; 0x01
     918:	fa 81       	ldd	r31, Y+2	; 0x02
     91a:	83 81       	ldd	r24, Z+3	; 0x03
     91c:	88 23       	and	r24, r24
     91e:	49 f4       	brne	.+18     	; 0x932 <sub_hour+0x2a>
  {
    datetime->hh = 23;
     920:	e9 81       	ldd	r30, Y+1	; 0x01
     922:	fa 81       	ldd	r31, Y+2	; 0x02
     924:	87 e1       	ldi	r24, 0x17	; 23
     926:	83 83       	std	Z+3, r24	; 0x03
    sub_day(datetime);
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <sub_day>
     930:	07 c0       	rjmp	.+14     	; 0x940 <sub_hour+0x38>
  }
  else
  {
    datetime->hh--;
     932:	e9 81       	ldd	r30, Y+1	; 0x01
     934:	fa 81       	ldd	r31, Y+2	; 0x02
     936:	83 81       	ldd	r24, Z+3	; 0x03
     938:	81 50       	subi	r24, 0x01	; 1
     93a:	e9 81       	ldd	r30, Y+1	; 0x01
     93c:	fa 81       	ldd	r31, Y+2	; 0x02
     93e:	83 83       	std	Z+3, r24	; 0x03
  }
}
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	cf 91       	pop	r28
     946:	df 91       	pop	r29
     948:	08 95       	ret

0000094a <add_minute>:

void
add_minute(DATETIME * datetime)
{
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	00 d0       	rcall	.+0      	; 0x950 <add_minute+0x6>
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	9a 83       	std	Y+2, r25	; 0x02
     956:	89 83       	std	Y+1, r24	; 0x01
  datetime->mm++;
     958:	e9 81       	ldd	r30, Y+1	; 0x01
     95a:	fa 81       	ldd	r31, Y+2	; 0x02
     95c:	84 81       	ldd	r24, Z+4	; 0x04
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	e9 81       	ldd	r30, Y+1	; 0x01
     962:	fa 81       	ldd	r31, Y+2	; 0x02
     964:	84 83       	std	Z+4, r24	; 0x04
  if (datetime->mm > 59)
     966:	e9 81       	ldd	r30, Y+1	; 0x01
     968:	fa 81       	ldd	r31, Y+2	; 0x02
     96a:	84 81       	ldd	r24, Z+4	; 0x04
     96c:	8c 33       	cpi	r24, 0x3C	; 60
     96e:	38 f0       	brcs	.+14     	; 0x97e <add_minute+0x34>
  {
    datetime->mm = 0;
     970:	e9 81       	ldd	r30, Y+1	; 0x01
     972:	fa 81       	ldd	r31, Y+2	; 0x02
     974:	14 82       	std	Z+4, r1	; 0x04
    add_hour(datetime);
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	0e 94 65 04 	call	0x8ca	; 0x8ca <add_hour>
  }
}
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	08 95       	ret

00000988 <sub_minute>:

void
sub_minute(DATETIME * datetime)
{
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	00 d0       	rcall	.+0      	; 0x98e <sub_minute+0x6>
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	9a 83       	std	Y+2, r25	; 0x02
     994:	89 83       	std	Y+1, r24	; 0x01
  if (datetime->mm < 1)
     996:	e9 81       	ldd	r30, Y+1	; 0x01
     998:	fa 81       	ldd	r31, Y+2	; 0x02
     99a:	84 81       	ldd	r24, Z+4	; 0x04
     99c:	88 23       	and	r24, r24
     99e:	49 f4       	brne	.+18     	; 0x9b2 <sub_minute+0x2a>
  {
    datetime->mm = 59;
     9a0:	e9 81       	ldd	r30, Y+1	; 0x01
     9a2:	fa 81       	ldd	r31, Y+2	; 0x02
     9a4:	8b e3       	ldi	r24, 0x3B	; 59
     9a6:	84 83       	std	Z+4, r24	; 0x04
    sub_hour(datetime);
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	0e 94 84 04 	call	0x908	; 0x908 <sub_hour>
     9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <sub_minute+0x38>
  }
  else
  {
    datetime->mm--;
     9b2:	e9 81       	ldd	r30, Y+1	; 0x01
     9b4:	fa 81       	ldd	r31, Y+2	; 0x02
     9b6:	84 81       	ldd	r24, Z+4	; 0x04
     9b8:	81 50       	subi	r24, 0x01	; 1
     9ba:	e9 81       	ldd	r30, Y+1	; 0x01
     9bc:	fa 81       	ldd	r31, Y+2	; 0x02
     9be:	84 83       	std	Z+4, r24	; 0x04
  }
}
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	cf 91       	pop	r28
     9c6:	df 91       	pop	r29
     9c8:	08 95       	ret

000009ca <i2c_rtc_read>:
const int afall[] =
{ 1530, 1620, 1700, 1800, 1880, 1970, 1990, 1920, 1820, 1700, 1600, 1530, 1540 };

uint8_t
i2c_rtc_read(DATETIME * datetime, uint8_t bLocal)
{
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
     9d6:	a0 97       	sbiw	r28, 0x20	; 32
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	9f 8f       	std	Y+31, r25	; 0x1f
     9e4:	8e 8f       	std	Y+30, r24	; 0x1e
     9e6:	68 a3       	std	Y+32, r22	; 0x20
  uint8_t rtcbuf[7];
  uint8_t rtc = 0;
     9e8:	1e 8a       	std	Y+22, r1	; 0x16

  if (rtc_initialized)
     9ea:	80 91 a6 04 	lds	r24, 0x04A6
     9ee:	88 23       	and	r24, r24
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <i2c_rtc_read+0x2a>
     9f2:	bc c2       	rjmp	.+1400   	; 0xf6c <i2c_rtc_read+0x5a2>
  {
    if (i2c_rtc_sram_read(0x00, rtcbuf, 7))
     9f4:	9e 01       	movw	r18, r28
     9f6:	29 5e       	subi	r18, 0xE9	; 233
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	b9 01       	movw	r22, r18
     9fe:	47 e0       	ldi	r20, 0x07	; 7
     a00:	0e 94 21 08 	call	0x1042	; 0x1042 <i2c_rtc_sram_read>
     a04:	88 23       	and	r24, r24
     a06:	09 f4       	brne	.+2      	; 0xa0a <i2c_rtc_read+0x40>
     a08:	75 c0       	rjmp	.+234    	; 0xaf4 <i2c_rtc_read+0x12a>
    {
      datetime->YY = bcdtoi(rtcbuf[6]); // year
     a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a0c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <bcdtoi>
     a10:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a12:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a14:	80 83       	st	Z, r24
      datetime->MM = bcdtoi(rtcbuf[5]); // month
     a16:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a18:	0e 94 54 02 	call	0x4a8	; 0x4a8 <bcdtoi>
     a1c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a1e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a20:	81 83       	std	Z+1, r24	; 0x01
      datetime->DD = bcdtoi(rtcbuf[4]); // day of month
     a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a24:	0e 94 54 02 	call	0x4a8	; 0x4a8 <bcdtoi>
     a28:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a2a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a2c:	82 83       	std	Z+2, r24	; 0x02
      //       = bcdtoi(rtcbuf[3]) - 1; // weekday 0-6
      datetime->hh = bcdtoi(rtcbuf[2]); // hours
     a2e:	89 8d       	ldd	r24, Y+25	; 0x19
     a30:	0e 94 54 02 	call	0x4a8	; 0x4a8 <bcdtoi>
     a34:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a36:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a38:	83 83       	std	Z+3, r24	; 0x03
      datetime->mm = bcdtoi(rtcbuf[1]); // minutes
     a3a:	88 8d       	ldd	r24, Y+24	; 0x18
     a3c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <bcdtoi>
     a40:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a42:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a44:	84 83       	std	Z+4, r24	; 0x04
      datetime->ss = bcdtoi(rtcbuf[0]); // seconds
     a46:	8f 89       	ldd	r24, Y+23	; 0x17
     a48:	0e 94 54 02 	call	0x4a8	; 0x4a8 <bcdtoi>
     a4c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a4e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a50:	85 83       	std	Z+5, r24	; 0x05

      uint8_t tziffer = datetime->DD % 7;
     a52:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a54:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a56:	82 81       	ldd	r24, Z+2	; 0x02
     a58:	97 e0       	ldi	r25, 0x07	; 7
     a5a:	69 2f       	mov	r22, r25
     a5c:	0e 94 48 38 	call	0x7090	; 0x7090 <__udivmodqi4>
     a60:	89 2f       	mov	r24, r25
     a62:	8d 8b       	std	Y+21, r24	; 0x15
      uint8_t mziffer = amziffer[datetime->MM - 1];
     a64:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a66:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a68:	81 81       	ldd	r24, Z+1	; 0x01
     a6a:	88 2f       	mov	r24, r24
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	fc 01       	movw	r30, r24
     a72:	eb 58       	subi	r30, 0x8B	; 139
     a74:	ff 4f       	sbci	r31, 0xFF	; 255
     a76:	80 81       	ld	r24, Z
     a78:	8c 8b       	std	Y+20, r24	; 0x14
      uint8_t jziffer = (datetime->YY + (datetime->YY / 4)) % 7;
     a7a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a7c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a7e:	80 81       	ld	r24, Z
     a80:	28 2f       	mov	r18, r24
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a86:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a88:	80 81       	ld	r24, Z
     a8a:	86 95       	lsr	r24
     a8c:	86 95       	lsr	r24
     a8e:	88 2f       	mov	r24, r24
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	82 0f       	add	r24, r18
     a94:	93 1f       	adc	r25, r19
     a96:	27 e0       	ldi	r18, 0x07	; 7
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	b9 01       	movw	r22, r18
     a9c:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     aa0:	8b 8b       	std	Y+19, r24	; 0x13
      if (datetime->YY % 4 == 0 && datetime->MM < 3)
     aa2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     aa4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     aa6:	80 81       	ld	r24, Z
     aa8:	88 2f       	mov	r24, r24
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	83 70       	andi	r24, 0x03	; 3
     aae:	90 70       	andi	r25, 0x00	; 0
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	41 f4       	brne	.+16     	; 0xac4 <i2c_rtc_read+0xfa>
     ab4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ab6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ab8:	81 81       	ldd	r24, Z+1	; 0x01
     aba:	83 30       	cpi	r24, 0x03	; 3
     abc:	18 f4       	brcc	.+6      	; 0xac4 <i2c_rtc_read+0xfa>
      {
        jziffer += 6;
     abe:	8b 89       	ldd	r24, Y+19	; 0x13
     ac0:	8a 5f       	subi	r24, 0xFA	; 250
     ac2:	8b 8b       	std	Y+19, r24	; 0x13
      }
      datetime->wd = (tziffer + mziffer + jziffer + 6) % 7;
     ac4:	8d 89       	ldd	r24, Y+21	; 0x15
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	8c 89       	ldd	r24, Y+20	; 0x14
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	28 0f       	add	r18, r24
     ad2:	39 1f       	adc	r19, r25
     ad4:	8b 89       	ldd	r24, Y+19	; 0x13
     ad6:	88 2f       	mov	r24, r24
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	82 0f       	add	r24, r18
     adc:	93 1f       	adc	r25, r19
     ade:	06 96       	adiw	r24, 0x06	; 6
     ae0:	27 e0       	ldi	r18, 0x07	; 7
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	b9 01       	movw	r22, r18
     ae6:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     aea:	ee 8d       	ldd	r30, Y+30	; 0x1e
     aec:	ff 8d       	ldd	r31, Y+31	; 0x1f
     aee:	86 83       	std	Z+6, r24	; 0x06

      rtc = 1;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8e 8b       	std	Y+22, r24	; 0x16
    }

    if (bLocal != 0)
     af4:	88 a1       	ldd	r24, Y+32	; 0x20
     af6:	88 23       	and	r24, r24
     af8:	09 f4       	brne	.+2      	; 0xafc <i2c_rtc_read+0x132>
     afa:	38 c2       	rjmp	.+1136   	; 0xf6c <i2c_rtc_read+0x5a2>
    {
      int riseduration = 100;
     afc:	84 e6       	ldi	r24, 0x64	; 100
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	9a 8b       	std	Y+18, r25	; 0x12
     b02:	89 8b       	std	Y+17, r24	; 0x11

      int mrise = arise[(int) datetime->MM];
     b04:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b06:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b08:	81 81       	ldd	r24, Z+1	; 0x01
     b0a:	88 2f       	mov	r24, r24
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	fc 01       	movw	r30, r24
     b14:	ef 57       	subi	r30, 0x7F	; 127
     b16:	ff 4f       	sbci	r31, 0xFF	; 255
     b18:	80 81       	ld	r24, Z
     b1a:	91 81       	ldd	r25, Z+1	; 0x01
     b1c:	98 8b       	std	Y+16, r25	; 0x10
     b1e:	8f 87       	std	Y+15, r24	; 0x0f
      int mfall = afall[(int) datetime->MM];
     b20:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b22:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b24:	81 81       	ldd	r24, Z+1	; 0x01
     b26:	88 2f       	mov	r24, r24
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	fc 01       	movw	r30, r24
     b30:	e5 56       	subi	r30, 0x65	; 101
     b32:	ff 4f       	sbci	r31, 0xFF	; 255
     b34:	80 81       	ld	r24, Z
     b36:	91 81       	ldd	r25, Z+1	; 0x01
     b38:	9e 87       	std	Y+14, r25	; 0x0e
     b3a:	8d 87       	std	Y+13, r24	; 0x0d

      int nmrise = arise[datetime->MM + 1];
     b3c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b3e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b40:	81 81       	ldd	r24, Z+1	; 0x01
     b42:	88 2f       	mov	r24, r24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	fc 01       	movw	r30, r24
     b4e:	ef 57       	subi	r30, 0x7F	; 127
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	80 81       	ld	r24, Z
     b54:	91 81       	ldd	r25, Z+1	; 0x01
     b56:	9c 87       	std	Y+12, r25	; 0x0c
     b58:	8b 87       	std	Y+11, r24	; 0x0b
      int nmfall = afall[datetime->MM + 1];
     b5a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b5c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b5e:	81 81       	ldd	r24, Z+1	; 0x01
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	fc 01       	movw	r30, r24
     b6c:	e5 56       	subi	r30, 0x65	; 101
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	80 81       	ld	r24, Z
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	9a 87       	std	Y+10, r25	; 0x0a
     b76:	89 87       	std	Y+9, r24	; 0x09

      int rise = mrise + (((nmrise - mrise) * datetime->DD) / 31);
     b78:	2b 85       	ldd	r18, Y+11	; 0x0b
     b7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b7e:	98 89       	ldd	r25, Y+16	; 0x10
     b80:	28 1b       	sub	r18, r24
     b82:	39 0b       	sbc	r19, r25
     b84:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b86:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	88 2f       	mov	r24, r24
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	ac 01       	movw	r20, r24
     b90:	24 9f       	mul	r18, r20
     b92:	c0 01       	movw	r24, r0
     b94:	25 9f       	mul	r18, r21
     b96:	90 0d       	add	r25, r0
     b98:	34 9f       	mul	r19, r20
     b9a:	90 0d       	add	r25, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	2f e1       	ldi	r18, 0x1F	; 31
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	b9 01       	movw	r22, r18
     ba4:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     ba8:	cb 01       	movw	r24, r22
     baa:	9c 01       	movw	r18, r24
     bac:	8f 85       	ldd	r24, Y+15	; 0x0f
     bae:	98 89       	ldd	r25, Y+16	; 0x10
     bb0:	82 0f       	add	r24, r18
     bb2:	93 1f       	adc	r25, r19
     bb4:	98 87       	std	Y+8, r25	; 0x08
     bb6:	8f 83       	std	Y+7, r24	; 0x07
      int fall = mfall + (((nmfall - mfall) * datetime->DD) / 31);
     bb8:	29 85       	ldd	r18, Y+9	; 0x09
     bba:	3a 85       	ldd	r19, Y+10	; 0x0a
     bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc0:	28 1b       	sub	r18, r24
     bc2:	39 0b       	sbc	r19, r25
     bc4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     bc6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	ac 01       	movw	r20, r24
     bd0:	24 9f       	mul	r18, r20
     bd2:	c0 01       	movw	r24, r0
     bd4:	25 9f       	mul	r18, r21
     bd6:	90 0d       	add	r25, r0
     bd8:	34 9f       	mul	r19, r20
     bda:	90 0d       	add	r25, r0
     bdc:	11 24       	eor	r1, r1
     bde:	2f e1       	ldi	r18, 0x1F	; 31
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	b9 01       	movw	r22, r18
     be4:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     be8:	cb 01       	movw	r24, r22
     bea:	9c 01       	movw	r18, r24
     bec:	8d 85       	ldd	r24, Y+13	; 0x0d
     bee:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	9e 83       	std	Y+6, r25	; 0x06
     bf6:	8d 83       	std	Y+5, r24	; 0x05

      datetime->sunrisehh = rise / 100;
     bf8:	8f 81       	ldd	r24, Y+7	; 0x07
     bfa:	98 85       	ldd	r25, Y+8	; 0x08
     bfc:	24 e6       	ldi	r18, 0x64	; 100
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	b9 01       	movw	r22, r18
     c02:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     c06:	cb 01       	movw	r24, r22
     c08:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c0a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c0c:	81 87       	std	Z+9, r24	; 0x09
      datetime->sunfallhh = fall / 100;
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	9e 81       	ldd	r25, Y+6	; 0x06
     c12:	24 e6       	ldi	r18, 0x64	; 100
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	b9 01       	movw	r22, r18
     c18:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     c1c:	cb 01       	movw	r24, r22
     c1e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c20:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c22:	83 87       	std	Z+11, r24	; 0x0b
      datetime->sunrisemm = (rise % 100) * 60 / 100;
     c24:	8f 81       	ldd	r24, Y+7	; 0x07
     c26:	98 85       	ldd	r25, Y+8	; 0x08
     c28:	24 e6       	ldi	r18, 0x64	; 100
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b9 01       	movw	r22, r18
     c2e:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     c32:	9c 01       	movw	r18, r24
     c34:	8c e3       	ldi	r24, 0x3C	; 60
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	ac 01       	movw	r20, r24
     c3a:	24 9f       	mul	r18, r20
     c3c:	c0 01       	movw	r24, r0
     c3e:	25 9f       	mul	r18, r21
     c40:	90 0d       	add	r25, r0
     c42:	34 9f       	mul	r19, r20
     c44:	90 0d       	add	r25, r0
     c46:	11 24       	eor	r1, r1
     c48:	24 e6       	ldi	r18, 0x64	; 100
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	b9 01       	movw	r22, r18
     c4e:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     c52:	cb 01       	movw	r24, r22
     c54:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c56:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c58:	82 87       	std	Z+10, r24	; 0x0a
      datetime->sunfallmm = (fall % 100) * 60 / 100;
     c5a:	8d 81       	ldd	r24, Y+5	; 0x05
     c5c:	9e 81       	ldd	r25, Y+6	; 0x06
     c5e:	24 e6       	ldi	r18, 0x64	; 100
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	b9 01       	movw	r22, r18
     c64:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     c68:	9c 01       	movw	r18, r24
     c6a:	8c e3       	ldi	r24, 0x3C	; 60
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	ac 01       	movw	r20, r24
     c70:	24 9f       	mul	r18, r20
     c72:	c0 01       	movw	r24, r0
     c74:	25 9f       	mul	r18, r21
     c76:	90 0d       	add	r25, r0
     c78:	34 9f       	mul	r19, r20
     c7a:	90 0d       	add	r25, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	24 e6       	ldi	r18, 0x64	; 100
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	b9 01       	movw	r22, r18
     c84:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     c88:	cb 01       	movw	r24, r22
     c8a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c8c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c8e:	84 87       	std	Z+12, r24	; 0x0c

      int now = (datetime->hh * 100) + ((datetime->mm * 100) / 60);
     c90:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c92:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c94:	83 81       	ldd	r24, Z+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	84 e6       	ldi	r24, 0x64	; 100
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	28 9f       	mul	r18, r24
     ca0:	80 01       	movw	r16, r0
     ca2:	29 9f       	mul	r18, r25
     ca4:	10 0d       	add	r17, r0
     ca6:	38 9f       	mul	r19, r24
     ca8:	10 0d       	add	r17, r0
     caa:	11 24       	eor	r1, r1
     cac:	ee 8d       	ldd	r30, Y+30	; 0x1e
     cae:	ff 8d       	ldd	r31, Y+31	; 0x1f
     cb0:	84 81       	ldd	r24, Z+4	; 0x04
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	84 e6       	ldi	r24, 0x64	; 100
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	ac 01       	movw	r20, r24
     cbc:	24 9f       	mul	r18, r20
     cbe:	c0 01       	movw	r24, r0
     cc0:	25 9f       	mul	r18, r21
     cc2:	90 0d       	add	r25, r0
     cc4:	34 9f       	mul	r19, r20
     cc6:	90 0d       	add	r25, r0
     cc8:	11 24       	eor	r1, r1
     cca:	2c e3       	ldi	r18, 0x3C	; 60
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	b9 01       	movw	r22, r18
     cd0:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     cd4:	cb 01       	movw	r24, r22
     cd6:	80 0f       	add	r24, r16
     cd8:	91 1f       	adc	r25, r17
     cda:	9c 83       	std	Y+4, r25	; 0x04
     cdc:	8b 83       	std	Y+3, r24	; 0x03

      if (now < rise)
     cde:	2b 81       	ldd	r18, Y+3	; 0x03
     ce0:	3c 81       	ldd	r19, Y+4	; 0x04
     ce2:	8f 81       	ldd	r24, Y+7	; 0x07
     ce4:	98 85       	ldd	r25, Y+8	; 0x08
     ce6:	28 17       	cp	r18, r24
     ce8:	39 07       	cpc	r19, r25
     cea:	24 f4       	brge	.+8      	; 0xcf4 <i2c_rtc_read+0x32a>
      {
        datetime->sunrise = 0;
     cec:	ee 8d       	ldd	r30, Y+30	; 0x1e
     cee:	ff 8d       	ldd	r31, Y+31	; 0x1f
     cf0:	10 86       	std	Z+8, r1	; 0x08
     cf2:	72 c0       	rjmp	.+228    	; 0xdd8 <i2c_rtc_read+0x40e>
      }
      else if (now >= rise && now < rise + riseduration)
     cf4:	2b 81       	ldd	r18, Y+3	; 0x03
     cf6:	3c 81       	ldd	r19, Y+4	; 0x04
     cf8:	8f 81       	ldd	r24, Y+7	; 0x07
     cfa:	98 85       	ldd	r25, Y+8	; 0x08
     cfc:	28 17       	cp	r18, r24
     cfe:	39 07       	cpc	r19, r25
     d00:	2c f1       	brlt	.+74     	; 0xd4c <i2c_rtc_read+0x382>
     d02:	2f 81       	ldd	r18, Y+7	; 0x07
     d04:	38 85       	ldd	r19, Y+8	; 0x08
     d06:	89 89       	ldd	r24, Y+17	; 0x11
     d08:	9a 89       	ldd	r25, Y+18	; 0x12
     d0a:	28 0f       	add	r18, r24
     d0c:	39 1f       	adc	r19, r25
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	d4 f4       	brge	.+52     	; 0xd4c <i2c_rtc_read+0x382>
      {
        datetime->sunrise = ((now - rise) * 100 / riseduration);
     d18:	2b 81       	ldd	r18, Y+3	; 0x03
     d1a:	3c 81       	ldd	r19, Y+4	; 0x04
     d1c:	8f 81       	ldd	r24, Y+7	; 0x07
     d1e:	98 85       	ldd	r25, Y+8	; 0x08
     d20:	28 1b       	sub	r18, r24
     d22:	39 0b       	sbc	r19, r25
     d24:	84 e6       	ldi	r24, 0x64	; 100
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	ac 01       	movw	r20, r24
     d2a:	24 9f       	mul	r18, r20
     d2c:	c0 01       	movw	r24, r0
     d2e:	25 9f       	mul	r18, r21
     d30:	90 0d       	add	r25, r0
     d32:	34 9f       	mul	r19, r20
     d34:	90 0d       	add	r25, r0
     d36:	11 24       	eor	r1, r1
     d38:	29 89       	ldd	r18, Y+17	; 0x11
     d3a:	3a 89       	ldd	r19, Y+18	; 0x12
     d3c:	b9 01       	movw	r22, r18
     d3e:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     d42:	cb 01       	movw	r24, r22
     d44:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d46:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d48:	80 87       	std	Z+8, r24	; 0x08
     d4a:	46 c0       	rjmp	.+140    	; 0xdd8 <i2c_rtc_read+0x40e>
      }
      else if (now >= rise + riseduration && now < fall)
     d4c:	2f 81       	ldd	r18, Y+7	; 0x07
     d4e:	38 85       	ldd	r19, Y+8	; 0x08
     d50:	89 89       	ldd	r24, Y+17	; 0x11
     d52:	9a 89       	ldd	r25, Y+18	; 0x12
     d54:	28 0f       	add	r18, r24
     d56:	39 1f       	adc	r19, r25
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	82 17       	cp	r24, r18
     d5e:	93 07       	cpc	r25, r19
     d60:	64 f0       	brlt	.+24     	; 0xd7a <i2c_rtc_read+0x3b0>
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	28 17       	cp	r18, r24
     d6c:	39 07       	cpc	r19, r25
     d6e:	2c f4       	brge	.+10     	; 0xd7a <i2c_rtc_read+0x3b0>
      {
        datetime->sunrise = 100;
     d70:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d72:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d74:	84 e6       	ldi	r24, 0x64	; 100
     d76:	80 87       	std	Z+8, r24	; 0x08
     d78:	2f c0       	rjmp	.+94     	; 0xdd8 <i2c_rtc_read+0x40e>
      }
      else if (now >= fall && now < fall + riseduration)
     d7a:	2b 81       	ldd	r18, Y+3	; 0x03
     d7c:	3c 81       	ldd	r19, Y+4	; 0x04
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	28 17       	cp	r18, r24
     d84:	39 07       	cpc	r19, r25
     d86:	2c f1       	brlt	.+74     	; 0xdd2 <i2c_rtc_read+0x408>
     d88:	2d 81       	ldd	r18, Y+5	; 0x05
     d8a:	3e 81       	ldd	r19, Y+6	; 0x06
     d8c:	89 89       	ldd	r24, Y+17	; 0x11
     d8e:	9a 89       	ldd	r25, Y+18	; 0x12
     d90:	28 0f       	add	r18, r24
     d92:	39 1f       	adc	r19, r25
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	82 17       	cp	r24, r18
     d9a:	93 07       	cpc	r25, r19
     d9c:	d4 f4       	brge	.+52     	; 0xdd2 <i2c_rtc_read+0x408>
      {
        datetime->sunrise = ((now - fall) * 100 / riseduration);
     d9e:	2b 81       	ldd	r18, Y+3	; 0x03
     da0:	3c 81       	ldd	r19, Y+4	; 0x04
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	9e 81       	ldd	r25, Y+6	; 0x06
     da6:	28 1b       	sub	r18, r24
     da8:	39 0b       	sbc	r19, r25
     daa:	84 e6       	ldi	r24, 0x64	; 100
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	ac 01       	movw	r20, r24
     db0:	24 9f       	mul	r18, r20
     db2:	c0 01       	movw	r24, r0
     db4:	25 9f       	mul	r18, r21
     db6:	90 0d       	add	r25, r0
     db8:	34 9f       	mul	r19, r20
     dba:	90 0d       	add	r25, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	29 89       	ldd	r18, Y+17	; 0x11
     dc0:	3a 89       	ldd	r19, Y+18	; 0x12
     dc2:	b9 01       	movw	r22, r18
     dc4:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
     dc8:	cb 01       	movw	r24, r22
     dca:	ee 8d       	ldd	r30, Y+30	; 0x1e
     dcc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dce:	80 87       	std	Z+8, r24	; 0x08
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <i2c_rtc_read+0x40e>
      }
      else
      {
        datetime->sunrise = 0;
     dd2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     dd4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dd6:	10 86       	std	Z+8, r1	; 0x08
      }

      for (int x = 0; x != rtc_offset;)
     dd8:	1a 82       	std	Y+2, r1	; 0x02
     dda:	19 82       	std	Y+1, r1	; 0x01
     ddc:	33 c0       	rjmp	.+102    	; 0xe44 <i2c_rtc_read+0x47a>
      {
        if (rtc_offset > 0)
     dde:	80 91 a5 04 	lds	r24, 0x04A5
     de2:	18 16       	cp	r1, r24
     de4:	c4 f4       	brge	.+48     	; 0xe16 <i2c_rtc_read+0x44c>
        {
          add_hour(datetime);
     de6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     dea:	0e 94 65 04 	call	0x8ca	; 0x8ca <add_hour>
          datetime->sunrisehh++;
     dee:	ee 8d       	ldd	r30, Y+30	; 0x1e
     df0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     df2:	81 85       	ldd	r24, Z+9	; 0x09
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     df8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dfa:	81 87       	std	Z+9, r24	; 0x09
          datetime->sunfallhh++;
     dfc:	ee 8d       	ldd	r30, Y+30	; 0x1e
     dfe:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e00:	83 85       	ldd	r24, Z+11	; 0x0b
     e02:	8f 5f       	subi	r24, 0xFF	; 255
     e04:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e06:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e08:	83 87       	std	Z+11, r24	; 0x0b
          x++;
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	9a 81       	ldd	r25, Y+2	; 0x02
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	17 c0       	rjmp	.+46     	; 0xe44 <i2c_rtc_read+0x47a>
        }
        else
        {
          sub_hour(datetime);
     e16:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e18:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e1a:	0e 94 84 04 	call	0x908	; 0x908 <sub_hour>
          datetime->sunrisehh--;
     e1e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e20:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e22:	81 85       	ldd	r24, Z+9	; 0x09
     e24:	81 50       	subi	r24, 0x01	; 1
     e26:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e28:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e2a:	81 87       	std	Z+9, r24	; 0x09
          datetime->sunfallhh--;
     e2c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e2e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e30:	83 85       	ldd	r24, Z+11	; 0x0b
     e32:	81 50       	subi	r24, 0x01	; 1
     e34:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e36:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e38:	83 87       	std	Z+11, r24	; 0x0b
          x--;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
      else
      {
        datetime->sunrise = 0;
      }

      for (int x = 0; x != rtc_offset;)
     e44:	80 91 a5 04 	lds	r24, 0x04A5
     e48:	28 2f       	mov	r18, r24
     e4a:	33 27       	eor	r19, r19
     e4c:	27 fd       	sbrc	r18, 7
     e4e:	30 95       	com	r19
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	28 17       	cp	r18, r24
     e56:	39 07       	cpc	r19, r25
     e58:	11 f6       	brne	.-124    	; 0xdde <i2c_rtc_read+0x414>
          datetime->sunrisehh--;
          datetime->sunfallhh--;
          x--;
        }
      }
      if (datetime->MM < 3 || datetime->MM > 10)
     e5a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e5c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	28 f0       	brcs	.+10     	; 0xe6e <i2c_rtc_read+0x4a4>
     e64:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e66:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e68:	81 81       	ldd	r24, Z+1	; 0x01
     e6a:	8b 30       	cpi	r24, 0x0B	; 11
     e6c:	20 f0       	brcs	.+8      	; 0xe76 <i2c_rtc_read+0x4ac>
      {
        datetime->dst = 0;
     e6e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e70:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e72:	17 82       	std	Z+7, r1	; 0x07
     e74:	7b c0       	rjmp	.+246    	; 0xf6c <i2c_rtc_read+0x5a2>
      }
      else if (datetime->MM > 3 && datetime->MM < 10)
     e76:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e78:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	84 30       	cpi	r24, 0x04	; 4
     e7e:	e0 f0       	brcs	.+56     	; 0xeb8 <i2c_rtc_read+0x4ee>
     e80:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e82:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	8a 30       	cpi	r24, 0x0A	; 10
     e88:	b8 f4       	brcc	.+46     	; 0xeb8 <i2c_rtc_read+0x4ee>
      {
        datetime->sunrisehh++;
     e8a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e8c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e8e:	81 85       	ldd	r24, Z+9	; 0x09
     e90:	8f 5f       	subi	r24, 0xFF	; 255
     e92:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e94:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e96:	81 87       	std	Z+9, r24	; 0x09
        datetime->sunfallhh++;
     e98:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e9a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e9c:	83 85       	ldd	r24, Z+11	; 0x0b
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ea2:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ea4:	83 87       	std	Z+11, r24	; 0x0b
        add_hour(datetime);
     ea6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     eaa:	0e 94 65 04 	call	0x8ca	; 0x8ca <add_hour>
        datetime->dst = 1;
     eae:	ee 8d       	ldd	r30, Y+30	; 0x1e
     eb0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	87 83       	std	Z+7, r24	; 0x07
     eb6:	5a c0       	rjmp	.+180    	; 0xf6c <i2c_rtc_read+0x5a2>
      }
      else
      {
        if (datetime->DD - datetime->wd >= 25 && (datetime->wd || datetime->hh > 2))
     eb8:	ee 8d       	ldd	r30, Y+30	; 0x1e
     eba:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ec4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ec6:	86 81       	ldd	r24, Z+6	; 0x06
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	a9 01       	movw	r20, r18
     ece:	48 1b       	sub	r20, r24
     ed0:	59 0b       	sbc	r21, r25
     ed2:	ca 01       	movw	r24, r20
     ed4:	89 31       	cpi	r24, 0x19	; 25
     ed6:	91 05       	cpc	r25, r1
     ed8:	54 f1       	brlt	.+84     	; 0xf2e <i2c_rtc_read+0x564>
     eda:	ee 8d       	ldd	r30, Y+30	; 0x1e
     edc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ede:	86 81       	ldd	r24, Z+6	; 0x06
     ee0:	88 23       	and	r24, r24
     ee2:	29 f4       	brne	.+10     	; 0xeee <i2c_rtc_read+0x524>
     ee4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ee6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ee8:	83 81       	ldd	r24, Z+3	; 0x03
     eea:	83 30       	cpi	r24, 0x03	; 3
     eec:	00 f1       	brcs	.+64     	; 0xf2e <i2c_rtc_read+0x564>
        {
          if (datetime->MM == 10)
     eee:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ef0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ef2:	81 81       	ldd	r24, Z+1	; 0x01
     ef4:	8a 30       	cpi	r24, 0x0A	; 10
     ef6:	21 f4       	brne	.+8      	; 0xf00 <i2c_rtc_read+0x536>
          {
            datetime->dst = 0;
     ef8:	ee 8d       	ldd	r30, Y+30	; 0x1e
     efa:	ff 8d       	ldd	r31, Y+31	; 0x1f
     efc:	17 82       	std	Z+7, r1	; 0x07
     efe:	36 c0       	rjmp	.+108    	; 0xf6c <i2c_rtc_read+0x5a2>
          }
          else
          {
            datetime->sunrisehh++;
     f00:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f02:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f04:	81 85       	ldd	r24, Z+9	; 0x09
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f0a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f0c:	81 87       	std	Z+9, r24	; 0x09
            datetime->sunfallhh++;
     f0e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f10:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f12:	83 85       	ldd	r24, Z+11	; 0x0b
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f18:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f1a:	83 87       	std	Z+11, r24	; 0x0b
            add_hour(datetime);
     f1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f20:	0e 94 65 04 	call	0x8ca	; 0x8ca <add_hour>
            datetime->dst = 1;
     f24:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f26:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	87 83       	std	Z+7, r24	; 0x07
     f2c:	1f c0       	rjmp	.+62     	; 0xf6c <i2c_rtc_read+0x5a2>
          }
        }
        else
        {
          if (datetime->MM == 3)
     f2e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f30:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	21 f4       	brne	.+8      	; 0xf40 <i2c_rtc_read+0x576>
          {
            datetime->dst = 0;
     f38:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f3a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f3c:	17 82       	std	Z+7, r1	; 0x07
     f3e:	16 c0       	rjmp	.+44     	; 0xf6c <i2c_rtc_read+0x5a2>
          }
          else
          {
            datetime->sunrisehh++;
     f40:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f42:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f44:	81 85       	ldd	r24, Z+9	; 0x09
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f4a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f4c:	81 87       	std	Z+9, r24	; 0x09
            datetime->sunfallhh++;
     f4e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f50:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f52:	83 85       	ldd	r24, Z+11	; 0x0b
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f58:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f5a:	83 87       	std	Z+11, r24	; 0x0b
            add_hour(datetime);
     f5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f5e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f60:	0e 94 65 04 	call	0x8ca	; 0x8ca <add_hour>
            datetime->dst = 1;
     f64:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f66:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	87 83       	std	Z+7, r24	; 0x07
          }
        }
      }
    }
  }
  return rtc;
     f6c:	8e 89       	ldd	r24, Y+22	; 0x16
}
     f6e:	a0 96       	adiw	r28, 0x20	; 32
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <i2c_rtc_sram_write>:
 *  @return    TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_sram_write(uint8_t addr, void * void_valuep, uint8_t length)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	28 97       	sbiw	r28, 0x08	; 8
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	8c 83       	std	Y+4, r24	; 0x04
     f9a:	7e 83       	std	Y+6, r23	; 0x06
     f9c:	6d 83       	std	Y+5, r22	; 0x05
     f9e:	4f 83       	std	Y+7, r20	; 0x07
  unsigned char * valuep = void_valuep;
     fa0:	8d 81       	ldd	r24, Y+5	; 0x05
     fa2:	9e 81       	ldd	r25, Y+6	; 0x06
     fa4:	9b 83       	std	Y+3, r25	; 0x03
     fa6:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t rtc = 0;
     fa8:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
     faa:	80 91 a6 04 	lds	r24, 0x04A6
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <i2c_rtc_sram_write+0x30>
     fb2:	3d c0       	rjmp	.+122    	; 0x102e <i2c_rtc_sram_write+0xaa>
  {
    if (length && addr + length <= 64)
     fb4:	8f 81       	ldd	r24, Y+7	; 0x07
     fb6:	88 23       	and	r24, r24
     fb8:	d1 f1       	breq	.+116    	; 0x102e <i2c_rtc_sram_write+0xaa>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8f 81       	ldd	r24, Y+7	; 0x07
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	81 34       	cpi	r24, 0x41	; 65
     fcc:	91 05       	cpc	r25, r1
     fce:	7c f5       	brge	.+94     	; 0x102e <i2c_rtc_sram_write+0xaa>
    {
      i2c_master_start_wait(DEVRTC + I2C_WRITE); // set device address and write mode
     fd0:	80 ed       	ldi	r24, 0xD0	; 208
     fd2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_master_start_wait>

      if (i2c_master_write(addr, &i2c_rtc_status) == 0) // write address
     fd6:	29 ea       	ldi	r18, 0xA9	; 169
     fd8:	34 e0       	ldi	r19, 0x04	; 4
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	b9 01       	movw	r22, r18
     fde:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <i2c_master_write>
     fe2:	88 23       	and	r24, r24
     fe4:	11 f5       	brne	.+68     	; 0x102a <i2c_rtc_sram_write+0xa6>
      {
        rtc = true; // indicate success
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	12 c0       	rjmp	.+36     	; 0x1010 <i2c_rtc_sram_write+0x8c>

        while (length--)
        {
          if (i2c_master_write(*valuep++, &i2c_rtc_status) != 0) // write value
     fec:	ea 81       	ldd	r30, Y+2	; 0x02
     fee:	fb 81       	ldd	r31, Y+3	; 0x03
     ff0:	40 81       	ld	r20, Z
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	9b 83       	std	Y+3, r25	; 0x03
     ffa:	8a 83       	std	Y+2, r24	; 0x02
     ffc:	29 ea       	ldi	r18, 0xA9	; 169
     ffe:	34 e0       	ldi	r19, 0x04	; 4
    1000:	84 2f       	mov	r24, r20
    1002:	b9 01       	movw	r22, r18
    1004:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <i2c_master_write>
    1008:	88 23       	and	r24, r24
    100a:	11 f0       	breq	.+4      	; 0x1010 <i2c_rtc_sram_write+0x8c>
          {
            rtc = false; // indicate errror
    100c:	19 82       	std	Y+1, r1	; 0x01
    100e:	0d c0       	rjmp	.+26     	; 0x102a <i2c_rtc_sram_write+0xa6>

      if (i2c_master_write(addr, &i2c_rtc_status) == 0) // write address
      {
        rtc = true; // indicate success

        while (length--)
    1010:	8f 81       	ldd	r24, Y+7	; 0x07
    1012:	88 87       	std	Y+8, r24	; 0x08
    1014:	88 85       	ldd	r24, Y+8	; 0x08
    1016:	88 23       	and	r24, r24
    1018:	11 f0       	breq	.+4      	; 0x101e <i2c_rtc_sram_write+0x9a>
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	88 87       	std	Y+8, r24	; 0x08
    101e:	88 85       	ldd	r24, Y+8	; 0x08
    1020:	9f 81       	ldd	r25, Y+7	; 0x07
    1022:	91 50       	subi	r25, 0x01	; 1
    1024:	9f 83       	std	Y+7, r25	; 0x07
    1026:	88 23       	and	r24, r24
    1028:	09 f7       	brne	.-62     	; 0xfec <i2c_rtc_sram_write+0x68>
            break;
          }
        }
      }

      i2c_master_stop(); // set stop conditon = release bus
    102a:	0e 94 66 01 	call	0x2cc	; 0x2cc <i2c_master_stop>
    }
  }
  return rtc;
    102e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1030:	28 96       	adiw	r28, 0x08	; 8
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <i2c_rtc_sram_read>:
 *  @return   TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_sram_read(uint8_t addr, void * void_valuep, uint8_t length)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	27 97       	sbiw	r28, 0x07	; 7
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	8c 83       	std	Y+4, r24	; 0x04
    1058:	7e 83       	std	Y+6, r23	; 0x06
    105a:	6d 83       	std	Y+5, r22	; 0x05
    105c:	4f 83       	std	Y+7, r20	; 0x07
  unsigned char * valuep = void_valuep;
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	9b 83       	std	Y+3, r25	; 0x03
    1064:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t rtc = false;
    1066:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
    1068:	80 91 a6 04 	lds	r24, 0x04A6
    106c:	88 23       	and	r24, r24
    106e:	09 f4       	brne	.+2      	; 0x1072 <i2c_rtc_sram_read+0x30>
    1070:	40 c0       	rjmp	.+128    	; 0x10f2 <i2c_rtc_sram_read+0xb0>
  {
    if (length && addr + length <= 64)
    1072:	8f 81       	ldd	r24, Y+7	; 0x07
    1074:	88 23       	and	r24, r24
    1076:	e9 f1       	breq	.+122    	; 0x10f2 <i2c_rtc_sram_read+0xb0>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	81 34       	cpi	r24, 0x41	; 65
    108a:	91 05       	cpc	r25, r1
    108c:	94 f5       	brge	.+100    	; 0x10f2 <i2c_rtc_sram_read+0xb0>
    {
      i2c_master_start_wait(DEVRTC + I2C_WRITE); // set device address and write mode
    108e:	80 ed       	ldi	r24, 0xD0	; 208
    1090:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_master_start_wait>

      if (i2c_master_write(addr, &i2c_rtc_status) == 0) // write address
    1094:	29 ea       	ldi	r18, 0xA9	; 169
    1096:	34 e0       	ldi	r19, 0x04	; 4
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	b9 01       	movw	r22, r18
    109c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <i2c_master_write>
    10a0:	88 23       	and	r24, r24
    10a2:	29 f5       	brne	.+74     	; 0x10ee <i2c_rtc_sram_read+0xac>
      {
        if (i2c_master_rep_start(DEVRTC + I2C_READ, &i2c_rtc_status) == 0) // set device address and read mode
    10a4:	29 ea       	ldi	r18, 0xA9	; 169
    10a6:	34 e0       	ldi	r19, 0x04	; 4
    10a8:	81 ed       	ldi	r24, 0xD1	; 209
    10aa:	b9 01       	movw	r22, r18
    10ac:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_master_rep_start>
    10b0:	88 23       	and	r24, r24
    10b2:	e9 f4       	brne	.+58     	; 0x10ee <i2c_rtc_sram_read+0xac>
        {
          rtc = true; // indicate success
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	0a c0       	rjmp	.+20     	; 0x10ce <i2c_rtc_sram_read+0x8c>

          while (--length)
          {
            *valuep++ = i2c_master_read_ack(); // read n'th byte
    10ba:	0e 94 aa 01 	call	0x354	; 0x354 <i2c_master_read_ack>
    10be:	ea 81       	ldd	r30, Y+2	; 0x02
    10c0:	fb 81       	ldd	r31, Y+3	; 0x03
    10c2:	80 83       	st	Z, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	9b 83       	std	Y+3, r25	; 0x03
    10cc:	8a 83       	std	Y+2, r24	; 0x02
      {
        if (i2c_master_rep_start(DEVRTC + I2C_READ, &i2c_rtc_status) == 0) // set device address and read mode
        {
          rtc = true; // indicate success

          while (--length)
    10ce:	8f 81       	ldd	r24, Y+7	; 0x07
    10d0:	81 50       	subi	r24, 0x01	; 1
    10d2:	8f 83       	std	Y+7, r24	; 0x07
    10d4:	8f 81       	ldd	r24, Y+7	; 0x07
    10d6:	88 23       	and	r24, r24
    10d8:	81 f7       	brne	.-32     	; 0x10ba <i2c_rtc_sram_read+0x78>
          {
            *valuep++ = i2c_master_read_ack(); // read n'th byte
          }
          *valuep++ = i2c_master_read_nak(); // read last byte
    10da:	0e 94 bd 01 	call	0x37a	; 0x37a <i2c_master_read_nak>
    10de:	ea 81       	ldd	r30, Y+2	; 0x02
    10e0:	fb 81       	ldd	r31, Y+3	; 0x03
    10e2:	80 83       	st	Z, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	9b 83       	std	Y+3, r25	; 0x03
    10ec:	8a 83       	std	Y+2, r24	; 0x02
        }
      }

      i2c_master_stop(); // set stop conditon = release bus
    10ee:	0e 94 66 01 	call	0x2cc	; 0x2cc <i2c_master_stop>
    }
  }
  return rtc;
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f4:	27 96       	adiw	r28, 0x07	; 7
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <i2c_write_ctrlreg>:
 *  @return     TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static uint8_t
i2c_write_ctrlreg(void)
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <i2c_write_ctrlreg+0x6>
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
  uint8_t value[1];
  uint8_t rtc = 0;
    1110:	19 82       	std	Y+1, r1	; 0x01

  value[0] = ctrlreg;
    1112:	80 91 aa 04 	lds	r24, 0x04AA
    1116:	8a 83       	std	Y+2, r24	; 0x02

  if (i2c_rtc_sram_write(0x07, value, 1))
    1118:	9e 01       	movw	r18, r28
    111a:	2e 5f       	subi	r18, 0xFE	; 254
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	87 e0       	ldi	r24, 0x07	; 7
    1120:	b9 01       	movw	r22, r18
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	0e 94 c2 07 	call	0xf84	; 0xf84 <i2c_rtc_sram_write>
    1128:	88 23       	and	r24, r24
    112a:	11 f0       	breq	.+4      	; 0x1130 <i2c_write_ctrlreg+0x2a>
  {
    rtc = 1;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	89 83       	std	Y+1, r24	; 0x01
  }
  return rtc;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <i2c_rtc_init>:
 *  @return   TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_init(uint8_t * errorcode_p, uint8_t * status_p)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <i2c_rtc_init+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <i2c_rtc_init+0x8>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <i2c_rtc_init+0xa>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	9c 83       	std	Y+4, r25	; 0x04
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	7e 83       	std	Y+6, r23	; 0x06
    1150:	6d 83       	std	Y+5, r22	; 0x05
  uint8_t rtc = false;
    1152:	19 82       	std	Y+1, r1	; 0x01
  uint8_t seconds;

  *status_p = 0xFF;
    1154:	ed 81       	ldd	r30, Y+5	; 0x05
    1156:	fe 81       	ldd	r31, Y+6	; 0x06
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	80 83       	st	Z, r24
  *errorcode_p = i2c_master_init(); // init I2C interface
    115c:	0e 94 90 00 	call	0x120	; 0x120 <i2c_master_init>
    1160:	eb 81       	ldd	r30, Y+3	; 0x03
    1162:	fc 81       	ldd	r31, Y+4	; 0x04
    1164:	80 83       	st	Z, r24


  if (*errorcode_p == 0)
    1166:	eb 81       	ldd	r30, Y+3	; 0x03
    1168:	fc 81       	ldd	r31, Y+4	; 0x04
    116a:	80 81       	ld	r24, Z
    116c:	88 23       	and	r24, r24
    116e:	a1 f5       	brne	.+104    	; 0x11d8 <i2c_rtc_init+0x9c>
  {
    rtc_initialized = true;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 a6 04 	sts	0x04A6, r24
    ctrlreg = CTRL_REG_OUT; // set SQWE pin to output and set it to high (deactivated, active low!)
    1176:	80 e8       	ldi	r24, 0x80	; 128
    1178:	80 93 aa 04 	sts	0x04AA, r24

    if (i2c_write_ctrlreg())
    117c:	0e 94 83 08 	call	0x1106	; 0x1106 <i2c_write_ctrlreg>
    1180:	88 23       	and	r24, r24
    1182:	09 f1       	breq	.+66     	; 0x11c6 <i2c_rtc_init+0x8a>
    {
      rtc = true;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01

      if (i2c_rtc_sram_read(0x00, &seconds, 1))
    1188:	9e 01       	movw	r18, r28
    118a:	2e 5f       	subi	r18, 0xFE	; 254
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	b9 01       	movw	r22, r18
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	0e 94 21 08 	call	0x1042	; 0x1042 <i2c_rtc_sram_read>
    1198:	88 23       	and	r24, r24
    119a:	71 f0       	breq	.+28     	; 0x11b8 <i2c_rtc_init+0x7c>
      {
        if (seconds & 0x80) // clock stopped?
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 23       	and	r24, r24
    11a0:	5c f4       	brge	.+22     	; 0x11b8 <i2c_rtc_init+0x7c>
        {
          seconds &= ~0x80;
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	8f 77       	andi	r24, 0x7F	; 127
    11a6:	8a 83       	std	Y+2, r24	; 0x02
          (void) i2c_rtc_sram_write(0x00, &seconds, 1);
    11a8:	9e 01       	movw	r18, r28
    11aa:	2e 5f       	subi	r18, 0xFE	; 254
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	b9 01       	movw	r22, r18
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	0e 94 c2 07 	call	0xf84	; 0xf84 <i2c_rtc_sram_write>
        }
      }
      read_byte(cRTCOffset, &rtc_offset);
    11b8:	25 ea       	ldi	r18, 0xA5	; 165
    11ba:	34 e0       	ldi	r19, 0x04	; 4
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	b9 01       	movw	r22, r18
    11c0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <read_byte>
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <i2c_rtc_init+0x9c>
    }
    else
    {
      *errorcode_p = I2C_ERROR_SLAVE_NOT_FOUND;
    11c6:	eb 81       	ldd	r30, Y+3	; 0x03
    11c8:	fc 81       	ldd	r31, Y+4	; 0x04
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	80 83       	st	Z, r24
      *status_p = i2c_rtc_status;
    11ce:	80 91 a9 04 	lds	r24, 0x04A9
    11d2:	ed 81       	ldd	r30, Y+5	; 0x05
    11d4:	fe 81       	ldd	r31, Y+6	; 0x06
    11d6:	80 83       	st	Z, r24
    }
  }

  return rtc;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11da:	26 96       	adiw	r28, 0x06	; 6
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <ldr_init>:
 * ldr_init: initialize adc for ldr
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ldr_init (void)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <ldr_init+0x6>
    11f2:	0f 92       	push	r0
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t result;
 
  ADMUX = 0                       // ADC0
    11f8:	e7 e2       	ldi	r30, 0x27	; 39
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 e6       	ldi	r24, 0x60	; 96
    11fe:	80 83       	st	Z, r24
        | (1<<REFS0)              // use Avcc
        | (1<<ADLAR);             // left justify result in ADCH
 
  ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);      // prescaler to 32 / in our case sampling frequence of 250kHz
    1200:	e6 e2       	ldi	r30, 0x26	; 38
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	85 e8       	ldi	r24, 0x85	; 133
    1206:	80 83       	st	Z, r24
                                                     // and activate ADC

  ADCSRA |= (1<<ADSC);                      // ADC start 
    1208:	a6 e2       	ldi	r26, 0x26	; 38
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e6 e2       	ldi	r30, 0x26	; 38
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 64       	ori	r24, 0x40	; 64
    1214:	8c 93       	st	X, r24
  while ( ADCSRA & (1<<ADSC) ) {
    1216:	e6 e2       	ldi	r30, 0x26	; 38
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	80 74       	andi	r24, 0x40	; 64
    1222:	90 70       	andi	r25, 0x00	; 0
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	b9 f7       	brne	.-18     	; 0x1216 <ldr_init+0x2a>
    ;     
  }

  result = ADCH;  // read out the value and init the summary array
    1228:	e5 e2       	ldi	r30, 0x25	; 37
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8b 83       	std	Y+3, r24	; 0x03
  for (int i = 0; i < LDR_ARRAY_SIZE; array[i++] = result);
    1230:	1a 82       	std	Y+2, r1	; 0x02
    1232:	19 82       	std	Y+1, r1	; 0x01
    1234:	0c c0       	rjmp	.+24     	; 0x124e <ldr_init+0x62>
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	fc 01       	movw	r30, r24
    123e:	e4 55       	subi	r30, 0x54	; 84
    1240:	fb 4f       	sbci	r31, 0xFB	; 251
    1242:	20 83       	st	Z, r18
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	80 34       	cpi	r24, 0x40	; 64
    1254:	91 05       	cpc	r25, r1
    1256:	7c f3       	brlt	.-34     	; 0x1236 <ldr_init+0x4a>

  curr_sum = result;              // also init the sum
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	90 93 ed 04 	sts	0x04ED, r25
    1262:	80 93 ec 04 	sts	0x04EC, r24
  curr_sum *= LDR_ARRAY_SIZE;     //
    1266:	80 91 ec 04 	lds	r24, 0x04EC
    126a:	90 91 ed 04 	lds	r25, 0x04ED
    126e:	00 24       	eor	r0, r0
    1270:	96 95       	lsr	r25
    1272:	87 95       	ror	r24
    1274:	07 94       	ror	r0
    1276:	96 95       	lsr	r25
    1278:	87 95       	ror	r24
    127a:	07 94       	ror	r0
    127c:	98 2f       	mov	r25, r24
    127e:	80 2d       	mov	r24, r0
    1280:	90 93 ed 04 	sts	0x04ED, r25
    1284:	80 93 ec 04 	sts	0x04EC, r24

  ADCSRA |= (1<<ADSC);     // start next measurement (will be read in 1Hz Interupt)
    1288:	a6 e2       	ldi	r26, 0x26	; 38
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e6 e2       	ldi	r30, 0x26	; 38
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	80 64       	ori	r24, 0x40	; 64
    1294:	8c 93       	st	X, r24

  return;
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <ldr_get_brightness>:
 * ldr_get_brightness: returns the average of brightness 
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
ldr_get_brightness (void)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
  return ( 255-(curr_sum / LDR_ARRAY_SIZE)); 
    12aa:	80 91 ec 04 	lds	r24, 0x04EC
    12ae:	90 91 ed 04 	lds	r25, 0x04ED
    12b2:	00 24       	eor	r0, r0
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	00 1c       	adc	r0, r0
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	00 1c       	adc	r0, r0
    12c0:	89 2f       	mov	r24, r25
    12c2:	90 2d       	mov	r25, r0
    12c4:	80 95       	com	r24
}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <ldr_read>:
 * recalculate our new summary and start a new conversion
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ldr_read (void)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
  static uint8_t   curr_index = 0;

  if ( (ADCSRA & (1<<ADSC)) == 0) {
    12d6:	e6 e2       	ldi	r30, 0x26	; 38
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	80 74       	andi	r24, 0x40	; 64
    12e2:	90 70       	andi	r25, 0x00	; 0
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	09 f0       	breq	.+2      	; 0x12ea <ldr_read+0x1e>
    12e8:	41 c0       	rjmp	.+130    	; 0x136c <ldr_read+0xa0>
    uint8_t measurement = ADCH;
    12ea:	e5 e2       	ldi	r30, 0x25	; 37
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	89 83       	std	Y+1, r24	; 0x01

    curr_sum -= array[curr_index];
    12f2:	20 91 ec 04 	lds	r18, 0x04EC
    12f6:	30 91 ed 04 	lds	r19, 0x04ED
    12fa:	80 91 ab 04 	lds	r24, 0x04AB
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	fc 01       	movw	r30, r24
    1304:	e4 55       	subi	r30, 0x54	; 84
    1306:	fb 4f       	sbci	r31, 0xFB	; 251
    1308:	80 81       	ld	r24, Z
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	48 1b       	sub	r20, r24
    1312:	59 0b       	sbc	r21, r25
    1314:	ca 01       	movw	r24, r20
    1316:	90 93 ed 04 	sts	0x04ED, r25
    131a:	80 93 ec 04 	sts	0x04EC, r24
    array[curr_index] = measurement;
    131e:	80 91 ab 04 	lds	r24, 0x04AB
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	fc 01       	movw	r30, r24
    1328:	e4 55       	subi	r30, 0x54	; 84
    132a:	fb 4f       	sbci	r31, 0xFB	; 251
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	80 83       	st	Z, r24
    curr_sum += measurement;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	80 91 ec 04 	lds	r24, 0x04EC
    133a:	90 91 ed 04 	lds	r25, 0x04ED
    133e:	82 0f       	add	r24, r18
    1340:	93 1f       	adc	r25, r19
    1342:	90 93 ed 04 	sts	0x04ED, r25
    1346:	80 93 ec 04 	sts	0x04EC, r24
    curr_index++;
    134a:	80 91 ab 04 	lds	r24, 0x04AB
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	80 93 ab 04 	sts	0x04AB, r24

    curr_index %= LDR_ARRAY_SIZE;
    1354:	80 91 ab 04 	lds	r24, 0x04AB
    1358:	8f 73       	andi	r24, 0x3F	; 63
    135a:	80 93 ab 04 	sts	0x04AB, r24

    // start next ADC converting
    ADCSRA |= (1<<ADSC); 
    135e:	a6 e2       	ldi	r26, 0x26	; 38
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e6 e2       	ldi	r30, 0x26	; 38
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 64       	ori	r24, 0x40	; 64
    136a:	8c 93       	st	X, r24
  } 

  return;
}
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <InitPWM>:
#define sbi(sfr, bit)     (_SFR_BYTE(sfr) |= _BV(bit))
#endif

void
InitPWM()
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
  DDRD = 0xfc;
    137c:	e1 e3       	ldi	r30, 0x31	; 49
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8c ef       	ldi	r24, 0xFC	; 252
    1382:	80 83       	st	Z, r24
  TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(WGM10);
    1384:	ef e4       	ldi	r30, 0x4F	; 79
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	81 ea       	ldi	r24, 0xA1	; 161
    138a:	80 83       	st	Z, r24
  TCCR1B = _BV(CS10);
    138c:	ee e4       	ldi	r30, 0x4E	; 78
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	80 83       	st	Z, r24
  TCCR2 = _BV(CS20) | _BV(WGM20) | _BV(COM21);
    1394:	e5 e4       	ldi	r30, 0x45	; 69
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	81 e6       	ldi	r24, 0x61	; 97
    139a:	80 83       	st	Z, r24
  TCCR0 = _BV(WGM01) | _BV(WGM00) | _BV(COM01) | _BV(COM00) | _BV(CS00) | _BV(CS02);
    139c:	e3 e5       	ldi	r30, 0x53	; 83
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8d e7       	ldi	r24, 0x7D	; 125
    13a2:	80 83       	st	Z, r24
  TIMSK &= ~0x3c;
    13a4:	a9 e5       	ldi	r26, 0x59	; 89
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e9 e5       	ldi	r30, 0x59	; 89
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	83 7c       	andi	r24, 0xC3	; 195
    13b0:	8c 93       	st	X, r24
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <SetColor>:

void
SetColor(uint8_t bright, uint8_t uiR, uint8_t uiG, uint8_t uiB)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	27 97       	sbiw	r28, 0x07	; 7
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	8c 83       	std	Y+4, r24	; 0x04
    13ce:	6d 83       	std	Y+5, r22	; 0x05
    13d0:	4e 83       	std	Y+6, r20	; 0x06
    13d2:	2f 83       	std	Y+7, r18	; 0x07
  char r = ((((uint16_t) bright) * uiR) / 255);
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	ac 01       	movw	r20, r24
    13e2:	24 9f       	mul	r18, r20
    13e4:	c0 01       	movw	r24, r0
    13e6:	25 9f       	mul	r18, r21
    13e8:	90 0d       	add	r25, r0
    13ea:	34 9f       	mul	r19, r20
    13ec:	90 0d       	add	r25, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	2f ef       	ldi	r18, 0xFF	; 255
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	b9 01       	movw	r22, r18
    13f6:	0e 94 54 38 	call	0x70a8	; 0x70a8 <__udivmodhi4>
    13fa:	cb 01       	movw	r24, r22
    13fc:	8b 83       	std	Y+3, r24	; 0x03
  char g = ((((uint16_t) bright) * uiG) / 255);
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8e 81       	ldd	r24, Y+6	; 0x06
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	ac 01       	movw	r20, r24
    140c:	24 9f       	mul	r18, r20
    140e:	c0 01       	movw	r24, r0
    1410:	25 9f       	mul	r18, r21
    1412:	90 0d       	add	r25, r0
    1414:	34 9f       	mul	r19, r20
    1416:	90 0d       	add	r25, r0
    1418:	11 24       	eor	r1, r1
    141a:	2f ef       	ldi	r18, 0xFF	; 255
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	b9 01       	movw	r22, r18
    1420:	0e 94 54 38 	call	0x70a8	; 0x70a8 <__udivmodhi4>
    1424:	cb 01       	movw	r24, r22
    1426:	8a 83       	std	Y+2, r24	; 0x02
  char b = ((((uint16_t) bright) * uiB) / 255);
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	8f 81       	ldd	r24, Y+7	; 0x07
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	ac 01       	movw	r20, r24
    1436:	24 9f       	mul	r18, r20
    1438:	c0 01       	movw	r24, r0
    143a:	25 9f       	mul	r18, r21
    143c:	90 0d       	add	r25, r0
    143e:	34 9f       	mul	r19, r20
    1440:	90 0d       	add	r25, r0
    1442:	11 24       	eor	r1, r1
    1444:	2f ef       	ldi	r18, 0xFF	; 255
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	b9 01       	movw	r22, r18
    144a:	0e 94 54 38 	call	0x70a8	; 0x70a8 <__udivmodhi4>
    144e:	cb 01       	movw	r24, r22
    1450:	89 83       	std	Y+1, r24	; 0x01
  OCR1BL = r;
    1452:	e8 e4       	ldi	r30, 0x48	; 72
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	80 83       	st	Z, r24
  OCR1AL = g;
    145a:	ea e4       	ldi	r30, 0x4A	; 74
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	80 83       	st	Z, r24
  OCR2 = b;
    1462:	e3 e4       	ldi	r30, 0x43	; 67
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	80 83       	st	Z, r24
}
    146a:	27 96       	adiw	r28, 0x07	; 7
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <uartPutc>:

void
uartPutc(char c)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	89 83       	std	Y+1, r24	; 0x01
  while (!(UCSRA & _BV(UDRE)))
    1488:	eb e2       	ldi	r30, 0x2B	; 43
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	80 72       	andi	r24, 0x20	; 32
    1494:	90 70       	andi	r25, 0x00	; 0
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	b9 f3       	breq	.-18     	; 0x1488 <uartPutc+0xc>
    ;
  UDR = c;
    149a:	ec e2       	ldi	r30, 0x2C	; 44
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	80 83       	st	Z, r24
}
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <uartPuts>:

void
uartPuts(char *s)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <uartPuts+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <uartPuts+0x8>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
  int x = 0;
    14ba:	1a 82       	std	Y+2, r1	; 0x02
    14bc:	19 82       	std	Y+1, r1	; 0x01
    14be:	0f c0       	rjmp	.+30     	; 0x14de <uartPuts+0x34>
  while (s[x])
  {
    uartPutc(s[x]);
    14c0:	29 81       	ldd	r18, Y+1	; 0x01
    14c2:	3a 81       	ldd	r19, Y+2	; 0x02
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	fc 01       	movw	r30, r24
    14ca:	e2 0f       	add	r30, r18
    14cc:	f3 1f       	adc	r31, r19
    14ce:	80 81       	ld	r24, Z
    14d0:	0e 94 3e 0a 	call	0x147c	; 0x147c <uartPutc>
    x++;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01

void
uartPuts(char *s)
{
  int x = 0;
  while (s[x])
    14de:	29 81       	ldd	r18, Y+1	; 0x01
    14e0:	3a 81       	ldd	r19, Y+2	; 0x02
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	fc 01       	movw	r30, r24
    14e8:	e2 0f       	add	r30, r18
    14ea:	f3 1f       	adc	r31, r19
    14ec:	80 81       	ld	r24, Z
    14ee:	88 23       	and	r24, r24
    14f0:	39 f7       	brne	.-50     	; 0x14c0 <uartPuts+0x16>
  {
    uartPutc(s[x]);
    x++;
  }
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <shift32_output>:

uint32_t lLEDs_LastValue = 0;

void
shift32_output(uint32_t value)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	28 97       	sbiw	r28, 0x08	; 8
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	6d 83       	std	Y+5, r22	; 0x05
    1516:	7e 83       	std	Y+6, r23	; 0x06
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	98 87       	std	Y+8, r25	; 0x08
  if(value == lLEDs_LastValue)
    151c:	20 91 ee 04 	lds	r18, 0x04EE
    1520:	30 91 ef 04 	lds	r19, 0x04EF
    1524:	40 91 f0 04 	lds	r20, 0x04F0
    1528:	50 91 f1 04 	lds	r21, 0x04F1
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	af 81       	ldd	r26, Y+7	; 0x07
    1532:	b8 85       	ldd	r27, Y+8	; 0x08
    1534:	82 17       	cp	r24, r18
    1536:	93 07       	cpc	r25, r19
    1538:	a4 07       	cpc	r26, r20
    153a:	b5 07       	cpc	r27, r21
    153c:	09 f4       	brne	.+2      	; 0x1540 <shift32_output+0x40>
    153e:	5a c0       	rjmp	.+180    	; 0x15f4 <shift32_output+0xf4>
  {
    return;
  }
  lLEDs_LastValue = value;
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	af 81       	ldd	r26, Y+7	; 0x07
    1546:	b8 85       	ldd	r27, Y+8	; 0x08
    1548:	80 93 ee 04 	sts	0x04EE, r24
    154c:	90 93 ef 04 	sts	0x04EF, r25
    1550:	a0 93 f0 04 	sts	0x04F0, r26
    1554:	b0 93 f1 04 	sts	0x04F1, r27
  uint8_t u0 = (uint8_t) (value);
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	8c 83       	std	Y+4, r24	; 0x04
  uint8_t u1 = (uint8_t) (value >> 8);
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	af 81       	ldd	r26, Y+7	; 0x07
    1562:	b8 85       	ldd	r27, Y+8	; 0x08
    1564:	89 2f       	mov	r24, r25
    1566:	9a 2f       	mov	r25, r26
    1568:	ab 2f       	mov	r26, r27
    156a:	bb 27       	eor	r27, r27
    156c:	8b 83       	std	Y+3, r24	; 0x03
  uint8_t u2 = (uint8_t) (value >> 16);
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	af 81       	ldd	r26, Y+7	; 0x07
    1574:	b8 85       	ldd	r27, Y+8	; 0x08
    1576:	cd 01       	movw	r24, r26
    1578:	aa 27       	eor	r26, r26
    157a:	bb 27       	eor	r27, r27
    157c:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t u3 = (uint8_t) (value >> 24);
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	af 81       	ldd	r26, Y+7	; 0x07
    1584:	b8 85       	ldd	r27, Y+8	; 0x08
    1586:	8b 2f       	mov	r24, r27
    1588:	99 27       	eor	r25, r25
    158a:	aa 27       	eor	r26, r26
    158c:	bb 27       	eor	r27, r27
    158e:	89 83       	std	Y+1, r24	; 0x01

  SPDR = u3;
    1590:	ef e2       	ldi	r30, 0x2F	; 47
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	80 83       	st	Z, r24
  while (!(SPSR & _BV(SPIF)))
    1598:	ee e2       	ldi	r30, 0x2E	; 46
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	88 23       	and	r24, r24
    15a0:	dc f7       	brge	.-10     	; 0x1598 <shift32_output+0x98>
    ;

  SPDR = u2;
    15a2:	ef e2       	ldi	r30, 0x2F	; 47
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	80 83       	st	Z, r24
  while (!(SPSR & _BV(SPIF)))
    15aa:	ee e2       	ldi	r30, 0x2E	; 46
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	88 23       	and	r24, r24
    15b2:	dc f7       	brge	.-10     	; 0x15aa <shift32_output+0xaa>
    ;

  SPDR = u1;
    15b4:	ef e2       	ldi	r30, 0x2F	; 47
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	80 83       	st	Z, r24
  while (!(SPSR & _BV(SPIF)))
    15bc:	ee e2       	ldi	r30, 0x2E	; 46
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	88 23       	and	r24, r24
    15c4:	dc f7       	brge	.-10     	; 0x15bc <shift32_output+0xbc>
    ;

  SPDR = u0;
    15c6:	ef e2       	ldi	r30, 0x2F	; 47
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	80 83       	st	Z, r24
  while (!(SPSR & _BV(SPIF)))
    15ce:	ee e2       	ldi	r30, 0x2E	; 46
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	88 23       	and	r24, r24
    15d6:	dc f7       	brge	.-10     	; 0x15ce <shift32_output+0xce>
    ;

  /* latch data */
  SHIFT_SR_SPI_PORT &= ~_BV(SHIFT_SR_SPI_RCLK);
    15d8:	a8 e3       	ldi	r26, 0x38	; 56
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e8 e3       	ldi	r30, 0x38	; 56
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8f 7e       	andi	r24, 0xEF	; 239
    15e4:	8c 93       	st	X, r24
  SHIFT_SR_SPI_PORT |= _BV(SHIFT_SR_SPI_RCLK);
    15e6:	a8 e3       	ldi	r26, 0x38	; 56
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e8 e3       	ldi	r30, 0x38	; 56
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 61       	ori	r24, 0x10	; 16
    15f2:	8c 93       	st	X, r24
}
    15f4:	28 96       	adiw	r28, 0x08	; 8
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <shift_init>:

void
shift_init(void)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
  SHIFT_SR_SPI_DDR |= _BV(SHIFT_SR_SPI_MOSI) | _BV(SHIFT_SR_SPI_RCLK) | _BV(SHIFT_SR_SPI_SCK);
    160e:	a7 e3       	ldi	r26, 0x37	; 55
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e7 e3       	ldi	r30, 0x37	; 55
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	80 6b       	ori	r24, 0xB0	; 176
    161a:	8c 93       	st	X, r24
  SHIFT_SR_SPI_DDR &= ~_BV(SHIFT_SR_SPI_MISO); /* MISO muss eingang sein */
    161c:	a7 e3       	ldi	r26, 0x37	; 55
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e7 e3       	ldi	r30, 0x37	; 55
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8f 7b       	andi	r24, 0xBF	; 191
    1628:	8c 93       	st	X, r24
  SHIFT_SR_SPI_PORT |= _BV(SHIFT_SR_SPI_RCLK) | _BV(SHIFT_SR_SPI_MISO);
    162a:	a8 e3       	ldi	r26, 0x38	; 56
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e8 e3       	ldi	r30, 0x38	; 56
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	80 65       	ori	r24, 0x50	; 80
    1636:	8c 93       	st	X, r24

  SPCR = _BV(SPE) | _BV(MSTR) | _BV(CPOL) | _BV(SPR0) | _BV(SPR1);
    1638:	ed e2       	ldi	r30, 0x2D	; 45
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8b e5       	ldi	r24, 0x5B	; 91
    163e:	80 83       	st	Z, r24

  SPSR |= _BV(SPI2X);
    1640:	ae e2       	ldi	r26, 0x2E	; 46
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ee e2       	ldi	r30, 0x2E	; 46
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	8c 93       	st	X, r24

  shift32_output(0xFFFFFFFF);
    164e:	6f ef       	ldi	r22, 0xFF	; 255
    1650:	7f ef       	ldi	r23, 0xFF	; 255
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	9f ef       	ldi	r25, 0xFF	; 255
    1656:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
  shift32_output(0xFFFFFFFF);
    165a:	6f ef       	ldi	r22, 0xFF	; 255
    165c:	7f ef       	ldi	r23, 0xFF	; 255
    165e:	8f ef       	ldi	r24, 0xFF	; 255
    1660:	9f ef       	ldi	r25, 0xFF	; 255
    1662:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <__vector_13>:
volatile uint8_t uart_str_complete = 0;
volatile uint8_t uart_str_count = 0;
volatile char uart_string[UART_MAXSTRLEN + 1] = "";

ISR(SIG_UART_RECV)
{
    166c:	1f 92       	push	r1
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	0f 92       	push	r0
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
  unsigned char nextChar;

  nextChar = UDR;
    1688:	ec e2       	ldi	r30, 0x2C	; 44
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	89 83       	std	Y+1, r24	; 0x01
  if (uart_str_complete == 0)
    1690:	80 91 f2 04 	lds	r24, 0x04F2
    1694:	88 23       	and	r24, r24
    1696:	31 f5       	brne	.+76     	; 0x16e4 <__vector_13+0x78>
  {

    if (nextChar != '\n' && nextChar != '\r' && uart_str_count < UART_MAXSTRLEN - 1)
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	8a 30       	cpi	r24, 0x0A	; 10
    169c:	b1 f0       	breq	.+44     	; 0x16ca <__vector_13+0x5e>
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	8d 30       	cpi	r24, 0x0D	; 13
    16a2:	99 f0       	breq	.+38     	; 0x16ca <__vector_13+0x5e>
    16a4:	80 91 f3 04 	lds	r24, 0x04F3
    16a8:	83 36       	cpi	r24, 0x63	; 99
    16aa:	78 f4       	brcc	.+30     	; 0x16ca <__vector_13+0x5e>
    {
      uart_string[uart_str_count] = nextChar;
    16ac:	80 91 f3 04 	lds	r24, 0x04F3
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	fc 01       	movw	r30, r24
    16b6:	eb 54       	subi	r30, 0x4B	; 75
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	80 83       	st	Z, r24
      uart_str_count++;
    16be:	80 91 f3 04 	lds	r24, 0x04F3
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	80 93 f3 04 	sts	0x04F3, r24
    16c8:	0d c0       	rjmp	.+26     	; 0x16e4 <__vector_13+0x78>
    }
    else
    {
      uart_string[uart_str_count] = '\0';
    16ca:	80 91 f3 04 	lds	r24, 0x04F3
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	fc 01       	movw	r30, r24
    16d4:	eb 54       	subi	r30, 0x4B	; 75
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	10 82       	st	Z, r1
      uart_str_count = 0;
    16da:	10 92 f3 04 	sts	0x04F3, r1
      uart_str_complete = 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	80 93 f2 04 	sts	0x04F2, r24
    }
  }
}
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	0f 90       	pop	r0
    16f8:	1f 90       	pop	r1
    16fa:	18 95       	reti

000016fc <hex2dez_c>:

int
hex2dez_c(char h)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <hex2dez_c+0x6>
    1702:	0f 92       	push	r0
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	8b 83       	std	Y+3, r24	; 0x03
  int res = -1;
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	9f ef       	ldi	r25, 0xFF	; 255
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01
  if (h >= '0' && h <= '9')
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	80 33       	cpi	r24, 0x30	; 48
    1716:	50 f0       	brcs	.+20     	; 0x172c <hex2dez_c+0x30>
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	8a 33       	cpi	r24, 0x3A	; 58
    171c:	38 f4       	brcc	.+14     	; 0x172c <hex2dez_c+0x30>
  {
    res = (h - '0');
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	c0 97       	sbiw	r24, 0x30	; 48
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	1a c0       	rjmp	.+52     	; 0x1760 <hex2dez_c+0x64>
  }
  else if (h >= 'A' && h <= 'F')
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	81 34       	cpi	r24, 0x41	; 65
    1730:	50 f0       	brcs	.+20     	; 0x1746 <hex2dez_c+0x4a>
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	87 34       	cpi	r24, 0x47	; 71
    1736:	38 f4       	brcc	.+14     	; 0x1746 <hex2dez_c+0x4a>
  {
    res = (h - 'A' + 10);
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	c7 97       	sbiw	r24, 0x37	; 55
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <hex2dez_c+0x64>
  }
  else if (h >= 'a' && h <= 'f')
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	81 36       	cpi	r24, 0x61	; 97
    174a:	50 f0       	brcs	.+20     	; 0x1760 <hex2dez_c+0x64>
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	87 36       	cpi	r24, 0x67	; 103
    1750:	38 f4       	brcc	.+14     	; 0x1760 <hex2dez_c+0x64>
  {
    res = (h - 'a' + 10);
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	87 55       	subi	r24, 0x57	; 87
    175a:	90 40       	sbci	r25, 0x00	; 0
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
  }
  return res;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <hex2dez>:

int
hex2dez(char *h)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	28 97       	sbiw	r28, 0x08	; 8
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	9e 83       	std	Y+6, r25	; 0x06
    1786:	8d 83       	std	Y+5, r24	; 0x05
  int res1 = hex2dez_c(h[0]);
    1788:	ed 81       	ldd	r30, Y+5	; 0x05
    178a:	fe 81       	ldd	r31, Y+6	; 0x06
    178c:	80 81       	ld	r24, Z
    178e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <hex2dez_c>
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
  int res2 = hex2dez_c(h[1]);
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	fc 01       	movw	r30, r24
    179c:	31 96       	adiw	r30, 0x01	; 1
    179e:	80 81       	ld	r24, Z
    17a0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <hex2dez_c>
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
  if (res1 < 0 || res2 < 0)
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	99 23       	and	r25, r25
    17ae:	24 f0       	brlt	.+8      	; 0x17b8 <hex2dez+0x48>
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	99 23       	and	r25, r25
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <hex2dez+0x52>
    return -1;
    17b8:	4f ef       	ldi	r20, 0xFF	; 255
    17ba:	5f ef       	ldi	r21, 0xFF	; 255
    17bc:	58 87       	std	Y+8, r21	; 0x08
    17be:	4f 83       	std	Y+7, r20	; 0x07
    17c0:	10 c0       	rjmp	.+32     	; 0x17e2 <hex2dez+0x72>
  return (res1 << 4) + res2;
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	9c 01       	movw	r18, r24
    17c8:	22 95       	swap	r18
    17ca:	32 95       	swap	r19
    17cc:	30 7f       	andi	r19, 0xF0	; 240
    17ce:	32 27       	eor	r19, r18
    17d0:	20 7f       	andi	r18, 0xF0	; 240
    17d2:	32 27       	eor	r19, r18
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	a9 01       	movw	r20, r18
    17da:	48 0f       	add	r20, r24
    17dc:	59 1f       	adc	r21, r25
    17de:	58 87       	std	Y+8, r21	; 0x08
    17e0:	4f 83       	std	Y+7, r20	; 0x07
    17e2:	8f 81       	ldd	r24, Y+7	; 0x07
    17e4:	98 85       	ldd	r25, Y+8	; 0x08
}
    17e6:	28 96       	adiw	r28, 0x08	; 8
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <TimeInfo>:
      0b01000000000000000000000000000000 //
    };

void
TimeInfo(DATETIME time)
{
    17f8:	cf 92       	push	r12
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	c1 58       	subi	r28, 0x81	; 129
    180e:	d0 40       	sbci	r29, 0x00	; 0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	fe 01       	movw	r30, r28
    181c:	eb 59       	subi	r30, 0x9B	; 155
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	c0 82       	st	Z, r12
    1822:	d1 82       	std	Z+1, r13	; 0x01
    1824:	e2 82       	std	Z+2, r14	; 0x02
    1826:	f3 82       	std	Z+3, r15	; 0x03
    1828:	04 83       	std	Z+4, r16	; 0x04
    182a:	15 83       	std	Z+5, r17	; 0x05
    182c:	26 83       	std	Z+6, r18	; 0x06
    182e:	37 83       	std	Z+7, r19	; 0x07
    1830:	40 87       	std	Z+8, r20	; 0x08
    1832:	51 87       	std	Z+9, r21	; 0x09
    1834:	62 87       	std	Z+10, r22	; 0x0a
    1836:	73 87       	std	Z+11, r23	; 0x0b
    1838:	84 87       	std	Z+12, r24	; 0x0c
  char s[100];
  sprintf(s, "NOW:  %02d:%02d:%02d %s %02d.%02d.%4d UTC%+d %s\r\n", time.hh, time.mm, time.ss, "x", time.DD, time.MM, time.YY + 2000, rtc_offset, time.dst != 0 ? "DST" : "");
    183a:	fe 01       	movw	r30, r28
    183c:	eb 59       	subi	r30, 0x9B	; 155
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	83 81       	ldd	r24, Z+3	; 0x03
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	c0 58       	subi	r28, 0x80	; 128
    1848:	df 4f       	sbci	r29, 0xFF	; 255
    184a:	39 83       	std	Y+1, r19	; 0x01
    184c:	28 83       	st	Y, r18
    184e:	c0 58       	subi	r28, 0x80	; 128
    1850:	d0 40       	sbci	r29, 0x00	; 0
    1852:	fe 01       	movw	r30, r28
    1854:	eb 59       	subi	r30, 0x9B	; 155
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	84 81       	ldd	r24, Z+4	; 0x04
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	c2 58       	subi	r28, 0x82	; 130
    1860:	df 4f       	sbci	r29, 0xFF	; 255
    1862:	39 83       	std	Y+1, r19	; 0x01
    1864:	28 83       	st	Y, r18
    1866:	ce 57       	subi	r28, 0x7E	; 126
    1868:	d0 40       	sbci	r29, 0x00	; 0
    186a:	fe 01       	movw	r30, r28
    186c:	eb 59       	subi	r30, 0x9B	; 155
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	85 81       	ldd	r24, Z+5	; 0x05
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	ee 96       	adiw	r28, 0x3e	; 62
    1878:	3f af       	std	Y+63, r19	; 0x3f
    187a:	2e af       	std	Y+62, r18	; 0x3e
    187c:	ee 97       	sbiw	r28, 0x3e	; 62
    187e:	fe 01       	movw	r30, r28
    1880:	eb 59       	subi	r30, 0x9B	; 155
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	ec 96       	adiw	r28, 0x3c	; 60
    188c:	3f af       	std	Y+63, r19	; 0x3f
    188e:	2e af       	std	Y+62, r18	; 0x3e
    1890:	ec 97       	sbiw	r28, 0x3c	; 60
    1892:	fe 01       	movw	r30, r28
    1894:	eb 59       	subi	r30, 0x9B	; 155
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	81 81       	ldd	r24, Z+1	; 0x01
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	ea 96       	adiw	r28, 0x3a	; 58
    18a0:	3f af       	std	Y+63, r19	; 0x3f
    18a2:	2e af       	std	Y+62, r18	; 0x3e
    18a4:	ea 97       	sbiw	r28, 0x3a	; 58
    18a6:	fe 01       	movw	r30, r28
    18a8:	eb 59       	subi	r30, 0x9B	; 155
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9c 01       	movw	r18, r24
    18b4:	20 53       	subi	r18, 0x30	; 48
    18b6:	38 4f       	sbci	r19, 0xF8	; 248
    18b8:	e8 96       	adiw	r28, 0x38	; 56
    18ba:	3f af       	std	Y+63, r19	; 0x3f
    18bc:	2e af       	std	Y+62, r18	; 0x3e
    18be:	e8 97       	sbiw	r28, 0x38	; 56
    18c0:	80 91 a5 04 	lds	r24, 0x04A5
    18c4:	28 2f       	mov	r18, r24
    18c6:	33 27       	eor	r19, r19
    18c8:	27 fd       	sbrc	r18, 7
    18ca:	30 95       	com	r19
    18cc:	e6 96       	adiw	r28, 0x36	; 54
    18ce:	3f af       	std	Y+63, r19	; 0x3f
    18d0:	2e af       	std	Y+62, r18	; 0x3e
    18d2:	e6 97       	sbiw	r28, 0x36	; 54
    18d4:	fe 01       	movw	r30, r28
    18d6:	eb 59       	subi	r30, 0x9B	; 155
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	87 81       	ldd	r24, Z+7	; 0x07
    18dc:	88 23       	and	r24, r24
    18de:	39 f0       	breq	.+14     	; 0x18ee <TimeInfo+0xf6>
    18e0:	8a e1       	ldi	r24, 0x1A	; 26
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	e4 96       	adiw	r28, 0x34	; 52
    18e6:	9f af       	std	Y+63, r25	; 0x3f
    18e8:	8e af       	std	Y+62, r24	; 0x3e
    18ea:	e4 97       	sbiw	r28, 0x34	; 52
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <TimeInfo+0x102>
    18ee:	2e e1       	ldi	r18, 0x1E	; 30
    18f0:	31 e0       	ldi	r19, 0x01	; 1
    18f2:	e4 96       	adiw	r28, 0x34	; 52
    18f4:	3f af       	std	Y+63, r19	; 0x3f
    18f6:	2e af       	std	Y+62, r18	; 0x3e
    18f8:	e4 97       	sbiw	r28, 0x34	; 52
    18fa:	8d b7       	in	r24, 0x3d	; 61
    18fc:	9e b7       	in	r25, 0x3e	; 62
    18fe:	46 97       	sbiw	r24, 0x16	; 22
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	9e bf       	out	0x3e, r25	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	8d bf       	out	0x3d, r24	; 61
    190a:	ed b7       	in	r30, 0x3d	; 61
    190c:	fe b7       	in	r31, 0x3e	; 62
    190e:	31 96       	adiw	r30, 0x01	; 1
    1910:	ce 01       	movw	r24, r28
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	80 83       	st	Z, r24
    1918:	8f e1       	ldi	r24, 0x1F	; 31
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	93 83       	std	Z+3, r25	; 0x03
    191e:	82 83       	std	Z+2, r24	; 0x02
    1920:	c0 58       	subi	r28, 0x80	; 128
    1922:	df 4f       	sbci	r29, 0xFF	; 255
    1924:	28 81       	ld	r18, Y
    1926:	39 81       	ldd	r19, Y+1	; 0x01
    1928:	c0 58       	subi	r28, 0x80	; 128
    192a:	d0 40       	sbci	r29, 0x00	; 0
    192c:	35 83       	std	Z+5, r19	; 0x05
    192e:	24 83       	std	Z+4, r18	; 0x04
    1930:	c2 58       	subi	r28, 0x82	; 130
    1932:	df 4f       	sbci	r29, 0xFF	; 255
    1934:	88 81       	ld	r24, Y
    1936:	99 81       	ldd	r25, Y+1	; 0x01
    1938:	ce 57       	subi	r28, 0x7E	; 126
    193a:	d0 40       	sbci	r29, 0x00	; 0
    193c:	97 83       	std	Z+7, r25	; 0x07
    193e:	86 83       	std	Z+6, r24	; 0x06
    1940:	ee 96       	adiw	r28, 0x3e	; 62
    1942:	2e ad       	ldd	r18, Y+62	; 0x3e
    1944:	3f ad       	ldd	r19, Y+63	; 0x3f
    1946:	ee 97       	sbiw	r28, 0x3e	; 62
    1948:	31 87       	std	Z+9, r19	; 0x09
    194a:	20 87       	std	Z+8, r18	; 0x08
    194c:	81 e5       	ldi	r24, 0x51	; 81
    194e:	91 e0       	ldi	r25, 0x01	; 1
    1950:	93 87       	std	Z+11, r25	; 0x0b
    1952:	82 87       	std	Z+10, r24	; 0x0a
    1954:	ec 96       	adiw	r28, 0x3c	; 60
    1956:	8e ad       	ldd	r24, Y+62	; 0x3e
    1958:	9f ad       	ldd	r25, Y+63	; 0x3f
    195a:	ec 97       	sbiw	r28, 0x3c	; 60
    195c:	95 87       	std	Z+13, r25	; 0x0d
    195e:	84 87       	std	Z+12, r24	; 0x0c
    1960:	ea 96       	adiw	r28, 0x3a	; 58
    1962:	2e ad       	ldd	r18, Y+62	; 0x3e
    1964:	3f ad       	ldd	r19, Y+63	; 0x3f
    1966:	ea 97       	sbiw	r28, 0x3a	; 58
    1968:	37 87       	std	Z+15, r19	; 0x0f
    196a:	26 87       	std	Z+14, r18	; 0x0e
    196c:	e8 96       	adiw	r28, 0x38	; 56
    196e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1970:	9f ad       	ldd	r25, Y+63	; 0x3f
    1972:	e8 97       	sbiw	r28, 0x38	; 56
    1974:	91 8b       	std	Z+17, r25	; 0x11
    1976:	80 8b       	std	Z+16, r24	; 0x10
    1978:	e6 96       	adiw	r28, 0x36	; 54
    197a:	2e ad       	ldd	r18, Y+62	; 0x3e
    197c:	3f ad       	ldd	r19, Y+63	; 0x3f
    197e:	e6 97       	sbiw	r28, 0x36	; 54
    1980:	33 8b       	std	Z+19, r19	; 0x13
    1982:	22 8b       	std	Z+18, r18	; 0x12
    1984:	e4 96       	adiw	r28, 0x34	; 52
    1986:	8e ad       	ldd	r24, Y+62	; 0x3e
    1988:	9f ad       	ldd	r25, Y+63	; 0x3f
    198a:	e4 97       	sbiw	r28, 0x34	; 52
    198c:	95 8b       	std	Z+21, r25	; 0x15
    198e:	84 8b       	std	Z+20, r24	; 0x14
    1990:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    1994:	2d b7       	in	r18, 0x3d	; 61
    1996:	3e b7       	in	r19, 0x3e	; 62
    1998:	2a 5e       	subi	r18, 0xEA	; 234
    199a:	3f 4f       	sbci	r19, 0xFF	; 255
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	3e bf       	out	0x3e, r19	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	2d bf       	out	0x3d, r18	; 61
  uartPuts(s);
    19a6:	ce 01       	movw	r24, r28
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  //	sprintf(s, "Sun: %%%d %02d:%02d - %02d:%02d\r\n", time.sunrise,
  //			time.sunrisehh, time.sunrisemm, time.sunfallhh, time.sunfallmm);
  //	uartPuts(s);
}
    19ae:	cf 57       	subi	r28, 0x7F	; 127
    19b0:	df 4f       	sbci	r29, 0xFF	; 255
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	df 90       	pop	r13
    19ca:	cf 90       	pop	r12
    19cc:	08 95       	ret

000019ce <main>:

int
main()
{
    19ce:	cf 92       	push	r12
    19d0:	df 92       	push	r13
    19d2:	ef 92       	push	r14
    19d4:	ff 92       	push	r15
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	cb 5a       	subi	r28, 0xAB	; 171
    19e4:	d3 40       	sbci	r29, 0x03	; 3
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
  wdt_reset();
    19f0:	a8 95       	wdr
  cli();
    19f2:	f8 94       	cli
  UCSRB |= _BV(TXEN) | _BV(RXEN) | _BV(RXCIE);
    19f4:	aa e2       	ldi	r26, 0x2A	; 42
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ea e2       	ldi	r30, 0x2A	; 42
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	88 69       	ori	r24, 0x98	; 152
    1a00:	8c 93       	st	X, r24
  UCSRC |= _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);
    1a02:	a0 e4       	ldi	r26, 0x40	; 64
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e0 e4       	ldi	r30, 0x40	; 64
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	86 68       	ori	r24, 0x86	; 134
    1a0e:	8c 93       	st	X, r24

  PORTC &= ~(1<<PC7);
    1a10:	a5 e3       	ldi	r26, 0x35	; 53
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e3       	ldi	r30, 0x35	; 53
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8f 77       	andi	r24, 0x7F	; 127
    1a1c:	8c 93       	st	X, r24
  DDRC |= (1<<PC7);
    1a1e:	a4 e3       	ldi	r26, 0x34	; 52
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e4 e3       	ldi	r30, 0x34	; 52
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 68       	ori	r24, 0x80	; 128
    1a2a:	8c 93       	st	X, r24

  UBRRH = 0x00;
    1a2c:	e0 e4       	ldi	r30, 0x40	; 64
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	10 82       	st	Z, r1
  UBRRL = 0x08;
    1a32:	e9 e2       	ldi	r30, 0x29	; 41
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	88 e0       	ldi	r24, 0x08	; 8
    1a38:	80 83       	st	Z, r24

  uartPuts("\r\n\r\n\r\n\r\n\r\n\r\n\r\nWordClock V0.1 initializing...\r\n\r\n");
    1a3a:	85 e8       	ldi	r24, 0x85	; 133
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>

  uartPuts("\r\nReset-Cause:");
    1a42:	86 eb       	ldi	r24, 0xB6	; 182
    1a44:	91 e0       	ldi	r25, 0x01	; 1
    1a46:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  switch (MCUCSR & 0x1f)
    1a4a:	e4 e5       	ldi	r30, 0x54	; 84
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c 01       	movw	r18, r24
    1a56:	2f 71       	andi	r18, 0x1F	; 31
    1a58:	30 70       	andi	r19, 0x00	; 0
    1a5a:	cb 55       	subi	r28, 0x5B	; 91
    1a5c:	dc 4f       	sbci	r29, 0xFC	; 252
    1a5e:	39 83       	std	Y+1, r19	; 0x01
    1a60:	28 83       	st	Y, r18
    1a62:	c5 5a       	subi	r28, 0xA5	; 165
    1a64:	d3 40       	sbci	r29, 0x03	; 3
    1a66:	cb 55       	subi	r28, 0x5B	; 91
    1a68:	dc 4f       	sbci	r29, 0xFC	; 252
    1a6a:	88 81       	ld	r24, Y
    1a6c:	99 81       	ldd	r25, Y+1	; 0x01
    1a6e:	c5 5a       	subi	r28, 0xA5	; 165
    1a70:	d3 40       	sbci	r29, 0x03	; 3
    1a72:	84 30       	cpi	r24, 0x04	; 4
    1a74:	91 05       	cpc	r25, r1
    1a76:	c9 f1       	breq	.+114    	; 0x1aea <main+0x11c>
    1a78:	cb 55       	subi	r28, 0x5B	; 91
    1a7a:	dc 4f       	sbci	r29, 0xFC	; 252
    1a7c:	e8 81       	ld	r30, Y
    1a7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a80:	c5 5a       	subi	r28, 0xA5	; 165
    1a82:	d3 40       	sbci	r29, 0x03	; 3
    1a84:	e5 30       	cpi	r30, 0x05	; 5
    1a86:	f1 05       	cpc	r31, r1
    1a88:	9c f4       	brge	.+38     	; 0x1ab0 <main+0xe2>
    1a8a:	cb 55       	subi	r28, 0x5B	; 91
    1a8c:	dc 4f       	sbci	r29, 0xFC	; 252
    1a8e:	28 81       	ld	r18, Y
    1a90:	39 81       	ldd	r19, Y+1	; 0x01
    1a92:	c5 5a       	subi	r28, 0xA5	; 165
    1a94:	d3 40       	sbci	r29, 0x03	; 3
    1a96:	21 30       	cpi	r18, 0x01	; 1
    1a98:	31 05       	cpc	r19, r1
    1a9a:	e9 f0       	breq	.+58     	; 0x1ad6 <main+0x108>
    1a9c:	cb 55       	subi	r28, 0x5B	; 91
    1a9e:	dc 4f       	sbci	r29, 0xFC	; 252
    1aa0:	88 81       	ld	r24, Y
    1aa2:	99 81       	ldd	r25, Y+1	; 0x01
    1aa4:	c5 5a       	subi	r28, 0xA5	; 165
    1aa6:	d3 40       	sbci	r29, 0x03	; 3
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	91 05       	cpc	r25, r1
    1aac:	c9 f0       	breq	.+50     	; 0x1ae0 <main+0x112>
    1aae:	2c c0       	rjmp	.+88     	; 0x1b08 <main+0x13a>
    1ab0:	cb 55       	subi	r28, 0x5B	; 91
    1ab2:	dc 4f       	sbci	r29, 0xFC	; 252
    1ab4:	e8 81       	ld	r30, Y
    1ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab8:	c5 5a       	subi	r28, 0xA5	; 165
    1aba:	d3 40       	sbci	r29, 0x03	; 3
    1abc:	e8 30       	cpi	r30, 0x08	; 8
    1abe:	f1 05       	cpc	r31, r1
    1ac0:	c9 f0       	breq	.+50     	; 0x1af4 <main+0x126>
    1ac2:	cb 55       	subi	r28, 0x5B	; 91
    1ac4:	dc 4f       	sbci	r29, 0xFC	; 252
    1ac6:	28 81       	ld	r18, Y
    1ac8:	39 81       	ldd	r19, Y+1	; 0x01
    1aca:	c5 5a       	subi	r28, 0xA5	; 165
    1acc:	d3 40       	sbci	r29, 0x03	; 3
    1ace:	20 31       	cpi	r18, 0x10	; 16
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	a9 f0       	breq	.+42     	; 0x1afe <main+0x130>
    1ad4:	19 c0       	rjmp	.+50     	; 0x1b08 <main+0x13a>
  {
  case 1:
    uartPuts("Power-On Reset\r\n");
    1ad6:	85 ec       	ldi	r24, 0xC5	; 197
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    1ade:	18 c0       	rjmp	.+48     	; 0x1b10 <main+0x142>
    break;
  case 2:
    uartPuts("External Reset\r\n");
    1ae0:	86 ed       	ldi	r24, 0xD6	; 214
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <main+0x142>
    break;
  case 4:
    uartPuts("Brown-Out Reset\r\n");
    1aea:	87 ee       	ldi	r24, 0xE7	; 231
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    1af2:	0e c0       	rjmp	.+28     	; 0x1b10 <main+0x142>
    break;
  case 8:
    uartPuts("Watchdog Reset\r\n");
    1af4:	89 ef       	ldi	r24, 0xF9	; 249
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <main+0x142>
    break;
  case 16:
    uartPuts("JTAG Reset\r\n");
    1afe:	8a e0       	ldi	r24, 0x0A	; 10
    1b00:	92 e0       	ldi	r25, 0x02	; 2
    1b02:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <main+0x142>
    break;
  default:
    uartPuts("unknown\r\n");
    1b08:	87 e1       	ldi	r24, 0x17	; 23
    1b0a:	92 e0       	ldi	r25, 0x02	; 2
    1b0c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    break;
  }
  MCUCSR = 0;
    1b10:	e4 e5       	ldi	r30, 0x54	; 84
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	10 82       	st	Z, r1

  uartPuts("\r\n... switch on RTC");
    1b16:	81 e2       	ldi	r24, 0x21	; 33
    1b18:	92 e0       	ldi	r25, 0x02	; 2
    1b1a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>

  for(int cyx=0;cyx<50;cyx++)
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e1 5a       	subi	r30, 0xA1	; 161
    1b22:	fd 4f       	sbci	r31, 0xFD	; 253
    1b24:	11 82       	std	Z+1, r1	; 0x01
    1b26:	10 82       	st	Z, r1
    1b28:	c0 c0       	rjmp	.+384    	; 0x1caa <main+0x2dc>
  {
    wdt_reset();
    1b2a:	a8 95       	wdr
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e1 5c       	subi	r30, 0xC1	; 193
    1b30:	fe 4f       	sbci	r31, 0xFE	; 254
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a0 e2       	ldi	r26, 0x20	; 32
    1b38:	b1 e4       	ldi	r27, 0x41	; 65
    1b3a:	80 83       	st	Z, r24
    1b3c:	91 83       	std	Z+1, r25	; 0x01
    1b3e:	a2 83       	std	Z+2, r26	; 0x02
    1b40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b42:	8e 01       	movw	r16, r28
    1b44:	05 5c       	subi	r16, 0xC5	; 197
    1b46:	1e 4f       	sbci	r17, 0xFE	; 254
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e1 5c       	subi	r30, 0xC1	; 193
    1b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a e7       	ldi	r20, 0x7A	; 122
    1b5c:	55 e4       	ldi	r21, 0x45	; 69
    1b5e:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	f8 01       	movw	r30, r16
    1b68:	80 83       	st	Z, r24
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	a2 83       	std	Z+2, r26	; 0x02
    1b6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b70:	fe 01       	movw	r30, r28
    1b72:	e5 5c       	subi	r30, 0xC5	; 197
    1b74:	fe 4f       	sbci	r31, 0xFE	; 254
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e8       	ldi	r20, 0x80	; 128
    1b84:	5f e3       	ldi	r21, 0x3F	; 63
    1b86:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    1b8a:	88 23       	and	r24, r24
    1b8c:	44 f4       	brge	.+16     	; 0x1b9e <main+0x1d0>
		__ticks = 1;
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e7 5c       	subi	r30, 0xC7	; 199
    1b92:	fe 4f       	sbci	r31, 0xFE	; 254
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
    1b9c:	64 c0       	rjmp	.+200    	; 0x1c66 <main+0x298>
	else if (__tmp > 65535)
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e5 5c       	subi	r30, 0xC5	; 197
    1ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	0c f0       	brlt	.+2      	; 0x1bbe <main+0x1f0>
    1bbc:	43 c0       	rjmp	.+134    	; 0x1c44 <main+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e1 5c       	subi	r30, 0xC1	; 193
    1bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e2       	ldi	r20, 0x20	; 32
    1bd2:	51 e4       	ldi	r21, 0x41	; 65
    1bd4:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8e 01       	movw	r16, r28
    1bde:	07 5c       	subi	r16, 0xC7	; 199
    1be0:	1e 4f       	sbci	r17, 0xFE	; 254
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	f8 01       	movw	r30, r16
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
    1bf4:	1f c0       	rjmp	.+62     	; 0x1c34 <main+0x266>
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e9 5c       	subi	r30, 0xC9	; 201
    1bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfc:	80 e9       	ldi	r24, 0x90	; 144
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	91 83       	std	Z+1, r25	; 0x01
    1c02:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c04:	fe 01       	movw	r30, r28
    1c06:	e9 5c       	subi	r30, 0xC9	; 201
    1c08:	fe 4f       	sbci	r31, 0xFE	; 254
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <main+0x240>
    1c12:	fe 01       	movw	r30, r28
    1c14:	e9 5c       	subi	r30, 0xC9	; 201
    1c16:	fe 4f       	sbci	r31, 0xFE	; 254
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1c:	de 01       	movw	r26, r28
    1c1e:	a7 5c       	subi	r26, 0xC7	; 199
    1c20:	be 4f       	sbci	r27, 0xFE	; 254
    1c22:	fe 01       	movw	r30, r28
    1c24:	e7 5c       	subi	r30, 0xC7	; 199
    1c26:	fe 4f       	sbci	r31, 0xFE	; 254
    1c28:	80 81       	ld	r24, Z
    1c2a:	91 81       	ldd	r25, Z+1	; 0x01
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	11 96       	adiw	r26, 0x01	; 1
    1c30:	9c 93       	st	X, r25
    1c32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c34:	fe 01       	movw	r30, r28
    1c36:	e7 5c       	subi	r30, 0xC7	; 199
    1c38:	fe 4f       	sbci	r31, 0xFE	; 254
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	d1 f6       	brne	.-76     	; 0x1bf6 <main+0x228>
    1c42:	27 c0       	rjmp	.+78     	; 0x1c92 <main+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c44:	8e 01       	movw	r16, r28
    1c46:	07 5c       	subi	r16, 0xC7	; 199
    1c48:	1e 4f       	sbci	r17, 0xFE	; 254
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e5 5c       	subi	r30, 0xC5	; 197
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	f8 01       	movw	r30, r16
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
    1c66:	de 01       	movw	r26, r28
    1c68:	ab 5c       	subi	r26, 0xCB	; 203
    1c6a:	be 4f       	sbci	r27, 0xFE	; 254
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e7 5c       	subi	r30, 0xC7	; 199
    1c70:	fe 4f       	sbci	r31, 0xFE	; 254
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	8d 93       	st	X+, r24
    1c78:	9c 93       	st	X, r25
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	eb 5c       	subi	r30, 0xCB	; 203
    1c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <main+0x2b6>
    1c88:	fe 01       	movw	r30, r28
    1c8a:	eb 5c       	subi	r30, 0xCB	; 203
    1c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
  }
  MCUCSR = 0;

  uartPuts("\r\n... switch on RTC");

  for(int cyx=0;cyx<50;cyx++)
    1c92:	de 01       	movw	r26, r28
    1c94:	a1 5a       	subi	r26, 0xA1	; 161
    1c96:	bd 4f       	sbci	r27, 0xFD	; 253
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e1 5a       	subi	r30, 0xA1	; 161
    1c9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	11 96       	adiw	r26, 0x01	; 1
    1ca6:	9c 93       	st	X, r25
    1ca8:	8e 93       	st	-X, r24
    1caa:	fe 01       	movw	r30, r28
    1cac:	e1 5a       	subi	r30, 0xA1	; 161
    1cae:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb0:	80 81       	ld	r24, Z
    1cb2:	91 81       	ldd	r25, Z+1	; 0x01
    1cb4:	82 33       	cpi	r24, 0x32	; 50
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	0c f4       	brge	.+2      	; 0x1cbc <main+0x2ee>
    1cba:	37 cf       	rjmp	.-402    	; 0x1b2a <main+0x15c>
  {
    wdt_reset();
    _delay_ms(10);
  }
  PORTC |= (1<<PC7);
    1cbc:	a5 e3       	ldi	r26, 0x35	; 53
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e5 e3       	ldi	r30, 0x35	; 53
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 68       	ori	r24, 0x80	; 128
    1cc8:	8c 93       	st	X, r24
  for(int cyx=0;cyx<50;cyx++)
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e3 5a       	subi	r30, 0xA3	; 163
    1cce:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd0:	11 82       	std	Z+1, r1	; 0x01
    1cd2:	10 82       	st	Z, r1
    1cd4:	c0 c0       	rjmp	.+384    	; 0x1e56 <main+0x488>
  {
    wdt_reset();
    1cd6:	a8 95       	wdr
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ef 5c       	subi	r30, 0xCF	; 207
    1cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e2       	ldi	r26, 0x20	; 32
    1ce4:	b1 e4       	ldi	r27, 0x41	; 65
    1ce6:	80 83       	st	Z, r24
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	a2 83       	std	Z+2, r26	; 0x02
    1cec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	8e 01       	movw	r16, r28
    1cf0:	03 5d       	subi	r16, 0xD3	; 211
    1cf2:	1e 4f       	sbci	r17, 0xFE	; 254
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ef 5c       	subi	r30, 0xCF	; 207
    1cf8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a e7       	ldi	r20, 0x7A	; 122
    1d08:	55 e4       	ldi	r21, 0x45	; 69
    1d0a:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	f8 01       	movw	r30, r16
    1d14:	80 83       	st	Z, r24
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	a2 83       	std	Z+2, r26	; 0x02
    1d1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e3 5d       	subi	r30, 0xD3	; 211
    1d20:	fe 4f       	sbci	r31, 0xFE	; 254
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	44 f4       	brge	.+16     	; 0x1d4a <main+0x37c>
		__ticks = 1;
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e5 5d       	subi	r30, 0xD5	; 213
    1d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	80 83       	st	Z, r24
    1d48:	64 c0       	rjmp	.+200    	; 0x1e12 <main+0x444>
	else if (__tmp > 65535)
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e3 5d       	subi	r30, 0xD3	; 211
    1d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	0c f0       	brlt	.+2      	; 0x1d6a <main+0x39c>
    1d68:	43 c0       	rjmp	.+134    	; 0x1df0 <main+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ef 5c       	subi	r30, 0xCF	; 207
    1d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8e 01       	movw	r16, r28
    1d8a:	05 5d       	subi	r16, 0xD5	; 213
    1d8c:	1e 4f       	sbci	r17, 0xFE	; 254
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	1f c0       	rjmp	.+62     	; 0x1de0 <main+0x412>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e7 5d       	subi	r30, 0xD7	; 215
    1da6:	fe 4f       	sbci	r31, 0xFE	; 254
    1da8:	80 e9       	ldi	r24, 0x90	; 144
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	fe 01       	movw	r30, r28
    1db2:	e7 5d       	subi	r30, 0xD7	; 215
    1db4:	fe 4f       	sbci	r31, 0xFE	; 254
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <main+0x3ec>
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e7 5d       	subi	r30, 0xD7	; 215
    1dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	de 01       	movw	r26, r28
    1dca:	a5 5d       	subi	r26, 0xD5	; 213
    1dcc:	be 4f       	sbci	r27, 0xFE	; 254
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e5 5d       	subi	r30, 0xD5	; 213
    1dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	11 96       	adiw	r26, 0x01	; 1
    1ddc:	9c 93       	st	X, r25
    1dde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	fe 01       	movw	r30, r28
    1de2:	e5 5d       	subi	r30, 0xD5	; 213
    1de4:	fe 4f       	sbci	r31, 0xFE	; 254
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	d1 f6       	brne	.-76     	; 0x1da2 <main+0x3d4>
    1dee:	27 c0       	rjmp	.+78     	; 0x1e3e <main+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	8e 01       	movw	r16, r28
    1df2:	05 5d       	subi	r16, 0xD5	; 213
    1df4:	1e 4f       	sbci	r17, 0xFE	; 254
    1df6:	fe 01       	movw	r30, r28
    1df8:	e3 5d       	subi	r30, 0xD3	; 211
    1dfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	de 01       	movw	r26, r28
    1e14:	a9 5d       	subi	r26, 0xD9	; 217
    1e16:	be 4f       	sbci	r27, 0xFE	; 254
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e5 5d       	subi	r30, 0xD5	; 213
    1e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	8d 93       	st	X+, r24
    1e24:	9c 93       	st	X, r25
    1e26:	fe 01       	movw	r30, r28
    1e28:	e9 5d       	subi	r30, 0xD9	; 217
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <main+0x462>
    1e34:	fe 01       	movw	r30, r28
    1e36:	e9 5d       	subi	r30, 0xD9	; 217
    1e38:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
  {
    wdt_reset();
    _delay_ms(10);
  }
  PORTC |= (1<<PC7);
  for(int cyx=0;cyx<50;cyx++)
    1e3e:	de 01       	movw	r26, r28
    1e40:	a3 5a       	subi	r26, 0xA3	; 163
    1e42:	bd 4f       	sbci	r27, 0xFD	; 253
    1e44:	fe 01       	movw	r30, r28
    1e46:	e3 5a       	subi	r30, 0xA3	; 163
    1e48:	fd 4f       	sbci	r31, 0xFD	; 253
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	11 96       	adiw	r26, 0x01	; 1
    1e52:	9c 93       	st	X, r25
    1e54:	8e 93       	st	-X, r24
    1e56:	fe 01       	movw	r30, r28
    1e58:	e3 5a       	subi	r30, 0xA3	; 163
    1e5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	82 33       	cpi	r24, 0x32	; 50
    1e62:	91 05       	cpc	r25, r1
    1e64:	0c f4       	brge	.+2      	; 0x1e68 <main+0x49a>
    1e66:	37 cf       	rjmp	.-402    	; 0x1cd6 <main+0x308>
  {
    wdt_reset();
    _delay_ms(10);
  }

  uartPuts("\r\n... WDT enable");
    1e68:	85 e3       	ldi	r24, 0x35	; 53
    1e6a:	92 e0       	ldi	r25, 0x02	; 2
    1e6c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  WDTCR = _BV(WDE) | 0b101;
    1e70:	e1 e4       	ldi	r30, 0x41	; 65
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8d e0       	ldi	r24, 0x0D	; 13
    1e76:	80 83       	st	Z, r24

  sei();
    1e78:	78 94       	sei

  uartPuts("\r\n... PWM");
    1e7a:	86 e4       	ldi	r24, 0x46	; 70
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  InitPWM();
    1e82:	0e 94 ba 09 	call	0x1374	; 0x1374 <InitPWM>
  SetColor(0xF, 0xFF, 0x00, 0x00);
    1e86:	8f e0       	ldi	r24, 0x0F	; 15
    1e88:	6f ef       	ldi	r22, 0xFF	; 255
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>

  wdt_reset();
    1e92:	a8 95       	wdr

  uartPuts("\r\n... Shifter");
    1e94:	80 e5       	ldi	r24, 0x50	; 80
    1e96:	92 e0       	ldi	r25, 0x02	; 2
    1e98:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  shift_init();
    1e9c:	0e 94 03 0b 	call	0x1606	; 0x1606 <shift_init>
  SetColor(0xF, 0xFF, 0xFF, 0x00);
    1ea0:	8f e0       	ldi	r24, 0x0F	; 15
    1ea2:	6f ef       	ldi	r22, 0xFF	; 255
    1ea4:	4f ef       	ldi	r20, 0xFF	; 255
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>

  wdt_reset();
    1eac:	a8 95       	wdr

  uartPuts("\r\n... LDR ADC");
    1eae:	8e e5       	ldi	r24, 0x5E	; 94
    1eb0:	92 e0       	ldi	r25, 0x02	; 2
    1eb2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  ldr_init();
    1eb6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <ldr_init>
  SetColor(0xF, 0x00, 0xFF, 0xFF);
    1eba:	8f e0       	ldi	r24, 0x0F	; 15
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	4f ef       	ldi	r20, 0xFF	; 255
    1ec0:	2f ef       	ldi	r18, 0xFF	; 255
    1ec2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>

  wdt_reset();
    1ec6:	a8 95       	wdr

  uartPuts("\r\n... RTC");
    1ec8:	8c e6       	ldi	r24, 0x6C	; 108
    1eca:	92 e0       	ldi	r25, 0x02	; 2
    1ecc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  DATETIME time;
  DATETIME utctime;
  uint8_t i2c_errorcode;
  uint8_t i2c_status;
  if (!i2c_rtc_init(&i2c_errorcode, &i2c_status)) // initialize rtc
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	85 57       	subi	r24, 0x75	; 117
    1ed4:	9d 4f       	sbci	r25, 0xFD	; 253
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	24 57       	subi	r18, 0x74	; 116
    1eda:	3d 4f       	sbci	r19, 0xFD	; 253
    1edc:	b9 01       	movw	r22, r18
    1ede:	0e 94 9e 08 	call	0x113c	; 0x113c <i2c_rtc_init>
    1ee2:	88 23       	and	r24, r24
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <main+0x51a>
    1ee6:	78 c1       	rjmp	.+752    	; 0x21d8 <main+0x80a>
  {
    uartPuts(" FAILED !!!\r\n");
    1ee8:	86 e7       	ldi	r24, 0x76	; 118
    1eea:	92 e0       	ldi	r25, 0x02	; 2
    1eec:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    for (;;)
    {
      SetColor(0xF, 0x00, 0x00, 0x00);
    1ef0:	8f e0       	ldi	r24, 0x0F	; 15
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
    1efc:	fe 01       	movw	r30, r28
    1efe:	ed 5d       	subi	r30, 0xDD	; 221
    1f00:	fe 4f       	sbci	r31, 0xFE	; 254
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 ea       	ldi	r26, 0xA0	; 160
    1f08:	b1 e4       	ldi	r27, 0x41	; 65
    1f0a:	80 83       	st	Z, r24
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	a2 83       	std	Z+2, r26	; 0x02
    1f10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	8e 01       	movw	r16, r28
    1f14:	01 5e       	subi	r16, 0xE1	; 225
    1f16:	1e 4f       	sbci	r17, 0xFE	; 254
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ed 5d       	subi	r30, 0xDD	; 221
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a e7       	ldi	r20, 0x7A	; 122
    1f2c:	55 e4       	ldi	r21, 0x45	; 69
    1f2e:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	f8 01       	movw	r30, r16
    1f38:	80 83       	st	Z, r24
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	a2 83       	std	Z+2, r26	; 0x02
    1f3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f40:	fe 01       	movw	r30, r28
    1f42:	e1 5e       	subi	r30, 0xE1	; 225
    1f44:	fe 4f       	sbci	r31, 0xFE	; 254
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	44 f4       	brge	.+16     	; 0x1f6e <main+0x5a0>
		__ticks = 1;
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e3 5e       	subi	r30, 0xE3	; 227
    1f62:	fe 4f       	sbci	r31, 0xFE	; 254
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	80 83       	st	Z, r24
    1f6c:	64 c0       	rjmp	.+200    	; 0x2036 <main+0x668>
	else if (__tmp > 65535)
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e1 5e       	subi	r30, 0xE1	; 225
    1f72:	fe 4f       	sbci	r31, 0xFE	; 254
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	3f ef       	ldi	r19, 0xFF	; 255
    1f80:	4f e7       	ldi	r20, 0x7F	; 127
    1f82:	57 e4       	ldi	r21, 0x47	; 71
    1f84:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    1f88:	18 16       	cp	r1, r24
    1f8a:	0c f0       	brlt	.+2      	; 0x1f8e <main+0x5c0>
    1f8c:	43 c0       	rjmp	.+134    	; 0x2014 <main+0x646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ed 5d       	subi	r30, 0xDD	; 221
    1f92:	fe 4f       	sbci	r31, 0xFE	; 254
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e2       	ldi	r20, 0x20	; 32
    1fa2:	51 e4       	ldi	r21, 0x41	; 65
    1fa4:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	8e 01       	movw	r16, r28
    1fae:	03 5e       	subi	r16, 0xE3	; 227
    1fb0:	1e 4f       	sbci	r17, 0xFE	; 254
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	f8 01       	movw	r30, r16
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
    1fc4:	1f c0       	rjmp	.+62     	; 0x2004 <main+0x636>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e5 5e       	subi	r30, 0xE5	; 229
    1fca:	fe 4f       	sbci	r31, 0xFE	; 254
    1fcc:	80 e9       	ldi	r24, 0x90	; 144
    1fce:	91 e0       	ldi	r25, 0x01	; 1
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e5 5e       	subi	r30, 0xE5	; 229
    1fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fda:	80 81       	ld	r24, Z
    1fdc:	91 81       	ldd	r25, Z+1	; 0x01
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <main+0x610>
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e5 5e       	subi	r30, 0xE5	; 229
    1fe6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	de 01       	movw	r26, r28
    1fee:	a3 5e       	subi	r26, 0xE3	; 227
    1ff0:	be 4f       	sbci	r27, 0xFE	; 254
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e3 5e       	subi	r30, 0xE3	; 227
    1ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	11 96       	adiw	r26, 0x01	; 1
    2000:	9c 93       	st	X, r25
    2002:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	fe 01       	movw	r30, r28
    2006:	e3 5e       	subi	r30, 0xE3	; 227
    2008:	fe 4f       	sbci	r31, 0xFE	; 254
    200a:	80 81       	ld	r24, Z
    200c:	91 81       	ldd	r25, Z+1	; 0x01
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	d1 f6       	brne	.-76     	; 0x1fc6 <main+0x5f8>
    2012:	27 c0       	rjmp	.+78     	; 0x2062 <main+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2014:	8e 01       	movw	r16, r28
    2016:	03 5e       	subi	r16, 0xE3	; 227
    2018:	1e 4f       	sbci	r17, 0xFE	; 254
    201a:	fe 01       	movw	r30, r28
    201c:	e1 5e       	subi	r30, 0xE1	; 225
    201e:	fe 4f       	sbci	r31, 0xFE	; 254
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	f8 01       	movw	r30, r16
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
    2036:	de 01       	movw	r26, r28
    2038:	a7 5e       	subi	r26, 0xE7	; 231
    203a:	be 4f       	sbci	r27, 0xFE	; 254
    203c:	fe 01       	movw	r30, r28
    203e:	e3 5e       	subi	r30, 0xE3	; 227
    2040:	fe 4f       	sbci	r31, 0xFE	; 254
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	8d 93       	st	X+, r24
    2048:	9c 93       	st	X, r25
    204a:	fe 01       	movw	r30, r28
    204c:	e7 5e       	subi	r30, 0xE7	; 231
    204e:	fe 4f       	sbci	r31, 0xFE	; 254
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <main+0x686>
    2058:	fe 01       	movw	r30, r28
    205a:	e7 5e       	subi	r30, 0xE7	; 231
    205c:	fe 4f       	sbci	r31, 0xFE	; 254
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
      _delay_ms(20);
      SetColor(0xF, 0xff, 0xff, 0xff);
    2062:	8f e0       	ldi	r24, 0x0F	; 15
    2064:	6f ef       	ldi	r22, 0xFF	; 255
    2066:	4f ef       	ldi	r20, 0xFF	; 255
    2068:	2f ef       	ldi	r18, 0xFF	; 255
    206a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
    206e:	fe 01       	movw	r30, r28
    2070:	eb 5e       	subi	r30, 0xEB	; 235
    2072:	fe 4f       	sbci	r31, 0xFE	; 254
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a0 ea       	ldi	r26, 0xA0	; 160
    207a:	b1 e4       	ldi	r27, 0x41	; 65
    207c:	80 83       	st	Z, r24
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	a2 83       	std	Z+2, r26	; 0x02
    2082:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2084:	8e 01       	movw	r16, r28
    2086:	0f 5e       	subi	r16, 0xEF	; 239
    2088:	1e 4f       	sbci	r17, 0xFE	; 254
    208a:	fe 01       	movw	r30, r28
    208c:	eb 5e       	subi	r30, 0xEB	; 235
    208e:	fe 4f       	sbci	r31, 0xFE	; 254
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a e7       	ldi	r20, 0x7A	; 122
    209e:	55 e4       	ldi	r21, 0x45	; 69
    20a0:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	f8 01       	movw	r30, r16
    20aa:	80 83       	st	Z, r24
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	a2 83       	std	Z+2, r26	; 0x02
    20b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20b2:	fe 01       	movw	r30, r28
    20b4:	ef 5e       	subi	r30, 0xEF	; 239
    20b6:	fe 4f       	sbci	r31, 0xFE	; 254
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	44 f4       	brge	.+16     	; 0x20e0 <main+0x712>
		__ticks = 1;
    20d0:	fe 01       	movw	r30, r28
    20d2:	e1 5f       	subi	r30, 0xF1	; 241
    20d4:	fe 4f       	sbci	r31, 0xFE	; 254
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	80 83       	st	Z, r24
    20de:	64 c0       	rjmp	.+200    	; 0x21a8 <main+0x7da>
	else if (__tmp > 65535)
    20e0:	fe 01       	movw	r30, r28
    20e2:	ef 5e       	subi	r30, 0xEF	; 239
    20e4:	fe 4f       	sbci	r31, 0xFE	; 254
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	0c f0       	brlt	.+2      	; 0x2100 <main+0x732>
    20fe:	43 c0       	rjmp	.+134    	; 0x2186 <main+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	fe 01       	movw	r30, r28
    2102:	eb 5e       	subi	r30, 0xEB	; 235
    2104:	fe 4f       	sbci	r31, 0xFE	; 254
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8e 01       	movw	r16, r28
    2120:	01 5f       	subi	r16, 0xF1	; 241
    2122:	1e 4f       	sbci	r17, 0xFE	; 254
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	f8 01       	movw	r30, r16
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	80 83       	st	Z, r24
    2136:	1f c0       	rjmp	.+62     	; 0x2176 <main+0x7a8>
    2138:	fe 01       	movw	r30, r28
    213a:	e3 5f       	subi	r30, 0xF3	; 243
    213c:	fe 4f       	sbci	r31, 0xFE	; 254
    213e:	80 e9       	ldi	r24, 0x90	; 144
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	80 83       	st	Z, r24
    2146:	fe 01       	movw	r30, r28
    2148:	e3 5f       	subi	r30, 0xF3	; 243
    214a:	fe 4f       	sbci	r31, 0xFE	; 254
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <main+0x782>
    2154:	fe 01       	movw	r30, r28
    2156:	e3 5f       	subi	r30, 0xF3	; 243
    2158:	fe 4f       	sbci	r31, 0xFE	; 254
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	de 01       	movw	r26, r28
    2160:	a1 5f       	subi	r26, 0xF1	; 241
    2162:	be 4f       	sbci	r27, 0xFE	; 254
    2164:	fe 01       	movw	r30, r28
    2166:	e1 5f       	subi	r30, 0xF1	; 241
    2168:	fe 4f       	sbci	r31, 0xFE	; 254
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	11 96       	adiw	r26, 0x01	; 1
    2172:	9c 93       	st	X, r25
    2174:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	fe 01       	movw	r30, r28
    2178:	e1 5f       	subi	r30, 0xF1	; 241
    217a:	fe 4f       	sbci	r31, 0xFE	; 254
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	d1 f6       	brne	.-76     	; 0x2138 <main+0x76a>
    2184:	b5 ce       	rjmp	.-662    	; 0x1ef0 <main+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	8e 01       	movw	r16, r28
    2188:	01 5f       	subi	r16, 0xF1	; 241
    218a:	1e 4f       	sbci	r17, 0xFE	; 254
    218c:	fe 01       	movw	r30, r28
    218e:	ef 5e       	subi	r30, 0xEF	; 239
    2190:	fe 4f       	sbci	r31, 0xFE	; 254
    2192:	60 81       	ld	r22, Z
    2194:	71 81       	ldd	r23, Z+1	; 0x01
    2196:	82 81       	ldd	r24, Z+2	; 0x02
    2198:	93 81       	ldd	r25, Z+3	; 0x03
    219a:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	f8 01       	movw	r30, r16
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	de 01       	movw	r26, r28
    21aa:	a5 5f       	subi	r26, 0xF5	; 245
    21ac:	be 4f       	sbci	r27, 0xFE	; 254
    21ae:	fe 01       	movw	r30, r28
    21b0:	e1 5f       	subi	r30, 0xF1	; 241
    21b2:	fe 4f       	sbci	r31, 0xFE	; 254
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	11 96       	adiw	r26, 0x01	; 1
    21ba:	9c 93       	st	X, r25
    21bc:	8e 93       	st	-X, r24
    21be:	fe 01       	movw	r30, r28
    21c0:	e5 5f       	subi	r30, 0xF5	; 245
    21c2:	fe 4f       	sbci	r31, 0xFE	; 254
    21c4:	80 81       	ld	r24, Z
    21c6:	91 81       	ldd	r25, Z+1	; 0x01
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <main+0x7fa>
    21cc:	fe 01       	movw	r30, r28
    21ce:	e5 5f       	subi	r30, 0xF5	; 245
    21d0:	fe 4f       	sbci	r31, 0xFE	; 254
    21d2:	91 83       	std	Z+1, r25	; 0x01
    21d4:	80 83       	st	Z, r24
    21d6:	8c ce       	rjmp	.-744    	; 0x1ef0 <main+0x522>
      _delay_ms(20);
    }
  }
  wdt_reset();
    21d8:	a8 95       	wdr
  int res1 = i2c_rtc_read(&time, 1);
    21da:	ce 01       	movw	r24, r28
    21dc:	8f 58       	subi	r24, 0x8F	; 143
    21de:	9d 4f       	sbci	r25, 0xFD	; 253
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    21e6:	fe 01       	movw	r30, r28
    21e8:	e1 59       	subi	r30, 0x91	; 145
    21ea:	fd 4f       	sbci	r31, 0xFD	; 253
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
  if (res1)
    21f4:	fe 01       	movw	r30, r28
    21f6:	e1 59       	subi	r30, 0x91	; 145
    21f8:	fd 4f       	sbci	r31, 0xFD	; 253
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	b9 f0       	breq	.+46     	; 0x2230 <main+0x862>
  {
    uartPuts("\r\n");
    2202:	84 e8       	ldi	r24, 0x84	; 132
    2204:	92 e0       	ldi	r25, 0x02	; 2
    2206:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    TimeInfo(time);
    220a:	fe 01       	movw	r30, r28
    220c:	ef 58       	subi	r30, 0x8F	; 143
    220e:	fd 4f       	sbci	r31, 0xFD	; 253
    2210:	c0 80       	ld	r12, Z
    2212:	d1 80       	ldd	r13, Z+1	; 0x01
    2214:	e2 80       	ldd	r14, Z+2	; 0x02
    2216:	f3 80       	ldd	r15, Z+3	; 0x03
    2218:	04 81       	ldd	r16, Z+4	; 0x04
    221a:	15 81       	ldd	r17, Z+5	; 0x05
    221c:	26 81       	ldd	r18, Z+6	; 0x06
    221e:	37 81       	ldd	r19, Z+7	; 0x07
    2220:	40 85       	ldd	r20, Z+8	; 0x08
    2222:	51 85       	ldd	r21, Z+9	; 0x09
    2224:	62 85       	ldd	r22, Z+10	; 0x0a
    2226:	73 85       	ldd	r23, Z+11	; 0x0b
    2228:	84 85       	ldd	r24, Z+12	; 0x0c
    222a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TimeInfo>
    222e:	04 c0       	rjmp	.+8      	; 0x2238 <main+0x86a>
  }
  else
  {
    uartPuts(" ... RTC error!!!\r\n");
    2230:	87 e8       	ldi	r24, 0x87	; 135
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  }

  uartPuts("\r\n... LED Check");
    2238:	8b e9       	ldi	r24, 0x9B	; 155
    223a:	92 e0       	ldi	r25, 0x02	; 2
    223c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  shift32_output(0);
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
  SetColor(0xFF, 0xFF, 0xFF, 0xFF);
    224c:	8f ef       	ldi	r24, 0xFF	; 255
    224e:	6f ef       	ldi	r22, 0xFF	; 255
    2250:	4f ef       	ldi	r20, 0xFF	; 255
    2252:	2f ef       	ldi	r18, 0xFF	; 255
    2254:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>

  wdt_reset();
    2258:	a8 95       	wdr

  unsigned long uiScrollingBit = 0x80000000;
    225a:	fe 01       	movw	r30, r28
    225c:	e5 59       	subi	r30, 0x95	; 149
    225e:	fd 4f       	sbci	r31, 0xFD	; 253
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e0       	ldi	r26, 0x00	; 0
    2266:	b0 e8       	ldi	r27, 0x80	; 128
    2268:	80 83       	st	Z, r24
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	a2 83       	std	Z+2, r26	; 0x02
    226e:	b3 83       	std	Z+3, r27	; 0x03
    2270:	d2 c0       	rjmp	.+420    	; 0x2416 <main+0xa48>
  while (uiScrollingBit)
  {
    wdt_reset();
    2272:	a8 95       	wdr
    shift32_output(uiScrollingBit);
    2274:	fe 01       	movw	r30, r28
    2276:	e5 59       	subi	r30, 0x95	; 149
    2278:	fd 4f       	sbci	r31, 0xFD	; 253
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	a2 81       	ldd	r26, Z+2	; 0x02
    2280:	b3 81       	ldd	r27, Z+3	; 0x03
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
    uiScrollingBit >>= 1;
    228a:	9e 01       	movw	r18, r28
    228c:	25 59       	subi	r18, 0x95	; 149
    228e:	3d 4f       	sbci	r19, 0xFD	; 253
    2290:	fe 01       	movw	r30, r28
    2292:	e5 59       	subi	r30, 0x95	; 149
    2294:	fd 4f       	sbci	r31, 0xFD	; 253
    2296:	80 81       	ld	r24, Z
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	a2 81       	ldd	r26, Z+2	; 0x02
    229c:	b3 81       	ldd	r27, Z+3	; 0x03
    229e:	b6 95       	lsr	r27
    22a0:	a7 95       	ror	r26
    22a2:	97 95       	ror	r25
    22a4:	87 95       	ror	r24
    22a6:	f9 01       	movw	r30, r18
    22a8:	80 83       	st	Z, r24
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	a2 83       	std	Z+2, r26	; 0x02
    22ae:	b3 83       	std	Z+3, r27	; 0x03
    22b0:	fe 01       	movw	r30, r28
    22b2:	e9 5f       	subi	r30, 0xF9	; 249
    22b4:	fe 4f       	sbci	r31, 0xFE	; 254
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 ea       	ldi	r26, 0xA0	; 160
    22bc:	b1 e4       	ldi	r27, 0x41	; 65
    22be:	80 83       	st	Z, r24
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	a2 83       	std	Z+2, r26	; 0x02
    22c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	8e 01       	movw	r16, r28
    22c8:	0d 5f       	subi	r16, 0xFD	; 253
    22ca:	1e 4f       	sbci	r17, 0xFE	; 254
    22cc:	fe 01       	movw	r30, r28
    22ce:	e9 5f       	subi	r30, 0xF9	; 249
    22d0:	fe 4f       	sbci	r31, 0xFE	; 254
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a e7       	ldi	r20, 0x7A	; 122
    22e0:	55 e4       	ldi	r21, 0x45	; 69
    22e2:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	f8 01       	movw	r30, r16
    22ec:	80 83       	st	Z, r24
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	a2 83       	std	Z+2, r26	; 0x02
    22f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f4:	fe 01       	movw	r30, r28
    22f6:	ed 5f       	subi	r30, 0xFD	; 253
    22f8:	fe 4f       	sbci	r31, 0xFE	; 254
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	44 f4       	brge	.+16     	; 0x2322 <main+0x954>
		__ticks = 1;
    2312:	fe 01       	movw	r30, r28
    2314:	ef 5f       	subi	r30, 0xFF	; 255
    2316:	fe 4f       	sbci	r31, 0xFE	; 254
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	64 c0       	rjmp	.+200    	; 0x23ea <main+0xa1c>
	else if (__tmp > 65535)
    2322:	fe 01       	movw	r30, r28
    2324:	ed 5f       	subi	r30, 0xFD	; 253
    2326:	fe 4f       	sbci	r31, 0xFE	; 254
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	0c f0       	brlt	.+2      	; 0x2342 <main+0x974>
    2340:	43 c0       	rjmp	.+134    	; 0x23c8 <main+0x9fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	fe 01       	movw	r30, r28
    2344:	e9 5f       	subi	r30, 0xF9	; 249
    2346:	fe 4f       	sbci	r31, 0xFE	; 254
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8e 01       	movw	r16, r28
    2362:	0f 5f       	subi	r16, 0xFF	; 255
    2364:	1e 4f       	sbci	r17, 0xFE	; 254
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	f8 01       	movw	r30, r16
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	1f c0       	rjmp	.+62     	; 0x23b8 <main+0x9ea>
    237a:	fe 01       	movw	r30, r28
    237c:	e1 50       	subi	r30, 0x01	; 1
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	80 e9       	ldi	r24, 0x90	; 144
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	80 83       	st	Z, r24
    2388:	fe 01       	movw	r30, r28
    238a:	e1 50       	subi	r30, 0x01	; 1
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <main+0x9c4>
    2396:	fe 01       	movw	r30, r28
    2398:	e1 50       	subi	r30, 0x01	; 1
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	de 01       	movw	r26, r28
    23a2:	af 5f       	subi	r26, 0xFF	; 255
    23a4:	be 4f       	sbci	r27, 0xFE	; 254
    23a6:	fe 01       	movw	r30, r28
    23a8:	ef 5f       	subi	r30, 0xFF	; 255
    23aa:	fe 4f       	sbci	r31, 0xFE	; 254
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	11 96       	adiw	r26, 0x01	; 1
    23b4:	9c 93       	st	X, r25
    23b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	fe 01       	movw	r30, r28
    23ba:	ef 5f       	subi	r30, 0xFF	; 255
    23bc:	fe 4f       	sbci	r31, 0xFE	; 254
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	d1 f6       	brne	.-76     	; 0x237a <main+0x9ac>
    23c6:	27 c0       	rjmp	.+78     	; 0x2416 <main+0xa48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	8e 01       	movw	r16, r28
    23ca:	0f 5f       	subi	r16, 0xFF	; 255
    23cc:	1e 4f       	sbci	r17, 0xFE	; 254
    23ce:	fe 01       	movw	r30, r28
    23d0:	ed 5f       	subi	r30, 0xFD	; 253
    23d2:	fe 4f       	sbci	r31, 0xFE	; 254
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	de 01       	movw	r26, r28
    23ec:	a3 50       	subi	r26, 0x03	; 3
    23ee:	bf 4f       	sbci	r27, 0xFF	; 255
    23f0:	fe 01       	movw	r30, r28
    23f2:	ef 5f       	subi	r30, 0xFF	; 255
    23f4:	fe 4f       	sbci	r31, 0xFE	; 254
    23f6:	80 81       	ld	r24, Z
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	8d 93       	st	X+, r24
    23fc:	9c 93       	st	X, r25
    23fe:	fe 01       	movw	r30, r28
    2400:	e3 50       	subi	r30, 0x03	; 3
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <main+0xa3a>
    240c:	fe 01       	movw	r30, r28
    240e:	e3 50       	subi	r30, 0x03	; 3
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
  SetColor(0xFF, 0xFF, 0xFF, 0xFF);

  wdt_reset();

  unsigned long uiScrollingBit = 0x80000000;
  while (uiScrollingBit)
    2416:	fe 01       	movw	r30, r28
    2418:	e5 59       	subi	r30, 0x95	; 149
    241a:	fd 4f       	sbci	r31, 0xFD	; 253
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	a2 81       	ldd	r26, Z+2	; 0x02
    2422:	b3 81       	ldd	r27, Z+3	; 0x03
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	a1 05       	cpc	r26, r1
    2428:	b1 05       	cpc	r27, r1
    242a:	09 f0       	breq	.+2      	; 0x242e <main+0xa60>
    242c:	22 cf       	rjmp	.-444    	; 0x2272 <main+0x8a4>
    wdt_reset();
    shift32_output(uiScrollingBit);
    uiScrollingBit >>= 1;
    _delay_ms(20);
  }
  shift32_output(uiScrollingBit);
    242e:	fe 01       	movw	r30, r28
    2430:	e5 59       	subi	r30, 0x95	; 149
    2432:	fd 4f       	sbci	r31, 0xFD	; 253
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	a2 81       	ldd	r26, Z+2	; 0x02
    243a:	b3 81       	ldd	r27, Z+3	; 0x03
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
  for(int cyx=0;cyx<50;cyx++)
    2444:	fe 01       	movw	r30, r28
    2446:	e5 5a       	subi	r30, 0xA5	; 165
    2448:	fd 4f       	sbci	r31, 0xFD	; 253
    244a:	11 82       	std	Z+1, r1	; 0x01
    244c:	10 82       	st	Z, r1
    244e:	c0 c0       	rjmp	.+384    	; 0x25d0 <main+0xc02>
  {
    wdt_reset();
    2450:	a8 95       	wdr
    2452:	fe 01       	movw	r30, r28
    2454:	e7 50       	subi	r30, 0x07	; 7
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a0 e2       	ldi	r26, 0x20	; 32
    245e:	b1 e4       	ldi	r27, 0x41	; 65
    2460:	80 83       	st	Z, r24
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	a2 83       	std	Z+2, r26	; 0x02
    2466:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	8e 01       	movw	r16, r28
    246a:	0b 50       	subi	r16, 0x0B	; 11
    246c:	1f 4f       	sbci	r17, 0xFF	; 255
    246e:	fe 01       	movw	r30, r28
    2470:	e7 50       	subi	r30, 0x07	; 7
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	60 81       	ld	r22, Z
    2476:	71 81       	ldd	r23, Z+1	; 0x01
    2478:	82 81       	ldd	r24, Z+2	; 0x02
    247a:	93 81       	ldd	r25, Z+3	; 0x03
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a e7       	ldi	r20, 0x7A	; 122
    2482:	55 e4       	ldi	r21, 0x45	; 69
    2484:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	f8 01       	movw	r30, r16
    248e:	80 83       	st	Z, r24
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	a2 83       	std	Z+2, r26	; 0x02
    2494:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2496:	fe 01       	movw	r30, r28
    2498:	eb 50       	subi	r30, 0x0B	; 11
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	44 f4       	brge	.+16     	; 0x24c4 <main+0xaf6>
		__ticks = 1;
    24b4:	fe 01       	movw	r30, r28
    24b6:	ed 50       	subi	r30, 0x0D	; 13
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	64 c0       	rjmp	.+200    	; 0x258c <main+0xbbe>
	else if (__tmp > 65535)
    24c4:	fe 01       	movw	r30, r28
    24c6:	eb 50       	subi	r30, 0x0B	; 11
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	0c f0       	brlt	.+2      	; 0x24e4 <main+0xb16>
    24e2:	43 c0       	rjmp	.+134    	; 0x256a <main+0xb9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	fe 01       	movw	r30, r28
    24e6:	e7 50       	subi	r30, 0x07	; 7
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8e 01       	movw	r16, r28
    2504:	0d 50       	subi	r16, 0x0D	; 13
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	f8 01       	movw	r30, r16
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
    251a:	1f c0       	rjmp	.+62     	; 0x255a <main+0xb8c>
    251c:	fe 01       	movw	r30, r28
    251e:	ef 50       	subi	r30, 0x0F	; 15
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	80 e9       	ldi	r24, 0x90	; 144
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
    252a:	fe 01       	movw	r30, r28
    252c:	ef 50       	subi	r30, 0x0F	; 15
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <main+0xb66>
    2538:	fe 01       	movw	r30, r28
    253a:	ef 50       	subi	r30, 0x0F	; 15
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	de 01       	movw	r26, r28
    2544:	ad 50       	subi	r26, 0x0D	; 13
    2546:	bf 4f       	sbci	r27, 0xFF	; 255
    2548:	fe 01       	movw	r30, r28
    254a:	ed 50       	subi	r30, 0x0D	; 13
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	11 96       	adiw	r26, 0x01	; 1
    2556:	9c 93       	st	X, r25
    2558:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	fe 01       	movw	r30, r28
    255c:	ed 50       	subi	r30, 0x0D	; 13
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	d1 f6       	brne	.-76     	; 0x251c <main+0xb4e>
    2568:	27 c0       	rjmp	.+78     	; 0x25b8 <main+0xbea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256a:	8e 01       	movw	r16, r28
    256c:	0d 50       	subi	r16, 0x0D	; 13
    256e:	1f 4f       	sbci	r17, 0xFF	; 255
    2570:	fe 01       	movw	r30, r28
    2572:	eb 50       	subi	r30, 0x0B	; 11
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	f8 01       	movw	r30, r16
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	80 83       	st	Z, r24
    258c:	de 01       	movw	r26, r28
    258e:	a1 51       	subi	r26, 0x11	; 17
    2590:	bf 4f       	sbci	r27, 0xFF	; 255
    2592:	fe 01       	movw	r30, r28
    2594:	ed 50       	subi	r30, 0x0D	; 13
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	8d 93       	st	X+, r24
    259e:	9c 93       	st	X, r25
    25a0:	fe 01       	movw	r30, r28
    25a2:	e1 51       	subi	r30, 0x11	; 17
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <main+0xbdc>
    25ae:	fe 01       	movw	r30, r28
    25b0:	e1 51       	subi	r30, 0x11	; 17
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
    shift32_output(uiScrollingBit);
    uiScrollingBit >>= 1;
    _delay_ms(20);
  }
  shift32_output(uiScrollingBit);
  for(int cyx=0;cyx<50;cyx++)
    25b8:	de 01       	movw	r26, r28
    25ba:	a5 5a       	subi	r26, 0xA5	; 165
    25bc:	bd 4f       	sbci	r27, 0xFD	; 253
    25be:	fe 01       	movw	r30, r28
    25c0:	e5 5a       	subi	r30, 0xA5	; 165
    25c2:	fd 4f       	sbci	r31, 0xFD	; 253
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	01 96       	adiw	r24, 0x01	; 1
    25ca:	11 96       	adiw	r26, 0x01	; 1
    25cc:	9c 93       	st	X, r25
    25ce:	8e 93       	st	-X, r24
    25d0:	fe 01       	movw	r30, r28
    25d2:	e5 5a       	subi	r30, 0xA5	; 165
    25d4:	fd 4f       	sbci	r31, 0xFD	; 253
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	82 33       	cpi	r24, 0x32	; 50
    25dc:	91 05       	cpc	r25, r1
    25de:	0c f4       	brge	.+2      	; 0x25e2 <main+0xc14>
    25e0:	37 cf       	rjmp	.-402    	; 0x2450 <main+0xa82>
  {
    wdt_reset();
    _delay_ms(10);
  }
  uiScrollingBit = 1;
    25e2:	fe 01       	movw	r30, r28
    25e4:	e5 59       	subi	r30, 0x95	; 149
    25e6:	fd 4f       	sbci	r31, 0xFD	; 253
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	80 83       	st	Z, r24
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	a2 83       	std	Z+2, r26	; 0x02
    25f6:	b3 83       	std	Z+3, r27	; 0x03
    25f8:	d2 c0       	rjmp	.+420    	; 0x279e <main+0xdd0>
  while (uiScrollingBit)
  {
    wdt_reset();
    25fa:	a8 95       	wdr
    shift32_output(uiScrollingBit);
    25fc:	fe 01       	movw	r30, r28
    25fe:	e5 59       	subi	r30, 0x95	; 149
    2600:	fd 4f       	sbci	r31, 0xFD	; 253
    2602:	80 81       	ld	r24, Z
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	a2 81       	ldd	r26, Z+2	; 0x02
    2608:	b3 81       	ldd	r27, Z+3	; 0x03
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
    uiScrollingBit <<= 1;
    2612:	9e 01       	movw	r18, r28
    2614:	25 59       	subi	r18, 0x95	; 149
    2616:	3d 4f       	sbci	r19, 0xFD	; 253
    2618:	fe 01       	movw	r30, r28
    261a:	e5 59       	subi	r30, 0x95	; 149
    261c:	fd 4f       	sbci	r31, 0xFD	; 253
    261e:	80 81       	ld	r24, Z
    2620:	91 81       	ldd	r25, Z+1	; 0x01
    2622:	a2 81       	ldd	r26, Z+2	; 0x02
    2624:	b3 81       	ldd	r27, Z+3	; 0x03
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	aa 1f       	adc	r26, r26
    262c:	bb 1f       	adc	r27, r27
    262e:	f9 01       	movw	r30, r18
    2630:	80 83       	st	Z, r24
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	a2 83       	std	Z+2, r26	; 0x02
    2636:	b3 83       	std	Z+3, r27	; 0x03
    2638:	fe 01       	movw	r30, r28
    263a:	e5 51       	subi	r30, 0x15	; 21
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	a0 ea       	ldi	r26, 0xA0	; 160
    2644:	b1 e4       	ldi	r27, 0x41	; 65
    2646:	80 83       	st	Z, r24
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	a2 83       	std	Z+2, r26	; 0x02
    264c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264e:	8e 01       	movw	r16, r28
    2650:	09 51       	subi	r16, 0x19	; 25
    2652:	1f 4f       	sbci	r17, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	e5 51       	subi	r30, 0x15	; 21
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	4a e7       	ldi	r20, 0x7A	; 122
    2668:	55 e4       	ldi	r21, 0x45	; 69
    266a:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	f8 01       	movw	r30, r16
    2674:	80 83       	st	Z, r24
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	a2 83       	std	Z+2, r26	; 0x02
    267a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267c:	fe 01       	movw	r30, r28
    267e:	e9 51       	subi	r30, 0x19	; 25
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	44 f4       	brge	.+16     	; 0x26aa <main+0xcdc>
		__ticks = 1;
    269a:	fe 01       	movw	r30, r28
    269c:	eb 51       	subi	r30, 0x1B	; 27
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    26a8:	64 c0       	rjmp	.+200    	; 0x2772 <main+0xda4>
	else if (__tmp > 65535)
    26aa:	fe 01       	movw	r30, r28
    26ac:	e9 51       	subi	r30, 0x19	; 25
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	60 81       	ld	r22, Z
    26b2:	71 81       	ldd	r23, Z+1	; 0x01
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	93 81       	ldd	r25, Z+3	; 0x03
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	3f ef       	ldi	r19, 0xFF	; 255
    26bc:	4f e7       	ldi	r20, 0x7F	; 127
    26be:	57 e4       	ldi	r21, 0x47	; 71
    26c0:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    26c4:	18 16       	cp	r1, r24
    26c6:	0c f0       	brlt	.+2      	; 0x26ca <main+0xcfc>
    26c8:	43 c0       	rjmp	.+134    	; 0x2750 <main+0xd82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	fe 01       	movw	r30, r28
    26cc:	e5 51       	subi	r30, 0x15	; 21
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e2       	ldi	r20, 0x20	; 32
    26de:	51 e4       	ldi	r21, 0x41	; 65
    26e0:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8e 01       	movw	r16, r28
    26ea:	0b 51       	subi	r16, 0x1B	; 27
    26ec:	1f 4f       	sbci	r17, 0xFF	; 255
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	f8 01       	movw	r30, r16
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
    2700:	1f c0       	rjmp	.+62     	; 0x2740 <main+0xd72>
    2702:	fe 01       	movw	r30, r28
    2704:	ed 51       	subi	r30, 0x1D	; 29
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 e9       	ldi	r24, 0x90	; 144
    270a:	91 e0       	ldi	r25, 0x01	; 1
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
    2710:	fe 01       	movw	r30, r28
    2712:	ed 51       	subi	r30, 0x1D	; 29
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <main+0xd4c>
    271e:	fe 01       	movw	r30, r28
    2720:	ed 51       	subi	r30, 0x1D	; 29
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2728:	de 01       	movw	r26, r28
    272a:	ab 51       	subi	r26, 0x1B	; 27
    272c:	bf 4f       	sbci	r27, 0xFF	; 255
    272e:	fe 01       	movw	r30, r28
    2730:	eb 51       	subi	r30, 0x1B	; 27
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	11 96       	adiw	r26, 0x01	; 1
    273c:	9c 93       	st	X, r25
    273e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	fe 01       	movw	r30, r28
    2742:	eb 51       	subi	r30, 0x1B	; 27
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	91 81       	ldd	r25, Z+1	; 0x01
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	d1 f6       	brne	.-76     	; 0x2702 <main+0xd34>
    274e:	27 c0       	rjmp	.+78     	; 0x279e <main+0xdd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	8e 01       	movw	r16, r28
    2752:	0b 51       	subi	r16, 0x1B	; 27
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	fe 01       	movw	r30, r28
    2758:	e9 51       	subi	r30, 0x19	; 25
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	f8 01       	movw	r30, r16
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
    2772:	de 01       	movw	r26, r28
    2774:	af 51       	subi	r26, 0x1F	; 31
    2776:	bf 4f       	sbci	r27, 0xFF	; 255
    2778:	fe 01       	movw	r30, r28
    277a:	eb 51       	subi	r30, 0x1B	; 27
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	8d 93       	st	X+, r24
    2784:	9c 93       	st	X, r25
    2786:	fe 01       	movw	r30, r28
    2788:	ef 51       	subi	r30, 0x1F	; 31
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	91 81       	ldd	r25, Z+1	; 0x01
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <main+0xdc2>
    2794:	fe 01       	movw	r30, r28
    2796:	ef 51       	subi	r30, 0x1F	; 31
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
  {
    wdt_reset();
    _delay_ms(10);
  }
  uiScrollingBit = 1;
  while (uiScrollingBit)
    279e:	fe 01       	movw	r30, r28
    27a0:	e5 59       	subi	r30, 0x95	; 149
    27a2:	fd 4f       	sbci	r31, 0xFD	; 253
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	a2 81       	ldd	r26, Z+2	; 0x02
    27aa:	b3 81       	ldd	r27, Z+3	; 0x03
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	a1 05       	cpc	r26, r1
    27b0:	b1 05       	cpc	r27, r1
    27b2:	09 f0       	breq	.+2      	; 0x27b6 <main+0xde8>
    27b4:	22 cf       	rjmp	.-444    	; 0x25fa <main+0xc2c>
    shift32_output(uiScrollingBit);
    uiScrollingBit <<= 1;
    _delay_ms(20);
  }

  wdt_reset();
    27b6:	a8 95       	wdr

  uartPuts("\r\n... RGB Check");
    27b8:	8b ea       	ldi	r24, 0xAB	; 171
    27ba:	92 e0       	ldi	r25, 0x02	; 2
    27bc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  shift32_output(0xffffffff);
    27c0:	6f ef       	ldi	r22, 0xFF	; 255
    27c2:	7f ef       	ldi	r23, 0xFF	; 255
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	9f ef       	ldi	r25, 0xFF	; 255
    27c8:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
  SetColor(0x7F, 0xFF, 0x00, 0x00);
    27cc:	8f e7       	ldi	r24, 0x7F	; 127
    27ce:	6f ef       	ldi	r22, 0xFF	; 255
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
  for(int cyx=0;cyx<20;cyx++)
    27d8:	fe 01       	movw	r30, r28
    27da:	e7 5a       	subi	r30, 0xA7	; 167
    27dc:	fd 4f       	sbci	r31, 0xFD	; 253
    27de:	11 82       	std	Z+1, r1	; 0x01
    27e0:	10 82       	st	Z, r1
    27e2:	c0 c0       	rjmp	.+384    	; 0x2964 <main+0xf96>
  {
    wdt_reset();
    27e4:	a8 95       	wdr
    27e6:	fe 01       	movw	r30, r28
    27e8:	e3 52       	subi	r30, 0x23	; 35
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	a0 e2       	ldi	r26, 0x20	; 32
    27f2:	b1 e4       	ldi	r27, 0x41	; 65
    27f4:	80 83       	st	Z, r24
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	a2 83       	std	Z+2, r26	; 0x02
    27fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	8e 01       	movw	r16, r28
    27fe:	07 52       	subi	r16, 0x27	; 39
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	fe 01       	movw	r30, r28
    2804:	e3 52       	subi	r30, 0x23	; 35
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a e7       	ldi	r20, 0x7A	; 122
    2816:	55 e4       	ldi	r21, 0x45	; 69
    2818:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	f8 01       	movw	r30, r16
    2822:	80 83       	st	Z, r24
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	a2 83       	std	Z+2, r26	; 0x02
    2828:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    282a:	fe 01       	movw	r30, r28
    282c:	e7 52       	subi	r30, 0x27	; 39
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	93 81       	ldd	r25, Z+3	; 0x03
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	44 f4       	brge	.+16     	; 0x2858 <main+0xe8a>
		__ticks = 1;
    2848:	fe 01       	movw	r30, r28
    284a:	e9 52       	subi	r30, 0x29	; 41
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	80 83       	st	Z, r24
    2856:	64 c0       	rjmp	.+200    	; 0x2920 <main+0xf52>
	else if (__tmp > 65535)
    2858:	fe 01       	movw	r30, r28
    285a:	e7 52       	subi	r30, 0x27	; 39
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	60 81       	ld	r22, Z
    2860:	71 81       	ldd	r23, Z+1	; 0x01
    2862:	82 81       	ldd	r24, Z+2	; 0x02
    2864:	93 81       	ldd	r25, Z+3	; 0x03
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	57 e4       	ldi	r21, 0x47	; 71
    286e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    2872:	18 16       	cp	r1, r24
    2874:	0c f0       	brlt	.+2      	; 0x2878 <main+0xeaa>
    2876:	43 c0       	rjmp	.+134    	; 0x28fe <main+0xf30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2878:	fe 01       	movw	r30, r28
    287a:	e3 52       	subi	r30, 0x23	; 35
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	8e 01       	movw	r16, r28
    2898:	09 52       	subi	r16, 0x29	; 41
    289a:	1f 4f       	sbci	r17, 0xFF	; 255
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	f8 01       	movw	r30, r16
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	80 83       	st	Z, r24
    28ae:	1f c0       	rjmp	.+62     	; 0x28ee <main+0xf20>
    28b0:	fe 01       	movw	r30, r28
    28b2:	eb 52       	subi	r30, 0x2B	; 43
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 e9       	ldi	r24, 0x90	; 144
    28b8:	91 e0       	ldi	r25, 0x01	; 1
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	80 83       	st	Z, r24
    28be:	fe 01       	movw	r30, r28
    28c0:	eb 52       	subi	r30, 0x2B	; 43
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	80 81       	ld	r24, Z
    28c6:	91 81       	ldd	r25, Z+1	; 0x01
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <main+0xefa>
    28cc:	fe 01       	movw	r30, r28
    28ce:	eb 52       	subi	r30, 0x2B	; 43
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d6:	de 01       	movw	r26, r28
    28d8:	a9 52       	subi	r26, 0x29	; 41
    28da:	bf 4f       	sbci	r27, 0xFF	; 255
    28dc:	fe 01       	movw	r30, r28
    28de:	e9 52       	subi	r30, 0x29	; 41
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	11 96       	adiw	r26, 0x01	; 1
    28ea:	9c 93       	st	X, r25
    28ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ee:	fe 01       	movw	r30, r28
    28f0:	e9 52       	subi	r30, 0x29	; 41
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	91 81       	ldd	r25, Z+1	; 0x01
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	d1 f6       	brne	.-76     	; 0x28b0 <main+0xee2>
    28fc:	27 c0       	rjmp	.+78     	; 0x294c <main+0xf7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fe:	8e 01       	movw	r16, r28
    2900:	09 52       	subi	r16, 0x29	; 41
    2902:	1f 4f       	sbci	r17, 0xFF	; 255
    2904:	fe 01       	movw	r30, r28
    2906:	e7 52       	subi	r30, 0x27	; 39
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	f8 01       	movw	r30, r16
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24
    2920:	de 01       	movw	r26, r28
    2922:	ad 52       	subi	r26, 0x2D	; 45
    2924:	bf 4f       	sbci	r27, 0xFF	; 255
    2926:	fe 01       	movw	r30, r28
    2928:	e9 52       	subi	r30, 0x29	; 41
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	8d 93       	st	X+, r24
    2932:	9c 93       	st	X, r25
    2934:	fe 01       	movw	r30, r28
    2936:	ed 52       	subi	r30, 0x2D	; 45
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 81       	ld	r24, Z
    293c:	91 81       	ldd	r25, Z+1	; 0x01
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <main+0xf70>
    2942:	fe 01       	movw	r30, r28
    2944:	ed 52       	subi	r30, 0x2D	; 45
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	80 83       	st	Z, r24
  wdt_reset();

  uartPuts("\r\n... RGB Check");
  shift32_output(0xffffffff);
  SetColor(0x7F, 0xFF, 0x00, 0x00);
  for(int cyx=0;cyx<20;cyx++)
    294c:	de 01       	movw	r26, r28
    294e:	a7 5a       	subi	r26, 0xA7	; 167
    2950:	bd 4f       	sbci	r27, 0xFD	; 253
    2952:	fe 01       	movw	r30, r28
    2954:	e7 5a       	subi	r30, 0xA7	; 167
    2956:	fd 4f       	sbci	r31, 0xFD	; 253
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	01 96       	adiw	r24, 0x01	; 1
    295e:	11 96       	adiw	r26, 0x01	; 1
    2960:	9c 93       	st	X, r25
    2962:	8e 93       	st	-X, r24
    2964:	fe 01       	movw	r30, r28
    2966:	e7 5a       	subi	r30, 0xA7	; 167
    2968:	fd 4f       	sbci	r31, 0xFD	; 253
    296a:	80 81       	ld	r24, Z
    296c:	91 81       	ldd	r25, Z+1	; 0x01
    296e:	84 31       	cpi	r24, 0x14	; 20
    2970:	91 05       	cpc	r25, r1
    2972:	0c f4       	brge	.+2      	; 0x2976 <main+0xfa8>
    2974:	37 cf       	rjmp	.-402    	; 0x27e4 <main+0xe16>
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x7F, 0x00, 0xFF, 0x00);
    2976:	8f e7       	ldi	r24, 0x7F	; 127
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	4f ef       	ldi	r20, 0xFF	; 255
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
  for(int cyx=0;cyx<20;cyx++)
    2982:	fe 01       	movw	r30, r28
    2984:	e9 5a       	subi	r30, 0xA9	; 169
    2986:	fd 4f       	sbci	r31, 0xFD	; 253
    2988:	11 82       	std	Z+1, r1	; 0x01
    298a:	10 82       	st	Z, r1
    298c:	c0 c0       	rjmp	.+384    	; 0x2b0e <main+0x1140>
  {
    wdt_reset();
    298e:	a8 95       	wdr
    2990:	fe 01       	movw	r30, r28
    2992:	e1 53       	subi	r30, 0x31	; 49
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 e2       	ldi	r26, 0x20	; 32
    299c:	b1 e4       	ldi	r27, 0x41	; 65
    299e:	80 83       	st	Z, r24
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	a2 83       	std	Z+2, r26	; 0x02
    29a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a6:	8e 01       	movw	r16, r28
    29a8:	05 53       	subi	r16, 0x35	; 53
    29aa:	1f 4f       	sbci	r17, 0xFF	; 255
    29ac:	fe 01       	movw	r30, r28
    29ae:	e1 53       	subi	r30, 0x31	; 49
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	60 81       	ld	r22, Z
    29b4:	71 81       	ldd	r23, Z+1	; 0x01
    29b6:	82 81       	ldd	r24, Z+2	; 0x02
    29b8:	93 81       	ldd	r25, Z+3	; 0x03
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	4a e7       	ldi	r20, 0x7A	; 122
    29c0:	55 e4       	ldi	r21, 0x45	; 69
    29c2:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	f8 01       	movw	r30, r16
    29cc:	80 83       	st	Z, r24
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	a2 83       	std	Z+2, r26	; 0x02
    29d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29d4:	fe 01       	movw	r30, r28
    29d6:	e5 53       	subi	r30, 0x35	; 53
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	44 f4       	brge	.+16     	; 0x2a02 <main+0x1034>
		__ticks = 1;
    29f2:	fe 01       	movw	r30, r28
    29f4:	e7 53       	subi	r30, 0x37	; 55
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	80 83       	st	Z, r24
    2a00:	64 c0       	rjmp	.+200    	; 0x2aca <main+0x10fc>
	else if (__tmp > 65535)
    2a02:	fe 01       	movw	r30, r28
    2a04:	e5 53       	subi	r30, 0x35	; 53
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	60 81       	ld	r22, Z
    2a0a:	71 81       	ldd	r23, Z+1	; 0x01
    2a0c:	82 81       	ldd	r24, Z+2	; 0x02
    2a0e:	93 81       	ldd	r25, Z+3	; 0x03
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f e7       	ldi	r20, 0x7F	; 127
    2a16:	57 e4       	ldi	r21, 0x47	; 71
    2a18:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    2a1c:	18 16       	cp	r1, r24
    2a1e:	0c f0       	brlt	.+2      	; 0x2a22 <main+0x1054>
    2a20:	43 c0       	rjmp	.+134    	; 0x2aa8 <main+0x10da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a22:	fe 01       	movw	r30, r28
    2a24:	e1 53       	subi	r30, 0x31	; 49
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	60 81       	ld	r22, Z
    2a2a:	71 81       	ldd	r23, Z+1	; 0x01
    2a2c:	82 81       	ldd	r24, Z+2	; 0x02
    2a2e:	93 81       	ldd	r25, Z+3	; 0x03
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e2       	ldi	r20, 0x20	; 32
    2a36:	51 e4       	ldi	r21, 0x41	; 65
    2a38:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8e 01       	movw	r16, r28
    2a42:	07 53       	subi	r16, 0x37	; 55
    2a44:	1f 4f       	sbci	r17, 0xFF	; 255
    2a46:	bc 01       	movw	r22, r24
    2a48:	cd 01       	movw	r24, r26
    2a4a:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	f8 01       	movw	r30, r16
    2a54:	91 83       	std	Z+1, r25	; 0x01
    2a56:	80 83       	st	Z, r24
    2a58:	1f c0       	rjmp	.+62     	; 0x2a98 <main+0x10ca>
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e9 53       	subi	r30, 0x39	; 57
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 e9       	ldi	r24, 0x90	; 144
    2a62:	91 e0       	ldi	r25, 0x01	; 1
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	80 83       	st	Z, r24
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e9 53       	subi	r30, 0x39	; 57
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <main+0x10a4>
    2a76:	fe 01       	movw	r30, r28
    2a78:	e9 53       	subi	r30, 0x39	; 57
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a80:	de 01       	movw	r26, r28
    2a82:	a7 53       	subi	r26, 0x37	; 55
    2a84:	bf 4f       	sbci	r27, 0xFF	; 255
    2a86:	fe 01       	movw	r30, r28
    2a88:	e7 53       	subi	r30, 0x37	; 55
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 81       	ld	r24, Z
    2a8e:	91 81       	ldd	r25, Z+1	; 0x01
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	11 96       	adiw	r26, 0x01	; 1
    2a94:	9c 93       	st	X, r25
    2a96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e7 53       	subi	r30, 0x37	; 55
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	80 81       	ld	r24, Z
    2aa0:	91 81       	ldd	r25, Z+1	; 0x01
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	d1 f6       	brne	.-76     	; 0x2a5a <main+0x108c>
    2aa6:	27 c0       	rjmp	.+78     	; 0x2af6 <main+0x1128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa8:	8e 01       	movw	r16, r28
    2aaa:	07 53       	subi	r16, 0x37	; 55
    2aac:	1f 4f       	sbci	r17, 0xFF	; 255
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e5 53       	subi	r30, 0x35	; 53
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	f8 01       	movw	r30, r16
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
    2aca:	de 01       	movw	r26, r28
    2acc:	ab 53       	subi	r26, 0x3B	; 59
    2ace:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e7 53       	subi	r30, 0x37	; 55
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	80 81       	ld	r24, Z
    2ad8:	91 81       	ldd	r25, Z+1	; 0x01
    2ada:	8d 93       	st	X+, r24
    2adc:	9c 93       	st	X, r25
    2ade:	fe 01       	movw	r30, r28
    2ae0:	eb 53       	subi	r30, 0x3B	; 59
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <main+0x111a>
    2aec:	fe 01       	movw	r30, r28
    2aee:	eb 53       	subi	r30, 0x3B	; 59
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	80 83       	st	Z, r24
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x7F, 0x00, 0xFF, 0x00);
  for(int cyx=0;cyx<20;cyx++)
    2af6:	de 01       	movw	r26, r28
    2af8:	a9 5a       	subi	r26, 0xA9	; 169
    2afa:	bd 4f       	sbci	r27, 0xFD	; 253
    2afc:	fe 01       	movw	r30, r28
    2afe:	e9 5a       	subi	r30, 0xA9	; 169
    2b00:	fd 4f       	sbci	r31, 0xFD	; 253
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	01 96       	adiw	r24, 0x01	; 1
    2b08:	11 96       	adiw	r26, 0x01	; 1
    2b0a:	9c 93       	st	X, r25
    2b0c:	8e 93       	st	-X, r24
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e9 5a       	subi	r30, 0xA9	; 169
    2b12:	fd 4f       	sbci	r31, 0xFD	; 253
    2b14:	80 81       	ld	r24, Z
    2b16:	91 81       	ldd	r25, Z+1	; 0x01
    2b18:	84 31       	cpi	r24, 0x14	; 20
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	0c f4       	brge	.+2      	; 0x2b20 <main+0x1152>
    2b1e:	37 cf       	rjmp	.-402    	; 0x298e <main+0xfc0>
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x7F, 0x00, 0x00, 0xFF);
    2b20:	8f e7       	ldi	r24, 0x7F	; 127
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	40 e0       	ldi	r20, 0x00	; 0
    2b26:	2f ef       	ldi	r18, 0xFF	; 255
    2b28:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
  for(int cyx=0;cyx<20;cyx++)
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	eb 5a       	subi	r30, 0xAB	; 171
    2b30:	fd 4f       	sbci	r31, 0xFD	; 253
    2b32:	11 82       	std	Z+1, r1	; 0x01
    2b34:	10 82       	st	Z, r1
    2b36:	c0 c0       	rjmp	.+384    	; 0x2cb8 <main+0x12ea>
  {
    wdt_reset();
    2b38:	a8 95       	wdr
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	ef 53       	subi	r30, 0x3F	; 63
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	a0 e2       	ldi	r26, 0x20	; 32
    2b46:	b1 e4       	ldi	r27, 0x41	; 65
    2b48:	80 83       	st	Z, r24
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	a2 83       	std	Z+2, r26	; 0x02
    2b4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b50:	8e 01       	movw	r16, r28
    2b52:	03 54       	subi	r16, 0x43	; 67
    2b54:	1f 4f       	sbci	r17, 0xFF	; 255
    2b56:	fe 01       	movw	r30, r28
    2b58:	ef 53       	subi	r30, 0x3F	; 63
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	60 81       	ld	r22, Z
    2b5e:	71 81       	ldd	r23, Z+1	; 0x01
    2b60:	82 81       	ldd	r24, Z+2	; 0x02
    2b62:	93 81       	ldd	r25, Z+3	; 0x03
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4a e7       	ldi	r20, 0x7A	; 122
    2b6a:	55 e4       	ldi	r21, 0x45	; 69
    2b6c:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	f8 01       	movw	r30, r16
    2b76:	80 83       	st	Z, r24
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	a2 83       	std	Z+2, r26	; 0x02
    2b7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e3 54       	subi	r30, 0x43	; 67
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	60 81       	ld	r22, Z
    2b86:	71 81       	ldd	r23, Z+1	; 0x01
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	44 f4       	brge	.+16     	; 0x2bac <main+0x11de>
		__ticks = 1;
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e5 54       	subi	r30, 0x45	; 69
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
    2baa:	64 c0       	rjmp	.+200    	; 0x2c74 <main+0x12a6>
	else if (__tmp > 65535)
    2bac:	fe 01       	movw	r30, r28
    2bae:	e3 54       	subi	r30, 0x43	; 67
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	60 81       	ld	r22, Z
    2bb4:	71 81       	ldd	r23, Z+1	; 0x01
    2bb6:	82 81       	ldd	r24, Z+2	; 0x02
    2bb8:	93 81       	ldd	r25, Z+3	; 0x03
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	3f ef       	ldi	r19, 0xFF	; 255
    2bbe:	4f e7       	ldi	r20, 0x7F	; 127
    2bc0:	57 e4       	ldi	r21, 0x47	; 71
    2bc2:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    2bc6:	18 16       	cp	r1, r24
    2bc8:	0c f0       	brlt	.+2      	; 0x2bcc <main+0x11fe>
    2bca:	43 c0       	rjmp	.+134    	; 0x2c52 <main+0x1284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bcc:	fe 01       	movw	r30, r28
    2bce:	ef 53       	subi	r30, 0x3F	; 63
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	93 81       	ldd	r25, Z+3	; 0x03
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	8e 01       	movw	r16, r28
    2bec:	05 54       	subi	r16, 0x45	; 69
    2bee:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	f8 01       	movw	r30, r16
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	80 83       	st	Z, r24
    2c02:	1f c0       	rjmp	.+62     	; 0x2c42 <main+0x1274>
    2c04:	fe 01       	movw	r30, r28
    2c06:	e7 54       	subi	r30, 0x47	; 71
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 e9       	ldi	r24, 0x90	; 144
    2c0c:	91 e0       	ldi	r25, 0x01	; 1
    2c0e:	91 83       	std	Z+1, r25	; 0x01
    2c10:	80 83       	st	Z, r24
    2c12:	fe 01       	movw	r30, r28
    2c14:	e7 54       	subi	r30, 0x47	; 71
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 81       	ld	r24, Z
    2c1a:	91 81       	ldd	r25, Z+1	; 0x01
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <main+0x124e>
    2c20:	fe 01       	movw	r30, r28
    2c22:	e7 54       	subi	r30, 0x47	; 71
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	91 83       	std	Z+1, r25	; 0x01
    2c28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2a:	de 01       	movw	r26, r28
    2c2c:	a5 54       	subi	r26, 0x45	; 69
    2c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c30:	fe 01       	movw	r30, r28
    2c32:	e5 54       	subi	r30, 0x45	; 69
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	91 81       	ldd	r25, Z+1	; 0x01
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	11 96       	adiw	r26, 0x01	; 1
    2c3e:	9c 93       	st	X, r25
    2c40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c42:	fe 01       	movw	r30, r28
    2c44:	e5 54       	subi	r30, 0x45	; 69
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	d1 f6       	brne	.-76     	; 0x2c04 <main+0x1236>
    2c50:	27 c0       	rjmp	.+78     	; 0x2ca0 <main+0x12d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c52:	8e 01       	movw	r16, r28
    2c54:	05 54       	subi	r16, 0x45	; 69
    2c56:	1f 4f       	sbci	r17, 0xFF	; 255
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e3 54       	subi	r30, 0x43	; 67
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	60 81       	ld	r22, Z
    2c60:	71 81       	ldd	r23, Z+1	; 0x01
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	f8 01       	movw	r30, r16
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
    2c74:	de 01       	movw	r26, r28
    2c76:	a9 54       	subi	r26, 0x49	; 73
    2c78:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e5 54       	subi	r30, 0x45	; 69
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	80 81       	ld	r24, Z
    2c82:	91 81       	ldd	r25, Z+1	; 0x01
    2c84:	8d 93       	st	X+, r24
    2c86:	9c 93       	st	X, r25
    2c88:	fe 01       	movw	r30, r28
    2c8a:	e9 54       	subi	r30, 0x49	; 73
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	80 81       	ld	r24, Z
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <main+0x12c4>
    2c96:	fe 01       	movw	r30, r28
    2c98:	e9 54       	subi	r30, 0x49	; 73
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x7F, 0x00, 0x00, 0xFF);
  for(int cyx=0;cyx<20;cyx++)
    2ca0:	de 01       	movw	r26, r28
    2ca2:	ab 5a       	subi	r26, 0xAB	; 171
    2ca4:	bd 4f       	sbci	r27, 0xFD	; 253
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	eb 5a       	subi	r30, 0xAB	; 171
    2caa:	fd 4f       	sbci	r31, 0xFD	; 253
    2cac:	80 81       	ld	r24, Z
    2cae:	91 81       	ldd	r25, Z+1	; 0x01
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	11 96       	adiw	r26, 0x01	; 1
    2cb4:	9c 93       	st	X, r25
    2cb6:	8e 93       	st	-X, r24
    2cb8:	fe 01       	movw	r30, r28
    2cba:	eb 5a       	subi	r30, 0xAB	; 171
    2cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    2cbe:	80 81       	ld	r24, Z
    2cc0:	91 81       	ldd	r25, Z+1	; 0x01
    2cc2:	84 31       	cpi	r24, 0x14	; 20
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	0c f4       	brge	.+2      	; 0x2cca <main+0x12fc>
    2cc8:	37 cf       	rjmp	.-402    	; 0x2b38 <main+0x116a>
  {
    wdt_reset();
    _delay_ms(10);
  }
  SetColor(0x00, 0xFF, 0xFF, 0xFF);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	6f ef       	ldi	r22, 0xFF	; 255
    2cce:	4f ef       	ldi	r20, 0xFF	; 255
    2cd0:	2f ef       	ldi	r18, 0xFF	; 255
    2cd2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>

  wdt_reset();
    2cd6:	a8 95       	wdr

  uint8_t uiBrightControl = 1;
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e3 57       	subi	r30, 0x73	; 115
    2cdc:	fd 4f       	sbci	r31, 0xFD	; 253
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	80 83       	st	Z, r24
  read_byte(cBrightControl, &uiBrightControl);
    2ce2:	9e 01       	movw	r18, r28
    2ce4:	23 57       	subi	r18, 0x73	; 115
    2ce6:	3d 4f       	sbci	r19, 0xFD	; 253
    2ce8:	82 e0       	ldi	r24, 0x02	; 2
    2cea:	b9 01       	movw	r22, r18
    2cec:	0e 94 e5 01 	call	0x3ca	; 0x3ca <read_byte>

  char s[100];
  sprintf(s, "%d", uiBrightControl);
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e3 57       	subi	r30, 0x73	; 115
    2cf4:	fd 4f       	sbci	r31, 0xFD	; 253
    2cf6:	80 81       	ld	r24, Z
    2cf8:	28 2f       	mov	r18, r24
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <main+0x1330>
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <main+0x1332>
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <main+0x1334>
    2d02:	ed b7       	in	r30, 0x3d	; 61
    2d04:	fe b7       	in	r31, 0x3e	; 62
    2d06:	31 96       	adiw	r30, 0x01	; 1
    2d08:	ce 01       	movw	r24, r28
    2d0a:	82 57       	subi	r24, 0x72	; 114
    2d0c:	9d 4f       	sbci	r25, 0xFD	; 253
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
    2d12:	8b eb       	ldi	r24, 0xBB	; 187
    2d14:	92 e0       	ldi	r25, 0x02	; 2
    2d16:	93 83       	std	Z+3, r25	; 0x03
    2d18:	82 83       	std	Z+2, r24	; 0x02
    2d1a:	35 83       	std	Z+5, r19	; 0x05
    2d1c:	24 83       	std	Z+4, r18	; 0x04
    2d1e:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    2d22:	2d b7       	in	r18, 0x3d	; 61
    2d24:	3e b7       	in	r19, 0x3e	; 62
    2d26:	2a 5f       	subi	r18, 0xFA	; 250
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	3e bf       	out	0x3e, r19	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	2d bf       	out	0x3d, r18	; 61
  uartPuts("\r\n... Brightness:");
    2d34:	8e eb       	ldi	r24, 0xBE	; 190
    2d36:	92 e0       	ldi	r25, 0x02	; 2
    2d38:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  uartPuts(s);
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	82 57       	subi	r24, 0x72	; 114
    2d40:	9d 4f       	sbci	r25, 0xFD	; 253
    2d42:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>

  unsigned char uiR;
  unsigned char uiG;
  unsigned char uiB;
  unsigned char uiRGB;
  read_byte(cRGB_R, &uiR);
    2d46:	9e 01       	movw	r18, r28
    2d48:	2e 50       	subi	r18, 0x0E	; 14
    2d4a:	3d 4f       	sbci	r19, 0xFD	; 253
    2d4c:	84 e0       	ldi	r24, 0x04	; 4
    2d4e:	b9 01       	movw	r22, r18
    2d50:	0e 94 e5 01 	call	0x3ca	; 0x3ca <read_byte>
  read_byte(cRGB_G, &uiG);
    2d54:	9e 01       	movw	r18, r28
    2d56:	2d 50       	subi	r18, 0x0D	; 13
    2d58:	3d 4f       	sbci	r19, 0xFD	; 253
    2d5a:	85 e0       	ldi	r24, 0x05	; 5
    2d5c:	b9 01       	movw	r22, r18
    2d5e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <read_byte>
  read_byte(cRGB_B, &uiB);
    2d62:	9e 01       	movw	r18, r28
    2d64:	2c 50       	subi	r18, 0x0C	; 12
    2d66:	3d 4f       	sbci	r19, 0xFD	; 253
    2d68:	86 e0       	ldi	r24, 0x06	; 6
    2d6a:	b9 01       	movw	r22, r18
    2d6c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <read_byte>
  read_byte(cRGB_Mode, &uiRGB);
    2d70:	9e 01       	movw	r18, r28
    2d72:	2b 50       	subi	r18, 0x0B	; 11
    2d74:	3d 4f       	sbci	r19, 0xFD	; 253
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	b9 01       	movw	r22, r18
    2d7a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <read_byte>

  if (!uiRGB)
    2d7e:	fe 01       	movw	r30, r28
    2d80:	eb 50       	subi	r30, 0x0B	; 11
    2d82:	fd 4f       	sbci	r31, 0xFD	; 253
    2d84:	80 81       	ld	r24, Z
    2d86:	88 23       	and	r24, r24
    2d88:	e1 f5       	brne	.+120    	; 0x2e02 <main+0x1434>
  {
    sprintf(s, "\r\n... RGB color: #%02x%02x%02x", uiR, uiG, uiB);
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	ee 50       	subi	r30, 0x0E	; 14
    2d8e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d90:	80 81       	ld	r24, Z
    2d92:	48 2f       	mov	r20, r24
    2d94:	50 e0       	ldi	r21, 0x00	; 0
    2d96:	fe 01       	movw	r30, r28
    2d98:	ed 50       	subi	r30, 0x0D	; 13
    2d9a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d9c:	80 81       	ld	r24, Z
    2d9e:	68 2f       	mov	r22, r24
    2da0:	70 e0       	ldi	r23, 0x00	; 0
    2da2:	fe 01       	movw	r30, r28
    2da4:	ec 50       	subi	r30, 0x0C	; 12
    2da6:	fd 4f       	sbci	r31, 0xFD	; 253
    2da8:	80 81       	ld	r24, Z
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	8d b7       	in	r24, 0x3d	; 61
    2db0:	9e b7       	in	r25, 0x3e	; 62
    2db2:	0a 97       	sbiw	r24, 0x0a	; 10
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	9e bf       	out	0x3e, r25	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	8d bf       	out	0x3d, r24	; 61
    2dbe:	ed b7       	in	r30, 0x3d	; 61
    2dc0:	fe b7       	in	r31, 0x3e	; 62
    2dc2:	31 96       	adiw	r30, 0x01	; 1
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	82 57       	subi	r24, 0x72	; 114
    2dc8:	9d 4f       	sbci	r25, 0xFD	; 253
    2dca:	91 83       	std	Z+1, r25	; 0x01
    2dcc:	80 83       	st	Z, r24
    2dce:	80 ed       	ldi	r24, 0xD0	; 208
    2dd0:	92 e0       	ldi	r25, 0x02	; 2
    2dd2:	93 83       	std	Z+3, r25	; 0x03
    2dd4:	82 83       	std	Z+2, r24	; 0x02
    2dd6:	55 83       	std	Z+5, r21	; 0x05
    2dd8:	44 83       	std	Z+4, r20	; 0x04
    2dda:	77 83       	std	Z+7, r23	; 0x07
    2ddc:	66 83       	std	Z+6, r22	; 0x06
    2dde:	31 87       	std	Z+9, r19	; 0x09
    2de0:	20 87       	std	Z+8, r18	; 0x08
    2de2:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    2de6:	ed b7       	in	r30, 0x3d	; 61
    2de8:	fe b7       	in	r31, 0x3e	; 62
    2dea:	3a 96       	adiw	r30, 0x0a	; 10
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	fe bf       	out	0x3e, r31	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	ed bf       	out	0x3d, r30	; 61
    uartPuts(s);
    2df6:	ce 01       	movw	r24, r28
    2df8:	82 57       	subi	r24, 0x72	; 114
    2dfa:	9d 4f       	sbci	r25, 0xFD	; 253
    2dfc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    2e00:	04 c0       	rjmp	.+8      	; 0x2e0a <main+0x143c>
  }
  else
  {
    uartPuts("\r\n... RGB Auto");
    2e02:	8f ee       	ldi	r24, 0xEF	; 239
    2e04:	92 e0       	ldi	r25, 0x02	; 2
    2e06:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
  }

  uartPuts("\r\nReady...\r\n");
    2e0a:	8e ef       	ldi	r24, 0xFE	; 254
    2e0c:	92 e0       	ldi	r25, 0x02	; 2
    2e0e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>

  long uiCount = -1;
    2e12:	fe 01       	movw	r30, r28
    2e14:	e9 59       	subi	r30, 0x99	; 153
    2e16:	fd 4f       	sbci	r31, 0xFD	; 253
    2e18:	8f ef       	ldi	r24, 0xFF	; 255
    2e1a:	9f ef       	ldi	r25, 0xFF	; 255
    2e1c:	af ef       	ldi	r26, 0xFF	; 255
    2e1e:	bf ef       	ldi	r27, 0xFF	; 255
    2e20:	80 83       	st	Z, r24
    2e22:	91 83       	std	Z+1, r25	; 0x01
    2e24:	a2 83       	std	Z+2, r26	; 0x02
    2e26:	b3 83       	std	Z+3, r27	; 0x03

  uint16_t Button1 = 0;
    2e28:	fe 01       	movw	r30, r28
    2e2a:	eb 59       	subi	r30, 0x9B	; 155
    2e2c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e2e:	11 82       	std	Z+1, r1	; 0x01
    2e30:	10 82       	st	Z, r1
  uint16_t Button2 = 0;
    2e32:	fe 01       	movw	r30, r28
    2e34:	ed 59       	subi	r30, 0x9D	; 157
    2e36:	fd 4f       	sbci	r31, 0xFD	; 253
    2e38:	11 82       	std	Z+1, r1	; 0x01
    2e3a:	10 82       	st	Z, r1
  uint16_t Button3 = 0;
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	ef 59       	subi	r30, 0x9F	; 159
    2e40:	fd 4f       	sbci	r31, 0xFD	; 253
    2e42:	11 82       	std	Z+1, r1	; 0x01
    2e44:	10 82       	st	Z, r1

  while (1)
  {
    wdt_reset();
    2e46:	a8 95       	wdr
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ed 54       	subi	r30, 0x4D	; 77
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	a0 e8       	ldi	r26, 0x80	; 128
    2e54:	bf e3       	ldi	r27, 0x3F	; 63
    2e56:	80 83       	st	Z, r24
    2e58:	91 83       	std	Z+1, r25	; 0x01
    2e5a:	a2 83       	std	Z+2, r26	; 0x02
    2e5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	8e 01       	movw	r16, r28
    2e60:	01 55       	subi	r16, 0x51	; 81
    2e62:	1f 4f       	sbci	r17, 0xFF	; 255
    2e64:	fe 01       	movw	r30, r28
    2e66:	ed 54       	subi	r30, 0x4D	; 77
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a e7       	ldi	r20, 0x7A	; 122
    2e78:	55 e4       	ldi	r21, 0x45	; 69
    2e7a:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	f8 01       	movw	r30, r16
    2e84:	80 83       	st	Z, r24
    2e86:	91 83       	std	Z+1, r25	; 0x01
    2e88:	a2 83       	std	Z+2, r26	; 0x02
    2e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e1 55       	subi	r30, 0x51	; 81
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e8       	ldi	r20, 0x80	; 128
    2ea0:	5f e3       	ldi	r21, 0x3F	; 63
    2ea2:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    2ea6:	88 23       	and	r24, r24
    2ea8:	44 f4       	brge	.+16     	; 0x2eba <main+0x14ec>
		__ticks = 1;
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e3 55       	subi	r30, 0x53	; 83
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
    2eb8:	64 c0       	rjmp	.+200    	; 0x2f82 <main+0x15b4>
	else if (__tmp > 65535)
    2eba:	fe 01       	movw	r30, r28
    2ebc:	e1 55       	subi	r30, 0x51	; 81
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	60 81       	ld	r22, Z
    2ec2:	71 81       	ldd	r23, Z+1	; 0x01
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	4f e7       	ldi	r20, 0x7F	; 127
    2ece:	57 e4       	ldi	r21, 0x47	; 71
    2ed0:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    2ed4:	18 16       	cp	r1, r24
    2ed6:	0c f0       	brlt	.+2      	; 0x2eda <main+0x150c>
    2ed8:	43 c0       	rjmp	.+134    	; 0x2f60 <main+0x1592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eda:	fe 01       	movw	r30, r28
    2edc:	ed 54       	subi	r30, 0x4D	; 77
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e2       	ldi	r20, 0x20	; 32
    2eee:	51 e4       	ldi	r21, 0x41	; 65
    2ef0:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	8e 01       	movw	r16, r28
    2efa:	03 55       	subi	r16, 0x53	; 83
    2efc:	1f 4f       	sbci	r17, 0xFF	; 255
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
    2f10:	1f c0       	rjmp	.+62     	; 0x2f50 <main+0x1582>
    2f12:	fe 01       	movw	r30, r28
    2f14:	e5 55       	subi	r30, 0x55	; 85
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 e9       	ldi	r24, 0x90	; 144
    2f1a:	91 e0       	ldi	r25, 0x01	; 1
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	80 83       	st	Z, r24
    2f20:	fe 01       	movw	r30, r28
    2f22:	e5 55       	subi	r30, 0x55	; 85
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <main+0x155c>
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e5 55       	subi	r30, 0x55	; 85
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f38:	de 01       	movw	r26, r28
    2f3a:	a3 55       	subi	r26, 0x53	; 83
    2f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e3 55       	subi	r30, 0x53	; 83
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	91 81       	ldd	r25, Z+1	; 0x01
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	11 96       	adiw	r26, 0x01	; 1
    2f4c:	9c 93       	st	X, r25
    2f4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f50:	fe 01       	movw	r30, r28
    2f52:	e3 55       	subi	r30, 0x53	; 83
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	d1 f6       	brne	.-76     	; 0x2f12 <main+0x1544>
    2f5e:	27 c0       	rjmp	.+78     	; 0x2fae <main+0x15e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f60:	8e 01       	movw	r16, r28
    2f62:	03 55       	subi	r16, 0x53	; 83
    2f64:	1f 4f       	sbci	r17, 0xFF	; 255
    2f66:	fe 01       	movw	r30, r28
    2f68:	e1 55       	subi	r30, 0x51	; 81
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	80 83       	st	Z, r24
    2f82:	de 01       	movw	r26, r28
    2f84:	a7 55       	subi	r26, 0x57	; 87
    2f86:	bf 4f       	sbci	r27, 0xFF	; 255
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e3 55       	subi	r30, 0x53	; 83
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	80 81       	ld	r24, Z
    2f90:	91 81       	ldd	r25, Z+1	; 0x01
    2f92:	8d 93       	st	X+, r24
    2f94:	9c 93       	st	X, r25
    2f96:	fe 01       	movw	r30, r28
    2f98:	e7 55       	subi	r30, 0x57	; 87
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <main+0x15d2>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e7 55       	subi	r30, 0x57	; 87
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	80 83       	st	Z, r24
    _delay_ms(1);
    uiCount++;
    2fae:	9e 01       	movw	r18, r28
    2fb0:	29 59       	subi	r18, 0x99	; 153
    2fb2:	3d 4f       	sbci	r19, 0xFD	; 253
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e9 59       	subi	r30, 0x99	; 153
    2fb8:	fd 4f       	sbci	r31, 0xFD	; 253
    2fba:	80 81       	ld	r24, Z
    2fbc:	91 81       	ldd	r25, Z+1	; 0x01
    2fbe:	a2 81       	ldd	r26, Z+2	; 0x02
    2fc0:	b3 81       	ldd	r27, Z+3	; 0x03
    2fc2:	01 96       	adiw	r24, 0x01	; 1
    2fc4:	a1 1d       	adc	r26, r1
    2fc6:	b1 1d       	adc	r27, r1
    2fc8:	f9 01       	movw	r30, r18
    2fca:	80 83       	st	Z, r24
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	a2 83       	std	Z+2, r26	; 0x02
    2fd0:	b3 83       	std	Z+3, r27	; 0x03

    // alle 1ms

    ldr_read();
    2fd2:	0e 94 66 09 	call	0x12cc	; 0x12cc <ldr_read>

    uint8_t uiBright = 0xff;
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ec 5a       	subi	r30, 0xAC	; 172
    2fda:	fd 4f       	sbci	r31, 0xFD	; 253
    2fdc:	8f ef       	ldi	r24, 0xFF	; 255
    2fde:	80 83       	st	Z, r24
    if (uiBrightControl != 0)
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e3 57       	subi	r30, 0x73	; 115
    2fe4:	fd 4f       	sbci	r31, 0xFD	; 253
    2fe6:	80 81       	ld	r24, Z
    2fe8:	88 23       	and	r24, r24
    2fea:	31 f0       	breq	.+12     	; 0x2ff8 <main+0x162a>
    {
      uiBright = ldr_get_brightness();
    2fec:	0e 94 51 09 	call	0x12a2	; 0x12a2 <ldr_get_brightness>
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	ec 5a       	subi	r30, 0xAC	; 172
    2ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ff6:	80 83       	st	Z, r24
    }
    if (uiBright < 64)
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	ec 5a       	subi	r30, 0xAC	; 172
    2ffc:	fd 4f       	sbci	r31, 0xFD	; 253
    2ffe:	80 81       	ld	r24, Z
    3000:	80 34       	cpi	r24, 0x40	; 64
    3002:	50 f4       	brcc	.+20     	; 0x3018 <main+0x164a>
    {
      uiBright = (uiBright >> 1) + 32;
    3004:	fe 01       	movw	r30, r28
    3006:	ec 5a       	subi	r30, 0xAC	; 172
    3008:	fd 4f       	sbci	r31, 0xFD	; 253
    300a:	80 81       	ld	r24, Z
    300c:	86 95       	lsr	r24
    300e:	fe 01       	movw	r30, r28
    3010:	ec 5a       	subi	r30, 0xAC	; 172
    3012:	fd 4f       	sbci	r31, 0xFD	; 253
    3014:	80 5e       	subi	r24, 0xE0	; 224
    3016:	80 83       	st	Z, r24
    }
    SetColor(uiBright, uiR, uiG, uiB);
    3018:	fe 01       	movw	r30, r28
    301a:	ee 50       	subi	r30, 0x0E	; 14
    301c:	fd 4f       	sbci	r31, 0xFD	; 253
    301e:	20 81       	ld	r18, Z
    3020:	fe 01       	movw	r30, r28
    3022:	ed 50       	subi	r30, 0x0D	; 13
    3024:	fd 4f       	sbci	r31, 0xFD	; 253
    3026:	30 81       	ld	r19, Z
    3028:	fe 01       	movw	r30, r28
    302a:	ec 50       	subi	r30, 0x0C	; 12
    302c:	fd 4f       	sbci	r31, 0xFD	; 253
    302e:	90 81       	ld	r25, Z
    3030:	fe 01       	movw	r30, r28
    3032:	ec 5a       	subi	r30, 0xAC	; 172
    3034:	fd 4f       	sbci	r31, 0xFD	; 253
    3036:	80 81       	ld	r24, Z
    3038:	62 2f       	mov	r22, r18
    303a:	43 2f       	mov	r20, r19
    303c:	29 2f       	mov	r18, r25
    303e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>

    if (uiCount % 10)
    3042:	fe 01       	movw	r30, r28
    3044:	e9 59       	subi	r30, 0x99	; 153
    3046:	fd 4f       	sbci	r31, 0xFD	; 253
    3048:	80 81       	ld	r24, Z
    304a:	91 81       	ldd	r25, Z+1	; 0x01
    304c:	a2 81       	ldd	r26, Z+2	; 0x02
    304e:	b3 81       	ldd	r27, Z+3	; 0x03
    3050:	2a e0       	ldi	r18, 0x0A	; 10
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	bc 01       	movw	r22, r24
    305a:	cd 01       	movw	r24, r26
    305c:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <__divmodsi4>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	00 97       	sbiw	r24, 0x00	; 0
    3066:	a1 05       	cpc	r26, r1
    3068:	b1 05       	cpc	r27, r1
    306a:	09 f0       	breq	.+2      	; 0x306e <main+0x16a0>
    306c:	ec ce       	rjmp	.-552    	; 0x2e46 <main+0x1478>
      continue;
    }

    // ca. alle 10ms

    if (uart_str_complete)
    306e:	80 91 f2 04 	lds	r24, 0x04F2
    3072:	88 23       	and	r24, r24
    3074:	11 f4       	brne	.+4      	; 0x307a <main+0x16ac>
    3076:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <main+0x30f6>
    {
      switch (uart_string[0])
    307a:	80 91 b5 00 	lds	r24, 0x00B5
    307e:	28 2f       	mov	r18, r24
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	cd 55       	subi	r28, 0x5D	; 93
    3084:	dc 4f       	sbci	r29, 0xFC	; 252
    3086:	39 83       	std	Y+1, r19	; 0x01
    3088:	28 83       	st	Y, r18
    308a:	c3 5a       	subi	r28, 0xA3	; 163
    308c:	d3 40       	sbci	r29, 0x03	; 3
    308e:	cd 55       	subi	r28, 0x5D	; 93
    3090:	dc 4f       	sbci	r29, 0xFC	; 252
    3092:	88 81       	ld	r24, Y
    3094:	99 81       	ldd	r25, Y+1	; 0x01
    3096:	c3 5a       	subi	r28, 0xA3	; 163
    3098:	d3 40       	sbci	r29, 0x03	; 3
    309a:	88 36       	cpi	r24, 0x68	; 104
    309c:	91 05       	cpc	r25, r1
    309e:	11 f4       	brne	.+4      	; 0x30a4 <main+0x16d6>
    30a0:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <main+0x28fa>
    30a4:	cd 55       	subi	r28, 0x5D	; 93
    30a6:	dc 4f       	sbci	r29, 0xFC	; 252
    30a8:	e8 81       	ld	r30, Y
    30aa:	f9 81       	ldd	r31, Y+1	; 0x01
    30ac:	c3 5a       	subi	r28, 0xA3	; 163
    30ae:	d3 40       	sbci	r29, 0x03	; 3
    30b0:	e9 36       	cpi	r30, 0x69	; 105
    30b2:	f1 05       	cpc	r31, r1
    30b4:	0c f0       	brlt	.+2      	; 0x30b8 <main+0x16ea>
    30b6:	6e c0       	rjmp	.+220    	; 0x3194 <main+0x17c6>
    30b8:	cd 55       	subi	r28, 0x5D	; 93
    30ba:	dc 4f       	sbci	r29, 0xFC	; 252
    30bc:	28 81       	ld	r18, Y
    30be:	39 81       	ldd	r19, Y+1	; 0x01
    30c0:	c3 5a       	subi	r28, 0xA3	; 163
    30c2:	d3 40       	sbci	r29, 0x03	; 3
    30c4:	2d 34       	cpi	r18, 0x4D	; 77
    30c6:	31 05       	cpc	r19, r1
    30c8:	11 f4       	brne	.+4      	; 0x30ce <main+0x1700>
    30ca:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <main+0x2bfe>
    30ce:	cd 55       	subi	r28, 0x5D	; 93
    30d0:	dc 4f       	sbci	r29, 0xFC	; 252
    30d2:	88 81       	ld	r24, Y
    30d4:	99 81       	ldd	r25, Y+1	; 0x01
    30d6:	c3 5a       	subi	r28, 0xA3	; 163
    30d8:	d3 40       	sbci	r29, 0x03	; 3
    30da:	8e 34       	cpi	r24, 0x4E	; 78
    30dc:	91 05       	cpc	r25, r1
    30de:	cc f5       	brge	.+114    	; 0x3152 <main+0x1784>
    30e0:	cd 55       	subi	r28, 0x5D	; 93
    30e2:	dc 4f       	sbci	r29, 0xFC	; 252
    30e4:	e8 81       	ld	r30, Y
    30e6:	f9 81       	ldd	r31, Y+1	; 0x01
    30e8:	c3 5a       	subi	r28, 0xA3	; 163
    30ea:	d3 40       	sbci	r29, 0x03	; 3
    30ec:	ef 33       	cpi	r30, 0x3F	; 63
    30ee:	f1 05       	cpc	r31, r1
    30f0:	11 f4       	brne	.+4      	; 0x30f6 <main+0x1728>
    30f2:	0c 94 09 24 	jmp	0x4812	; 0x4812 <main+0x2e44>
    30f6:	cd 55       	subi	r28, 0x5D	; 93
    30f8:	dc 4f       	sbci	r29, 0xFC	; 252
    30fa:	28 81       	ld	r18, Y
    30fc:	39 81       	ldd	r19, Y+1	; 0x01
    30fe:	c3 5a       	subi	r28, 0xA3	; 163
    3100:	d3 40       	sbci	r29, 0x03	; 3
    3102:	20 34       	cpi	r18, 0x40	; 64
    3104:	31 05       	cpc	r19, r1
    3106:	c4 f4       	brge	.+48     	; 0x3138 <main+0x176a>
    3108:	cd 55       	subi	r28, 0x5D	; 93
    310a:	dc 4f       	sbci	r29, 0xFC	; 252
    310c:	88 81       	ld	r24, Y
    310e:	99 81       	ldd	r25, Y+1	; 0x01
    3110:	c3 5a       	subi	r28, 0xA3	; 163
    3112:	d3 40       	sbci	r29, 0x03	; 3
    3114:	8b 32       	cpi	r24, 0x2B	; 43
    3116:	91 05       	cpc	r25, r1
    3118:	11 f4       	brne	.+4      	; 0x311e <main+0x1750>
    311a:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <main+0x27c6>
    311e:	cd 55       	subi	r28, 0x5D	; 93
    3120:	dc 4f       	sbci	r29, 0xFC	; 252
    3122:	e8 81       	ld	r30, Y
    3124:	f9 81       	ldd	r31, Y+1	; 0x01
    3126:	c3 5a       	subi	r28, 0xA3	; 163
    3128:	d3 40       	sbci	r29, 0x03	; 3
    312a:	ed 32       	cpi	r30, 0x2D	; 45
    312c:	f1 05       	cpc	r31, r1
    312e:	11 f4       	brne	.+4      	; 0x3134 <main+0x1766>
    3130:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <main+0x2804>
    3134:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <main+0x2e00>
    3138:	cd 55       	subi	r28, 0x5D	; 93
    313a:	dc 4f       	sbci	r29, 0xFC	; 252
    313c:	28 81       	ld	r18, Y
    313e:	39 81       	ldd	r19, Y+1	; 0x01
    3140:	c3 5a       	subi	r28, 0xA3	; 163
    3142:	d3 40       	sbci	r29, 0x03	; 3
    3144:	24 34       	cpi	r18, 0x44	; 68
    3146:	31 05       	cpc	r19, r1
    3148:	11 f4       	brne	.+4      	; 0x314e <main+0x1780>
    314a:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <main+0x2afc>
    314e:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <main+0x2e00>
    3152:	cd 55       	subi	r28, 0x5D	; 93
    3154:	dc 4f       	sbci	r29, 0xFC	; 252
    3156:	88 81       	ld	r24, Y
    3158:	99 81       	ldd	r25, Y+1	; 0x01
    315a:	c3 5a       	subi	r28, 0xA3	; 163
    315c:	d3 40       	sbci	r29, 0x03	; 3
    315e:	82 36       	cpi	r24, 0x62	; 98
    3160:	91 05       	cpc	r25, r1
    3162:	09 f4       	brne	.+2      	; 0x3166 <main+0x1798>
    3164:	4a c6       	rjmp	.+3220   	; 0x3dfa <main+0x242c>
    3166:	cd 55       	subi	r28, 0x5D	; 93
    3168:	dc 4f       	sbci	r29, 0xFC	; 252
    316a:	e8 81       	ld	r30, Y
    316c:	f9 81       	ldd	r31, Y+1	; 0x01
    316e:	c3 5a       	subi	r28, 0xA3	; 163
    3170:	d3 40       	sbci	r29, 0x03	; 3
    3172:	e3 36       	cpi	r30, 0x63	; 99
    3174:	f1 05       	cpc	r31, r1
    3176:	09 f4       	brne	.+2      	; 0x317a <main+0x17ac>
    3178:	53 c7       	rjmp	.+3750   	; 0x4020 <main+0x2652>
    317a:	cd 55       	subi	r28, 0x5D	; 93
    317c:	dc 4f       	sbci	r29, 0xFC	; 252
    317e:	28 81       	ld	r18, Y
    3180:	39 81       	ldd	r19, Y+1	; 0x01
    3182:	c3 5a       	subi	r28, 0xA3	; 163
    3184:	d3 40       	sbci	r29, 0x03	; 3
    3186:	29 35       	cpi	r18, 0x59	; 89
    3188:	31 05       	cpc	r19, r1
    318a:	11 f4       	brne	.+4      	; 0x3190 <main+0x17c2>
    318c:	0c 94 66 23 	jmp	0x46cc	; 0x46cc <main+0x2cfe>
    3190:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <main+0x2e00>
    3194:	cd 55       	subi	r28, 0x5D	; 93
    3196:	dc 4f       	sbci	r29, 0xFC	; 252
    3198:	88 81       	ld	r24, Y
    319a:	99 81       	ldd	r25, Y+1	; 0x01
    319c:	c3 5a       	subi	r28, 0xA3	; 163
    319e:	d3 40       	sbci	r29, 0x03	; 3
    31a0:	80 37       	cpi	r24, 0x70	; 112
    31a2:	91 05       	cpc	r25, r1
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <main+0x17da>
    31a6:	41 c0       	rjmp	.+130    	; 0x322a <main+0x185c>
    31a8:	cd 55       	subi	r28, 0x5D	; 93
    31aa:	dc 4f       	sbci	r29, 0xFC	; 252
    31ac:	e8 81       	ld	r30, Y
    31ae:	f9 81       	ldd	r31, Y+1	; 0x01
    31b0:	c3 5a       	subi	r28, 0xA3	; 163
    31b2:	d3 40       	sbci	r29, 0x03	; 3
    31b4:	e1 37       	cpi	r30, 0x71	; 113
    31b6:	f1 05       	cpc	r31, r1
    31b8:	bc f4       	brge	.+46     	; 0x31e8 <main+0x181a>
    31ba:	cd 55       	subi	r28, 0x5D	; 93
    31bc:	dc 4f       	sbci	r29, 0xFC	; 252
    31be:	28 81       	ld	r18, Y
    31c0:	39 81       	ldd	r19, Y+1	; 0x01
    31c2:	c3 5a       	subi	r28, 0xA3	; 163
    31c4:	d3 40       	sbci	r29, 0x03	; 3
    31c6:	2c 36       	cpi	r18, 0x6C	; 108
    31c8:	31 05       	cpc	r19, r1
    31ca:	09 f4       	brne	.+2      	; 0x31ce <main+0x1800>
    31cc:	5f c5       	rjmp	.+2750   	; 0x3c8c <main+0x22be>
    31ce:	cd 55       	subi	r28, 0x5D	; 93
    31d0:	dc 4f       	sbci	r29, 0xFC	; 252
    31d2:	88 81       	ld	r24, Y
    31d4:	99 81       	ldd	r25, Y+1	; 0x01
    31d6:	c3 5a       	subi	r28, 0xA3	; 163
    31d8:	d3 40       	sbci	r29, 0x03	; 3
    31da:	8d 36       	cpi	r24, 0x6D	; 109
    31dc:	91 05       	cpc	r25, r1
    31de:	11 f4       	brne	.+4      	; 0x31e4 <main+0x1816>
    31e0:	0c 94 e5 21 	jmp	0x43ca	; 0x43ca <main+0x29fc>
    31e4:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <main+0x2e00>
    31e8:	cd 55       	subi	r28, 0x5D	; 93
    31ea:	dc 4f       	sbci	r29, 0xFC	; 252
    31ec:	e8 81       	ld	r30, Y
    31ee:	f9 81       	ldd	r31, Y+1	; 0x01
    31f0:	c3 5a       	subi	r28, 0xA3	; 163
    31f2:	d3 40       	sbci	r29, 0x03	; 3
    31f4:	e4 37       	cpi	r30, 0x74	; 116
    31f6:	f1 05       	cpc	r31, r1
    31f8:	09 f4       	brne	.+2      	; 0x31fc <main+0x182e>
    31fa:	ad c7       	rjmp	.+3930   	; 0x4156 <main+0x2788>
    31fc:	cd 55       	subi	r28, 0x5D	; 93
    31fe:	dc 4f       	sbci	r29, 0xFC	; 252
    3200:	28 81       	ld	r18, Y
    3202:	39 81       	ldd	r19, Y+1	; 0x01
    3204:	c3 5a       	subi	r28, 0xA3	; 163
    3206:	d3 40       	sbci	r29, 0x03	; 3
    3208:	2a 37       	cpi	r18, 0x7A	; 122
    320a:	31 05       	cpc	r19, r1
    320c:	11 f4       	brne	.+4      	; 0x3212 <main+0x1844>
    320e:	0c 94 08 21 	jmp	0x4210	; 0x4210 <main+0x2842>
    3212:	cd 55       	subi	r28, 0x5D	; 93
    3214:	dc 4f       	sbci	r29, 0xFC	; 252
    3216:	88 81       	ld	r24, Y
    3218:	99 81       	ldd	r25, Y+1	; 0x01
    321a:	c3 5a       	subi	r28, 0xA3	; 163
    321c:	d3 40       	sbci	r29, 0x03	; 3
    321e:	82 37       	cpi	r24, 0x72	; 114
    3220:	91 05       	cpc	r25, r1
    3222:	09 f4       	brne	.+2      	; 0x3226 <main+0x1858>
    3224:	e5 c5       	rjmp	.+3018   	; 0x3df0 <main+0x2422>
    3226:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <main+0x2e00>
        {
          //          TimeInfo(time);
        }
        break;
      case 'p':
        uartPuts("\r\nParty-Mode...\r\n");
    322a:	8b e0       	ldi	r24, 0x0B	; 11
    322c:	93 e0       	ldi	r25, 0x03	; 3
    322e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
        shift32_output(0xffffffff);
    3232:	6f ef       	ldi	r22, 0xFF	; 255
    3234:	7f ef       	ldi	r23, 0xFF	; 255
    3236:	8f ef       	ldi	r24, 0xFF	; 255
    3238:	9f ef       	ldi	r25, 0xFF	; 255
    323a:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
        uart_str_complete = 0;
    323e:	10 92 f2 04 	sts	0x04F2, r1
    3242:	17 c5       	rjmp	.+2606   	; 0x3c72 <main+0x22a4>
        while (!uart_str_complete)
        {
          SetColor(0xFF, 0x80, 0x00, 0x00);
    3244:	8f ef       	ldi	r24, 0xFF	; 255
    3246:	60 e8       	ldi	r22, 0x80	; 128
    3248:	40 e0       	ldi	r20, 0x00	; 0
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
          wdt_reset();
    3250:	a8 95       	wdr
    3252:	fe 01       	movw	r30, r28
    3254:	eb 55       	subi	r30, 0x5B	; 91
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	a0 ea       	ldi	r26, 0xA0	; 160
    325e:	b1 e4       	ldi	r27, 0x41	; 65
    3260:	80 83       	st	Z, r24
    3262:	91 83       	std	Z+1, r25	; 0x01
    3264:	a2 83       	std	Z+2, r26	; 0x02
    3266:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3268:	8e 01       	movw	r16, r28
    326a:	0f 55       	subi	r16, 0x5F	; 95
    326c:	1f 4f       	sbci	r17, 0xFF	; 255
    326e:	fe 01       	movw	r30, r28
    3270:	eb 55       	subi	r30, 0x5B	; 91
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	4a e7       	ldi	r20, 0x7A	; 122
    3282:	55 e4       	ldi	r21, 0x45	; 69
    3284:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	f8 01       	movw	r30, r16
    328e:	80 83       	st	Z, r24
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	a2 83       	std	Z+2, r26	; 0x02
    3294:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3296:	fe 01       	movw	r30, r28
    3298:	ef 55       	subi	r30, 0x5F	; 95
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e8       	ldi	r20, 0x80	; 128
    32aa:	5f e3       	ldi	r21, 0x3F	; 63
    32ac:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    32b0:	88 23       	and	r24, r24
    32b2:	44 f4       	brge	.+16     	; 0x32c4 <main+0x18f6>
		__ticks = 1;
    32b4:	fe 01       	movw	r30, r28
    32b6:	e1 56       	subi	r30, 0x61	; 97
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	91 83       	std	Z+1, r25	; 0x01
    32c0:	80 83       	st	Z, r24
    32c2:	64 c0       	rjmp	.+200    	; 0x338c <main+0x19be>
	else if (__tmp > 65535)
    32c4:	fe 01       	movw	r30, r28
    32c6:	ef 55       	subi	r30, 0x5F	; 95
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	60 81       	ld	r22, Z
    32cc:	71 81       	ldd	r23, Z+1	; 0x01
    32ce:	82 81       	ldd	r24, Z+2	; 0x02
    32d0:	93 81       	ldd	r25, Z+3	; 0x03
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	3f ef       	ldi	r19, 0xFF	; 255
    32d6:	4f e7       	ldi	r20, 0x7F	; 127
    32d8:	57 e4       	ldi	r21, 0x47	; 71
    32da:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    32de:	18 16       	cp	r1, r24
    32e0:	0c f0       	brlt	.+2      	; 0x32e4 <main+0x1916>
    32e2:	43 c0       	rjmp	.+134    	; 0x336a <main+0x199c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e4:	fe 01       	movw	r30, r28
    32e6:	eb 55       	subi	r30, 0x5B	; 91
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	60 81       	ld	r22, Z
    32ec:	71 81       	ldd	r23, Z+1	; 0x01
    32ee:	82 81       	ldd	r24, Z+2	; 0x02
    32f0:	93 81       	ldd	r25, Z+3	; 0x03
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	40 e2       	ldi	r20, 0x20	; 32
    32f8:	51 e4       	ldi	r21, 0x41	; 65
    32fa:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	8e 01       	movw	r16, r28
    3304:	01 56       	subi	r16, 0x61	; 97
    3306:	1f 4f       	sbci	r17, 0xFF	; 255
    3308:	bc 01       	movw	r22, r24
    330a:	cd 01       	movw	r24, r26
    330c:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	f8 01       	movw	r30, r16
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	80 83       	st	Z, r24
    331a:	1f c0       	rjmp	.+62     	; 0x335a <main+0x198c>
    331c:	fe 01       	movw	r30, r28
    331e:	e3 56       	subi	r30, 0x63	; 99
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 e9       	ldi	r24, 0x90	; 144
    3324:	91 e0       	ldi	r25, 0x01	; 1
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	80 83       	st	Z, r24
    332a:	fe 01       	movw	r30, r28
    332c:	e3 56       	subi	r30, 0x63	; 99
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	80 81       	ld	r24, Z
    3332:	91 81       	ldd	r25, Z+1	; 0x01
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <main+0x1966>
    3338:	fe 01       	movw	r30, r28
    333a:	e3 56       	subi	r30, 0x63	; 99
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3342:	de 01       	movw	r26, r28
    3344:	a1 56       	subi	r26, 0x61	; 97
    3346:	bf 4f       	sbci	r27, 0xFF	; 255
    3348:	fe 01       	movw	r30, r28
    334a:	e1 56       	subi	r30, 0x61	; 97
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	91 81       	ldd	r25, Z+1	; 0x01
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	11 96       	adiw	r26, 0x01	; 1
    3356:	9c 93       	st	X, r25
    3358:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335a:	fe 01       	movw	r30, r28
    335c:	e1 56       	subi	r30, 0x61	; 97
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	80 81       	ld	r24, Z
    3362:	91 81       	ldd	r25, Z+1	; 0x01
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	d1 f6       	brne	.-76     	; 0x331c <main+0x194e>
    3368:	27 c0       	rjmp	.+78     	; 0x33b8 <main+0x19ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336a:	8e 01       	movw	r16, r28
    336c:	01 56       	subi	r16, 0x61	; 97
    336e:	1f 4f       	sbci	r17, 0xFF	; 255
    3370:	fe 01       	movw	r30, r28
    3372:	ef 55       	subi	r30, 0x5F	; 95
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	60 81       	ld	r22, Z
    3378:	71 81       	ldd	r23, Z+1	; 0x01
    337a:	82 81       	ldd	r24, Z+2	; 0x02
    337c:	93 81       	ldd	r25, Z+3	; 0x03
    337e:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	f8 01       	movw	r30, r16
    3388:	91 83       	std	Z+1, r25	; 0x01
    338a:	80 83       	st	Z, r24
    338c:	de 01       	movw	r26, r28
    338e:	a5 56       	subi	r26, 0x65	; 101
    3390:	bf 4f       	sbci	r27, 0xFF	; 255
    3392:	fe 01       	movw	r30, r28
    3394:	e1 56       	subi	r30, 0x61	; 97
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	80 81       	ld	r24, Z
    339a:	91 81       	ldd	r25, Z+1	; 0x01
    339c:	8d 93       	st	X+, r24
    339e:	9c 93       	st	X, r25
    33a0:	fe 01       	movw	r30, r28
    33a2:	e5 56       	subi	r30, 0x65	; 101
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 81       	ld	r24, Z
    33a8:	91 81       	ldd	r25, Z+1	; 0x01
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <main+0x19dc>
    33ae:	fe 01       	movw	r30, r28
    33b0:	e5 56       	subi	r30, 0x65	; 101
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	91 83       	std	Z+1, r25	; 0x01
    33b6:	80 83       	st	Z, r24
          _delay_ms(20);
          SetColor(0xFF, 0xFF, 0x00, 0x00);
    33b8:	8f ef       	ldi	r24, 0xFF	; 255
    33ba:	6f ef       	ldi	r22, 0xFF	; 255
    33bc:	40 e0       	ldi	r20, 0x00	; 0
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
          wdt_reset();
    33c4:	a8 95       	wdr
    33c6:	fe 01       	movw	r30, r28
    33c8:	e9 56       	subi	r30, 0x69	; 105
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	a8 e4       	ldi	r26, 0x48	; 72
    33d2:	b3 e4       	ldi	r27, 0x43	; 67
    33d4:	80 83       	st	Z, r24
    33d6:	91 83       	std	Z+1, r25	; 0x01
    33d8:	a2 83       	std	Z+2, r26	; 0x02
    33da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33dc:	8e 01       	movw	r16, r28
    33de:	0d 56       	subi	r16, 0x6D	; 109
    33e0:	1f 4f       	sbci	r17, 0xFF	; 255
    33e2:	fe 01       	movw	r30, r28
    33e4:	e9 56       	subi	r30, 0x69	; 105
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	60 81       	ld	r22, Z
    33ea:	71 81       	ldd	r23, Z+1	; 0x01
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	93 81       	ldd	r25, Z+3	; 0x03
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	4a e7       	ldi	r20, 0x7A	; 122
    33f6:	55 e4       	ldi	r21, 0x45	; 69
    33f8:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	f8 01       	movw	r30, r16
    3402:	80 83       	st	Z, r24
    3404:	91 83       	std	Z+1, r25	; 0x01
    3406:	a2 83       	std	Z+2, r26	; 0x02
    3408:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    340a:	fe 01       	movw	r30, r28
    340c:	ed 56       	subi	r30, 0x6D	; 109
    340e:	ff 4f       	sbci	r31, 0xFF	; 255
    3410:	60 81       	ld	r22, Z
    3412:	71 81       	ldd	r23, Z+1	; 0x01
    3414:	82 81       	ldd	r24, Z+2	; 0x02
    3416:	93 81       	ldd	r25, Z+3	; 0x03
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e8       	ldi	r20, 0x80	; 128
    341e:	5f e3       	ldi	r21, 0x3F	; 63
    3420:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    3424:	88 23       	and	r24, r24
    3426:	44 f4       	brge	.+16     	; 0x3438 <main+0x1a6a>
		__ticks = 1;
    3428:	fe 01       	movw	r30, r28
    342a:	ef 56       	subi	r30, 0x6F	; 111
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
    3436:	64 c0       	rjmp	.+200    	; 0x3500 <main+0x1b32>
	else if (__tmp > 65535)
    3438:	fe 01       	movw	r30, r28
    343a:	ed 56       	subi	r30, 0x6D	; 109
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	60 81       	ld	r22, Z
    3440:	71 81       	ldd	r23, Z+1	; 0x01
    3442:	82 81       	ldd	r24, Z+2	; 0x02
    3444:	93 81       	ldd	r25, Z+3	; 0x03
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	3f ef       	ldi	r19, 0xFF	; 255
    344a:	4f e7       	ldi	r20, 0x7F	; 127
    344c:	57 e4       	ldi	r21, 0x47	; 71
    344e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    3452:	18 16       	cp	r1, r24
    3454:	0c f0       	brlt	.+2      	; 0x3458 <main+0x1a8a>
    3456:	43 c0       	rjmp	.+134    	; 0x34de <main+0x1b10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3458:	fe 01       	movw	r30, r28
    345a:	e9 56       	subi	r30, 0x69	; 105
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	60 81       	ld	r22, Z
    3460:	71 81       	ldd	r23, Z+1	; 0x01
    3462:	82 81       	ldd	r24, Z+2	; 0x02
    3464:	93 81       	ldd	r25, Z+3	; 0x03
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e2       	ldi	r20, 0x20	; 32
    346c:	51 e4       	ldi	r21, 0x41	; 65
    346e:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	8e 01       	movw	r16, r28
    3478:	0f 56       	subi	r16, 0x6F	; 111
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	bc 01       	movw	r22, r24
    347e:	cd 01       	movw	r24, r26
    3480:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	f8 01       	movw	r30, r16
    348a:	91 83       	std	Z+1, r25	; 0x01
    348c:	80 83       	st	Z, r24
    348e:	1f c0       	rjmp	.+62     	; 0x34ce <main+0x1b00>
    3490:	fe 01       	movw	r30, r28
    3492:	e1 57       	subi	r30, 0x71	; 113
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 e9       	ldi	r24, 0x90	; 144
    3498:	91 e0       	ldi	r25, 0x01	; 1
    349a:	91 83       	std	Z+1, r25	; 0x01
    349c:	80 83       	st	Z, r24
    349e:	fe 01       	movw	r30, r28
    34a0:	e1 57       	subi	r30, 0x71	; 113
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <main+0x1ada>
    34ac:	fe 01       	movw	r30, r28
    34ae:	e1 57       	subi	r30, 0x71	; 113
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	91 83       	std	Z+1, r25	; 0x01
    34b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b6:	de 01       	movw	r26, r28
    34b8:	af 56       	subi	r26, 0x6F	; 111
    34ba:	bf 4f       	sbci	r27, 0xFF	; 255
    34bc:	fe 01       	movw	r30, r28
    34be:	ef 56       	subi	r30, 0x6F	; 111
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	80 81       	ld	r24, Z
    34c4:	91 81       	ldd	r25, Z+1	; 0x01
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	11 96       	adiw	r26, 0x01	; 1
    34ca:	9c 93       	st	X, r25
    34cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ce:	fe 01       	movw	r30, r28
    34d0:	ef 56       	subi	r30, 0x6F	; 111
    34d2:	ff 4f       	sbci	r31, 0xFF	; 255
    34d4:	80 81       	ld	r24, Z
    34d6:	91 81       	ldd	r25, Z+1	; 0x01
    34d8:	00 97       	sbiw	r24, 0x00	; 0
    34da:	d1 f6       	brne	.-76     	; 0x3490 <main+0x1ac2>
    34dc:	27 c0       	rjmp	.+78     	; 0x352c <main+0x1b5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34de:	8e 01       	movw	r16, r28
    34e0:	0f 56       	subi	r16, 0x6F	; 111
    34e2:	1f 4f       	sbci	r17, 0xFF	; 255
    34e4:	fe 01       	movw	r30, r28
    34e6:	ed 56       	subi	r30, 0x6D	; 109
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	f8 01       	movw	r30, r16
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
    3500:	de 01       	movw	r26, r28
    3502:	a3 57       	subi	r26, 0x73	; 115
    3504:	bf 4f       	sbci	r27, 0xFF	; 255
    3506:	fe 01       	movw	r30, r28
    3508:	ef 56       	subi	r30, 0x6F	; 111
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	8d 93       	st	X+, r24
    3512:	9c 93       	st	X, r25
    3514:	fe 01       	movw	r30, r28
    3516:	e3 57       	subi	r30, 0x73	; 115
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	f1 f7       	brne	.-4      	; 0x351e <main+0x1b50>
    3522:	fe 01       	movw	r30, r28
    3524:	e3 57       	subi	r30, 0x73	; 115
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	91 83       	std	Z+1, r25	; 0x01
    352a:	80 83       	st	Z, r24
          _delay_ms(200);
          SetColor(0xFF, 0x00, 0x80, 0x00);
    352c:	8f ef       	ldi	r24, 0xFF	; 255
    352e:	60 e0       	ldi	r22, 0x00	; 0
    3530:	40 e8       	ldi	r20, 0x80	; 128
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
          wdt_reset();
    3538:	a8 95       	wdr
    353a:	fe 01       	movw	r30, r28
    353c:	e7 57       	subi	r30, 0x77	; 119
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 ea       	ldi	r26, 0xA0	; 160
    3546:	b1 e4       	ldi	r27, 0x41	; 65
    3548:	80 83       	st	Z, r24
    354a:	91 83       	std	Z+1, r25	; 0x01
    354c:	a2 83       	std	Z+2, r26	; 0x02
    354e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3550:	8e 01       	movw	r16, r28
    3552:	0b 57       	subi	r16, 0x7B	; 123
    3554:	1f 4f       	sbci	r17, 0xFF	; 255
    3556:	fe 01       	movw	r30, r28
    3558:	e7 57       	subi	r30, 0x77	; 119
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	60 81       	ld	r22, Z
    355e:	71 81       	ldd	r23, Z+1	; 0x01
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	93 81       	ldd	r25, Z+3	; 0x03
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	4a e7       	ldi	r20, 0x7A	; 122
    356a:	55 e4       	ldi	r21, 0x45	; 69
    356c:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	f8 01       	movw	r30, r16
    3576:	80 83       	st	Z, r24
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	a2 83       	std	Z+2, r26	; 0x02
    357c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    357e:	fe 01       	movw	r30, r28
    3580:	eb 57       	subi	r30, 0x7B	; 123
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	60 81       	ld	r22, Z
    3586:	71 81       	ldd	r23, Z+1	; 0x01
    3588:	82 81       	ldd	r24, Z+2	; 0x02
    358a:	93 81       	ldd	r25, Z+3	; 0x03
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e8       	ldi	r20, 0x80	; 128
    3592:	5f e3       	ldi	r21, 0x3F	; 63
    3594:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    3598:	88 23       	and	r24, r24
    359a:	44 f4       	brge	.+16     	; 0x35ac <main+0x1bde>
		__ticks = 1;
    359c:	fe 01       	movw	r30, r28
    359e:	ed 57       	subi	r30, 0x7D	; 125
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
    35aa:	64 c0       	rjmp	.+200    	; 0x3674 <main+0x1ca6>
	else if (__tmp > 65535)
    35ac:	fe 01       	movw	r30, r28
    35ae:	eb 57       	subi	r30, 0x7B	; 123
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	3f ef       	ldi	r19, 0xFF	; 255
    35be:	4f e7       	ldi	r20, 0x7F	; 127
    35c0:	57 e4       	ldi	r21, 0x47	; 71
    35c2:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    35c6:	18 16       	cp	r1, r24
    35c8:	0c f0       	brlt	.+2      	; 0x35cc <main+0x1bfe>
    35ca:	43 c0       	rjmp	.+134    	; 0x3652 <main+0x1c84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35cc:	fe 01       	movw	r30, r28
    35ce:	e7 57       	subi	r30, 0x77	; 119
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	60 81       	ld	r22, Z
    35d4:	71 81       	ldd	r23, Z+1	; 0x01
    35d6:	82 81       	ldd	r24, Z+2	; 0x02
    35d8:	93 81       	ldd	r25, Z+3	; 0x03
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e2       	ldi	r20, 0x20	; 32
    35e0:	51 e4       	ldi	r21, 0x41	; 65
    35e2:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	8e 01       	movw	r16, r28
    35ec:	0d 57       	subi	r16, 0x7D	; 125
    35ee:	1f 4f       	sbci	r17, 0xFF	; 255
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	f8 01       	movw	r30, r16
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
    3602:	1f c0       	rjmp	.+62     	; 0x3642 <main+0x1c74>
    3604:	fe 01       	movw	r30, r28
    3606:	ef 57       	subi	r30, 0x7F	; 127
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	80 e9       	ldi	r24, 0x90	; 144
    360c:	91 e0       	ldi	r25, 0x01	; 1
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	80 83       	st	Z, r24
    3612:	fe 01       	movw	r30, r28
    3614:	ef 57       	subi	r30, 0x7F	; 127
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	80 81       	ld	r24, Z
    361a:	91 81       	ldd	r25, Z+1	; 0x01
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	f1 f7       	brne	.-4      	; 0x361c <main+0x1c4e>
    3620:	fe 01       	movw	r30, r28
    3622:	ef 57       	subi	r30, 0x7F	; 127
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	91 83       	std	Z+1, r25	; 0x01
    3628:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362a:	de 01       	movw	r26, r28
    362c:	ad 57       	subi	r26, 0x7D	; 125
    362e:	bf 4f       	sbci	r27, 0xFF	; 255
    3630:	fe 01       	movw	r30, r28
    3632:	ed 57       	subi	r30, 0x7D	; 125
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	80 81       	ld	r24, Z
    3638:	91 81       	ldd	r25, Z+1	; 0x01
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	11 96       	adiw	r26, 0x01	; 1
    363e:	9c 93       	st	X, r25
    3640:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3642:	fe 01       	movw	r30, r28
    3644:	ed 57       	subi	r30, 0x7D	; 125
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 81       	ld	r24, Z
    364a:	91 81       	ldd	r25, Z+1	; 0x01
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	d1 f6       	brne	.-76     	; 0x3604 <main+0x1c36>
    3650:	27 c0       	rjmp	.+78     	; 0x36a0 <main+0x1cd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3652:	8e 01       	movw	r16, r28
    3654:	0d 57       	subi	r16, 0x7D	; 125
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	fe 01       	movw	r30, r28
    365a:	eb 57       	subi	r30, 0x7B	; 123
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	f8 01       	movw	r30, r16
    3670:	91 83       	std	Z+1, r25	; 0x01
    3672:	80 83       	st	Z, r24
    3674:	de 01       	movw	r26, r28
    3676:	a1 58       	subi	r26, 0x81	; 129
    3678:	bf 4f       	sbci	r27, 0xFF	; 255
    367a:	fe 01       	movw	r30, r28
    367c:	ed 57       	subi	r30, 0x7D	; 125
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 81       	ld	r24, Z
    3682:	91 81       	ldd	r25, Z+1	; 0x01
    3684:	8d 93       	st	X+, r24
    3686:	9c 93       	st	X, r25
    3688:	fe 01       	movw	r30, r28
    368a:	e1 58       	subi	r30, 0x81	; 129
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	80 81       	ld	r24, Z
    3690:	91 81       	ldd	r25, Z+1	; 0x01
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	f1 f7       	brne	.-4      	; 0x3692 <main+0x1cc4>
    3696:	fe 01       	movw	r30, r28
    3698:	e1 58       	subi	r30, 0x81	; 129
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	91 83       	std	Z+1, r25	; 0x01
    369e:	80 83       	st	Z, r24
          _delay_ms(20);
          SetColor(0xFF, 0x00, 0xFF, 0x00);
    36a0:	8f ef       	ldi	r24, 0xFF	; 255
    36a2:	60 e0       	ldi	r22, 0x00	; 0
    36a4:	4f ef       	ldi	r20, 0xFF	; 255
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
          wdt_reset();
    36ac:	a8 95       	wdr
    36ae:	fe 01       	movw	r30, r28
    36b0:	e5 58       	subi	r30, 0x85	; 133
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	a8 e4       	ldi	r26, 0x48	; 72
    36ba:	b3 e4       	ldi	r27, 0x43	; 67
    36bc:	80 83       	st	Z, r24
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	a2 83       	std	Z+2, r26	; 0x02
    36c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c4:	8e 01       	movw	r16, r28
    36c6:	09 58       	subi	r16, 0x89	; 137
    36c8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ca:	fe 01       	movw	r30, r28
    36cc:	e5 58       	subi	r30, 0x85	; 133
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	60 81       	ld	r22, Z
    36d2:	71 81       	ldd	r23, Z+1	; 0x01
    36d4:	82 81       	ldd	r24, Z+2	; 0x02
    36d6:	93 81       	ldd	r25, Z+3	; 0x03
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4a e7       	ldi	r20, 0x7A	; 122
    36de:	55 e4       	ldi	r21, 0x45	; 69
    36e0:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	f8 01       	movw	r30, r16
    36ea:	80 83       	st	Z, r24
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	a2 83       	std	Z+2, r26	; 0x02
    36f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36f2:	fe 01       	movw	r30, r28
    36f4:	e9 58       	subi	r30, 0x89	; 137
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	60 81       	ld	r22, Z
    36fa:	71 81       	ldd	r23, Z+1	; 0x01
    36fc:	82 81       	ldd	r24, Z+2	; 0x02
    36fe:	93 81       	ldd	r25, Z+3	; 0x03
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e8       	ldi	r20, 0x80	; 128
    3706:	5f e3       	ldi	r21, 0x3F	; 63
    3708:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    370c:	88 23       	and	r24, r24
    370e:	44 f4       	brge	.+16     	; 0x3720 <main+0x1d52>
		__ticks = 1;
    3710:	fe 01       	movw	r30, r28
    3712:	eb 58       	subi	r30, 0x8B	; 139
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	91 83       	std	Z+1, r25	; 0x01
    371c:	80 83       	st	Z, r24
    371e:	64 c0       	rjmp	.+200    	; 0x37e8 <main+0x1e1a>
	else if (__tmp > 65535)
    3720:	fe 01       	movw	r30, r28
    3722:	e9 58       	subi	r30, 0x89	; 137
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	60 81       	ld	r22, Z
    3728:	71 81       	ldd	r23, Z+1	; 0x01
    372a:	82 81       	ldd	r24, Z+2	; 0x02
    372c:	93 81       	ldd	r25, Z+3	; 0x03
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	3f ef       	ldi	r19, 0xFF	; 255
    3732:	4f e7       	ldi	r20, 0x7F	; 127
    3734:	57 e4       	ldi	r21, 0x47	; 71
    3736:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    373a:	18 16       	cp	r1, r24
    373c:	0c f0       	brlt	.+2      	; 0x3740 <main+0x1d72>
    373e:	43 c0       	rjmp	.+134    	; 0x37c6 <main+0x1df8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3740:	fe 01       	movw	r30, r28
    3742:	e5 58       	subi	r30, 0x85	; 133
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	40 e2       	ldi	r20, 0x20	; 32
    3754:	51 e4       	ldi	r21, 0x41	; 65
    3756:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	8e 01       	movw	r16, r28
    3760:	0b 58       	subi	r16, 0x8B	; 139
    3762:	1f 4f       	sbci	r17, 0xFF	; 255
    3764:	bc 01       	movw	r22, r24
    3766:	cd 01       	movw	r24, r26
    3768:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	f8 01       	movw	r30, r16
    3772:	91 83       	std	Z+1, r25	; 0x01
    3774:	80 83       	st	Z, r24
    3776:	1f c0       	rjmp	.+62     	; 0x37b6 <main+0x1de8>
    3778:	fe 01       	movw	r30, r28
    377a:	ed 58       	subi	r30, 0x8D	; 141
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 e9       	ldi	r24, 0x90	; 144
    3780:	91 e0       	ldi	r25, 0x01	; 1
    3782:	91 83       	std	Z+1, r25	; 0x01
    3784:	80 83       	st	Z, r24
    3786:	fe 01       	movw	r30, r28
    3788:	ed 58       	subi	r30, 0x8D	; 141
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <main+0x1dc2>
    3794:	fe 01       	movw	r30, r28
    3796:	ed 58       	subi	r30, 0x8D	; 141
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	91 83       	std	Z+1, r25	; 0x01
    379c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    379e:	de 01       	movw	r26, r28
    37a0:	ab 58       	subi	r26, 0x8B	; 139
    37a2:	bf 4f       	sbci	r27, 0xFF	; 255
    37a4:	fe 01       	movw	r30, r28
    37a6:	eb 58       	subi	r30, 0x8B	; 139
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	80 81       	ld	r24, Z
    37ac:	91 81       	ldd	r25, Z+1	; 0x01
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	11 96       	adiw	r26, 0x01	; 1
    37b2:	9c 93       	st	X, r25
    37b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b6:	fe 01       	movw	r30, r28
    37b8:	eb 58       	subi	r30, 0x8B	; 139
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	80 81       	ld	r24, Z
    37be:	91 81       	ldd	r25, Z+1	; 0x01
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	d1 f6       	brne	.-76     	; 0x3778 <main+0x1daa>
    37c4:	27 c0       	rjmp	.+78     	; 0x3814 <main+0x1e46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c6:	8e 01       	movw	r16, r28
    37c8:	0b 58       	subi	r16, 0x8B	; 139
    37ca:	1f 4f       	sbci	r17, 0xFF	; 255
    37cc:	fe 01       	movw	r30, r28
    37ce:	e9 58       	subi	r30, 0x89	; 137
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	60 81       	ld	r22, Z
    37d4:	71 81       	ldd	r23, Z+1	; 0x01
    37d6:	82 81       	ldd	r24, Z+2	; 0x02
    37d8:	93 81       	ldd	r25, Z+3	; 0x03
    37da:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	f8 01       	movw	r30, r16
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	80 83       	st	Z, r24
    37e8:	de 01       	movw	r26, r28
    37ea:	af 58       	subi	r26, 0x8F	; 143
    37ec:	bf 4f       	sbci	r27, 0xFF	; 255
    37ee:	fe 01       	movw	r30, r28
    37f0:	eb 58       	subi	r30, 0x8B	; 139
    37f2:	ff 4f       	sbci	r31, 0xFF	; 255
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	8d 93       	st	X+, r24
    37fa:	9c 93       	st	X, r25
    37fc:	fe 01       	movw	r30, r28
    37fe:	ef 58       	subi	r30, 0x8F	; 143
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	80 81       	ld	r24, Z
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	f1 f7       	brne	.-4      	; 0x3806 <main+0x1e38>
    380a:	fe 01       	movw	r30, r28
    380c:	ef 58       	subi	r30, 0x8F	; 143
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	91 83       	std	Z+1, r25	; 0x01
    3812:	80 83       	st	Z, r24
          _delay_ms(200);
          SetColor(0xFF, 0x00, 0x00, 0x80);
    3814:	8f ef       	ldi	r24, 0xFF	; 255
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	40 e0       	ldi	r20, 0x00	; 0
    381a:	20 e8       	ldi	r18, 0x80	; 128
    381c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
          wdt_reset();
    3820:	a8 95       	wdr
    3822:	fe 01       	movw	r30, r28
    3824:	e3 59       	subi	r30, 0x93	; 147
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	a0 ea       	ldi	r26, 0xA0	; 160
    382e:	b1 e4       	ldi	r27, 0x41	; 65
    3830:	80 83       	st	Z, r24
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	a2 83       	std	Z+2, r26	; 0x02
    3836:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3838:	8e 01       	movw	r16, r28
    383a:	07 59       	subi	r16, 0x97	; 151
    383c:	1f 4f       	sbci	r17, 0xFF	; 255
    383e:	fe 01       	movw	r30, r28
    3840:	e3 59       	subi	r30, 0x93	; 147
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	60 81       	ld	r22, Z
    3846:	71 81       	ldd	r23, Z+1	; 0x01
    3848:	82 81       	ldd	r24, Z+2	; 0x02
    384a:	93 81       	ldd	r25, Z+3	; 0x03
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	4a e7       	ldi	r20, 0x7A	; 122
    3852:	55 e4       	ldi	r21, 0x45	; 69
    3854:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	f8 01       	movw	r30, r16
    385e:	80 83       	st	Z, r24
    3860:	91 83       	std	Z+1, r25	; 0x01
    3862:	a2 83       	std	Z+2, r26	; 0x02
    3864:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3866:	fe 01       	movw	r30, r28
    3868:	e7 59       	subi	r30, 0x97	; 151
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	60 81       	ld	r22, Z
    386e:	71 81       	ldd	r23, Z+1	; 0x01
    3870:	82 81       	ldd	r24, Z+2	; 0x02
    3872:	93 81       	ldd	r25, Z+3	; 0x03
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	40 e8       	ldi	r20, 0x80	; 128
    387a:	5f e3       	ldi	r21, 0x3F	; 63
    387c:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    3880:	88 23       	and	r24, r24
    3882:	44 f4       	brge	.+16     	; 0x3894 <main+0x1ec6>
		__ticks = 1;
    3884:	fe 01       	movw	r30, r28
    3886:	e9 59       	subi	r30, 0x99	; 153
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	91 83       	std	Z+1, r25	; 0x01
    3890:	80 83       	st	Z, r24
    3892:	64 c0       	rjmp	.+200    	; 0x395c <main+0x1f8e>
	else if (__tmp > 65535)
    3894:	fe 01       	movw	r30, r28
    3896:	e7 59       	subi	r30, 0x97	; 151
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	3f ef       	ldi	r19, 0xFF	; 255
    38a6:	4f e7       	ldi	r20, 0x7F	; 127
    38a8:	57 e4       	ldi	r21, 0x47	; 71
    38aa:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    38ae:	18 16       	cp	r1, r24
    38b0:	0c f0       	brlt	.+2      	; 0x38b4 <main+0x1ee6>
    38b2:	43 c0       	rjmp	.+134    	; 0x393a <main+0x1f6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b4:	fe 01       	movw	r30, r28
    38b6:	e3 59       	subi	r30, 0x93	; 147
    38b8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ba:	60 81       	ld	r22, Z
    38bc:	71 81       	ldd	r23, Z+1	; 0x01
    38be:	82 81       	ldd	r24, Z+2	; 0x02
    38c0:	93 81       	ldd	r25, Z+3	; 0x03
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e2       	ldi	r20, 0x20	; 32
    38c8:	51 e4       	ldi	r21, 0x41	; 65
    38ca:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	8e 01       	movw	r16, r28
    38d4:	09 59       	subi	r16, 0x99	; 153
    38d6:	1f 4f       	sbci	r17, 0xFF	; 255
    38d8:	bc 01       	movw	r22, r24
    38da:	cd 01       	movw	r24, r26
    38dc:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    38e0:	dc 01       	movw	r26, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	f8 01       	movw	r30, r16
    38e6:	91 83       	std	Z+1, r25	; 0x01
    38e8:	80 83       	st	Z, r24
    38ea:	1f c0       	rjmp	.+62     	; 0x392a <main+0x1f5c>
    38ec:	fe 01       	movw	r30, r28
    38ee:	eb 59       	subi	r30, 0x9B	; 155
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	80 e9       	ldi	r24, 0x90	; 144
    38f4:	91 e0       	ldi	r25, 0x01	; 1
    38f6:	91 83       	std	Z+1, r25	; 0x01
    38f8:	80 83       	st	Z, r24
    38fa:	fe 01       	movw	r30, r28
    38fc:	eb 59       	subi	r30, 0x9B	; 155
    38fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3900:	80 81       	ld	r24, Z
    3902:	91 81       	ldd	r25, Z+1	; 0x01
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	f1 f7       	brne	.-4      	; 0x3904 <main+0x1f36>
    3908:	fe 01       	movw	r30, r28
    390a:	eb 59       	subi	r30, 0x9B	; 155
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	91 83       	std	Z+1, r25	; 0x01
    3910:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3912:	de 01       	movw	r26, r28
    3914:	a9 59       	subi	r26, 0x99	; 153
    3916:	bf 4f       	sbci	r27, 0xFF	; 255
    3918:	fe 01       	movw	r30, r28
    391a:	e9 59       	subi	r30, 0x99	; 153
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	80 81       	ld	r24, Z
    3920:	91 81       	ldd	r25, Z+1	; 0x01
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	11 96       	adiw	r26, 0x01	; 1
    3926:	9c 93       	st	X, r25
    3928:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    392a:	fe 01       	movw	r30, r28
    392c:	e9 59       	subi	r30, 0x99	; 153
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	80 81       	ld	r24, Z
    3932:	91 81       	ldd	r25, Z+1	; 0x01
    3934:	00 97       	sbiw	r24, 0x00	; 0
    3936:	d1 f6       	brne	.-76     	; 0x38ec <main+0x1f1e>
    3938:	27 c0       	rjmp	.+78     	; 0x3988 <main+0x1fba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393a:	8e 01       	movw	r16, r28
    393c:	09 59       	subi	r16, 0x99	; 153
    393e:	1f 4f       	sbci	r17, 0xFF	; 255
    3940:	fe 01       	movw	r30, r28
    3942:	e7 59       	subi	r30, 0x97	; 151
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	60 81       	ld	r22, Z
    3948:	71 81       	ldd	r23, Z+1	; 0x01
    394a:	82 81       	ldd	r24, Z+2	; 0x02
    394c:	93 81       	ldd	r25, Z+3	; 0x03
    394e:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	f8 01       	movw	r30, r16
    3958:	91 83       	std	Z+1, r25	; 0x01
    395a:	80 83       	st	Z, r24
    395c:	de 01       	movw	r26, r28
    395e:	ad 59       	subi	r26, 0x9D	; 157
    3960:	bf 4f       	sbci	r27, 0xFF	; 255
    3962:	fe 01       	movw	r30, r28
    3964:	e9 59       	subi	r30, 0x99	; 153
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 81       	ld	r24, Z
    396a:	91 81       	ldd	r25, Z+1	; 0x01
    396c:	8d 93       	st	X+, r24
    396e:	9c 93       	st	X, r25
    3970:	fe 01       	movw	r30, r28
    3972:	ed 59       	subi	r30, 0x9D	; 157
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	80 81       	ld	r24, Z
    3978:	91 81       	ldd	r25, Z+1	; 0x01
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	f1 f7       	brne	.-4      	; 0x397a <main+0x1fac>
    397e:	fe 01       	movw	r30, r28
    3980:	ed 59       	subi	r30, 0x9D	; 157
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	91 83       	std	Z+1, r25	; 0x01
    3986:	80 83       	st	Z, r24
          _delay_ms(20);
          SetColor(0xFF, 0x00, 0x00, 0xFF);
    3988:	8f ef       	ldi	r24, 0xFF	; 255
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	40 e0       	ldi	r20, 0x00	; 0
    398e:	2f ef       	ldi	r18, 0xFF	; 255
    3990:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
          wdt_reset();
    3994:	a8 95       	wdr
    3996:	fe 01       	movw	r30, r28
    3998:	e1 5a       	subi	r30, 0xA1	; 161
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	a8 e4       	ldi	r26, 0x48	; 72
    39a2:	b3 e4       	ldi	r27, 0x43	; 67
    39a4:	80 83       	st	Z, r24
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	a2 83       	std	Z+2, r26	; 0x02
    39aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ac:	8e 01       	movw	r16, r28
    39ae:	05 5a       	subi	r16, 0xA5	; 165
    39b0:	1f 4f       	sbci	r17, 0xFF	; 255
    39b2:	fe 01       	movw	r30, r28
    39b4:	e1 5a       	subi	r30, 0xA1	; 161
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	60 81       	ld	r22, Z
    39ba:	71 81       	ldd	r23, Z+1	; 0x01
    39bc:	82 81       	ldd	r24, Z+2	; 0x02
    39be:	93 81       	ldd	r25, Z+3	; 0x03
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	4a e7       	ldi	r20, 0x7A	; 122
    39c6:	55 e4       	ldi	r21, 0x45	; 69
    39c8:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	f8 01       	movw	r30, r16
    39d2:	80 83       	st	Z, r24
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	a2 83       	std	Z+2, r26	; 0x02
    39d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39da:	fe 01       	movw	r30, r28
    39dc:	e5 5a       	subi	r30, 0xA5	; 165
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	60 81       	ld	r22, Z
    39e2:	71 81       	ldd	r23, Z+1	; 0x01
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	40 e8       	ldi	r20, 0x80	; 128
    39ee:	5f e3       	ldi	r21, 0x3F	; 63
    39f0:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    39f4:	88 23       	and	r24, r24
    39f6:	44 f4       	brge	.+16     	; 0x3a08 <main+0x203a>
		__ticks = 1;
    39f8:	fe 01       	movw	r30, r28
    39fa:	e7 5a       	subi	r30, 0xA7	; 167
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	91 83       	std	Z+1, r25	; 0x01
    3a04:	80 83       	st	Z, r24
    3a06:	64 c0       	rjmp	.+200    	; 0x3ad0 <main+0x2102>
	else if (__tmp > 65535)
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e5 5a       	subi	r30, 0xA5	; 165
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	60 81       	ld	r22, Z
    3a10:	71 81       	ldd	r23, Z+1	; 0x01
    3a12:	82 81       	ldd	r24, Z+2	; 0x02
    3a14:	93 81       	ldd	r25, Z+3	; 0x03
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	3f ef       	ldi	r19, 0xFF	; 255
    3a1a:	4f e7       	ldi	r20, 0x7F	; 127
    3a1c:	57 e4       	ldi	r21, 0x47	; 71
    3a1e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    3a22:	18 16       	cp	r1, r24
    3a24:	0c f0       	brlt	.+2      	; 0x3a28 <main+0x205a>
    3a26:	43 c0       	rjmp	.+134    	; 0x3aae <main+0x20e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e1 5a       	subi	r30, 0xA1	; 161
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	60 81       	ld	r22, Z
    3a30:	71 81       	ldd	r23, Z+1	; 0x01
    3a32:	82 81       	ldd	r24, Z+2	; 0x02
    3a34:	93 81       	ldd	r25, Z+3	; 0x03
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	8e 01       	movw	r16, r28
    3a48:	07 5a       	subi	r16, 0xA7	; 167
    3a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4c:	bc 01       	movw	r22, r24
    3a4e:	cd 01       	movw	r24, r26
    3a50:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	f8 01       	movw	r30, r16
    3a5a:	91 83       	std	Z+1, r25	; 0x01
    3a5c:	80 83       	st	Z, r24
    3a5e:	1f c0       	rjmp	.+62     	; 0x3a9e <main+0x20d0>
    3a60:	fe 01       	movw	r30, r28
    3a62:	e9 5a       	subi	r30, 0xA9	; 169
    3a64:	ff 4f       	sbci	r31, 0xFF	; 255
    3a66:	80 e9       	ldi	r24, 0x90	; 144
    3a68:	91 e0       	ldi	r25, 0x01	; 1
    3a6a:	91 83       	std	Z+1, r25	; 0x01
    3a6c:	80 83       	st	Z, r24
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e9 5a       	subi	r30, 0xA9	; 169
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	80 81       	ld	r24, Z
    3a76:	91 81       	ldd	r25, Z+1	; 0x01
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <main+0x20aa>
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e9 5a       	subi	r30, 0xA9	; 169
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	91 83       	std	Z+1, r25	; 0x01
    3a84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a86:	de 01       	movw	r26, r28
    3a88:	a7 5a       	subi	r26, 0xA7	; 167
    3a8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e7 5a       	subi	r30, 0xA7	; 167
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	91 81       	ldd	r25, Z+1	; 0x01
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	11 96       	adiw	r26, 0x01	; 1
    3a9a:	9c 93       	st	X, r25
    3a9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	e7 5a       	subi	r30, 0xA7	; 167
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	80 81       	ld	r24, Z
    3aa6:	91 81       	ldd	r25, Z+1	; 0x01
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	d1 f6       	brne	.-76     	; 0x3a60 <main+0x2092>
    3aac:	27 c0       	rjmp	.+78     	; 0x3afc <main+0x212e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aae:	8e 01       	movw	r16, r28
    3ab0:	07 5a       	subi	r16, 0xA7	; 167
    3ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e5 5a       	subi	r30, 0xA5	; 165
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	60 81       	ld	r22, Z
    3abc:	71 81       	ldd	r23, Z+1	; 0x01
    3abe:	82 81       	ldd	r24, Z+2	; 0x02
    3ac0:	93 81       	ldd	r25, Z+3	; 0x03
    3ac2:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	f8 01       	movw	r30, r16
    3acc:	91 83       	std	Z+1, r25	; 0x01
    3ace:	80 83       	st	Z, r24
    3ad0:	de 01       	movw	r26, r28
    3ad2:	ab 5a       	subi	r26, 0xAB	; 171
    3ad4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	e7 5a       	subi	r30, 0xA7	; 167
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	80 81       	ld	r24, Z
    3ade:	91 81       	ldd	r25, Z+1	; 0x01
    3ae0:	8d 93       	st	X+, r24
    3ae2:	9c 93       	st	X, r25
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	eb 5a       	subi	r30, 0xAB	; 171
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	f1 f7       	brne	.-4      	; 0x3aee <main+0x2120>
    3af2:	fe 01       	movw	r30, r28
    3af4:	eb 5a       	subi	r30, 0xAB	; 171
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	80 83       	st	Z, r24
          _delay_ms(200);
          SetColor(0xFF, 0xFF, 0xFF, 0xFF);
    3afc:	8f ef       	ldi	r24, 0xFF	; 255
    3afe:	6f ef       	ldi	r22, 0xFF	; 255
    3b00:	4f ef       	ldi	r20, 0xFF	; 255
    3b02:	2f ef       	ldi	r18, 0xFF	; 255
    3b04:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
          wdt_reset();
    3b08:	a8 95       	wdr
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	ef 5a       	subi	r30, 0xAF	; 175
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	a8 e4       	ldi	r26, 0x48	; 72
    3b16:	b3 e4       	ldi	r27, 0x43	; 67
    3b18:	80 83       	st	Z, r24
    3b1a:	91 83       	std	Z+1, r25	; 0x01
    3b1c:	a2 83       	std	Z+2, r26	; 0x02
    3b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b20:	8e 01       	movw	r16, r28
    3b22:	03 5b       	subi	r16, 0xB3	; 179
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	fe 01       	movw	r30, r28
    3b28:	ef 5a       	subi	r30, 0xAF	; 175
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	4a e7       	ldi	r20, 0x7A	; 122
    3b3a:	55 e4       	ldi	r21, 0x45	; 69
    3b3c:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	f8 01       	movw	r30, r16
    3b46:	80 83       	st	Z, r24
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	a2 83       	std	Z+2, r26	; 0x02
    3b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b4e:	fe 01       	movw	r30, r28
    3b50:	e3 5b       	subi	r30, 0xB3	; 179
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	60 81       	ld	r22, Z
    3b56:	71 81       	ldd	r23, Z+1	; 0x01
    3b58:	82 81       	ldd	r24, Z+2	; 0x02
    3b5a:	93 81       	ldd	r25, Z+3	; 0x03
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e8       	ldi	r20, 0x80	; 128
    3b62:	5f e3       	ldi	r21, 0x3F	; 63
    3b64:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	44 f4       	brge	.+16     	; 0x3b7c <main+0x21ae>
		__ticks = 1;
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	e5 5b       	subi	r30, 0xB5	; 181
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	91 83       	std	Z+1, r25	; 0x01
    3b78:	80 83       	st	Z, r24
    3b7a:	64 c0       	rjmp	.+200    	; 0x3c44 <main+0x2276>
	else if (__tmp > 65535)
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e3 5b       	subi	r30, 0xB3	; 179
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	60 81       	ld	r22, Z
    3b84:	71 81       	ldd	r23, Z+1	; 0x01
    3b86:	82 81       	ldd	r24, Z+2	; 0x02
    3b88:	93 81       	ldd	r25, Z+3	; 0x03
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	3f ef       	ldi	r19, 0xFF	; 255
    3b8e:	4f e7       	ldi	r20, 0x7F	; 127
    3b90:	57 e4       	ldi	r21, 0x47	; 71
    3b92:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    3b96:	18 16       	cp	r1, r24
    3b98:	0c f0       	brlt	.+2      	; 0x3b9c <main+0x21ce>
    3b9a:	43 c0       	rjmp	.+134    	; 0x3c22 <main+0x2254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ef 5a       	subi	r30, 0xAF	; 175
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	60 81       	ld	r22, Z
    3ba4:	71 81       	ldd	r23, Z+1	; 0x01
    3ba6:	82 81       	ldd	r24, Z+2	; 0x02
    3ba8:	93 81       	ldd	r25, Z+3	; 0x03
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	40 e2       	ldi	r20, 0x20	; 32
    3bb0:	51 e4       	ldi	r21, 0x41	; 65
    3bb2:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	8e 01       	movw	r16, r28
    3bbc:	05 5b       	subi	r16, 0xB5	; 181
    3bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc0:	bc 01       	movw	r22, r24
    3bc2:	cd 01       	movw	r24, r26
    3bc4:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	f8 01       	movw	r30, r16
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	80 83       	st	Z, r24
    3bd2:	1f c0       	rjmp	.+62     	; 0x3c12 <main+0x2244>
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	e7 5b       	subi	r30, 0xB7	; 183
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	80 e9       	ldi	r24, 0x90	; 144
    3bdc:	91 e0       	ldi	r25, 0x01	; 1
    3bde:	91 83       	std	Z+1, r25	; 0x01
    3be0:	80 83       	st	Z, r24
    3be2:	fe 01       	movw	r30, r28
    3be4:	e7 5b       	subi	r30, 0xB7	; 183
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	80 81       	ld	r24, Z
    3bea:	91 81       	ldd	r25, Z+1	; 0x01
    3bec:	01 97       	sbiw	r24, 0x01	; 1
    3bee:	f1 f7       	brne	.-4      	; 0x3bec <main+0x221e>
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	e7 5b       	subi	r30, 0xB7	; 183
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bfa:	de 01       	movw	r26, r28
    3bfc:	a5 5b       	subi	r26, 0xB5	; 181
    3bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    3c00:	fe 01       	movw	r30, r28
    3c02:	e5 5b       	subi	r30, 0xB5	; 181
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	80 81       	ld	r24, Z
    3c08:	91 81       	ldd	r25, Z+1	; 0x01
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	11 96       	adiw	r26, 0x01	; 1
    3c0e:	9c 93       	st	X, r25
    3c10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c12:	fe 01       	movw	r30, r28
    3c14:	e5 5b       	subi	r30, 0xB5	; 181
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	80 81       	ld	r24, Z
    3c1a:	91 81       	ldd	r25, Z+1	; 0x01
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	d1 f6       	brne	.-76     	; 0x3bd4 <main+0x2206>
    3c20:	28 c0       	rjmp	.+80     	; 0x3c72 <main+0x22a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c22:	8e 01       	movw	r16, r28
    3c24:	05 5b       	subi	r16, 0xB5	; 181
    3c26:	1f 4f       	sbci	r17, 0xFF	; 255
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e3 5b       	subi	r30, 0xB3	; 179
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	60 81       	ld	r22, Z
    3c30:	71 81       	ldd	r23, Z+1	; 0x01
    3c32:	82 81       	ldd	r24, Z+2	; 0x02
    3c34:	93 81       	ldd	r25, Z+3	; 0x03
    3c36:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	f8 01       	movw	r30, r16
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	80 83       	st	Z, r24
    3c44:	de 01       	movw	r26, r28
    3c46:	a9 5b       	subi	r26, 0xB9	; 185
    3c48:	bf 4f       	sbci	r27, 0xFF	; 255
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	e5 5b       	subi	r30, 0xB5	; 181
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	80 81       	ld	r24, Z
    3c52:	91 81       	ldd	r25, Z+1	; 0x01
    3c54:	11 96       	adiw	r26, 0x01	; 1
    3c56:	9c 93       	st	X, r25
    3c58:	8e 93       	st	-X, r24
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	e9 5b       	subi	r30, 0xB9	; 185
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	80 81       	ld	r24, Z
    3c62:	91 81       	ldd	r25, Z+1	; 0x01
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	f1 f7       	brne	.-4      	; 0x3c64 <main+0x2296>
    3c68:	fe 01       	movw	r30, r28
    3c6a:	e9 5b       	subi	r30, 0xB9	; 185
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24
        break;
      case 'p':
        uartPuts("\r\nParty-Mode...\r\n");
        shift32_output(0xffffffff);
        uart_str_complete = 0;
        while (!uart_str_complete)
    3c72:	80 91 f2 04 	lds	r24, 0x04F2
    3c76:	88 23       	and	r24, r24
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <main+0x22ae>
    3c7a:	e4 ca       	rjmp	.-2616   	; 0x3244 <main+0x1876>
          _delay_ms(200);
          SetColor(0xFF, 0xFF, 0xFF, 0xFF);
          wdt_reset();
          _delay_ms(200);
        }
        wdt_reset();
    3c7c:	a8 95       	wdr
        SetColor(0, 0, 0, 0);
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	60 e0       	ldi	r22, 0x00	; 0
    3c82:	40 e0       	ldi	r20, 0x00	; 0
    3c84:	20 e0       	ldi	r18, 0x00	; 0
    3c86:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
    3c8a:	c3 c5       	rjmp	.+2950   	; 0x4812 <main+0x2e44>
        break;
      case 'l':
        uartPuts("\r\nLight-Mode...\r\n");
    3c8c:	8d e1       	ldi	r24, 0x1D	; 29
    3c8e:	93 e0       	ldi	r25, 0x03	; 3
    3c90:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
        shift32_output(0xffffffff);
    3c94:	6f ef       	ldi	r22, 0xFF	; 255
    3c96:	7f ef       	ldi	r23, 0xFF	; 255
    3c98:	8f ef       	ldi	r24, 0xFF	; 255
    3c9a:	9f ef       	ldi	r25, 0xFF	; 255
    3c9c:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
        uart_str_complete = 0;
    3ca0:	10 92 f2 04 	sts	0x04F2, r1
        SetColor(0xFF, 0xFF, 0xFF, 0xFF);
    3ca4:	8f ef       	ldi	r24, 0xFF	; 255
    3ca6:	6f ef       	ldi	r22, 0xFF	; 255
    3ca8:	4f ef       	ldi	r20, 0xFF	; 255
    3caa:	2f ef       	ldi	r18, 0xFF	; 255
    3cac:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
    3cb0:	86 c0       	rjmp	.+268    	; 0x3dbe <main+0x23f0>
        while (!uart_str_complete)
        {
          wdt_reset();
    3cb2:	a8 95       	wdr
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	ed 5b       	subi	r30, 0xBD	; 189
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	a0 ea       	ldi	r26, 0xA0	; 160
    3cc0:	b1 e4       	ldi	r27, 0x41	; 65
    3cc2:	80 83       	st	Z, r24
    3cc4:	91 83       	std	Z+1, r25	; 0x01
    3cc6:	a2 83       	std	Z+2, r26	; 0x02
    3cc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cca:	8e 01       	movw	r16, r28
    3ccc:	01 5c       	subi	r16, 0xC1	; 193
    3cce:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	ed 5b       	subi	r30, 0xBD	; 189
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	60 81       	ld	r22, Z
    3cd8:	71 81       	ldd	r23, Z+1	; 0x01
    3cda:	82 81       	ldd	r24, Z+2	; 0x02
    3cdc:	93 81       	ldd	r25, Z+3	; 0x03
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	4a e7       	ldi	r20, 0x7A	; 122
    3ce4:	55 e4       	ldi	r21, 0x45	; 69
    3ce6:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	f8 01       	movw	r30, r16
    3cf0:	80 83       	st	Z, r24
    3cf2:	91 83       	std	Z+1, r25	; 0x01
    3cf4:	a2 83       	std	Z+2, r26	; 0x02
    3cf6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	ff 96       	adiw	r30, 0x3f	; 63
    3cfc:	60 81       	ld	r22, Z
    3cfe:	71 81       	ldd	r23, Z+1	; 0x01
    3d00:	82 81       	ldd	r24, Z+2	; 0x02
    3d02:	93 81       	ldd	r25, Z+3	; 0x03
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	40 e8       	ldi	r20, 0x80	; 128
    3d0a:	5f e3       	ldi	r21, 0x3F	; 63
    3d0c:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    3d10:	88 23       	and	r24, r24
    3d12:	2c f4       	brge	.+10     	; 0x3d1e <main+0x2350>
		__ticks = 1;
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	9e af       	std	Y+62, r25	; 0x3e
    3d1a:	8d af       	std	Y+61, r24	; 0x3d
    3d1c:	46 c0       	rjmp	.+140    	; 0x3daa <main+0x23dc>
	else if (__tmp > 65535)
    3d1e:	fe 01       	movw	r30, r28
    3d20:	ff 96       	adiw	r30, 0x3f	; 63
    3d22:	60 81       	ld	r22, Z
    3d24:	71 81       	ldd	r23, Z+1	; 0x01
    3d26:	82 81       	ldd	r24, Z+2	; 0x02
    3d28:	93 81       	ldd	r25, Z+3	; 0x03
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	3f ef       	ldi	r19, 0xFF	; 255
    3d2e:	4f e7       	ldi	r20, 0x7F	; 127
    3d30:	57 e4       	ldi	r21, 0x47	; 71
    3d32:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    3d36:	18 16       	cp	r1, r24
    3d38:	64 f5       	brge	.+88     	; 0x3d92 <main+0x23c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	ed 5b       	subi	r30, 0xBD	; 189
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	60 81       	ld	r22, Z
    3d42:	71 81       	ldd	r23, Z+1	; 0x01
    3d44:	82 81       	ldd	r24, Z+2	; 0x02
    3d46:	93 81       	ldd	r25, Z+3	; 0x03
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 e2       	ldi	r20, 0x20	; 32
    3d4e:	51 e4       	ldi	r21, 0x41	; 65
    3d50:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	bc 01       	movw	r22, r24
    3d5a:	cd 01       	movw	r24, r26
    3d5c:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	9e af       	std	Y+62, r25	; 0x3e
    3d66:	8d af       	std	Y+61, r24	; 0x3d
    3d68:	0f c0       	rjmp	.+30     	; 0x3d88 <main+0x23ba>
    3d6a:	80 e9       	ldi	r24, 0x90	; 144
    3d6c:	91 e0       	ldi	r25, 0x01	; 1
    3d6e:	9c af       	std	Y+60, r25	; 0x3c
    3d70:	8b af       	std	Y+59, r24	; 0x3b
    3d72:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d74:	9c ad       	ldd	r25, Y+60	; 0x3c
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	f1 f7       	brne	.-4      	; 0x3d76 <main+0x23a8>
    3d7a:	9c af       	std	Y+60, r25	; 0x3c
    3d7c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d80:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	9e af       	std	Y+62, r25	; 0x3e
    3d86:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d88:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d8c:	00 97       	sbiw	r24, 0x00	; 0
    3d8e:	69 f7       	brne	.-38     	; 0x3d6a <main+0x239c>
    3d90:	16 c0       	rjmp	.+44     	; 0x3dbe <main+0x23f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d92:	fe 01       	movw	r30, r28
    3d94:	ff 96       	adiw	r30, 0x3f	; 63
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	9e af       	std	Y+62, r25	; 0x3e
    3da8:	8d af       	std	Y+61, r24	; 0x3d
    3daa:	8d ad       	ldd	r24, Y+61	; 0x3d
    3dac:	9e ad       	ldd	r25, Y+62	; 0x3e
    3dae:	9a af       	std	Y+58, r25	; 0x3a
    3db0:	89 af       	std	Y+57, r24	; 0x39
    3db2:	89 ad       	ldd	r24, Y+57	; 0x39
    3db4:	9a ad       	ldd	r25, Y+58	; 0x3a
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	f1 f7       	brne	.-4      	; 0x3db6 <main+0x23e8>
    3dba:	9a af       	std	Y+58, r25	; 0x3a
    3dbc:	89 af       	std	Y+57, r24	; 0x39
      case 'l':
        uartPuts("\r\nLight-Mode...\r\n");
        shift32_output(0xffffffff);
        uart_str_complete = 0;
        SetColor(0xFF, 0xFF, 0xFF, 0xFF);
        while (!uart_str_complete)
    3dbe:	80 91 f2 04 	lds	r24, 0x04F2
    3dc2:	88 23       	and	r24, r24
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <main+0x23fa>
    3dc6:	75 cf       	rjmp	.-278    	; 0x3cb2 <main+0x22e4>
        {
          wdt_reset();
          _delay_ms(20);
        }
        wdt_reset();
    3dc8:	a8 95       	wdr
        SetColor(0, 0, 0, 0);
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	40 e0       	ldi	r20, 0x00	; 0
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
        lLEDs_LastValue = 0xffffffff;
    3dd6:	8f ef       	ldi	r24, 0xFF	; 255
    3dd8:	9f ef       	ldi	r25, 0xFF	; 255
    3dda:	af ef       	ldi	r26, 0xFF	; 255
    3ddc:	bf ef       	ldi	r27, 0xFF	; 255
    3dde:	80 93 ee 04 	sts	0x04EE, r24
    3de2:	90 93 ef 04 	sts	0x04EF, r25
    3de6:	a0 93 f0 04 	sts	0x04F0, r26
    3dea:	b0 93 f1 04 	sts	0x04F1, r27
    3dee:	11 c5       	rjmp	.+2594   	; 0x4812 <main+0x2e44>
        break;
      case 'r':
        uartPuts("\r\nRebooting via Watchdog...\r\n");
    3df0:	8f e2       	ldi	r24, 0x2F	; 47
    3df2:	93 e0       	ldi	r25, 0x03	; 3
    3df4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    3df8:	ff cf       	rjmp	.-2      	; 0x3df8 <main+0x242a>
        while (1)
          ;
        break;
      case 'b':
        {
          switch (uart_string[1])
    3dfa:	80 91 b6 00 	lds	r24, 0x00B6
    3dfe:	28 2f       	mov	r18, r24
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	cf 55       	subi	r28, 0x5F	; 95
    3e04:	dc 4f       	sbci	r29, 0xFC	; 252
    3e06:	39 83       	std	Y+1, r19	; 0x01
    3e08:	28 83       	st	Y, r18
    3e0a:	c1 5a       	subi	r28, 0xA1	; 161
    3e0c:	d3 40       	sbci	r29, 0x03	; 3
    3e0e:	cf 55       	subi	r28, 0x5F	; 95
    3e10:	dc 4f       	sbci	r29, 0xFC	; 252
    3e12:	88 81       	ld	r24, Y
    3e14:	99 81       	ldd	r25, Y+1	; 0x01
    3e16:	c1 5a       	subi	r28, 0xA1	; 161
    3e18:	d3 40       	sbci	r29, 0x03	; 3
    3e1a:	8b 32       	cpi	r24, 0x2B	; 43
    3e1c:	91 05       	cpc	r25, r1
    3e1e:	59 f0       	breq	.+22     	; 0x3e36 <main+0x2468>
    3e20:	cf 55       	subi	r28, 0x5F	; 95
    3e22:	dc 4f       	sbci	r29, 0xFC	; 252
    3e24:	e8 81       	ld	r30, Y
    3e26:	f9 81       	ldd	r31, Y+1	; 0x01
    3e28:	c1 5a       	subi	r28, 0xA1	; 161
    3e2a:	d3 40       	sbci	r29, 0x03	; 3
    3e2c:	ed 32       	cpi	r30, 0x2D	; 45
    3e2e:	f1 05       	cpc	r31, r1
    3e30:	09 f4       	brne	.+2      	; 0x3e34 <main+0x2466>
    3e32:	4c c0       	rjmp	.+152    	; 0x3ecc <main+0x24fe>
    3e34:	95 c0       	rjmp	.+298    	; 0x3f60 <main+0x2592>
          {
          case '+':
            {
              uiBrightControl = 1;
    3e36:	fe 01       	movw	r30, r28
    3e38:	e3 57       	subi	r30, 0x73	; 115
    3e3a:	fd 4f       	sbci	r31, 0xFD	; 253
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	80 83       	st	Z, r24
              save_byte(cBrightControl, uiBrightControl);
    3e40:	fe 01       	movw	r30, r28
    3e42:	e3 57       	subi	r30, 0x73	; 115
    3e44:	fd 4f       	sbci	r31, 0xFD	; 253
    3e46:	90 81       	ld	r25, Z
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	69 2f       	mov	r22, r25
    3e4c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <save_byte>
              char s[100];
              sprintf(s, "brightness control is %s\r\n", uiBrightControl != 0 ? "active" : "inactive");
    3e50:	fe 01       	movw	r30, r28
    3e52:	e3 57       	subi	r30, 0x73	; 115
    3e54:	fd 4f       	sbci	r31, 0xFD	; 253
    3e56:	80 81       	ld	r24, Z
    3e58:	88 23       	and	r24, r24
    3e5a:	49 f0       	breq	.+18     	; 0x3e6e <main+0x24a0>
    3e5c:	2d e4       	ldi	r18, 0x4D	; 77
    3e5e:	33 e0       	ldi	r19, 0x03	; 3
    3e60:	c1 56       	subi	r28, 0x61	; 97
    3e62:	dc 4f       	sbci	r29, 0xFC	; 252
    3e64:	39 83       	std	Y+1, r19	; 0x01
    3e66:	28 83       	st	Y, r18
    3e68:	cf 59       	subi	r28, 0x9F	; 159
    3e6a:	d3 40       	sbci	r29, 0x03	; 3
    3e6c:	08 c0       	rjmp	.+16     	; 0x3e7e <main+0x24b0>
    3e6e:	84 e5       	ldi	r24, 0x54	; 84
    3e70:	93 e0       	ldi	r25, 0x03	; 3
    3e72:	c1 56       	subi	r28, 0x61	; 97
    3e74:	dc 4f       	sbci	r29, 0xFC	; 252
    3e76:	99 83       	std	Y+1, r25	; 0x01
    3e78:	88 83       	st	Y, r24
    3e7a:	cf 59       	subi	r28, 0x9F	; 159
    3e7c:	d3 40       	sbci	r29, 0x03	; 3
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <main+0x24b2>
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <main+0x24b4>
    3e82:	00 d0       	rcall	.+0      	; 0x3e84 <main+0x24b6>
    3e84:	ed b7       	in	r30, 0x3d	; 61
    3e86:	fe b7       	in	r31, 0x3e	; 62
    3e88:	31 96       	adiw	r30, 0x01	; 1
    3e8a:	ce 01       	movw	r24, r28
    3e8c:	88 5d       	subi	r24, 0xD8	; 216
    3e8e:	9c 4f       	sbci	r25, 0xFC	; 252
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	80 83       	st	Z, r24
    3e94:	8d e5       	ldi	r24, 0x5D	; 93
    3e96:	93 e0       	ldi	r25, 0x03	; 3
    3e98:	93 83       	std	Z+3, r25	; 0x03
    3e9a:	82 83       	std	Z+2, r24	; 0x02
    3e9c:	c1 56       	subi	r28, 0x61	; 97
    3e9e:	dc 4f       	sbci	r29, 0xFC	; 252
    3ea0:	28 81       	ld	r18, Y
    3ea2:	39 81       	ldd	r19, Y+1	; 0x01
    3ea4:	cf 59       	subi	r28, 0x9F	; 159
    3ea6:	d3 40       	sbci	r29, 0x03	; 3
    3ea8:	35 83       	std	Z+5, r19	; 0x05
    3eaa:	24 83       	std	Z+4, r18	; 0x04
    3eac:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    3eb0:	8d b7       	in	r24, 0x3d	; 61
    3eb2:	9e b7       	in	r25, 0x3e	; 62
    3eb4:	06 96       	adiw	r24, 0x06	; 6
    3eb6:	0f b6       	in	r0, 0x3f	; 63
    3eb8:	f8 94       	cli
    3eba:	9e bf       	out	0x3e, r25	; 62
    3ebc:	0f be       	out	0x3f, r0	; 63
    3ebe:	8d bf       	out	0x3d, r24	; 61
              uartPuts(s);
    3ec0:	ce 01       	movw	r24, r28
    3ec2:	88 5d       	subi	r24, 0xD8	; 216
    3ec4:	9c 4f       	sbci	r25, 0xFC	; 252
    3ec6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    3eca:	a3 c4       	rjmp	.+2374   	; 0x4812 <main+0x2e44>
            }
            break;
          case '-':
            {
              uiBrightControl = 0;
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e3 57       	subi	r30, 0x73	; 115
    3ed0:	fd 4f       	sbci	r31, 0xFD	; 253
    3ed2:	10 82       	st	Z, r1
              save_byte(cBrightControl, uiBrightControl);
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e3 57       	subi	r30, 0x73	; 115
    3ed8:	fd 4f       	sbci	r31, 0xFD	; 253
    3eda:	90 81       	ld	r25, Z
    3edc:	82 e0       	ldi	r24, 0x02	; 2
    3ede:	69 2f       	mov	r22, r25
    3ee0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <save_byte>
              char s[100];
              sprintf(s, "brightness control is %s\r\n", uiBrightControl != 0 ? "active" : "inactive");
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	e3 57       	subi	r30, 0x73	; 115
    3ee8:	fd 4f       	sbci	r31, 0xFD	; 253
    3eea:	80 81       	ld	r24, Z
    3eec:	88 23       	and	r24, r24
    3eee:	49 f0       	breq	.+18     	; 0x3f02 <main+0x2534>
    3ef0:	ed e4       	ldi	r30, 0x4D	; 77
    3ef2:	f3 e0       	ldi	r31, 0x03	; 3
    3ef4:	c3 56       	subi	r28, 0x63	; 99
    3ef6:	dc 4f       	sbci	r29, 0xFC	; 252
    3ef8:	f9 83       	std	Y+1, r31	; 0x01
    3efa:	e8 83       	st	Y, r30
    3efc:	cd 59       	subi	r28, 0x9D	; 157
    3efe:	d3 40       	sbci	r29, 0x03	; 3
    3f00:	08 c0       	rjmp	.+16     	; 0x3f12 <main+0x2544>
    3f02:	24 e5       	ldi	r18, 0x54	; 84
    3f04:	33 e0       	ldi	r19, 0x03	; 3
    3f06:	c3 56       	subi	r28, 0x63	; 99
    3f08:	dc 4f       	sbci	r29, 0xFC	; 252
    3f0a:	39 83       	std	Y+1, r19	; 0x01
    3f0c:	28 83       	st	Y, r18
    3f0e:	cd 59       	subi	r28, 0x9D	; 157
    3f10:	d3 40       	sbci	r29, 0x03	; 3
    3f12:	00 d0       	rcall	.+0      	; 0x3f14 <main+0x2546>
    3f14:	00 d0       	rcall	.+0      	; 0x3f16 <main+0x2548>
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <main+0x254a>
    3f18:	ed b7       	in	r30, 0x3d	; 61
    3f1a:	fe b7       	in	r31, 0x3e	; 62
    3f1c:	31 96       	adiw	r30, 0x01	; 1
    3f1e:	ce 01       	movw	r24, r28
    3f20:	88 5d       	subi	r24, 0xD8	; 216
    3f22:	9c 4f       	sbci	r25, 0xFC	; 252
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
    3f28:	8d e5       	ldi	r24, 0x5D	; 93
    3f2a:	93 e0       	ldi	r25, 0x03	; 3
    3f2c:	93 83       	std	Z+3, r25	; 0x03
    3f2e:	82 83       	std	Z+2, r24	; 0x02
    3f30:	c3 56       	subi	r28, 0x63	; 99
    3f32:	dc 4f       	sbci	r29, 0xFC	; 252
    3f34:	88 81       	ld	r24, Y
    3f36:	99 81       	ldd	r25, Y+1	; 0x01
    3f38:	cd 59       	subi	r28, 0x9D	; 157
    3f3a:	d3 40       	sbci	r29, 0x03	; 3
    3f3c:	95 83       	std	Z+5, r25	; 0x05
    3f3e:	84 83       	std	Z+4, r24	; 0x04
    3f40:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    3f44:	ed b7       	in	r30, 0x3d	; 61
    3f46:	fe b7       	in	r31, 0x3e	; 62
    3f48:	36 96       	adiw	r30, 0x06	; 6
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	fe bf       	out	0x3e, r31	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	ed bf       	out	0x3d, r30	; 61
              uartPuts(s);
    3f54:	ce 01       	movw	r24, r28
    3f56:	88 5d       	subi	r24, 0xD8	; 216
    3f58:	9c 4f       	sbci	r25, 0xFC	; 252
    3f5a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    3f5e:	59 c4       	rjmp	.+2226   	; 0x4812 <main+0x2e44>
            }
            break;
          default:
            {
              uiBrightControl = uiBrightControl != 0 ? 0 : 1;
    3f60:	fe 01       	movw	r30, r28
    3f62:	e3 57       	subi	r30, 0x73	; 115
    3f64:	fd 4f       	sbci	r31, 0xFD	; 253
    3f66:	80 81       	ld	r24, Z
    3f68:	c4 56       	subi	r28, 0x64	; 100
    3f6a:	dc 4f       	sbci	r29, 0xFC	; 252
    3f6c:	18 82       	st	Y, r1
    3f6e:	cc 59       	subi	r28, 0x9C	; 156
    3f70:	d3 40       	sbci	r29, 0x03	; 3
    3f72:	88 23       	and	r24, r24
    3f74:	31 f4       	brne	.+12     	; 0x3f82 <main+0x25b4>
    3f76:	f1 e0       	ldi	r31, 0x01	; 1
    3f78:	c4 56       	subi	r28, 0x64	; 100
    3f7a:	dc 4f       	sbci	r29, 0xFC	; 252
    3f7c:	f8 83       	st	Y, r31
    3f7e:	cc 59       	subi	r28, 0x9C	; 156
    3f80:	d3 40       	sbci	r29, 0x03	; 3
    3f82:	fe 01       	movw	r30, r28
    3f84:	e3 57       	subi	r30, 0x73	; 115
    3f86:	fd 4f       	sbci	r31, 0xFD	; 253
    3f88:	c4 56       	subi	r28, 0x64	; 100
    3f8a:	dc 4f       	sbci	r29, 0xFC	; 252
    3f8c:	28 81       	ld	r18, Y
    3f8e:	cc 59       	subi	r28, 0x9C	; 156
    3f90:	d3 40       	sbci	r29, 0x03	; 3
    3f92:	20 83       	st	Z, r18
              save_byte(cBrightControl, uiBrightControl);
    3f94:	fe 01       	movw	r30, r28
    3f96:	e3 57       	subi	r30, 0x73	; 115
    3f98:	fd 4f       	sbci	r31, 0xFD	; 253
    3f9a:	90 81       	ld	r25, Z
    3f9c:	82 e0       	ldi	r24, 0x02	; 2
    3f9e:	69 2f       	mov	r22, r25
    3fa0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <save_byte>
              char s[100];
              sprintf(s, "brightness control is %s\r\n", uiBrightControl != 0 ? "active" : "inactive");
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e3 57       	subi	r30, 0x73	; 115
    3fa8:	fd 4f       	sbci	r31, 0xFD	; 253
    3faa:	80 81       	ld	r24, Z
    3fac:	88 23       	and	r24, r24
    3fae:	49 f0       	breq	.+18     	; 0x3fc2 <main+0x25f4>
    3fb0:	8d e4       	ldi	r24, 0x4D	; 77
    3fb2:	93 e0       	ldi	r25, 0x03	; 3
    3fb4:	c6 56       	subi	r28, 0x66	; 102
    3fb6:	dc 4f       	sbci	r29, 0xFC	; 252
    3fb8:	99 83       	std	Y+1, r25	; 0x01
    3fba:	88 83       	st	Y, r24
    3fbc:	ca 59       	subi	r28, 0x9A	; 154
    3fbe:	d3 40       	sbci	r29, 0x03	; 3
    3fc0:	08 c0       	rjmp	.+16     	; 0x3fd2 <main+0x2604>
    3fc2:	e4 e5       	ldi	r30, 0x54	; 84
    3fc4:	f3 e0       	ldi	r31, 0x03	; 3
    3fc6:	c6 56       	subi	r28, 0x66	; 102
    3fc8:	dc 4f       	sbci	r29, 0xFC	; 252
    3fca:	f9 83       	std	Y+1, r31	; 0x01
    3fcc:	e8 83       	st	Y, r30
    3fce:	ca 59       	subi	r28, 0x9A	; 154
    3fd0:	d3 40       	sbci	r29, 0x03	; 3
    3fd2:	00 d0       	rcall	.+0      	; 0x3fd4 <main+0x2606>
    3fd4:	00 d0       	rcall	.+0      	; 0x3fd6 <main+0x2608>
    3fd6:	00 d0       	rcall	.+0      	; 0x3fd8 <main+0x260a>
    3fd8:	ed b7       	in	r30, 0x3d	; 61
    3fda:	fe b7       	in	r31, 0x3e	; 62
    3fdc:	31 96       	adiw	r30, 0x01	; 1
    3fde:	ce 01       	movw	r24, r28
    3fe0:	88 5d       	subi	r24, 0xD8	; 216
    3fe2:	9c 4f       	sbci	r25, 0xFC	; 252
    3fe4:	91 83       	std	Z+1, r25	; 0x01
    3fe6:	80 83       	st	Z, r24
    3fe8:	8d e5       	ldi	r24, 0x5D	; 93
    3fea:	93 e0       	ldi	r25, 0x03	; 3
    3fec:	93 83       	std	Z+3, r25	; 0x03
    3fee:	82 83       	std	Z+2, r24	; 0x02
    3ff0:	c6 56       	subi	r28, 0x66	; 102
    3ff2:	dc 4f       	sbci	r29, 0xFC	; 252
    3ff4:	28 81       	ld	r18, Y
    3ff6:	39 81       	ldd	r19, Y+1	; 0x01
    3ff8:	ca 59       	subi	r28, 0x9A	; 154
    3ffa:	d3 40       	sbci	r29, 0x03	; 3
    3ffc:	35 83       	std	Z+5, r19	; 0x05
    3ffe:	24 83       	std	Z+4, r18	; 0x04
    4000:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    4004:	8d b7       	in	r24, 0x3d	; 61
    4006:	9e b7       	in	r25, 0x3e	; 62
    4008:	06 96       	adiw	r24, 0x06	; 6
    400a:	0f b6       	in	r0, 0x3f	; 63
    400c:	f8 94       	cli
    400e:	9e bf       	out	0x3e, r25	; 62
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	8d bf       	out	0x3d, r24	; 61
              uartPuts(s);
    4014:	ce 01       	movw	r24, r28
    4016:	88 5d       	subi	r24, 0xD8	; 216
    4018:	9c 4f       	sbci	r25, 0xFC	; 252
    401a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    401e:	f9 c3       	rjmp	.+2034   	; 0x4812 <main+0x2e44>
          }
        }
        break;
      case 'c':
        {
          int r = hex2dez((char*) &uart_string[1]);
    4020:	86 eb       	ldi	r24, 0xB6	; 182
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 b8 0b 	call	0x1770	; 0x1770 <hex2dez>
    4028:	fe 01       	movw	r30, r28
    402a:	eb 5b       	subi	r30, 0xBB	; 187
    402c:	fd 4f       	sbci	r31, 0xFD	; 253
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	80 83       	st	Z, r24
          int g = hex2dez((char*) &uart_string[3]);
    4032:	88 eb       	ldi	r24, 0xB8	; 184
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 b8 0b 	call	0x1770	; 0x1770 <hex2dez>
    403a:	fe 01       	movw	r30, r28
    403c:	ed 5b       	subi	r30, 0xBD	; 189
    403e:	fd 4f       	sbci	r31, 0xFD	; 253
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	80 83       	st	Z, r24
          int b = hex2dez((char*) &uart_string[5]);
    4044:	8a eb       	ldi	r24, 0xBA	; 186
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	0e 94 b8 0b 	call	0x1770	; 0x1770 <hex2dez>
    404c:	fe 01       	movw	r30, r28
    404e:	ef 5b       	subi	r30, 0xBF	; 191
    4050:	fd 4f       	sbci	r31, 0xFD	; 253
    4052:	91 83       	std	Z+1, r25	; 0x01
    4054:	80 83       	st	Z, r24
          if (r < 0 || g < 0 || b < 0)
    4056:	fe 01       	movw	r30, r28
    4058:	eb 5b       	subi	r30, 0xBB	; 187
    405a:	fd 4f       	sbci	r31, 0xFD	; 253
    405c:	80 81       	ld	r24, Z
    405e:	91 81       	ldd	r25, Z+1	; 0x01
    4060:	99 23       	and	r25, r25
    4062:	74 f0       	brlt	.+28     	; 0x4080 <main+0x26b2>
    4064:	fe 01       	movw	r30, r28
    4066:	ed 5b       	subi	r30, 0xBD	; 189
    4068:	fd 4f       	sbci	r31, 0xFD	; 253
    406a:	80 81       	ld	r24, Z
    406c:	91 81       	ldd	r25, Z+1	; 0x01
    406e:	99 23       	and	r25, r25
    4070:	3c f0       	brlt	.+14     	; 0x4080 <main+0x26b2>
    4072:	fe 01       	movw	r30, r28
    4074:	ef 5b       	subi	r30, 0xBF	; 191
    4076:	fd 4f       	sbci	r31, 0xFD	; 253
    4078:	80 81       	ld	r24, Z
    407a:	91 81       	ldd	r25, Z+1	; 0x01
    407c:	99 23       	and	r25, r25
    407e:	cc f4       	brge	.+50     	; 0x40b2 <main+0x26e4>
          {
            if (uiRGB)
    4080:	fe 01       	movw	r30, r28
    4082:	eb 50       	subi	r30, 0x0B	; 11
    4084:	fd 4f       	sbci	r31, 0xFD	; 253
    4086:	80 81       	ld	r24, Z
    4088:	88 23       	and	r24, r24
    408a:	29 f0       	breq	.+10     	; 0x4096 <main+0x26c8>
              uiRGB = 0;
    408c:	fe 01       	movw	r30, r28
    408e:	eb 50       	subi	r30, 0x0B	; 11
    4090:	fd 4f       	sbci	r31, 0xFD	; 253
    4092:	10 82       	st	Z, r1
    4094:	05 c0       	rjmp	.+10     	; 0x40a0 <main+0x26d2>
            else
              uiRGB = 1;
    4096:	fe 01       	movw	r30, r28
    4098:	eb 50       	subi	r30, 0x0B	; 11
    409a:	fd 4f       	sbci	r31, 0xFD	; 253
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	80 83       	st	Z, r24
            save_byte(cRGB_Mode, uiRGB);
    40a0:	fe 01       	movw	r30, r28
    40a2:	eb 50       	subi	r30, 0x0B	; 11
    40a4:	fd 4f       	sbci	r31, 0xFD	; 253
    40a6:	90 81       	ld	r25, Z
    40a8:	83 e0       	ldi	r24, 0x03	; 3
    40aa:	69 2f       	mov	r22, r25
    40ac:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <save_byte>
    40b0:	b0 c3       	rjmp	.+1888   	; 0x4812 <main+0x2e44>
            break;
          }
          uiRGB = 0;
    40b2:	fe 01       	movw	r30, r28
    40b4:	eb 50       	subi	r30, 0x0B	; 11
    40b6:	fd 4f       	sbci	r31, 0xFD	; 253
    40b8:	10 82       	st	Z, r1
          uiR = r;
    40ba:	fe 01       	movw	r30, r28
    40bc:	eb 5b       	subi	r30, 0xBB	; 187
    40be:	fd 4f       	sbci	r31, 0xFD	; 253
    40c0:	80 81       	ld	r24, Z
    40c2:	fe 01       	movw	r30, r28
    40c4:	ee 50       	subi	r30, 0x0E	; 14
    40c6:	fd 4f       	sbci	r31, 0xFD	; 253
    40c8:	80 83       	st	Z, r24
          uiG = g;
    40ca:	fe 01       	movw	r30, r28
    40cc:	ed 5b       	subi	r30, 0xBD	; 189
    40ce:	fd 4f       	sbci	r31, 0xFD	; 253
    40d0:	80 81       	ld	r24, Z
    40d2:	fe 01       	movw	r30, r28
    40d4:	ed 50       	subi	r30, 0x0D	; 13
    40d6:	fd 4f       	sbci	r31, 0xFD	; 253
    40d8:	80 83       	st	Z, r24
          uiB = b;
    40da:	fe 01       	movw	r30, r28
    40dc:	ef 5b       	subi	r30, 0xBF	; 191
    40de:	fd 4f       	sbci	r31, 0xFD	; 253
    40e0:	80 81       	ld	r24, Z
    40e2:	fe 01       	movw	r30, r28
    40e4:	ec 50       	subi	r30, 0x0C	; 12
    40e6:	fd 4f       	sbci	r31, 0xFD	; 253
    40e8:	80 83       	st	Z, r24
          SetColor(uiBright, uiR, uiG, uiB);
    40ea:	fe 01       	movw	r30, r28
    40ec:	ee 50       	subi	r30, 0x0E	; 14
    40ee:	fd 4f       	sbci	r31, 0xFD	; 253
    40f0:	20 81       	ld	r18, Z
    40f2:	fe 01       	movw	r30, r28
    40f4:	ed 50       	subi	r30, 0x0D	; 13
    40f6:	fd 4f       	sbci	r31, 0xFD	; 253
    40f8:	30 81       	ld	r19, Z
    40fa:	fe 01       	movw	r30, r28
    40fc:	ec 50       	subi	r30, 0x0C	; 12
    40fe:	fd 4f       	sbci	r31, 0xFD	; 253
    4100:	90 81       	ld	r25, Z
    4102:	fe 01       	movw	r30, r28
    4104:	ec 5a       	subi	r30, 0xAC	; 172
    4106:	fd 4f       	sbci	r31, 0xFD	; 253
    4108:	80 81       	ld	r24, Z
    410a:	62 2f       	mov	r22, r18
    410c:	43 2f       	mov	r20, r19
    410e:	29 2f       	mov	r18, r25
    4110:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
          save_byte(cRGB_R, uiR);
    4114:	fe 01       	movw	r30, r28
    4116:	ee 50       	subi	r30, 0x0E	; 14
    4118:	fd 4f       	sbci	r31, 0xFD	; 253
    411a:	90 81       	ld	r25, Z
    411c:	84 e0       	ldi	r24, 0x04	; 4
    411e:	69 2f       	mov	r22, r25
    4120:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <save_byte>
          save_byte(cRGB_G, uiG);
    4124:	fe 01       	movw	r30, r28
    4126:	ed 50       	subi	r30, 0x0D	; 13
    4128:	fd 4f       	sbci	r31, 0xFD	; 253
    412a:	90 81       	ld	r25, Z
    412c:	85 e0       	ldi	r24, 0x05	; 5
    412e:	69 2f       	mov	r22, r25
    4130:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <save_byte>
          save_byte(cRGB_B, uiB);
    4134:	fe 01       	movw	r30, r28
    4136:	ec 50       	subi	r30, 0x0C	; 12
    4138:	fd 4f       	sbci	r31, 0xFD	; 253
    413a:	90 81       	ld	r25, Z
    413c:	86 e0       	ldi	r24, 0x06	; 6
    413e:	69 2f       	mov	r22, r25
    4140:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <save_byte>
          save_byte(cRGB_Mode, uiRGB);
    4144:	fe 01       	movw	r30, r28
    4146:	eb 50       	subi	r30, 0x0B	; 11
    4148:	fd 4f       	sbci	r31, 0xFD	; 253
    414a:	90 81       	ld	r25, Z
    414c:	83 e0       	ldi	r24, 0x03	; 3
    414e:	69 2f       	mov	r22, r25
    4150:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <save_byte>
    4154:	5e c3       	rjmp	.+1724   	; 0x4812 <main+0x2e44>
        }
        break;
      case 't':
        {
          if (uiScrollingBit)
    4156:	fe 01       	movw	r30, r28
    4158:	e5 59       	subi	r30, 0x95	; 149
    415a:	fd 4f       	sbci	r31, 0xFD	; 253
    415c:	80 81       	ld	r24, Z
    415e:	91 81       	ldd	r25, Z+1	; 0x01
    4160:	a2 81       	ldd	r26, Z+2	; 0x02
    4162:	b3 81       	ldd	r27, Z+3	; 0x03
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	a1 05       	cpc	r26, r1
    4168:	b1 05       	cpc	r27, r1
    416a:	41 f0       	breq	.+16     	; 0x417c <main+0x27ae>
          {
            uiScrollingBit = 0;
    416c:	fe 01       	movw	r30, r28
    416e:	e5 59       	subi	r30, 0x95	; 149
    4170:	fd 4f       	sbci	r31, 0xFD	; 253
    4172:	10 82       	st	Z, r1
    4174:	11 82       	std	Z+1, r1	; 0x01
    4176:	12 82       	std	Z+2, r1	; 0x02
    4178:	13 82       	std	Z+3, r1	; 0x03
    417a:	4b c3       	rjmp	.+1686   	; 0x4812 <main+0x2e44>
          }
          else
          {
            uiScrollingBit = 0x80000000;
    417c:	fe 01       	movw	r30, r28
    417e:	e5 59       	subi	r30, 0x95	; 149
    4180:	fd 4f       	sbci	r31, 0xFD	; 253
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	a0 e0       	ldi	r26, 0x00	; 0
    4188:	b0 e8       	ldi	r27, 0x80	; 128
    418a:	80 83       	st	Z, r24
    418c:	91 83       	std	Z+1, r25	; 0x01
    418e:	a2 83       	std	Z+2, r26	; 0x02
    4190:	b3 83       	std	Z+3, r27	; 0x03
    4192:	3f c3       	rjmp	.+1662   	; 0x4812 <main+0x2e44>
          }
        }
        break;
      case '+':
        {
          int res = i2c_rtc_read(&time, 0);
    4194:	ce 01       	movw	r24, r28
    4196:	8f 58       	subi	r24, 0x8F	; 143
    4198:	9d 4f       	sbci	r25, 0xFD	; 253
    419a:	60 e0       	ldi	r22, 0x00	; 0
    419c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    41a0:	fe 01       	movw	r30, r28
    41a2:	e1 5c       	subi	r30, 0xC1	; 193
    41a4:	fd 4f       	sbci	r31, 0xFD	; 253
    41a6:	88 2f       	mov	r24, r24
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	91 83       	std	Z+1, r25	; 0x01
    41ac:	80 83       	st	Z, r24
          add_minute(&time);
    41ae:	ce 01       	movw	r24, r28
    41b0:	8f 58       	subi	r24, 0x8F	; 143
    41b2:	9d 4f       	sbci	r25, 0xFD	; 253
    41b4:	0e 94 a5 04 	call	0x94a	; 0x94a <add_minute>
          res = i2c_rtc_write(&time);
    41b8:	ce 01       	movw	r24, r28
    41ba:	8f 58       	subi	r24, 0x8F	; 143
    41bc:	9d 4f       	sbci	r25, 0xFD	; 253
    41be:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    41c2:	fe 01       	movw	r30, r28
    41c4:	e1 5c       	subi	r30, 0xC1	; 193
    41c6:	fd 4f       	sbci	r31, 0xFD	; 253
    41c8:	88 2f       	mov	r24, r24
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	91 83       	std	Z+1, r25	; 0x01
    41ce:	80 83       	st	Z, r24
    41d0:	20 c3       	rjmp	.+1600   	; 0x4812 <main+0x2e44>
        }
        break;
      case '-':
        {
          int res = i2c_rtc_read(&time, 0);
    41d2:	ce 01       	movw	r24, r28
    41d4:	8f 58       	subi	r24, 0x8F	; 143
    41d6:	9d 4f       	sbci	r25, 0xFD	; 253
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    41de:	fe 01       	movw	r30, r28
    41e0:	e3 5c       	subi	r30, 0xC3	; 195
    41e2:	fd 4f       	sbci	r31, 0xFD	; 253
    41e4:	88 2f       	mov	r24, r24
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	91 83       	std	Z+1, r25	; 0x01
    41ea:	80 83       	st	Z, r24
          sub_minute(&time);
    41ec:	ce 01       	movw	r24, r28
    41ee:	8f 58       	subi	r24, 0x8F	; 143
    41f0:	9d 4f       	sbci	r25, 0xFD	; 253
    41f2:	0e 94 c4 04 	call	0x988	; 0x988 <sub_minute>
          res = i2c_rtc_write(&time);
    41f6:	ce 01       	movw	r24, r28
    41f8:	8f 58       	subi	r24, 0x8F	; 143
    41fa:	9d 4f       	sbci	r25, 0xFD	; 253
    41fc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4200:	fe 01       	movw	r30, r28
    4202:	e3 5c       	subi	r30, 0xC3	; 195
    4204:	fd 4f       	sbci	r31, 0xFD	; 253
    4206:	88 2f       	mov	r24, r24
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	91 83       	std	Z+1, r25	; 0x01
    420c:	80 83       	st	Z, r24
    420e:	01 c3       	rjmp	.+1538   	; 0x4812 <main+0x2e44>
        }
        break;
      case 'z':
        switch (uart_string[1])
    4210:	80 91 b6 00 	lds	r24, 0x00B6
    4214:	e8 2f       	mov	r30, r24
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	c8 56       	subi	r28, 0x68	; 104
    421a:	dc 4f       	sbci	r29, 0xFC	; 252
    421c:	f9 83       	std	Y+1, r31	; 0x01
    421e:	e8 83       	st	Y, r30
    4220:	c8 59       	subi	r28, 0x98	; 152
    4222:	d3 40       	sbci	r29, 0x03	; 3
    4224:	c8 56       	subi	r28, 0x68	; 104
    4226:	dc 4f       	sbci	r29, 0xFC	; 252
    4228:	28 81       	ld	r18, Y
    422a:	39 81       	ldd	r19, Y+1	; 0x01
    422c:	c8 59       	subi	r28, 0x98	; 152
    422e:	d3 40       	sbci	r29, 0x03	; 3
    4230:	2b 32       	cpi	r18, 0x2B	; 43
    4232:	31 05       	cpc	r19, r1
    4234:	51 f0       	breq	.+20     	; 0x424a <main+0x287c>
    4236:	c8 56       	subi	r28, 0x68	; 104
    4238:	dc 4f       	sbci	r29, 0xFC	; 252
    423a:	88 81       	ld	r24, Y
    423c:	99 81       	ldd	r25, Y+1	; 0x01
    423e:	c8 59       	subi	r28, 0x98	; 152
    4240:	d3 40       	sbci	r29, 0x03	; 3
    4242:	8d 32       	cpi	r24, 0x2D	; 45
    4244:	91 05       	cpc	r25, r1
    4246:	71 f0       	breq	.+28     	; 0x4264 <main+0x2896>
    4248:	1a c0       	rjmp	.+52     	; 0x427e <main+0x28b0>
        {
        case '+':
          {
            if (rtc_offset > 11)
    424a:	80 91 a5 04 	lds	r24, 0x04A5
    424e:	8c 30       	cpi	r24, 0x0C	; 12
    4250:	1c f0       	brlt	.+6      	; 0x4258 <main+0x288a>
              rtc_offset = -13;
    4252:	83 ef       	ldi	r24, 0xF3	; 243
    4254:	80 93 a5 04 	sts	0x04A5, r24
            set_offset(rtc_offset + 1);
    4258:	80 91 a5 04 	lds	r24, 0x04A5
    425c:	8f 5f       	subi	r24, 0xFF	; 255
    425e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <set_offset>
    4262:	d7 c2       	rjmp	.+1454   	; 0x4812 <main+0x2e44>
          }
          break;
        case '-':
          {
            if (rtc_offset < -11)
    4264:	80 91 a5 04 	lds	r24, 0x04A5
    4268:	85 3f       	cpi	r24, 0xF5	; 245
    426a:	1c f4       	brge	.+6      	; 0x4272 <main+0x28a4>
              rtc_offset = 13;
    426c:	8d e0       	ldi	r24, 0x0D	; 13
    426e:	80 93 a5 04 	sts	0x04A5, r24
            set_offset(rtc_offset - 1);
    4272:	80 91 a5 04 	lds	r24, 0x04A5
    4276:	81 50       	subi	r24, 0x01	; 1
    4278:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <set_offset>
    427c:	ca c2       	rjmp	.+1428   	; 0x4812 <main+0x2e44>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "z macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    427e:	80 91 b6 00 	lds	r24, 0x00B6
    4282:	28 2f       	mov	r18, r24
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	00 d0       	rcall	.+0      	; 0x4288 <main+0x28ba>
    4288:	00 d0       	rcall	.+0      	; 0x428a <main+0x28bc>
    428a:	00 d0       	rcall	.+0      	; 0x428c <main+0x28be>
    428c:	ed b7       	in	r30, 0x3d	; 61
    428e:	fe b7       	in	r31, 0x3e	; 62
    4290:	31 96       	adiw	r30, 0x01	; 1
    4292:	ce 01       	movw	r24, r28
    4294:	88 5d       	subi	r24, 0xD8	; 216
    4296:	9c 4f       	sbci	r25, 0xFC	; 252
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	80 83       	st	Z, r24
    429c:	88 e7       	ldi	r24, 0x78	; 120
    429e:	93 e0       	ldi	r25, 0x03	; 3
    42a0:	93 83       	std	Z+3, r25	; 0x03
    42a2:	82 83       	std	Z+2, r24	; 0x02
    42a4:	35 83       	std	Z+5, r19	; 0x05
    42a6:	24 83       	std	Z+4, r18	; 0x04
    42a8:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    42ac:	ed b7       	in	r30, 0x3d	; 61
    42ae:	fe b7       	in	r31, 0x3e	; 62
    42b0:	36 96       	adiw	r30, 0x06	; 6
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	fe bf       	out	0x3e, r31	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	ed bf       	out	0x3d, r30	; 61
            uartPuts(s);
    42bc:	ce 01       	movw	r24, r28
    42be:	88 5d       	subi	r24, 0xD8	; 216
    42c0:	9c 4f       	sbci	r25, 0xFC	; 252
    42c2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    42c6:	a5 c2       	rjmp	.+1354   	; 0x4812 <main+0x2e44>
          }
          break;
        }
        break;
      case 'h':
        switch (uart_string[1])
    42c8:	80 91 b6 00 	lds	r24, 0x00B6
    42cc:	28 2f       	mov	r18, r24
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	ca 56       	subi	r28, 0x6A	; 106
    42d2:	dc 4f       	sbci	r29, 0xFC	; 252
    42d4:	39 83       	std	Y+1, r19	; 0x01
    42d6:	28 83       	st	Y, r18
    42d8:	c6 59       	subi	r28, 0x96	; 150
    42da:	d3 40       	sbci	r29, 0x03	; 3
    42dc:	ca 56       	subi	r28, 0x6A	; 106
    42de:	dc 4f       	sbci	r29, 0xFC	; 252
    42e0:	88 81       	ld	r24, Y
    42e2:	99 81       	ldd	r25, Y+1	; 0x01
    42e4:	c6 59       	subi	r28, 0x96	; 150
    42e6:	d3 40       	sbci	r29, 0x03	; 3
    42e8:	8b 32       	cpi	r24, 0x2B	; 43
    42ea:	91 05       	cpc	r25, r1
    42ec:	51 f0       	breq	.+20     	; 0x4302 <main+0x2934>
    42ee:	ca 56       	subi	r28, 0x6A	; 106
    42f0:	dc 4f       	sbci	r29, 0xFC	; 252
    42f2:	e8 81       	ld	r30, Y
    42f4:	f9 81       	ldd	r31, Y+1	; 0x01
    42f6:	c6 59       	subi	r28, 0x96	; 150
    42f8:	d3 40       	sbci	r29, 0x03	; 3
    42fa:	ed 32       	cpi	r30, 0x2D	; 45
    42fc:	f1 05       	cpc	r31, r1
    42fe:	01 f1       	breq	.+64     	; 0x4340 <main+0x2972>
    4300:	3e c0       	rjmp	.+124    	; 0x437e <main+0x29b0>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    4302:	ce 01       	movw	r24, r28
    4304:	8f 58       	subi	r24, 0x8F	; 143
    4306:	9d 4f       	sbci	r25, 0xFD	; 253
    4308:	60 e0       	ldi	r22, 0x00	; 0
    430a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    430e:	fe 01       	movw	r30, r28
    4310:	e5 5c       	subi	r30, 0xC5	; 197
    4312:	fd 4f       	sbci	r31, 0xFD	; 253
    4314:	88 2f       	mov	r24, r24
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	91 83       	std	Z+1, r25	; 0x01
    431a:	80 83       	st	Z, r24
            add_hour(&time);
    431c:	ce 01       	movw	r24, r28
    431e:	8f 58       	subi	r24, 0x8F	; 143
    4320:	9d 4f       	sbci	r25, 0xFD	; 253
    4322:	0e 94 65 04 	call	0x8ca	; 0x8ca <add_hour>
            res = i2c_rtc_write(&time);
    4326:	ce 01       	movw	r24, r28
    4328:	8f 58       	subi	r24, 0x8F	; 143
    432a:	9d 4f       	sbci	r25, 0xFD	; 253
    432c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4330:	fe 01       	movw	r30, r28
    4332:	e5 5c       	subi	r30, 0xC5	; 197
    4334:	fd 4f       	sbci	r31, 0xFD	; 253
    4336:	88 2f       	mov	r24, r24
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	91 83       	std	Z+1, r25	; 0x01
    433c:	80 83       	st	Z, r24
    433e:	69 c2       	rjmp	.+1234   	; 0x4812 <main+0x2e44>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    4340:	ce 01       	movw	r24, r28
    4342:	8f 58       	subi	r24, 0x8F	; 143
    4344:	9d 4f       	sbci	r25, 0xFD	; 253
    4346:	60 e0       	ldi	r22, 0x00	; 0
    4348:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    434c:	fe 01       	movw	r30, r28
    434e:	e7 5c       	subi	r30, 0xC7	; 199
    4350:	fd 4f       	sbci	r31, 0xFD	; 253
    4352:	88 2f       	mov	r24, r24
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	91 83       	std	Z+1, r25	; 0x01
    4358:	80 83       	st	Z, r24
            sub_hour(&time);
    435a:	ce 01       	movw	r24, r28
    435c:	8f 58       	subi	r24, 0x8F	; 143
    435e:	9d 4f       	sbci	r25, 0xFD	; 253
    4360:	0e 94 84 04 	call	0x908	; 0x908 <sub_hour>
            res = i2c_rtc_write(&time);
    4364:	ce 01       	movw	r24, r28
    4366:	8f 58       	subi	r24, 0x8F	; 143
    4368:	9d 4f       	sbci	r25, 0xFD	; 253
    436a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    436e:	fe 01       	movw	r30, r28
    4370:	e7 5c       	subi	r30, 0xC7	; 199
    4372:	fd 4f       	sbci	r31, 0xFD	; 253
    4374:	88 2f       	mov	r24, r24
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	91 83       	std	Z+1, r25	; 0x01
    437a:	80 83       	st	Z, r24
    437c:	4a c2       	rjmp	.+1172   	; 0x4812 <main+0x2e44>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "h macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    437e:	80 91 b6 00 	lds	r24, 0x00B6
    4382:	28 2f       	mov	r18, r24
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	00 d0       	rcall	.+0      	; 0x4388 <main+0x29ba>
    4388:	00 d0       	rcall	.+0      	; 0x438a <main+0x29bc>
    438a:	00 d0       	rcall	.+0      	; 0x438c <main+0x29be>
    438c:	ed b7       	in	r30, 0x3d	; 61
    438e:	fe b7       	in	r31, 0x3e	; 62
    4390:	31 96       	adiw	r30, 0x01	; 1
    4392:	ce 01       	movw	r24, r28
    4394:	88 5d       	subi	r24, 0xD8	; 216
    4396:	9c 4f       	sbci	r25, 0xFC	; 252
    4398:	91 83       	std	Z+1, r25	; 0x01
    439a:	80 83       	st	Z, r24
    439c:	8a e9       	ldi	r24, 0x9A	; 154
    439e:	93 e0       	ldi	r25, 0x03	; 3
    43a0:	93 83       	std	Z+3, r25	; 0x03
    43a2:	82 83       	std	Z+2, r24	; 0x02
    43a4:	35 83       	std	Z+5, r19	; 0x05
    43a6:	24 83       	std	Z+4, r18	; 0x04
    43a8:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    43ac:	2d b7       	in	r18, 0x3d	; 61
    43ae:	3e b7       	in	r19, 0x3e	; 62
    43b0:	2a 5f       	subi	r18, 0xFA	; 250
    43b2:	3f 4f       	sbci	r19, 0xFF	; 255
    43b4:	0f b6       	in	r0, 0x3f	; 63
    43b6:	f8 94       	cli
    43b8:	3e bf       	out	0x3e, r19	; 62
    43ba:	0f be       	out	0x3f, r0	; 63
    43bc:	2d bf       	out	0x3d, r18	; 61
            uartPuts(s);
    43be:	ce 01       	movw	r24, r28
    43c0:	88 5d       	subi	r24, 0xD8	; 216
    43c2:	9c 4f       	sbci	r25, 0xFC	; 252
    43c4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    43c8:	24 c2       	rjmp	.+1096   	; 0x4812 <main+0x2e44>
          }
          break;
        }
        break;
      case 'm':
        switch (uart_string[1])
    43ca:	80 91 b6 00 	lds	r24, 0x00B6
    43ce:	e8 2f       	mov	r30, r24
    43d0:	f0 e0       	ldi	r31, 0x00	; 0
    43d2:	cc 56       	subi	r28, 0x6C	; 108
    43d4:	dc 4f       	sbci	r29, 0xFC	; 252
    43d6:	f9 83       	std	Y+1, r31	; 0x01
    43d8:	e8 83       	st	Y, r30
    43da:	c4 59       	subi	r28, 0x94	; 148
    43dc:	d3 40       	sbci	r29, 0x03	; 3
    43de:	cc 56       	subi	r28, 0x6C	; 108
    43e0:	dc 4f       	sbci	r29, 0xFC	; 252
    43e2:	28 81       	ld	r18, Y
    43e4:	39 81       	ldd	r19, Y+1	; 0x01
    43e6:	c4 59       	subi	r28, 0x94	; 148
    43e8:	d3 40       	sbci	r29, 0x03	; 3
    43ea:	2b 32       	cpi	r18, 0x2B	; 43
    43ec:	31 05       	cpc	r19, r1
    43ee:	51 f0       	breq	.+20     	; 0x4404 <main+0x2a36>
    43f0:	cc 56       	subi	r28, 0x6C	; 108
    43f2:	dc 4f       	sbci	r29, 0xFC	; 252
    43f4:	88 81       	ld	r24, Y
    43f6:	99 81       	ldd	r25, Y+1	; 0x01
    43f8:	c4 59       	subi	r28, 0x94	; 148
    43fa:	d3 40       	sbci	r29, 0x03	; 3
    43fc:	8d 32       	cpi	r24, 0x2D	; 45
    43fe:	91 05       	cpc	r25, r1
    4400:	01 f1       	breq	.+64     	; 0x4442 <main+0x2a74>
    4402:	3e c0       	rjmp	.+124    	; 0x4480 <main+0x2ab2>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    4404:	ce 01       	movw	r24, r28
    4406:	8f 58       	subi	r24, 0x8F	; 143
    4408:	9d 4f       	sbci	r25, 0xFD	; 253
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4410:	fe 01       	movw	r30, r28
    4412:	e9 5c       	subi	r30, 0xC9	; 201
    4414:	fd 4f       	sbci	r31, 0xFD	; 253
    4416:	88 2f       	mov	r24, r24
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	91 83       	std	Z+1, r25	; 0x01
    441c:	80 83       	st	Z, r24
            add_minute(&time);
    441e:	ce 01       	movw	r24, r28
    4420:	8f 58       	subi	r24, 0x8F	; 143
    4422:	9d 4f       	sbci	r25, 0xFD	; 253
    4424:	0e 94 a5 04 	call	0x94a	; 0x94a <add_minute>
            res = i2c_rtc_write(&time);
    4428:	ce 01       	movw	r24, r28
    442a:	8f 58       	subi	r24, 0x8F	; 143
    442c:	9d 4f       	sbci	r25, 0xFD	; 253
    442e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4432:	fe 01       	movw	r30, r28
    4434:	e9 5c       	subi	r30, 0xC9	; 201
    4436:	fd 4f       	sbci	r31, 0xFD	; 253
    4438:	88 2f       	mov	r24, r24
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	91 83       	std	Z+1, r25	; 0x01
    443e:	80 83       	st	Z, r24
    4440:	e8 c1       	rjmp	.+976    	; 0x4812 <main+0x2e44>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    4442:	ce 01       	movw	r24, r28
    4444:	8f 58       	subi	r24, 0x8F	; 143
    4446:	9d 4f       	sbci	r25, 0xFD	; 253
    4448:	60 e0       	ldi	r22, 0x00	; 0
    444a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    444e:	fe 01       	movw	r30, r28
    4450:	eb 5c       	subi	r30, 0xCB	; 203
    4452:	fd 4f       	sbci	r31, 0xFD	; 253
    4454:	88 2f       	mov	r24, r24
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	91 83       	std	Z+1, r25	; 0x01
    445a:	80 83       	st	Z, r24
            sub_minute(&time);
    445c:	ce 01       	movw	r24, r28
    445e:	8f 58       	subi	r24, 0x8F	; 143
    4460:	9d 4f       	sbci	r25, 0xFD	; 253
    4462:	0e 94 c4 04 	call	0x988	; 0x988 <sub_minute>
            res = i2c_rtc_write(&time);
    4466:	ce 01       	movw	r24, r28
    4468:	8f 58       	subi	r24, 0x8F	; 143
    446a:	9d 4f       	sbci	r25, 0xFD	; 253
    446c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4470:	fe 01       	movw	r30, r28
    4472:	eb 5c       	subi	r30, 0xCB	; 203
    4474:	fd 4f       	sbci	r31, 0xFD	; 253
    4476:	88 2f       	mov	r24, r24
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	91 83       	std	Z+1, r25	; 0x01
    447c:	80 83       	st	Z, r24
    447e:	c9 c1       	rjmp	.+914    	; 0x4812 <main+0x2e44>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "m macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    4480:	80 91 b6 00 	lds	r24, 0x00B6
    4484:	28 2f       	mov	r18, r24
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	00 d0       	rcall	.+0      	; 0x448a <main+0x2abc>
    448a:	00 d0       	rcall	.+0      	; 0x448c <main+0x2abe>
    448c:	00 d0       	rcall	.+0      	; 0x448e <main+0x2ac0>
    448e:	ed b7       	in	r30, 0x3d	; 61
    4490:	fe b7       	in	r31, 0x3e	; 62
    4492:	31 96       	adiw	r30, 0x01	; 1
    4494:	ce 01       	movw	r24, r28
    4496:	88 5d       	subi	r24, 0xD8	; 216
    4498:	9c 4f       	sbci	r25, 0xFC	; 252
    449a:	91 83       	std	Z+1, r25	; 0x01
    449c:	80 83       	st	Z, r24
    449e:	8c eb       	ldi	r24, 0xBC	; 188
    44a0:	93 e0       	ldi	r25, 0x03	; 3
    44a2:	93 83       	std	Z+3, r25	; 0x03
    44a4:	82 83       	std	Z+2, r24	; 0x02
    44a6:	35 83       	std	Z+5, r19	; 0x05
    44a8:	24 83       	std	Z+4, r18	; 0x04
    44aa:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    44ae:	ed b7       	in	r30, 0x3d	; 61
    44b0:	fe b7       	in	r31, 0x3e	; 62
    44b2:	36 96       	adiw	r30, 0x06	; 6
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	fe bf       	out	0x3e, r31	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	ed bf       	out	0x3d, r30	; 61
            uartPuts(s);
    44be:	ce 01       	movw	r24, r28
    44c0:	88 5d       	subi	r24, 0xD8	; 216
    44c2:	9c 4f       	sbci	r25, 0xFC	; 252
    44c4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    44c8:	a4 c1       	rjmp	.+840    	; 0x4812 <main+0x2e44>
          }
          break;
        }
        break;
      case 'D':
        switch (uart_string[1])
    44ca:	80 91 b6 00 	lds	r24, 0x00B6
    44ce:	28 2f       	mov	r18, r24
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	ce 56       	subi	r28, 0x6E	; 110
    44d4:	dc 4f       	sbci	r29, 0xFC	; 252
    44d6:	39 83       	std	Y+1, r19	; 0x01
    44d8:	28 83       	st	Y, r18
    44da:	c2 59       	subi	r28, 0x92	; 146
    44dc:	d3 40       	sbci	r29, 0x03	; 3
    44de:	ce 56       	subi	r28, 0x6E	; 110
    44e0:	dc 4f       	sbci	r29, 0xFC	; 252
    44e2:	88 81       	ld	r24, Y
    44e4:	99 81       	ldd	r25, Y+1	; 0x01
    44e6:	c2 59       	subi	r28, 0x92	; 146
    44e8:	d3 40       	sbci	r29, 0x03	; 3
    44ea:	8b 32       	cpi	r24, 0x2B	; 43
    44ec:	91 05       	cpc	r25, r1
    44ee:	51 f0       	breq	.+20     	; 0x4504 <main+0x2b36>
    44f0:	ce 56       	subi	r28, 0x6E	; 110
    44f2:	dc 4f       	sbci	r29, 0xFC	; 252
    44f4:	e8 81       	ld	r30, Y
    44f6:	f9 81       	ldd	r31, Y+1	; 0x01
    44f8:	c2 59       	subi	r28, 0x92	; 146
    44fa:	d3 40       	sbci	r29, 0x03	; 3
    44fc:	ed 32       	cpi	r30, 0x2D	; 45
    44fe:	f1 05       	cpc	r31, r1
    4500:	01 f1       	breq	.+64     	; 0x4542 <main+0x2b74>
    4502:	3e c0       	rjmp	.+124    	; 0x4580 <main+0x2bb2>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    4504:	ce 01       	movw	r24, r28
    4506:	8f 58       	subi	r24, 0x8F	; 143
    4508:	9d 4f       	sbci	r25, 0xFD	; 253
    450a:	60 e0       	ldi	r22, 0x00	; 0
    450c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4510:	fe 01       	movw	r30, r28
    4512:	ed 5c       	subi	r30, 0xCD	; 205
    4514:	fd 4f       	sbci	r31, 0xFD	; 253
    4516:	88 2f       	mov	r24, r24
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	91 83       	std	Z+1, r25	; 0x01
    451c:	80 83       	st	Z, r24
            add_day(&time);
    451e:	ce 01       	movw	r24, r28
    4520:	8f 58       	subi	r24, 0x8F	; 143
    4522:	9d 4f       	sbci	r25, 0xFD	; 253
    4524:	0e 94 8b 03 	call	0x716	; 0x716 <add_day>
            res = i2c_rtc_write(&time);
    4528:	ce 01       	movw	r24, r28
    452a:	8f 58       	subi	r24, 0x8F	; 143
    452c:	9d 4f       	sbci	r25, 0xFD	; 253
    452e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4532:	fe 01       	movw	r30, r28
    4534:	ed 5c       	subi	r30, 0xCD	; 205
    4536:	fd 4f       	sbci	r31, 0xFD	; 253
    4538:	88 2f       	mov	r24, r24
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	91 83       	std	Z+1, r25	; 0x01
    453e:	80 83       	st	Z, r24
    4540:	68 c1       	rjmp	.+720    	; 0x4812 <main+0x2e44>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    4542:	ce 01       	movw	r24, r28
    4544:	8f 58       	subi	r24, 0x8F	; 143
    4546:	9d 4f       	sbci	r25, 0xFD	; 253
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    454e:	fe 01       	movw	r30, r28
    4550:	ef 5c       	subi	r30, 0xCF	; 207
    4552:	fd 4f       	sbci	r31, 0xFD	; 253
    4554:	88 2f       	mov	r24, r24
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	91 83       	std	Z+1, r25	; 0x01
    455a:	80 83       	st	Z, r24
            sub_day(&time);
    455c:	ce 01       	movw	r24, r28
    455e:	8f 58       	subi	r24, 0x8F	; 143
    4560:	9d 4f       	sbci	r25, 0xFD	; 253
    4562:	0e 94 f7 03 	call	0x7ee	; 0x7ee <sub_day>
            res = i2c_rtc_write(&time);
    4566:	ce 01       	movw	r24, r28
    4568:	8f 58       	subi	r24, 0x8F	; 143
    456a:	9d 4f       	sbci	r25, 0xFD	; 253
    456c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4570:	fe 01       	movw	r30, r28
    4572:	ef 5c       	subi	r30, 0xCF	; 207
    4574:	fd 4f       	sbci	r31, 0xFD	; 253
    4576:	88 2f       	mov	r24, r24
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	91 83       	std	Z+1, r25	; 0x01
    457c:	80 83       	st	Z, r24
    457e:	49 c1       	rjmp	.+658    	; 0x4812 <main+0x2e44>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "D macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    4580:	80 91 b6 00 	lds	r24, 0x00B6
    4584:	28 2f       	mov	r18, r24
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	00 d0       	rcall	.+0      	; 0x458a <main+0x2bbc>
    458a:	00 d0       	rcall	.+0      	; 0x458c <main+0x2bbe>
    458c:	00 d0       	rcall	.+0      	; 0x458e <main+0x2bc0>
    458e:	ed b7       	in	r30, 0x3d	; 61
    4590:	fe b7       	in	r31, 0x3e	; 62
    4592:	31 96       	adiw	r30, 0x01	; 1
    4594:	ce 01       	movw	r24, r28
    4596:	88 5d       	subi	r24, 0xD8	; 216
    4598:	9c 4f       	sbci	r25, 0xFC	; 252
    459a:	91 83       	std	Z+1, r25	; 0x01
    459c:	80 83       	st	Z, r24
    459e:	8e ed       	ldi	r24, 0xDE	; 222
    45a0:	93 e0       	ldi	r25, 0x03	; 3
    45a2:	93 83       	std	Z+3, r25	; 0x03
    45a4:	82 83       	std	Z+2, r24	; 0x02
    45a6:	35 83       	std	Z+5, r19	; 0x05
    45a8:	24 83       	std	Z+4, r18	; 0x04
    45aa:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    45ae:	2d b7       	in	r18, 0x3d	; 61
    45b0:	3e b7       	in	r19, 0x3e	; 62
    45b2:	2a 5f       	subi	r18, 0xFA	; 250
    45b4:	3f 4f       	sbci	r19, 0xFF	; 255
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	3e bf       	out	0x3e, r19	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	2d bf       	out	0x3d, r18	; 61
            uartPuts(s);
    45c0:	ce 01       	movw	r24, r28
    45c2:	88 5d       	subi	r24, 0xD8	; 216
    45c4:	9c 4f       	sbci	r25, 0xFC	; 252
    45c6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    45ca:	23 c1       	rjmp	.+582    	; 0x4812 <main+0x2e44>
          }
          break;
        }
        break;
      case 'M':
        switch (uart_string[1])
    45cc:	80 91 b6 00 	lds	r24, 0x00B6
    45d0:	e8 2f       	mov	r30, r24
    45d2:	f0 e0       	ldi	r31, 0x00	; 0
    45d4:	c0 57       	subi	r28, 0x70	; 112
    45d6:	dc 4f       	sbci	r29, 0xFC	; 252
    45d8:	f9 83       	std	Y+1, r31	; 0x01
    45da:	e8 83       	st	Y, r30
    45dc:	c0 59       	subi	r28, 0x90	; 144
    45de:	d3 40       	sbci	r29, 0x03	; 3
    45e0:	c0 57       	subi	r28, 0x70	; 112
    45e2:	dc 4f       	sbci	r29, 0xFC	; 252
    45e4:	28 81       	ld	r18, Y
    45e6:	39 81       	ldd	r19, Y+1	; 0x01
    45e8:	c0 59       	subi	r28, 0x90	; 144
    45ea:	d3 40       	sbci	r29, 0x03	; 3
    45ec:	2b 32       	cpi	r18, 0x2B	; 43
    45ee:	31 05       	cpc	r19, r1
    45f0:	51 f0       	breq	.+20     	; 0x4606 <main+0x2c38>
    45f2:	c0 57       	subi	r28, 0x70	; 112
    45f4:	dc 4f       	sbci	r29, 0xFC	; 252
    45f6:	88 81       	ld	r24, Y
    45f8:	99 81       	ldd	r25, Y+1	; 0x01
    45fa:	c0 59       	subi	r28, 0x90	; 144
    45fc:	d3 40       	sbci	r29, 0x03	; 3
    45fe:	8d 32       	cpi	r24, 0x2D	; 45
    4600:	91 05       	cpc	r25, r1
    4602:	01 f1       	breq	.+64     	; 0x4644 <main+0x2c76>
    4604:	3e c0       	rjmp	.+124    	; 0x4682 <main+0x2cb4>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    4606:	ce 01       	movw	r24, r28
    4608:	8f 58       	subi	r24, 0x8F	; 143
    460a:	9d 4f       	sbci	r25, 0xFD	; 253
    460c:	60 e0       	ldi	r22, 0x00	; 0
    460e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4612:	fe 01       	movw	r30, r28
    4614:	e1 5d       	subi	r30, 0xD1	; 209
    4616:	fd 4f       	sbci	r31, 0xFD	; 253
    4618:	88 2f       	mov	r24, r24
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	91 83       	std	Z+1, r25	; 0x01
    461e:	80 83       	st	Z, r24
            add_month(&time);
    4620:	ce 01       	movw	r24, r28
    4622:	8f 58       	subi	r24, 0x8F	; 143
    4624:	9d 4f       	sbci	r25, 0xFD	; 253
    4626:	0e 94 4b 03 	call	0x696	; 0x696 <add_month>
            res = i2c_rtc_write(&time);
    462a:	ce 01       	movw	r24, r28
    462c:	8f 58       	subi	r24, 0x8F	; 143
    462e:	9d 4f       	sbci	r25, 0xFD	; 253
    4630:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4634:	fe 01       	movw	r30, r28
    4636:	e1 5d       	subi	r30, 0xD1	; 209
    4638:	fd 4f       	sbci	r31, 0xFD	; 253
    463a:	88 2f       	mov	r24, r24
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	91 83       	std	Z+1, r25	; 0x01
    4640:	80 83       	st	Z, r24
    4642:	e7 c0       	rjmp	.+462    	; 0x4812 <main+0x2e44>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    4644:	ce 01       	movw	r24, r28
    4646:	8f 58       	subi	r24, 0x8F	; 143
    4648:	9d 4f       	sbci	r25, 0xFD	; 253
    464a:	60 e0       	ldi	r22, 0x00	; 0
    464c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4650:	fe 01       	movw	r30, r28
    4652:	e3 5d       	subi	r30, 0xD3	; 211
    4654:	fd 4f       	sbci	r31, 0xFD	; 253
    4656:	88 2f       	mov	r24, r24
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	91 83       	std	Z+1, r25	; 0x01
    465c:	80 83       	st	Z, r24
            sub_month(&time);
    465e:	ce 01       	movw	r24, r28
    4660:	8f 58       	subi	r24, 0x8F	; 143
    4662:	9d 4f       	sbci	r25, 0xFD	; 253
    4664:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <sub_month>
            res = i2c_rtc_write(&time);
    4668:	ce 01       	movw	r24, r28
    466a:	8f 58       	subi	r24, 0x8F	; 143
    466c:	9d 4f       	sbci	r25, 0xFD	; 253
    466e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4672:	fe 01       	movw	r30, r28
    4674:	e3 5d       	subi	r30, 0xD3	; 211
    4676:	fd 4f       	sbci	r31, 0xFD	; 253
    4678:	88 2f       	mov	r24, r24
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	c8 c0       	rjmp	.+400    	; 0x4812 <main+0x2e44>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "M macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    4682:	80 91 b6 00 	lds	r24, 0x00B6
    4686:	28 2f       	mov	r18, r24
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	00 d0       	rcall	.+0      	; 0x468c <main+0x2cbe>
    468c:	00 d0       	rcall	.+0      	; 0x468e <main+0x2cc0>
    468e:	00 d0       	rcall	.+0      	; 0x4690 <main+0x2cc2>
    4690:	ed b7       	in	r30, 0x3d	; 61
    4692:	fe b7       	in	r31, 0x3e	; 62
    4694:	31 96       	adiw	r30, 0x01	; 1
    4696:	ce 01       	movw	r24, r28
    4698:	88 5d       	subi	r24, 0xD8	; 216
    469a:	9c 4f       	sbci	r25, 0xFC	; 252
    469c:	91 83       	std	Z+1, r25	; 0x01
    469e:	80 83       	st	Z, r24
    46a0:	80 e0       	ldi	r24, 0x00	; 0
    46a2:	94 e0       	ldi	r25, 0x04	; 4
    46a4:	93 83       	std	Z+3, r25	; 0x03
    46a6:	82 83       	std	Z+2, r24	; 0x02
    46a8:	35 83       	std	Z+5, r19	; 0x05
    46aa:	24 83       	std	Z+4, r18	; 0x04
    46ac:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    46b0:	ed b7       	in	r30, 0x3d	; 61
    46b2:	fe b7       	in	r31, 0x3e	; 62
    46b4:	36 96       	adiw	r30, 0x06	; 6
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	f8 94       	cli
    46ba:	fe bf       	out	0x3e, r31	; 62
    46bc:	0f be       	out	0x3f, r0	; 63
    46be:	ed bf       	out	0x3d, r30	; 61
            uartPuts(s);
    46c0:	ce 01       	movw	r24, r28
    46c2:	88 5d       	subi	r24, 0xD8	; 216
    46c4:	9c 4f       	sbci	r25, 0xFC	; 252
    46c6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    46ca:	a3 c0       	rjmp	.+326    	; 0x4812 <main+0x2e44>
          }
          break;
        }
        break;
      case 'Y':
        switch (uart_string[1])
    46cc:	80 91 b6 00 	lds	r24, 0x00B6
    46d0:	28 2f       	mov	r18, r24
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	c2 57       	subi	r28, 0x72	; 114
    46d6:	dc 4f       	sbci	r29, 0xFC	; 252
    46d8:	39 83       	std	Y+1, r19	; 0x01
    46da:	28 83       	st	Y, r18
    46dc:	ce 58       	subi	r28, 0x8E	; 142
    46de:	d3 40       	sbci	r29, 0x03	; 3
    46e0:	c2 57       	subi	r28, 0x72	; 114
    46e2:	dc 4f       	sbci	r29, 0xFC	; 252
    46e4:	88 81       	ld	r24, Y
    46e6:	99 81       	ldd	r25, Y+1	; 0x01
    46e8:	ce 58       	subi	r28, 0x8E	; 142
    46ea:	d3 40       	sbci	r29, 0x03	; 3
    46ec:	8b 32       	cpi	r24, 0x2B	; 43
    46ee:	91 05       	cpc	r25, r1
    46f0:	51 f0       	breq	.+20     	; 0x4706 <main+0x2d38>
    46f2:	c2 57       	subi	r28, 0x72	; 114
    46f4:	dc 4f       	sbci	r29, 0xFC	; 252
    46f6:	e8 81       	ld	r30, Y
    46f8:	f9 81       	ldd	r31, Y+1	; 0x01
    46fa:	ce 58       	subi	r28, 0x8E	; 142
    46fc:	d3 40       	sbci	r29, 0x03	; 3
    46fe:	ed 32       	cpi	r30, 0x2D	; 45
    4700:	f1 05       	cpc	r31, r1
    4702:	01 f1       	breq	.+64     	; 0x4744 <main+0x2d76>
    4704:	3e c0       	rjmp	.+124    	; 0x4782 <main+0x2db4>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    4706:	ce 01       	movw	r24, r28
    4708:	8f 58       	subi	r24, 0x8F	; 143
    470a:	9d 4f       	sbci	r25, 0xFD	; 253
    470c:	60 e0       	ldi	r22, 0x00	; 0
    470e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4712:	fe 01       	movw	r30, r28
    4714:	e5 5d       	subi	r30, 0xD5	; 213
    4716:	fd 4f       	sbci	r31, 0xFD	; 253
    4718:	88 2f       	mov	r24, r24
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	91 83       	std	Z+1, r25	; 0x01
    471e:	80 83       	st	Z, r24
            add_year(&time);
    4720:	ce 01       	movw	r24, r28
    4722:	8f 58       	subi	r24, 0x8F	; 143
    4724:	9d 4f       	sbci	r25, 0xFD	; 253
    4726:	0e 94 25 03 	call	0x64a	; 0x64a <add_year>
            res = i2c_rtc_write(&time);
    472a:	ce 01       	movw	r24, r28
    472c:	8f 58       	subi	r24, 0x8F	; 143
    472e:	9d 4f       	sbci	r25, 0xFD	; 253
    4730:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4734:	fe 01       	movw	r30, r28
    4736:	e5 5d       	subi	r30, 0xD5	; 213
    4738:	fd 4f       	sbci	r31, 0xFD	; 253
    473a:	88 2f       	mov	r24, r24
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	91 83       	std	Z+1, r25	; 0x01
    4740:	80 83       	st	Z, r24
    4742:	67 c0       	rjmp	.+206    	; 0x4812 <main+0x2e44>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    4744:	ce 01       	movw	r24, r28
    4746:	8f 58       	subi	r24, 0x8F	; 143
    4748:	9d 4f       	sbci	r25, 0xFD	; 253
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4750:	fe 01       	movw	r30, r28
    4752:	e7 5d       	subi	r30, 0xD7	; 215
    4754:	fd 4f       	sbci	r31, 0xFD	; 253
    4756:	88 2f       	mov	r24, r24
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	91 83       	std	Z+1, r25	; 0x01
    475c:	80 83       	st	Z, r24
            sub_year(&time);
    475e:	ce 01       	movw	r24, r28
    4760:	8f 58       	subi	r24, 0x8F	; 143
    4762:	9d 4f       	sbci	r25, 0xFD	; 253
    4764:	0e 94 38 03 	call	0x670	; 0x670 <sub_year>
            res = i2c_rtc_write(&time);
    4768:	ce 01       	movw	r24, r28
    476a:	8f 58       	subi	r24, 0x8F	; 143
    476c:	9d 4f       	sbci	r25, 0xFD	; 253
    476e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4772:	fe 01       	movw	r30, r28
    4774:	e7 5d       	subi	r30, 0xD7	; 215
    4776:	fd 4f       	sbci	r31, 0xFD	; 253
    4778:	88 2f       	mov	r24, r24
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	80 83       	st	Z, r24
    4780:	48 c0       	rjmp	.+144    	; 0x4812 <main+0x2e44>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "Y macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    4782:	80 91 b6 00 	lds	r24, 0x00B6
    4786:	28 2f       	mov	r18, r24
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	00 d0       	rcall	.+0      	; 0x478c <main+0x2dbe>
    478c:	00 d0       	rcall	.+0      	; 0x478e <main+0x2dc0>
    478e:	00 d0       	rcall	.+0      	; 0x4790 <main+0x2dc2>
    4790:	ed b7       	in	r30, 0x3d	; 61
    4792:	fe b7       	in	r31, 0x3e	; 62
    4794:	31 96       	adiw	r30, 0x01	; 1
    4796:	ce 01       	movw	r24, r28
    4798:	88 5d       	subi	r24, 0xD8	; 216
    479a:	9c 4f       	sbci	r25, 0xFC	; 252
    479c:	91 83       	std	Z+1, r25	; 0x01
    479e:	80 83       	st	Z, r24
    47a0:	82 e2       	ldi	r24, 0x22	; 34
    47a2:	94 e0       	ldi	r25, 0x04	; 4
    47a4:	93 83       	std	Z+3, r25	; 0x03
    47a6:	82 83       	std	Z+2, r24	; 0x02
    47a8:	35 83       	std	Z+5, r19	; 0x05
    47aa:	24 83       	std	Z+4, r18	; 0x04
    47ac:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    47b0:	2d b7       	in	r18, 0x3d	; 61
    47b2:	3e b7       	in	r19, 0x3e	; 62
    47b4:	2a 5f       	subi	r18, 0xFA	; 250
    47b6:	3f 4f       	sbci	r19, 0xFF	; 255
    47b8:	0f b6       	in	r0, 0x3f	; 63
    47ba:	f8 94       	cli
    47bc:	3e bf       	out	0x3e, r19	; 62
    47be:	0f be       	out	0x3f, r0	; 63
    47c0:	2d bf       	out	0x3d, r18	; 61
            uartPuts(s);
    47c2:	ce 01       	movw	r24, r28
    47c4:	88 5d       	subi	r24, 0xD8	; 216
    47c6:	9c 4f       	sbci	r25, 0xFC	; 252
    47c8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
    47cc:	22 c0       	rjmp	.+68     	; 0x4812 <main+0x2e44>
        }
        break;
      default:
        {
          char s[100];
          sprintf(s, "was soll ich mit '%s' anfangen?\r\n", uart_string);
    47ce:	00 d0       	rcall	.+0      	; 0x47d0 <main+0x2e02>
    47d0:	00 d0       	rcall	.+0      	; 0x47d2 <main+0x2e04>
    47d2:	00 d0       	rcall	.+0      	; 0x47d4 <main+0x2e06>
    47d4:	ed b7       	in	r30, 0x3d	; 61
    47d6:	fe b7       	in	r31, 0x3e	; 62
    47d8:	31 96       	adiw	r30, 0x01	; 1
    47da:	ce 01       	movw	r24, r28
    47dc:	88 5d       	subi	r24, 0xD8	; 216
    47de:	9c 4f       	sbci	r25, 0xFC	; 252
    47e0:	91 83       	std	Z+1, r25	; 0x01
    47e2:	80 83       	st	Z, r24
    47e4:	84 e4       	ldi	r24, 0x44	; 68
    47e6:	94 e0       	ldi	r25, 0x04	; 4
    47e8:	93 83       	std	Z+3, r25	; 0x03
    47ea:	82 83       	std	Z+2, r24	; 0x02
    47ec:	85 eb       	ldi	r24, 0xB5	; 181
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	95 83       	std	Z+5, r25	; 0x05
    47f2:	84 83       	std	Z+4, r24	; 0x04
    47f4:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    47f8:	8d b7       	in	r24, 0x3d	; 61
    47fa:	9e b7       	in	r25, 0x3e	; 62
    47fc:	06 96       	adiw	r24, 0x06	; 6
    47fe:	0f b6       	in	r0, 0x3f	; 63
    4800:	f8 94       	cli
    4802:	9e bf       	out	0x3e, r25	; 62
    4804:	0f be       	out	0x3f, r0	; 63
    4806:	8d bf       	out	0x3d, r24	; 61
          uartPuts(s);
    4808:	ce 01       	movw	r24, r28
    480a:	88 5d       	subi	r24, 0xD8	; 216
    480c:	9c 4f       	sbci	r25, 0xFC	; 252
    480e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>

        }
      }
      int res1 = i2c_rtc_read(&time, 1);
    4812:	ce 01       	movw	r24, r28
    4814:	8f 58       	subi	r24, 0x8F	; 143
    4816:	9d 4f       	sbci	r25, 0xFD	; 253
    4818:	61 e0       	ldi	r22, 0x01	; 1
    481a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    481e:	fe 01       	movw	r30, r28
    4820:	e7 5b       	subi	r30, 0xB7	; 183
    4822:	fd 4f       	sbci	r31, 0xFD	; 253
    4824:	88 2f       	mov	r24, r24
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	91 83       	std	Z+1, r25	; 0x01
    482a:	80 83       	st	Z, r24
      int res2 = i2c_rtc_read(&utctime, 0);
    482c:	ce 01       	movw	r24, r28
    482e:	82 58       	subi	r24, 0x82	; 130
    4830:	9d 4f       	sbci	r25, 0xFD	; 253
    4832:	60 e0       	ldi	r22, 0x00	; 0
    4834:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4838:	fe 01       	movw	r30, r28
    483a:	e9 5b       	subi	r30, 0xB9	; 185
    483c:	fd 4f       	sbci	r31, 0xFD	; 253
    483e:	88 2f       	mov	r24, r24
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	91 83       	std	Z+1, r25	; 0x01
    4844:	80 83       	st	Z, r24
      if (!res1 || !res2)
    4846:	fe 01       	movw	r30, r28
    4848:	e7 5b       	subi	r30, 0xB7	; 183
    484a:	fd 4f       	sbci	r31, 0xFD	; 253
    484c:	80 81       	ld	r24, Z
    484e:	91 81       	ldd	r25, Z+1	; 0x01
    4850:	00 97       	sbiw	r24, 0x00	; 0
    4852:	41 f0       	breq	.+16     	; 0x4864 <main+0x2e96>
    4854:	fe 01       	movw	r30, r28
    4856:	e9 5b       	subi	r30, 0xB9	; 185
    4858:	fd 4f       	sbci	r31, 0xFD	; 253
    485a:	80 81       	ld	r24, Z
    485c:	91 81       	ldd	r25, Z+1	; 0x01
    485e:	00 97       	sbiw	r24, 0x00	; 0
    4860:	09 f0       	breq	.+2      	; 0x4864 <main+0x2e96>
    4862:	1c c1       	rjmp	.+568    	; 0x4a9c <main+0x30ce>
      {
        uartPuts("RTC error\r\n");
    4864:	86 e6       	ldi	r24, 0x66	; 102
    4866:	94 e0       	ldi	r25, 0x04	; 4
    4868:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
        for (uiCount = 0; uiCount < 40; uiCount++)
    486c:	fe 01       	movw	r30, r28
    486e:	e9 59       	subi	r30, 0x99	; 153
    4870:	fd 4f       	sbci	r31, 0xFD	; 253
    4872:	10 82       	st	Z, r1
    4874:	11 82       	std	Z+1, r1	; 0x01
    4876:	12 82       	std	Z+2, r1	; 0x02
    4878:	13 82       	std	Z+3, r1	; 0x03
    487a:	02 c1       	rjmp	.+516    	; 0x4a80 <main+0x30b2>
        {
          SetColor(0x01, 0x01, 0x01, 0x01);
    487c:	81 e0       	ldi	r24, 0x01	; 1
    487e:	61 e0       	ldi	r22, 0x01	; 1
    4880:	41 e0       	ldi	r20, 0x01	; 1
    4882:	21 e0       	ldi	r18, 0x01	; 1
    4884:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	a8 e4       	ldi	r26, 0x48	; 72
    488e:	b2 e4       	ldi	r27, 0x42	; 66
    4890:	8d ab       	std	Y+53, r24	; 0x35
    4892:	9e ab       	std	Y+54, r25	; 0x36
    4894:	af ab       	std	Y+55, r26	; 0x37
    4896:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4898:	6d a9       	ldd	r22, Y+53	; 0x35
    489a:	7e a9       	ldd	r23, Y+54	; 0x36
    489c:	8f a9       	ldd	r24, Y+55	; 0x37
    489e:	98 ad       	ldd	r25, Y+56	; 0x38
    48a0:	20 e0       	ldi	r18, 0x00	; 0
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	4a e7       	ldi	r20, 0x7A	; 122
    48a6:	55 e4       	ldi	r21, 0x45	; 69
    48a8:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    48ac:	dc 01       	movw	r26, r24
    48ae:	cb 01       	movw	r24, r22
    48b0:	89 ab       	std	Y+49, r24	; 0x31
    48b2:	9a ab       	std	Y+50, r25	; 0x32
    48b4:	ab ab       	std	Y+51, r26	; 0x33
    48b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    48b8:	69 a9       	ldd	r22, Y+49	; 0x31
    48ba:	7a a9       	ldd	r23, Y+50	; 0x32
    48bc:	8b a9       	ldd	r24, Y+51	; 0x33
    48be:	9c a9       	ldd	r25, Y+52	; 0x34
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	40 e8       	ldi	r20, 0x80	; 128
    48c6:	5f e3       	ldi	r21, 0x3F	; 63
    48c8:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    48cc:	88 23       	and	r24, r24
    48ce:	2c f4       	brge	.+10     	; 0x48da <main+0x2f0c>
		__ticks = 1;
    48d0:	81 e0       	ldi	r24, 0x01	; 1
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	98 ab       	std	Y+48, r25	; 0x30
    48d6:	8f a7       	std	Y+47, r24	; 0x2f
    48d8:	3f c0       	rjmp	.+126    	; 0x4958 <main+0x2f8a>
	else if (__tmp > 65535)
    48da:	69 a9       	ldd	r22, Y+49	; 0x31
    48dc:	7a a9       	ldd	r23, Y+50	; 0x32
    48de:	8b a9       	ldd	r24, Y+51	; 0x33
    48e0:	9c a9       	ldd	r25, Y+52	; 0x34
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	3f ef       	ldi	r19, 0xFF	; 255
    48e6:	4f e7       	ldi	r20, 0x7F	; 127
    48e8:	57 e4       	ldi	r21, 0x47	; 71
    48ea:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    48ee:	18 16       	cp	r1, r24
    48f0:	4c f5       	brge	.+82     	; 0x4944 <main+0x2f76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48f2:	6d a9       	ldd	r22, Y+53	; 0x35
    48f4:	7e a9       	ldd	r23, Y+54	; 0x36
    48f6:	8f a9       	ldd	r24, Y+55	; 0x37
    48f8:	98 ad       	ldd	r25, Y+56	; 0x38
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	40 e2       	ldi	r20, 0x20	; 32
    4900:	51 e4       	ldi	r21, 0x41	; 65
    4902:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    4906:	dc 01       	movw	r26, r24
    4908:	cb 01       	movw	r24, r22
    490a:	bc 01       	movw	r22, r24
    490c:	cd 01       	movw	r24, r26
    490e:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	98 ab       	std	Y+48, r25	; 0x30
    4918:	8f a7       	std	Y+47, r24	; 0x2f
    491a:	0f c0       	rjmp	.+30     	; 0x493a <main+0x2f6c>
    491c:	80 e9       	ldi	r24, 0x90	; 144
    491e:	91 e0       	ldi	r25, 0x01	; 1
    4920:	9e a7       	std	Y+46, r25	; 0x2e
    4922:	8d a7       	std	Y+45, r24	; 0x2d
    4924:	8d a5       	ldd	r24, Y+45	; 0x2d
    4926:	9e a5       	ldd	r25, Y+46	; 0x2e
    4928:	01 97       	sbiw	r24, 0x01	; 1
    492a:	f1 f7       	brne	.-4      	; 0x4928 <main+0x2f5a>
    492c:	9e a7       	std	Y+46, r25	; 0x2e
    492e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4930:	8f a5       	ldd	r24, Y+47	; 0x2f
    4932:	98 a9       	ldd	r25, Y+48	; 0x30
    4934:	01 97       	sbiw	r24, 0x01	; 1
    4936:	98 ab       	std	Y+48, r25	; 0x30
    4938:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    493a:	8f a5       	ldd	r24, Y+47	; 0x2f
    493c:	98 a9       	ldd	r25, Y+48	; 0x30
    493e:	00 97       	sbiw	r24, 0x00	; 0
    4940:	69 f7       	brne	.-38     	; 0x491c <main+0x2f4e>
    4942:	14 c0       	rjmp	.+40     	; 0x496c <main+0x2f9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4944:	69 a9       	ldd	r22, Y+49	; 0x31
    4946:	7a a9       	ldd	r23, Y+50	; 0x32
    4948:	8b a9       	ldd	r24, Y+51	; 0x33
    494a:	9c a9       	ldd	r25, Y+52	; 0x34
    494c:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	98 ab       	std	Y+48, r25	; 0x30
    4956:	8f a7       	std	Y+47, r24	; 0x2f
    4958:	8f a5       	ldd	r24, Y+47	; 0x2f
    495a:	98 a9       	ldd	r25, Y+48	; 0x30
    495c:	9c a7       	std	Y+44, r25	; 0x2c
    495e:	8b a7       	std	Y+43, r24	; 0x2b
    4960:	8b a5       	ldd	r24, Y+43	; 0x2b
    4962:	9c a5       	ldd	r25, Y+44	; 0x2c
    4964:	01 97       	sbiw	r24, 0x01	; 1
    4966:	f1 f7       	brne	.-4      	; 0x4964 <main+0x2f96>
    4968:	9c a7       	std	Y+44, r25	; 0x2c
    496a:	8b a7       	std	Y+43, r24	; 0x2b
          _delay_ms(50);
          SetColor(0xff, 0xff, 0xff, 0xff);
    496c:	8f ef       	ldi	r24, 0xFF	; 255
    496e:	6f ef       	ldi	r22, 0xFF	; 255
    4970:	4f ef       	ldi	r20, 0xFF	; 255
    4972:	2f ef       	ldi	r18, 0xFF	; 255
    4974:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	a8 e4       	ldi	r26, 0x48	; 72
    497e:	b2 e4       	ldi	r27, 0x42	; 66
    4980:	8f a3       	std	Y+39, r24	; 0x27
    4982:	98 a7       	std	Y+40, r25	; 0x28
    4984:	a9 a7       	std	Y+41, r26	; 0x29
    4986:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4988:	6f a1       	ldd	r22, Y+39	; 0x27
    498a:	78 a5       	ldd	r23, Y+40	; 0x28
    498c:	89 a5       	ldd	r24, Y+41	; 0x29
    498e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4990:	20 e0       	ldi	r18, 0x00	; 0
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	4a e7       	ldi	r20, 0x7A	; 122
    4996:	55 e4       	ldi	r21, 0x45	; 69
    4998:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    499c:	dc 01       	movw	r26, r24
    499e:	cb 01       	movw	r24, r22
    49a0:	8b a3       	std	Y+35, r24	; 0x23
    49a2:	9c a3       	std	Y+36, r25	; 0x24
    49a4:	ad a3       	std	Y+37, r26	; 0x25
    49a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    49a8:	6b a1       	ldd	r22, Y+35	; 0x23
    49aa:	7c a1       	ldd	r23, Y+36	; 0x24
    49ac:	8d a1       	ldd	r24, Y+37	; 0x25
    49ae:	9e a1       	ldd	r25, Y+38	; 0x26
    49b0:	20 e0       	ldi	r18, 0x00	; 0
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	40 e8       	ldi	r20, 0x80	; 128
    49b6:	5f e3       	ldi	r21, 0x3F	; 63
    49b8:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    49bc:	88 23       	and	r24, r24
    49be:	2c f4       	brge	.+10     	; 0x49ca <main+0x2ffc>
		__ticks = 1;
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	9a a3       	std	Y+34, r25	; 0x22
    49c6:	89 a3       	std	Y+33, r24	; 0x21
    49c8:	3f c0       	rjmp	.+126    	; 0x4a48 <main+0x307a>
	else if (__tmp > 65535)
    49ca:	6b a1       	ldd	r22, Y+35	; 0x23
    49cc:	7c a1       	ldd	r23, Y+36	; 0x24
    49ce:	8d a1       	ldd	r24, Y+37	; 0x25
    49d0:	9e a1       	ldd	r25, Y+38	; 0x26
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	3f ef       	ldi	r19, 0xFF	; 255
    49d6:	4f e7       	ldi	r20, 0x7F	; 127
    49d8:	57 e4       	ldi	r21, 0x47	; 71
    49da:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    49de:	18 16       	cp	r1, r24
    49e0:	4c f5       	brge	.+82     	; 0x4a34 <main+0x3066>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e2:	6f a1       	ldd	r22, Y+39	; 0x27
    49e4:	78 a5       	ldd	r23, Y+40	; 0x28
    49e6:	89 a5       	ldd	r24, Y+41	; 0x29
    49e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	40 e2       	ldi	r20, 0x20	; 32
    49f0:	51 e4       	ldi	r21, 0x41	; 65
    49f2:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    49f6:	dc 01       	movw	r26, r24
    49f8:	cb 01       	movw	r24, r22
    49fa:	bc 01       	movw	r22, r24
    49fc:	cd 01       	movw	r24, r26
    49fe:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    4a02:	dc 01       	movw	r26, r24
    4a04:	cb 01       	movw	r24, r22
    4a06:	9a a3       	std	Y+34, r25	; 0x22
    4a08:	89 a3       	std	Y+33, r24	; 0x21
    4a0a:	0f c0       	rjmp	.+30     	; 0x4a2a <main+0x305c>
    4a0c:	80 e9       	ldi	r24, 0x90	; 144
    4a0e:	91 e0       	ldi	r25, 0x01	; 1
    4a10:	98 a3       	std	Y+32, r25	; 0x20
    4a12:	8f 8f       	std	Y+31, r24	; 0x1f
    4a14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a16:	98 a1       	ldd	r25, Y+32	; 0x20
    4a18:	01 97       	sbiw	r24, 0x01	; 1
    4a1a:	f1 f7       	brne	.-4      	; 0x4a18 <main+0x304a>
    4a1c:	98 a3       	std	Y+32, r25	; 0x20
    4a1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a20:	89 a1       	ldd	r24, Y+33	; 0x21
    4a22:	9a a1       	ldd	r25, Y+34	; 0x22
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	9a a3       	std	Y+34, r25	; 0x22
    4a28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a2a:	89 a1       	ldd	r24, Y+33	; 0x21
    4a2c:	9a a1       	ldd	r25, Y+34	; 0x22
    4a2e:	00 97       	sbiw	r24, 0x00	; 0
    4a30:	69 f7       	brne	.-38     	; 0x4a0c <main+0x303e>
    4a32:	14 c0       	rjmp	.+40     	; 0x4a5c <main+0x308e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a34:	6b a1       	ldd	r22, Y+35	; 0x23
    4a36:	7c a1       	ldd	r23, Y+36	; 0x24
    4a38:	8d a1       	ldd	r24, Y+37	; 0x25
    4a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    4a3c:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    4a40:	dc 01       	movw	r26, r24
    4a42:	cb 01       	movw	r24, r22
    4a44:	9a a3       	std	Y+34, r25	; 0x22
    4a46:	89 a3       	std	Y+33, r24	; 0x21
    4a48:	89 a1       	ldd	r24, Y+33	; 0x21
    4a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    4a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    4a4e:	8d 8f       	std	Y+29, r24	; 0x1d
    4a50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a54:	01 97       	sbiw	r24, 0x01	; 1
    4a56:	f1 f7       	brne	.-4      	; 0x4a54 <main+0x3086>
    4a58:	9e 8f       	std	Y+30, r25	; 0x1e
    4a5a:	8d 8f       	std	Y+29, r24	; 0x1d
      int res1 = i2c_rtc_read(&time, 1);
      int res2 = i2c_rtc_read(&utctime, 0);
      if (!res1 || !res2)
      {
        uartPuts("RTC error\r\n");
        for (uiCount = 0; uiCount < 40; uiCount++)
    4a5c:	9e 01       	movw	r18, r28
    4a5e:	29 59       	subi	r18, 0x99	; 153
    4a60:	3d 4f       	sbci	r19, 0xFD	; 253
    4a62:	fe 01       	movw	r30, r28
    4a64:	e9 59       	subi	r30, 0x99	; 153
    4a66:	fd 4f       	sbci	r31, 0xFD	; 253
    4a68:	80 81       	ld	r24, Z
    4a6a:	91 81       	ldd	r25, Z+1	; 0x01
    4a6c:	a2 81       	ldd	r26, Z+2	; 0x02
    4a6e:	b3 81       	ldd	r27, Z+3	; 0x03
    4a70:	01 96       	adiw	r24, 0x01	; 1
    4a72:	a1 1d       	adc	r26, r1
    4a74:	b1 1d       	adc	r27, r1
    4a76:	f9 01       	movw	r30, r18
    4a78:	80 83       	st	Z, r24
    4a7a:	91 83       	std	Z+1, r25	; 0x01
    4a7c:	a2 83       	std	Z+2, r26	; 0x02
    4a7e:	b3 83       	std	Z+3, r27	; 0x03
    4a80:	fe 01       	movw	r30, r28
    4a82:	e9 59       	subi	r30, 0x99	; 153
    4a84:	fd 4f       	sbci	r31, 0xFD	; 253
    4a86:	80 81       	ld	r24, Z
    4a88:	91 81       	ldd	r25, Z+1	; 0x01
    4a8a:	a2 81       	ldd	r26, Z+2	; 0x02
    4a8c:	b3 81       	ldd	r27, Z+3	; 0x03
    4a8e:	88 32       	cpi	r24, 0x28	; 40
    4a90:	91 05       	cpc	r25, r1
    4a92:	a1 05       	cpc	r26, r1
    4a94:	b1 05       	cpc	r27, r1
    4a96:	0c f4       	brge	.+2      	; 0x4a9a <main+0x30cc>
    4a98:	f1 ce       	rjmp	.-542    	; 0x487c <main+0x2eae>
    4a9a:	ff cf       	rjmp	.-2      	; 0x4a9a <main+0x30cc>
          _delay_ms(50);
        }
        while (1)
          ;
      }
      TimeInfo(time);
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	ef 58       	subi	r30, 0x8F	; 143
    4aa0:	fd 4f       	sbci	r31, 0xFD	; 253
    4aa2:	c0 80       	ld	r12, Z
    4aa4:	d1 80       	ldd	r13, Z+1	; 0x01
    4aa6:	e2 80       	ldd	r14, Z+2	; 0x02
    4aa8:	f3 80       	ldd	r15, Z+3	; 0x03
    4aaa:	04 81       	ldd	r16, Z+4	; 0x04
    4aac:	15 81       	ldd	r17, Z+5	; 0x05
    4aae:	26 81       	ldd	r18, Z+6	; 0x06
    4ab0:	37 81       	ldd	r19, Z+7	; 0x07
    4ab2:	40 85       	ldd	r20, Z+8	; 0x08
    4ab4:	51 85       	ldd	r21, Z+9	; 0x09
    4ab6:	62 85       	ldd	r22, Z+10	; 0x0a
    4ab8:	73 85       	ldd	r23, Z+11	; 0x0b
    4aba:	84 85       	ldd	r24, Z+12	; 0x0c
    4abc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TimeInfo>
      uart_str_complete = 0;
    4ac0:	10 92 f2 04 	sts	0x04F2, r1
    }

    if (uiCount % 100)
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	e9 59       	subi	r30, 0x99	; 153
    4ac8:	fd 4f       	sbci	r31, 0xFD	; 253
    4aca:	80 81       	ld	r24, Z
    4acc:	91 81       	ldd	r25, Z+1	; 0x01
    4ace:	a2 81       	ldd	r26, Z+2	; 0x02
    4ad0:	b3 81       	ldd	r27, Z+3	; 0x03
    4ad2:	24 e6       	ldi	r18, 0x64	; 100
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	40 e0       	ldi	r20, 0x00	; 0
    4ad8:	50 e0       	ldi	r21, 0x00	; 0
    4ada:	bc 01       	movw	r22, r24
    4adc:	cd 01       	movw	r24, r26
    4ade:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <__divmodsi4>
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	cb 01       	movw	r24, r22
    4ae6:	00 97       	sbiw	r24, 0x00	; 0
    4ae8:	a1 05       	cpc	r26, r1
    4aea:	b1 05       	cpc	r27, r1
    4aec:	11 f0       	breq	.+4      	; 0x4af2 <main+0x3124>
    4aee:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <main+0x1478>
      continue;
    }

    // ca. alle 100ms

    if (!(PINA & _BV(PA7)))
    4af2:	e9 e3       	ldi	r30, 0x39	; 57
    4af4:	f0 e0       	ldi	r31, 0x00	; 0
    4af6:	80 81       	ld	r24, Z
    4af8:	88 23       	and	r24, r24
    4afa:	6c f0       	brlt	.+26     	; 0x4b16 <main+0x3148>
    {
      Button1++;
    4afc:	de 01       	movw	r26, r28
    4afe:	ab 59       	subi	r26, 0x9B	; 155
    4b00:	bd 4f       	sbci	r27, 0xFD	; 253
    4b02:	fe 01       	movw	r30, r28
    4b04:	eb 59       	subi	r30, 0x9B	; 155
    4b06:	fd 4f       	sbci	r31, 0xFD	; 253
    4b08:	80 81       	ld	r24, Z
    4b0a:	91 81       	ldd	r25, Z+1	; 0x01
    4b0c:	01 96       	adiw	r24, 0x01	; 1
    4b0e:	11 96       	adiw	r26, 0x01	; 1
    4b10:	9c 93       	st	X, r25
    4b12:	8e 93       	st	-X, r24
    4b14:	05 c0       	rjmp	.+10     	; 0x4b20 <main+0x3152>
    }
    else
    {
      Button1 = 0;
    4b16:	fe 01       	movw	r30, r28
    4b18:	eb 59       	subi	r30, 0x9B	; 155
    4b1a:	fd 4f       	sbci	r31, 0xFD	; 253
    4b1c:	11 82       	std	Z+1, r1	; 0x01
    4b1e:	10 82       	st	Z, r1
    }

    if (!(PINA & _BV(PA6)))
    4b20:	e9 e3       	ldi	r30, 0x39	; 57
    4b22:	f0 e0       	ldi	r31, 0x00	; 0
    4b24:	80 81       	ld	r24, Z
    4b26:	88 2f       	mov	r24, r24
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	80 74       	andi	r24, 0x40	; 64
    4b2c:	90 70       	andi	r25, 0x00	; 0
    4b2e:	00 97       	sbiw	r24, 0x00	; 0
    4b30:	69 f4       	brne	.+26     	; 0x4b4c <main+0x317e>
    {
      Button2++;
    4b32:	de 01       	movw	r26, r28
    4b34:	ad 59       	subi	r26, 0x9D	; 157
    4b36:	bd 4f       	sbci	r27, 0xFD	; 253
    4b38:	fe 01       	movw	r30, r28
    4b3a:	ed 59       	subi	r30, 0x9D	; 157
    4b3c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b3e:	80 81       	ld	r24, Z
    4b40:	91 81       	ldd	r25, Z+1	; 0x01
    4b42:	01 96       	adiw	r24, 0x01	; 1
    4b44:	11 96       	adiw	r26, 0x01	; 1
    4b46:	9c 93       	st	X, r25
    4b48:	8e 93       	st	-X, r24
    4b4a:	05 c0       	rjmp	.+10     	; 0x4b56 <main+0x3188>
    }
    else
    {
      Button2 = 0;
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	ed 59       	subi	r30, 0x9D	; 157
    4b50:	fd 4f       	sbci	r31, 0xFD	; 253
    4b52:	11 82       	std	Z+1, r1	; 0x01
    4b54:	10 82       	st	Z, r1
    }

    if (!(PINA & _BV(PA6)))
    4b56:	e9 e3       	ldi	r30, 0x39	; 57
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 81       	ld	r24, Z
    4b5c:	88 2f       	mov	r24, r24
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	80 74       	andi	r24, 0x40	; 64
    4b62:	90 70       	andi	r25, 0x00	; 0
    4b64:	00 97       	sbiw	r24, 0x00	; 0
    4b66:	69 f4       	brne	.+26     	; 0x4b82 <main+0x31b4>
    {
      Button3++;
    4b68:	de 01       	movw	r26, r28
    4b6a:	af 59       	subi	r26, 0x9F	; 159
    4b6c:	bd 4f       	sbci	r27, 0xFD	; 253
    4b6e:	fe 01       	movw	r30, r28
    4b70:	ef 59       	subi	r30, 0x9F	; 159
    4b72:	fd 4f       	sbci	r31, 0xFD	; 253
    4b74:	80 81       	ld	r24, Z
    4b76:	91 81       	ldd	r25, Z+1	; 0x01
    4b78:	01 96       	adiw	r24, 0x01	; 1
    4b7a:	11 96       	adiw	r26, 0x01	; 1
    4b7c:	9c 93       	st	X, r25
    4b7e:	8e 93       	st	-X, r24
    4b80:	05 c0       	rjmp	.+10     	; 0x4b8c <main+0x31be>
    }
    else
    {
      Button3 = 0;
    4b82:	fe 01       	movw	r30, r28
    4b84:	ef 59       	subi	r30, 0x9F	; 159
    4b86:	fd 4f       	sbci	r31, 0xFD	; 253
    4b88:	11 82       	std	Z+1, r1	; 0x01
    4b8a:	10 82       	st	Z, r1
    }

    if (Button1 > 1)
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	eb 59       	subi	r30, 0x9B	; 155
    4b90:	fd 4f       	sbci	r31, 0xFD	; 253
    4b92:	80 81       	ld	r24, Z
    4b94:	91 81       	ldd	r25, Z+1	; 0x01
    4b96:	82 30       	cpi	r24, 0x02	; 2
    4b98:	91 05       	cpc	r25, r1
    4b9a:	08 f4       	brcc	.+2      	; 0x4b9e <main+0x31d0>
    4b9c:	7b c0       	rjmp	.+246    	; 0x4c94 <main+0x32c6>
    {
      if (((Button1 + 10) % 12) == 0 || Button1 > 36)
    4b9e:	fe 01       	movw	r30, r28
    4ba0:	eb 59       	subi	r30, 0x9B	; 155
    4ba2:	fd 4f       	sbci	r31, 0xFD	; 253
    4ba4:	80 81       	ld	r24, Z
    4ba6:	91 81       	ldd	r25, Z+1	; 0x01
    4ba8:	0a 96       	adiw	r24, 0x0a	; 10
    4baa:	2c e0       	ldi	r18, 0x0C	; 12
    4bac:	30 e0       	ldi	r19, 0x00	; 0
    4bae:	b9 01       	movw	r22, r18
    4bb0:	0e 94 54 38 	call	0x70a8	; 0x70a8 <__udivmodhi4>
    4bb4:	00 97       	sbiw	r24, 0x00	; 0
    4bb6:	49 f0       	breq	.+18     	; 0x4bca <main+0x31fc>
    4bb8:	fe 01       	movw	r30, r28
    4bba:	eb 59       	subi	r30, 0x9B	; 155
    4bbc:	fd 4f       	sbci	r31, 0xFD	; 253
    4bbe:	80 81       	ld	r24, Z
    4bc0:	91 81       	ldd	r25, Z+1	; 0x01
    4bc2:	85 32       	cpi	r24, 0x25	; 37
    4bc4:	91 05       	cpc	r25, r1
    4bc6:	08 f4       	brcc	.+2      	; 0x4bca <main+0x31fc>
    4bc8:	65 c0       	rjmp	.+202    	; 0x4c94 <main+0x32c6>
      {
        uartPuts("Hour++\r\n");
    4bca:	82 e7       	ldi	r24, 0x72	; 114
    4bcc:	94 e0       	ldi	r25, 0x04	; 4
    4bce:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
        int res = i2c_rtc_read(&time, 0);
    4bd2:	ce 01       	movw	r24, r28
    4bd4:	8f 58       	subi	r24, 0x8F	; 143
    4bd6:	9d 4f       	sbci	r25, 0xFD	; 253
    4bd8:	60 e0       	ldi	r22, 0x00	; 0
    4bda:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4bde:	fe 01       	movw	r30, r28
    4be0:	e9 5d       	subi	r30, 0xD9	; 217
    4be2:	fd 4f       	sbci	r31, 0xFD	; 253
    4be4:	88 2f       	mov	r24, r24
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	91 83       	std	Z+1, r25	; 0x01
    4bea:	80 83       	st	Z, r24
        if (!res)
    4bec:	fe 01       	movw	r30, r28
    4bee:	e9 5d       	subi	r30, 0xD9	; 217
    4bf0:	fd 4f       	sbci	r31, 0xFD	; 253
    4bf2:	80 81       	ld	r24, Z
    4bf4:	91 81       	ldd	r25, Z+1	; 0x01
    4bf6:	00 97       	sbiw	r24, 0x00	; 0
    4bf8:	09 f4       	brne	.+2      	; 0x4bfc <main+0x322e>
    4bfa:	ff cf       	rjmp	.-2      	; 0x4bfa <main+0x322c>
        {
          while (1)
            ;
        }
        add_hour(&time);
    4bfc:	ce 01       	movw	r24, r28
    4bfe:	8f 58       	subi	r24, 0x8F	; 143
    4c00:	9d 4f       	sbci	r25, 0xFD	; 253
    4c02:	0e 94 65 04 	call	0x8ca	; 0x8ca <add_hour>
        res = i2c_rtc_write(&time);
    4c06:	ce 01       	movw	r24, r28
    4c08:	8f 58       	subi	r24, 0x8F	; 143
    4c0a:	9d 4f       	sbci	r25, 0xFD	; 253
    4c0c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
    4c10:	fe 01       	movw	r30, r28
    4c12:	e9 5d       	subi	r30, 0xD9	; 217
    4c14:	fd 4f       	sbci	r31, 0xFD	; 253
    4c16:	88 2f       	mov	r24, r24
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	91 83       	std	Z+1, r25	; 0x01
    4c1c:	80 83       	st	Z, r24
        char s[100];
        sprintf(s, "time : %02d:%02d:%02d\r\n", time.hh, time.mm, time.ss);
    4c1e:	fe 01       	movw	r30, r28
    4c20:	ef 58       	subi	r30, 0x8F	; 143
    4c22:	fd 4f       	sbci	r31, 0xFD	; 253
    4c24:	83 81       	ldd	r24, Z+3	; 0x03
    4c26:	48 2f       	mov	r20, r24
    4c28:	50 e0       	ldi	r21, 0x00	; 0
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	ef 58       	subi	r30, 0x8F	; 143
    4c2e:	fd 4f       	sbci	r31, 0xFD	; 253
    4c30:	84 81       	ldd	r24, Z+4	; 0x04
    4c32:	68 2f       	mov	r22, r24
    4c34:	70 e0       	ldi	r23, 0x00	; 0
    4c36:	fe 01       	movw	r30, r28
    4c38:	ef 58       	subi	r30, 0x8F	; 143
    4c3a:	fd 4f       	sbci	r31, 0xFD	; 253
    4c3c:	85 81       	ldd	r24, Z+5	; 0x05
    4c3e:	28 2f       	mov	r18, r24
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	8d b7       	in	r24, 0x3d	; 61
    4c44:	9e b7       	in	r25, 0x3e	; 62
    4c46:	0a 97       	sbiw	r24, 0x0a	; 10
    4c48:	0f b6       	in	r0, 0x3f	; 63
    4c4a:	f8 94       	cli
    4c4c:	9e bf       	out	0x3e, r25	; 62
    4c4e:	0f be       	out	0x3f, r0	; 63
    4c50:	8d bf       	out	0x3d, r24	; 61
    4c52:	ed b7       	in	r30, 0x3d	; 61
    4c54:	fe b7       	in	r31, 0x3e	; 62
    4c56:	31 96       	adiw	r30, 0x01	; 1
    4c58:	ce 01       	movw	r24, r28
    4c5a:	88 5d       	subi	r24, 0xD8	; 216
    4c5c:	9c 4f       	sbci	r25, 0xFC	; 252
    4c5e:	91 83       	std	Z+1, r25	; 0x01
    4c60:	80 83       	st	Z, r24
    4c62:	8b e7       	ldi	r24, 0x7B	; 123
    4c64:	94 e0       	ldi	r25, 0x04	; 4
    4c66:	93 83       	std	Z+3, r25	; 0x03
    4c68:	82 83       	std	Z+2, r24	; 0x02
    4c6a:	55 83       	std	Z+5, r21	; 0x05
    4c6c:	44 83       	std	Z+4, r20	; 0x04
    4c6e:	77 83       	std	Z+7, r23	; 0x07
    4c70:	66 83       	std	Z+6, r22	; 0x06
    4c72:	31 87       	std	Z+9, r19	; 0x09
    4c74:	20 87       	std	Z+8, r18	; 0x08
    4c76:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    4c7a:	ed b7       	in	r30, 0x3d	; 61
    4c7c:	fe b7       	in	r31, 0x3e	; 62
    4c7e:	3a 96       	adiw	r30, 0x0a	; 10
    4c80:	0f b6       	in	r0, 0x3f	; 63
    4c82:	f8 94       	cli
    4c84:	fe bf       	out	0x3e, r31	; 62
    4c86:	0f be       	out	0x3f, r0	; 63
    4c88:	ed bf       	out	0x3d, r30	; 61
        uartPuts(s);
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	88 5d       	subi	r24, 0xD8	; 216
    4c8e:	9c 4f       	sbci	r25, 0xFC	; 252
    4c90:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
      }
    }

    if (Button2 > 1)
    4c94:	fe 01       	movw	r30, r28
    4c96:	ed 59       	subi	r30, 0x9D	; 157
    4c98:	fd 4f       	sbci	r31, 0xFD	; 253
    4c9a:	80 81       	ld	r24, Z
    4c9c:	91 81       	ldd	r25, Z+1	; 0x01
    4c9e:	82 30       	cpi	r24, 0x02	; 2
    4ca0:	91 05       	cpc	r25, r1
    4ca2:	08 f4       	brcc	.+2      	; 0x4ca6 <main+0x32d8>
    4ca4:	74 c0       	rjmp	.+232    	; 0x4d8e <main+0x33c0>
    {
      if (((Button2 + 10) % 12) == 0 || Button2 > 36)
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	ed 59       	subi	r30, 0x9D	; 157
    4caa:	fd 4f       	sbci	r31, 0xFD	; 253
    4cac:	80 81       	ld	r24, Z
    4cae:	91 81       	ldd	r25, Z+1	; 0x01
    4cb0:	0a 96       	adiw	r24, 0x0a	; 10
    4cb2:	2c e0       	ldi	r18, 0x0C	; 12
    4cb4:	30 e0       	ldi	r19, 0x00	; 0
    4cb6:	b9 01       	movw	r22, r18
    4cb8:	0e 94 54 38 	call	0x70a8	; 0x70a8 <__udivmodhi4>
    4cbc:	00 97       	sbiw	r24, 0x00	; 0
    4cbe:	49 f0       	breq	.+18     	; 0x4cd2 <main+0x3304>
    4cc0:	fe 01       	movw	r30, r28
    4cc2:	ed 59       	subi	r30, 0x9D	; 157
    4cc4:	fd 4f       	sbci	r31, 0xFD	; 253
    4cc6:	80 81       	ld	r24, Z
    4cc8:	91 81       	ldd	r25, Z+1	; 0x01
    4cca:	85 32       	cpi	r24, 0x25	; 37
    4ccc:	91 05       	cpc	r25, r1
    4cce:	08 f4       	brcc	.+2      	; 0x4cd2 <main+0x3304>
    4cd0:	5e c0       	rjmp	.+188    	; 0x4d8e <main+0x33c0>
      {
        uartPuts("Min++\r\n");
    4cd2:	83 e9       	ldi	r24, 0x93	; 147
    4cd4:	94 e0       	ldi	r25, 0x04	; 4
    4cd6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
        int res = i2c_rtc_read(&time, 0);
    4cda:	ce 01       	movw	r24, r28
    4cdc:	8f 58       	subi	r24, 0x8F	; 143
    4cde:	9d 4f       	sbci	r25, 0xFD	; 253
    4ce0:	60 e0       	ldi	r22, 0x00	; 0
    4ce2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	eb 5d       	subi	r30, 0xDB	; 219
    4cea:	fd 4f       	sbci	r31, 0xFD	; 253
    4cec:	88 2f       	mov	r24, r24
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	91 83       	std	Z+1, r25	; 0x01
    4cf2:	80 83       	st	Z, r24
        if (!res)
    4cf4:	fe 01       	movw	r30, r28
    4cf6:	eb 5d       	subi	r30, 0xDB	; 219
    4cf8:	fd 4f       	sbci	r31, 0xFD	; 253
    4cfa:	80 81       	ld	r24, Z
    4cfc:	91 81       	ldd	r25, Z+1	; 0x01
    4cfe:	00 97       	sbiw	r24, 0x00	; 0
    4d00:	09 f4       	brne	.+2      	; 0x4d04 <main+0x3336>
    4d02:	ff cf       	rjmp	.-2      	; 0x4d02 <main+0x3334>
        {
          while (1)
            ;
        }
        add_minute(&time);
    4d04:	ce 01       	movw	r24, r28
    4d06:	8f 58       	subi	r24, 0x8F	; 143
    4d08:	9d 4f       	sbci	r25, 0xFD	; 253
    4d0a:	0e 94 a5 04 	call	0x94a	; 0x94a <add_minute>
        i2c_rtc_write(&time);
    4d0e:	ce 01       	movw	r24, r28
    4d10:	8f 58       	subi	r24, 0x8F	; 143
    4d12:	9d 4f       	sbci	r25, 0xFD	; 253
    4d14:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_rtc_write>
        char s[100];
        sprintf(s, "time : %02d:%02d:%02d\r\n", time.hh, time.mm, time.ss);
    4d18:	fe 01       	movw	r30, r28
    4d1a:	ef 58       	subi	r30, 0x8F	; 143
    4d1c:	fd 4f       	sbci	r31, 0xFD	; 253
    4d1e:	83 81       	ldd	r24, Z+3	; 0x03
    4d20:	48 2f       	mov	r20, r24
    4d22:	50 e0       	ldi	r21, 0x00	; 0
    4d24:	fe 01       	movw	r30, r28
    4d26:	ef 58       	subi	r30, 0x8F	; 143
    4d28:	fd 4f       	sbci	r31, 0xFD	; 253
    4d2a:	84 81       	ldd	r24, Z+4	; 0x04
    4d2c:	68 2f       	mov	r22, r24
    4d2e:	70 e0       	ldi	r23, 0x00	; 0
    4d30:	fe 01       	movw	r30, r28
    4d32:	ef 58       	subi	r30, 0x8F	; 143
    4d34:	fd 4f       	sbci	r31, 0xFD	; 253
    4d36:	85 81       	ldd	r24, Z+5	; 0x05
    4d38:	28 2f       	mov	r18, r24
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	8d b7       	in	r24, 0x3d	; 61
    4d3e:	9e b7       	in	r25, 0x3e	; 62
    4d40:	0a 97       	sbiw	r24, 0x0a	; 10
    4d42:	0f b6       	in	r0, 0x3f	; 63
    4d44:	f8 94       	cli
    4d46:	9e bf       	out	0x3e, r25	; 62
    4d48:	0f be       	out	0x3f, r0	; 63
    4d4a:	8d bf       	out	0x3d, r24	; 61
    4d4c:	ed b7       	in	r30, 0x3d	; 61
    4d4e:	fe b7       	in	r31, 0x3e	; 62
    4d50:	31 96       	adiw	r30, 0x01	; 1
    4d52:	ce 01       	movw	r24, r28
    4d54:	88 5d       	subi	r24, 0xD8	; 216
    4d56:	9c 4f       	sbci	r25, 0xFC	; 252
    4d58:	91 83       	std	Z+1, r25	; 0x01
    4d5a:	80 83       	st	Z, r24
    4d5c:	8b e7       	ldi	r24, 0x7B	; 123
    4d5e:	94 e0       	ldi	r25, 0x04	; 4
    4d60:	93 83       	std	Z+3, r25	; 0x03
    4d62:	82 83       	std	Z+2, r24	; 0x02
    4d64:	55 83       	std	Z+5, r21	; 0x05
    4d66:	44 83       	std	Z+4, r20	; 0x04
    4d68:	77 83       	std	Z+7, r23	; 0x07
    4d6a:	66 83       	std	Z+6, r22	; 0x06
    4d6c:	31 87       	std	Z+9, r19	; 0x09
    4d6e:	20 87       	std	Z+8, r18	; 0x08
    4d70:	0e 94 ef 38 	call	0x71de	; 0x71de <sprintf>
    4d74:	ed b7       	in	r30, 0x3d	; 61
    4d76:	fe b7       	in	r31, 0x3e	; 62
    4d78:	3a 96       	adiw	r30, 0x0a	; 10
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	f8 94       	cli
    4d7e:	fe bf       	out	0x3e, r31	; 62
    4d80:	0f be       	out	0x3f, r0	; 63
    4d82:	ed bf       	out	0x3d, r30	; 61
        uartPuts(s);
    4d84:	ce 01       	movw	r24, r28
    4d86:	88 5d       	subi	r24, 0xD8	; 216
    4d88:	9c 4f       	sbci	r25, 0xFC	; 252
    4d8a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
      }
    }

    if (uiScrollingBit)
    4d8e:	fe 01       	movw	r30, r28
    4d90:	e5 59       	subi	r30, 0x95	; 149
    4d92:	fd 4f       	sbci	r31, 0xFD	; 253
    4d94:	80 81       	ld	r24, Z
    4d96:	91 81       	ldd	r25, Z+1	; 0x01
    4d98:	a2 81       	ldd	r26, Z+2	; 0x02
    4d9a:	b3 81       	ldd	r27, Z+3	; 0x03
    4d9c:	00 97       	sbiw	r24, 0x00	; 0
    4d9e:	a1 05       	cpc	r26, r1
    4da0:	b1 05       	cpc	r27, r1
    4da2:	a1 f1       	breq	.+104    	; 0x4e0c <main+0x343e>
    {
      uiScrollingBit >>= 1;
    4da4:	9e 01       	movw	r18, r28
    4da6:	25 59       	subi	r18, 0x95	; 149
    4da8:	3d 4f       	sbci	r19, 0xFD	; 253
    4daa:	fe 01       	movw	r30, r28
    4dac:	e5 59       	subi	r30, 0x95	; 149
    4dae:	fd 4f       	sbci	r31, 0xFD	; 253
    4db0:	80 81       	ld	r24, Z
    4db2:	91 81       	ldd	r25, Z+1	; 0x01
    4db4:	a2 81       	ldd	r26, Z+2	; 0x02
    4db6:	b3 81       	ldd	r27, Z+3	; 0x03
    4db8:	b6 95       	lsr	r27
    4dba:	a7 95       	ror	r26
    4dbc:	97 95       	ror	r25
    4dbe:	87 95       	ror	r24
    4dc0:	f9 01       	movw	r30, r18
    4dc2:	80 83       	st	Z, r24
    4dc4:	91 83       	std	Z+1, r25	; 0x01
    4dc6:	a2 83       	std	Z+2, r26	; 0x02
    4dc8:	b3 83       	std	Z+3, r27	; 0x03
      if (!uiScrollingBit)
    4dca:	fe 01       	movw	r30, r28
    4dcc:	e5 59       	subi	r30, 0x95	; 149
    4dce:	fd 4f       	sbci	r31, 0xFD	; 253
    4dd0:	80 81       	ld	r24, Z
    4dd2:	91 81       	ldd	r25, Z+1	; 0x01
    4dd4:	a2 81       	ldd	r26, Z+2	; 0x02
    4dd6:	b3 81       	ldd	r27, Z+3	; 0x03
    4dd8:	00 97       	sbiw	r24, 0x00	; 0
    4dda:	a1 05       	cpc	r26, r1
    4ddc:	b1 05       	cpc	r27, r1
    4dde:	59 f4       	brne	.+22     	; 0x4df6 <main+0x3428>
      {
        uiScrollingBit = 0x80000000;
    4de0:	fe 01       	movw	r30, r28
    4de2:	e5 59       	subi	r30, 0x95	; 149
    4de4:	fd 4f       	sbci	r31, 0xFD	; 253
    4de6:	80 e0       	ldi	r24, 0x00	; 0
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	a0 e0       	ldi	r26, 0x00	; 0
    4dec:	b0 e8       	ldi	r27, 0x80	; 128
    4dee:	80 83       	st	Z, r24
    4df0:	91 83       	std	Z+1, r25	; 0x01
    4df2:	a2 83       	std	Z+2, r26	; 0x02
    4df4:	b3 83       	std	Z+3, r27	; 0x03
      }
      shift32_output(uiScrollingBit);
    4df6:	fe 01       	movw	r30, r28
    4df8:	e5 59       	subi	r30, 0x95	; 149
    4dfa:	fd 4f       	sbci	r31, 0xFD	; 253
    4dfc:	80 81       	ld	r24, Z
    4dfe:	91 81       	ldd	r25, Z+1	; 0x01
    4e00:	a2 81       	ldd	r26, Z+2	; 0x02
    4e02:	b3 81       	ldd	r27, Z+3	; 0x03
    4e04:	bc 01       	movw	r22, r24
    4e06:	cd 01       	movw	r24, r26
    4e08:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
    }

    if (uiCount % 1000)
    4e0c:	fe 01       	movw	r30, r28
    4e0e:	e9 59       	subi	r30, 0x99	; 153
    4e10:	fd 4f       	sbci	r31, 0xFD	; 253
    4e12:	80 81       	ld	r24, Z
    4e14:	91 81       	ldd	r25, Z+1	; 0x01
    4e16:	a2 81       	ldd	r26, Z+2	; 0x02
    4e18:	b3 81       	ldd	r27, Z+3	; 0x03
    4e1a:	28 ee       	ldi	r18, 0xE8	; 232
    4e1c:	33 e0       	ldi	r19, 0x03	; 3
    4e1e:	40 e0       	ldi	r20, 0x00	; 0
    4e20:	50 e0       	ldi	r21, 0x00	; 0
    4e22:	bc 01       	movw	r22, r24
    4e24:	cd 01       	movw	r24, r26
    4e26:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <__divmodsi4>
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	cb 01       	movw	r24, r22
    4e2e:	00 97       	sbiw	r24, 0x00	; 0
    4e30:	a1 05       	cpc	r26, r1
    4e32:	b1 05       	cpc	r27, r1
    4e34:	11 f0       	breq	.+4      	; 0x4e3a <main+0x346c>
    4e36:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <main+0x1478>
      continue;
    }

    // ca. alle 1s

    int res1 = i2c_rtc_read(&time, 1);
    4e3a:	ce 01       	movw	r24, r28
    4e3c:	8f 58       	subi	r24, 0x8F	; 143
    4e3e:	9d 4f       	sbci	r25, 0xFD	; 253
    4e40:	61 e0       	ldi	r22, 0x01	; 1
    4e42:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4e46:	fe 01       	movw	r30, r28
    4e48:	ee 5a       	subi	r30, 0xAE	; 174
    4e4a:	fd 4f       	sbci	r31, 0xFD	; 253
    4e4c:	88 2f       	mov	r24, r24
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	91 83       	std	Z+1, r25	; 0x01
    4e52:	80 83       	st	Z, r24
    int res2 = i2c_rtc_read(&utctime, 0);
    4e54:	ce 01       	movw	r24, r28
    4e56:	82 58       	subi	r24, 0x82	; 130
    4e58:	9d 4f       	sbci	r25, 0xFD	; 253
    4e5a:	60 e0       	ldi	r22, 0x00	; 0
    4e5c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_rtc_read>
    4e60:	fe 01       	movw	r30, r28
    4e62:	e0 5b       	subi	r30, 0xB0	; 176
    4e64:	fd 4f       	sbci	r31, 0xFD	; 253
    4e66:	88 2f       	mov	r24, r24
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	91 83       	std	Z+1, r25	; 0x01
    4e6c:	80 83       	st	Z, r24
    SetColor(uiBright, uiR, uiG, uiB);
    4e6e:	fe 01       	movw	r30, r28
    4e70:	ee 50       	subi	r30, 0x0E	; 14
    4e72:	fd 4f       	sbci	r31, 0xFD	; 253
    4e74:	20 81       	ld	r18, Z
    4e76:	fe 01       	movw	r30, r28
    4e78:	ed 50       	subi	r30, 0x0D	; 13
    4e7a:	fd 4f       	sbci	r31, 0xFD	; 253
    4e7c:	30 81       	ld	r19, Z
    4e7e:	fe 01       	movw	r30, r28
    4e80:	ec 50       	subi	r30, 0x0C	; 12
    4e82:	fd 4f       	sbci	r31, 0xFD	; 253
    4e84:	90 81       	ld	r25, Z
    4e86:	fe 01       	movw	r30, r28
    4e88:	ec 5a       	subi	r30, 0xAC	; 172
    4e8a:	fd 4f       	sbci	r31, 0xFD	; 253
    4e8c:	80 81       	ld	r24, Z
    4e8e:	62 2f       	mov	r22, r18
    4e90:	43 2f       	mov	r20, r19
    4e92:	29 2f       	mov	r18, r25
    4e94:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
    if (!res1 || !res2)
    4e98:	fe 01       	movw	r30, r28
    4e9a:	ee 5a       	subi	r30, 0xAE	; 174
    4e9c:	fd 4f       	sbci	r31, 0xFD	; 253
    4e9e:	80 81       	ld	r24, Z
    4ea0:	91 81       	ldd	r25, Z+1	; 0x01
    4ea2:	00 97       	sbiw	r24, 0x00	; 0
    4ea4:	41 f0       	breq	.+16     	; 0x4eb6 <main+0x34e8>
    4ea6:	fe 01       	movw	r30, r28
    4ea8:	e0 5b       	subi	r30, 0xB0	; 176
    4eaa:	fd 4f       	sbci	r31, 0xFD	; 253
    4eac:	80 81       	ld	r24, Z
    4eae:	91 81       	ldd	r25, Z+1	; 0x01
    4eb0:	00 97       	sbiw	r24, 0x00	; 0
    4eb2:	09 f0       	breq	.+2      	; 0x4eb6 <main+0x34e8>
    4eb4:	1c c1       	rjmp	.+568    	; 0x50ee <main+0x3720>
    {
      uartPuts("RTC error\r\n");
    4eb6:	86 e6       	ldi	r24, 0x66	; 102
    4eb8:	94 e0       	ldi	r25, 0x04	; 4
    4eba:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uartPuts>
      for (uiCount = 0; uiCount < 40; uiCount++)
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	e9 59       	subi	r30, 0x99	; 153
    4ec2:	fd 4f       	sbci	r31, 0xFD	; 253
    4ec4:	10 82       	st	Z, r1
    4ec6:	11 82       	std	Z+1, r1	; 0x01
    4ec8:	12 82       	std	Z+2, r1	; 0x02
    4eca:	13 82       	std	Z+3, r1	; 0x03
    4ecc:	02 c1       	rjmp	.+516    	; 0x50d2 <main+0x3704>
      {
        SetColor(0x01, 0x01, 0x01, 0x01);
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	61 e0       	ldi	r22, 0x01	; 1
    4ed2:	41 e0       	ldi	r20, 0x01	; 1
    4ed4:	21 e0       	ldi	r18, 0x01	; 1
    4ed6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	a8 e4       	ldi	r26, 0x48	; 72
    4ee0:	b2 e4       	ldi	r27, 0x42	; 66
    4ee2:	89 8f       	std	Y+25, r24	; 0x19
    4ee4:	9a 8f       	std	Y+26, r25	; 0x1a
    4ee6:	ab 8f       	std	Y+27, r26	; 0x1b
    4ee8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eea:	69 8d       	ldd	r22, Y+25	; 0x19
    4eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	4a e7       	ldi	r20, 0x7A	; 122
    4ef8:	55 e4       	ldi	r21, 0x45	; 69
    4efa:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	8d 8b       	std	Y+21, r24	; 0x15
    4f04:	9e 8b       	std	Y+22, r25	; 0x16
    4f06:	af 8b       	std	Y+23, r26	; 0x17
    4f08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f10:	98 8d       	ldd	r25, Y+24	; 0x18
    4f12:	20 e0       	ldi	r18, 0x00	; 0
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	40 e8       	ldi	r20, 0x80	; 128
    4f18:	5f e3       	ldi	r21, 0x3F	; 63
    4f1a:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    4f1e:	88 23       	and	r24, r24
    4f20:	2c f4       	brge	.+10     	; 0x4f2c <main+0x355e>
		__ticks = 1;
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	9c 8b       	std	Y+20, r25	; 0x14
    4f28:	8b 8b       	std	Y+19, r24	; 0x13
    4f2a:	3f c0       	rjmp	.+126    	; 0x4faa <main+0x35dc>
	else if (__tmp > 65535)
    4f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    4f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    4f30:	8f 89       	ldd	r24, Y+23	; 0x17
    4f32:	98 8d       	ldd	r25, Y+24	; 0x18
    4f34:	20 e0       	ldi	r18, 0x00	; 0
    4f36:	3f ef       	ldi	r19, 0xFF	; 255
    4f38:	4f e7       	ldi	r20, 0x7F	; 127
    4f3a:	57 e4       	ldi	r21, 0x47	; 71
    4f3c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    4f40:	18 16       	cp	r1, r24
    4f42:	4c f5       	brge	.+82     	; 0x4f96 <main+0x35c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f44:	69 8d       	ldd	r22, Y+25	; 0x19
    4f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 e2       	ldi	r20, 0x20	; 32
    4f52:	51 e4       	ldi	r21, 0x41	; 65
    4f54:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    4f58:	dc 01       	movw	r26, r24
    4f5a:	cb 01       	movw	r24, r22
    4f5c:	bc 01       	movw	r22, r24
    4f5e:	cd 01       	movw	r24, r26
    4f60:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    4f64:	dc 01       	movw	r26, r24
    4f66:	cb 01       	movw	r24, r22
    4f68:	9c 8b       	std	Y+20, r25	; 0x14
    4f6a:	8b 8b       	std	Y+19, r24	; 0x13
    4f6c:	0f c0       	rjmp	.+30     	; 0x4f8c <main+0x35be>
    4f6e:	80 e9       	ldi	r24, 0x90	; 144
    4f70:	91 e0       	ldi	r25, 0x01	; 1
    4f72:	9a 8b       	std	Y+18, r25	; 0x12
    4f74:	89 8b       	std	Y+17, r24	; 0x11
    4f76:	89 89       	ldd	r24, Y+17	; 0x11
    4f78:	9a 89       	ldd	r25, Y+18	; 0x12
    4f7a:	01 97       	sbiw	r24, 0x01	; 1
    4f7c:	f1 f7       	brne	.-4      	; 0x4f7a <main+0x35ac>
    4f7e:	9a 8b       	std	Y+18, r25	; 0x12
    4f80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f82:	8b 89       	ldd	r24, Y+19	; 0x13
    4f84:	9c 89       	ldd	r25, Y+20	; 0x14
    4f86:	01 97       	sbiw	r24, 0x01	; 1
    4f88:	9c 8b       	std	Y+20, r25	; 0x14
    4f8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f90:	00 97       	sbiw	r24, 0x00	; 0
    4f92:	69 f7       	brne	.-38     	; 0x4f6e <main+0x35a0>
    4f94:	14 c0       	rjmp	.+40     	; 0x4fbe <main+0x35f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f96:	6d 89       	ldd	r22, Y+21	; 0x15
    4f98:	7e 89       	ldd	r23, Y+22	; 0x16
    4f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f9e:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	9c 8b       	std	Y+20, r25	; 0x14
    4fa8:	8b 8b       	std	Y+19, r24	; 0x13
    4faa:	8b 89       	ldd	r24, Y+19	; 0x13
    4fac:	9c 89       	ldd	r25, Y+20	; 0x14
    4fae:	98 8b       	std	Y+16, r25	; 0x10
    4fb0:	8f 87       	std	Y+15, r24	; 0x0f
    4fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fb4:	98 89       	ldd	r25, Y+16	; 0x10
    4fb6:	01 97       	sbiw	r24, 0x01	; 1
    4fb8:	f1 f7       	brne	.-4      	; 0x4fb6 <main+0x35e8>
    4fba:	98 8b       	std	Y+16, r25	; 0x10
    4fbc:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(50);
        SetColor(0xff, 0xff, 0xff, 0xff);
    4fbe:	8f ef       	ldi	r24, 0xFF	; 255
    4fc0:	6f ef       	ldi	r22, 0xFF	; 255
    4fc2:	4f ef       	ldi	r20, 0xFF	; 255
    4fc4:	2f ef       	ldi	r18, 0xFF	; 255
    4fc6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SetColor>
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	a8 e4       	ldi	r26, 0x48	; 72
    4fd0:	b2 e4       	ldi	r27, 0x42	; 66
    4fd2:	8b 87       	std	Y+11, r24	; 0x0b
    4fd4:	9c 87       	std	Y+12, r25	; 0x0c
    4fd6:	ad 87       	std	Y+13, r26	; 0x0d
    4fd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	4a e7       	ldi	r20, 0x7A	; 122
    4fe8:	55 e4       	ldi	r21, 0x45	; 69
    4fea:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    4fee:	dc 01       	movw	r26, r24
    4ff0:	cb 01       	movw	r24, r22
    4ff2:	8f 83       	std	Y+7, r24	; 0x07
    4ff4:	98 87       	std	Y+8, r25	; 0x08
    4ff6:	a9 87       	std	Y+9, r26	; 0x09
    4ff8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    4ffc:	78 85       	ldd	r23, Y+8	; 0x08
    4ffe:	89 85       	ldd	r24, Y+9	; 0x09
    5000:	9a 85       	ldd	r25, Y+10	; 0x0a
    5002:	20 e0       	ldi	r18, 0x00	; 0
    5004:	30 e0       	ldi	r19, 0x00	; 0
    5006:	40 e8       	ldi	r20, 0x80	; 128
    5008:	5f e3       	ldi	r21, 0x3F	; 63
    500a:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__ltsf2>
    500e:	88 23       	and	r24, r24
    5010:	2c f4       	brge	.+10     	; 0x501c <main+0x364e>
		__ticks = 1;
    5012:	81 e0       	ldi	r24, 0x01	; 1
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	9e 83       	std	Y+6, r25	; 0x06
    5018:	8d 83       	std	Y+5, r24	; 0x05
    501a:	3f c0       	rjmp	.+126    	; 0x509a <main+0x36cc>
	else if (__tmp > 65535)
    501c:	6f 81       	ldd	r22, Y+7	; 0x07
    501e:	78 85       	ldd	r23, Y+8	; 0x08
    5020:	89 85       	ldd	r24, Y+9	; 0x09
    5022:	9a 85       	ldd	r25, Y+10	; 0x0a
    5024:	20 e0       	ldi	r18, 0x00	; 0
    5026:	3f ef       	ldi	r19, 0xFF	; 255
    5028:	4f e7       	ldi	r20, 0x7F	; 127
    502a:	57 e4       	ldi	r21, 0x47	; 71
    502c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__gtsf2>
    5030:	18 16       	cp	r1, r24
    5032:	4c f5       	brge	.+82     	; 0x5086 <main+0x36b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5034:	6b 85       	ldd	r22, Y+11	; 0x0b
    5036:	7c 85       	ldd	r23, Y+12	; 0x0c
    5038:	8d 85       	ldd	r24, Y+13	; 0x0d
    503a:	9e 85       	ldd	r25, Y+14	; 0x0e
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	40 e2       	ldi	r20, 0x20	; 32
    5042:	51 e4       	ldi	r21, 0x41	; 65
    5044:	0e 94 a5 34 	call	0x694a	; 0x694a <__mulsf3>
    5048:	dc 01       	movw	r26, r24
    504a:	cb 01       	movw	r24, r22
    504c:	bc 01       	movw	r22, r24
    504e:	cd 01       	movw	r24, r26
    5050:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    5054:	dc 01       	movw	r26, r24
    5056:	cb 01       	movw	r24, r22
    5058:	9e 83       	std	Y+6, r25	; 0x06
    505a:	8d 83       	std	Y+5, r24	; 0x05
    505c:	0f c0       	rjmp	.+30     	; 0x507c <main+0x36ae>
    505e:	80 e9       	ldi	r24, 0x90	; 144
    5060:	91 e0       	ldi	r25, 0x01	; 1
    5062:	9c 83       	std	Y+4, r25	; 0x04
    5064:	8b 83       	std	Y+3, r24	; 0x03
    5066:	8b 81       	ldd	r24, Y+3	; 0x03
    5068:	9c 81       	ldd	r25, Y+4	; 0x04
    506a:	01 97       	sbiw	r24, 0x01	; 1
    506c:	f1 f7       	brne	.-4      	; 0x506a <main+0x369c>
    506e:	9c 83       	std	Y+4, r25	; 0x04
    5070:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5072:	8d 81       	ldd	r24, Y+5	; 0x05
    5074:	9e 81       	ldd	r25, Y+6	; 0x06
    5076:	01 97       	sbiw	r24, 0x01	; 1
    5078:	9e 83       	std	Y+6, r25	; 0x06
    507a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    507c:	8d 81       	ldd	r24, Y+5	; 0x05
    507e:	9e 81       	ldd	r25, Y+6	; 0x06
    5080:	00 97       	sbiw	r24, 0x00	; 0
    5082:	69 f7       	brne	.-38     	; 0x505e <main+0x3690>
    5084:	14 c0       	rjmp	.+40     	; 0x50ae <main+0x36e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5086:	6f 81       	ldd	r22, Y+7	; 0x07
    5088:	78 85       	ldd	r23, Y+8	; 0x08
    508a:	89 85       	ldd	r24, Y+9	; 0x09
    508c:	9a 85       	ldd	r25, Y+10	; 0x0a
    508e:	0e 94 cf 32 	call	0x659e	; 0x659e <__fixunssfsi>
    5092:	dc 01       	movw	r26, r24
    5094:	cb 01       	movw	r24, r22
    5096:	9e 83       	std	Y+6, r25	; 0x06
    5098:	8d 83       	std	Y+5, r24	; 0x05
    509a:	8d 81       	ldd	r24, Y+5	; 0x05
    509c:	9e 81       	ldd	r25, Y+6	; 0x06
    509e:	9a 83       	std	Y+2, r25	; 0x02
    50a0:	89 83       	std	Y+1, r24	; 0x01
    50a2:	89 81       	ldd	r24, Y+1	; 0x01
    50a4:	9a 81       	ldd	r25, Y+2	; 0x02
    50a6:	01 97       	sbiw	r24, 0x01	; 1
    50a8:	f1 f7       	brne	.-4      	; 0x50a6 <main+0x36d8>
    50aa:	9a 83       	std	Y+2, r25	; 0x02
    50ac:	89 83       	std	Y+1, r24	; 0x01
    int res2 = i2c_rtc_read(&utctime, 0);
    SetColor(uiBright, uiR, uiG, uiB);
    if (!res1 || !res2)
    {
      uartPuts("RTC error\r\n");
      for (uiCount = 0; uiCount < 40; uiCount++)
    50ae:	9e 01       	movw	r18, r28
    50b0:	29 59       	subi	r18, 0x99	; 153
    50b2:	3d 4f       	sbci	r19, 0xFD	; 253
    50b4:	fe 01       	movw	r30, r28
    50b6:	e9 59       	subi	r30, 0x99	; 153
    50b8:	fd 4f       	sbci	r31, 0xFD	; 253
    50ba:	80 81       	ld	r24, Z
    50bc:	91 81       	ldd	r25, Z+1	; 0x01
    50be:	a2 81       	ldd	r26, Z+2	; 0x02
    50c0:	b3 81       	ldd	r27, Z+3	; 0x03
    50c2:	01 96       	adiw	r24, 0x01	; 1
    50c4:	a1 1d       	adc	r26, r1
    50c6:	b1 1d       	adc	r27, r1
    50c8:	f9 01       	movw	r30, r18
    50ca:	80 83       	st	Z, r24
    50cc:	91 83       	std	Z+1, r25	; 0x01
    50ce:	a2 83       	std	Z+2, r26	; 0x02
    50d0:	b3 83       	std	Z+3, r27	; 0x03
    50d2:	fe 01       	movw	r30, r28
    50d4:	e9 59       	subi	r30, 0x99	; 153
    50d6:	fd 4f       	sbci	r31, 0xFD	; 253
    50d8:	80 81       	ld	r24, Z
    50da:	91 81       	ldd	r25, Z+1	; 0x01
    50dc:	a2 81       	ldd	r26, Z+2	; 0x02
    50de:	b3 81       	ldd	r27, Z+3	; 0x03
    50e0:	88 32       	cpi	r24, 0x28	; 40
    50e2:	91 05       	cpc	r25, r1
    50e4:	a1 05       	cpc	r26, r1
    50e6:	b1 05       	cpc	r27, r1
    50e8:	0c f4       	brge	.+2      	; 0x50ec <main+0x371e>
    50ea:	f1 ce       	rjmp	.-542    	; 0x4ece <main+0x3500>
    50ec:	ff cf       	rjmp	.-2      	; 0x50ec <main+0x371e>
      }
      while (1)
        ;
    }

    long lLEDs = 0;
    50ee:	fe 01       	movw	r30, r28
    50f0:	e4 5b       	subi	r30, 0xB4	; 180
    50f2:	fd 4f       	sbci	r31, 0xFD	; 253
    50f4:	10 82       	st	Z, r1
    50f6:	11 82       	std	Z+1, r1	; 0x01
    50f8:	12 82       	std	Z+2, r1	; 0x02
    50fa:	13 82       	std	Z+3, r1	; 0x03
    lLEDs |= pgm_read_dword(words+def_es);
    50fc:	fe 01       	movw	r30, r28
    50fe:	ed 5d       	subi	r30, 0xDD	; 221
    5100:	fd 4f       	sbci	r31, 0xFD	; 253
    5102:	84 e5       	ldi	r24, 0x54	; 84
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	91 83       	std	Z+1, r25	; 0x01
    5108:	80 83       	st	Z, r24
    510a:	fe 01       	movw	r30, r28
    510c:	ed 5d       	subi	r30, 0xDD	; 221
    510e:	fd 4f       	sbci	r31, 0xFD	; 253
    5110:	80 81       	ld	r24, Z
    5112:	91 81       	ldd	r25, Z+1	; 0x01
    5114:	9c 01       	movw	r18, r24
    5116:	f9 01       	movw	r30, r18
    5118:	85 91       	lpm	r24, Z+
    511a:	95 91       	lpm	r25, Z+
    511c:	a5 91       	lpm	r26, Z+
    511e:	b4 91       	lpm	r27, Z+
    5120:	9f 01       	movw	r18, r30
    5122:	fe 01       	movw	r30, r28
    5124:	e1 5e       	subi	r30, 0xE1	; 225
    5126:	fd 4f       	sbci	r31, 0xFD	; 253
    5128:	80 83       	st	Z, r24
    512a:	91 83       	std	Z+1, r25	; 0x01
    512c:	a2 83       	std	Z+2, r26	; 0x02
    512e:	b3 83       	std	Z+3, r27	; 0x03
    5130:	fe 01       	movw	r30, r28
    5132:	ed 5d       	subi	r30, 0xDD	; 221
    5134:	fd 4f       	sbci	r31, 0xFD	; 253
    5136:	31 83       	std	Z+1, r19	; 0x01
    5138:	20 83       	st	Z, r18
    513a:	fe 01       	movw	r30, r28
    513c:	e1 5e       	subi	r30, 0xE1	; 225
    513e:	fd 4f       	sbci	r31, 0xFD	; 253
    5140:	20 81       	ld	r18, Z
    5142:	31 81       	ldd	r19, Z+1	; 0x01
    5144:	42 81       	ldd	r20, Z+2	; 0x02
    5146:	53 81       	ldd	r21, Z+3	; 0x03
    5148:	fe 01       	movw	r30, r28
    514a:	e4 5b       	subi	r30, 0xB4	; 180
    514c:	fd 4f       	sbci	r31, 0xFD	; 253
    514e:	80 81       	ld	r24, Z
    5150:	91 81       	ldd	r25, Z+1	; 0x01
    5152:	a2 81       	ldd	r26, Z+2	; 0x02
    5154:	b3 81       	ldd	r27, Z+3	; 0x03
    5156:	82 2b       	or	r24, r18
    5158:	93 2b       	or	r25, r19
    515a:	a4 2b       	or	r26, r20
    515c:	b5 2b       	or	r27, r21
    515e:	fe 01       	movw	r30, r28
    5160:	e4 5b       	subi	r30, 0xB4	; 180
    5162:	fd 4f       	sbci	r31, 0xFD	; 253
    5164:	80 83       	st	Z, r24
    5166:	91 83       	std	Z+1, r25	; 0x01
    5168:	a2 83       	std	Z+2, r26	; 0x02
    516a:	b3 83       	std	Z+3, r27	; 0x03
    lLEDs |= pgm_read_dword(words+def_ist);
    516c:	fe 01       	movw	r30, r28
    516e:	e3 5e       	subi	r30, 0xE3	; 227
    5170:	fd 4f       	sbci	r31, 0xFD	; 253
    5172:	88 e5       	ldi	r24, 0x58	; 88
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	91 83       	std	Z+1, r25	; 0x01
    5178:	80 83       	st	Z, r24
    517a:	fe 01       	movw	r30, r28
    517c:	e3 5e       	subi	r30, 0xE3	; 227
    517e:	fd 4f       	sbci	r31, 0xFD	; 253
    5180:	80 81       	ld	r24, Z
    5182:	91 81       	ldd	r25, Z+1	; 0x01
    5184:	9c 01       	movw	r18, r24
    5186:	f9 01       	movw	r30, r18
    5188:	85 91       	lpm	r24, Z+
    518a:	95 91       	lpm	r25, Z+
    518c:	a5 91       	lpm	r26, Z+
    518e:	b4 91       	lpm	r27, Z+
    5190:	9f 01       	movw	r18, r30
    5192:	fe 01       	movw	r30, r28
    5194:	e7 5e       	subi	r30, 0xE7	; 231
    5196:	fd 4f       	sbci	r31, 0xFD	; 253
    5198:	80 83       	st	Z, r24
    519a:	91 83       	std	Z+1, r25	; 0x01
    519c:	a2 83       	std	Z+2, r26	; 0x02
    519e:	b3 83       	std	Z+3, r27	; 0x03
    51a0:	fe 01       	movw	r30, r28
    51a2:	e3 5e       	subi	r30, 0xE3	; 227
    51a4:	fd 4f       	sbci	r31, 0xFD	; 253
    51a6:	31 83       	std	Z+1, r19	; 0x01
    51a8:	20 83       	st	Z, r18
    51aa:	fe 01       	movw	r30, r28
    51ac:	e7 5e       	subi	r30, 0xE7	; 231
    51ae:	fd 4f       	sbci	r31, 0xFD	; 253
    51b0:	20 81       	ld	r18, Z
    51b2:	31 81       	ldd	r19, Z+1	; 0x01
    51b4:	42 81       	ldd	r20, Z+2	; 0x02
    51b6:	53 81       	ldd	r21, Z+3	; 0x03
    51b8:	fe 01       	movw	r30, r28
    51ba:	e4 5b       	subi	r30, 0xB4	; 180
    51bc:	fd 4f       	sbci	r31, 0xFD	; 253
    51be:	80 81       	ld	r24, Z
    51c0:	91 81       	ldd	r25, Z+1	; 0x01
    51c2:	a2 81       	ldd	r26, Z+2	; 0x02
    51c4:	b3 81       	ldd	r27, Z+3	; 0x03
    51c6:	82 2b       	or	r24, r18
    51c8:	93 2b       	or	r25, r19
    51ca:	a4 2b       	or	r26, r20
    51cc:	b5 2b       	or	r27, r21
    51ce:	fe 01       	movw	r30, r28
    51d0:	e4 5b       	subi	r30, 0xB4	; 180
    51d2:	fd 4f       	sbci	r31, 0xFD	; 253
    51d4:	80 83       	st	Z, r24
    51d6:	91 83       	std	Z+1, r25	; 0x01
    51d8:	a2 83       	std	Z+2, r26	; 0x02
    51da:	b3 83       	std	Z+3, r27	; 0x03
    lLEDs |= pgm_read_dword(words+def_uhr);
    51dc:	fe 01       	movw	r30, r28
    51de:	e9 5e       	subi	r30, 0xE9	; 233
    51e0:	fd 4f       	sbci	r31, 0xFD	; 253
    51e2:	8c ea       	ldi	r24, 0xAC	; 172
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	91 83       	std	Z+1, r25	; 0x01
    51e8:	80 83       	st	Z, r24
    51ea:	fe 01       	movw	r30, r28
    51ec:	e9 5e       	subi	r30, 0xE9	; 233
    51ee:	fd 4f       	sbci	r31, 0xFD	; 253
    51f0:	80 81       	ld	r24, Z
    51f2:	91 81       	ldd	r25, Z+1	; 0x01
    51f4:	9c 01       	movw	r18, r24
    51f6:	f9 01       	movw	r30, r18
    51f8:	85 91       	lpm	r24, Z+
    51fa:	95 91       	lpm	r25, Z+
    51fc:	a5 91       	lpm	r26, Z+
    51fe:	b4 91       	lpm	r27, Z+
    5200:	9f 01       	movw	r18, r30
    5202:	fe 01       	movw	r30, r28
    5204:	ed 5e       	subi	r30, 0xED	; 237
    5206:	fd 4f       	sbci	r31, 0xFD	; 253
    5208:	80 83       	st	Z, r24
    520a:	91 83       	std	Z+1, r25	; 0x01
    520c:	a2 83       	std	Z+2, r26	; 0x02
    520e:	b3 83       	std	Z+3, r27	; 0x03
    5210:	fe 01       	movw	r30, r28
    5212:	e9 5e       	subi	r30, 0xE9	; 233
    5214:	fd 4f       	sbci	r31, 0xFD	; 253
    5216:	31 83       	std	Z+1, r19	; 0x01
    5218:	20 83       	st	Z, r18
    521a:	fe 01       	movw	r30, r28
    521c:	ed 5e       	subi	r30, 0xED	; 237
    521e:	fd 4f       	sbci	r31, 0xFD	; 253
    5220:	20 81       	ld	r18, Z
    5222:	31 81       	ldd	r19, Z+1	; 0x01
    5224:	42 81       	ldd	r20, Z+2	; 0x02
    5226:	53 81       	ldd	r21, Z+3	; 0x03
    5228:	fe 01       	movw	r30, r28
    522a:	e4 5b       	subi	r30, 0xB4	; 180
    522c:	fd 4f       	sbci	r31, 0xFD	; 253
    522e:	80 81       	ld	r24, Z
    5230:	91 81       	ldd	r25, Z+1	; 0x01
    5232:	a2 81       	ldd	r26, Z+2	; 0x02
    5234:	b3 81       	ldd	r27, Z+3	; 0x03
    5236:	82 2b       	or	r24, r18
    5238:	93 2b       	or	r25, r19
    523a:	a4 2b       	or	r26, r20
    523c:	b5 2b       	or	r27, r21
    523e:	fe 01       	movw	r30, r28
    5240:	e4 5b       	subi	r30, 0xB4	; 180
    5242:	fd 4f       	sbci	r31, 0xFD	; 253
    5244:	80 83       	st	Z, r24
    5246:	91 83       	std	Z+1, r25	; 0x01
    5248:	a2 83       	std	Z+2, r26	; 0x02
    524a:	b3 83       	std	Z+3, r27	; 0x03

    switch (time.mm % 5)
    524c:	fe 01       	movw	r30, r28
    524e:	ef 58       	subi	r30, 0x8F	; 143
    5250:	fd 4f       	sbci	r31, 0xFD	; 253
    5252:	84 81       	ldd	r24, Z+4	; 0x04
    5254:	95 e0       	ldi	r25, 0x05	; 5
    5256:	69 2f       	mov	r22, r25
    5258:	0e 94 48 38 	call	0x7090	; 0x7090 <__udivmodqi4>
    525c:	89 2f       	mov	r24, r25
    525e:	28 2f       	mov	r18, r24
    5260:	30 e0       	ldi	r19, 0x00	; 0
    5262:	c4 57       	subi	r28, 0x74	; 116
    5264:	dc 4f       	sbci	r29, 0xFC	; 252
    5266:	39 83       	std	Y+1, r19	; 0x01
    5268:	28 83       	st	Y, r18
    526a:	cc 58       	subi	r28, 0x8C	; 140
    526c:	d3 40       	sbci	r29, 0x03	; 3
    526e:	c4 57       	subi	r28, 0x74	; 116
    5270:	dc 4f       	sbci	r29, 0xFC	; 252
    5272:	88 81       	ld	r24, Y
    5274:	99 81       	ldd	r25, Y+1	; 0x01
    5276:	cc 58       	subi	r28, 0x8C	; 140
    5278:	d3 40       	sbci	r29, 0x03	; 3
    527a:	82 30       	cpi	r24, 0x02	; 2
    527c:	91 05       	cpc	r25, r1
    527e:	09 f4       	brne	.+2      	; 0x5282 <main+0x38b4>
    5280:	6b c0       	rjmp	.+214    	; 0x5358 <main+0x398a>
    5282:	c4 57       	subi	r28, 0x74	; 116
    5284:	dc 4f       	sbci	r29, 0xFC	; 252
    5286:	e8 81       	ld	r30, Y
    5288:	f9 81       	ldd	r31, Y+1	; 0x01
    528a:	cc 58       	subi	r28, 0x8C	; 140
    528c:	d3 40       	sbci	r29, 0x03	; 3
    528e:	e3 30       	cpi	r30, 0x03	; 3
    5290:	f1 05       	cpc	r31, r1
    5292:	a4 f4       	brge	.+40     	; 0x52bc <main+0x38ee>
    5294:	c4 57       	subi	r28, 0x74	; 116
    5296:	dc 4f       	sbci	r29, 0xFC	; 252
    5298:	28 81       	ld	r18, Y
    529a:	39 81       	ldd	r19, Y+1	; 0x01
    529c:	cc 58       	subi	r28, 0x8C	; 140
    529e:	d3 40       	sbci	r29, 0x03	; 3
    52a0:	21 15       	cp	r18, r1
    52a2:	31 05       	cpc	r19, r1
    52a4:	09 f4       	brne	.+2      	; 0x52a8 <main+0x38da>
    52a6:	52 c2       	rjmp	.+1188   	; 0x574c <main+0x3d7e>
    52a8:	c4 57       	subi	r28, 0x74	; 116
    52aa:	dc 4f       	sbci	r29, 0xFC	; 252
    52ac:	88 81       	ld	r24, Y
    52ae:	99 81       	ldd	r25, Y+1	; 0x01
    52b0:	cc 58       	subi	r28, 0x8C	; 140
    52b2:	d3 40       	sbci	r29, 0x03	; 3
    52b4:	81 30       	cpi	r24, 0x01	; 1
    52b6:	91 05       	cpc	r25, r1
    52b8:	b1 f0       	breq	.+44     	; 0x52e6 <main+0x3918>
    52ba:	48 c2       	rjmp	.+1168   	; 0x574c <main+0x3d7e>
    52bc:	c4 57       	subi	r28, 0x74	; 116
    52be:	dc 4f       	sbci	r29, 0xFC	; 252
    52c0:	e8 81       	ld	r30, Y
    52c2:	f9 81       	ldd	r31, Y+1	; 0x01
    52c4:	cc 58       	subi	r28, 0x8C	; 140
    52c6:	d3 40       	sbci	r29, 0x03	; 3
    52c8:	e3 30       	cpi	r30, 0x03	; 3
    52ca:	f1 05       	cpc	r31, r1
    52cc:	09 f4       	brne	.+2      	; 0x52d0 <main+0x3902>
    52ce:	b5 c0       	rjmp	.+362    	; 0x543a <main+0x3a6c>
    52d0:	c4 57       	subi	r28, 0x74	; 116
    52d2:	dc 4f       	sbci	r29, 0xFC	; 252
    52d4:	28 81       	ld	r18, Y
    52d6:	39 81       	ldd	r19, Y+1	; 0x01
    52d8:	cc 58       	subi	r28, 0x8C	; 140
    52da:	d3 40       	sbci	r29, 0x03	; 3
    52dc:	24 30       	cpi	r18, 0x04	; 4
    52de:	31 05       	cpc	r19, r1
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <main+0x3916>
    52e2:	54 c1       	rjmp	.+680    	; 0x558c <main+0x3bbe>
    52e4:	33 c2       	rjmp	.+1126   	; 0x574c <main+0x3d7e>
    {
    case 0:
      break;
    case 1:
      lLEDs |= pgm_read_dword(words+def_mp4);
    52e6:	fe 01       	movw	r30, r28
    52e8:	ef 5e       	subi	r30, 0xEF	; 239
    52ea:	fd 4f       	sbci	r31, 0xFD	; 253
    52ec:	8c eb       	ldi	r24, 0xBC	; 188
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	91 83       	std	Z+1, r25	; 0x01
    52f2:	80 83       	st	Z, r24
    52f4:	fe 01       	movw	r30, r28
    52f6:	ef 5e       	subi	r30, 0xEF	; 239
    52f8:	fd 4f       	sbci	r31, 0xFD	; 253
    52fa:	80 81       	ld	r24, Z
    52fc:	91 81       	ldd	r25, Z+1	; 0x01
    52fe:	9c 01       	movw	r18, r24
    5300:	f9 01       	movw	r30, r18
    5302:	85 91       	lpm	r24, Z+
    5304:	95 91       	lpm	r25, Z+
    5306:	a5 91       	lpm	r26, Z+
    5308:	b4 91       	lpm	r27, Z+
    530a:	9f 01       	movw	r18, r30
    530c:	fe 01       	movw	r30, r28
    530e:	e3 5f       	subi	r30, 0xF3	; 243
    5310:	fd 4f       	sbci	r31, 0xFD	; 253
    5312:	80 83       	st	Z, r24
    5314:	91 83       	std	Z+1, r25	; 0x01
    5316:	a2 83       	std	Z+2, r26	; 0x02
    5318:	b3 83       	std	Z+3, r27	; 0x03
    531a:	fe 01       	movw	r30, r28
    531c:	ef 5e       	subi	r30, 0xEF	; 239
    531e:	fd 4f       	sbci	r31, 0xFD	; 253
    5320:	31 83       	std	Z+1, r19	; 0x01
    5322:	20 83       	st	Z, r18
    5324:	fe 01       	movw	r30, r28
    5326:	e3 5f       	subi	r30, 0xF3	; 243
    5328:	fd 4f       	sbci	r31, 0xFD	; 253
    532a:	20 81       	ld	r18, Z
    532c:	31 81       	ldd	r19, Z+1	; 0x01
    532e:	42 81       	ldd	r20, Z+2	; 0x02
    5330:	53 81       	ldd	r21, Z+3	; 0x03
    5332:	fe 01       	movw	r30, r28
    5334:	e4 5b       	subi	r30, 0xB4	; 180
    5336:	fd 4f       	sbci	r31, 0xFD	; 253
    5338:	80 81       	ld	r24, Z
    533a:	91 81       	ldd	r25, Z+1	; 0x01
    533c:	a2 81       	ldd	r26, Z+2	; 0x02
    533e:	b3 81       	ldd	r27, Z+3	; 0x03
    5340:	82 2b       	or	r24, r18
    5342:	93 2b       	or	r25, r19
    5344:	a4 2b       	or	r26, r20
    5346:	b5 2b       	or	r27, r21
    5348:	fe 01       	movw	r30, r28
    534a:	e4 5b       	subi	r30, 0xB4	; 180
    534c:	fd 4f       	sbci	r31, 0xFD	; 253
    534e:	80 83       	st	Z, r24
    5350:	91 83       	std	Z+1, r25	; 0x01
    5352:	a2 83       	std	Z+2, r26	; 0x02
    5354:	b3 83       	std	Z+3, r27	; 0x03
    5356:	fa c1       	rjmp	.+1012   	; 0x574c <main+0x3d7e>
      break;
    case 2:
      lLEDs |= pgm_read_dword(words+def_mp4);
    5358:	fe 01       	movw	r30, r28
    535a:	e5 5f       	subi	r30, 0xF5	; 245
    535c:	fd 4f       	sbci	r31, 0xFD	; 253
    535e:	8c eb       	ldi	r24, 0xBC	; 188
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	91 83       	std	Z+1, r25	; 0x01
    5364:	80 83       	st	Z, r24
    5366:	fe 01       	movw	r30, r28
    5368:	e5 5f       	subi	r30, 0xF5	; 245
    536a:	fd 4f       	sbci	r31, 0xFD	; 253
    536c:	80 81       	ld	r24, Z
    536e:	91 81       	ldd	r25, Z+1	; 0x01
    5370:	9c 01       	movw	r18, r24
    5372:	f9 01       	movw	r30, r18
    5374:	85 91       	lpm	r24, Z+
    5376:	95 91       	lpm	r25, Z+
    5378:	a5 91       	lpm	r26, Z+
    537a:	b4 91       	lpm	r27, Z+
    537c:	9f 01       	movw	r18, r30
    537e:	fe 01       	movw	r30, r28
    5380:	e9 5f       	subi	r30, 0xF9	; 249
    5382:	fd 4f       	sbci	r31, 0xFD	; 253
    5384:	80 83       	st	Z, r24
    5386:	91 83       	std	Z+1, r25	; 0x01
    5388:	a2 83       	std	Z+2, r26	; 0x02
    538a:	b3 83       	std	Z+3, r27	; 0x03
    538c:	fe 01       	movw	r30, r28
    538e:	e5 5f       	subi	r30, 0xF5	; 245
    5390:	fd 4f       	sbci	r31, 0xFD	; 253
    5392:	31 83       	std	Z+1, r19	; 0x01
    5394:	20 83       	st	Z, r18
    5396:	fe 01       	movw	r30, r28
    5398:	e9 5f       	subi	r30, 0xF9	; 249
    539a:	fd 4f       	sbci	r31, 0xFD	; 253
    539c:	20 81       	ld	r18, Z
    539e:	31 81       	ldd	r19, Z+1	; 0x01
    53a0:	42 81       	ldd	r20, Z+2	; 0x02
    53a2:	53 81       	ldd	r21, Z+3	; 0x03
    53a4:	fe 01       	movw	r30, r28
    53a6:	e4 5b       	subi	r30, 0xB4	; 180
    53a8:	fd 4f       	sbci	r31, 0xFD	; 253
    53aa:	80 81       	ld	r24, Z
    53ac:	91 81       	ldd	r25, Z+1	; 0x01
    53ae:	a2 81       	ldd	r26, Z+2	; 0x02
    53b0:	b3 81       	ldd	r27, Z+3	; 0x03
    53b2:	82 2b       	or	r24, r18
    53b4:	93 2b       	or	r25, r19
    53b6:	a4 2b       	or	r26, r20
    53b8:	b5 2b       	or	r27, r21
    53ba:	fe 01       	movw	r30, r28
    53bc:	e4 5b       	subi	r30, 0xB4	; 180
    53be:	fd 4f       	sbci	r31, 0xFD	; 253
    53c0:	80 83       	st	Z, r24
    53c2:	91 83       	std	Z+1, r25	; 0x01
    53c4:	a2 83       	std	Z+2, r26	; 0x02
    53c6:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp2);
    53c8:	fe 01       	movw	r30, r28
    53ca:	eb 5f       	subi	r30, 0xFB	; 251
    53cc:	fd 4f       	sbci	r31, 0xFD	; 253
    53ce:	84 eb       	ldi	r24, 0xB4	; 180
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	91 83       	std	Z+1, r25	; 0x01
    53d4:	80 83       	st	Z, r24
    53d6:	fe 01       	movw	r30, r28
    53d8:	eb 5f       	subi	r30, 0xFB	; 251
    53da:	fd 4f       	sbci	r31, 0xFD	; 253
    53dc:	80 81       	ld	r24, Z
    53de:	91 81       	ldd	r25, Z+1	; 0x01
    53e0:	9c 01       	movw	r18, r24
    53e2:	f9 01       	movw	r30, r18
    53e4:	85 91       	lpm	r24, Z+
    53e6:	95 91       	lpm	r25, Z+
    53e8:	a5 91       	lpm	r26, Z+
    53ea:	b4 91       	lpm	r27, Z+
    53ec:	9f 01       	movw	r18, r30
    53ee:	fe 01       	movw	r30, r28
    53f0:	ef 5f       	subi	r30, 0xFF	; 255
    53f2:	fd 4f       	sbci	r31, 0xFD	; 253
    53f4:	80 83       	st	Z, r24
    53f6:	91 83       	std	Z+1, r25	; 0x01
    53f8:	a2 83       	std	Z+2, r26	; 0x02
    53fa:	b3 83       	std	Z+3, r27	; 0x03
    53fc:	fe 01       	movw	r30, r28
    53fe:	eb 5f       	subi	r30, 0xFB	; 251
    5400:	fd 4f       	sbci	r31, 0xFD	; 253
    5402:	31 83       	std	Z+1, r19	; 0x01
    5404:	20 83       	st	Z, r18
    5406:	fe 01       	movw	r30, r28
    5408:	ef 5f       	subi	r30, 0xFF	; 255
    540a:	fd 4f       	sbci	r31, 0xFD	; 253
    540c:	20 81       	ld	r18, Z
    540e:	31 81       	ldd	r19, Z+1	; 0x01
    5410:	42 81       	ldd	r20, Z+2	; 0x02
    5412:	53 81       	ldd	r21, Z+3	; 0x03
    5414:	fe 01       	movw	r30, r28
    5416:	e4 5b       	subi	r30, 0xB4	; 180
    5418:	fd 4f       	sbci	r31, 0xFD	; 253
    541a:	80 81       	ld	r24, Z
    541c:	91 81       	ldd	r25, Z+1	; 0x01
    541e:	a2 81       	ldd	r26, Z+2	; 0x02
    5420:	b3 81       	ldd	r27, Z+3	; 0x03
    5422:	82 2b       	or	r24, r18
    5424:	93 2b       	or	r25, r19
    5426:	a4 2b       	or	r26, r20
    5428:	b5 2b       	or	r27, r21
    542a:	fe 01       	movw	r30, r28
    542c:	e4 5b       	subi	r30, 0xB4	; 180
    542e:	fd 4f       	sbci	r31, 0xFD	; 253
    5430:	80 83       	st	Z, r24
    5432:	91 83       	std	Z+1, r25	; 0x01
    5434:	a2 83       	std	Z+2, r26	; 0x02
    5436:	b3 83       	std	Z+3, r27	; 0x03
    5438:	89 c1       	rjmp	.+786    	; 0x574c <main+0x3d7e>
      break;
    case 3:
      lLEDs |= pgm_read_dword(words+def_mp4);
    543a:	fe 01       	movw	r30, r28
    543c:	e1 50       	subi	r30, 0x01	; 1
    543e:	fe 4f       	sbci	r31, 0xFE	; 254
    5440:	8c eb       	ldi	r24, 0xBC	; 188
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	91 83       	std	Z+1, r25	; 0x01
    5446:	80 83       	st	Z, r24
    5448:	fe 01       	movw	r30, r28
    544a:	e1 50       	subi	r30, 0x01	; 1
    544c:	fe 4f       	sbci	r31, 0xFE	; 254
    544e:	80 81       	ld	r24, Z
    5450:	91 81       	ldd	r25, Z+1	; 0x01
    5452:	9c 01       	movw	r18, r24
    5454:	f9 01       	movw	r30, r18
    5456:	85 91       	lpm	r24, Z+
    5458:	95 91       	lpm	r25, Z+
    545a:	a5 91       	lpm	r26, Z+
    545c:	b4 91       	lpm	r27, Z+
    545e:	9f 01       	movw	r18, r30
    5460:	fe 01       	movw	r30, r28
    5462:	e5 50       	subi	r30, 0x05	; 5
    5464:	fe 4f       	sbci	r31, 0xFE	; 254
    5466:	80 83       	st	Z, r24
    5468:	91 83       	std	Z+1, r25	; 0x01
    546a:	a2 83       	std	Z+2, r26	; 0x02
    546c:	b3 83       	std	Z+3, r27	; 0x03
    546e:	fe 01       	movw	r30, r28
    5470:	e1 50       	subi	r30, 0x01	; 1
    5472:	fe 4f       	sbci	r31, 0xFE	; 254
    5474:	31 83       	std	Z+1, r19	; 0x01
    5476:	20 83       	st	Z, r18
    5478:	fe 01       	movw	r30, r28
    547a:	e5 50       	subi	r30, 0x05	; 5
    547c:	fe 4f       	sbci	r31, 0xFE	; 254
    547e:	20 81       	ld	r18, Z
    5480:	31 81       	ldd	r19, Z+1	; 0x01
    5482:	42 81       	ldd	r20, Z+2	; 0x02
    5484:	53 81       	ldd	r21, Z+3	; 0x03
    5486:	fe 01       	movw	r30, r28
    5488:	e4 5b       	subi	r30, 0xB4	; 180
    548a:	fd 4f       	sbci	r31, 0xFD	; 253
    548c:	80 81       	ld	r24, Z
    548e:	91 81       	ldd	r25, Z+1	; 0x01
    5490:	a2 81       	ldd	r26, Z+2	; 0x02
    5492:	b3 81       	ldd	r27, Z+3	; 0x03
    5494:	82 2b       	or	r24, r18
    5496:	93 2b       	or	r25, r19
    5498:	a4 2b       	or	r26, r20
    549a:	b5 2b       	or	r27, r21
    549c:	fe 01       	movw	r30, r28
    549e:	e4 5b       	subi	r30, 0xB4	; 180
    54a0:	fd 4f       	sbci	r31, 0xFD	; 253
    54a2:	80 83       	st	Z, r24
    54a4:	91 83       	std	Z+1, r25	; 0x01
    54a6:	a2 83       	std	Z+2, r26	; 0x02
    54a8:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp2);
    54aa:	fe 01       	movw	r30, r28
    54ac:	e7 50       	subi	r30, 0x07	; 7
    54ae:	fe 4f       	sbci	r31, 0xFE	; 254
    54b0:	84 eb       	ldi	r24, 0xB4	; 180
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	91 83       	std	Z+1, r25	; 0x01
    54b6:	80 83       	st	Z, r24
    54b8:	fe 01       	movw	r30, r28
    54ba:	e7 50       	subi	r30, 0x07	; 7
    54bc:	fe 4f       	sbci	r31, 0xFE	; 254
    54be:	80 81       	ld	r24, Z
    54c0:	91 81       	ldd	r25, Z+1	; 0x01
    54c2:	9c 01       	movw	r18, r24
    54c4:	f9 01       	movw	r30, r18
    54c6:	85 91       	lpm	r24, Z+
    54c8:	95 91       	lpm	r25, Z+
    54ca:	a5 91       	lpm	r26, Z+
    54cc:	b4 91       	lpm	r27, Z+
    54ce:	9f 01       	movw	r18, r30
    54d0:	fe 01       	movw	r30, r28
    54d2:	eb 50       	subi	r30, 0x0B	; 11
    54d4:	fe 4f       	sbci	r31, 0xFE	; 254
    54d6:	80 83       	st	Z, r24
    54d8:	91 83       	std	Z+1, r25	; 0x01
    54da:	a2 83       	std	Z+2, r26	; 0x02
    54dc:	b3 83       	std	Z+3, r27	; 0x03
    54de:	fe 01       	movw	r30, r28
    54e0:	e7 50       	subi	r30, 0x07	; 7
    54e2:	fe 4f       	sbci	r31, 0xFE	; 254
    54e4:	31 83       	std	Z+1, r19	; 0x01
    54e6:	20 83       	st	Z, r18
    54e8:	fe 01       	movw	r30, r28
    54ea:	eb 50       	subi	r30, 0x0B	; 11
    54ec:	fe 4f       	sbci	r31, 0xFE	; 254
    54ee:	20 81       	ld	r18, Z
    54f0:	31 81       	ldd	r19, Z+1	; 0x01
    54f2:	42 81       	ldd	r20, Z+2	; 0x02
    54f4:	53 81       	ldd	r21, Z+3	; 0x03
    54f6:	fe 01       	movw	r30, r28
    54f8:	e4 5b       	subi	r30, 0xB4	; 180
    54fa:	fd 4f       	sbci	r31, 0xFD	; 253
    54fc:	80 81       	ld	r24, Z
    54fe:	91 81       	ldd	r25, Z+1	; 0x01
    5500:	a2 81       	ldd	r26, Z+2	; 0x02
    5502:	b3 81       	ldd	r27, Z+3	; 0x03
    5504:	82 2b       	or	r24, r18
    5506:	93 2b       	or	r25, r19
    5508:	a4 2b       	or	r26, r20
    550a:	b5 2b       	or	r27, r21
    550c:	fe 01       	movw	r30, r28
    550e:	e4 5b       	subi	r30, 0xB4	; 180
    5510:	fd 4f       	sbci	r31, 0xFD	; 253
    5512:	80 83       	st	Z, r24
    5514:	91 83       	std	Z+1, r25	; 0x01
    5516:	a2 83       	std	Z+2, r26	; 0x02
    5518:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp1);
    551a:	fe 01       	movw	r30, r28
    551c:	ed 50       	subi	r30, 0x0D	; 13
    551e:	fe 4f       	sbci	r31, 0xFE	; 254
    5520:	80 eb       	ldi	r24, 0xB0	; 176
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	91 83       	std	Z+1, r25	; 0x01
    5526:	80 83       	st	Z, r24
    5528:	fe 01       	movw	r30, r28
    552a:	ed 50       	subi	r30, 0x0D	; 13
    552c:	fe 4f       	sbci	r31, 0xFE	; 254
    552e:	80 81       	ld	r24, Z
    5530:	91 81       	ldd	r25, Z+1	; 0x01
    5532:	9c 01       	movw	r18, r24
    5534:	f9 01       	movw	r30, r18
    5536:	85 91       	lpm	r24, Z+
    5538:	95 91       	lpm	r25, Z+
    553a:	a5 91       	lpm	r26, Z+
    553c:	b4 91       	lpm	r27, Z+
    553e:	9f 01       	movw	r18, r30
    5540:	fe 01       	movw	r30, r28
    5542:	e1 51       	subi	r30, 0x11	; 17
    5544:	fe 4f       	sbci	r31, 0xFE	; 254
    5546:	80 83       	st	Z, r24
    5548:	91 83       	std	Z+1, r25	; 0x01
    554a:	a2 83       	std	Z+2, r26	; 0x02
    554c:	b3 83       	std	Z+3, r27	; 0x03
    554e:	fe 01       	movw	r30, r28
    5550:	ed 50       	subi	r30, 0x0D	; 13
    5552:	fe 4f       	sbci	r31, 0xFE	; 254
    5554:	31 83       	std	Z+1, r19	; 0x01
    5556:	20 83       	st	Z, r18
    5558:	fe 01       	movw	r30, r28
    555a:	e1 51       	subi	r30, 0x11	; 17
    555c:	fe 4f       	sbci	r31, 0xFE	; 254
    555e:	20 81       	ld	r18, Z
    5560:	31 81       	ldd	r19, Z+1	; 0x01
    5562:	42 81       	ldd	r20, Z+2	; 0x02
    5564:	53 81       	ldd	r21, Z+3	; 0x03
    5566:	fe 01       	movw	r30, r28
    5568:	e4 5b       	subi	r30, 0xB4	; 180
    556a:	fd 4f       	sbci	r31, 0xFD	; 253
    556c:	80 81       	ld	r24, Z
    556e:	91 81       	ldd	r25, Z+1	; 0x01
    5570:	a2 81       	ldd	r26, Z+2	; 0x02
    5572:	b3 81       	ldd	r27, Z+3	; 0x03
    5574:	82 2b       	or	r24, r18
    5576:	93 2b       	or	r25, r19
    5578:	a4 2b       	or	r26, r20
    557a:	b5 2b       	or	r27, r21
    557c:	fe 01       	movw	r30, r28
    557e:	e4 5b       	subi	r30, 0xB4	; 180
    5580:	fd 4f       	sbci	r31, 0xFD	; 253
    5582:	80 83       	st	Z, r24
    5584:	91 83       	std	Z+1, r25	; 0x01
    5586:	a2 83       	std	Z+2, r26	; 0x02
    5588:	b3 83       	std	Z+3, r27	; 0x03
    558a:	e0 c0       	rjmp	.+448    	; 0x574c <main+0x3d7e>
      break;
    case 4:
      lLEDs |= pgm_read_dword(words+def_mp4);
    558c:	fe 01       	movw	r30, r28
    558e:	e3 51       	subi	r30, 0x13	; 19
    5590:	fe 4f       	sbci	r31, 0xFE	; 254
    5592:	8c eb       	ldi	r24, 0xBC	; 188
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	91 83       	std	Z+1, r25	; 0x01
    5598:	80 83       	st	Z, r24
    559a:	fe 01       	movw	r30, r28
    559c:	e3 51       	subi	r30, 0x13	; 19
    559e:	fe 4f       	sbci	r31, 0xFE	; 254
    55a0:	80 81       	ld	r24, Z
    55a2:	91 81       	ldd	r25, Z+1	; 0x01
    55a4:	9c 01       	movw	r18, r24
    55a6:	f9 01       	movw	r30, r18
    55a8:	85 91       	lpm	r24, Z+
    55aa:	95 91       	lpm	r25, Z+
    55ac:	a5 91       	lpm	r26, Z+
    55ae:	b4 91       	lpm	r27, Z+
    55b0:	9f 01       	movw	r18, r30
    55b2:	fe 01       	movw	r30, r28
    55b4:	e7 51       	subi	r30, 0x17	; 23
    55b6:	fe 4f       	sbci	r31, 0xFE	; 254
    55b8:	80 83       	st	Z, r24
    55ba:	91 83       	std	Z+1, r25	; 0x01
    55bc:	a2 83       	std	Z+2, r26	; 0x02
    55be:	b3 83       	std	Z+3, r27	; 0x03
    55c0:	fe 01       	movw	r30, r28
    55c2:	e3 51       	subi	r30, 0x13	; 19
    55c4:	fe 4f       	sbci	r31, 0xFE	; 254
    55c6:	31 83       	std	Z+1, r19	; 0x01
    55c8:	20 83       	st	Z, r18
    55ca:	fe 01       	movw	r30, r28
    55cc:	e7 51       	subi	r30, 0x17	; 23
    55ce:	fe 4f       	sbci	r31, 0xFE	; 254
    55d0:	20 81       	ld	r18, Z
    55d2:	31 81       	ldd	r19, Z+1	; 0x01
    55d4:	42 81       	ldd	r20, Z+2	; 0x02
    55d6:	53 81       	ldd	r21, Z+3	; 0x03
    55d8:	fe 01       	movw	r30, r28
    55da:	e4 5b       	subi	r30, 0xB4	; 180
    55dc:	fd 4f       	sbci	r31, 0xFD	; 253
    55de:	80 81       	ld	r24, Z
    55e0:	91 81       	ldd	r25, Z+1	; 0x01
    55e2:	a2 81       	ldd	r26, Z+2	; 0x02
    55e4:	b3 81       	ldd	r27, Z+3	; 0x03
    55e6:	82 2b       	or	r24, r18
    55e8:	93 2b       	or	r25, r19
    55ea:	a4 2b       	or	r26, r20
    55ec:	b5 2b       	or	r27, r21
    55ee:	fe 01       	movw	r30, r28
    55f0:	e4 5b       	subi	r30, 0xB4	; 180
    55f2:	fd 4f       	sbci	r31, 0xFD	; 253
    55f4:	80 83       	st	Z, r24
    55f6:	91 83       	std	Z+1, r25	; 0x01
    55f8:	a2 83       	std	Z+2, r26	; 0x02
    55fa:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp2);
    55fc:	fe 01       	movw	r30, r28
    55fe:	e9 51       	subi	r30, 0x19	; 25
    5600:	fe 4f       	sbci	r31, 0xFE	; 254
    5602:	84 eb       	ldi	r24, 0xB4	; 180
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	91 83       	std	Z+1, r25	; 0x01
    5608:	80 83       	st	Z, r24
    560a:	fe 01       	movw	r30, r28
    560c:	e9 51       	subi	r30, 0x19	; 25
    560e:	fe 4f       	sbci	r31, 0xFE	; 254
    5610:	80 81       	ld	r24, Z
    5612:	91 81       	ldd	r25, Z+1	; 0x01
    5614:	9c 01       	movw	r18, r24
    5616:	f9 01       	movw	r30, r18
    5618:	85 91       	lpm	r24, Z+
    561a:	95 91       	lpm	r25, Z+
    561c:	a5 91       	lpm	r26, Z+
    561e:	b4 91       	lpm	r27, Z+
    5620:	9f 01       	movw	r18, r30
    5622:	fe 01       	movw	r30, r28
    5624:	ed 51       	subi	r30, 0x1D	; 29
    5626:	fe 4f       	sbci	r31, 0xFE	; 254
    5628:	80 83       	st	Z, r24
    562a:	91 83       	std	Z+1, r25	; 0x01
    562c:	a2 83       	std	Z+2, r26	; 0x02
    562e:	b3 83       	std	Z+3, r27	; 0x03
    5630:	fe 01       	movw	r30, r28
    5632:	e9 51       	subi	r30, 0x19	; 25
    5634:	fe 4f       	sbci	r31, 0xFE	; 254
    5636:	31 83       	std	Z+1, r19	; 0x01
    5638:	20 83       	st	Z, r18
    563a:	fe 01       	movw	r30, r28
    563c:	ed 51       	subi	r30, 0x1D	; 29
    563e:	fe 4f       	sbci	r31, 0xFE	; 254
    5640:	20 81       	ld	r18, Z
    5642:	31 81       	ldd	r19, Z+1	; 0x01
    5644:	42 81       	ldd	r20, Z+2	; 0x02
    5646:	53 81       	ldd	r21, Z+3	; 0x03
    5648:	fe 01       	movw	r30, r28
    564a:	e4 5b       	subi	r30, 0xB4	; 180
    564c:	fd 4f       	sbci	r31, 0xFD	; 253
    564e:	80 81       	ld	r24, Z
    5650:	91 81       	ldd	r25, Z+1	; 0x01
    5652:	a2 81       	ldd	r26, Z+2	; 0x02
    5654:	b3 81       	ldd	r27, Z+3	; 0x03
    5656:	82 2b       	or	r24, r18
    5658:	93 2b       	or	r25, r19
    565a:	a4 2b       	or	r26, r20
    565c:	b5 2b       	or	r27, r21
    565e:	fe 01       	movw	r30, r28
    5660:	e4 5b       	subi	r30, 0xB4	; 180
    5662:	fd 4f       	sbci	r31, 0xFD	; 253
    5664:	80 83       	st	Z, r24
    5666:	91 83       	std	Z+1, r25	; 0x01
    5668:	a2 83       	std	Z+2, r26	; 0x02
    566a:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp1);
    566c:	fe 01       	movw	r30, r28
    566e:	ef 51       	subi	r30, 0x1F	; 31
    5670:	fe 4f       	sbci	r31, 0xFE	; 254
    5672:	80 eb       	ldi	r24, 0xB0	; 176
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	91 83       	std	Z+1, r25	; 0x01
    5678:	80 83       	st	Z, r24
    567a:	fe 01       	movw	r30, r28
    567c:	ef 51       	subi	r30, 0x1F	; 31
    567e:	fe 4f       	sbci	r31, 0xFE	; 254
    5680:	80 81       	ld	r24, Z
    5682:	91 81       	ldd	r25, Z+1	; 0x01
    5684:	9c 01       	movw	r18, r24
    5686:	f9 01       	movw	r30, r18
    5688:	85 91       	lpm	r24, Z+
    568a:	95 91       	lpm	r25, Z+
    568c:	a5 91       	lpm	r26, Z+
    568e:	b4 91       	lpm	r27, Z+
    5690:	9f 01       	movw	r18, r30
    5692:	fe 01       	movw	r30, r28
    5694:	e3 52       	subi	r30, 0x23	; 35
    5696:	fe 4f       	sbci	r31, 0xFE	; 254
    5698:	80 83       	st	Z, r24
    569a:	91 83       	std	Z+1, r25	; 0x01
    569c:	a2 83       	std	Z+2, r26	; 0x02
    569e:	b3 83       	std	Z+3, r27	; 0x03
    56a0:	fe 01       	movw	r30, r28
    56a2:	ef 51       	subi	r30, 0x1F	; 31
    56a4:	fe 4f       	sbci	r31, 0xFE	; 254
    56a6:	31 83       	std	Z+1, r19	; 0x01
    56a8:	20 83       	st	Z, r18
    56aa:	fe 01       	movw	r30, r28
    56ac:	e3 52       	subi	r30, 0x23	; 35
    56ae:	fe 4f       	sbci	r31, 0xFE	; 254
    56b0:	20 81       	ld	r18, Z
    56b2:	31 81       	ldd	r19, Z+1	; 0x01
    56b4:	42 81       	ldd	r20, Z+2	; 0x02
    56b6:	53 81       	ldd	r21, Z+3	; 0x03
    56b8:	fe 01       	movw	r30, r28
    56ba:	e4 5b       	subi	r30, 0xB4	; 180
    56bc:	fd 4f       	sbci	r31, 0xFD	; 253
    56be:	80 81       	ld	r24, Z
    56c0:	91 81       	ldd	r25, Z+1	; 0x01
    56c2:	a2 81       	ldd	r26, Z+2	; 0x02
    56c4:	b3 81       	ldd	r27, Z+3	; 0x03
    56c6:	82 2b       	or	r24, r18
    56c8:	93 2b       	or	r25, r19
    56ca:	a4 2b       	or	r26, r20
    56cc:	b5 2b       	or	r27, r21
    56ce:	fe 01       	movw	r30, r28
    56d0:	e4 5b       	subi	r30, 0xB4	; 180
    56d2:	fd 4f       	sbci	r31, 0xFD	; 253
    56d4:	80 83       	st	Z, r24
    56d6:	91 83       	std	Z+1, r25	; 0x01
    56d8:	a2 83       	std	Z+2, r26	; 0x02
    56da:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_mp3);
    56dc:	fe 01       	movw	r30, r28
    56de:	e5 52       	subi	r30, 0x25	; 37
    56e0:	fe 4f       	sbci	r31, 0xFE	; 254
    56e2:	88 eb       	ldi	r24, 0xB8	; 184
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	91 83       	std	Z+1, r25	; 0x01
    56e8:	80 83       	st	Z, r24
    56ea:	fe 01       	movw	r30, r28
    56ec:	e5 52       	subi	r30, 0x25	; 37
    56ee:	fe 4f       	sbci	r31, 0xFE	; 254
    56f0:	80 81       	ld	r24, Z
    56f2:	91 81       	ldd	r25, Z+1	; 0x01
    56f4:	9c 01       	movw	r18, r24
    56f6:	f9 01       	movw	r30, r18
    56f8:	85 91       	lpm	r24, Z+
    56fa:	95 91       	lpm	r25, Z+
    56fc:	a5 91       	lpm	r26, Z+
    56fe:	b4 91       	lpm	r27, Z+
    5700:	9f 01       	movw	r18, r30
    5702:	fe 01       	movw	r30, r28
    5704:	e9 52       	subi	r30, 0x29	; 41
    5706:	fe 4f       	sbci	r31, 0xFE	; 254
    5708:	80 83       	st	Z, r24
    570a:	91 83       	std	Z+1, r25	; 0x01
    570c:	a2 83       	std	Z+2, r26	; 0x02
    570e:	b3 83       	std	Z+3, r27	; 0x03
    5710:	fe 01       	movw	r30, r28
    5712:	e5 52       	subi	r30, 0x25	; 37
    5714:	fe 4f       	sbci	r31, 0xFE	; 254
    5716:	31 83       	std	Z+1, r19	; 0x01
    5718:	20 83       	st	Z, r18
    571a:	fe 01       	movw	r30, r28
    571c:	e9 52       	subi	r30, 0x29	; 41
    571e:	fe 4f       	sbci	r31, 0xFE	; 254
    5720:	20 81       	ld	r18, Z
    5722:	31 81       	ldd	r19, Z+1	; 0x01
    5724:	42 81       	ldd	r20, Z+2	; 0x02
    5726:	53 81       	ldd	r21, Z+3	; 0x03
    5728:	fe 01       	movw	r30, r28
    572a:	e4 5b       	subi	r30, 0xB4	; 180
    572c:	fd 4f       	sbci	r31, 0xFD	; 253
    572e:	80 81       	ld	r24, Z
    5730:	91 81       	ldd	r25, Z+1	; 0x01
    5732:	a2 81       	ldd	r26, Z+2	; 0x02
    5734:	b3 81       	ldd	r27, Z+3	; 0x03
    5736:	82 2b       	or	r24, r18
    5738:	93 2b       	or	r25, r19
    573a:	a4 2b       	or	r26, r20
    573c:	b5 2b       	or	r27, r21
    573e:	fe 01       	movw	r30, r28
    5740:	e4 5b       	subi	r30, 0xB4	; 180
    5742:	fd 4f       	sbci	r31, 0xFD	; 253
    5744:	80 83       	st	Z, r24
    5746:	91 83       	std	Z+1, r25	; 0x01
    5748:	a2 83       	std	Z+2, r26	; 0x02
    574a:	b3 83       	std	Z+3, r27	; 0x03
      break;
    }
    uint8_t hoffset = 0;
    574c:	fe 01       	movw	r30, r28
    574e:	e5 5b       	subi	r30, 0xB5	; 181
    5750:	fd 4f       	sbci	r31, 0xFD	; 253
    5752:	10 82       	st	Z, r1
    if (time.mm < 5)
    5754:	fe 01       	movw	r30, r28
    5756:	ef 58       	subi	r30, 0x8F	; 143
    5758:	fd 4f       	sbci	r31, 0xFD	; 253
    575a:	84 81       	ldd	r24, Z+4	; 0x04
    575c:	85 30       	cpi	r24, 0x05	; 5
    575e:	08 f4       	brcc	.+2      	; 0x5762 <main+0x3d94>
    5760:	82 c5       	rjmp	.+2820   	; 0x6266 <main+0x4898>
    {
    }
    else if (time.mm < 10)
    5762:	fe 01       	movw	r30, r28
    5764:	ef 58       	subi	r30, 0x8F	; 143
    5766:	fd 4f       	sbci	r31, 0xFD	; 253
    5768:	84 81       	ldd	r24, Z+4	; 0x04
    576a:	8a 30       	cpi	r24, 0x0A	; 10
    576c:	08 f0       	brcs	.+2      	; 0x5770 <main+0x3da2>
    576e:	71 c0       	rjmp	.+226    	; 0x5852 <main+0x3e84>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    5770:	fe 01       	movw	r30, r28
    5772:	eb 52       	subi	r30, 0x2B	; 43
    5774:	fe 4f       	sbci	r31, 0xFE	; 254
    5776:	8c e5       	ldi	r24, 0x5C	; 92
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	91 83       	std	Z+1, r25	; 0x01
    577c:	80 83       	st	Z, r24
    577e:	fe 01       	movw	r30, r28
    5780:	eb 52       	subi	r30, 0x2B	; 43
    5782:	fe 4f       	sbci	r31, 0xFE	; 254
    5784:	80 81       	ld	r24, Z
    5786:	91 81       	ldd	r25, Z+1	; 0x01
    5788:	9c 01       	movw	r18, r24
    578a:	f9 01       	movw	r30, r18
    578c:	85 91       	lpm	r24, Z+
    578e:	95 91       	lpm	r25, Z+
    5790:	a5 91       	lpm	r26, Z+
    5792:	b4 91       	lpm	r27, Z+
    5794:	9f 01       	movw	r18, r30
    5796:	fe 01       	movw	r30, r28
    5798:	ef 52       	subi	r30, 0x2F	; 47
    579a:	fe 4f       	sbci	r31, 0xFE	; 254
    579c:	80 83       	st	Z, r24
    579e:	91 83       	std	Z+1, r25	; 0x01
    57a0:	a2 83       	std	Z+2, r26	; 0x02
    57a2:	b3 83       	std	Z+3, r27	; 0x03
    57a4:	fe 01       	movw	r30, r28
    57a6:	eb 52       	subi	r30, 0x2B	; 43
    57a8:	fe 4f       	sbci	r31, 0xFE	; 254
    57aa:	31 83       	std	Z+1, r19	; 0x01
    57ac:	20 83       	st	Z, r18
    57ae:	fe 01       	movw	r30, r28
    57b0:	ef 52       	subi	r30, 0x2F	; 47
    57b2:	fe 4f       	sbci	r31, 0xFE	; 254
    57b4:	20 81       	ld	r18, Z
    57b6:	31 81       	ldd	r19, Z+1	; 0x01
    57b8:	42 81       	ldd	r20, Z+2	; 0x02
    57ba:	53 81       	ldd	r21, Z+3	; 0x03
    57bc:	fe 01       	movw	r30, r28
    57be:	e4 5b       	subi	r30, 0xB4	; 180
    57c0:	fd 4f       	sbci	r31, 0xFD	; 253
    57c2:	80 81       	ld	r24, Z
    57c4:	91 81       	ldd	r25, Z+1	; 0x01
    57c6:	a2 81       	ldd	r26, Z+2	; 0x02
    57c8:	b3 81       	ldd	r27, Z+3	; 0x03
    57ca:	82 2b       	or	r24, r18
    57cc:	93 2b       	or	r25, r19
    57ce:	a4 2b       	or	r26, r20
    57d0:	b5 2b       	or	r27, r21
    57d2:	fe 01       	movw	r30, r28
    57d4:	e4 5b       	subi	r30, 0xB4	; 180
    57d6:	fd 4f       	sbci	r31, 0xFD	; 253
    57d8:	80 83       	st	Z, r24
    57da:	91 83       	std	Z+1, r25	; 0x01
    57dc:	a2 83       	std	Z+2, r26	; 0x02
    57de:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    57e0:	fe 01       	movw	r30, r28
    57e2:	e1 53       	subi	r30, 0x31	; 49
    57e4:	fe 4f       	sbci	r31, 0xFE	; 254
    57e6:	80 e7       	ldi	r24, 0x70	; 112
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	91 83       	std	Z+1, r25	; 0x01
    57ec:	80 83       	st	Z, r24
    57ee:	fe 01       	movw	r30, r28
    57f0:	e1 53       	subi	r30, 0x31	; 49
    57f2:	fe 4f       	sbci	r31, 0xFE	; 254
    57f4:	80 81       	ld	r24, Z
    57f6:	91 81       	ldd	r25, Z+1	; 0x01
    57f8:	9c 01       	movw	r18, r24
    57fa:	f9 01       	movw	r30, r18
    57fc:	85 91       	lpm	r24, Z+
    57fe:	95 91       	lpm	r25, Z+
    5800:	a5 91       	lpm	r26, Z+
    5802:	b4 91       	lpm	r27, Z+
    5804:	9f 01       	movw	r18, r30
    5806:	fe 01       	movw	r30, r28
    5808:	e5 53       	subi	r30, 0x35	; 53
    580a:	fe 4f       	sbci	r31, 0xFE	; 254
    580c:	80 83       	st	Z, r24
    580e:	91 83       	std	Z+1, r25	; 0x01
    5810:	a2 83       	std	Z+2, r26	; 0x02
    5812:	b3 83       	std	Z+3, r27	; 0x03
    5814:	fe 01       	movw	r30, r28
    5816:	e1 53       	subi	r30, 0x31	; 49
    5818:	fe 4f       	sbci	r31, 0xFE	; 254
    581a:	31 83       	std	Z+1, r19	; 0x01
    581c:	20 83       	st	Z, r18
    581e:	fe 01       	movw	r30, r28
    5820:	e5 53       	subi	r30, 0x35	; 53
    5822:	fe 4f       	sbci	r31, 0xFE	; 254
    5824:	20 81       	ld	r18, Z
    5826:	31 81       	ldd	r19, Z+1	; 0x01
    5828:	42 81       	ldd	r20, Z+2	; 0x02
    582a:	53 81       	ldd	r21, Z+3	; 0x03
    582c:	fe 01       	movw	r30, r28
    582e:	e4 5b       	subi	r30, 0xB4	; 180
    5830:	fd 4f       	sbci	r31, 0xFD	; 253
    5832:	80 81       	ld	r24, Z
    5834:	91 81       	ldd	r25, Z+1	; 0x01
    5836:	a2 81       	ldd	r26, Z+2	; 0x02
    5838:	b3 81       	ldd	r27, Z+3	; 0x03
    583a:	82 2b       	or	r24, r18
    583c:	93 2b       	or	r25, r19
    583e:	a4 2b       	or	r26, r20
    5840:	b5 2b       	or	r27, r21
    5842:	fe 01       	movw	r30, r28
    5844:	e4 5b       	subi	r30, 0xB4	; 180
    5846:	fd 4f       	sbci	r31, 0xFD	; 253
    5848:	80 83       	st	Z, r24
    584a:	91 83       	std	Z+1, r25	; 0x01
    584c:	a2 83       	std	Z+2, r26	; 0x02
    584e:	b3 83       	std	Z+3, r27	; 0x03
    5850:	0a c5       	rjmp	.+2580   	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 15)
    5852:	fe 01       	movw	r30, r28
    5854:	ef 58       	subi	r30, 0x8F	; 143
    5856:	fd 4f       	sbci	r31, 0xFD	; 253
    5858:	84 81       	ldd	r24, Z+4	; 0x04
    585a:	8f 30       	cpi	r24, 0x0F	; 15
    585c:	08 f0       	brcs	.+2      	; 0x5860 <main+0x3e92>
    585e:	71 c0       	rjmp	.+226    	; 0x5942 <main+0x3f74>
    {
      lLEDs |= pgm_read_dword(words+def_zehnM);
    5860:	fe 01       	movw	r30, r28
    5862:	e7 53       	subi	r30, 0x37	; 55
    5864:	fe 4f       	sbci	r31, 0xFE	; 254
    5866:	80 e6       	ldi	r24, 0x60	; 96
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	91 83       	std	Z+1, r25	; 0x01
    586c:	80 83       	st	Z, r24
    586e:	fe 01       	movw	r30, r28
    5870:	e7 53       	subi	r30, 0x37	; 55
    5872:	fe 4f       	sbci	r31, 0xFE	; 254
    5874:	80 81       	ld	r24, Z
    5876:	91 81       	ldd	r25, Z+1	; 0x01
    5878:	9c 01       	movw	r18, r24
    587a:	f9 01       	movw	r30, r18
    587c:	85 91       	lpm	r24, Z+
    587e:	95 91       	lpm	r25, Z+
    5880:	a5 91       	lpm	r26, Z+
    5882:	b4 91       	lpm	r27, Z+
    5884:	9f 01       	movw	r18, r30
    5886:	fe 01       	movw	r30, r28
    5888:	eb 53       	subi	r30, 0x3B	; 59
    588a:	fe 4f       	sbci	r31, 0xFE	; 254
    588c:	80 83       	st	Z, r24
    588e:	91 83       	std	Z+1, r25	; 0x01
    5890:	a2 83       	std	Z+2, r26	; 0x02
    5892:	b3 83       	std	Z+3, r27	; 0x03
    5894:	fe 01       	movw	r30, r28
    5896:	e7 53       	subi	r30, 0x37	; 55
    5898:	fe 4f       	sbci	r31, 0xFE	; 254
    589a:	31 83       	std	Z+1, r19	; 0x01
    589c:	20 83       	st	Z, r18
    589e:	fe 01       	movw	r30, r28
    58a0:	eb 53       	subi	r30, 0x3B	; 59
    58a2:	fe 4f       	sbci	r31, 0xFE	; 254
    58a4:	20 81       	ld	r18, Z
    58a6:	31 81       	ldd	r19, Z+1	; 0x01
    58a8:	42 81       	ldd	r20, Z+2	; 0x02
    58aa:	53 81       	ldd	r21, Z+3	; 0x03
    58ac:	fe 01       	movw	r30, r28
    58ae:	e4 5b       	subi	r30, 0xB4	; 180
    58b0:	fd 4f       	sbci	r31, 0xFD	; 253
    58b2:	80 81       	ld	r24, Z
    58b4:	91 81       	ldd	r25, Z+1	; 0x01
    58b6:	a2 81       	ldd	r26, Z+2	; 0x02
    58b8:	b3 81       	ldd	r27, Z+3	; 0x03
    58ba:	82 2b       	or	r24, r18
    58bc:	93 2b       	or	r25, r19
    58be:	a4 2b       	or	r26, r20
    58c0:	b5 2b       	or	r27, r21
    58c2:	fe 01       	movw	r30, r28
    58c4:	e4 5b       	subi	r30, 0xB4	; 180
    58c6:	fd 4f       	sbci	r31, 0xFD	; 253
    58c8:	80 83       	st	Z, r24
    58ca:	91 83       	std	Z+1, r25	; 0x01
    58cc:	a2 83       	std	Z+2, r26	; 0x02
    58ce:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    58d0:	fe 01       	movw	r30, r28
    58d2:	ed 53       	subi	r30, 0x3D	; 61
    58d4:	fe 4f       	sbci	r31, 0xFE	; 254
    58d6:	80 e7       	ldi	r24, 0x70	; 112
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	91 83       	std	Z+1, r25	; 0x01
    58dc:	80 83       	st	Z, r24
    58de:	fe 01       	movw	r30, r28
    58e0:	ed 53       	subi	r30, 0x3D	; 61
    58e2:	fe 4f       	sbci	r31, 0xFE	; 254
    58e4:	80 81       	ld	r24, Z
    58e6:	91 81       	ldd	r25, Z+1	; 0x01
    58e8:	9c 01       	movw	r18, r24
    58ea:	f9 01       	movw	r30, r18
    58ec:	85 91       	lpm	r24, Z+
    58ee:	95 91       	lpm	r25, Z+
    58f0:	a5 91       	lpm	r26, Z+
    58f2:	b4 91       	lpm	r27, Z+
    58f4:	9f 01       	movw	r18, r30
    58f6:	fe 01       	movw	r30, r28
    58f8:	e1 54       	subi	r30, 0x41	; 65
    58fa:	fe 4f       	sbci	r31, 0xFE	; 254
    58fc:	80 83       	st	Z, r24
    58fe:	91 83       	std	Z+1, r25	; 0x01
    5900:	a2 83       	std	Z+2, r26	; 0x02
    5902:	b3 83       	std	Z+3, r27	; 0x03
    5904:	fe 01       	movw	r30, r28
    5906:	ed 53       	subi	r30, 0x3D	; 61
    5908:	fe 4f       	sbci	r31, 0xFE	; 254
    590a:	31 83       	std	Z+1, r19	; 0x01
    590c:	20 83       	st	Z, r18
    590e:	fe 01       	movw	r30, r28
    5910:	e1 54       	subi	r30, 0x41	; 65
    5912:	fe 4f       	sbci	r31, 0xFE	; 254
    5914:	20 81       	ld	r18, Z
    5916:	31 81       	ldd	r19, Z+1	; 0x01
    5918:	42 81       	ldd	r20, Z+2	; 0x02
    591a:	53 81       	ldd	r21, Z+3	; 0x03
    591c:	fe 01       	movw	r30, r28
    591e:	e4 5b       	subi	r30, 0xB4	; 180
    5920:	fd 4f       	sbci	r31, 0xFD	; 253
    5922:	80 81       	ld	r24, Z
    5924:	91 81       	ldd	r25, Z+1	; 0x01
    5926:	a2 81       	ldd	r26, Z+2	; 0x02
    5928:	b3 81       	ldd	r27, Z+3	; 0x03
    592a:	82 2b       	or	r24, r18
    592c:	93 2b       	or	r25, r19
    592e:	a4 2b       	or	r26, r20
    5930:	b5 2b       	or	r27, r21
    5932:	fe 01       	movw	r30, r28
    5934:	e4 5b       	subi	r30, 0xB4	; 180
    5936:	fd 4f       	sbci	r31, 0xFD	; 253
    5938:	80 83       	st	Z, r24
    593a:	91 83       	std	Z+1, r25	; 0x01
    593c:	a2 83       	std	Z+2, r26	; 0x02
    593e:	b3 83       	std	Z+3, r27	; 0x03
    5940:	92 c4       	rjmp	.+2340   	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 20)
    5942:	fe 01       	movw	r30, r28
    5944:	ef 58       	subi	r30, 0x8F	; 143
    5946:	fd 4f       	sbci	r31, 0xFD	; 253
    5948:	84 81       	ldd	r24, Z+4	; 0x04
    594a:	84 31       	cpi	r24, 0x14	; 20
    594c:	08 f0       	brcs	.+2      	; 0x5950 <main+0x3f82>
    594e:	71 c0       	rjmp	.+226    	; 0x5a32 <main+0x4064>
    {
      lLEDs |= pgm_read_dword(words+def_viertelM);
    5950:	fe 01       	movw	r30, r28
    5952:	e3 54       	subi	r30, 0x43	; 67
    5954:	fe 4f       	sbci	r31, 0xFE	; 254
    5956:	8c e6       	ldi	r24, 0x6C	; 108
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	91 83       	std	Z+1, r25	; 0x01
    595c:	80 83       	st	Z, r24
    595e:	fe 01       	movw	r30, r28
    5960:	e3 54       	subi	r30, 0x43	; 67
    5962:	fe 4f       	sbci	r31, 0xFE	; 254
    5964:	80 81       	ld	r24, Z
    5966:	91 81       	ldd	r25, Z+1	; 0x01
    5968:	9c 01       	movw	r18, r24
    596a:	f9 01       	movw	r30, r18
    596c:	85 91       	lpm	r24, Z+
    596e:	95 91       	lpm	r25, Z+
    5970:	a5 91       	lpm	r26, Z+
    5972:	b4 91       	lpm	r27, Z+
    5974:	9f 01       	movw	r18, r30
    5976:	fe 01       	movw	r30, r28
    5978:	e7 54       	subi	r30, 0x47	; 71
    597a:	fe 4f       	sbci	r31, 0xFE	; 254
    597c:	80 83       	st	Z, r24
    597e:	91 83       	std	Z+1, r25	; 0x01
    5980:	a2 83       	std	Z+2, r26	; 0x02
    5982:	b3 83       	std	Z+3, r27	; 0x03
    5984:	fe 01       	movw	r30, r28
    5986:	e3 54       	subi	r30, 0x43	; 67
    5988:	fe 4f       	sbci	r31, 0xFE	; 254
    598a:	31 83       	std	Z+1, r19	; 0x01
    598c:	20 83       	st	Z, r18
    598e:	fe 01       	movw	r30, r28
    5990:	e7 54       	subi	r30, 0x47	; 71
    5992:	fe 4f       	sbci	r31, 0xFE	; 254
    5994:	20 81       	ld	r18, Z
    5996:	31 81       	ldd	r19, Z+1	; 0x01
    5998:	42 81       	ldd	r20, Z+2	; 0x02
    599a:	53 81       	ldd	r21, Z+3	; 0x03
    599c:	fe 01       	movw	r30, r28
    599e:	e4 5b       	subi	r30, 0xB4	; 180
    59a0:	fd 4f       	sbci	r31, 0xFD	; 253
    59a2:	80 81       	ld	r24, Z
    59a4:	91 81       	ldd	r25, Z+1	; 0x01
    59a6:	a2 81       	ldd	r26, Z+2	; 0x02
    59a8:	b3 81       	ldd	r27, Z+3	; 0x03
    59aa:	82 2b       	or	r24, r18
    59ac:	93 2b       	or	r25, r19
    59ae:	a4 2b       	or	r26, r20
    59b0:	b5 2b       	or	r27, r21
    59b2:	fe 01       	movw	r30, r28
    59b4:	e4 5b       	subi	r30, 0xB4	; 180
    59b6:	fd 4f       	sbci	r31, 0xFD	; 253
    59b8:	80 83       	st	Z, r24
    59ba:	91 83       	std	Z+1, r25	; 0x01
    59bc:	a2 83       	std	Z+2, r26	; 0x02
    59be:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    59c0:	fe 01       	movw	r30, r28
    59c2:	e9 54       	subi	r30, 0x49	; 73
    59c4:	fe 4f       	sbci	r31, 0xFE	; 254
    59c6:	80 e7       	ldi	r24, 0x70	; 112
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	91 83       	std	Z+1, r25	; 0x01
    59cc:	80 83       	st	Z, r24
    59ce:	fe 01       	movw	r30, r28
    59d0:	e9 54       	subi	r30, 0x49	; 73
    59d2:	fe 4f       	sbci	r31, 0xFE	; 254
    59d4:	80 81       	ld	r24, Z
    59d6:	91 81       	ldd	r25, Z+1	; 0x01
    59d8:	9c 01       	movw	r18, r24
    59da:	f9 01       	movw	r30, r18
    59dc:	85 91       	lpm	r24, Z+
    59de:	95 91       	lpm	r25, Z+
    59e0:	a5 91       	lpm	r26, Z+
    59e2:	b4 91       	lpm	r27, Z+
    59e4:	9f 01       	movw	r18, r30
    59e6:	fe 01       	movw	r30, r28
    59e8:	ed 54       	subi	r30, 0x4D	; 77
    59ea:	fe 4f       	sbci	r31, 0xFE	; 254
    59ec:	80 83       	st	Z, r24
    59ee:	91 83       	std	Z+1, r25	; 0x01
    59f0:	a2 83       	std	Z+2, r26	; 0x02
    59f2:	b3 83       	std	Z+3, r27	; 0x03
    59f4:	fe 01       	movw	r30, r28
    59f6:	e9 54       	subi	r30, 0x49	; 73
    59f8:	fe 4f       	sbci	r31, 0xFE	; 254
    59fa:	31 83       	std	Z+1, r19	; 0x01
    59fc:	20 83       	st	Z, r18
    59fe:	fe 01       	movw	r30, r28
    5a00:	ed 54       	subi	r30, 0x4D	; 77
    5a02:	fe 4f       	sbci	r31, 0xFE	; 254
    5a04:	20 81       	ld	r18, Z
    5a06:	31 81       	ldd	r19, Z+1	; 0x01
    5a08:	42 81       	ldd	r20, Z+2	; 0x02
    5a0a:	53 81       	ldd	r21, Z+3	; 0x03
    5a0c:	fe 01       	movw	r30, r28
    5a0e:	e4 5b       	subi	r30, 0xB4	; 180
    5a10:	fd 4f       	sbci	r31, 0xFD	; 253
    5a12:	80 81       	ld	r24, Z
    5a14:	91 81       	ldd	r25, Z+1	; 0x01
    5a16:	a2 81       	ldd	r26, Z+2	; 0x02
    5a18:	b3 81       	ldd	r27, Z+3	; 0x03
    5a1a:	82 2b       	or	r24, r18
    5a1c:	93 2b       	or	r25, r19
    5a1e:	a4 2b       	or	r26, r20
    5a20:	b5 2b       	or	r27, r21
    5a22:	fe 01       	movw	r30, r28
    5a24:	e4 5b       	subi	r30, 0xB4	; 180
    5a26:	fd 4f       	sbci	r31, 0xFD	; 253
    5a28:	80 83       	st	Z, r24
    5a2a:	91 83       	std	Z+1, r25	; 0x01
    5a2c:	a2 83       	std	Z+2, r26	; 0x02
    5a2e:	b3 83       	std	Z+3, r27	; 0x03
    5a30:	1a c4       	rjmp	.+2100   	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 25)
    5a32:	fe 01       	movw	r30, r28
    5a34:	ef 58       	subi	r30, 0x8F	; 143
    5a36:	fd 4f       	sbci	r31, 0xFD	; 253
    5a38:	84 81       	ldd	r24, Z+4	; 0x04
    5a3a:	89 31       	cpi	r24, 0x19	; 25
    5a3c:	08 f0       	brcs	.+2      	; 0x5a40 <main+0x4072>
    5a3e:	71 c0       	rjmp	.+226    	; 0x5b22 <main+0x4154>
    {
      lLEDs |= pgm_read_dword(words+def_zwanzigM);
    5a40:	fe 01       	movw	r30, r28
    5a42:	ef 54       	subi	r30, 0x4F	; 79
    5a44:	fe 4f       	sbci	r31, 0xFE	; 254
    5a46:	84 e6       	ldi	r24, 0x64	; 100
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	91 83       	std	Z+1, r25	; 0x01
    5a4c:	80 83       	st	Z, r24
    5a4e:	fe 01       	movw	r30, r28
    5a50:	ef 54       	subi	r30, 0x4F	; 79
    5a52:	fe 4f       	sbci	r31, 0xFE	; 254
    5a54:	80 81       	ld	r24, Z
    5a56:	91 81       	ldd	r25, Z+1	; 0x01
    5a58:	9c 01       	movw	r18, r24
    5a5a:	f9 01       	movw	r30, r18
    5a5c:	85 91       	lpm	r24, Z+
    5a5e:	95 91       	lpm	r25, Z+
    5a60:	a5 91       	lpm	r26, Z+
    5a62:	b4 91       	lpm	r27, Z+
    5a64:	9f 01       	movw	r18, r30
    5a66:	fe 01       	movw	r30, r28
    5a68:	e3 55       	subi	r30, 0x53	; 83
    5a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a6c:	80 83       	st	Z, r24
    5a6e:	91 83       	std	Z+1, r25	; 0x01
    5a70:	a2 83       	std	Z+2, r26	; 0x02
    5a72:	b3 83       	std	Z+3, r27	; 0x03
    5a74:	fe 01       	movw	r30, r28
    5a76:	ef 54       	subi	r30, 0x4F	; 79
    5a78:	fe 4f       	sbci	r31, 0xFE	; 254
    5a7a:	31 83       	std	Z+1, r19	; 0x01
    5a7c:	20 83       	st	Z, r18
    5a7e:	fe 01       	movw	r30, r28
    5a80:	e3 55       	subi	r30, 0x53	; 83
    5a82:	fe 4f       	sbci	r31, 0xFE	; 254
    5a84:	20 81       	ld	r18, Z
    5a86:	31 81       	ldd	r19, Z+1	; 0x01
    5a88:	42 81       	ldd	r20, Z+2	; 0x02
    5a8a:	53 81       	ldd	r21, Z+3	; 0x03
    5a8c:	fe 01       	movw	r30, r28
    5a8e:	e4 5b       	subi	r30, 0xB4	; 180
    5a90:	fd 4f       	sbci	r31, 0xFD	; 253
    5a92:	80 81       	ld	r24, Z
    5a94:	91 81       	ldd	r25, Z+1	; 0x01
    5a96:	a2 81       	ldd	r26, Z+2	; 0x02
    5a98:	b3 81       	ldd	r27, Z+3	; 0x03
    5a9a:	82 2b       	or	r24, r18
    5a9c:	93 2b       	or	r25, r19
    5a9e:	a4 2b       	or	r26, r20
    5aa0:	b5 2b       	or	r27, r21
    5aa2:	fe 01       	movw	r30, r28
    5aa4:	e4 5b       	subi	r30, 0xB4	; 180
    5aa6:	fd 4f       	sbci	r31, 0xFD	; 253
    5aa8:	80 83       	st	Z, r24
    5aaa:	91 83       	std	Z+1, r25	; 0x01
    5aac:	a2 83       	std	Z+2, r26	; 0x02
    5aae:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    5ab0:	fe 01       	movw	r30, r28
    5ab2:	e5 55       	subi	r30, 0x55	; 85
    5ab4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ab6:	80 e7       	ldi	r24, 0x70	; 112
    5ab8:	90 e0       	ldi	r25, 0x00	; 0
    5aba:	91 83       	std	Z+1, r25	; 0x01
    5abc:	80 83       	st	Z, r24
    5abe:	fe 01       	movw	r30, r28
    5ac0:	e5 55       	subi	r30, 0x55	; 85
    5ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    5ac4:	80 81       	ld	r24, Z
    5ac6:	91 81       	ldd	r25, Z+1	; 0x01
    5ac8:	9c 01       	movw	r18, r24
    5aca:	f9 01       	movw	r30, r18
    5acc:	85 91       	lpm	r24, Z+
    5ace:	95 91       	lpm	r25, Z+
    5ad0:	a5 91       	lpm	r26, Z+
    5ad2:	b4 91       	lpm	r27, Z+
    5ad4:	9f 01       	movw	r18, r30
    5ad6:	fe 01       	movw	r30, r28
    5ad8:	e9 55       	subi	r30, 0x59	; 89
    5ada:	fe 4f       	sbci	r31, 0xFE	; 254
    5adc:	80 83       	st	Z, r24
    5ade:	91 83       	std	Z+1, r25	; 0x01
    5ae0:	a2 83       	std	Z+2, r26	; 0x02
    5ae2:	b3 83       	std	Z+3, r27	; 0x03
    5ae4:	fe 01       	movw	r30, r28
    5ae6:	e5 55       	subi	r30, 0x55	; 85
    5ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    5aea:	31 83       	std	Z+1, r19	; 0x01
    5aec:	20 83       	st	Z, r18
    5aee:	fe 01       	movw	r30, r28
    5af0:	e9 55       	subi	r30, 0x59	; 89
    5af2:	fe 4f       	sbci	r31, 0xFE	; 254
    5af4:	20 81       	ld	r18, Z
    5af6:	31 81       	ldd	r19, Z+1	; 0x01
    5af8:	42 81       	ldd	r20, Z+2	; 0x02
    5afa:	53 81       	ldd	r21, Z+3	; 0x03
    5afc:	fe 01       	movw	r30, r28
    5afe:	e4 5b       	subi	r30, 0xB4	; 180
    5b00:	fd 4f       	sbci	r31, 0xFD	; 253
    5b02:	80 81       	ld	r24, Z
    5b04:	91 81       	ldd	r25, Z+1	; 0x01
    5b06:	a2 81       	ldd	r26, Z+2	; 0x02
    5b08:	b3 81       	ldd	r27, Z+3	; 0x03
    5b0a:	82 2b       	or	r24, r18
    5b0c:	93 2b       	or	r25, r19
    5b0e:	a4 2b       	or	r26, r20
    5b10:	b5 2b       	or	r27, r21
    5b12:	fe 01       	movw	r30, r28
    5b14:	e4 5b       	subi	r30, 0xB4	; 180
    5b16:	fd 4f       	sbci	r31, 0xFD	; 253
    5b18:	80 83       	st	Z, r24
    5b1a:	91 83       	std	Z+1, r25	; 0x01
    5b1c:	a2 83       	std	Z+2, r26	; 0x02
    5b1e:	b3 83       	std	Z+3, r27	; 0x03
    5b20:	a2 c3       	rjmp	.+1860   	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 30)
    5b22:	fe 01       	movw	r30, r28
    5b24:	ef 58       	subi	r30, 0x8F	; 143
    5b26:	fd 4f       	sbci	r31, 0xFD	; 253
    5b28:	84 81       	ldd	r24, Z+4	; 0x04
    5b2a:	8e 31       	cpi	r24, 0x1E	; 30
    5b2c:	08 f0       	brcs	.+2      	; 0x5b30 <main+0x4162>
    5b2e:	ae c0       	rjmp	.+348    	; 0x5c8c <main+0x42be>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    5b30:	fe 01       	movw	r30, r28
    5b32:	eb 55       	subi	r30, 0x5B	; 91
    5b34:	fe 4f       	sbci	r31, 0xFE	; 254
    5b36:	8c e5       	ldi	r24, 0x5C	; 92
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	91 83       	std	Z+1, r25	; 0x01
    5b3c:	80 83       	st	Z, r24
    5b3e:	fe 01       	movw	r30, r28
    5b40:	eb 55       	subi	r30, 0x5B	; 91
    5b42:	fe 4f       	sbci	r31, 0xFE	; 254
    5b44:	80 81       	ld	r24, Z
    5b46:	91 81       	ldd	r25, Z+1	; 0x01
    5b48:	9c 01       	movw	r18, r24
    5b4a:	f9 01       	movw	r30, r18
    5b4c:	85 91       	lpm	r24, Z+
    5b4e:	95 91       	lpm	r25, Z+
    5b50:	a5 91       	lpm	r26, Z+
    5b52:	b4 91       	lpm	r27, Z+
    5b54:	9f 01       	movw	r18, r30
    5b56:	fe 01       	movw	r30, r28
    5b58:	ef 55       	subi	r30, 0x5F	; 95
    5b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    5b5c:	80 83       	st	Z, r24
    5b5e:	91 83       	std	Z+1, r25	; 0x01
    5b60:	a2 83       	std	Z+2, r26	; 0x02
    5b62:	b3 83       	std	Z+3, r27	; 0x03
    5b64:	fe 01       	movw	r30, r28
    5b66:	eb 55       	subi	r30, 0x5B	; 91
    5b68:	fe 4f       	sbci	r31, 0xFE	; 254
    5b6a:	31 83       	std	Z+1, r19	; 0x01
    5b6c:	20 83       	st	Z, r18
    5b6e:	fe 01       	movw	r30, r28
    5b70:	ef 55       	subi	r30, 0x5F	; 95
    5b72:	fe 4f       	sbci	r31, 0xFE	; 254
    5b74:	20 81       	ld	r18, Z
    5b76:	31 81       	ldd	r19, Z+1	; 0x01
    5b78:	42 81       	ldd	r20, Z+2	; 0x02
    5b7a:	53 81       	ldd	r21, Z+3	; 0x03
    5b7c:	fe 01       	movw	r30, r28
    5b7e:	e4 5b       	subi	r30, 0xB4	; 180
    5b80:	fd 4f       	sbci	r31, 0xFD	; 253
    5b82:	80 81       	ld	r24, Z
    5b84:	91 81       	ldd	r25, Z+1	; 0x01
    5b86:	a2 81       	ldd	r26, Z+2	; 0x02
    5b88:	b3 81       	ldd	r27, Z+3	; 0x03
    5b8a:	82 2b       	or	r24, r18
    5b8c:	93 2b       	or	r25, r19
    5b8e:	a4 2b       	or	r26, r20
    5b90:	b5 2b       	or	r27, r21
    5b92:	fe 01       	movw	r30, r28
    5b94:	e4 5b       	subi	r30, 0xB4	; 180
    5b96:	fd 4f       	sbci	r31, 0xFD	; 253
    5b98:	80 83       	st	Z, r24
    5b9a:	91 83       	std	Z+1, r25	; 0x01
    5b9c:	a2 83       	std	Z+2, r26	; 0x02
    5b9e:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    5ba0:	fe 01       	movw	r30, r28
    5ba2:	e1 56       	subi	r30, 0x61	; 97
    5ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ba6:	84 e7       	ldi	r24, 0x74	; 116
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	91 83       	std	Z+1, r25	; 0x01
    5bac:	80 83       	st	Z, r24
    5bae:	fe 01       	movw	r30, r28
    5bb0:	e1 56       	subi	r30, 0x61	; 97
    5bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    5bb4:	80 81       	ld	r24, Z
    5bb6:	91 81       	ldd	r25, Z+1	; 0x01
    5bb8:	9c 01       	movw	r18, r24
    5bba:	f9 01       	movw	r30, r18
    5bbc:	85 91       	lpm	r24, Z+
    5bbe:	95 91       	lpm	r25, Z+
    5bc0:	a5 91       	lpm	r26, Z+
    5bc2:	b4 91       	lpm	r27, Z+
    5bc4:	9f 01       	movw	r18, r30
    5bc6:	fe 01       	movw	r30, r28
    5bc8:	e5 56       	subi	r30, 0x65	; 101
    5bca:	fe 4f       	sbci	r31, 0xFE	; 254
    5bcc:	80 83       	st	Z, r24
    5bce:	91 83       	std	Z+1, r25	; 0x01
    5bd0:	a2 83       	std	Z+2, r26	; 0x02
    5bd2:	b3 83       	std	Z+3, r27	; 0x03
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	e1 56       	subi	r30, 0x61	; 97
    5bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    5bda:	31 83       	std	Z+1, r19	; 0x01
    5bdc:	20 83       	st	Z, r18
    5bde:	fe 01       	movw	r30, r28
    5be0:	e5 56       	subi	r30, 0x65	; 101
    5be2:	fe 4f       	sbci	r31, 0xFE	; 254
    5be4:	20 81       	ld	r18, Z
    5be6:	31 81       	ldd	r19, Z+1	; 0x01
    5be8:	42 81       	ldd	r20, Z+2	; 0x02
    5bea:	53 81       	ldd	r21, Z+3	; 0x03
    5bec:	fe 01       	movw	r30, r28
    5bee:	e4 5b       	subi	r30, 0xB4	; 180
    5bf0:	fd 4f       	sbci	r31, 0xFD	; 253
    5bf2:	80 81       	ld	r24, Z
    5bf4:	91 81       	ldd	r25, Z+1	; 0x01
    5bf6:	a2 81       	ldd	r26, Z+2	; 0x02
    5bf8:	b3 81       	ldd	r27, Z+3	; 0x03
    5bfa:	82 2b       	or	r24, r18
    5bfc:	93 2b       	or	r25, r19
    5bfe:	a4 2b       	or	r26, r20
    5c00:	b5 2b       	or	r27, r21
    5c02:	fe 01       	movw	r30, r28
    5c04:	e4 5b       	subi	r30, 0xB4	; 180
    5c06:	fd 4f       	sbci	r31, 0xFD	; 253
    5c08:	80 83       	st	Z, r24
    5c0a:	91 83       	std	Z+1, r25	; 0x01
    5c0c:	a2 83       	std	Z+2, r26	; 0x02
    5c0e:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_halb);
    5c10:	fe 01       	movw	r30, r28
    5c12:	e7 56       	subi	r30, 0x67	; 103
    5c14:	fe 4f       	sbci	r31, 0xFE	; 254
    5c16:	88 e7       	ldi	r24, 0x78	; 120
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	91 83       	std	Z+1, r25	; 0x01
    5c1c:	80 83       	st	Z, r24
    5c1e:	fe 01       	movw	r30, r28
    5c20:	e7 56       	subi	r30, 0x67	; 103
    5c22:	fe 4f       	sbci	r31, 0xFE	; 254
    5c24:	80 81       	ld	r24, Z
    5c26:	91 81       	ldd	r25, Z+1	; 0x01
    5c28:	9c 01       	movw	r18, r24
    5c2a:	f9 01       	movw	r30, r18
    5c2c:	85 91       	lpm	r24, Z+
    5c2e:	95 91       	lpm	r25, Z+
    5c30:	a5 91       	lpm	r26, Z+
    5c32:	b4 91       	lpm	r27, Z+
    5c34:	9f 01       	movw	r18, r30
    5c36:	fe 01       	movw	r30, r28
    5c38:	eb 56       	subi	r30, 0x6B	; 107
    5c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    5c3c:	80 83       	st	Z, r24
    5c3e:	91 83       	std	Z+1, r25	; 0x01
    5c40:	a2 83       	std	Z+2, r26	; 0x02
    5c42:	b3 83       	std	Z+3, r27	; 0x03
    5c44:	fe 01       	movw	r30, r28
    5c46:	e7 56       	subi	r30, 0x67	; 103
    5c48:	fe 4f       	sbci	r31, 0xFE	; 254
    5c4a:	31 83       	std	Z+1, r19	; 0x01
    5c4c:	20 83       	st	Z, r18
    5c4e:	fe 01       	movw	r30, r28
    5c50:	eb 56       	subi	r30, 0x6B	; 107
    5c52:	fe 4f       	sbci	r31, 0xFE	; 254
    5c54:	20 81       	ld	r18, Z
    5c56:	31 81       	ldd	r19, Z+1	; 0x01
    5c58:	42 81       	ldd	r20, Z+2	; 0x02
    5c5a:	53 81       	ldd	r21, Z+3	; 0x03
    5c5c:	fe 01       	movw	r30, r28
    5c5e:	e4 5b       	subi	r30, 0xB4	; 180
    5c60:	fd 4f       	sbci	r31, 0xFD	; 253
    5c62:	80 81       	ld	r24, Z
    5c64:	91 81       	ldd	r25, Z+1	; 0x01
    5c66:	a2 81       	ldd	r26, Z+2	; 0x02
    5c68:	b3 81       	ldd	r27, Z+3	; 0x03
    5c6a:	82 2b       	or	r24, r18
    5c6c:	93 2b       	or	r25, r19
    5c6e:	a4 2b       	or	r26, r20
    5c70:	b5 2b       	or	r27, r21
    5c72:	fe 01       	movw	r30, r28
    5c74:	e4 5b       	subi	r30, 0xB4	; 180
    5c76:	fd 4f       	sbci	r31, 0xFD	; 253
    5c78:	80 83       	st	Z, r24
    5c7a:	91 83       	std	Z+1, r25	; 0x01
    5c7c:	a2 83       	std	Z+2, r26	; 0x02
    5c7e:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    5c80:	fe 01       	movw	r30, r28
    5c82:	e5 5b       	subi	r30, 0xB5	; 181
    5c84:	fd 4f       	sbci	r31, 0xFD	; 253
    5c86:	81 e0       	ldi	r24, 0x01	; 1
    5c88:	80 83       	st	Z, r24
    5c8a:	ed c2       	rjmp	.+1498   	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 35)
    5c8c:	fe 01       	movw	r30, r28
    5c8e:	ef 58       	subi	r30, 0x8F	; 143
    5c90:	fd 4f       	sbci	r31, 0xFD	; 253
    5c92:	84 81       	ldd	r24, Z+4	; 0x04
    5c94:	83 32       	cpi	r24, 0x23	; 35
    5c96:	08 f0       	brcs	.+2      	; 0x5c9a <main+0x42cc>
    5c98:	3e c0       	rjmp	.+124    	; 0x5d16 <main+0x4348>
    {
      lLEDs |= pgm_read_dword(words+def_halb);
    5c9a:	fe 01       	movw	r30, r28
    5c9c:	ed 56       	subi	r30, 0x6D	; 109
    5c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    5ca0:	88 e7       	ldi	r24, 0x78	; 120
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	91 83       	std	Z+1, r25	; 0x01
    5ca6:	80 83       	st	Z, r24
    5ca8:	fe 01       	movw	r30, r28
    5caa:	ed 56       	subi	r30, 0x6D	; 109
    5cac:	fe 4f       	sbci	r31, 0xFE	; 254
    5cae:	80 81       	ld	r24, Z
    5cb0:	91 81       	ldd	r25, Z+1	; 0x01
    5cb2:	9c 01       	movw	r18, r24
    5cb4:	f9 01       	movw	r30, r18
    5cb6:	85 91       	lpm	r24, Z+
    5cb8:	95 91       	lpm	r25, Z+
    5cba:	a5 91       	lpm	r26, Z+
    5cbc:	b4 91       	lpm	r27, Z+
    5cbe:	9f 01       	movw	r18, r30
    5cc0:	fe 01       	movw	r30, r28
    5cc2:	e1 57       	subi	r30, 0x71	; 113
    5cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    5cc6:	80 83       	st	Z, r24
    5cc8:	91 83       	std	Z+1, r25	; 0x01
    5cca:	a2 83       	std	Z+2, r26	; 0x02
    5ccc:	b3 83       	std	Z+3, r27	; 0x03
    5cce:	fe 01       	movw	r30, r28
    5cd0:	ed 56       	subi	r30, 0x6D	; 109
    5cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    5cd4:	31 83       	std	Z+1, r19	; 0x01
    5cd6:	20 83       	st	Z, r18
    5cd8:	fe 01       	movw	r30, r28
    5cda:	e1 57       	subi	r30, 0x71	; 113
    5cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    5cde:	20 81       	ld	r18, Z
    5ce0:	31 81       	ldd	r19, Z+1	; 0x01
    5ce2:	42 81       	ldd	r20, Z+2	; 0x02
    5ce4:	53 81       	ldd	r21, Z+3	; 0x03
    5ce6:	fe 01       	movw	r30, r28
    5ce8:	e4 5b       	subi	r30, 0xB4	; 180
    5cea:	fd 4f       	sbci	r31, 0xFD	; 253
    5cec:	80 81       	ld	r24, Z
    5cee:	91 81       	ldd	r25, Z+1	; 0x01
    5cf0:	a2 81       	ldd	r26, Z+2	; 0x02
    5cf2:	b3 81       	ldd	r27, Z+3	; 0x03
    5cf4:	82 2b       	or	r24, r18
    5cf6:	93 2b       	or	r25, r19
    5cf8:	a4 2b       	or	r26, r20
    5cfa:	b5 2b       	or	r27, r21
    5cfc:	fe 01       	movw	r30, r28
    5cfe:	e4 5b       	subi	r30, 0xB4	; 180
    5d00:	fd 4f       	sbci	r31, 0xFD	; 253
    5d02:	80 83       	st	Z, r24
    5d04:	91 83       	std	Z+1, r25	; 0x01
    5d06:	a2 83       	std	Z+2, r26	; 0x02
    5d08:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    5d0a:	fe 01       	movw	r30, r28
    5d0c:	e5 5b       	subi	r30, 0xB5	; 181
    5d0e:	fd 4f       	sbci	r31, 0xFD	; 253
    5d10:	81 e0       	ldi	r24, 0x01	; 1
    5d12:	80 83       	st	Z, r24
    5d14:	a8 c2       	rjmp	.+1360   	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 40)
    5d16:	fe 01       	movw	r30, r28
    5d18:	ef 58       	subi	r30, 0x8F	; 143
    5d1a:	fd 4f       	sbci	r31, 0xFD	; 253
    5d1c:	84 81       	ldd	r24, Z+4	; 0x04
    5d1e:	88 32       	cpi	r24, 0x28	; 40
    5d20:	08 f0       	brcs	.+2      	; 0x5d24 <main+0x4356>
    5d22:	ae c0       	rjmp	.+348    	; 0x5e80 <main+0x44b2>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    5d24:	fe 01       	movw	r30, r28
    5d26:	e3 57       	subi	r30, 0x73	; 115
    5d28:	fe 4f       	sbci	r31, 0xFE	; 254
    5d2a:	8c e5       	ldi	r24, 0x5C	; 92
    5d2c:	90 e0       	ldi	r25, 0x00	; 0
    5d2e:	91 83       	std	Z+1, r25	; 0x01
    5d30:	80 83       	st	Z, r24
    5d32:	fe 01       	movw	r30, r28
    5d34:	e3 57       	subi	r30, 0x73	; 115
    5d36:	fe 4f       	sbci	r31, 0xFE	; 254
    5d38:	80 81       	ld	r24, Z
    5d3a:	91 81       	ldd	r25, Z+1	; 0x01
    5d3c:	9c 01       	movw	r18, r24
    5d3e:	f9 01       	movw	r30, r18
    5d40:	85 91       	lpm	r24, Z+
    5d42:	95 91       	lpm	r25, Z+
    5d44:	a5 91       	lpm	r26, Z+
    5d46:	b4 91       	lpm	r27, Z+
    5d48:	9f 01       	movw	r18, r30
    5d4a:	fe 01       	movw	r30, r28
    5d4c:	e7 57       	subi	r30, 0x77	; 119
    5d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    5d50:	80 83       	st	Z, r24
    5d52:	91 83       	std	Z+1, r25	; 0x01
    5d54:	a2 83       	std	Z+2, r26	; 0x02
    5d56:	b3 83       	std	Z+3, r27	; 0x03
    5d58:	fe 01       	movw	r30, r28
    5d5a:	e3 57       	subi	r30, 0x73	; 115
    5d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    5d5e:	31 83       	std	Z+1, r19	; 0x01
    5d60:	20 83       	st	Z, r18
    5d62:	fe 01       	movw	r30, r28
    5d64:	e7 57       	subi	r30, 0x77	; 119
    5d66:	fe 4f       	sbci	r31, 0xFE	; 254
    5d68:	20 81       	ld	r18, Z
    5d6a:	31 81       	ldd	r19, Z+1	; 0x01
    5d6c:	42 81       	ldd	r20, Z+2	; 0x02
    5d6e:	53 81       	ldd	r21, Z+3	; 0x03
    5d70:	fe 01       	movw	r30, r28
    5d72:	e4 5b       	subi	r30, 0xB4	; 180
    5d74:	fd 4f       	sbci	r31, 0xFD	; 253
    5d76:	80 81       	ld	r24, Z
    5d78:	91 81       	ldd	r25, Z+1	; 0x01
    5d7a:	a2 81       	ldd	r26, Z+2	; 0x02
    5d7c:	b3 81       	ldd	r27, Z+3	; 0x03
    5d7e:	82 2b       	or	r24, r18
    5d80:	93 2b       	or	r25, r19
    5d82:	a4 2b       	or	r26, r20
    5d84:	b5 2b       	or	r27, r21
    5d86:	fe 01       	movw	r30, r28
    5d88:	e4 5b       	subi	r30, 0xB4	; 180
    5d8a:	fd 4f       	sbci	r31, 0xFD	; 253
    5d8c:	80 83       	st	Z, r24
    5d8e:	91 83       	std	Z+1, r25	; 0x01
    5d90:	a2 83       	std	Z+2, r26	; 0x02
    5d92:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    5d94:	fe 01       	movw	r30, r28
    5d96:	e9 57       	subi	r30, 0x79	; 121
    5d98:	fe 4f       	sbci	r31, 0xFE	; 254
    5d9a:	80 e7       	ldi	r24, 0x70	; 112
    5d9c:	90 e0       	ldi	r25, 0x00	; 0
    5d9e:	91 83       	std	Z+1, r25	; 0x01
    5da0:	80 83       	st	Z, r24
    5da2:	fe 01       	movw	r30, r28
    5da4:	e9 57       	subi	r30, 0x79	; 121
    5da6:	fe 4f       	sbci	r31, 0xFE	; 254
    5da8:	80 81       	ld	r24, Z
    5daa:	91 81       	ldd	r25, Z+1	; 0x01
    5dac:	9c 01       	movw	r18, r24
    5dae:	f9 01       	movw	r30, r18
    5db0:	85 91       	lpm	r24, Z+
    5db2:	95 91       	lpm	r25, Z+
    5db4:	a5 91       	lpm	r26, Z+
    5db6:	b4 91       	lpm	r27, Z+
    5db8:	9f 01       	movw	r18, r30
    5dba:	fe 01       	movw	r30, r28
    5dbc:	ed 57       	subi	r30, 0x7D	; 125
    5dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    5dc0:	80 83       	st	Z, r24
    5dc2:	91 83       	std	Z+1, r25	; 0x01
    5dc4:	a2 83       	std	Z+2, r26	; 0x02
    5dc6:	b3 83       	std	Z+3, r27	; 0x03
    5dc8:	fe 01       	movw	r30, r28
    5dca:	e9 57       	subi	r30, 0x79	; 121
    5dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    5dce:	31 83       	std	Z+1, r19	; 0x01
    5dd0:	20 83       	st	Z, r18
    5dd2:	fe 01       	movw	r30, r28
    5dd4:	ed 57       	subi	r30, 0x7D	; 125
    5dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    5dd8:	20 81       	ld	r18, Z
    5dda:	31 81       	ldd	r19, Z+1	; 0x01
    5ddc:	42 81       	ldd	r20, Z+2	; 0x02
    5dde:	53 81       	ldd	r21, Z+3	; 0x03
    5de0:	fe 01       	movw	r30, r28
    5de2:	e4 5b       	subi	r30, 0xB4	; 180
    5de4:	fd 4f       	sbci	r31, 0xFD	; 253
    5de6:	80 81       	ld	r24, Z
    5de8:	91 81       	ldd	r25, Z+1	; 0x01
    5dea:	a2 81       	ldd	r26, Z+2	; 0x02
    5dec:	b3 81       	ldd	r27, Z+3	; 0x03
    5dee:	82 2b       	or	r24, r18
    5df0:	93 2b       	or	r25, r19
    5df2:	a4 2b       	or	r26, r20
    5df4:	b5 2b       	or	r27, r21
    5df6:	fe 01       	movw	r30, r28
    5df8:	e4 5b       	subi	r30, 0xB4	; 180
    5dfa:	fd 4f       	sbci	r31, 0xFD	; 253
    5dfc:	80 83       	st	Z, r24
    5dfe:	91 83       	std	Z+1, r25	; 0x01
    5e00:	a2 83       	std	Z+2, r26	; 0x02
    5e02:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_halb);
    5e04:	fe 01       	movw	r30, r28
    5e06:	ef 57       	subi	r30, 0x7F	; 127
    5e08:	fe 4f       	sbci	r31, 0xFE	; 254
    5e0a:	88 e7       	ldi	r24, 0x78	; 120
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
    5e0e:	91 83       	std	Z+1, r25	; 0x01
    5e10:	80 83       	st	Z, r24
    5e12:	fe 01       	movw	r30, r28
    5e14:	ef 57       	subi	r30, 0x7F	; 127
    5e16:	fe 4f       	sbci	r31, 0xFE	; 254
    5e18:	80 81       	ld	r24, Z
    5e1a:	91 81       	ldd	r25, Z+1	; 0x01
    5e1c:	9c 01       	movw	r18, r24
    5e1e:	f9 01       	movw	r30, r18
    5e20:	85 91       	lpm	r24, Z+
    5e22:	95 91       	lpm	r25, Z+
    5e24:	a5 91       	lpm	r26, Z+
    5e26:	b4 91       	lpm	r27, Z+
    5e28:	9f 01       	movw	r18, r30
    5e2a:	fe 01       	movw	r30, r28
    5e2c:	e3 58       	subi	r30, 0x83	; 131
    5e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    5e30:	80 83       	st	Z, r24
    5e32:	91 83       	std	Z+1, r25	; 0x01
    5e34:	a2 83       	std	Z+2, r26	; 0x02
    5e36:	b3 83       	std	Z+3, r27	; 0x03
    5e38:	fe 01       	movw	r30, r28
    5e3a:	ef 57       	subi	r30, 0x7F	; 127
    5e3c:	fe 4f       	sbci	r31, 0xFE	; 254
    5e3e:	31 83       	std	Z+1, r19	; 0x01
    5e40:	20 83       	st	Z, r18
    5e42:	fe 01       	movw	r30, r28
    5e44:	e3 58       	subi	r30, 0x83	; 131
    5e46:	fe 4f       	sbci	r31, 0xFE	; 254
    5e48:	20 81       	ld	r18, Z
    5e4a:	31 81       	ldd	r19, Z+1	; 0x01
    5e4c:	42 81       	ldd	r20, Z+2	; 0x02
    5e4e:	53 81       	ldd	r21, Z+3	; 0x03
    5e50:	fe 01       	movw	r30, r28
    5e52:	e4 5b       	subi	r30, 0xB4	; 180
    5e54:	fd 4f       	sbci	r31, 0xFD	; 253
    5e56:	80 81       	ld	r24, Z
    5e58:	91 81       	ldd	r25, Z+1	; 0x01
    5e5a:	a2 81       	ldd	r26, Z+2	; 0x02
    5e5c:	b3 81       	ldd	r27, Z+3	; 0x03
    5e5e:	82 2b       	or	r24, r18
    5e60:	93 2b       	or	r25, r19
    5e62:	a4 2b       	or	r26, r20
    5e64:	b5 2b       	or	r27, r21
    5e66:	fe 01       	movw	r30, r28
    5e68:	e4 5b       	subi	r30, 0xB4	; 180
    5e6a:	fd 4f       	sbci	r31, 0xFD	; 253
    5e6c:	80 83       	st	Z, r24
    5e6e:	91 83       	std	Z+1, r25	; 0x01
    5e70:	a2 83       	std	Z+2, r26	; 0x02
    5e72:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    5e74:	fe 01       	movw	r30, r28
    5e76:	e5 5b       	subi	r30, 0xB5	; 181
    5e78:	fd 4f       	sbci	r31, 0xFD	; 253
    5e7a:	81 e0       	ldi	r24, 0x01	; 1
    5e7c:	80 83       	st	Z, r24
    5e7e:	f3 c1       	rjmp	.+998    	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 45)
    5e80:	fe 01       	movw	r30, r28
    5e82:	ef 58       	subi	r30, 0x8F	; 143
    5e84:	fd 4f       	sbci	r31, 0xFD	; 253
    5e86:	84 81       	ldd	r24, Z+4	; 0x04
    5e88:	8d 32       	cpi	r24, 0x2D	; 45
    5e8a:	08 f0       	brcs	.+2      	; 0x5e8e <main+0x44c0>
    5e8c:	76 c0       	rjmp	.+236    	; 0x5f7a <main+0x45ac>
    {
      lLEDs |= pgm_read_dword(words+def_zwanzigM);
    5e8e:	fe 01       	movw	r30, r28
    5e90:	e5 58       	subi	r30, 0x85	; 133
    5e92:	fe 4f       	sbci	r31, 0xFE	; 254
    5e94:	84 e6       	ldi	r24, 0x64	; 100
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	91 83       	std	Z+1, r25	; 0x01
    5e9a:	80 83       	st	Z, r24
    5e9c:	fe 01       	movw	r30, r28
    5e9e:	e5 58       	subi	r30, 0x85	; 133
    5ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    5ea2:	80 81       	ld	r24, Z
    5ea4:	91 81       	ldd	r25, Z+1	; 0x01
    5ea6:	9c 01       	movw	r18, r24
    5ea8:	f9 01       	movw	r30, r18
    5eaa:	85 91       	lpm	r24, Z+
    5eac:	95 91       	lpm	r25, Z+
    5eae:	a5 91       	lpm	r26, Z+
    5eb0:	b4 91       	lpm	r27, Z+
    5eb2:	9f 01       	movw	r18, r30
    5eb4:	fe 01       	movw	r30, r28
    5eb6:	e9 58       	subi	r30, 0x89	; 137
    5eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    5eba:	80 83       	st	Z, r24
    5ebc:	91 83       	std	Z+1, r25	; 0x01
    5ebe:	a2 83       	std	Z+2, r26	; 0x02
    5ec0:	b3 83       	std	Z+3, r27	; 0x03
    5ec2:	fe 01       	movw	r30, r28
    5ec4:	e5 58       	subi	r30, 0x85	; 133
    5ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ec8:	31 83       	std	Z+1, r19	; 0x01
    5eca:	20 83       	st	Z, r18
    5ecc:	fe 01       	movw	r30, r28
    5ece:	e9 58       	subi	r30, 0x89	; 137
    5ed0:	fe 4f       	sbci	r31, 0xFE	; 254
    5ed2:	20 81       	ld	r18, Z
    5ed4:	31 81       	ldd	r19, Z+1	; 0x01
    5ed6:	42 81       	ldd	r20, Z+2	; 0x02
    5ed8:	53 81       	ldd	r21, Z+3	; 0x03
    5eda:	fe 01       	movw	r30, r28
    5edc:	e4 5b       	subi	r30, 0xB4	; 180
    5ede:	fd 4f       	sbci	r31, 0xFD	; 253
    5ee0:	80 81       	ld	r24, Z
    5ee2:	91 81       	ldd	r25, Z+1	; 0x01
    5ee4:	a2 81       	ldd	r26, Z+2	; 0x02
    5ee6:	b3 81       	ldd	r27, Z+3	; 0x03
    5ee8:	82 2b       	or	r24, r18
    5eea:	93 2b       	or	r25, r19
    5eec:	a4 2b       	or	r26, r20
    5eee:	b5 2b       	or	r27, r21
    5ef0:	fe 01       	movw	r30, r28
    5ef2:	e4 5b       	subi	r30, 0xB4	; 180
    5ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    5ef6:	80 83       	st	Z, r24
    5ef8:	91 83       	std	Z+1, r25	; 0x01
    5efa:	a2 83       	std	Z+2, r26	; 0x02
    5efc:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    5efe:	fe 01       	movw	r30, r28
    5f00:	eb 58       	subi	r30, 0x8B	; 139
    5f02:	fe 4f       	sbci	r31, 0xFE	; 254
    5f04:	84 e7       	ldi	r24, 0x74	; 116
    5f06:	90 e0       	ldi	r25, 0x00	; 0
    5f08:	91 83       	std	Z+1, r25	; 0x01
    5f0a:	80 83       	st	Z, r24
    5f0c:	fe 01       	movw	r30, r28
    5f0e:	eb 58       	subi	r30, 0x8B	; 139
    5f10:	fe 4f       	sbci	r31, 0xFE	; 254
    5f12:	80 81       	ld	r24, Z
    5f14:	91 81       	ldd	r25, Z+1	; 0x01
    5f16:	9c 01       	movw	r18, r24
    5f18:	f9 01       	movw	r30, r18
    5f1a:	85 91       	lpm	r24, Z+
    5f1c:	95 91       	lpm	r25, Z+
    5f1e:	a5 91       	lpm	r26, Z+
    5f20:	b4 91       	lpm	r27, Z+
    5f22:	9f 01       	movw	r18, r30
    5f24:	fe 01       	movw	r30, r28
    5f26:	ef 58       	subi	r30, 0x8F	; 143
    5f28:	fe 4f       	sbci	r31, 0xFE	; 254
    5f2a:	80 83       	st	Z, r24
    5f2c:	91 83       	std	Z+1, r25	; 0x01
    5f2e:	a2 83       	std	Z+2, r26	; 0x02
    5f30:	b3 83       	std	Z+3, r27	; 0x03
    5f32:	fe 01       	movw	r30, r28
    5f34:	eb 58       	subi	r30, 0x8B	; 139
    5f36:	fe 4f       	sbci	r31, 0xFE	; 254
    5f38:	31 83       	std	Z+1, r19	; 0x01
    5f3a:	20 83       	st	Z, r18
    5f3c:	fe 01       	movw	r30, r28
    5f3e:	ef 58       	subi	r30, 0x8F	; 143
    5f40:	fe 4f       	sbci	r31, 0xFE	; 254
    5f42:	20 81       	ld	r18, Z
    5f44:	31 81       	ldd	r19, Z+1	; 0x01
    5f46:	42 81       	ldd	r20, Z+2	; 0x02
    5f48:	53 81       	ldd	r21, Z+3	; 0x03
    5f4a:	fe 01       	movw	r30, r28
    5f4c:	e4 5b       	subi	r30, 0xB4	; 180
    5f4e:	fd 4f       	sbci	r31, 0xFD	; 253
    5f50:	80 81       	ld	r24, Z
    5f52:	91 81       	ldd	r25, Z+1	; 0x01
    5f54:	a2 81       	ldd	r26, Z+2	; 0x02
    5f56:	b3 81       	ldd	r27, Z+3	; 0x03
    5f58:	82 2b       	or	r24, r18
    5f5a:	93 2b       	or	r25, r19
    5f5c:	a4 2b       	or	r26, r20
    5f5e:	b5 2b       	or	r27, r21
    5f60:	fe 01       	movw	r30, r28
    5f62:	e4 5b       	subi	r30, 0xB4	; 180
    5f64:	fd 4f       	sbci	r31, 0xFD	; 253
    5f66:	80 83       	st	Z, r24
    5f68:	91 83       	std	Z+1, r25	; 0x01
    5f6a:	a2 83       	std	Z+2, r26	; 0x02
    5f6c:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    5f6e:	fe 01       	movw	r30, r28
    5f70:	e5 5b       	subi	r30, 0xB5	; 181
    5f72:	fd 4f       	sbci	r31, 0xFD	; 253
    5f74:	81 e0       	ldi	r24, 0x01	; 1
    5f76:	80 83       	st	Z, r24
    5f78:	76 c1       	rjmp	.+748    	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 50)
    5f7a:	fe 01       	movw	r30, r28
    5f7c:	ef 58       	subi	r30, 0x8F	; 143
    5f7e:	fd 4f       	sbci	r31, 0xFD	; 253
    5f80:	84 81       	ldd	r24, Z+4	; 0x04
    5f82:	82 33       	cpi	r24, 0x32	; 50
    5f84:	08 f0       	brcs	.+2      	; 0x5f88 <main+0x45ba>
    5f86:	76 c0       	rjmp	.+236    	; 0x6074 <main+0x46a6>
    {
      lLEDs |= pgm_read_dword(words+def_viertelM);
    5f88:	fe 01       	movw	r30, r28
    5f8a:	e1 59       	subi	r30, 0x91	; 145
    5f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f8e:	8c e6       	ldi	r24, 0x6C	; 108
    5f90:	90 e0       	ldi	r25, 0x00	; 0
    5f92:	91 83       	std	Z+1, r25	; 0x01
    5f94:	80 83       	st	Z, r24
    5f96:	fe 01       	movw	r30, r28
    5f98:	e1 59       	subi	r30, 0x91	; 145
    5f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f9c:	80 81       	ld	r24, Z
    5f9e:	91 81       	ldd	r25, Z+1	; 0x01
    5fa0:	9c 01       	movw	r18, r24
    5fa2:	f9 01       	movw	r30, r18
    5fa4:	85 91       	lpm	r24, Z+
    5fa6:	95 91       	lpm	r25, Z+
    5fa8:	a5 91       	lpm	r26, Z+
    5faa:	b4 91       	lpm	r27, Z+
    5fac:	9f 01       	movw	r18, r30
    5fae:	fe 01       	movw	r30, r28
    5fb0:	e5 59       	subi	r30, 0x95	; 149
    5fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    5fb4:	80 83       	st	Z, r24
    5fb6:	91 83       	std	Z+1, r25	; 0x01
    5fb8:	a2 83       	std	Z+2, r26	; 0x02
    5fba:	b3 83       	std	Z+3, r27	; 0x03
    5fbc:	fe 01       	movw	r30, r28
    5fbe:	e1 59       	subi	r30, 0x91	; 145
    5fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    5fc2:	31 83       	std	Z+1, r19	; 0x01
    5fc4:	20 83       	st	Z, r18
    5fc6:	fe 01       	movw	r30, r28
    5fc8:	e5 59       	subi	r30, 0x95	; 149
    5fca:	fe 4f       	sbci	r31, 0xFE	; 254
    5fcc:	20 81       	ld	r18, Z
    5fce:	31 81       	ldd	r19, Z+1	; 0x01
    5fd0:	42 81       	ldd	r20, Z+2	; 0x02
    5fd2:	53 81       	ldd	r21, Z+3	; 0x03
    5fd4:	fe 01       	movw	r30, r28
    5fd6:	e4 5b       	subi	r30, 0xB4	; 180
    5fd8:	fd 4f       	sbci	r31, 0xFD	; 253
    5fda:	80 81       	ld	r24, Z
    5fdc:	91 81       	ldd	r25, Z+1	; 0x01
    5fde:	a2 81       	ldd	r26, Z+2	; 0x02
    5fe0:	b3 81       	ldd	r27, Z+3	; 0x03
    5fe2:	82 2b       	or	r24, r18
    5fe4:	93 2b       	or	r25, r19
    5fe6:	a4 2b       	or	r26, r20
    5fe8:	b5 2b       	or	r27, r21
    5fea:	fe 01       	movw	r30, r28
    5fec:	e4 5b       	subi	r30, 0xB4	; 180
    5fee:	fd 4f       	sbci	r31, 0xFD	; 253
    5ff0:	80 83       	st	Z, r24
    5ff2:	91 83       	std	Z+1, r25	; 0x01
    5ff4:	a2 83       	std	Z+2, r26	; 0x02
    5ff6:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    5ff8:	fe 01       	movw	r30, r28
    5ffa:	e7 59       	subi	r30, 0x97	; 151
    5ffc:	fe 4f       	sbci	r31, 0xFE	; 254
    5ffe:	84 e7       	ldi	r24, 0x74	; 116
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	91 83       	std	Z+1, r25	; 0x01
    6004:	80 83       	st	Z, r24
    6006:	fe 01       	movw	r30, r28
    6008:	e7 59       	subi	r30, 0x97	; 151
    600a:	fe 4f       	sbci	r31, 0xFE	; 254
    600c:	80 81       	ld	r24, Z
    600e:	91 81       	ldd	r25, Z+1	; 0x01
    6010:	9c 01       	movw	r18, r24
    6012:	f9 01       	movw	r30, r18
    6014:	85 91       	lpm	r24, Z+
    6016:	95 91       	lpm	r25, Z+
    6018:	a5 91       	lpm	r26, Z+
    601a:	b4 91       	lpm	r27, Z+
    601c:	9f 01       	movw	r18, r30
    601e:	fe 01       	movw	r30, r28
    6020:	eb 59       	subi	r30, 0x9B	; 155
    6022:	fe 4f       	sbci	r31, 0xFE	; 254
    6024:	80 83       	st	Z, r24
    6026:	91 83       	std	Z+1, r25	; 0x01
    6028:	a2 83       	std	Z+2, r26	; 0x02
    602a:	b3 83       	std	Z+3, r27	; 0x03
    602c:	fe 01       	movw	r30, r28
    602e:	e7 59       	subi	r30, 0x97	; 151
    6030:	fe 4f       	sbci	r31, 0xFE	; 254
    6032:	31 83       	std	Z+1, r19	; 0x01
    6034:	20 83       	st	Z, r18
    6036:	fe 01       	movw	r30, r28
    6038:	eb 59       	subi	r30, 0x9B	; 155
    603a:	fe 4f       	sbci	r31, 0xFE	; 254
    603c:	20 81       	ld	r18, Z
    603e:	31 81       	ldd	r19, Z+1	; 0x01
    6040:	42 81       	ldd	r20, Z+2	; 0x02
    6042:	53 81       	ldd	r21, Z+3	; 0x03
    6044:	fe 01       	movw	r30, r28
    6046:	e4 5b       	subi	r30, 0xB4	; 180
    6048:	fd 4f       	sbci	r31, 0xFD	; 253
    604a:	80 81       	ld	r24, Z
    604c:	91 81       	ldd	r25, Z+1	; 0x01
    604e:	a2 81       	ldd	r26, Z+2	; 0x02
    6050:	b3 81       	ldd	r27, Z+3	; 0x03
    6052:	82 2b       	or	r24, r18
    6054:	93 2b       	or	r25, r19
    6056:	a4 2b       	or	r26, r20
    6058:	b5 2b       	or	r27, r21
    605a:	fe 01       	movw	r30, r28
    605c:	e4 5b       	subi	r30, 0xB4	; 180
    605e:	fd 4f       	sbci	r31, 0xFD	; 253
    6060:	80 83       	st	Z, r24
    6062:	91 83       	std	Z+1, r25	; 0x01
    6064:	a2 83       	std	Z+2, r26	; 0x02
    6066:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    6068:	fe 01       	movw	r30, r28
    606a:	e5 5b       	subi	r30, 0xB5	; 181
    606c:	fd 4f       	sbci	r31, 0xFD	; 253
    606e:	81 e0       	ldi	r24, 0x01	; 1
    6070:	80 83       	st	Z, r24
    6072:	f9 c0       	rjmp	.+498    	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 55)
    6074:	fe 01       	movw	r30, r28
    6076:	ef 58       	subi	r30, 0x8F	; 143
    6078:	fd 4f       	sbci	r31, 0xFD	; 253
    607a:	84 81       	ldd	r24, Z+4	; 0x04
    607c:	87 33       	cpi	r24, 0x37	; 55
    607e:	08 f0       	brcs	.+2      	; 0x6082 <main+0x46b4>
    6080:	76 c0       	rjmp	.+236    	; 0x616e <main+0x47a0>
    {
      lLEDs |= pgm_read_dword(words+def_zehnM);
    6082:	fe 01       	movw	r30, r28
    6084:	ed 59       	subi	r30, 0x9D	; 157
    6086:	fe 4f       	sbci	r31, 0xFE	; 254
    6088:	80 e6       	ldi	r24, 0x60	; 96
    608a:	90 e0       	ldi	r25, 0x00	; 0
    608c:	91 83       	std	Z+1, r25	; 0x01
    608e:	80 83       	st	Z, r24
    6090:	fe 01       	movw	r30, r28
    6092:	ed 59       	subi	r30, 0x9D	; 157
    6094:	fe 4f       	sbci	r31, 0xFE	; 254
    6096:	80 81       	ld	r24, Z
    6098:	91 81       	ldd	r25, Z+1	; 0x01
    609a:	9c 01       	movw	r18, r24
    609c:	f9 01       	movw	r30, r18
    609e:	85 91       	lpm	r24, Z+
    60a0:	95 91       	lpm	r25, Z+
    60a2:	a5 91       	lpm	r26, Z+
    60a4:	b4 91       	lpm	r27, Z+
    60a6:	9f 01       	movw	r18, r30
    60a8:	fe 01       	movw	r30, r28
    60aa:	e1 5a       	subi	r30, 0xA1	; 161
    60ac:	fe 4f       	sbci	r31, 0xFE	; 254
    60ae:	80 83       	st	Z, r24
    60b0:	91 83       	std	Z+1, r25	; 0x01
    60b2:	a2 83       	std	Z+2, r26	; 0x02
    60b4:	b3 83       	std	Z+3, r27	; 0x03
    60b6:	fe 01       	movw	r30, r28
    60b8:	ed 59       	subi	r30, 0x9D	; 157
    60ba:	fe 4f       	sbci	r31, 0xFE	; 254
    60bc:	31 83       	std	Z+1, r19	; 0x01
    60be:	20 83       	st	Z, r18
    60c0:	fe 01       	movw	r30, r28
    60c2:	e1 5a       	subi	r30, 0xA1	; 161
    60c4:	fe 4f       	sbci	r31, 0xFE	; 254
    60c6:	20 81       	ld	r18, Z
    60c8:	31 81       	ldd	r19, Z+1	; 0x01
    60ca:	42 81       	ldd	r20, Z+2	; 0x02
    60cc:	53 81       	ldd	r21, Z+3	; 0x03
    60ce:	fe 01       	movw	r30, r28
    60d0:	e4 5b       	subi	r30, 0xB4	; 180
    60d2:	fd 4f       	sbci	r31, 0xFD	; 253
    60d4:	80 81       	ld	r24, Z
    60d6:	91 81       	ldd	r25, Z+1	; 0x01
    60d8:	a2 81       	ldd	r26, Z+2	; 0x02
    60da:	b3 81       	ldd	r27, Z+3	; 0x03
    60dc:	82 2b       	or	r24, r18
    60de:	93 2b       	or	r25, r19
    60e0:	a4 2b       	or	r26, r20
    60e2:	b5 2b       	or	r27, r21
    60e4:	fe 01       	movw	r30, r28
    60e6:	e4 5b       	subi	r30, 0xB4	; 180
    60e8:	fd 4f       	sbci	r31, 0xFD	; 253
    60ea:	80 83       	st	Z, r24
    60ec:	91 83       	std	Z+1, r25	; 0x01
    60ee:	a2 83       	std	Z+2, r26	; 0x02
    60f0:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    60f2:	fe 01       	movw	r30, r28
    60f4:	e3 5a       	subi	r30, 0xA3	; 163
    60f6:	fe 4f       	sbci	r31, 0xFE	; 254
    60f8:	84 e7       	ldi	r24, 0x74	; 116
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	91 83       	std	Z+1, r25	; 0x01
    60fe:	80 83       	st	Z, r24
    6100:	fe 01       	movw	r30, r28
    6102:	e3 5a       	subi	r30, 0xA3	; 163
    6104:	fe 4f       	sbci	r31, 0xFE	; 254
    6106:	80 81       	ld	r24, Z
    6108:	91 81       	ldd	r25, Z+1	; 0x01
    610a:	9c 01       	movw	r18, r24
    610c:	f9 01       	movw	r30, r18
    610e:	85 91       	lpm	r24, Z+
    6110:	95 91       	lpm	r25, Z+
    6112:	a5 91       	lpm	r26, Z+
    6114:	b4 91       	lpm	r27, Z+
    6116:	9f 01       	movw	r18, r30
    6118:	fe 01       	movw	r30, r28
    611a:	e7 5a       	subi	r30, 0xA7	; 167
    611c:	fe 4f       	sbci	r31, 0xFE	; 254
    611e:	80 83       	st	Z, r24
    6120:	91 83       	std	Z+1, r25	; 0x01
    6122:	a2 83       	std	Z+2, r26	; 0x02
    6124:	b3 83       	std	Z+3, r27	; 0x03
    6126:	fe 01       	movw	r30, r28
    6128:	e3 5a       	subi	r30, 0xA3	; 163
    612a:	fe 4f       	sbci	r31, 0xFE	; 254
    612c:	31 83       	std	Z+1, r19	; 0x01
    612e:	20 83       	st	Z, r18
    6130:	fe 01       	movw	r30, r28
    6132:	e7 5a       	subi	r30, 0xA7	; 167
    6134:	fe 4f       	sbci	r31, 0xFE	; 254
    6136:	20 81       	ld	r18, Z
    6138:	31 81       	ldd	r19, Z+1	; 0x01
    613a:	42 81       	ldd	r20, Z+2	; 0x02
    613c:	53 81       	ldd	r21, Z+3	; 0x03
    613e:	fe 01       	movw	r30, r28
    6140:	e4 5b       	subi	r30, 0xB4	; 180
    6142:	fd 4f       	sbci	r31, 0xFD	; 253
    6144:	80 81       	ld	r24, Z
    6146:	91 81       	ldd	r25, Z+1	; 0x01
    6148:	a2 81       	ldd	r26, Z+2	; 0x02
    614a:	b3 81       	ldd	r27, Z+3	; 0x03
    614c:	82 2b       	or	r24, r18
    614e:	93 2b       	or	r25, r19
    6150:	a4 2b       	or	r26, r20
    6152:	b5 2b       	or	r27, r21
    6154:	fe 01       	movw	r30, r28
    6156:	e4 5b       	subi	r30, 0xB4	; 180
    6158:	fd 4f       	sbci	r31, 0xFD	; 253
    615a:	80 83       	st	Z, r24
    615c:	91 83       	std	Z+1, r25	; 0x01
    615e:	a2 83       	std	Z+2, r26	; 0x02
    6160:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    6162:	fe 01       	movw	r30, r28
    6164:	e5 5b       	subi	r30, 0xB5	; 181
    6166:	fd 4f       	sbci	r31, 0xFD	; 253
    6168:	81 e0       	ldi	r24, 0x01	; 1
    616a:	80 83       	st	Z, r24
    616c:	7c c0       	rjmp	.+248    	; 0x6266 <main+0x4898>
    }
    else if (time.mm < 60)
    616e:	fe 01       	movw	r30, r28
    6170:	ef 58       	subi	r30, 0x8F	; 143
    6172:	fd 4f       	sbci	r31, 0xFD	; 253
    6174:	84 81       	ldd	r24, Z+4	; 0x04
    6176:	8c 33       	cpi	r24, 0x3C	; 60
    6178:	08 f0       	brcs	.+2      	; 0x617c <main+0x47ae>
    617a:	75 c0       	rjmp	.+234    	; 0x6266 <main+0x4898>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    617c:	fe 01       	movw	r30, r28
    617e:	e9 5a       	subi	r30, 0xA9	; 169
    6180:	fe 4f       	sbci	r31, 0xFE	; 254
    6182:	8c e5       	ldi	r24, 0x5C	; 92
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	91 83       	std	Z+1, r25	; 0x01
    6188:	80 83       	st	Z, r24
    618a:	fe 01       	movw	r30, r28
    618c:	e9 5a       	subi	r30, 0xA9	; 169
    618e:	fe 4f       	sbci	r31, 0xFE	; 254
    6190:	80 81       	ld	r24, Z
    6192:	91 81       	ldd	r25, Z+1	; 0x01
    6194:	9c 01       	movw	r18, r24
    6196:	f9 01       	movw	r30, r18
    6198:	85 91       	lpm	r24, Z+
    619a:	95 91       	lpm	r25, Z+
    619c:	a5 91       	lpm	r26, Z+
    619e:	b4 91       	lpm	r27, Z+
    61a0:	9f 01       	movw	r18, r30
    61a2:	fe 01       	movw	r30, r28
    61a4:	ed 5a       	subi	r30, 0xAD	; 173
    61a6:	fe 4f       	sbci	r31, 0xFE	; 254
    61a8:	80 83       	st	Z, r24
    61aa:	91 83       	std	Z+1, r25	; 0x01
    61ac:	a2 83       	std	Z+2, r26	; 0x02
    61ae:	b3 83       	std	Z+3, r27	; 0x03
    61b0:	fe 01       	movw	r30, r28
    61b2:	e9 5a       	subi	r30, 0xA9	; 169
    61b4:	fe 4f       	sbci	r31, 0xFE	; 254
    61b6:	31 83       	std	Z+1, r19	; 0x01
    61b8:	20 83       	st	Z, r18
    61ba:	fe 01       	movw	r30, r28
    61bc:	ed 5a       	subi	r30, 0xAD	; 173
    61be:	fe 4f       	sbci	r31, 0xFE	; 254
    61c0:	20 81       	ld	r18, Z
    61c2:	31 81       	ldd	r19, Z+1	; 0x01
    61c4:	42 81       	ldd	r20, Z+2	; 0x02
    61c6:	53 81       	ldd	r21, Z+3	; 0x03
    61c8:	fe 01       	movw	r30, r28
    61ca:	e4 5b       	subi	r30, 0xB4	; 180
    61cc:	fd 4f       	sbci	r31, 0xFD	; 253
    61ce:	80 81       	ld	r24, Z
    61d0:	91 81       	ldd	r25, Z+1	; 0x01
    61d2:	a2 81       	ldd	r26, Z+2	; 0x02
    61d4:	b3 81       	ldd	r27, Z+3	; 0x03
    61d6:	82 2b       	or	r24, r18
    61d8:	93 2b       	or	r25, r19
    61da:	a4 2b       	or	r26, r20
    61dc:	b5 2b       	or	r27, r21
    61de:	fe 01       	movw	r30, r28
    61e0:	e4 5b       	subi	r30, 0xB4	; 180
    61e2:	fd 4f       	sbci	r31, 0xFD	; 253
    61e4:	80 83       	st	Z, r24
    61e6:	91 83       	std	Z+1, r25	; 0x01
    61e8:	a2 83       	std	Z+2, r26	; 0x02
    61ea:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    61ec:	fe 01       	movw	r30, r28
    61ee:	ef 5a       	subi	r30, 0xAF	; 175
    61f0:	fe 4f       	sbci	r31, 0xFE	; 254
    61f2:	84 e7       	ldi	r24, 0x74	; 116
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	91 83       	std	Z+1, r25	; 0x01
    61f8:	80 83       	st	Z, r24
    61fa:	fe 01       	movw	r30, r28
    61fc:	ef 5a       	subi	r30, 0xAF	; 175
    61fe:	fe 4f       	sbci	r31, 0xFE	; 254
    6200:	80 81       	ld	r24, Z
    6202:	91 81       	ldd	r25, Z+1	; 0x01
    6204:	9c 01       	movw	r18, r24
    6206:	f9 01       	movw	r30, r18
    6208:	85 91       	lpm	r24, Z+
    620a:	95 91       	lpm	r25, Z+
    620c:	a5 91       	lpm	r26, Z+
    620e:	b4 91       	lpm	r27, Z+
    6210:	9f 01       	movw	r18, r30
    6212:	fe 01       	movw	r30, r28
    6214:	e3 5b       	subi	r30, 0xB3	; 179
    6216:	fe 4f       	sbci	r31, 0xFE	; 254
    6218:	80 83       	st	Z, r24
    621a:	91 83       	std	Z+1, r25	; 0x01
    621c:	a2 83       	std	Z+2, r26	; 0x02
    621e:	b3 83       	std	Z+3, r27	; 0x03
    6220:	fe 01       	movw	r30, r28
    6222:	ef 5a       	subi	r30, 0xAF	; 175
    6224:	fe 4f       	sbci	r31, 0xFE	; 254
    6226:	31 83       	std	Z+1, r19	; 0x01
    6228:	20 83       	st	Z, r18
    622a:	fe 01       	movw	r30, r28
    622c:	e3 5b       	subi	r30, 0xB3	; 179
    622e:	fe 4f       	sbci	r31, 0xFE	; 254
    6230:	20 81       	ld	r18, Z
    6232:	31 81       	ldd	r19, Z+1	; 0x01
    6234:	42 81       	ldd	r20, Z+2	; 0x02
    6236:	53 81       	ldd	r21, Z+3	; 0x03
    6238:	fe 01       	movw	r30, r28
    623a:	e4 5b       	subi	r30, 0xB4	; 180
    623c:	fd 4f       	sbci	r31, 0xFD	; 253
    623e:	80 81       	ld	r24, Z
    6240:	91 81       	ldd	r25, Z+1	; 0x01
    6242:	a2 81       	ldd	r26, Z+2	; 0x02
    6244:	b3 81       	ldd	r27, Z+3	; 0x03
    6246:	82 2b       	or	r24, r18
    6248:	93 2b       	or	r25, r19
    624a:	a4 2b       	or	r26, r20
    624c:	b5 2b       	or	r27, r21
    624e:	fe 01       	movw	r30, r28
    6250:	e4 5b       	subi	r30, 0xB4	; 180
    6252:	fd 4f       	sbci	r31, 0xFD	; 253
    6254:	80 83       	st	Z, r24
    6256:	91 83       	std	Z+1, r25	; 0x01
    6258:	a2 83       	std	Z+2, r26	; 0x02
    625a:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    625c:	fe 01       	movw	r30, r28
    625e:	e5 5b       	subi	r30, 0xB5	; 181
    6260:	fd 4f       	sbci	r31, 0xFD	; 253
    6262:	81 e0       	ldi	r24, 0x01	; 1
    6264:	80 83       	st	Z, r24
    }

    int def_h[25] =
      { def_zwoelfH, def_einsH, def_zweiH, def_dreiH, def_vierH, def_fuenfH, def_sechsH, def_siebenH, def_achtH, def_neunH, def_zehnH, def_elfH, def_zwoelfH, def_einsH, def_zweiH, def_dreiH, def_vierH, def_fuenfH, def_sechsH, def_siebenH, def_achtH, def_neunH, def_zehnH, def_elfH, def_zwoelfH };
    6266:	ce 01       	movw	r24, r28
    6268:	8a 50       	subi	r24, 0x0A	; 10
    626a:	9d 4f       	sbci	r25, 0xFD	; 253
    626c:	c9 55       	subi	r28, 0x59	; 89
    626e:	dc 4f       	sbci	r29, 0xFC	; 252
    6270:	99 83       	std	Y+1, r25	; 0x01
    6272:	88 83       	st	Y, r24
    6274:	c7 5a       	subi	r28, 0xA7	; 167
    6276:	d3 40       	sbci	r29, 0x03	; 3
    6278:	23 e5       	ldi	r18, 0x53	; 83
    627a:	31 e0       	ldi	r19, 0x01	; 1
    627c:	c7 55       	subi	r28, 0x57	; 87
    627e:	dc 4f       	sbci	r29, 0xFC	; 252
    6280:	39 83       	std	Y+1, r19	; 0x01
    6282:	28 83       	st	Y, r18
    6284:	c9 5a       	subi	r28, 0xA9	; 169
    6286:	d3 40       	sbci	r29, 0x03	; 3
    6288:	32 e3       	ldi	r19, 0x32	; 50
    628a:	c5 55       	subi	r28, 0x55	; 85
    628c:	dc 4f       	sbci	r29, 0xFC	; 252
    628e:	38 83       	st	Y, r19
    6290:	cb 5a       	subi	r28, 0xAB	; 171
    6292:	d3 40       	sbci	r29, 0x03	; 3
    6294:	c7 55       	subi	r28, 0x57	; 87
    6296:	dc 4f       	sbci	r29, 0xFC	; 252
    6298:	e8 81       	ld	r30, Y
    629a:	f9 81       	ldd	r31, Y+1	; 0x01
    629c:	c9 5a       	subi	r28, 0xA9	; 169
    629e:	d3 40       	sbci	r29, 0x03	; 3
    62a0:	00 80       	ld	r0, Z
    62a2:	c7 55       	subi	r28, 0x57	; 87
    62a4:	dc 4f       	sbci	r29, 0xFC	; 252
    62a6:	28 81       	ld	r18, Y
    62a8:	39 81       	ldd	r19, Y+1	; 0x01
    62aa:	c9 5a       	subi	r28, 0xA9	; 169
    62ac:	d3 40       	sbci	r29, 0x03	; 3
    62ae:	2f 5f       	subi	r18, 0xFF	; 255
    62b0:	3f 4f       	sbci	r19, 0xFF	; 255
    62b2:	c7 55       	subi	r28, 0x57	; 87
    62b4:	dc 4f       	sbci	r29, 0xFC	; 252
    62b6:	39 83       	std	Y+1, r19	; 0x01
    62b8:	28 83       	st	Y, r18
    62ba:	c9 5a       	subi	r28, 0xA9	; 169
    62bc:	d3 40       	sbci	r29, 0x03	; 3
    62be:	c9 55       	subi	r28, 0x59	; 89
    62c0:	dc 4f       	sbci	r29, 0xFC	; 252
    62c2:	e8 81       	ld	r30, Y
    62c4:	f9 81       	ldd	r31, Y+1	; 0x01
    62c6:	c7 5a       	subi	r28, 0xA7	; 167
    62c8:	d3 40       	sbci	r29, 0x03	; 3
    62ca:	00 82       	st	Z, r0
    62cc:	c9 55       	subi	r28, 0x59	; 89
    62ce:	dc 4f       	sbci	r29, 0xFC	; 252
    62d0:	28 81       	ld	r18, Y
    62d2:	39 81       	ldd	r19, Y+1	; 0x01
    62d4:	c7 5a       	subi	r28, 0xA7	; 167
    62d6:	d3 40       	sbci	r29, 0x03	; 3
    62d8:	2f 5f       	subi	r18, 0xFF	; 255
    62da:	3f 4f       	sbci	r19, 0xFF	; 255
    62dc:	c9 55       	subi	r28, 0x59	; 89
    62de:	dc 4f       	sbci	r29, 0xFC	; 252
    62e0:	39 83       	std	Y+1, r19	; 0x01
    62e2:	28 83       	st	Y, r18
    62e4:	c7 5a       	subi	r28, 0xA7	; 167
    62e6:	d3 40       	sbci	r29, 0x03	; 3
    62e8:	c5 55       	subi	r28, 0x55	; 85
    62ea:	dc 4f       	sbci	r29, 0xFC	; 252
    62ec:	38 81       	ld	r19, Y
    62ee:	cb 5a       	subi	r28, 0xAB	; 171
    62f0:	d3 40       	sbci	r29, 0x03	; 3
    62f2:	31 50       	subi	r19, 0x01	; 1
    62f4:	c5 55       	subi	r28, 0x55	; 85
    62f6:	dc 4f       	sbci	r29, 0xFC	; 252
    62f8:	38 83       	st	Y, r19
    62fa:	cb 5a       	subi	r28, 0xAB	; 171
    62fc:	d3 40       	sbci	r29, 0x03	; 3
    62fe:	c5 55       	subi	r28, 0x55	; 85
    6300:	dc 4f       	sbci	r29, 0xFC	; 252
    6302:	88 81       	ld	r24, Y
    6304:	cb 5a       	subi	r28, 0xAB	; 171
    6306:	d3 40       	sbci	r29, 0x03	; 3
    6308:	88 23       	and	r24, r24
    630a:	21 f6       	brne	.-120    	; 0x6294 <main+0x48c6>
    lLEDs |= pgm_read_dword(words + def_h[time.hh + hoffset]);
    630c:	fe 01       	movw	r30, r28
    630e:	ef 58       	subi	r30, 0x8F	; 143
    6310:	fd 4f       	sbci	r31, 0xFD	; 253
    6312:	83 81       	ldd	r24, Z+3	; 0x03
    6314:	28 2f       	mov	r18, r24
    6316:	30 e0       	ldi	r19, 0x00	; 0
    6318:	fe 01       	movw	r30, r28
    631a:	e5 5b       	subi	r30, 0xB5	; 181
    631c:	fd 4f       	sbci	r31, 0xFD	; 253
    631e:	80 81       	ld	r24, Z
    6320:	88 2f       	mov	r24, r24
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	82 0f       	add	r24, r18
    6326:	93 1f       	adc	r25, r19
    6328:	9e 01       	movw	r18, r28
    632a:	2a 50       	subi	r18, 0x0A	; 10
    632c:	3d 4f       	sbci	r19, 0xFD	; 253
    632e:	88 0f       	add	r24, r24
    6330:	99 1f       	adc	r25, r25
    6332:	f9 01       	movw	r30, r18
    6334:	e8 0f       	add	r30, r24
    6336:	f9 1f       	adc	r31, r25
    6338:	80 81       	ld	r24, Z
    633a:	91 81       	ldd	r25, Z+1	; 0x01
    633c:	88 0f       	add	r24, r24
    633e:	99 1f       	adc	r25, r25
    6340:	88 0f       	add	r24, r24
    6342:	99 1f       	adc	r25, r25
    6344:	8c 5a       	subi	r24, 0xAC	; 172
    6346:	9f 4f       	sbci	r25, 0xFF	; 255
    6348:	fe 01       	movw	r30, r28
    634a:	e5 5b       	subi	r30, 0xB5	; 181
    634c:	fe 4f       	sbci	r31, 0xFE	; 254
    634e:	91 83       	std	Z+1, r25	; 0x01
    6350:	80 83       	st	Z, r24
    6352:	fe 01       	movw	r30, r28
    6354:	e5 5b       	subi	r30, 0xB5	; 181
    6356:	fe 4f       	sbci	r31, 0xFE	; 254
    6358:	80 81       	ld	r24, Z
    635a:	91 81       	ldd	r25, Z+1	; 0x01
    635c:	9c 01       	movw	r18, r24
    635e:	f9 01       	movw	r30, r18
    6360:	85 91       	lpm	r24, Z+
    6362:	95 91       	lpm	r25, Z+
    6364:	a5 91       	lpm	r26, Z+
    6366:	b4 91       	lpm	r27, Z+
    6368:	9f 01       	movw	r18, r30
    636a:	fe 01       	movw	r30, r28
    636c:	e9 5b       	subi	r30, 0xB9	; 185
    636e:	fe 4f       	sbci	r31, 0xFE	; 254
    6370:	80 83       	st	Z, r24
    6372:	91 83       	std	Z+1, r25	; 0x01
    6374:	a2 83       	std	Z+2, r26	; 0x02
    6376:	b3 83       	std	Z+3, r27	; 0x03
    6378:	fe 01       	movw	r30, r28
    637a:	e5 5b       	subi	r30, 0xB5	; 181
    637c:	fe 4f       	sbci	r31, 0xFE	; 254
    637e:	31 83       	std	Z+1, r19	; 0x01
    6380:	20 83       	st	Z, r18
    6382:	fe 01       	movw	r30, r28
    6384:	e9 5b       	subi	r30, 0xB9	; 185
    6386:	fe 4f       	sbci	r31, 0xFE	; 254
    6388:	20 81       	ld	r18, Z
    638a:	31 81       	ldd	r19, Z+1	; 0x01
    638c:	42 81       	ldd	r20, Z+2	; 0x02
    638e:	53 81       	ldd	r21, Z+3	; 0x03
    6390:	fe 01       	movw	r30, r28
    6392:	e4 5b       	subi	r30, 0xB4	; 180
    6394:	fd 4f       	sbci	r31, 0xFD	; 253
    6396:	80 81       	ld	r24, Z
    6398:	91 81       	ldd	r25, Z+1	; 0x01
    639a:	a2 81       	ldd	r26, Z+2	; 0x02
    639c:	b3 81       	ldd	r27, Z+3	; 0x03
    639e:	82 2b       	or	r24, r18
    63a0:	93 2b       	or	r25, r19
    63a2:	a4 2b       	or	r26, r20
    63a4:	b5 2b       	or	r27, r21
    63a6:	fe 01       	movw	r30, r28
    63a8:	e4 5b       	subi	r30, 0xB4	; 180
    63aa:	fd 4f       	sbci	r31, 0xFD	; 253
    63ac:	80 83       	st	Z, r24
    63ae:	91 83       	std	Z+1, r25	; 0x01
    63b0:	a2 83       	std	Z+2, r26	; 0x02
    63b2:	b3 83       	std	Z+3, r27	; 0x03

    if (!uiScrollingBit)
    63b4:	fe 01       	movw	r30, r28
    63b6:	e5 59       	subi	r30, 0x95	; 149
    63b8:	fd 4f       	sbci	r31, 0xFD	; 253
    63ba:	80 81       	ld	r24, Z
    63bc:	91 81       	ldd	r25, Z+1	; 0x01
    63be:	a2 81       	ldd	r26, Z+2	; 0x02
    63c0:	b3 81       	ldd	r27, Z+3	; 0x03
    63c2:	00 97       	sbiw	r24, 0x00	; 0
    63c4:	a1 05       	cpc	r26, r1
    63c6:	b1 05       	cpc	r27, r1
    63c8:	59 f4       	brne	.+22     	; 0x63e0 <main+0x4a12>
    {
      shift32_output(lLEDs);
    63ca:	fe 01       	movw	r30, r28
    63cc:	e4 5b       	subi	r30, 0xB4	; 180
    63ce:	fd 4f       	sbci	r31, 0xFD	; 253
    63d0:	80 81       	ld	r24, Z
    63d2:	91 81       	ldd	r25, Z+1	; 0x01
    63d4:	a2 81       	ldd	r26, Z+2	; 0x02
    63d6:	b3 81       	ldd	r27, Z+3	; 0x03
    63d8:	bc 01       	movw	r22, r24
    63da:	cd 01       	movw	r24, r26
    63dc:	0e 94 80 0a 	call	0x1500	; 0x1500 <shift32_output>
    }

    if (time.ss == 0)
    63e0:	fe 01       	movw	r30, r28
    63e2:	ef 58       	subi	r30, 0x8F	; 143
    63e4:	fd 4f       	sbci	r31, 0xFD	; 253
    63e6:	85 81       	ldd	r24, Z+5	; 0x05
    63e8:	88 23       	and	r24, r24
    63ea:	91 f4       	brne	.+36     	; 0x6410 <main+0x4a42>
    {
      TimeInfo(time);
    63ec:	fe 01       	movw	r30, r28
    63ee:	ef 58       	subi	r30, 0x8F	; 143
    63f0:	fd 4f       	sbci	r31, 0xFD	; 253
    63f2:	c0 80       	ld	r12, Z
    63f4:	d1 80       	ldd	r13, Z+1	; 0x01
    63f6:	e2 80       	ldd	r14, Z+2	; 0x02
    63f8:	f3 80       	ldd	r15, Z+3	; 0x03
    63fa:	04 81       	ldd	r16, Z+4	; 0x04
    63fc:	15 81       	ldd	r17, Z+5	; 0x05
    63fe:	26 81       	ldd	r18, Z+6	; 0x06
    6400:	37 81       	ldd	r19, Z+7	; 0x07
    6402:	40 85       	ldd	r20, Z+8	; 0x08
    6404:	51 85       	ldd	r21, Z+9	; 0x09
    6406:	62 85       	ldd	r22, Z+10	; 0x0a
    6408:	73 85       	ldd	r23, Z+11	; 0x0b
    640a:	84 85       	ldd	r24, Z+12	; 0x0c
    640c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TimeInfo>
    }

    if (uiRGB)
    6410:	fe 01       	movw	r30, r28
    6412:	eb 50       	subi	r30, 0x0B	; 11
    6414:	fd 4f       	sbci	r31, 0xFD	; 253
    6416:	80 81       	ld	r24, Z
    6418:	88 23       	and	r24, r24
    641a:	09 f4       	brne	.+2      	; 0x641e <main+0x4a50>
    641c:	b7 c0       	rjmp	.+366    	; 0x658c <main+0x4bbe>
    {
      if (time.sunrise == 0)
    641e:	fe 01       	movw	r30, r28
    6420:	ef 58       	subi	r30, 0x8F	; 143
    6422:	fd 4f       	sbci	r31, 0xFD	; 253
    6424:	80 85       	ldd	r24, Z+8	; 0x08
    6426:	88 23       	and	r24, r24
    6428:	81 f4       	brne	.+32     	; 0x644a <main+0x4a7c>
      {
        uiR = 0x01;
    642a:	fe 01       	movw	r30, r28
    642c:	ee 50       	subi	r30, 0x0E	; 14
    642e:	fd 4f       	sbci	r31, 0xFD	; 253
    6430:	81 e0       	ldi	r24, 0x01	; 1
    6432:	80 83       	st	Z, r24
        uiG = 0x01;
    6434:	fe 01       	movw	r30, r28
    6436:	ed 50       	subi	r30, 0x0D	; 13
    6438:	fd 4f       	sbci	r31, 0xFD	; 253
    643a:	81 e0       	ldi	r24, 0x01	; 1
    643c:	80 83       	st	Z, r24
        uiB = 0x33;
    643e:	fe 01       	movw	r30, r28
    6440:	ec 50       	subi	r30, 0x0C	; 12
    6442:	fd 4f       	sbci	r31, 0xFD	; 253
    6444:	83 e3       	ldi	r24, 0x33	; 51
    6446:	80 83       	st	Z, r24
    6448:	a1 c0       	rjmp	.+322    	; 0x658c <main+0x4bbe>
      }
      else if (time.sunrise >= 100)
    644a:	fe 01       	movw	r30, r28
    644c:	ef 58       	subi	r30, 0x8F	; 143
    644e:	fd 4f       	sbci	r31, 0xFD	; 253
    6450:	80 85       	ldd	r24, Z+8	; 0x08
    6452:	84 36       	cpi	r24, 0x64	; 100
    6454:	80 f0       	brcs	.+32     	; 0x6476 <main+0x4aa8>
      {
        uiR = 0xff;
    6456:	fe 01       	movw	r30, r28
    6458:	ee 50       	subi	r30, 0x0E	; 14
    645a:	fd 4f       	sbci	r31, 0xFD	; 253
    645c:	8f ef       	ldi	r24, 0xFF	; 255
    645e:	80 83       	st	Z, r24
        uiG = 0xff;
    6460:	fe 01       	movw	r30, r28
    6462:	ed 50       	subi	r30, 0x0D	; 13
    6464:	fd 4f       	sbci	r31, 0xFD	; 253
    6466:	8f ef       	ldi	r24, 0xFF	; 255
    6468:	80 83       	st	Z, r24
        uiB = 0xc0;
    646a:	fe 01       	movw	r30, r28
    646c:	ec 50       	subi	r30, 0x0C	; 12
    646e:	fd 4f       	sbci	r31, 0xFD	; 253
    6470:	80 ec       	ldi	r24, 0xC0	; 192
    6472:	80 83       	st	Z, r24
    6474:	8b c0       	rjmp	.+278    	; 0x658c <main+0x4bbe>
      }
      else if (time.sunrise < 50)
    6476:	fe 01       	movw	r30, r28
    6478:	ef 58       	subi	r30, 0x8F	; 143
    647a:	fd 4f       	sbci	r31, 0xFD	; 253
    647c:	80 85       	ldd	r24, Z+8	; 0x08
    647e:	82 33       	cpi	r24, 0x32	; 50
    6480:	38 f5       	brcc	.+78     	; 0x64d0 <main+0x4b02>
      {
        uiR = 0x01 + (time.sunrise * 0xfe) / 50;
    6482:	fe 01       	movw	r30, r28
    6484:	ef 58       	subi	r30, 0x8F	; 143
    6486:	fd 4f       	sbci	r31, 0xFD	; 253
    6488:	80 85       	ldd	r24, Z+8	; 0x08
    648a:	88 2f       	mov	r24, r24
    648c:	90 e0       	ldi	r25, 0x00	; 0
    648e:	9c 01       	movw	r18, r24
    6490:	22 0f       	add	r18, r18
    6492:	33 1f       	adc	r19, r19
    6494:	c9 01       	movw	r24, r18
    6496:	96 95       	lsr	r25
    6498:	98 2f       	mov	r25, r24
    649a:	88 27       	eor	r24, r24
    649c:	97 95       	ror	r25
    649e:	87 95       	ror	r24
    64a0:	82 1b       	sub	r24, r18
    64a2:	93 0b       	sbc	r25, r19
    64a4:	22 e3       	ldi	r18, 0x32	; 50
    64a6:	30 e0       	ldi	r19, 0x00	; 0
    64a8:	b9 01       	movw	r22, r18
    64aa:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__divmodhi4>
    64ae:	cb 01       	movw	r24, r22
    64b0:	8f 5f       	subi	r24, 0xFF	; 255
    64b2:	fe 01       	movw	r30, r28
    64b4:	ee 50       	subi	r30, 0x0E	; 14
    64b6:	fd 4f       	sbci	r31, 0xFD	; 253
    64b8:	80 83       	st	Z, r24
        uiG = 0x01;
    64ba:	fe 01       	movw	r30, r28
    64bc:	ed 50       	subi	r30, 0x0D	; 13
    64be:	fd 4f       	sbci	r31, 0xFD	; 253
    64c0:	81 e0       	ldi	r24, 0x01	; 1
    64c2:	80 83       	st	Z, r24
        uiB = 0x33;
    64c4:	fe 01       	movw	r30, r28
    64c6:	ec 50       	subi	r30, 0x0C	; 12
    64c8:	fd 4f       	sbci	r31, 0xFD	; 253
    64ca:	83 e3       	ldi	r24, 0x33	; 51
    64cc:	80 83       	st	Z, r24
    64ce:	5e c0       	rjmp	.+188    	; 0x658c <main+0x4bbe>
      }
      else if (time.sunrise > 50)
    64d0:	fe 01       	movw	r30, r28
    64d2:	ef 58       	subi	r30, 0x8F	; 143
    64d4:	fd 4f       	sbci	r31, 0xFD	; 253
    64d6:	80 85       	ldd	r24, Z+8	; 0x08
    64d8:	83 33       	cpi	r24, 0x33	; 51
    64da:	08 f4       	brcc	.+2      	; 0x64de <main+0x4b10>
    64dc:	57 c0       	rjmp	.+174    	; 0x658c <main+0x4bbe>
      {
        uiR = 0xff;
    64de:	fe 01       	movw	r30, r28
    64e0:	ee 50       	subi	r30, 0x0E	; 14
    64e2:	fd 4f       	sbci	r31, 0xFD	; 253
    64e4:	8f ef       	ldi	r24, 0xFF	; 255
    64e6:	80 83       	st	Z, r24
        long x = (time.sunrise - 50);
    64e8:	fe 01       	movw	r30, r28
    64ea:	ef 58       	subi	r30, 0x8F	; 143
    64ec:	fd 4f       	sbci	r31, 0xFD	; 253
    64ee:	80 85       	ldd	r24, Z+8	; 0x08
    64f0:	88 2f       	mov	r24, r24
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	c2 97       	sbiw	r24, 0x32	; 50
    64f6:	fe 01       	movw	r30, r28
    64f8:	ed 5b       	subi	r30, 0xBD	; 189
    64fa:	fe 4f       	sbci	r31, 0xFE	; 254
    64fc:	aa 27       	eor	r26, r26
    64fe:	97 fd       	sbrc	r25, 7
    6500:	a0 95       	com	r26
    6502:	ba 2f       	mov	r27, r26
    6504:	80 83       	st	Z, r24
    6506:	91 83       	std	Z+1, r25	; 0x01
    6508:	a2 83       	std	Z+2, r26	; 0x02
    650a:	b3 83       	std	Z+3, r27	; 0x03
        uiG = 0x33 + ((0xcc * (x)) / 50);
    650c:	fe 01       	movw	r30, r28
    650e:	ed 5b       	subi	r30, 0xBD	; 189
    6510:	fe 4f       	sbci	r31, 0xFE	; 254
    6512:	80 81       	ld	r24, Z
    6514:	91 81       	ldd	r25, Z+1	; 0x01
    6516:	a2 81       	ldd	r26, Z+2	; 0x02
    6518:	b3 81       	ldd	r27, Z+3	; 0x03
    651a:	2c ec       	ldi	r18, 0xCC	; 204
    651c:	30 e0       	ldi	r19, 0x00	; 0
    651e:	40 e0       	ldi	r20, 0x00	; 0
    6520:	50 e0       	ldi	r21, 0x00	; 0
    6522:	bc 01       	movw	r22, r24
    6524:	cd 01       	movw	r24, r26
    6526:	0e 94 29 38 	call	0x7052	; 0x7052 <__mulsi3>
    652a:	dc 01       	movw	r26, r24
    652c:	cb 01       	movw	r24, r22
    652e:	22 e3       	ldi	r18, 0x32	; 50
    6530:	30 e0       	ldi	r19, 0x00	; 0
    6532:	40 e0       	ldi	r20, 0x00	; 0
    6534:	50 e0       	ldi	r21, 0x00	; 0
    6536:	bc 01       	movw	r22, r24
    6538:	cd 01       	movw	r24, r26
    653a:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <__divmodsi4>
    653e:	da 01       	movw	r26, r20
    6540:	c9 01       	movw	r24, r18
    6542:	8d 5c       	subi	r24, 0xCD	; 205
    6544:	fe 01       	movw	r30, r28
    6546:	ed 50       	subi	r30, 0x0D	; 13
    6548:	fd 4f       	sbci	r31, 0xFD	; 253
    654a:	80 83       	st	Z, r24
        uiB = 0x33 + ((0xac * (x)) / 50);
    654c:	fe 01       	movw	r30, r28
    654e:	ed 5b       	subi	r30, 0xBD	; 189
    6550:	fe 4f       	sbci	r31, 0xFE	; 254
    6552:	80 81       	ld	r24, Z
    6554:	91 81       	ldd	r25, Z+1	; 0x01
    6556:	a2 81       	ldd	r26, Z+2	; 0x02
    6558:	b3 81       	ldd	r27, Z+3	; 0x03
    655a:	2c ea       	ldi	r18, 0xAC	; 172
    655c:	30 e0       	ldi	r19, 0x00	; 0
    655e:	40 e0       	ldi	r20, 0x00	; 0
    6560:	50 e0       	ldi	r21, 0x00	; 0
    6562:	bc 01       	movw	r22, r24
    6564:	cd 01       	movw	r24, r26
    6566:	0e 94 29 38 	call	0x7052	; 0x7052 <__mulsi3>
    656a:	dc 01       	movw	r26, r24
    656c:	cb 01       	movw	r24, r22
    656e:	22 e3       	ldi	r18, 0x32	; 50
    6570:	30 e0       	ldi	r19, 0x00	; 0
    6572:	40 e0       	ldi	r20, 0x00	; 0
    6574:	50 e0       	ldi	r21, 0x00	; 0
    6576:	bc 01       	movw	r22, r24
    6578:	cd 01       	movw	r24, r26
    657a:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <__divmodsi4>
    657e:	da 01       	movw	r26, r20
    6580:	c9 01       	movw	r24, r18
    6582:	8d 5c       	subi	r24, 0xCD	; 205
    6584:	fe 01       	movw	r30, r28
    6586:	ec 50       	subi	r30, 0x0C	; 12
    6588:	fd 4f       	sbci	r31, 0xFD	; 253
    658a:	80 83       	st	Z, r24
      }
    }

    uiCount = 0;
    658c:	fe 01       	movw	r30, r28
    658e:	e9 59       	subi	r30, 0x99	; 153
    6590:	fd 4f       	sbci	r31, 0xFD	; 253
    6592:	10 82       	st	Z, r1
    6594:	11 82       	std	Z+1, r1	; 0x01
    6596:	12 82       	std	Z+2, r1	; 0x02
    6598:	13 82       	std	Z+3, r1	; 0x03
    659a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <main+0x1478>

0000659e <__fixunssfsi>:
    659e:	ef 92       	push	r14
    65a0:	ff 92       	push	r15
    65a2:	0f 93       	push	r16
    65a4:	1f 93       	push	r17
    65a6:	7b 01       	movw	r14, r22
    65a8:	8c 01       	movw	r16, r24
    65aa:	20 e0       	ldi	r18, 0x00	; 0
    65ac:	30 e0       	ldi	r19, 0x00	; 0
    65ae:	40 e0       	ldi	r20, 0x00	; 0
    65b0:	5f e4       	ldi	r21, 0x4F	; 79
    65b2:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <__gesf2>
    65b6:	88 23       	and	r24, r24
    65b8:	8c f0       	brlt	.+34     	; 0x65dc <__fixunssfsi+0x3e>
    65ba:	c8 01       	movw	r24, r16
    65bc:	b7 01       	movw	r22, r14
    65be:	20 e0       	ldi	r18, 0x00	; 0
    65c0:	30 e0       	ldi	r19, 0x00	; 0
    65c2:	40 e0       	ldi	r20, 0x00	; 0
    65c4:	5f e4       	ldi	r21, 0x4F	; 79
    65c6:	0e 94 47 34 	call	0x688e	; 0x688e <__subsf3>
    65ca:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__fixsfsi>
    65ce:	9b 01       	movw	r18, r22
    65d0:	ac 01       	movw	r20, r24
    65d2:	20 50       	subi	r18, 0x00	; 0
    65d4:	30 40       	sbci	r19, 0x00	; 0
    65d6:	40 40       	sbci	r20, 0x00	; 0
    65d8:	50 48       	sbci	r21, 0x80	; 128
    65da:	06 c0       	rjmp	.+12     	; 0x65e8 <__fixunssfsi+0x4a>
    65dc:	c8 01       	movw	r24, r16
    65de:	b7 01       	movw	r22, r14
    65e0:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__fixsfsi>
    65e4:	9b 01       	movw	r18, r22
    65e6:	ac 01       	movw	r20, r24
    65e8:	b9 01       	movw	r22, r18
    65ea:	ca 01       	movw	r24, r20
    65ec:	1f 91       	pop	r17
    65ee:	0f 91       	pop	r16
    65f0:	ff 90       	pop	r15
    65f2:	ef 90       	pop	r14
    65f4:	08 95       	ret

000065f6 <_fpadd_parts>:
    65f6:	a0 e0       	ldi	r26, 0x00	; 0
    65f8:	b0 e0       	ldi	r27, 0x00	; 0
    65fa:	e1 e0       	ldi	r30, 0x01	; 1
    65fc:	f3 e3       	ldi	r31, 0x33	; 51
    65fe:	0c 94 b8 38 	jmp	0x7170	; 0x7170 <__prologue_saves__>
    6602:	dc 01       	movw	r26, r24
    6604:	2b 01       	movw	r4, r22
    6606:	fa 01       	movw	r30, r20
    6608:	9c 91       	ld	r25, X
    660a:	92 30       	cpi	r25, 0x02	; 2
    660c:	08 f4       	brcc	.+2      	; 0x6610 <_fpadd_parts+0x1a>
    660e:	39 c1       	rjmp	.+626    	; 0x6882 <_fpadd_parts+0x28c>
    6610:	eb 01       	movw	r28, r22
    6612:	88 81       	ld	r24, Y
    6614:	82 30       	cpi	r24, 0x02	; 2
    6616:	08 f4       	brcc	.+2      	; 0x661a <_fpadd_parts+0x24>
    6618:	33 c1       	rjmp	.+614    	; 0x6880 <_fpadd_parts+0x28a>
    661a:	94 30       	cpi	r25, 0x04	; 4
    661c:	69 f4       	brne	.+26     	; 0x6638 <_fpadd_parts+0x42>
    661e:	84 30       	cpi	r24, 0x04	; 4
    6620:	09 f0       	breq	.+2      	; 0x6624 <_fpadd_parts+0x2e>
    6622:	2f c1       	rjmp	.+606    	; 0x6882 <_fpadd_parts+0x28c>
    6624:	11 96       	adiw	r26, 0x01	; 1
    6626:	9c 91       	ld	r25, X
    6628:	11 97       	sbiw	r26, 0x01	; 1
    662a:	89 81       	ldd	r24, Y+1	; 0x01
    662c:	98 17       	cp	r25, r24
    662e:	09 f4       	brne	.+2      	; 0x6632 <_fpadd_parts+0x3c>
    6630:	28 c1       	rjmp	.+592    	; 0x6882 <_fpadd_parts+0x28c>
    6632:	ab e9       	ldi	r26, 0x9B	; 155
    6634:	b4 e0       	ldi	r27, 0x04	; 4
    6636:	25 c1       	rjmp	.+586    	; 0x6882 <_fpadd_parts+0x28c>
    6638:	84 30       	cpi	r24, 0x04	; 4
    663a:	09 f4       	brne	.+2      	; 0x663e <_fpadd_parts+0x48>
    663c:	21 c1       	rjmp	.+578    	; 0x6880 <_fpadd_parts+0x28a>
    663e:	82 30       	cpi	r24, 0x02	; 2
    6640:	a9 f4       	brne	.+42     	; 0x666c <_fpadd_parts+0x76>
    6642:	92 30       	cpi	r25, 0x02	; 2
    6644:	09 f0       	breq	.+2      	; 0x6648 <_fpadd_parts+0x52>
    6646:	1d c1       	rjmp	.+570    	; 0x6882 <_fpadd_parts+0x28c>
    6648:	9a 01       	movw	r18, r20
    664a:	ad 01       	movw	r20, r26
    664c:	88 e0       	ldi	r24, 0x08	; 8
    664e:	ea 01       	movw	r28, r20
    6650:	09 90       	ld	r0, Y+
    6652:	ae 01       	movw	r20, r28
    6654:	e9 01       	movw	r28, r18
    6656:	09 92       	st	Y+, r0
    6658:	9e 01       	movw	r18, r28
    665a:	81 50       	subi	r24, 0x01	; 1
    665c:	c1 f7       	brne	.-16     	; 0x664e <_fpadd_parts+0x58>
    665e:	e2 01       	movw	r28, r4
    6660:	89 81       	ldd	r24, Y+1	; 0x01
    6662:	11 96       	adiw	r26, 0x01	; 1
    6664:	9c 91       	ld	r25, X
    6666:	89 23       	and	r24, r25
    6668:	81 83       	std	Z+1, r24	; 0x01
    666a:	08 c1       	rjmp	.+528    	; 0x687c <_fpadd_parts+0x286>
    666c:	92 30       	cpi	r25, 0x02	; 2
    666e:	09 f4       	brne	.+2      	; 0x6672 <_fpadd_parts+0x7c>
    6670:	07 c1       	rjmp	.+526    	; 0x6880 <_fpadd_parts+0x28a>
    6672:	12 96       	adiw	r26, 0x02	; 2
    6674:	2d 90       	ld	r2, X+
    6676:	3c 90       	ld	r3, X
    6678:	13 97       	sbiw	r26, 0x03	; 3
    667a:	eb 01       	movw	r28, r22
    667c:	8a 81       	ldd	r24, Y+2	; 0x02
    667e:	9b 81       	ldd	r25, Y+3	; 0x03
    6680:	14 96       	adiw	r26, 0x04	; 4
    6682:	ad 90       	ld	r10, X+
    6684:	bd 90       	ld	r11, X+
    6686:	cd 90       	ld	r12, X+
    6688:	dc 90       	ld	r13, X
    668a:	17 97       	sbiw	r26, 0x07	; 7
    668c:	ec 80       	ldd	r14, Y+4	; 0x04
    668e:	fd 80       	ldd	r15, Y+5	; 0x05
    6690:	0e 81       	ldd	r16, Y+6	; 0x06
    6692:	1f 81       	ldd	r17, Y+7	; 0x07
    6694:	91 01       	movw	r18, r2
    6696:	28 1b       	sub	r18, r24
    6698:	39 0b       	sbc	r19, r25
    669a:	b9 01       	movw	r22, r18
    669c:	37 ff       	sbrs	r19, 7
    669e:	04 c0       	rjmp	.+8      	; 0x66a8 <_fpadd_parts+0xb2>
    66a0:	66 27       	eor	r22, r22
    66a2:	77 27       	eor	r23, r23
    66a4:	62 1b       	sub	r22, r18
    66a6:	73 0b       	sbc	r23, r19
    66a8:	60 32       	cpi	r22, 0x20	; 32
    66aa:	71 05       	cpc	r23, r1
    66ac:	0c f0       	brlt	.+2      	; 0x66b0 <_fpadd_parts+0xba>
    66ae:	61 c0       	rjmp	.+194    	; 0x6772 <_fpadd_parts+0x17c>
    66b0:	12 16       	cp	r1, r18
    66b2:	13 06       	cpc	r1, r19
    66b4:	6c f5       	brge	.+90     	; 0x6710 <_fpadd_parts+0x11a>
    66b6:	37 01       	movw	r6, r14
    66b8:	48 01       	movw	r8, r16
    66ba:	06 2e       	mov	r0, r22
    66bc:	04 c0       	rjmp	.+8      	; 0x66c6 <_fpadd_parts+0xd0>
    66be:	96 94       	lsr	r9
    66c0:	87 94       	ror	r8
    66c2:	77 94       	ror	r7
    66c4:	67 94       	ror	r6
    66c6:	0a 94       	dec	r0
    66c8:	d2 f7       	brpl	.-12     	; 0x66be <_fpadd_parts+0xc8>
    66ca:	21 e0       	ldi	r18, 0x01	; 1
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	40 e0       	ldi	r20, 0x00	; 0
    66d0:	50 e0       	ldi	r21, 0x00	; 0
    66d2:	04 c0       	rjmp	.+8      	; 0x66dc <_fpadd_parts+0xe6>
    66d4:	22 0f       	add	r18, r18
    66d6:	33 1f       	adc	r19, r19
    66d8:	44 1f       	adc	r20, r20
    66da:	55 1f       	adc	r21, r21
    66dc:	6a 95       	dec	r22
    66de:	d2 f7       	brpl	.-12     	; 0x66d4 <_fpadd_parts+0xde>
    66e0:	21 50       	subi	r18, 0x01	; 1
    66e2:	30 40       	sbci	r19, 0x00	; 0
    66e4:	40 40       	sbci	r20, 0x00	; 0
    66e6:	50 40       	sbci	r21, 0x00	; 0
    66e8:	2e 21       	and	r18, r14
    66ea:	3f 21       	and	r19, r15
    66ec:	40 23       	and	r20, r16
    66ee:	51 23       	and	r21, r17
    66f0:	21 15       	cp	r18, r1
    66f2:	31 05       	cpc	r19, r1
    66f4:	41 05       	cpc	r20, r1
    66f6:	51 05       	cpc	r21, r1
    66f8:	21 f0       	breq	.+8      	; 0x6702 <_fpadd_parts+0x10c>
    66fa:	21 e0       	ldi	r18, 0x01	; 1
    66fc:	30 e0       	ldi	r19, 0x00	; 0
    66fe:	40 e0       	ldi	r20, 0x00	; 0
    6700:	50 e0       	ldi	r21, 0x00	; 0
    6702:	79 01       	movw	r14, r18
    6704:	8a 01       	movw	r16, r20
    6706:	e6 28       	or	r14, r6
    6708:	f7 28       	or	r15, r7
    670a:	08 29       	or	r16, r8
    670c:	19 29       	or	r17, r9
    670e:	3c c0       	rjmp	.+120    	; 0x6788 <_fpadd_parts+0x192>
    6710:	23 2b       	or	r18, r19
    6712:	d1 f1       	breq	.+116    	; 0x6788 <_fpadd_parts+0x192>
    6714:	26 0e       	add	r2, r22
    6716:	37 1e       	adc	r3, r23
    6718:	35 01       	movw	r6, r10
    671a:	46 01       	movw	r8, r12
    671c:	06 2e       	mov	r0, r22
    671e:	04 c0       	rjmp	.+8      	; 0x6728 <_fpadd_parts+0x132>
    6720:	96 94       	lsr	r9
    6722:	87 94       	ror	r8
    6724:	77 94       	ror	r7
    6726:	67 94       	ror	r6
    6728:	0a 94       	dec	r0
    672a:	d2 f7       	brpl	.-12     	; 0x6720 <_fpadd_parts+0x12a>
    672c:	21 e0       	ldi	r18, 0x01	; 1
    672e:	30 e0       	ldi	r19, 0x00	; 0
    6730:	40 e0       	ldi	r20, 0x00	; 0
    6732:	50 e0       	ldi	r21, 0x00	; 0
    6734:	04 c0       	rjmp	.+8      	; 0x673e <_fpadd_parts+0x148>
    6736:	22 0f       	add	r18, r18
    6738:	33 1f       	adc	r19, r19
    673a:	44 1f       	adc	r20, r20
    673c:	55 1f       	adc	r21, r21
    673e:	6a 95       	dec	r22
    6740:	d2 f7       	brpl	.-12     	; 0x6736 <_fpadd_parts+0x140>
    6742:	21 50       	subi	r18, 0x01	; 1
    6744:	30 40       	sbci	r19, 0x00	; 0
    6746:	40 40       	sbci	r20, 0x00	; 0
    6748:	50 40       	sbci	r21, 0x00	; 0
    674a:	2a 21       	and	r18, r10
    674c:	3b 21       	and	r19, r11
    674e:	4c 21       	and	r20, r12
    6750:	5d 21       	and	r21, r13
    6752:	21 15       	cp	r18, r1
    6754:	31 05       	cpc	r19, r1
    6756:	41 05       	cpc	r20, r1
    6758:	51 05       	cpc	r21, r1
    675a:	21 f0       	breq	.+8      	; 0x6764 <_fpadd_parts+0x16e>
    675c:	21 e0       	ldi	r18, 0x01	; 1
    675e:	30 e0       	ldi	r19, 0x00	; 0
    6760:	40 e0       	ldi	r20, 0x00	; 0
    6762:	50 e0       	ldi	r21, 0x00	; 0
    6764:	59 01       	movw	r10, r18
    6766:	6a 01       	movw	r12, r20
    6768:	a6 28       	or	r10, r6
    676a:	b7 28       	or	r11, r7
    676c:	c8 28       	or	r12, r8
    676e:	d9 28       	or	r13, r9
    6770:	0b c0       	rjmp	.+22     	; 0x6788 <_fpadd_parts+0x192>
    6772:	82 15       	cp	r24, r2
    6774:	93 05       	cpc	r25, r3
    6776:	2c f0       	brlt	.+10     	; 0x6782 <_fpadd_parts+0x18c>
    6778:	1c 01       	movw	r2, r24
    677a:	aa 24       	eor	r10, r10
    677c:	bb 24       	eor	r11, r11
    677e:	65 01       	movw	r12, r10
    6780:	03 c0       	rjmp	.+6      	; 0x6788 <_fpadd_parts+0x192>
    6782:	ee 24       	eor	r14, r14
    6784:	ff 24       	eor	r15, r15
    6786:	87 01       	movw	r16, r14
    6788:	11 96       	adiw	r26, 0x01	; 1
    678a:	9c 91       	ld	r25, X
    678c:	d2 01       	movw	r26, r4
    678e:	11 96       	adiw	r26, 0x01	; 1
    6790:	8c 91       	ld	r24, X
    6792:	98 17       	cp	r25, r24
    6794:	09 f4       	brne	.+2      	; 0x6798 <_fpadd_parts+0x1a2>
    6796:	45 c0       	rjmp	.+138    	; 0x6822 <_fpadd_parts+0x22c>
    6798:	99 23       	and	r25, r25
    679a:	39 f0       	breq	.+14     	; 0x67aa <_fpadd_parts+0x1b4>
    679c:	a8 01       	movw	r20, r16
    679e:	97 01       	movw	r18, r14
    67a0:	2a 19       	sub	r18, r10
    67a2:	3b 09       	sbc	r19, r11
    67a4:	4c 09       	sbc	r20, r12
    67a6:	5d 09       	sbc	r21, r13
    67a8:	06 c0       	rjmp	.+12     	; 0x67b6 <_fpadd_parts+0x1c0>
    67aa:	a6 01       	movw	r20, r12
    67ac:	95 01       	movw	r18, r10
    67ae:	2e 19       	sub	r18, r14
    67b0:	3f 09       	sbc	r19, r15
    67b2:	40 0b       	sbc	r20, r16
    67b4:	51 0b       	sbc	r21, r17
    67b6:	57 fd       	sbrc	r21, 7
    67b8:	08 c0       	rjmp	.+16     	; 0x67ca <_fpadd_parts+0x1d4>
    67ba:	11 82       	std	Z+1, r1	; 0x01
    67bc:	33 82       	std	Z+3, r3	; 0x03
    67be:	22 82       	std	Z+2, r2	; 0x02
    67c0:	24 83       	std	Z+4, r18	; 0x04
    67c2:	35 83       	std	Z+5, r19	; 0x05
    67c4:	46 83       	std	Z+6, r20	; 0x06
    67c6:	57 83       	std	Z+7, r21	; 0x07
    67c8:	1d c0       	rjmp	.+58     	; 0x6804 <_fpadd_parts+0x20e>
    67ca:	81 e0       	ldi	r24, 0x01	; 1
    67cc:	81 83       	std	Z+1, r24	; 0x01
    67ce:	33 82       	std	Z+3, r3	; 0x03
    67d0:	22 82       	std	Z+2, r2	; 0x02
    67d2:	88 27       	eor	r24, r24
    67d4:	99 27       	eor	r25, r25
    67d6:	dc 01       	movw	r26, r24
    67d8:	82 1b       	sub	r24, r18
    67da:	93 0b       	sbc	r25, r19
    67dc:	a4 0b       	sbc	r26, r20
    67de:	b5 0b       	sbc	r27, r21
    67e0:	84 83       	std	Z+4, r24	; 0x04
    67e2:	95 83       	std	Z+5, r25	; 0x05
    67e4:	a6 83       	std	Z+6, r26	; 0x06
    67e6:	b7 83       	std	Z+7, r27	; 0x07
    67e8:	0d c0       	rjmp	.+26     	; 0x6804 <_fpadd_parts+0x20e>
    67ea:	22 0f       	add	r18, r18
    67ec:	33 1f       	adc	r19, r19
    67ee:	44 1f       	adc	r20, r20
    67f0:	55 1f       	adc	r21, r21
    67f2:	24 83       	std	Z+4, r18	; 0x04
    67f4:	35 83       	std	Z+5, r19	; 0x05
    67f6:	46 83       	std	Z+6, r20	; 0x06
    67f8:	57 83       	std	Z+7, r21	; 0x07
    67fa:	82 81       	ldd	r24, Z+2	; 0x02
    67fc:	93 81       	ldd	r25, Z+3	; 0x03
    67fe:	01 97       	sbiw	r24, 0x01	; 1
    6800:	93 83       	std	Z+3, r25	; 0x03
    6802:	82 83       	std	Z+2, r24	; 0x02
    6804:	24 81       	ldd	r18, Z+4	; 0x04
    6806:	35 81       	ldd	r19, Z+5	; 0x05
    6808:	46 81       	ldd	r20, Z+6	; 0x06
    680a:	57 81       	ldd	r21, Z+7	; 0x07
    680c:	da 01       	movw	r26, r20
    680e:	c9 01       	movw	r24, r18
    6810:	01 97       	sbiw	r24, 0x01	; 1
    6812:	a1 09       	sbc	r26, r1
    6814:	b1 09       	sbc	r27, r1
    6816:	8f 5f       	subi	r24, 0xFF	; 255
    6818:	9f 4f       	sbci	r25, 0xFF	; 255
    681a:	af 4f       	sbci	r26, 0xFF	; 255
    681c:	bf 43       	sbci	r27, 0x3F	; 63
    681e:	28 f3       	brcs	.-54     	; 0x67ea <_fpadd_parts+0x1f4>
    6820:	0b c0       	rjmp	.+22     	; 0x6838 <_fpadd_parts+0x242>
    6822:	91 83       	std	Z+1, r25	; 0x01
    6824:	33 82       	std	Z+3, r3	; 0x03
    6826:	22 82       	std	Z+2, r2	; 0x02
    6828:	ea 0c       	add	r14, r10
    682a:	fb 1c       	adc	r15, r11
    682c:	0c 1d       	adc	r16, r12
    682e:	1d 1d       	adc	r17, r13
    6830:	e4 82       	std	Z+4, r14	; 0x04
    6832:	f5 82       	std	Z+5, r15	; 0x05
    6834:	06 83       	std	Z+6, r16	; 0x06
    6836:	17 83       	std	Z+7, r17	; 0x07
    6838:	83 e0       	ldi	r24, 0x03	; 3
    683a:	80 83       	st	Z, r24
    683c:	24 81       	ldd	r18, Z+4	; 0x04
    683e:	35 81       	ldd	r19, Z+5	; 0x05
    6840:	46 81       	ldd	r20, Z+6	; 0x06
    6842:	57 81       	ldd	r21, Z+7	; 0x07
    6844:	57 ff       	sbrs	r21, 7
    6846:	1a c0       	rjmp	.+52     	; 0x687c <_fpadd_parts+0x286>
    6848:	c9 01       	movw	r24, r18
    684a:	aa 27       	eor	r26, r26
    684c:	97 fd       	sbrc	r25, 7
    684e:	a0 95       	com	r26
    6850:	ba 2f       	mov	r27, r26
    6852:	81 70       	andi	r24, 0x01	; 1
    6854:	90 70       	andi	r25, 0x00	; 0
    6856:	a0 70       	andi	r26, 0x00	; 0
    6858:	b0 70       	andi	r27, 0x00	; 0
    685a:	56 95       	lsr	r21
    685c:	47 95       	ror	r20
    685e:	37 95       	ror	r19
    6860:	27 95       	ror	r18
    6862:	82 2b       	or	r24, r18
    6864:	93 2b       	or	r25, r19
    6866:	a4 2b       	or	r26, r20
    6868:	b5 2b       	or	r27, r21
    686a:	84 83       	std	Z+4, r24	; 0x04
    686c:	95 83       	std	Z+5, r25	; 0x05
    686e:	a6 83       	std	Z+6, r26	; 0x06
    6870:	b7 83       	std	Z+7, r27	; 0x07
    6872:	82 81       	ldd	r24, Z+2	; 0x02
    6874:	93 81       	ldd	r25, Z+3	; 0x03
    6876:	01 96       	adiw	r24, 0x01	; 1
    6878:	93 83       	std	Z+3, r25	; 0x03
    687a:	82 83       	std	Z+2, r24	; 0x02
    687c:	df 01       	movw	r26, r30
    687e:	01 c0       	rjmp	.+2      	; 0x6882 <_fpadd_parts+0x28c>
    6880:	d2 01       	movw	r26, r4
    6882:	cd 01       	movw	r24, r26
    6884:	cd b7       	in	r28, 0x3d	; 61
    6886:	de b7       	in	r29, 0x3e	; 62
    6888:	e2 e1       	ldi	r30, 0x12	; 18
    688a:	0c 94 d4 38 	jmp	0x71a8	; 0x71a8 <__epilogue_restores__>

0000688e <__subsf3>:
    688e:	a0 e2       	ldi	r26, 0x20	; 32
    6890:	b0 e0       	ldi	r27, 0x00	; 0
    6892:	ed e4       	ldi	r30, 0x4D	; 77
    6894:	f4 e3       	ldi	r31, 0x34	; 52
    6896:	0c 94 c4 38 	jmp	0x7188	; 0x7188 <__prologue_saves__+0x18>
    689a:	69 83       	std	Y+1, r22	; 0x01
    689c:	7a 83       	std	Y+2, r23	; 0x02
    689e:	8b 83       	std	Y+3, r24	; 0x03
    68a0:	9c 83       	std	Y+4, r25	; 0x04
    68a2:	2d 83       	std	Y+5, r18	; 0x05
    68a4:	3e 83       	std	Y+6, r19	; 0x06
    68a6:	4f 83       	std	Y+7, r20	; 0x07
    68a8:	58 87       	std	Y+8, r21	; 0x08
    68aa:	e9 e0       	ldi	r30, 0x09	; 9
    68ac:	ee 2e       	mov	r14, r30
    68ae:	f1 2c       	mov	r15, r1
    68b0:	ec 0e       	add	r14, r28
    68b2:	fd 1e       	adc	r15, r29
    68b4:	ce 01       	movw	r24, r28
    68b6:	01 96       	adiw	r24, 0x01	; 1
    68b8:	b7 01       	movw	r22, r14
    68ba:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    68be:	8e 01       	movw	r16, r28
    68c0:	0f 5e       	subi	r16, 0xEF	; 239
    68c2:	1f 4f       	sbci	r17, 0xFF	; 255
    68c4:	ce 01       	movw	r24, r28
    68c6:	05 96       	adiw	r24, 0x05	; 5
    68c8:	b8 01       	movw	r22, r16
    68ca:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    68ce:	8a 89       	ldd	r24, Y+18	; 0x12
    68d0:	91 e0       	ldi	r25, 0x01	; 1
    68d2:	89 27       	eor	r24, r25
    68d4:	8a 8b       	std	Y+18, r24	; 0x12
    68d6:	c7 01       	movw	r24, r14
    68d8:	b8 01       	movw	r22, r16
    68da:	ae 01       	movw	r20, r28
    68dc:	47 5e       	subi	r20, 0xE7	; 231
    68de:	5f 4f       	sbci	r21, 0xFF	; 255
    68e0:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <_fpadd_parts>
    68e4:	0e 94 83 36 	call	0x6d06	; 0x6d06 <__pack_f>
    68e8:	a0 96       	adiw	r28, 0x20	; 32
    68ea:	e6 e0       	ldi	r30, 0x06	; 6
    68ec:	0c 94 e0 38 	jmp	0x71c0	; 0x71c0 <__epilogue_restores__+0x18>

000068f0 <__addsf3>:
    68f0:	a0 e2       	ldi	r26, 0x20	; 32
    68f2:	b0 e0       	ldi	r27, 0x00	; 0
    68f4:	ee e7       	ldi	r30, 0x7E	; 126
    68f6:	f4 e3       	ldi	r31, 0x34	; 52
    68f8:	0c 94 c4 38 	jmp	0x7188	; 0x7188 <__prologue_saves__+0x18>
    68fc:	69 83       	std	Y+1, r22	; 0x01
    68fe:	7a 83       	std	Y+2, r23	; 0x02
    6900:	8b 83       	std	Y+3, r24	; 0x03
    6902:	9c 83       	std	Y+4, r25	; 0x04
    6904:	2d 83       	std	Y+5, r18	; 0x05
    6906:	3e 83       	std	Y+6, r19	; 0x06
    6908:	4f 83       	std	Y+7, r20	; 0x07
    690a:	58 87       	std	Y+8, r21	; 0x08
    690c:	f9 e0       	ldi	r31, 0x09	; 9
    690e:	ef 2e       	mov	r14, r31
    6910:	f1 2c       	mov	r15, r1
    6912:	ec 0e       	add	r14, r28
    6914:	fd 1e       	adc	r15, r29
    6916:	ce 01       	movw	r24, r28
    6918:	01 96       	adiw	r24, 0x01	; 1
    691a:	b7 01       	movw	r22, r14
    691c:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6920:	8e 01       	movw	r16, r28
    6922:	0f 5e       	subi	r16, 0xEF	; 239
    6924:	1f 4f       	sbci	r17, 0xFF	; 255
    6926:	ce 01       	movw	r24, r28
    6928:	05 96       	adiw	r24, 0x05	; 5
    692a:	b8 01       	movw	r22, r16
    692c:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6930:	c7 01       	movw	r24, r14
    6932:	b8 01       	movw	r22, r16
    6934:	ae 01       	movw	r20, r28
    6936:	47 5e       	subi	r20, 0xE7	; 231
    6938:	5f 4f       	sbci	r21, 0xFF	; 255
    693a:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <_fpadd_parts>
    693e:	0e 94 83 36 	call	0x6d06	; 0x6d06 <__pack_f>
    6942:	a0 96       	adiw	r28, 0x20	; 32
    6944:	e6 e0       	ldi	r30, 0x06	; 6
    6946:	0c 94 e0 38 	jmp	0x71c0	; 0x71c0 <__epilogue_restores__+0x18>

0000694a <__mulsf3>:
    694a:	a0 e2       	ldi	r26, 0x20	; 32
    694c:	b0 e0       	ldi	r27, 0x00	; 0
    694e:	eb ea       	ldi	r30, 0xAB	; 171
    6950:	f4 e3       	ldi	r31, 0x34	; 52
    6952:	0c 94 b8 38 	jmp	0x7170	; 0x7170 <__prologue_saves__>
    6956:	69 83       	std	Y+1, r22	; 0x01
    6958:	7a 83       	std	Y+2, r23	; 0x02
    695a:	8b 83       	std	Y+3, r24	; 0x03
    695c:	9c 83       	std	Y+4, r25	; 0x04
    695e:	2d 83       	std	Y+5, r18	; 0x05
    6960:	3e 83       	std	Y+6, r19	; 0x06
    6962:	4f 83       	std	Y+7, r20	; 0x07
    6964:	58 87       	std	Y+8, r21	; 0x08
    6966:	ce 01       	movw	r24, r28
    6968:	01 96       	adiw	r24, 0x01	; 1
    696a:	be 01       	movw	r22, r28
    696c:	67 5f       	subi	r22, 0xF7	; 247
    696e:	7f 4f       	sbci	r23, 0xFF	; 255
    6970:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6974:	ce 01       	movw	r24, r28
    6976:	05 96       	adiw	r24, 0x05	; 5
    6978:	be 01       	movw	r22, r28
    697a:	6f 5e       	subi	r22, 0xEF	; 239
    697c:	7f 4f       	sbci	r23, 0xFF	; 255
    697e:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6982:	99 85       	ldd	r25, Y+9	; 0x09
    6984:	92 30       	cpi	r25, 0x02	; 2
    6986:	88 f0       	brcs	.+34     	; 0x69aa <__mulsf3+0x60>
    6988:	89 89       	ldd	r24, Y+17	; 0x11
    698a:	82 30       	cpi	r24, 0x02	; 2
    698c:	c8 f0       	brcs	.+50     	; 0x69c0 <__mulsf3+0x76>
    698e:	94 30       	cpi	r25, 0x04	; 4
    6990:	19 f4       	brne	.+6      	; 0x6998 <__mulsf3+0x4e>
    6992:	82 30       	cpi	r24, 0x02	; 2
    6994:	51 f4       	brne	.+20     	; 0x69aa <__mulsf3+0x60>
    6996:	04 c0       	rjmp	.+8      	; 0x69a0 <__mulsf3+0x56>
    6998:	84 30       	cpi	r24, 0x04	; 4
    699a:	29 f4       	brne	.+10     	; 0x69a6 <__mulsf3+0x5c>
    699c:	92 30       	cpi	r25, 0x02	; 2
    699e:	81 f4       	brne	.+32     	; 0x69c0 <__mulsf3+0x76>
    69a0:	8b e9       	ldi	r24, 0x9B	; 155
    69a2:	94 e0       	ldi	r25, 0x04	; 4
    69a4:	c6 c0       	rjmp	.+396    	; 0x6b32 <__mulsf3+0x1e8>
    69a6:	92 30       	cpi	r25, 0x02	; 2
    69a8:	49 f4       	brne	.+18     	; 0x69bc <__mulsf3+0x72>
    69aa:	20 e0       	ldi	r18, 0x00	; 0
    69ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    69ae:	8a 89       	ldd	r24, Y+18	; 0x12
    69b0:	98 13       	cpse	r25, r24
    69b2:	21 e0       	ldi	r18, 0x01	; 1
    69b4:	2a 87       	std	Y+10, r18	; 0x0a
    69b6:	ce 01       	movw	r24, r28
    69b8:	09 96       	adiw	r24, 0x09	; 9
    69ba:	bb c0       	rjmp	.+374    	; 0x6b32 <__mulsf3+0x1e8>
    69bc:	82 30       	cpi	r24, 0x02	; 2
    69be:	49 f4       	brne	.+18     	; 0x69d2 <__mulsf3+0x88>
    69c0:	20 e0       	ldi	r18, 0x00	; 0
    69c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    69c4:	8a 89       	ldd	r24, Y+18	; 0x12
    69c6:	98 13       	cpse	r25, r24
    69c8:	21 e0       	ldi	r18, 0x01	; 1
    69ca:	2a 8b       	std	Y+18, r18	; 0x12
    69cc:	ce 01       	movw	r24, r28
    69ce:	41 96       	adiw	r24, 0x11	; 17
    69d0:	b0 c0       	rjmp	.+352    	; 0x6b32 <__mulsf3+0x1e8>
    69d2:	2d 84       	ldd	r2, Y+13	; 0x0d
    69d4:	3e 84       	ldd	r3, Y+14	; 0x0e
    69d6:	4f 84       	ldd	r4, Y+15	; 0x0f
    69d8:	58 88       	ldd	r5, Y+16	; 0x10
    69da:	6d 88       	ldd	r6, Y+21	; 0x15
    69dc:	7e 88       	ldd	r7, Y+22	; 0x16
    69de:	8f 88       	ldd	r8, Y+23	; 0x17
    69e0:	98 8c       	ldd	r9, Y+24	; 0x18
    69e2:	ee 24       	eor	r14, r14
    69e4:	ff 24       	eor	r15, r15
    69e6:	87 01       	movw	r16, r14
    69e8:	aa 24       	eor	r10, r10
    69ea:	bb 24       	eor	r11, r11
    69ec:	65 01       	movw	r12, r10
    69ee:	40 e0       	ldi	r20, 0x00	; 0
    69f0:	50 e0       	ldi	r21, 0x00	; 0
    69f2:	60 e0       	ldi	r22, 0x00	; 0
    69f4:	70 e0       	ldi	r23, 0x00	; 0
    69f6:	e0 e0       	ldi	r30, 0x00	; 0
    69f8:	f0 e0       	ldi	r31, 0x00	; 0
    69fa:	c1 01       	movw	r24, r2
    69fc:	81 70       	andi	r24, 0x01	; 1
    69fe:	90 70       	andi	r25, 0x00	; 0
    6a00:	89 2b       	or	r24, r25
    6a02:	e9 f0       	breq	.+58     	; 0x6a3e <__mulsf3+0xf4>
    6a04:	e6 0c       	add	r14, r6
    6a06:	f7 1c       	adc	r15, r7
    6a08:	08 1d       	adc	r16, r8
    6a0a:	19 1d       	adc	r17, r9
    6a0c:	9a 01       	movw	r18, r20
    6a0e:	ab 01       	movw	r20, r22
    6a10:	2a 0d       	add	r18, r10
    6a12:	3b 1d       	adc	r19, r11
    6a14:	4c 1d       	adc	r20, r12
    6a16:	5d 1d       	adc	r21, r13
    6a18:	80 e0       	ldi	r24, 0x00	; 0
    6a1a:	90 e0       	ldi	r25, 0x00	; 0
    6a1c:	a0 e0       	ldi	r26, 0x00	; 0
    6a1e:	b0 e0       	ldi	r27, 0x00	; 0
    6a20:	e6 14       	cp	r14, r6
    6a22:	f7 04       	cpc	r15, r7
    6a24:	08 05       	cpc	r16, r8
    6a26:	19 05       	cpc	r17, r9
    6a28:	20 f4       	brcc	.+8      	; 0x6a32 <__mulsf3+0xe8>
    6a2a:	81 e0       	ldi	r24, 0x01	; 1
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	a0 e0       	ldi	r26, 0x00	; 0
    6a30:	b0 e0       	ldi	r27, 0x00	; 0
    6a32:	ba 01       	movw	r22, r20
    6a34:	a9 01       	movw	r20, r18
    6a36:	48 0f       	add	r20, r24
    6a38:	59 1f       	adc	r21, r25
    6a3a:	6a 1f       	adc	r22, r26
    6a3c:	7b 1f       	adc	r23, r27
    6a3e:	aa 0c       	add	r10, r10
    6a40:	bb 1c       	adc	r11, r11
    6a42:	cc 1c       	adc	r12, r12
    6a44:	dd 1c       	adc	r13, r13
    6a46:	97 fe       	sbrs	r9, 7
    6a48:	08 c0       	rjmp	.+16     	; 0x6a5a <__mulsf3+0x110>
    6a4a:	81 e0       	ldi	r24, 0x01	; 1
    6a4c:	90 e0       	ldi	r25, 0x00	; 0
    6a4e:	a0 e0       	ldi	r26, 0x00	; 0
    6a50:	b0 e0       	ldi	r27, 0x00	; 0
    6a52:	a8 2a       	or	r10, r24
    6a54:	b9 2a       	or	r11, r25
    6a56:	ca 2a       	or	r12, r26
    6a58:	db 2a       	or	r13, r27
    6a5a:	31 96       	adiw	r30, 0x01	; 1
    6a5c:	e0 32       	cpi	r30, 0x20	; 32
    6a5e:	f1 05       	cpc	r31, r1
    6a60:	49 f0       	breq	.+18     	; 0x6a74 <__mulsf3+0x12a>
    6a62:	66 0c       	add	r6, r6
    6a64:	77 1c       	adc	r7, r7
    6a66:	88 1c       	adc	r8, r8
    6a68:	99 1c       	adc	r9, r9
    6a6a:	56 94       	lsr	r5
    6a6c:	47 94       	ror	r4
    6a6e:	37 94       	ror	r3
    6a70:	27 94       	ror	r2
    6a72:	c3 cf       	rjmp	.-122    	; 0x69fa <__mulsf3+0xb0>
    6a74:	fa 85       	ldd	r31, Y+10	; 0x0a
    6a76:	ea 89       	ldd	r30, Y+18	; 0x12
    6a78:	2b 89       	ldd	r18, Y+19	; 0x13
    6a7a:	3c 89       	ldd	r19, Y+20	; 0x14
    6a7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    6a7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a80:	28 0f       	add	r18, r24
    6a82:	39 1f       	adc	r19, r25
    6a84:	2e 5f       	subi	r18, 0xFE	; 254
    6a86:	3f 4f       	sbci	r19, 0xFF	; 255
    6a88:	17 c0       	rjmp	.+46     	; 0x6ab8 <__mulsf3+0x16e>
    6a8a:	ca 01       	movw	r24, r20
    6a8c:	81 70       	andi	r24, 0x01	; 1
    6a8e:	90 70       	andi	r25, 0x00	; 0
    6a90:	89 2b       	or	r24, r25
    6a92:	61 f0       	breq	.+24     	; 0x6aac <__mulsf3+0x162>
    6a94:	16 95       	lsr	r17
    6a96:	07 95       	ror	r16
    6a98:	f7 94       	ror	r15
    6a9a:	e7 94       	ror	r14
    6a9c:	80 e0       	ldi	r24, 0x00	; 0
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	a0 e0       	ldi	r26, 0x00	; 0
    6aa2:	b0 e8       	ldi	r27, 0x80	; 128
    6aa4:	e8 2a       	or	r14, r24
    6aa6:	f9 2a       	or	r15, r25
    6aa8:	0a 2b       	or	r16, r26
    6aaa:	1b 2b       	or	r17, r27
    6aac:	76 95       	lsr	r23
    6aae:	67 95       	ror	r22
    6ab0:	57 95       	ror	r21
    6ab2:	47 95       	ror	r20
    6ab4:	2f 5f       	subi	r18, 0xFF	; 255
    6ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ab8:	77 fd       	sbrc	r23, 7
    6aba:	e7 cf       	rjmp	.-50     	; 0x6a8a <__mulsf3+0x140>
    6abc:	0c c0       	rjmp	.+24     	; 0x6ad6 <__mulsf3+0x18c>
    6abe:	44 0f       	add	r20, r20
    6ac0:	55 1f       	adc	r21, r21
    6ac2:	66 1f       	adc	r22, r22
    6ac4:	77 1f       	adc	r23, r23
    6ac6:	17 fd       	sbrc	r17, 7
    6ac8:	41 60       	ori	r20, 0x01	; 1
    6aca:	ee 0c       	add	r14, r14
    6acc:	ff 1c       	adc	r15, r15
    6ace:	00 1f       	adc	r16, r16
    6ad0:	11 1f       	adc	r17, r17
    6ad2:	21 50       	subi	r18, 0x01	; 1
    6ad4:	30 40       	sbci	r19, 0x00	; 0
    6ad6:	40 30       	cpi	r20, 0x00	; 0
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	59 07       	cpc	r21, r25
    6adc:	90 e0       	ldi	r25, 0x00	; 0
    6ade:	69 07       	cpc	r22, r25
    6ae0:	90 e4       	ldi	r25, 0x40	; 64
    6ae2:	79 07       	cpc	r23, r25
    6ae4:	60 f3       	brcs	.-40     	; 0x6abe <__mulsf3+0x174>
    6ae6:	2b 8f       	std	Y+27, r18	; 0x1b
    6ae8:	3c 8f       	std	Y+28, r19	; 0x1c
    6aea:	db 01       	movw	r26, r22
    6aec:	ca 01       	movw	r24, r20
    6aee:	8f 77       	andi	r24, 0x7F	; 127
    6af0:	90 70       	andi	r25, 0x00	; 0
    6af2:	a0 70       	andi	r26, 0x00	; 0
    6af4:	b0 70       	andi	r27, 0x00	; 0
    6af6:	80 34       	cpi	r24, 0x40	; 64
    6af8:	91 05       	cpc	r25, r1
    6afa:	a1 05       	cpc	r26, r1
    6afc:	b1 05       	cpc	r27, r1
    6afe:	61 f4       	brne	.+24     	; 0x6b18 <__mulsf3+0x1ce>
    6b00:	47 fd       	sbrc	r20, 7
    6b02:	0a c0       	rjmp	.+20     	; 0x6b18 <__mulsf3+0x1ce>
    6b04:	e1 14       	cp	r14, r1
    6b06:	f1 04       	cpc	r15, r1
    6b08:	01 05       	cpc	r16, r1
    6b0a:	11 05       	cpc	r17, r1
    6b0c:	29 f0       	breq	.+10     	; 0x6b18 <__mulsf3+0x1ce>
    6b0e:	40 5c       	subi	r20, 0xC0	; 192
    6b10:	5f 4f       	sbci	r21, 0xFF	; 255
    6b12:	6f 4f       	sbci	r22, 0xFF	; 255
    6b14:	7f 4f       	sbci	r23, 0xFF	; 255
    6b16:	40 78       	andi	r20, 0x80	; 128
    6b18:	1a 8e       	std	Y+26, r1	; 0x1a
    6b1a:	fe 17       	cp	r31, r30
    6b1c:	11 f0       	breq	.+4      	; 0x6b22 <__mulsf3+0x1d8>
    6b1e:	81 e0       	ldi	r24, 0x01	; 1
    6b20:	8a 8f       	std	Y+26, r24	; 0x1a
    6b22:	4d 8f       	std	Y+29, r20	; 0x1d
    6b24:	5e 8f       	std	Y+30, r21	; 0x1e
    6b26:	6f 8f       	std	Y+31, r22	; 0x1f
    6b28:	78 a3       	std	Y+32, r23	; 0x20
    6b2a:	83 e0       	ldi	r24, 0x03	; 3
    6b2c:	89 8f       	std	Y+25, r24	; 0x19
    6b2e:	ce 01       	movw	r24, r28
    6b30:	49 96       	adiw	r24, 0x19	; 25
    6b32:	0e 94 83 36 	call	0x6d06	; 0x6d06 <__pack_f>
    6b36:	a0 96       	adiw	r28, 0x20	; 32
    6b38:	e2 e1       	ldi	r30, 0x12	; 18
    6b3a:	0c 94 d4 38 	jmp	0x71a8	; 0x71a8 <__epilogue_restores__>

00006b3e <__gtsf2>:
    6b3e:	a8 e1       	ldi	r26, 0x18	; 24
    6b40:	b0 e0       	ldi	r27, 0x00	; 0
    6b42:	e5 ea       	ldi	r30, 0xA5	; 165
    6b44:	f5 e3       	ldi	r31, 0x35	; 53
    6b46:	0c 94 c4 38 	jmp	0x7188	; 0x7188 <__prologue_saves__+0x18>
    6b4a:	69 83       	std	Y+1, r22	; 0x01
    6b4c:	7a 83       	std	Y+2, r23	; 0x02
    6b4e:	8b 83       	std	Y+3, r24	; 0x03
    6b50:	9c 83       	std	Y+4, r25	; 0x04
    6b52:	2d 83       	std	Y+5, r18	; 0x05
    6b54:	3e 83       	std	Y+6, r19	; 0x06
    6b56:	4f 83       	std	Y+7, r20	; 0x07
    6b58:	58 87       	std	Y+8, r21	; 0x08
    6b5a:	89 e0       	ldi	r24, 0x09	; 9
    6b5c:	e8 2e       	mov	r14, r24
    6b5e:	f1 2c       	mov	r15, r1
    6b60:	ec 0e       	add	r14, r28
    6b62:	fd 1e       	adc	r15, r29
    6b64:	ce 01       	movw	r24, r28
    6b66:	01 96       	adiw	r24, 0x01	; 1
    6b68:	b7 01       	movw	r22, r14
    6b6a:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6b6e:	8e 01       	movw	r16, r28
    6b70:	0f 5e       	subi	r16, 0xEF	; 239
    6b72:	1f 4f       	sbci	r17, 0xFF	; 255
    6b74:	ce 01       	movw	r24, r28
    6b76:	05 96       	adiw	r24, 0x05	; 5
    6b78:	b8 01       	movw	r22, r16
    6b7a:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6b7e:	89 85       	ldd	r24, Y+9	; 0x09
    6b80:	82 30       	cpi	r24, 0x02	; 2
    6b82:	40 f0       	brcs	.+16     	; 0x6b94 <__gtsf2+0x56>
    6b84:	89 89       	ldd	r24, Y+17	; 0x11
    6b86:	82 30       	cpi	r24, 0x02	; 2
    6b88:	28 f0       	brcs	.+10     	; 0x6b94 <__gtsf2+0x56>
    6b8a:	c7 01       	movw	r24, r14
    6b8c:	b8 01       	movw	r22, r16
    6b8e:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <__fpcmp_parts_f>
    6b92:	01 c0       	rjmp	.+2      	; 0x6b96 <__gtsf2+0x58>
    6b94:	8f ef       	ldi	r24, 0xFF	; 255
    6b96:	68 96       	adiw	r28, 0x18	; 24
    6b98:	e6 e0       	ldi	r30, 0x06	; 6
    6b9a:	0c 94 e0 38 	jmp	0x71c0	; 0x71c0 <__epilogue_restores__+0x18>

00006b9e <__gesf2>:
    6b9e:	a8 e1       	ldi	r26, 0x18	; 24
    6ba0:	b0 e0       	ldi	r27, 0x00	; 0
    6ba2:	e5 ed       	ldi	r30, 0xD5	; 213
    6ba4:	f5 e3       	ldi	r31, 0x35	; 53
    6ba6:	0c 94 c4 38 	jmp	0x7188	; 0x7188 <__prologue_saves__+0x18>
    6baa:	69 83       	std	Y+1, r22	; 0x01
    6bac:	7a 83       	std	Y+2, r23	; 0x02
    6bae:	8b 83       	std	Y+3, r24	; 0x03
    6bb0:	9c 83       	std	Y+4, r25	; 0x04
    6bb2:	2d 83       	std	Y+5, r18	; 0x05
    6bb4:	3e 83       	std	Y+6, r19	; 0x06
    6bb6:	4f 83       	std	Y+7, r20	; 0x07
    6bb8:	58 87       	std	Y+8, r21	; 0x08
    6bba:	89 e0       	ldi	r24, 0x09	; 9
    6bbc:	e8 2e       	mov	r14, r24
    6bbe:	f1 2c       	mov	r15, r1
    6bc0:	ec 0e       	add	r14, r28
    6bc2:	fd 1e       	adc	r15, r29
    6bc4:	ce 01       	movw	r24, r28
    6bc6:	01 96       	adiw	r24, 0x01	; 1
    6bc8:	b7 01       	movw	r22, r14
    6bca:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6bce:	8e 01       	movw	r16, r28
    6bd0:	0f 5e       	subi	r16, 0xEF	; 239
    6bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    6bd4:	ce 01       	movw	r24, r28
    6bd6:	05 96       	adiw	r24, 0x05	; 5
    6bd8:	b8 01       	movw	r22, r16
    6bda:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6bde:	89 85       	ldd	r24, Y+9	; 0x09
    6be0:	82 30       	cpi	r24, 0x02	; 2
    6be2:	40 f0       	brcs	.+16     	; 0x6bf4 <__gesf2+0x56>
    6be4:	89 89       	ldd	r24, Y+17	; 0x11
    6be6:	82 30       	cpi	r24, 0x02	; 2
    6be8:	28 f0       	brcs	.+10     	; 0x6bf4 <__gesf2+0x56>
    6bea:	c7 01       	movw	r24, r14
    6bec:	b8 01       	movw	r22, r16
    6bee:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <__fpcmp_parts_f>
    6bf2:	01 c0       	rjmp	.+2      	; 0x6bf6 <__gesf2+0x58>
    6bf4:	8f ef       	ldi	r24, 0xFF	; 255
    6bf6:	68 96       	adiw	r28, 0x18	; 24
    6bf8:	e6 e0       	ldi	r30, 0x06	; 6
    6bfa:	0c 94 e0 38 	jmp	0x71c0	; 0x71c0 <__epilogue_restores__+0x18>

00006bfe <__ltsf2>:
    6bfe:	a8 e1       	ldi	r26, 0x18	; 24
    6c00:	b0 e0       	ldi	r27, 0x00	; 0
    6c02:	e5 e0       	ldi	r30, 0x05	; 5
    6c04:	f6 e3       	ldi	r31, 0x36	; 54
    6c06:	0c 94 c4 38 	jmp	0x7188	; 0x7188 <__prologue_saves__+0x18>
    6c0a:	69 83       	std	Y+1, r22	; 0x01
    6c0c:	7a 83       	std	Y+2, r23	; 0x02
    6c0e:	8b 83       	std	Y+3, r24	; 0x03
    6c10:	9c 83       	std	Y+4, r25	; 0x04
    6c12:	2d 83       	std	Y+5, r18	; 0x05
    6c14:	3e 83       	std	Y+6, r19	; 0x06
    6c16:	4f 83       	std	Y+7, r20	; 0x07
    6c18:	58 87       	std	Y+8, r21	; 0x08
    6c1a:	89 e0       	ldi	r24, 0x09	; 9
    6c1c:	e8 2e       	mov	r14, r24
    6c1e:	f1 2c       	mov	r15, r1
    6c20:	ec 0e       	add	r14, r28
    6c22:	fd 1e       	adc	r15, r29
    6c24:	ce 01       	movw	r24, r28
    6c26:	01 96       	adiw	r24, 0x01	; 1
    6c28:	b7 01       	movw	r22, r14
    6c2a:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6c2e:	8e 01       	movw	r16, r28
    6c30:	0f 5e       	subi	r16, 0xEF	; 239
    6c32:	1f 4f       	sbci	r17, 0xFF	; 255
    6c34:	ce 01       	movw	r24, r28
    6c36:	05 96       	adiw	r24, 0x05	; 5
    6c38:	b8 01       	movw	r22, r16
    6c3a:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6c3e:	89 85       	ldd	r24, Y+9	; 0x09
    6c40:	82 30       	cpi	r24, 0x02	; 2
    6c42:	40 f0       	brcs	.+16     	; 0x6c54 <__ltsf2+0x56>
    6c44:	89 89       	ldd	r24, Y+17	; 0x11
    6c46:	82 30       	cpi	r24, 0x02	; 2
    6c48:	28 f0       	brcs	.+10     	; 0x6c54 <__ltsf2+0x56>
    6c4a:	c7 01       	movw	r24, r14
    6c4c:	b8 01       	movw	r22, r16
    6c4e:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <__fpcmp_parts_f>
    6c52:	01 c0       	rjmp	.+2      	; 0x6c56 <__ltsf2+0x58>
    6c54:	81 e0       	ldi	r24, 0x01	; 1
    6c56:	68 96       	adiw	r28, 0x18	; 24
    6c58:	e6 e0       	ldi	r30, 0x06	; 6
    6c5a:	0c 94 e0 38 	jmp	0x71c0	; 0x71c0 <__epilogue_restores__+0x18>

00006c5e <__fixsfsi>:
    6c5e:	ac e0       	ldi	r26, 0x0C	; 12
    6c60:	b0 e0       	ldi	r27, 0x00	; 0
    6c62:	e5 e3       	ldi	r30, 0x35	; 53
    6c64:	f6 e3       	ldi	r31, 0x36	; 54
    6c66:	0c 94 c8 38 	jmp	0x7190	; 0x7190 <__prologue_saves__+0x20>
    6c6a:	69 83       	std	Y+1, r22	; 0x01
    6c6c:	7a 83       	std	Y+2, r23	; 0x02
    6c6e:	8b 83       	std	Y+3, r24	; 0x03
    6c70:	9c 83       	std	Y+4, r25	; 0x04
    6c72:	ce 01       	movw	r24, r28
    6c74:	01 96       	adiw	r24, 0x01	; 1
    6c76:	be 01       	movw	r22, r28
    6c78:	6b 5f       	subi	r22, 0xFB	; 251
    6c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c7c:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__unpack_f>
    6c80:	8d 81       	ldd	r24, Y+5	; 0x05
    6c82:	82 30       	cpi	r24, 0x02	; 2
    6c84:	61 f1       	breq	.+88     	; 0x6cde <__fixsfsi+0x80>
    6c86:	82 30       	cpi	r24, 0x02	; 2
    6c88:	50 f1       	brcs	.+84     	; 0x6cde <__fixsfsi+0x80>
    6c8a:	84 30       	cpi	r24, 0x04	; 4
    6c8c:	21 f4       	brne	.+8      	; 0x6c96 <__fixsfsi+0x38>
    6c8e:	8e 81       	ldd	r24, Y+6	; 0x06
    6c90:	88 23       	and	r24, r24
    6c92:	51 f1       	breq	.+84     	; 0x6ce8 <__fixsfsi+0x8a>
    6c94:	2e c0       	rjmp	.+92     	; 0x6cf2 <__fixsfsi+0x94>
    6c96:	2f 81       	ldd	r18, Y+7	; 0x07
    6c98:	38 85       	ldd	r19, Y+8	; 0x08
    6c9a:	37 fd       	sbrc	r19, 7
    6c9c:	20 c0       	rjmp	.+64     	; 0x6cde <__fixsfsi+0x80>
    6c9e:	6e 81       	ldd	r22, Y+6	; 0x06
    6ca0:	2f 31       	cpi	r18, 0x1F	; 31
    6ca2:	31 05       	cpc	r19, r1
    6ca4:	1c f0       	brlt	.+6      	; 0x6cac <__fixsfsi+0x4e>
    6ca6:	66 23       	and	r22, r22
    6ca8:	f9 f0       	breq	.+62     	; 0x6ce8 <__fixsfsi+0x8a>
    6caa:	23 c0       	rjmp	.+70     	; 0x6cf2 <__fixsfsi+0x94>
    6cac:	8e e1       	ldi	r24, 0x1E	; 30
    6cae:	90 e0       	ldi	r25, 0x00	; 0
    6cb0:	82 1b       	sub	r24, r18
    6cb2:	93 0b       	sbc	r25, r19
    6cb4:	29 85       	ldd	r18, Y+9	; 0x09
    6cb6:	3a 85       	ldd	r19, Y+10	; 0x0a
    6cb8:	4b 85       	ldd	r20, Y+11	; 0x0b
    6cba:	5c 85       	ldd	r21, Y+12	; 0x0c
    6cbc:	04 c0       	rjmp	.+8      	; 0x6cc6 <__fixsfsi+0x68>
    6cbe:	56 95       	lsr	r21
    6cc0:	47 95       	ror	r20
    6cc2:	37 95       	ror	r19
    6cc4:	27 95       	ror	r18
    6cc6:	8a 95       	dec	r24
    6cc8:	d2 f7       	brpl	.-12     	; 0x6cbe <__fixsfsi+0x60>
    6cca:	66 23       	and	r22, r22
    6ccc:	b1 f0       	breq	.+44     	; 0x6cfa <__fixsfsi+0x9c>
    6cce:	50 95       	com	r21
    6cd0:	40 95       	com	r20
    6cd2:	30 95       	com	r19
    6cd4:	21 95       	neg	r18
    6cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    6cd8:	4f 4f       	sbci	r20, 0xFF	; 255
    6cda:	5f 4f       	sbci	r21, 0xFF	; 255
    6cdc:	0e c0       	rjmp	.+28     	; 0x6cfa <__fixsfsi+0x9c>
    6cde:	20 e0       	ldi	r18, 0x00	; 0
    6ce0:	30 e0       	ldi	r19, 0x00	; 0
    6ce2:	40 e0       	ldi	r20, 0x00	; 0
    6ce4:	50 e0       	ldi	r21, 0x00	; 0
    6ce6:	09 c0       	rjmp	.+18     	; 0x6cfa <__fixsfsi+0x9c>
    6ce8:	2f ef       	ldi	r18, 0xFF	; 255
    6cea:	3f ef       	ldi	r19, 0xFF	; 255
    6cec:	4f ef       	ldi	r20, 0xFF	; 255
    6cee:	5f e7       	ldi	r21, 0x7F	; 127
    6cf0:	04 c0       	rjmp	.+8      	; 0x6cfa <__fixsfsi+0x9c>
    6cf2:	20 e0       	ldi	r18, 0x00	; 0
    6cf4:	30 e0       	ldi	r19, 0x00	; 0
    6cf6:	40 e0       	ldi	r20, 0x00	; 0
    6cf8:	50 e8       	ldi	r21, 0x80	; 128
    6cfa:	b9 01       	movw	r22, r18
    6cfc:	ca 01       	movw	r24, r20
    6cfe:	2c 96       	adiw	r28, 0x0c	; 12
    6d00:	e2 e0       	ldi	r30, 0x02	; 2
    6d02:	0c 94 e4 38 	jmp	0x71c8	; 0x71c8 <__epilogue_restores__+0x20>

00006d06 <__pack_f>:
    6d06:	df 92       	push	r13
    6d08:	ef 92       	push	r14
    6d0a:	ff 92       	push	r15
    6d0c:	0f 93       	push	r16
    6d0e:	1f 93       	push	r17
    6d10:	fc 01       	movw	r30, r24
    6d12:	e4 80       	ldd	r14, Z+4	; 0x04
    6d14:	f5 80       	ldd	r15, Z+5	; 0x05
    6d16:	06 81       	ldd	r16, Z+6	; 0x06
    6d18:	17 81       	ldd	r17, Z+7	; 0x07
    6d1a:	d1 80       	ldd	r13, Z+1	; 0x01
    6d1c:	80 81       	ld	r24, Z
    6d1e:	82 30       	cpi	r24, 0x02	; 2
    6d20:	48 f4       	brcc	.+18     	; 0x6d34 <__pack_f+0x2e>
    6d22:	80 e0       	ldi	r24, 0x00	; 0
    6d24:	90 e0       	ldi	r25, 0x00	; 0
    6d26:	a0 e1       	ldi	r26, 0x10	; 16
    6d28:	b0 e0       	ldi	r27, 0x00	; 0
    6d2a:	e8 2a       	or	r14, r24
    6d2c:	f9 2a       	or	r15, r25
    6d2e:	0a 2b       	or	r16, r26
    6d30:	1b 2b       	or	r17, r27
    6d32:	a5 c0       	rjmp	.+330    	; 0x6e7e <__pack_f+0x178>
    6d34:	84 30       	cpi	r24, 0x04	; 4
    6d36:	09 f4       	brne	.+2      	; 0x6d3a <__pack_f+0x34>
    6d38:	9f c0       	rjmp	.+318    	; 0x6e78 <__pack_f+0x172>
    6d3a:	82 30       	cpi	r24, 0x02	; 2
    6d3c:	21 f4       	brne	.+8      	; 0x6d46 <__pack_f+0x40>
    6d3e:	ee 24       	eor	r14, r14
    6d40:	ff 24       	eor	r15, r15
    6d42:	87 01       	movw	r16, r14
    6d44:	05 c0       	rjmp	.+10     	; 0x6d50 <__pack_f+0x4a>
    6d46:	e1 14       	cp	r14, r1
    6d48:	f1 04       	cpc	r15, r1
    6d4a:	01 05       	cpc	r16, r1
    6d4c:	11 05       	cpc	r17, r1
    6d4e:	19 f4       	brne	.+6      	; 0x6d56 <__pack_f+0x50>
    6d50:	e0 e0       	ldi	r30, 0x00	; 0
    6d52:	f0 e0       	ldi	r31, 0x00	; 0
    6d54:	96 c0       	rjmp	.+300    	; 0x6e82 <__pack_f+0x17c>
    6d56:	62 81       	ldd	r22, Z+2	; 0x02
    6d58:	73 81       	ldd	r23, Z+3	; 0x03
    6d5a:	9f ef       	ldi	r25, 0xFF	; 255
    6d5c:	62 38       	cpi	r22, 0x82	; 130
    6d5e:	79 07       	cpc	r23, r25
    6d60:	0c f0       	brlt	.+2      	; 0x6d64 <__pack_f+0x5e>
    6d62:	5b c0       	rjmp	.+182    	; 0x6e1a <__pack_f+0x114>
    6d64:	22 e8       	ldi	r18, 0x82	; 130
    6d66:	3f ef       	ldi	r19, 0xFF	; 255
    6d68:	26 1b       	sub	r18, r22
    6d6a:	37 0b       	sbc	r19, r23
    6d6c:	2a 31       	cpi	r18, 0x1A	; 26
    6d6e:	31 05       	cpc	r19, r1
    6d70:	2c f0       	brlt	.+10     	; 0x6d7c <__pack_f+0x76>
    6d72:	20 e0       	ldi	r18, 0x00	; 0
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	40 e0       	ldi	r20, 0x00	; 0
    6d78:	50 e0       	ldi	r21, 0x00	; 0
    6d7a:	2a c0       	rjmp	.+84     	; 0x6dd0 <__pack_f+0xca>
    6d7c:	b8 01       	movw	r22, r16
    6d7e:	a7 01       	movw	r20, r14
    6d80:	02 2e       	mov	r0, r18
    6d82:	04 c0       	rjmp	.+8      	; 0x6d8c <__pack_f+0x86>
    6d84:	76 95       	lsr	r23
    6d86:	67 95       	ror	r22
    6d88:	57 95       	ror	r21
    6d8a:	47 95       	ror	r20
    6d8c:	0a 94       	dec	r0
    6d8e:	d2 f7       	brpl	.-12     	; 0x6d84 <__pack_f+0x7e>
    6d90:	81 e0       	ldi	r24, 0x01	; 1
    6d92:	90 e0       	ldi	r25, 0x00	; 0
    6d94:	a0 e0       	ldi	r26, 0x00	; 0
    6d96:	b0 e0       	ldi	r27, 0x00	; 0
    6d98:	04 c0       	rjmp	.+8      	; 0x6da2 <__pack_f+0x9c>
    6d9a:	88 0f       	add	r24, r24
    6d9c:	99 1f       	adc	r25, r25
    6d9e:	aa 1f       	adc	r26, r26
    6da0:	bb 1f       	adc	r27, r27
    6da2:	2a 95       	dec	r18
    6da4:	d2 f7       	brpl	.-12     	; 0x6d9a <__pack_f+0x94>
    6da6:	01 97       	sbiw	r24, 0x01	; 1
    6da8:	a1 09       	sbc	r26, r1
    6daa:	b1 09       	sbc	r27, r1
    6dac:	8e 21       	and	r24, r14
    6dae:	9f 21       	and	r25, r15
    6db0:	a0 23       	and	r26, r16
    6db2:	b1 23       	and	r27, r17
    6db4:	00 97       	sbiw	r24, 0x00	; 0
    6db6:	a1 05       	cpc	r26, r1
    6db8:	b1 05       	cpc	r27, r1
    6dba:	21 f0       	breq	.+8      	; 0x6dc4 <__pack_f+0xbe>
    6dbc:	81 e0       	ldi	r24, 0x01	; 1
    6dbe:	90 e0       	ldi	r25, 0x00	; 0
    6dc0:	a0 e0       	ldi	r26, 0x00	; 0
    6dc2:	b0 e0       	ldi	r27, 0x00	; 0
    6dc4:	9a 01       	movw	r18, r20
    6dc6:	ab 01       	movw	r20, r22
    6dc8:	28 2b       	or	r18, r24
    6dca:	39 2b       	or	r19, r25
    6dcc:	4a 2b       	or	r20, r26
    6dce:	5b 2b       	or	r21, r27
    6dd0:	da 01       	movw	r26, r20
    6dd2:	c9 01       	movw	r24, r18
    6dd4:	8f 77       	andi	r24, 0x7F	; 127
    6dd6:	90 70       	andi	r25, 0x00	; 0
    6dd8:	a0 70       	andi	r26, 0x00	; 0
    6dda:	b0 70       	andi	r27, 0x00	; 0
    6ddc:	80 34       	cpi	r24, 0x40	; 64
    6dde:	91 05       	cpc	r25, r1
    6de0:	a1 05       	cpc	r26, r1
    6de2:	b1 05       	cpc	r27, r1
    6de4:	39 f4       	brne	.+14     	; 0x6df4 <__pack_f+0xee>
    6de6:	27 ff       	sbrs	r18, 7
    6de8:	09 c0       	rjmp	.+18     	; 0x6dfc <__pack_f+0xf6>
    6dea:	20 5c       	subi	r18, 0xC0	; 192
    6dec:	3f 4f       	sbci	r19, 0xFF	; 255
    6dee:	4f 4f       	sbci	r20, 0xFF	; 255
    6df0:	5f 4f       	sbci	r21, 0xFF	; 255
    6df2:	04 c0       	rjmp	.+8      	; 0x6dfc <__pack_f+0xf6>
    6df4:	21 5c       	subi	r18, 0xC1	; 193
    6df6:	3f 4f       	sbci	r19, 0xFF	; 255
    6df8:	4f 4f       	sbci	r20, 0xFF	; 255
    6dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    6dfc:	e0 e0       	ldi	r30, 0x00	; 0
    6dfe:	f0 e0       	ldi	r31, 0x00	; 0
    6e00:	20 30       	cpi	r18, 0x00	; 0
    6e02:	a0 e0       	ldi	r26, 0x00	; 0
    6e04:	3a 07       	cpc	r19, r26
    6e06:	a0 e0       	ldi	r26, 0x00	; 0
    6e08:	4a 07       	cpc	r20, r26
    6e0a:	a0 e4       	ldi	r26, 0x40	; 64
    6e0c:	5a 07       	cpc	r21, r26
    6e0e:	10 f0       	brcs	.+4      	; 0x6e14 <__pack_f+0x10e>
    6e10:	e1 e0       	ldi	r30, 0x01	; 1
    6e12:	f0 e0       	ldi	r31, 0x00	; 0
    6e14:	79 01       	movw	r14, r18
    6e16:	8a 01       	movw	r16, r20
    6e18:	27 c0       	rjmp	.+78     	; 0x6e68 <__pack_f+0x162>
    6e1a:	60 38       	cpi	r22, 0x80	; 128
    6e1c:	71 05       	cpc	r23, r1
    6e1e:	64 f5       	brge	.+88     	; 0x6e78 <__pack_f+0x172>
    6e20:	fb 01       	movw	r30, r22
    6e22:	e1 58       	subi	r30, 0x81	; 129
    6e24:	ff 4f       	sbci	r31, 0xFF	; 255
    6e26:	d8 01       	movw	r26, r16
    6e28:	c7 01       	movw	r24, r14
    6e2a:	8f 77       	andi	r24, 0x7F	; 127
    6e2c:	90 70       	andi	r25, 0x00	; 0
    6e2e:	a0 70       	andi	r26, 0x00	; 0
    6e30:	b0 70       	andi	r27, 0x00	; 0
    6e32:	80 34       	cpi	r24, 0x40	; 64
    6e34:	91 05       	cpc	r25, r1
    6e36:	a1 05       	cpc	r26, r1
    6e38:	b1 05       	cpc	r27, r1
    6e3a:	39 f4       	brne	.+14     	; 0x6e4a <__pack_f+0x144>
    6e3c:	e7 fe       	sbrs	r14, 7
    6e3e:	0d c0       	rjmp	.+26     	; 0x6e5a <__pack_f+0x154>
    6e40:	80 e4       	ldi	r24, 0x40	; 64
    6e42:	90 e0       	ldi	r25, 0x00	; 0
    6e44:	a0 e0       	ldi	r26, 0x00	; 0
    6e46:	b0 e0       	ldi	r27, 0x00	; 0
    6e48:	04 c0       	rjmp	.+8      	; 0x6e52 <__pack_f+0x14c>
    6e4a:	8f e3       	ldi	r24, 0x3F	; 63
    6e4c:	90 e0       	ldi	r25, 0x00	; 0
    6e4e:	a0 e0       	ldi	r26, 0x00	; 0
    6e50:	b0 e0       	ldi	r27, 0x00	; 0
    6e52:	e8 0e       	add	r14, r24
    6e54:	f9 1e       	adc	r15, r25
    6e56:	0a 1f       	adc	r16, r26
    6e58:	1b 1f       	adc	r17, r27
    6e5a:	17 ff       	sbrs	r17, 7
    6e5c:	05 c0       	rjmp	.+10     	; 0x6e68 <__pack_f+0x162>
    6e5e:	16 95       	lsr	r17
    6e60:	07 95       	ror	r16
    6e62:	f7 94       	ror	r15
    6e64:	e7 94       	ror	r14
    6e66:	31 96       	adiw	r30, 0x01	; 1
    6e68:	87 e0       	ldi	r24, 0x07	; 7
    6e6a:	16 95       	lsr	r17
    6e6c:	07 95       	ror	r16
    6e6e:	f7 94       	ror	r15
    6e70:	e7 94       	ror	r14
    6e72:	8a 95       	dec	r24
    6e74:	d1 f7       	brne	.-12     	; 0x6e6a <__pack_f+0x164>
    6e76:	05 c0       	rjmp	.+10     	; 0x6e82 <__pack_f+0x17c>
    6e78:	ee 24       	eor	r14, r14
    6e7a:	ff 24       	eor	r15, r15
    6e7c:	87 01       	movw	r16, r14
    6e7e:	ef ef       	ldi	r30, 0xFF	; 255
    6e80:	f0 e0       	ldi	r31, 0x00	; 0
    6e82:	6e 2f       	mov	r22, r30
    6e84:	67 95       	ror	r22
    6e86:	66 27       	eor	r22, r22
    6e88:	67 95       	ror	r22
    6e8a:	90 2f       	mov	r25, r16
    6e8c:	9f 77       	andi	r25, 0x7F	; 127
    6e8e:	d7 94       	ror	r13
    6e90:	dd 24       	eor	r13, r13
    6e92:	d7 94       	ror	r13
    6e94:	8e 2f       	mov	r24, r30
    6e96:	86 95       	lsr	r24
    6e98:	49 2f       	mov	r20, r25
    6e9a:	46 2b       	or	r20, r22
    6e9c:	58 2f       	mov	r21, r24
    6e9e:	5d 29       	or	r21, r13
    6ea0:	b7 01       	movw	r22, r14
    6ea2:	ca 01       	movw	r24, r20
    6ea4:	1f 91       	pop	r17
    6ea6:	0f 91       	pop	r16
    6ea8:	ff 90       	pop	r15
    6eaa:	ef 90       	pop	r14
    6eac:	df 90       	pop	r13
    6eae:	08 95       	ret

00006eb0 <__unpack_f>:
    6eb0:	fc 01       	movw	r30, r24
    6eb2:	db 01       	movw	r26, r22
    6eb4:	40 81       	ld	r20, Z
    6eb6:	51 81       	ldd	r21, Z+1	; 0x01
    6eb8:	22 81       	ldd	r18, Z+2	; 0x02
    6eba:	62 2f       	mov	r22, r18
    6ebc:	6f 77       	andi	r22, 0x7F	; 127
    6ebe:	70 e0       	ldi	r23, 0x00	; 0
    6ec0:	22 1f       	adc	r18, r18
    6ec2:	22 27       	eor	r18, r18
    6ec4:	22 1f       	adc	r18, r18
    6ec6:	93 81       	ldd	r25, Z+3	; 0x03
    6ec8:	89 2f       	mov	r24, r25
    6eca:	88 0f       	add	r24, r24
    6ecc:	82 2b       	or	r24, r18
    6ece:	28 2f       	mov	r18, r24
    6ed0:	30 e0       	ldi	r19, 0x00	; 0
    6ed2:	99 1f       	adc	r25, r25
    6ed4:	99 27       	eor	r25, r25
    6ed6:	99 1f       	adc	r25, r25
    6ed8:	11 96       	adiw	r26, 0x01	; 1
    6eda:	9c 93       	st	X, r25
    6edc:	11 97       	sbiw	r26, 0x01	; 1
    6ede:	21 15       	cp	r18, r1
    6ee0:	31 05       	cpc	r19, r1
    6ee2:	a9 f5       	brne	.+106    	; 0x6f4e <__unpack_f+0x9e>
    6ee4:	41 15       	cp	r20, r1
    6ee6:	51 05       	cpc	r21, r1
    6ee8:	61 05       	cpc	r22, r1
    6eea:	71 05       	cpc	r23, r1
    6eec:	11 f4       	brne	.+4      	; 0x6ef2 <__unpack_f+0x42>
    6eee:	82 e0       	ldi	r24, 0x02	; 2
    6ef0:	37 c0       	rjmp	.+110    	; 0x6f60 <__unpack_f+0xb0>
    6ef2:	82 e8       	ldi	r24, 0x82	; 130
    6ef4:	9f ef       	ldi	r25, 0xFF	; 255
    6ef6:	13 96       	adiw	r26, 0x03	; 3
    6ef8:	9c 93       	st	X, r25
    6efa:	8e 93       	st	-X, r24
    6efc:	12 97       	sbiw	r26, 0x02	; 2
    6efe:	9a 01       	movw	r18, r20
    6f00:	ab 01       	movw	r20, r22
    6f02:	67 e0       	ldi	r22, 0x07	; 7
    6f04:	22 0f       	add	r18, r18
    6f06:	33 1f       	adc	r19, r19
    6f08:	44 1f       	adc	r20, r20
    6f0a:	55 1f       	adc	r21, r21
    6f0c:	6a 95       	dec	r22
    6f0e:	d1 f7       	brne	.-12     	; 0x6f04 <__unpack_f+0x54>
    6f10:	83 e0       	ldi	r24, 0x03	; 3
    6f12:	8c 93       	st	X, r24
    6f14:	0d c0       	rjmp	.+26     	; 0x6f30 <__unpack_f+0x80>
    6f16:	22 0f       	add	r18, r18
    6f18:	33 1f       	adc	r19, r19
    6f1a:	44 1f       	adc	r20, r20
    6f1c:	55 1f       	adc	r21, r21
    6f1e:	12 96       	adiw	r26, 0x02	; 2
    6f20:	8d 91       	ld	r24, X+
    6f22:	9c 91       	ld	r25, X
    6f24:	13 97       	sbiw	r26, 0x03	; 3
    6f26:	01 97       	sbiw	r24, 0x01	; 1
    6f28:	13 96       	adiw	r26, 0x03	; 3
    6f2a:	9c 93       	st	X, r25
    6f2c:	8e 93       	st	-X, r24
    6f2e:	12 97       	sbiw	r26, 0x02	; 2
    6f30:	20 30       	cpi	r18, 0x00	; 0
    6f32:	80 e0       	ldi	r24, 0x00	; 0
    6f34:	38 07       	cpc	r19, r24
    6f36:	80 e0       	ldi	r24, 0x00	; 0
    6f38:	48 07       	cpc	r20, r24
    6f3a:	80 e4       	ldi	r24, 0x40	; 64
    6f3c:	58 07       	cpc	r21, r24
    6f3e:	58 f3       	brcs	.-42     	; 0x6f16 <__unpack_f+0x66>
    6f40:	14 96       	adiw	r26, 0x04	; 4
    6f42:	2d 93       	st	X+, r18
    6f44:	3d 93       	st	X+, r19
    6f46:	4d 93       	st	X+, r20
    6f48:	5c 93       	st	X, r21
    6f4a:	17 97       	sbiw	r26, 0x07	; 7
    6f4c:	08 95       	ret
    6f4e:	2f 3f       	cpi	r18, 0xFF	; 255
    6f50:	31 05       	cpc	r19, r1
    6f52:	79 f4       	brne	.+30     	; 0x6f72 <__unpack_f+0xc2>
    6f54:	41 15       	cp	r20, r1
    6f56:	51 05       	cpc	r21, r1
    6f58:	61 05       	cpc	r22, r1
    6f5a:	71 05       	cpc	r23, r1
    6f5c:	19 f4       	brne	.+6      	; 0x6f64 <__unpack_f+0xb4>
    6f5e:	84 e0       	ldi	r24, 0x04	; 4
    6f60:	8c 93       	st	X, r24
    6f62:	08 95       	ret
    6f64:	64 ff       	sbrs	r22, 4
    6f66:	03 c0       	rjmp	.+6      	; 0x6f6e <__unpack_f+0xbe>
    6f68:	81 e0       	ldi	r24, 0x01	; 1
    6f6a:	8c 93       	st	X, r24
    6f6c:	12 c0       	rjmp	.+36     	; 0x6f92 <__unpack_f+0xe2>
    6f6e:	1c 92       	st	X, r1
    6f70:	10 c0       	rjmp	.+32     	; 0x6f92 <__unpack_f+0xe2>
    6f72:	2f 57       	subi	r18, 0x7F	; 127
    6f74:	30 40       	sbci	r19, 0x00	; 0
    6f76:	13 96       	adiw	r26, 0x03	; 3
    6f78:	3c 93       	st	X, r19
    6f7a:	2e 93       	st	-X, r18
    6f7c:	12 97       	sbiw	r26, 0x02	; 2
    6f7e:	83 e0       	ldi	r24, 0x03	; 3
    6f80:	8c 93       	st	X, r24
    6f82:	87 e0       	ldi	r24, 0x07	; 7
    6f84:	44 0f       	add	r20, r20
    6f86:	55 1f       	adc	r21, r21
    6f88:	66 1f       	adc	r22, r22
    6f8a:	77 1f       	adc	r23, r23
    6f8c:	8a 95       	dec	r24
    6f8e:	d1 f7       	brne	.-12     	; 0x6f84 <__unpack_f+0xd4>
    6f90:	70 64       	ori	r23, 0x40	; 64
    6f92:	14 96       	adiw	r26, 0x04	; 4
    6f94:	4d 93       	st	X+, r20
    6f96:	5d 93       	st	X+, r21
    6f98:	6d 93       	st	X+, r22
    6f9a:	7c 93       	st	X, r23
    6f9c:	17 97       	sbiw	r26, 0x07	; 7
    6f9e:	08 95       	ret

00006fa0 <__fpcmp_parts_f>:
    6fa0:	1f 93       	push	r17
    6fa2:	dc 01       	movw	r26, r24
    6fa4:	fb 01       	movw	r30, r22
    6fa6:	9c 91       	ld	r25, X
    6fa8:	92 30       	cpi	r25, 0x02	; 2
    6faa:	08 f4       	brcc	.+2      	; 0x6fae <__fpcmp_parts_f+0xe>
    6fac:	47 c0       	rjmp	.+142    	; 0x703c <__fpcmp_parts_f+0x9c>
    6fae:	80 81       	ld	r24, Z
    6fb0:	82 30       	cpi	r24, 0x02	; 2
    6fb2:	08 f4       	brcc	.+2      	; 0x6fb6 <__fpcmp_parts_f+0x16>
    6fb4:	43 c0       	rjmp	.+134    	; 0x703c <__fpcmp_parts_f+0x9c>
    6fb6:	94 30       	cpi	r25, 0x04	; 4
    6fb8:	51 f4       	brne	.+20     	; 0x6fce <__fpcmp_parts_f+0x2e>
    6fba:	11 96       	adiw	r26, 0x01	; 1
    6fbc:	1c 91       	ld	r17, X
    6fbe:	84 30       	cpi	r24, 0x04	; 4
    6fc0:	99 f5       	brne	.+102    	; 0x7028 <__fpcmp_parts_f+0x88>
    6fc2:	81 81       	ldd	r24, Z+1	; 0x01
    6fc4:	68 2f       	mov	r22, r24
    6fc6:	70 e0       	ldi	r23, 0x00	; 0
    6fc8:	61 1b       	sub	r22, r17
    6fca:	71 09       	sbc	r23, r1
    6fcc:	3f c0       	rjmp	.+126    	; 0x704c <__fpcmp_parts_f+0xac>
    6fce:	84 30       	cpi	r24, 0x04	; 4
    6fd0:	21 f0       	breq	.+8      	; 0x6fda <__fpcmp_parts_f+0x3a>
    6fd2:	92 30       	cpi	r25, 0x02	; 2
    6fd4:	31 f4       	brne	.+12     	; 0x6fe2 <__fpcmp_parts_f+0x42>
    6fd6:	82 30       	cpi	r24, 0x02	; 2
    6fd8:	b9 f1       	breq	.+110    	; 0x7048 <__fpcmp_parts_f+0xa8>
    6fda:	81 81       	ldd	r24, Z+1	; 0x01
    6fdc:	88 23       	and	r24, r24
    6fde:	89 f1       	breq	.+98     	; 0x7042 <__fpcmp_parts_f+0xa2>
    6fe0:	2d c0       	rjmp	.+90     	; 0x703c <__fpcmp_parts_f+0x9c>
    6fe2:	11 96       	adiw	r26, 0x01	; 1
    6fe4:	1c 91       	ld	r17, X
    6fe6:	11 97       	sbiw	r26, 0x01	; 1
    6fe8:	82 30       	cpi	r24, 0x02	; 2
    6fea:	f1 f0       	breq	.+60     	; 0x7028 <__fpcmp_parts_f+0x88>
    6fec:	81 81       	ldd	r24, Z+1	; 0x01
    6fee:	18 17       	cp	r17, r24
    6ff0:	d9 f4       	brne	.+54     	; 0x7028 <__fpcmp_parts_f+0x88>
    6ff2:	12 96       	adiw	r26, 0x02	; 2
    6ff4:	2d 91       	ld	r18, X+
    6ff6:	3c 91       	ld	r19, X
    6ff8:	13 97       	sbiw	r26, 0x03	; 3
    6ffa:	82 81       	ldd	r24, Z+2	; 0x02
    6ffc:	93 81       	ldd	r25, Z+3	; 0x03
    6ffe:	82 17       	cp	r24, r18
    7000:	93 07       	cpc	r25, r19
    7002:	94 f0       	brlt	.+36     	; 0x7028 <__fpcmp_parts_f+0x88>
    7004:	28 17       	cp	r18, r24
    7006:	39 07       	cpc	r19, r25
    7008:	bc f0       	brlt	.+46     	; 0x7038 <__fpcmp_parts_f+0x98>
    700a:	14 96       	adiw	r26, 0x04	; 4
    700c:	8d 91       	ld	r24, X+
    700e:	9d 91       	ld	r25, X+
    7010:	0d 90       	ld	r0, X+
    7012:	bc 91       	ld	r27, X
    7014:	a0 2d       	mov	r26, r0
    7016:	24 81       	ldd	r18, Z+4	; 0x04
    7018:	35 81       	ldd	r19, Z+5	; 0x05
    701a:	46 81       	ldd	r20, Z+6	; 0x06
    701c:	57 81       	ldd	r21, Z+7	; 0x07
    701e:	28 17       	cp	r18, r24
    7020:	39 07       	cpc	r19, r25
    7022:	4a 07       	cpc	r20, r26
    7024:	5b 07       	cpc	r21, r27
    7026:	18 f4       	brcc	.+6      	; 0x702e <__fpcmp_parts_f+0x8e>
    7028:	11 23       	and	r17, r17
    702a:	41 f0       	breq	.+16     	; 0x703c <__fpcmp_parts_f+0x9c>
    702c:	0a c0       	rjmp	.+20     	; 0x7042 <__fpcmp_parts_f+0xa2>
    702e:	82 17       	cp	r24, r18
    7030:	93 07       	cpc	r25, r19
    7032:	a4 07       	cpc	r26, r20
    7034:	b5 07       	cpc	r27, r21
    7036:	40 f4       	brcc	.+16     	; 0x7048 <__fpcmp_parts_f+0xa8>
    7038:	11 23       	and	r17, r17
    703a:	19 f0       	breq	.+6      	; 0x7042 <__fpcmp_parts_f+0xa2>
    703c:	61 e0       	ldi	r22, 0x01	; 1
    703e:	70 e0       	ldi	r23, 0x00	; 0
    7040:	05 c0       	rjmp	.+10     	; 0x704c <__fpcmp_parts_f+0xac>
    7042:	6f ef       	ldi	r22, 0xFF	; 255
    7044:	7f ef       	ldi	r23, 0xFF	; 255
    7046:	02 c0       	rjmp	.+4      	; 0x704c <__fpcmp_parts_f+0xac>
    7048:	60 e0       	ldi	r22, 0x00	; 0
    704a:	70 e0       	ldi	r23, 0x00	; 0
    704c:	cb 01       	movw	r24, r22
    704e:	1f 91       	pop	r17
    7050:	08 95       	ret

00007052 <__mulsi3>:
    7052:	62 9f       	mul	r22, r18
    7054:	d0 01       	movw	r26, r0
    7056:	73 9f       	mul	r23, r19
    7058:	f0 01       	movw	r30, r0
    705a:	82 9f       	mul	r24, r18
    705c:	e0 0d       	add	r30, r0
    705e:	f1 1d       	adc	r31, r1
    7060:	64 9f       	mul	r22, r20
    7062:	e0 0d       	add	r30, r0
    7064:	f1 1d       	adc	r31, r1
    7066:	92 9f       	mul	r25, r18
    7068:	f0 0d       	add	r31, r0
    706a:	83 9f       	mul	r24, r19
    706c:	f0 0d       	add	r31, r0
    706e:	74 9f       	mul	r23, r20
    7070:	f0 0d       	add	r31, r0
    7072:	65 9f       	mul	r22, r21
    7074:	f0 0d       	add	r31, r0
    7076:	99 27       	eor	r25, r25
    7078:	72 9f       	mul	r23, r18
    707a:	b0 0d       	add	r27, r0
    707c:	e1 1d       	adc	r30, r1
    707e:	f9 1f       	adc	r31, r25
    7080:	63 9f       	mul	r22, r19
    7082:	b0 0d       	add	r27, r0
    7084:	e1 1d       	adc	r30, r1
    7086:	f9 1f       	adc	r31, r25
    7088:	bd 01       	movw	r22, r26
    708a:	cf 01       	movw	r24, r30
    708c:	11 24       	eor	r1, r1
    708e:	08 95       	ret

00007090 <__udivmodqi4>:
    7090:	99 1b       	sub	r25, r25
    7092:	79 e0       	ldi	r23, 0x09	; 9
    7094:	04 c0       	rjmp	.+8      	; 0x709e <__udivmodqi4_ep>

00007096 <__udivmodqi4_loop>:
    7096:	99 1f       	adc	r25, r25
    7098:	96 17       	cp	r25, r22
    709a:	08 f0       	brcs	.+2      	; 0x709e <__udivmodqi4_ep>
    709c:	96 1b       	sub	r25, r22

0000709e <__udivmodqi4_ep>:
    709e:	88 1f       	adc	r24, r24
    70a0:	7a 95       	dec	r23
    70a2:	c9 f7       	brne	.-14     	; 0x7096 <__udivmodqi4_loop>
    70a4:	80 95       	com	r24
    70a6:	08 95       	ret

000070a8 <__udivmodhi4>:
    70a8:	aa 1b       	sub	r26, r26
    70aa:	bb 1b       	sub	r27, r27
    70ac:	51 e1       	ldi	r21, 0x11	; 17
    70ae:	07 c0       	rjmp	.+14     	; 0x70be <__udivmodhi4_ep>

000070b0 <__udivmodhi4_loop>:
    70b0:	aa 1f       	adc	r26, r26
    70b2:	bb 1f       	adc	r27, r27
    70b4:	a6 17       	cp	r26, r22
    70b6:	b7 07       	cpc	r27, r23
    70b8:	10 f0       	brcs	.+4      	; 0x70be <__udivmodhi4_ep>
    70ba:	a6 1b       	sub	r26, r22
    70bc:	b7 0b       	sbc	r27, r23

000070be <__udivmodhi4_ep>:
    70be:	88 1f       	adc	r24, r24
    70c0:	99 1f       	adc	r25, r25
    70c2:	5a 95       	dec	r21
    70c4:	a9 f7       	brne	.-22     	; 0x70b0 <__udivmodhi4_loop>
    70c6:	80 95       	com	r24
    70c8:	90 95       	com	r25
    70ca:	bc 01       	movw	r22, r24
    70cc:	cd 01       	movw	r24, r26
    70ce:	08 95       	ret

000070d0 <__divmodhi4>:
    70d0:	97 fb       	bst	r25, 7
    70d2:	09 2e       	mov	r0, r25
    70d4:	07 26       	eor	r0, r23
    70d6:	0a d0       	rcall	.+20     	; 0x70ec <__divmodhi4_neg1>
    70d8:	77 fd       	sbrc	r23, 7
    70da:	04 d0       	rcall	.+8      	; 0x70e4 <__divmodhi4_neg2>
    70dc:	e5 df       	rcall	.-54     	; 0x70a8 <__udivmodhi4>
    70de:	06 d0       	rcall	.+12     	; 0x70ec <__divmodhi4_neg1>
    70e0:	00 20       	and	r0, r0
    70e2:	1a f4       	brpl	.+6      	; 0x70ea <__divmodhi4_exit>

000070e4 <__divmodhi4_neg2>:
    70e4:	70 95       	com	r23
    70e6:	61 95       	neg	r22
    70e8:	7f 4f       	sbci	r23, 0xFF	; 255

000070ea <__divmodhi4_exit>:
    70ea:	08 95       	ret

000070ec <__divmodhi4_neg1>:
    70ec:	f6 f7       	brtc	.-4      	; 0x70ea <__divmodhi4_exit>
    70ee:	90 95       	com	r25
    70f0:	81 95       	neg	r24
    70f2:	9f 4f       	sbci	r25, 0xFF	; 255
    70f4:	08 95       	ret

000070f6 <__divmodsi4>:
    70f6:	97 fb       	bst	r25, 7
    70f8:	09 2e       	mov	r0, r25
    70fa:	05 26       	eor	r0, r21
    70fc:	0e d0       	rcall	.+28     	; 0x711a <__divmodsi4_neg1>
    70fe:	57 fd       	sbrc	r21, 7
    7100:	04 d0       	rcall	.+8      	; 0x710a <__divmodsi4_neg2>
    7102:	14 d0       	rcall	.+40     	; 0x712c <__udivmodsi4>
    7104:	0a d0       	rcall	.+20     	; 0x711a <__divmodsi4_neg1>
    7106:	00 1c       	adc	r0, r0
    7108:	38 f4       	brcc	.+14     	; 0x7118 <__divmodsi4_exit>

0000710a <__divmodsi4_neg2>:
    710a:	50 95       	com	r21
    710c:	40 95       	com	r20
    710e:	30 95       	com	r19
    7110:	21 95       	neg	r18
    7112:	3f 4f       	sbci	r19, 0xFF	; 255
    7114:	4f 4f       	sbci	r20, 0xFF	; 255
    7116:	5f 4f       	sbci	r21, 0xFF	; 255

00007118 <__divmodsi4_exit>:
    7118:	08 95       	ret

0000711a <__divmodsi4_neg1>:
    711a:	f6 f7       	brtc	.-4      	; 0x7118 <__divmodsi4_exit>
    711c:	90 95       	com	r25
    711e:	80 95       	com	r24
    7120:	70 95       	com	r23
    7122:	61 95       	neg	r22
    7124:	7f 4f       	sbci	r23, 0xFF	; 255
    7126:	8f 4f       	sbci	r24, 0xFF	; 255
    7128:	9f 4f       	sbci	r25, 0xFF	; 255
    712a:	08 95       	ret

0000712c <__udivmodsi4>:
    712c:	a1 e2       	ldi	r26, 0x21	; 33
    712e:	1a 2e       	mov	r1, r26
    7130:	aa 1b       	sub	r26, r26
    7132:	bb 1b       	sub	r27, r27
    7134:	fd 01       	movw	r30, r26
    7136:	0d c0       	rjmp	.+26     	; 0x7152 <__udivmodsi4_ep>

00007138 <__udivmodsi4_loop>:
    7138:	aa 1f       	adc	r26, r26
    713a:	bb 1f       	adc	r27, r27
    713c:	ee 1f       	adc	r30, r30
    713e:	ff 1f       	adc	r31, r31
    7140:	a2 17       	cp	r26, r18
    7142:	b3 07       	cpc	r27, r19
    7144:	e4 07       	cpc	r30, r20
    7146:	f5 07       	cpc	r31, r21
    7148:	20 f0       	brcs	.+8      	; 0x7152 <__udivmodsi4_ep>
    714a:	a2 1b       	sub	r26, r18
    714c:	b3 0b       	sbc	r27, r19
    714e:	e4 0b       	sbc	r30, r20
    7150:	f5 0b       	sbc	r31, r21

00007152 <__udivmodsi4_ep>:
    7152:	66 1f       	adc	r22, r22
    7154:	77 1f       	adc	r23, r23
    7156:	88 1f       	adc	r24, r24
    7158:	99 1f       	adc	r25, r25
    715a:	1a 94       	dec	r1
    715c:	69 f7       	brne	.-38     	; 0x7138 <__udivmodsi4_loop>
    715e:	60 95       	com	r22
    7160:	70 95       	com	r23
    7162:	80 95       	com	r24
    7164:	90 95       	com	r25
    7166:	9b 01       	movw	r18, r22
    7168:	ac 01       	movw	r20, r24
    716a:	bd 01       	movw	r22, r26
    716c:	cf 01       	movw	r24, r30
    716e:	08 95       	ret

00007170 <__prologue_saves__>:
    7170:	2f 92       	push	r2
    7172:	3f 92       	push	r3
    7174:	4f 92       	push	r4
    7176:	5f 92       	push	r5
    7178:	6f 92       	push	r6
    717a:	7f 92       	push	r7
    717c:	8f 92       	push	r8
    717e:	9f 92       	push	r9
    7180:	af 92       	push	r10
    7182:	bf 92       	push	r11
    7184:	cf 92       	push	r12
    7186:	df 92       	push	r13
    7188:	ef 92       	push	r14
    718a:	ff 92       	push	r15
    718c:	0f 93       	push	r16
    718e:	1f 93       	push	r17
    7190:	cf 93       	push	r28
    7192:	df 93       	push	r29
    7194:	cd b7       	in	r28, 0x3d	; 61
    7196:	de b7       	in	r29, 0x3e	; 62
    7198:	ca 1b       	sub	r28, r26
    719a:	db 0b       	sbc	r29, r27
    719c:	0f b6       	in	r0, 0x3f	; 63
    719e:	f8 94       	cli
    71a0:	de bf       	out	0x3e, r29	; 62
    71a2:	0f be       	out	0x3f, r0	; 63
    71a4:	cd bf       	out	0x3d, r28	; 61
    71a6:	09 94       	ijmp

000071a8 <__epilogue_restores__>:
    71a8:	2a 88       	ldd	r2, Y+18	; 0x12
    71aa:	39 88       	ldd	r3, Y+17	; 0x11
    71ac:	48 88       	ldd	r4, Y+16	; 0x10
    71ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    71b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    71b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    71b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    71b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    71b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    71ba:	b9 84       	ldd	r11, Y+9	; 0x09
    71bc:	c8 84       	ldd	r12, Y+8	; 0x08
    71be:	df 80       	ldd	r13, Y+7	; 0x07
    71c0:	ee 80       	ldd	r14, Y+6	; 0x06
    71c2:	fd 80       	ldd	r15, Y+5	; 0x05
    71c4:	0c 81       	ldd	r16, Y+4	; 0x04
    71c6:	1b 81       	ldd	r17, Y+3	; 0x03
    71c8:	aa 81       	ldd	r26, Y+2	; 0x02
    71ca:	b9 81       	ldd	r27, Y+1	; 0x01
    71cc:	ce 0f       	add	r28, r30
    71ce:	d1 1d       	adc	r29, r1
    71d0:	0f b6       	in	r0, 0x3f	; 63
    71d2:	f8 94       	cli
    71d4:	de bf       	out	0x3e, r29	; 62
    71d6:	0f be       	out	0x3f, r0	; 63
    71d8:	cd bf       	out	0x3d, r28	; 61
    71da:	ed 01       	movw	r28, r26
    71dc:	08 95       	ret

000071de <sprintf>:
    71de:	ae e0       	ldi	r26, 0x0E	; 14
    71e0:	b0 e0       	ldi	r27, 0x00	; 0
    71e2:	e5 ef       	ldi	r30, 0xF5	; 245
    71e4:	f8 e3       	ldi	r31, 0x38	; 56
    71e6:	0c 94 c6 38 	jmp	0x718c	; 0x718c <__prologue_saves__+0x1c>
    71ea:	0d 89       	ldd	r16, Y+21	; 0x15
    71ec:	1e 89       	ldd	r17, Y+22	; 0x16
    71ee:	86 e0       	ldi	r24, 0x06	; 6
    71f0:	8c 83       	std	Y+4, r24	; 0x04
    71f2:	1a 83       	std	Y+2, r17	; 0x02
    71f4:	09 83       	std	Y+1, r16	; 0x01
    71f6:	8f ef       	ldi	r24, 0xFF	; 255
    71f8:	9f e7       	ldi	r25, 0x7F	; 127
    71fa:	9e 83       	std	Y+6, r25	; 0x06
    71fc:	8d 83       	std	Y+5, r24	; 0x05
    71fe:	9e 01       	movw	r18, r28
    7200:	27 5e       	subi	r18, 0xE7	; 231
    7202:	3f 4f       	sbci	r19, 0xFF	; 255
    7204:	ce 01       	movw	r24, r28
    7206:	01 96       	adiw	r24, 0x01	; 1
    7208:	6f 89       	ldd	r22, Y+23	; 0x17
    720a:	78 8d       	ldd	r23, Y+24	; 0x18
    720c:	a9 01       	movw	r20, r18
    720e:	0e 94 13 39 	call	0x7226	; 0x7226 <vfprintf>
    7212:	2f 81       	ldd	r18, Y+7	; 0x07
    7214:	38 85       	ldd	r19, Y+8	; 0x08
    7216:	02 0f       	add	r16, r18
    7218:	13 1f       	adc	r17, r19
    721a:	f8 01       	movw	r30, r16
    721c:	10 82       	st	Z, r1
    721e:	2e 96       	adiw	r28, 0x0e	; 14
    7220:	e4 e0       	ldi	r30, 0x04	; 4
    7222:	0c 94 e2 38 	jmp	0x71c4	; 0x71c4 <__epilogue_restores__+0x1c>

00007226 <vfprintf>:
    7226:	ab e0       	ldi	r26, 0x0B	; 11
    7228:	b0 e0       	ldi	r27, 0x00	; 0
    722a:	e9 e1       	ldi	r30, 0x19	; 25
    722c:	f9 e3       	ldi	r31, 0x39	; 57
    722e:	0c 94 b8 38 	jmp	0x7170	; 0x7170 <__prologue_saves__>
    7232:	3c 01       	movw	r6, r24
    7234:	2b 01       	movw	r4, r22
    7236:	5a 01       	movw	r10, r20
    7238:	fc 01       	movw	r30, r24
    723a:	17 82       	std	Z+7, r1	; 0x07
    723c:	16 82       	std	Z+6, r1	; 0x06
    723e:	83 81       	ldd	r24, Z+3	; 0x03
    7240:	81 fd       	sbrc	r24, 1
    7242:	03 c0       	rjmp	.+6      	; 0x724a <vfprintf+0x24>
    7244:	6f ef       	ldi	r22, 0xFF	; 255
    7246:	7f ef       	ldi	r23, 0xFF	; 255
    7248:	c6 c1       	rjmp	.+908    	; 0x75d6 <vfprintf+0x3b0>
    724a:	9a e0       	ldi	r25, 0x0A	; 10
    724c:	89 2e       	mov	r8, r25
    724e:	1e 01       	movw	r2, r28
    7250:	08 94       	sec
    7252:	21 1c       	adc	r2, r1
    7254:	31 1c       	adc	r3, r1
    7256:	f3 01       	movw	r30, r6
    7258:	23 81       	ldd	r18, Z+3	; 0x03
    725a:	f2 01       	movw	r30, r4
    725c:	23 fd       	sbrc	r18, 3
    725e:	85 91       	lpm	r24, Z+
    7260:	23 ff       	sbrs	r18, 3
    7262:	81 91       	ld	r24, Z+
    7264:	2f 01       	movw	r4, r30
    7266:	88 23       	and	r24, r24
    7268:	09 f4       	brne	.+2      	; 0x726c <vfprintf+0x46>
    726a:	b2 c1       	rjmp	.+868    	; 0x75d0 <vfprintf+0x3aa>
    726c:	85 32       	cpi	r24, 0x25	; 37
    726e:	39 f4       	brne	.+14     	; 0x727e <vfprintf+0x58>
    7270:	23 fd       	sbrc	r18, 3
    7272:	85 91       	lpm	r24, Z+
    7274:	23 ff       	sbrs	r18, 3
    7276:	81 91       	ld	r24, Z+
    7278:	2f 01       	movw	r4, r30
    727a:	85 32       	cpi	r24, 0x25	; 37
    727c:	29 f4       	brne	.+10     	; 0x7288 <vfprintf+0x62>
    727e:	90 e0       	ldi	r25, 0x00	; 0
    7280:	b3 01       	movw	r22, r6
    7282:	0e 94 06 3b 	call	0x760c	; 0x760c <fputc>
    7286:	e7 cf       	rjmp	.-50     	; 0x7256 <vfprintf+0x30>
    7288:	98 2f       	mov	r25, r24
    728a:	ff 24       	eor	r15, r15
    728c:	ee 24       	eor	r14, r14
    728e:	99 24       	eor	r9, r9
    7290:	ff e1       	ldi	r31, 0x1F	; 31
    7292:	ff 15       	cp	r31, r15
    7294:	d0 f0       	brcs	.+52     	; 0x72ca <vfprintf+0xa4>
    7296:	9b 32       	cpi	r25, 0x2B	; 43
    7298:	69 f0       	breq	.+26     	; 0x72b4 <vfprintf+0x8e>
    729a:	9c 32       	cpi	r25, 0x2C	; 44
    729c:	28 f4       	brcc	.+10     	; 0x72a8 <vfprintf+0x82>
    729e:	90 32       	cpi	r25, 0x20	; 32
    72a0:	59 f0       	breq	.+22     	; 0x72b8 <vfprintf+0x92>
    72a2:	93 32       	cpi	r25, 0x23	; 35
    72a4:	91 f4       	brne	.+36     	; 0x72ca <vfprintf+0xa4>
    72a6:	0e c0       	rjmp	.+28     	; 0x72c4 <vfprintf+0x9e>
    72a8:	9d 32       	cpi	r25, 0x2D	; 45
    72aa:	49 f0       	breq	.+18     	; 0x72be <vfprintf+0x98>
    72ac:	90 33       	cpi	r25, 0x30	; 48
    72ae:	69 f4       	brne	.+26     	; 0x72ca <vfprintf+0xa4>
    72b0:	41 e0       	ldi	r20, 0x01	; 1
    72b2:	24 c0       	rjmp	.+72     	; 0x72fc <vfprintf+0xd6>
    72b4:	52 e0       	ldi	r21, 0x02	; 2
    72b6:	f5 2a       	or	r15, r21
    72b8:	84 e0       	ldi	r24, 0x04	; 4
    72ba:	f8 2a       	or	r15, r24
    72bc:	28 c0       	rjmp	.+80     	; 0x730e <vfprintf+0xe8>
    72be:	98 e0       	ldi	r25, 0x08	; 8
    72c0:	f9 2a       	or	r15, r25
    72c2:	25 c0       	rjmp	.+74     	; 0x730e <vfprintf+0xe8>
    72c4:	e0 e1       	ldi	r30, 0x10	; 16
    72c6:	fe 2a       	or	r15, r30
    72c8:	22 c0       	rjmp	.+68     	; 0x730e <vfprintf+0xe8>
    72ca:	f7 fc       	sbrc	r15, 7
    72cc:	29 c0       	rjmp	.+82     	; 0x7320 <vfprintf+0xfa>
    72ce:	89 2f       	mov	r24, r25
    72d0:	80 53       	subi	r24, 0x30	; 48
    72d2:	8a 30       	cpi	r24, 0x0A	; 10
    72d4:	70 f4       	brcc	.+28     	; 0x72f2 <vfprintf+0xcc>
    72d6:	f6 fe       	sbrs	r15, 6
    72d8:	05 c0       	rjmp	.+10     	; 0x72e4 <vfprintf+0xbe>
    72da:	98 9c       	mul	r9, r8
    72dc:	90 2c       	mov	r9, r0
    72de:	11 24       	eor	r1, r1
    72e0:	98 0e       	add	r9, r24
    72e2:	15 c0       	rjmp	.+42     	; 0x730e <vfprintf+0xe8>
    72e4:	e8 9c       	mul	r14, r8
    72e6:	e0 2c       	mov	r14, r0
    72e8:	11 24       	eor	r1, r1
    72ea:	e8 0e       	add	r14, r24
    72ec:	f0 e2       	ldi	r31, 0x20	; 32
    72ee:	ff 2a       	or	r15, r31
    72f0:	0e c0       	rjmp	.+28     	; 0x730e <vfprintf+0xe8>
    72f2:	9e 32       	cpi	r25, 0x2E	; 46
    72f4:	29 f4       	brne	.+10     	; 0x7300 <vfprintf+0xda>
    72f6:	f6 fc       	sbrc	r15, 6
    72f8:	6b c1       	rjmp	.+726    	; 0x75d0 <vfprintf+0x3aa>
    72fa:	40 e4       	ldi	r20, 0x40	; 64
    72fc:	f4 2a       	or	r15, r20
    72fe:	07 c0       	rjmp	.+14     	; 0x730e <vfprintf+0xe8>
    7300:	9c 36       	cpi	r25, 0x6C	; 108
    7302:	19 f4       	brne	.+6      	; 0x730a <vfprintf+0xe4>
    7304:	50 e8       	ldi	r21, 0x80	; 128
    7306:	f5 2a       	or	r15, r21
    7308:	02 c0       	rjmp	.+4      	; 0x730e <vfprintf+0xe8>
    730a:	98 36       	cpi	r25, 0x68	; 104
    730c:	49 f4       	brne	.+18     	; 0x7320 <vfprintf+0xfa>
    730e:	f2 01       	movw	r30, r4
    7310:	23 fd       	sbrc	r18, 3
    7312:	95 91       	lpm	r25, Z+
    7314:	23 ff       	sbrs	r18, 3
    7316:	91 91       	ld	r25, Z+
    7318:	2f 01       	movw	r4, r30
    731a:	99 23       	and	r25, r25
    731c:	09 f0       	breq	.+2      	; 0x7320 <vfprintf+0xfa>
    731e:	b8 cf       	rjmp	.-144    	; 0x7290 <vfprintf+0x6a>
    7320:	89 2f       	mov	r24, r25
    7322:	85 54       	subi	r24, 0x45	; 69
    7324:	83 30       	cpi	r24, 0x03	; 3
    7326:	18 f0       	brcs	.+6      	; 0x732e <vfprintf+0x108>
    7328:	80 52       	subi	r24, 0x20	; 32
    732a:	83 30       	cpi	r24, 0x03	; 3
    732c:	38 f4       	brcc	.+14     	; 0x733c <vfprintf+0x116>
    732e:	44 e0       	ldi	r20, 0x04	; 4
    7330:	50 e0       	ldi	r21, 0x00	; 0
    7332:	a4 0e       	add	r10, r20
    7334:	b5 1e       	adc	r11, r21
    7336:	5f e3       	ldi	r21, 0x3F	; 63
    7338:	59 83       	std	Y+1, r21	; 0x01
    733a:	0f c0       	rjmp	.+30     	; 0x735a <vfprintf+0x134>
    733c:	93 36       	cpi	r25, 0x63	; 99
    733e:	31 f0       	breq	.+12     	; 0x734c <vfprintf+0x126>
    7340:	93 37       	cpi	r25, 0x73	; 115
    7342:	79 f0       	breq	.+30     	; 0x7362 <vfprintf+0x13c>
    7344:	93 35       	cpi	r25, 0x53	; 83
    7346:	09 f0       	breq	.+2      	; 0x734a <vfprintf+0x124>
    7348:	56 c0       	rjmp	.+172    	; 0x73f6 <vfprintf+0x1d0>
    734a:	20 c0       	rjmp	.+64     	; 0x738c <vfprintf+0x166>
    734c:	f5 01       	movw	r30, r10
    734e:	80 81       	ld	r24, Z
    7350:	89 83       	std	Y+1, r24	; 0x01
    7352:	42 e0       	ldi	r20, 0x02	; 2
    7354:	50 e0       	ldi	r21, 0x00	; 0
    7356:	a4 0e       	add	r10, r20
    7358:	b5 1e       	adc	r11, r21
    735a:	61 01       	movw	r12, r2
    735c:	01 e0       	ldi	r16, 0x01	; 1
    735e:	10 e0       	ldi	r17, 0x00	; 0
    7360:	12 c0       	rjmp	.+36     	; 0x7386 <vfprintf+0x160>
    7362:	f5 01       	movw	r30, r10
    7364:	c0 80       	ld	r12, Z
    7366:	d1 80       	ldd	r13, Z+1	; 0x01
    7368:	f6 fc       	sbrc	r15, 6
    736a:	03 c0       	rjmp	.+6      	; 0x7372 <vfprintf+0x14c>
    736c:	6f ef       	ldi	r22, 0xFF	; 255
    736e:	7f ef       	ldi	r23, 0xFF	; 255
    7370:	02 c0       	rjmp	.+4      	; 0x7376 <vfprintf+0x150>
    7372:	69 2d       	mov	r22, r9
    7374:	70 e0       	ldi	r23, 0x00	; 0
    7376:	42 e0       	ldi	r20, 0x02	; 2
    7378:	50 e0       	ldi	r21, 0x00	; 0
    737a:	a4 0e       	add	r10, r20
    737c:	b5 1e       	adc	r11, r21
    737e:	c6 01       	movw	r24, r12
    7380:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <strnlen>
    7384:	8c 01       	movw	r16, r24
    7386:	5f e7       	ldi	r21, 0x7F	; 127
    7388:	f5 22       	and	r15, r21
    738a:	14 c0       	rjmp	.+40     	; 0x73b4 <vfprintf+0x18e>
    738c:	f5 01       	movw	r30, r10
    738e:	c0 80       	ld	r12, Z
    7390:	d1 80       	ldd	r13, Z+1	; 0x01
    7392:	f6 fc       	sbrc	r15, 6
    7394:	03 c0       	rjmp	.+6      	; 0x739c <vfprintf+0x176>
    7396:	6f ef       	ldi	r22, 0xFF	; 255
    7398:	7f ef       	ldi	r23, 0xFF	; 255
    739a:	02 c0       	rjmp	.+4      	; 0x73a0 <vfprintf+0x17a>
    739c:	69 2d       	mov	r22, r9
    739e:	70 e0       	ldi	r23, 0x00	; 0
    73a0:	42 e0       	ldi	r20, 0x02	; 2
    73a2:	50 e0       	ldi	r21, 0x00	; 0
    73a4:	a4 0e       	add	r10, r20
    73a6:	b5 1e       	adc	r11, r21
    73a8:	c6 01       	movw	r24, r12
    73aa:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <strnlen_P>
    73ae:	8c 01       	movw	r16, r24
    73b0:	50 e8       	ldi	r21, 0x80	; 128
    73b2:	f5 2a       	or	r15, r21
    73b4:	f3 fe       	sbrs	r15, 3
    73b6:	07 c0       	rjmp	.+14     	; 0x73c6 <vfprintf+0x1a0>
    73b8:	1a c0       	rjmp	.+52     	; 0x73ee <vfprintf+0x1c8>
    73ba:	80 e2       	ldi	r24, 0x20	; 32
    73bc:	90 e0       	ldi	r25, 0x00	; 0
    73be:	b3 01       	movw	r22, r6
    73c0:	0e 94 06 3b 	call	0x760c	; 0x760c <fputc>
    73c4:	ea 94       	dec	r14
    73c6:	8e 2d       	mov	r24, r14
    73c8:	90 e0       	ldi	r25, 0x00	; 0
    73ca:	08 17       	cp	r16, r24
    73cc:	19 07       	cpc	r17, r25
    73ce:	a8 f3       	brcs	.-22     	; 0x73ba <vfprintf+0x194>
    73d0:	0e c0       	rjmp	.+28     	; 0x73ee <vfprintf+0x1c8>
    73d2:	f6 01       	movw	r30, r12
    73d4:	f7 fc       	sbrc	r15, 7
    73d6:	85 91       	lpm	r24, Z+
    73d8:	f7 fe       	sbrs	r15, 7
    73da:	81 91       	ld	r24, Z+
    73dc:	6f 01       	movw	r12, r30
    73de:	90 e0       	ldi	r25, 0x00	; 0
    73e0:	b3 01       	movw	r22, r6
    73e2:	0e 94 06 3b 	call	0x760c	; 0x760c <fputc>
    73e6:	e1 10       	cpse	r14, r1
    73e8:	ea 94       	dec	r14
    73ea:	01 50       	subi	r16, 0x01	; 1
    73ec:	10 40       	sbci	r17, 0x00	; 0
    73ee:	01 15       	cp	r16, r1
    73f0:	11 05       	cpc	r17, r1
    73f2:	79 f7       	brne	.-34     	; 0x73d2 <vfprintf+0x1ac>
    73f4:	ea c0       	rjmp	.+468    	; 0x75ca <vfprintf+0x3a4>
    73f6:	94 36       	cpi	r25, 0x64	; 100
    73f8:	11 f0       	breq	.+4      	; 0x73fe <vfprintf+0x1d8>
    73fa:	99 36       	cpi	r25, 0x69	; 105
    73fc:	69 f5       	brne	.+90     	; 0x7458 <vfprintf+0x232>
    73fe:	f7 fe       	sbrs	r15, 7
    7400:	08 c0       	rjmp	.+16     	; 0x7412 <vfprintf+0x1ec>
    7402:	f5 01       	movw	r30, r10
    7404:	20 81       	ld	r18, Z
    7406:	31 81       	ldd	r19, Z+1	; 0x01
    7408:	42 81       	ldd	r20, Z+2	; 0x02
    740a:	53 81       	ldd	r21, Z+3	; 0x03
    740c:	84 e0       	ldi	r24, 0x04	; 4
    740e:	90 e0       	ldi	r25, 0x00	; 0
    7410:	0a c0       	rjmp	.+20     	; 0x7426 <vfprintf+0x200>
    7412:	f5 01       	movw	r30, r10
    7414:	80 81       	ld	r24, Z
    7416:	91 81       	ldd	r25, Z+1	; 0x01
    7418:	9c 01       	movw	r18, r24
    741a:	44 27       	eor	r20, r20
    741c:	37 fd       	sbrc	r19, 7
    741e:	40 95       	com	r20
    7420:	54 2f       	mov	r21, r20
    7422:	82 e0       	ldi	r24, 0x02	; 2
    7424:	90 e0       	ldi	r25, 0x00	; 0
    7426:	a8 0e       	add	r10, r24
    7428:	b9 1e       	adc	r11, r25
    742a:	9f e6       	ldi	r25, 0x6F	; 111
    742c:	f9 22       	and	r15, r25
    742e:	57 ff       	sbrs	r21, 7
    7430:	09 c0       	rjmp	.+18     	; 0x7444 <vfprintf+0x21e>
    7432:	50 95       	com	r21
    7434:	40 95       	com	r20
    7436:	30 95       	com	r19
    7438:	21 95       	neg	r18
    743a:	3f 4f       	sbci	r19, 0xFF	; 255
    743c:	4f 4f       	sbci	r20, 0xFF	; 255
    743e:	5f 4f       	sbci	r21, 0xFF	; 255
    7440:	e0 e8       	ldi	r30, 0x80	; 128
    7442:	fe 2a       	or	r15, r30
    7444:	ca 01       	movw	r24, r20
    7446:	b9 01       	movw	r22, r18
    7448:	a1 01       	movw	r20, r2
    744a:	2a e0       	ldi	r18, 0x0A	; 10
    744c:	30 e0       	ldi	r19, 0x00	; 0
    744e:	0e 94 32 3b 	call	0x7664	; 0x7664 <__ultoa_invert>
    7452:	d8 2e       	mov	r13, r24
    7454:	d2 18       	sub	r13, r2
    7456:	40 c0       	rjmp	.+128    	; 0x74d8 <vfprintf+0x2b2>
    7458:	95 37       	cpi	r25, 0x75	; 117
    745a:	29 f4       	brne	.+10     	; 0x7466 <vfprintf+0x240>
    745c:	1f 2d       	mov	r17, r15
    745e:	1f 7e       	andi	r17, 0xEF	; 239
    7460:	2a e0       	ldi	r18, 0x0A	; 10
    7462:	30 e0       	ldi	r19, 0x00	; 0
    7464:	1d c0       	rjmp	.+58     	; 0x74a0 <vfprintf+0x27a>
    7466:	1f 2d       	mov	r17, r15
    7468:	19 7f       	andi	r17, 0xF9	; 249
    746a:	9f 36       	cpi	r25, 0x6F	; 111
    746c:	61 f0       	breq	.+24     	; 0x7486 <vfprintf+0x260>
    746e:	90 37       	cpi	r25, 0x70	; 112
    7470:	20 f4       	brcc	.+8      	; 0x747a <vfprintf+0x254>
    7472:	98 35       	cpi	r25, 0x58	; 88
    7474:	09 f0       	breq	.+2      	; 0x7478 <vfprintf+0x252>
    7476:	ac c0       	rjmp	.+344    	; 0x75d0 <vfprintf+0x3aa>
    7478:	0f c0       	rjmp	.+30     	; 0x7498 <vfprintf+0x272>
    747a:	90 37       	cpi	r25, 0x70	; 112
    747c:	39 f0       	breq	.+14     	; 0x748c <vfprintf+0x266>
    747e:	98 37       	cpi	r25, 0x78	; 120
    7480:	09 f0       	breq	.+2      	; 0x7484 <vfprintf+0x25e>
    7482:	a6 c0       	rjmp	.+332    	; 0x75d0 <vfprintf+0x3aa>
    7484:	04 c0       	rjmp	.+8      	; 0x748e <vfprintf+0x268>
    7486:	28 e0       	ldi	r18, 0x08	; 8
    7488:	30 e0       	ldi	r19, 0x00	; 0
    748a:	0a c0       	rjmp	.+20     	; 0x74a0 <vfprintf+0x27a>
    748c:	10 61       	ori	r17, 0x10	; 16
    748e:	14 fd       	sbrc	r17, 4
    7490:	14 60       	ori	r17, 0x04	; 4
    7492:	20 e1       	ldi	r18, 0x10	; 16
    7494:	30 e0       	ldi	r19, 0x00	; 0
    7496:	04 c0       	rjmp	.+8      	; 0x74a0 <vfprintf+0x27a>
    7498:	14 fd       	sbrc	r17, 4
    749a:	16 60       	ori	r17, 0x06	; 6
    749c:	20 e1       	ldi	r18, 0x10	; 16
    749e:	32 e0       	ldi	r19, 0x02	; 2
    74a0:	17 ff       	sbrs	r17, 7
    74a2:	08 c0       	rjmp	.+16     	; 0x74b4 <vfprintf+0x28e>
    74a4:	f5 01       	movw	r30, r10
    74a6:	60 81       	ld	r22, Z
    74a8:	71 81       	ldd	r23, Z+1	; 0x01
    74aa:	82 81       	ldd	r24, Z+2	; 0x02
    74ac:	93 81       	ldd	r25, Z+3	; 0x03
    74ae:	44 e0       	ldi	r20, 0x04	; 4
    74b0:	50 e0       	ldi	r21, 0x00	; 0
    74b2:	08 c0       	rjmp	.+16     	; 0x74c4 <vfprintf+0x29e>
    74b4:	f5 01       	movw	r30, r10
    74b6:	80 81       	ld	r24, Z
    74b8:	91 81       	ldd	r25, Z+1	; 0x01
    74ba:	bc 01       	movw	r22, r24
    74bc:	80 e0       	ldi	r24, 0x00	; 0
    74be:	90 e0       	ldi	r25, 0x00	; 0
    74c0:	42 e0       	ldi	r20, 0x02	; 2
    74c2:	50 e0       	ldi	r21, 0x00	; 0
    74c4:	a4 0e       	add	r10, r20
    74c6:	b5 1e       	adc	r11, r21
    74c8:	a1 01       	movw	r20, r2
    74ca:	0e 94 32 3b 	call	0x7664	; 0x7664 <__ultoa_invert>
    74ce:	d8 2e       	mov	r13, r24
    74d0:	d2 18       	sub	r13, r2
    74d2:	8f e7       	ldi	r24, 0x7F	; 127
    74d4:	f8 2e       	mov	r15, r24
    74d6:	f1 22       	and	r15, r17
    74d8:	f6 fe       	sbrs	r15, 6
    74da:	0b c0       	rjmp	.+22     	; 0x74f2 <vfprintf+0x2cc>
    74dc:	5e ef       	ldi	r21, 0xFE	; 254
    74de:	f5 22       	and	r15, r21
    74e0:	d9 14       	cp	r13, r9
    74e2:	38 f4       	brcc	.+14     	; 0x74f2 <vfprintf+0x2cc>
    74e4:	f4 fe       	sbrs	r15, 4
    74e6:	07 c0       	rjmp	.+14     	; 0x74f6 <vfprintf+0x2d0>
    74e8:	f2 fc       	sbrc	r15, 2
    74ea:	05 c0       	rjmp	.+10     	; 0x74f6 <vfprintf+0x2d0>
    74ec:	8f ee       	ldi	r24, 0xEF	; 239
    74ee:	f8 22       	and	r15, r24
    74f0:	02 c0       	rjmp	.+4      	; 0x74f6 <vfprintf+0x2d0>
    74f2:	1d 2d       	mov	r17, r13
    74f4:	01 c0       	rjmp	.+2      	; 0x74f8 <vfprintf+0x2d2>
    74f6:	19 2d       	mov	r17, r9
    74f8:	f4 fe       	sbrs	r15, 4
    74fa:	0d c0       	rjmp	.+26     	; 0x7516 <vfprintf+0x2f0>
    74fc:	fe 01       	movw	r30, r28
    74fe:	ed 0d       	add	r30, r13
    7500:	f1 1d       	adc	r31, r1
    7502:	80 81       	ld	r24, Z
    7504:	80 33       	cpi	r24, 0x30	; 48
    7506:	19 f4       	brne	.+6      	; 0x750e <vfprintf+0x2e8>
    7508:	99 ee       	ldi	r25, 0xE9	; 233
    750a:	f9 22       	and	r15, r25
    750c:	08 c0       	rjmp	.+16     	; 0x751e <vfprintf+0x2f8>
    750e:	1f 5f       	subi	r17, 0xFF	; 255
    7510:	f2 fe       	sbrs	r15, 2
    7512:	05 c0       	rjmp	.+10     	; 0x751e <vfprintf+0x2f8>
    7514:	03 c0       	rjmp	.+6      	; 0x751c <vfprintf+0x2f6>
    7516:	8f 2d       	mov	r24, r15
    7518:	86 78       	andi	r24, 0x86	; 134
    751a:	09 f0       	breq	.+2      	; 0x751e <vfprintf+0x2f8>
    751c:	1f 5f       	subi	r17, 0xFF	; 255
    751e:	0f 2d       	mov	r16, r15
    7520:	f3 fc       	sbrc	r15, 3
    7522:	14 c0       	rjmp	.+40     	; 0x754c <vfprintf+0x326>
    7524:	f0 fe       	sbrs	r15, 0
    7526:	0f c0       	rjmp	.+30     	; 0x7546 <vfprintf+0x320>
    7528:	1e 15       	cp	r17, r14
    752a:	10 f0       	brcs	.+4      	; 0x7530 <vfprintf+0x30a>
    752c:	9d 2c       	mov	r9, r13
    752e:	0b c0       	rjmp	.+22     	; 0x7546 <vfprintf+0x320>
    7530:	9d 2c       	mov	r9, r13
    7532:	9e 0c       	add	r9, r14
    7534:	91 1a       	sub	r9, r17
    7536:	1e 2d       	mov	r17, r14
    7538:	06 c0       	rjmp	.+12     	; 0x7546 <vfprintf+0x320>
    753a:	80 e2       	ldi	r24, 0x20	; 32
    753c:	90 e0       	ldi	r25, 0x00	; 0
    753e:	b3 01       	movw	r22, r6
    7540:	0e 94 06 3b 	call	0x760c	; 0x760c <fputc>
    7544:	1f 5f       	subi	r17, 0xFF	; 255
    7546:	1e 15       	cp	r17, r14
    7548:	c0 f3       	brcs	.-16     	; 0x753a <vfprintf+0x314>
    754a:	04 c0       	rjmp	.+8      	; 0x7554 <vfprintf+0x32e>
    754c:	1e 15       	cp	r17, r14
    754e:	10 f4       	brcc	.+4      	; 0x7554 <vfprintf+0x32e>
    7550:	e1 1a       	sub	r14, r17
    7552:	01 c0       	rjmp	.+2      	; 0x7556 <vfprintf+0x330>
    7554:	ee 24       	eor	r14, r14
    7556:	04 ff       	sbrs	r16, 4
    7558:	0f c0       	rjmp	.+30     	; 0x7578 <vfprintf+0x352>
    755a:	80 e3       	ldi	r24, 0x30	; 48
    755c:	90 e0       	ldi	r25, 0x00	; 0
    755e:	b3 01       	movw	r22, r6
    7560:	0e 94 06 3b 	call	0x760c	; 0x760c <fputc>
    7564:	02 ff       	sbrs	r16, 2
    7566:	1d c0       	rjmp	.+58     	; 0x75a2 <vfprintf+0x37c>
    7568:	01 fd       	sbrc	r16, 1
    756a:	03 c0       	rjmp	.+6      	; 0x7572 <vfprintf+0x34c>
    756c:	88 e7       	ldi	r24, 0x78	; 120
    756e:	90 e0       	ldi	r25, 0x00	; 0
    7570:	0e c0       	rjmp	.+28     	; 0x758e <vfprintf+0x368>
    7572:	88 e5       	ldi	r24, 0x58	; 88
    7574:	90 e0       	ldi	r25, 0x00	; 0
    7576:	0b c0       	rjmp	.+22     	; 0x758e <vfprintf+0x368>
    7578:	80 2f       	mov	r24, r16
    757a:	86 78       	andi	r24, 0x86	; 134
    757c:	91 f0       	breq	.+36     	; 0x75a2 <vfprintf+0x37c>
    757e:	01 ff       	sbrs	r16, 1
    7580:	02 c0       	rjmp	.+4      	; 0x7586 <vfprintf+0x360>
    7582:	8b e2       	ldi	r24, 0x2B	; 43
    7584:	01 c0       	rjmp	.+2      	; 0x7588 <vfprintf+0x362>
    7586:	80 e2       	ldi	r24, 0x20	; 32
    7588:	f7 fc       	sbrc	r15, 7
    758a:	8d e2       	ldi	r24, 0x2D	; 45
    758c:	90 e0       	ldi	r25, 0x00	; 0
    758e:	b3 01       	movw	r22, r6
    7590:	0e 94 06 3b 	call	0x760c	; 0x760c <fputc>
    7594:	06 c0       	rjmp	.+12     	; 0x75a2 <vfprintf+0x37c>
    7596:	80 e3       	ldi	r24, 0x30	; 48
    7598:	90 e0       	ldi	r25, 0x00	; 0
    759a:	b3 01       	movw	r22, r6
    759c:	0e 94 06 3b 	call	0x760c	; 0x760c <fputc>
    75a0:	9a 94       	dec	r9
    75a2:	d9 14       	cp	r13, r9
    75a4:	c0 f3       	brcs	.-16     	; 0x7596 <vfprintf+0x370>
    75a6:	da 94       	dec	r13
    75a8:	f1 01       	movw	r30, r2
    75aa:	ed 0d       	add	r30, r13
    75ac:	f1 1d       	adc	r31, r1
    75ae:	80 81       	ld	r24, Z
    75b0:	90 e0       	ldi	r25, 0x00	; 0
    75b2:	b3 01       	movw	r22, r6
    75b4:	0e 94 06 3b 	call	0x760c	; 0x760c <fputc>
    75b8:	dd 20       	and	r13, r13
    75ba:	a9 f7       	brne	.-22     	; 0x75a6 <vfprintf+0x380>
    75bc:	06 c0       	rjmp	.+12     	; 0x75ca <vfprintf+0x3a4>
    75be:	80 e2       	ldi	r24, 0x20	; 32
    75c0:	90 e0       	ldi	r25, 0x00	; 0
    75c2:	b3 01       	movw	r22, r6
    75c4:	0e 94 06 3b 	call	0x760c	; 0x760c <fputc>
    75c8:	ea 94       	dec	r14
    75ca:	ee 20       	and	r14, r14
    75cc:	c1 f7       	brne	.-16     	; 0x75be <vfprintf+0x398>
    75ce:	43 ce       	rjmp	.-890    	; 0x7256 <vfprintf+0x30>
    75d0:	f3 01       	movw	r30, r6
    75d2:	66 81       	ldd	r22, Z+6	; 0x06
    75d4:	77 81       	ldd	r23, Z+7	; 0x07
    75d6:	cb 01       	movw	r24, r22
    75d8:	2b 96       	adiw	r28, 0x0b	; 11
    75da:	e2 e1       	ldi	r30, 0x12	; 18
    75dc:	0c 94 d4 38 	jmp	0x71a8	; 0x71a8 <__epilogue_restores__>

000075e0 <strnlen_P>:
    75e0:	fc 01       	movw	r30, r24
    75e2:	05 90       	lpm	r0, Z+
    75e4:	61 50       	subi	r22, 0x01	; 1
    75e6:	70 40       	sbci	r23, 0x00	; 0
    75e8:	01 10       	cpse	r0, r1
    75ea:	d8 f7       	brcc	.-10     	; 0x75e2 <strnlen_P+0x2>
    75ec:	80 95       	com	r24
    75ee:	90 95       	com	r25
    75f0:	8e 0f       	add	r24, r30
    75f2:	9f 1f       	adc	r25, r31
    75f4:	08 95       	ret

000075f6 <strnlen>:
    75f6:	fc 01       	movw	r30, r24
    75f8:	61 50       	subi	r22, 0x01	; 1
    75fa:	70 40       	sbci	r23, 0x00	; 0
    75fc:	01 90       	ld	r0, Z+
    75fe:	01 10       	cpse	r0, r1
    7600:	d8 f7       	brcc	.-10     	; 0x75f8 <strnlen+0x2>
    7602:	80 95       	com	r24
    7604:	90 95       	com	r25
    7606:	8e 0f       	add	r24, r30
    7608:	9f 1f       	adc	r25, r31
    760a:	08 95       	ret

0000760c <fputc>:
    760c:	0f 93       	push	r16
    760e:	1f 93       	push	r17
    7610:	cf 93       	push	r28
    7612:	df 93       	push	r29
    7614:	8c 01       	movw	r16, r24
    7616:	eb 01       	movw	r28, r22
    7618:	8b 81       	ldd	r24, Y+3	; 0x03
    761a:	81 ff       	sbrs	r24, 1
    761c:	1b c0       	rjmp	.+54     	; 0x7654 <fputc+0x48>
    761e:	82 ff       	sbrs	r24, 2
    7620:	0d c0       	rjmp	.+26     	; 0x763c <fputc+0x30>
    7622:	2e 81       	ldd	r18, Y+6	; 0x06
    7624:	3f 81       	ldd	r19, Y+7	; 0x07
    7626:	8c 81       	ldd	r24, Y+4	; 0x04
    7628:	9d 81       	ldd	r25, Y+5	; 0x05
    762a:	28 17       	cp	r18, r24
    762c:	39 07       	cpc	r19, r25
    762e:	64 f4       	brge	.+24     	; 0x7648 <fputc+0x3c>
    7630:	e8 81       	ld	r30, Y
    7632:	f9 81       	ldd	r31, Y+1	; 0x01
    7634:	01 93       	st	Z+, r16
    7636:	f9 83       	std	Y+1, r31	; 0x01
    7638:	e8 83       	st	Y, r30
    763a:	06 c0       	rjmp	.+12     	; 0x7648 <fputc+0x3c>
    763c:	e8 85       	ldd	r30, Y+8	; 0x08
    763e:	f9 85       	ldd	r31, Y+9	; 0x09
    7640:	80 2f       	mov	r24, r16
    7642:	09 95       	icall
    7644:	89 2b       	or	r24, r25
    7646:	31 f4       	brne	.+12     	; 0x7654 <fputc+0x48>
    7648:	8e 81       	ldd	r24, Y+6	; 0x06
    764a:	9f 81       	ldd	r25, Y+7	; 0x07
    764c:	01 96       	adiw	r24, 0x01	; 1
    764e:	9f 83       	std	Y+7, r25	; 0x07
    7650:	8e 83       	std	Y+6, r24	; 0x06
    7652:	02 c0       	rjmp	.+4      	; 0x7658 <fputc+0x4c>
    7654:	0f ef       	ldi	r16, 0xFF	; 255
    7656:	1f ef       	ldi	r17, 0xFF	; 255
    7658:	c8 01       	movw	r24, r16
    765a:	df 91       	pop	r29
    765c:	cf 91       	pop	r28
    765e:	1f 91       	pop	r17
    7660:	0f 91       	pop	r16
    7662:	08 95       	ret

00007664 <__ultoa_invert>:
    7664:	fa 01       	movw	r30, r20
    7666:	aa 27       	eor	r26, r26
    7668:	28 30       	cpi	r18, 0x08	; 8
    766a:	51 f1       	breq	.+84     	; 0x76c0 <__ultoa_invert+0x5c>
    766c:	20 31       	cpi	r18, 0x10	; 16
    766e:	81 f1       	breq	.+96     	; 0x76d0 <__ultoa_invert+0x6c>
    7670:	e8 94       	clt
    7672:	6f 93       	push	r22
    7674:	6e 7f       	andi	r22, 0xFE	; 254
    7676:	6e 5f       	subi	r22, 0xFE	; 254
    7678:	7f 4f       	sbci	r23, 0xFF	; 255
    767a:	8f 4f       	sbci	r24, 0xFF	; 255
    767c:	9f 4f       	sbci	r25, 0xFF	; 255
    767e:	af 4f       	sbci	r26, 0xFF	; 255
    7680:	b1 e0       	ldi	r27, 0x01	; 1
    7682:	3e d0       	rcall	.+124    	; 0x7700 <__ultoa_invert+0x9c>
    7684:	b4 e0       	ldi	r27, 0x04	; 4
    7686:	3c d0       	rcall	.+120    	; 0x7700 <__ultoa_invert+0x9c>
    7688:	67 0f       	add	r22, r23
    768a:	78 1f       	adc	r23, r24
    768c:	89 1f       	adc	r24, r25
    768e:	9a 1f       	adc	r25, r26
    7690:	a1 1d       	adc	r26, r1
    7692:	68 0f       	add	r22, r24
    7694:	79 1f       	adc	r23, r25
    7696:	8a 1f       	adc	r24, r26
    7698:	91 1d       	adc	r25, r1
    769a:	a1 1d       	adc	r26, r1
    769c:	6a 0f       	add	r22, r26
    769e:	71 1d       	adc	r23, r1
    76a0:	81 1d       	adc	r24, r1
    76a2:	91 1d       	adc	r25, r1
    76a4:	a1 1d       	adc	r26, r1
    76a6:	20 d0       	rcall	.+64     	; 0x76e8 <__ultoa_invert+0x84>
    76a8:	09 f4       	brne	.+2      	; 0x76ac <__ultoa_invert+0x48>
    76aa:	68 94       	set
    76ac:	3f 91       	pop	r19
    76ae:	2a e0       	ldi	r18, 0x0A	; 10
    76b0:	26 9f       	mul	r18, r22
    76b2:	11 24       	eor	r1, r1
    76b4:	30 19       	sub	r19, r0
    76b6:	30 5d       	subi	r19, 0xD0	; 208
    76b8:	31 93       	st	Z+, r19
    76ba:	de f6       	brtc	.-74     	; 0x7672 <__ultoa_invert+0xe>
    76bc:	cf 01       	movw	r24, r30
    76be:	08 95       	ret
    76c0:	46 2f       	mov	r20, r22
    76c2:	47 70       	andi	r20, 0x07	; 7
    76c4:	40 5d       	subi	r20, 0xD0	; 208
    76c6:	41 93       	st	Z+, r20
    76c8:	b3 e0       	ldi	r27, 0x03	; 3
    76ca:	0f d0       	rcall	.+30     	; 0x76ea <__ultoa_invert+0x86>
    76cc:	c9 f7       	brne	.-14     	; 0x76c0 <__ultoa_invert+0x5c>
    76ce:	f6 cf       	rjmp	.-20     	; 0x76bc <__ultoa_invert+0x58>
    76d0:	46 2f       	mov	r20, r22
    76d2:	4f 70       	andi	r20, 0x0F	; 15
    76d4:	40 5d       	subi	r20, 0xD0	; 208
    76d6:	4a 33       	cpi	r20, 0x3A	; 58
    76d8:	18 f0       	brcs	.+6      	; 0x76e0 <__ultoa_invert+0x7c>
    76da:	49 5d       	subi	r20, 0xD9	; 217
    76dc:	31 fd       	sbrc	r19, 1
    76de:	40 52       	subi	r20, 0x20	; 32
    76e0:	41 93       	st	Z+, r20
    76e2:	02 d0       	rcall	.+4      	; 0x76e8 <__ultoa_invert+0x84>
    76e4:	a9 f7       	brne	.-22     	; 0x76d0 <__ultoa_invert+0x6c>
    76e6:	ea cf       	rjmp	.-44     	; 0x76bc <__ultoa_invert+0x58>
    76e8:	b4 e0       	ldi	r27, 0x04	; 4
    76ea:	a6 95       	lsr	r26
    76ec:	97 95       	ror	r25
    76ee:	87 95       	ror	r24
    76f0:	77 95       	ror	r23
    76f2:	67 95       	ror	r22
    76f4:	ba 95       	dec	r27
    76f6:	c9 f7       	brne	.-14     	; 0x76ea <__ultoa_invert+0x86>
    76f8:	00 97       	sbiw	r24, 0x00	; 0
    76fa:	61 05       	cpc	r22, r1
    76fc:	71 05       	cpc	r23, r1
    76fe:	08 95       	ret
    7700:	9b 01       	movw	r18, r22
    7702:	ac 01       	movw	r20, r24
    7704:	0a 2e       	mov	r0, r26
    7706:	06 94       	lsr	r0
    7708:	57 95       	ror	r21
    770a:	47 95       	ror	r20
    770c:	37 95       	ror	r19
    770e:	27 95       	ror	r18
    7710:	ba 95       	dec	r27
    7712:	c9 f7       	brne	.-14     	; 0x7706 <__ultoa_invert+0xa2>
    7714:	62 0f       	add	r22, r18
    7716:	73 1f       	adc	r23, r19
    7718:	84 1f       	adc	r24, r20
    771a:	95 1f       	adc	r25, r21
    771c:	a0 1d       	adc	r26, r0
    771e:	08 95       	ret

00007720 <_exit>:
    7720:	f8 94       	cli

00007722 <__stop_program>:
    7722:	ff cf       	rjmp	.-2      	; 0x7722 <__stop_program>
