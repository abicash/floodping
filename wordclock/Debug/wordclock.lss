
wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000032a  00800060  00005320  000053b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  0080038a  0080038a  000056de  2**0
                  ALLOC
  3 .stab         00004d94  00000000  00000000  000056e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018a6  00000000  00000000  0000a474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000bd1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001c9  00000000  00000000  0000beba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000022af  00000000  00000000  0000c083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001267  00000000  00000000  0000e332  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000140d  00000000  00000000  0000f599  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000109a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003c6  00000000  00000000  00010b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c9d  00000000  00000000  00010f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00011bcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      34:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_13>
      38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

00000054 <words>:
      54:	00 00 00 80 00 00 00 40 00 00 00 20 00 00 00 10     .......@... ....
      64:	00 00 00 08 00 00 00 04 00 00 00 02 00 00 00 01     ................
      74:	00 00 80 00 00 00 40 00 00 00 20 00 00 00 18 00     ......@... .....
      84:	00 00 0c 00 00 00 02 00 00 00 01 00 00 80 00 00     ................
      94:	00 40 00 00 00 20 00 00 00 10 00 00 00 08 00 00     .@... ..........
      a4:	00 04 00 00 00 02 00 00 00 01 00 00 80 00 00 00     ................
      b4:	40 00 00 00 20 00 00 00 10 00 00 00 08 00 00 00     @... ...........
      c4:	04 00 00 00 02 00 00 00                             ........

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf e5       	ldi	r28, 0x5F	; 95
      d2:	d8 e0       	ldi	r29, 0x08	; 8
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	13 e0       	ldi	r17, 0x03	; 3
      da:	a0 e6       	ldi	r26, 0x60	; 96
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e0 e2       	ldi	r30, 0x20	; 32
      e0:	f3 e5       	ldi	r31, 0x53	; 83
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <.do_copy_data_start>

000000e4 <.do_copy_data_loop>:
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0

000000e8 <.do_copy_data_start>:
      e8:	aa 38       	cpi	r26, 0x8A	; 138
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <.do_copy_data_loop>

000000ee <__do_clear_bss>:
      ee:	13 e0       	ldi	r17, 0x03	; 3
      f0:	aa e8       	ldi	r26, 0x8A	; 138
      f2:	b3 e0       	ldi	r27, 0x03	; 3
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	a6 3d       	cpi	r26, 0xD6	; 214
      fa:	b1 07       	cpc	r27, r17
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <main>
     102:	0c 94 8e 29 	jmp	0x531c	; 0x531c <_exit>

00000106 <__bad_interrupt>:
     106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <i2c_reset>:
 *  @return    0 = successful, else failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static uint8_t
i2c_reset (void)
{
     10a:	df 93       	push	r29
     10c:	cf 93       	push	r28
     10e:	0f 92       	push	r0
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
  uint8_t    rtc = 0;
     114:	19 82       	std	Y+1, r1	; 0x01
    {                                                                            // yes...
      rtc = I2C_ERROR_SDA_LOW;
    }
  }
#endif
  return rtc;
     116:	89 81       	ldd	r24, Y+1	; 0x01
}
     118:	0f 90       	pop	r0
     11a:	cf 91       	pop	r28
     11c:	df 91       	pop	r29
     11e:	08 95       	ret

00000120 <i2c_master_init>:
 *  @return    TRUE if successful, FALSE, if not
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_init(void)
{
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	0f 92       	push	r0
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
  static uint8_t  already_called;
  uint8_t         rtc;

  if (! already_called)
     12a:	80 91 8a 03 	lds	r24, 0x038A
     12e:	88 23       	and	r24, r24
     130:	71 f4       	brne	.+28     	; 0x14e <i2c_master_init+0x2e>
  {
    rtc = i2c_reset ();                                                         // try to reset I2C bus
     132:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_reset>
     136:	89 83       	std	Y+1, r24	; 0x01

    TWSR = 0;                                                                   // no prescaler
     138:	e1 e2       	ldi	r30, 0x21	; 33
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	10 82       	st	Z, r1
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;                                            // must be > 10 for stable operation
     13e:	e0 e2       	ldi	r30, 0x20	; 32
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	8c e0       	ldi	r24, 0x0C	; 12
     144:	80 83       	st	Z, r24
    already_called = 1;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 8a 03 	sts	0x038A, r24
     14c:	01 c0       	rjmp	.+2      	; 0x150 <i2c_master_init+0x30>
  }
  else
  {
    rtc = 0;
     14e:	19 82       	std	Y+1, r1	; 0x01
  }
  return rtc;
     150:	89 81       	ldd	r24, Y+1	; 0x01
}
     152:	0f 90       	pop	r0
     154:	cf 91       	pop	r28
     156:	df 91       	pop	r29
     158:	08 95       	ret

0000015a <i2c_master_start>:
 *  @return    1 = failed to access device, 0 = device accessible
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
unsigned char
i2c_master_start(uint8_t address, uint8_t * status_p)
{
     15a:	df 93       	push	r29
     15c:	cf 93       	push	r28
     15e:	00 d0       	rcall	.+0      	; 0x160 <i2c_master_start+0x6>
     160:	00 d0       	rcall	.+0      	; 0x162 <i2c_master_start+0x8>
     162:	0f 92       	push	r0
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	8a 83       	std	Y+2, r24	; 0x02
     16a:	7c 83       	std	Y+4, r23	; 0x04
     16c:	6b 83       	std	Y+3, r22	; 0x03
  uint8_t   twst;

  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);                                   // send START condition
     16e:	e6 e5       	ldi	r30, 0x56	; 86
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	84 ea       	ldi	r24, 0xA4	; 164
     174:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;                                            // wait until transmission completed
     176:	e6 e5       	ldi	r30, 0x56	; 86
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	88 23       	and	r24, r24
     17e:	dc f7       	brge	.-10     	; 0x176 <i2c_master_start+0x1c>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits.
     180:	e1 e2       	ldi	r30, 0x21	; 33
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	88 7f       	andi	r24, 0xF8	; 248
     188:	89 83       	std	Y+1, r24	; 0x01

  if ((twst != TW_START) && (twst != TW_REP_START))
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	88 30       	cpi	r24, 0x08	; 8
     18e:	51 f0       	breq	.+20     	; 0x1a4 <i2c_master_start+0x4a>
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	80 31       	cpi	r24, 0x10	; 16
     194:	39 f0       	breq	.+14     	; 0x1a4 <i2c_master_start+0x4a>
  {
    *status_p = twst;                                                           // store status
     196:	eb 81       	ldd	r30, Y+3	; 0x03
     198:	fc 81       	ldd	r31, Y+4	; 0x04
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	80 83       	st	Z, r24
    return 1;                                                                   // ERROR
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	8d 83       	std	Y+5, r24	; 0x05
     1a2:	20 c0       	rjmp	.+64     	; 0x1e4 <i2c_master_start+0x8a>
  }

  TWDR = address;                                                               // send device address
     1a4:	e3 e2       	ldi	r30, 0x23	; 35
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	8a 81       	ldd	r24, Y+2	; 0x02
     1aa:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     1ac:	e6 e5       	ldi	r30, 0x56	; 86
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	84 e8       	ldi	r24, 0x84	; 132
     1b2:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED                                             // wail until transmission completed and ACK/NACK has been received
     1b4:	e6 e5       	ldi	r30, 0x56	; 86
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	88 23       	and	r24, r24
     1bc:	dc f7       	brge	.-10     	; 0x1b4 <i2c_master_start+0x5a>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits.
     1be:	e1 e2       	ldi	r30, 0x21	; 33
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	88 7f       	andi	r24, 0xF8	; 248
     1c6:	89 83       	std	Y+1, r24	; 0x01

  if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	88 31       	cpi	r24, 0x18	; 24
     1cc:	51 f0       	breq	.+20     	; 0x1e2 <i2c_master_start+0x88>
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	80 34       	cpi	r24, 0x40	; 64
     1d2:	39 f0       	breq	.+14     	; 0x1e2 <i2c_master_start+0x88>
  {
    *status_p = twst;                                                           // store status
     1d4:	eb 81       	ldd	r30, Y+3	; 0x03
     1d6:	fc 81       	ldd	r31, Y+4	; 0x04
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	80 83       	st	Z, r24
    return 1;                                                                   // ERROR
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	8d 83       	std	Y+5, r24	; 0x05
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <i2c_master_start+0x8a>
  }

  return 0;                                                                     // OK
     1e2:	1d 82       	std	Y+5, r1	; 0x05
     1e4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	cf 91       	pop	r28
     1f2:	df 91       	pop	r29
     1f4:	08 95       	ret

000001f6 <i2c_master_start_wait>:
 *  @param    I2C address
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
i2c_master_start_wait (uint8_t address)
{
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	c6 56       	subi	r28, 0x66	; 102
     200:	d0 40       	sbci	r29, 0x00	; 0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	fe 01       	movw	r30, r28
     20e:	ea 59       	subi	r30, 0x9A	; 154
     210:	ff 4f       	sbci	r31, 0xFF	; 255
     212:	80 83       	st	Z, r24
  uint8_t   twst;

  while (1)
  {
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);                                 // send START condition
     214:	e6 e5       	ldi	r30, 0x56	; 86
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	84 ea       	ldi	r24, 0xA4	; 164
     21a:	80 83       	st	Z, r24
    WAIT_UNTIL_TRANSMISSION_COMPLETED;                                          // wait until transmission completed
     21c:	e6 e5       	ldi	r30, 0x56	; 86
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	88 23       	and	r24, r24
     224:	dc f7       	brge	.-10     	; 0x21c <i2c_master_start_wait+0x26>
    twst = TW_STATUS & 0xF8;                                                    // check value of TWI Status Register. Mask prescaler bits.
     226:	e1 e2       	ldi	r30, 0x21	; 33
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	88 7f       	andi	r24, 0xF8	; 248
     22e:	89 83       	std	Y+1, r24	; 0x01

    char s[100];

    if ((twst != TW_START) && (twst != TW_REP_START))
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	29 f1       	breq	.+74     	; 0x280 <i2c_master_start_wait+0x8a>
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	80 31       	cpi	r24, 0x10	; 16
     23a:	11 f1       	breq	.+68     	; 0x280 <i2c_master_start_wait+0x8a>
    {
        sprintf(s,"error cont1 : %d\r\n", twst);
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	28 2f       	mov	r18, r24
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	00 d0       	rcall	.+0      	; 0x244 <i2c_master_start_wait+0x4e>
     244:	00 d0       	rcall	.+0      	; 0x246 <i2c_master_start_wait+0x50>
     246:	00 d0       	rcall	.+0      	; 0x248 <i2c_master_start_wait+0x52>
     248:	ed b7       	in	r30, 0x3d	; 61
     24a:	fe b7       	in	r31, 0x3e	; 62
     24c:	31 96       	adiw	r30, 0x01	; 1
     24e:	ce 01       	movw	r24, r28
     250:	02 96       	adiw	r24, 0x02	; 2
     252:	91 83       	std	Z+1, r25	; 0x01
     254:	80 83       	st	Z, r24
     256:	80 e6       	ldi	r24, 0x60	; 96
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	93 83       	std	Z+3, r25	; 0x03
     25c:	82 83       	std	Z+2, r24	; 0x02
     25e:	35 83       	std	Z+5, r19	; 0x05
     260:	24 83       	std	Z+4, r18	; 0x04
     262:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
     266:	8d b7       	in	r24, 0x3d	; 61
     268:	9e b7       	in	r25, 0x3e	; 62
     26a:	06 96       	adiw	r24, 0x06	; 6
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	9e bf       	out	0x3e, r25	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	8d bf       	out	0x3d, r24	; 61
        uartPuts(s);
     276:	ce 01       	movw	r24, r28
     278:	02 96       	adiw	r24, 0x02	; 2
     27a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
     27e:	ca cf       	rjmp	.-108    	; 0x214 <i2c_master_start_wait+0x1e>
      continue;
    }

    TWDR = address;                                                             // send device address
     280:	a3 e2       	ldi	r26, 0x23	; 35
     282:	b0 e0       	ldi	r27, 0x00	; 0
     284:	fe 01       	movw	r30, r28
     286:	ea 59       	subi	r30, 0x9A	; 154
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);
     28e:	e6 e5       	ldi	r30, 0x56	; 86
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	84 e8       	ldi	r24, 0x84	; 132
     294:	80 83       	st	Z, r24
    WAIT_UNTIL_TRANSMISSION_COMPLETED;                                          // wail until transmission completed
     296:	e6 e5       	ldi	r30, 0x56	; 86
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	88 23       	and	r24, r24
     29e:	dc f7       	brge	.-10     	; 0x296 <i2c_master_start_wait+0xa0>
    twst = TW_STATUS & 0xF8;                                                    // check value of TWI Status Register. Mask prescaler bits.
     2a0:	e1 e2       	ldi	r30, 0x21	; 33
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	88 7f       	andi	r24, 0xF8	; 248
     2a8:	89 83       	std	Y+1, r24	; 0x01

    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	80 32       	cpi	r24, 0x20	; 32
     2ae:	19 f0       	breq	.+6      	; 0x2b6 <i2c_master_start_wait+0xc0>
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	88 35       	cpi	r24, 0x58	; 88
     2b4:	79 f5       	brne	.+94     	; 0x314 <i2c_master_start_wait+0x11e>
    {
      TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);                               // device busy, send stop condition to terminate write operation
     2b6:	e6 e5       	ldi	r30, 0x56	; 86
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	84 e9       	ldi	r24, 0x94	; 148
     2bc:	80 83       	st	Z, r24
      WAIT_UNTIL_STOP_CONDITION_EXECUTED;                                       // wait until stop condition is executed and bus released
     2be:	e6 e5       	ldi	r30, 0x56	; 86
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	80 71       	andi	r24, 0x10	; 16
     2ca:	90 70       	andi	r25, 0x00	; 0
     2cc:	00 97       	sbiw	r24, 0x00	; 0
     2ce:	b9 f7       	brne	.-18     	; 0x2be <i2c_master_start_wait+0xc8>

      sprintf(s,"error cont2 : %d\r\n", twst);
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	28 2f       	mov	r18, r24
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	00 d0       	rcall	.+0      	; 0x2d8 <i2c_master_start_wait+0xe2>
     2d8:	00 d0       	rcall	.+0      	; 0x2da <i2c_master_start_wait+0xe4>
     2da:	00 d0       	rcall	.+0      	; 0x2dc <i2c_master_start_wait+0xe6>
     2dc:	ed b7       	in	r30, 0x3d	; 61
     2de:	fe b7       	in	r31, 0x3e	; 62
     2e0:	31 96       	adiw	r30, 0x01	; 1
     2e2:	ce 01       	movw	r24, r28
     2e4:	02 96       	adiw	r24, 0x02	; 2
     2e6:	91 83       	std	Z+1, r25	; 0x01
     2e8:	80 83       	st	Z, r24
     2ea:	83 e7       	ldi	r24, 0x73	; 115
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	93 83       	std	Z+3, r25	; 0x03
     2f0:	82 83       	std	Z+2, r24	; 0x02
     2f2:	35 83       	std	Z+5, r19	; 0x05
     2f4:	24 83       	std	Z+4, r18	; 0x04
     2f6:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
     2fa:	8d b7       	in	r24, 0x3d	; 61
     2fc:	9e b7       	in	r25, 0x3e	; 62
     2fe:	06 96       	adiw	r24, 0x06	; 6
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	9e bf       	out	0x3e, r25	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	8d bf       	out	0x3d, r24	; 61
      uartPuts(s);
     30a:	ce 01       	movw	r24, r28
     30c:	02 96       	adiw	r24, 0x02	; 2
     30e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
     312:	80 cf       	rjmp	.-256    	; 0x214 <i2c_master_start_wait+0x1e>
      continue;
    }

    // if (twst != TW_MT_SLA_ACK) return 1;
    break;
   }
     314:	ca 59       	subi	r28, 0x9A	; 154
     316:	df 4f       	sbci	r29, 0xFF	; 255
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <i2c_master_rep_start>:
 *  @return    1 = failed to access device, 0 = device accessible
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_rep_start (uint8_t address, uint8_t * status_p)
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	00 d0       	rcall	.+0      	; 0x32e <i2c_master_rep_start+0x6>
     32e:	0f 92       	push	r0
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	89 83       	std	Y+1, r24	; 0x01
     336:	7b 83       	std	Y+3, r23	; 0x03
     338:	6a 83       	std	Y+2, r22	; 0x02
  return i2c_master_start (address, status_p);
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	b9 01       	movw	r22, r18
     342:	0e 94 ad 00 	call	0x15a	; 0x15a <i2c_master_start>
}
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	cf 91       	pop	r28
     34e:	df 91       	pop	r29
     350:	08 95       	ret

00000352 <i2c_master_stop>:
 *  @details  Terminates the data transfer and releases the I2C bus
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
i2c_master_stop (void)
{
     352:	df 93       	push	r29
     354:	cf 93       	push	r28
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);                                   // send stop condition
     35a:	e6 e5       	ldi	r30, 0x56	; 86
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	84 e9       	ldi	r24, 0x94	; 148
     360:	80 83       	st	Z, r24
  WAIT_UNTIL_STOP_CONDITION_EXECUTED;                                           // wait until stop condition is executed and bus released
     362:	e6 e5       	ldi	r30, 0x56	; 86
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	80 71       	andi	r24, 0x10	; 16
     36e:	90 70       	andi	r25, 0x00	; 0
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	b9 f7       	brne	.-18     	; 0x362 <i2c_master_stop+0x10>
}
     374:	cf 91       	pop	r28
     376:	df 91       	pop	r29
     378:	08 95       	ret

0000037a <i2c_master_write>:
 *  @return    0 write successful, 1 write failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_write (uint8_t data, uint8_t * status_p)
{
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	00 d0       	rcall	.+0      	; 0x380 <i2c_master_write+0x6>
     380:	00 d0       	rcall	.+0      	; 0x382 <i2c_master_write+0x8>
     382:	0f 92       	push	r0
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	8a 83       	std	Y+2, r24	; 0x02
     38a:	7c 83       	std	Y+4, r23	; 0x04
     38c:	6b 83       	std	Y+3, r22	; 0x03
  uint8_t   twst;

  TWDR = data;                                                                  // send data to the previously addressed device
     38e:	e3 e2       	ldi	r30, 0x23	; 35
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     396:	e6 e5       	ldi	r30, 0x56	; 86
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	84 e8       	ldi	r24, 0x84	; 132
     39c:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;                                            // wait until transmission completed
     39e:	e6 e5       	ldi	r30, 0x56	; 86
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	88 23       	and	r24, r24
     3a6:	dc f7       	brge	.-10     	; 0x39e <i2c_master_write+0x24>
  twst = TW_STATUS & 0xF8;                                                      // check value of TWI Status Register. Mask prescaler bits
     3a8:	e1 e2       	ldi	r30, 0x21	; 33
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	88 7f       	andi	r24, 0xF8	; 248
     3b0:	89 83       	std	Y+1, r24	; 0x01

  if (twst != TW_MT_DATA_ACK)
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	88 32       	cpi	r24, 0x28	; 40
     3b6:	39 f0       	breq	.+14     	; 0x3c6 <i2c_master_write+0x4c>
  {
    *status_p = twst;
     3b8:	eb 81       	ldd	r30, Y+3	; 0x03
     3ba:	fc 81       	ldd	r31, Y+4	; 0x04
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	80 83       	st	Z, r24
    return 1;
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	8d 83       	std	Y+5, r24	; 0x05
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <i2c_master_write+0x4e>
  }

  return 0;
     3c6:	1d 82       	std	Y+5, r1	; 0x05
     3c8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	08 95       	ret

000003da <i2c_master_read_ack>:
 *  @return    byte read
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_read_ack (void)
{
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     3e2:	e6 e5       	ldi	r30, 0x56	; 86
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	84 ec       	ldi	r24, 0xC4	; 196
     3e8:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;
     3ea:	e6 e5       	ldi	r30, 0x56	; 86
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	88 23       	and	r24, r24
     3f2:	dc f7       	brge	.-10     	; 0x3ea <i2c_master_read_ack+0x10>
  return TWDR;
     3f4:	e3 e2       	ldi	r30, 0x23	; 35
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
}/* i2c_master_readAck */
     3fa:	cf 91       	pop	r28
     3fc:	df 91       	pop	r29
     3fe:	08 95       	ret

00000400 <i2c_master_read_nak>:
 *  @return    byte read
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_master_read_nak (void)
{
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN);
     408:	e6 e5       	ldi	r30, 0x56	; 86
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	84 e8       	ldi	r24, 0x84	; 132
     40e:	80 83       	st	Z, r24
  WAIT_UNTIL_TRANSMISSION_COMPLETED;
     410:	e6 e5       	ldi	r30, 0x56	; 86
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	88 23       	and	r24, r24
     418:	dc f7       	brge	.-10     	; 0x410 <i2c_master_read_nak+0x10>
  return TWDR;
     41a:	e3 e2       	ldi	r30, 0x23	; 35
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
}
     420:	cf 91       	pop	r28
     422:	df 91       	pop	r29
     424:	08 95       	ret

00000426 <save_byte>:
static uint8_t rtc_initialized = 0;
static uint8_t i2c_rtc_status;

void
save_byte(uint8_t var, uint8_t value)
{
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	00 d0       	rcall	.+0      	; 0x42c <save_byte+0x6>
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	89 83       	std	Y+1, r24	; 0x01
     432:	6a 83       	std	Y+2, r22	; 0x02
  i2c_rtc_sram_write(0x10 + var, &value, 1);
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	80 5f       	subi	r24, 0xF0	; 240
     438:	9e 01       	movw	r18, r28
     43a:	2e 5f       	subi	r18, 0xFE	; 254
     43c:	3f 4f       	sbci	r19, 0xFF	; 255
     43e:	b9 01       	movw	r22, r18
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	0e 94 05 08 	call	0x100a	; 0x100a <i2c_rtc_sram_write>
}
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	cf 91       	pop	r28
     44c:	df 91       	pop	r29
     44e:	08 95       	ret

00000450 <read_byte>:

void
read_byte(uint8_t var, uint8_t *value)
{
     450:	df 93       	push	r29
     452:	cf 93       	push	r28
     454:	00 d0       	rcall	.+0      	; 0x456 <read_byte+0x6>
     456:	0f 92       	push	r0
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	89 83       	std	Y+1, r24	; 0x01
     45e:	7b 83       	std	Y+3, r23	; 0x03
     460:	6a 83       	std	Y+2, r22	; 0x02
  i2c_rtc_sram_read(0x10 + var, value, 1);
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	80 5f       	subi	r24, 0xF0	; 240
     466:	2a 81       	ldd	r18, Y+2	; 0x02
     468:	3b 81       	ldd	r19, Y+3	; 0x03
     46a:	b9 01       	movw	r22, r18
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_rtc_sram_read>
}
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	08 95       	ret

0000047e <set_offset>:

int8_t rtc_offset = 0;

void
set_offset(uint8_t newoffset)
{
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	c5 56       	subi	r28, 0x65	; 101
     488:	d0 40       	sbci	r29, 0x00	; 0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	fe 01       	movw	r30, r28
     496:	eb 59       	subi	r30, 0x9B	; 155
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	80 83       	st	Z, r24
  if (newoffset != rtc_offset)
     49c:	fe 01       	movw	r30, r28
     49e:	eb 59       	subi	r30, 0x9B	; 155
     4a0:	ff 4f       	sbci	r31, 0xFF	; 255
     4a2:	80 81       	ld	r24, Z
     4a4:	28 2f       	mov	r18, r24
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	80 91 8b 03 	lds	r24, 0x038B
     4ac:	99 27       	eor	r25, r25
     4ae:	87 fd       	sbrc	r24, 7
     4b0:	90 95       	com	r25
     4b2:	28 17       	cp	r18, r24
     4b4:	39 07       	cpc	r19, r25
     4b6:	89 f1       	breq	.+98     	; 0x51a <set_offset+0x9c>
  {
    rtc_offset = newoffset;
     4b8:	fe 01       	movw	r30, r28
     4ba:	eb 59       	subi	r30, 0x9B	; 155
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	80 81       	ld	r24, Z
     4c0:	80 93 8b 03 	sts	0x038B, r24
    save_byte(cRTCOffset, rtc_offset);
     4c4:	80 91 8b 03 	lds	r24, 0x038B
     4c8:	98 2f       	mov	r25, r24
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	69 2f       	mov	r22, r25
     4ce:	0e 94 13 02 	call	0x426	; 0x426 <save_byte>
    char s[100];
    sprintf(s, "rtc offset now: %d\r\n", rtc_offset);
     4d2:	80 91 8b 03 	lds	r24, 0x038B
     4d6:	28 2f       	mov	r18, r24
     4d8:	33 27       	eor	r19, r19
     4da:	27 fd       	sbrc	r18, 7
     4dc:	30 95       	com	r19
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <set_offset+0x62>
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <set_offset+0x64>
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <set_offset+0x66>
     4e4:	ed b7       	in	r30, 0x3d	; 61
     4e6:	fe b7       	in	r31, 0x3e	; 62
     4e8:	31 96       	adiw	r30, 0x01	; 1
     4ea:	ce 01       	movw	r24, r28
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	91 83       	std	Z+1, r25	; 0x01
     4f0:	80 83       	st	Z, r24
     4f2:	86 e8       	ldi	r24, 0x86	; 134
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	93 83       	std	Z+3, r25	; 0x03
     4f8:	82 83       	std	Z+2, r24	; 0x02
     4fa:	35 83       	std	Z+5, r19	; 0x05
     4fc:	24 83       	std	Z+4, r18	; 0x04
     4fe:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
     502:	8d b7       	in	r24, 0x3d	; 61
     504:	9e b7       	in	r25, 0x3e	; 62
     506:	06 96       	adiw	r24, 0x06	; 6
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	9e bf       	out	0x3e, r25	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	8d bf       	out	0x3d, r24	; 61
    uartPuts(s);
     512:	ce 01       	movw	r24, r28
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
  }
}
     51a:	cb 59       	subi	r28, 0x9B	; 155
     51c:	df 4f       	sbci	r29, 0xFF	; 255
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	cf 91       	pop	r28
     52a:	df 91       	pop	r29
     52c:	08 95       	ret

0000052e <bcdtoi>:
  return y;
}

uint8_t
bcdtoi(uint8_t bcd)
{
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	00 d0       	rcall	.+0      	; 0x534 <bcdtoi+0x6>
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t i = 10 * (bcd >> 4) + (bcd & 0x0F);
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	82 95       	swap	r24
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	88 2f       	mov	r24, r24
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	9c 01       	movw	r18, r24
     546:	22 0f       	add	r18, r18
     548:	33 1f       	adc	r19, r19
     54a:	c9 01       	movw	r24, r18
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	82 0f       	add	r24, r18
     556:	93 1f       	adc	r25, r19
     558:	98 2f       	mov	r25, r24
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	8f 70       	andi	r24, 0x0F	; 15
     55e:	89 0f       	add	r24, r25
     560:	89 83       	std	Y+1, r24	; 0x01
  return (i);
     562:	89 81       	ldd	r24, Y+1	; 0x01
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	cf 91       	pop	r28
     56a:	df 91       	pop	r29
     56c:	08 95       	ret

0000056e <itobcd>:

uint8_t
itobcd(uint8_t i)
{
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	00 d0       	rcall	.+0      	; 0x574 <itobcd+0x6>
     574:	0f 92       	push	r0
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	8b 83       	std	Y+3, r24	; 0x03
  bcd = (i / 10) << 4;
  bcd |= (i % 10);
#else
  uint8_t r;

  bcd = div10(i, &r) << 4;
     57c:	9e 01       	movw	r18, r28
     57e:	2e 5f       	subi	r18, 0xFE	; 254
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	b9 01       	movw	r22, r18
     586:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <div10>
     58a:	82 95       	swap	r24
     58c:	80 7f       	andi	r24, 0xF0	; 240
     58e:	89 83       	std	Y+1, r24	; 0x01
  bcd |= r;
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	89 2b       	or	r24, r25
     596:	89 83       	std	Y+1, r24	; 0x01
#endif

  return (bcd);
     598:	89 81       	ldd	r24, Y+1	; 0x01
}
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	cf 91       	pop	r28
     5a2:	df 91       	pop	r29
     5a4:	08 95       	ret

000005a6 <div10>:
#define CTRL_REG_RS0          0x01                                              // rate select RS0
static volatile uint8_t ctrlreg;

static inline uint8_t
div10(uint8_t x, uint8_t* o_remaind)
{
     5a6:	df 93       	push	r29
     5a8:	cf 93       	push	r28
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <div10+0x6>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <div10+0x8>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	8a 83       	std	Y+2, r24	; 0x02
     5b4:	7c 83       	std	Y+4, r23	; 0x04
     5b6:	6b 83       	std	Y+3, r22	; 0x03
  //    : [input]"d" (x)
  //    : "r1","r0"
  // );
  //*o_remaind = x-(10*y);
  //return y;
  uint8_t y = (((uint16_t) x) * 205) >> 11;
     5b8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	8d ec       	ldi	r24, 0xCD	; 205
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	ac 01       	movw	r20, r24
     5c4:	24 9f       	mul	r18, r20
     5c6:	c0 01       	movw	r24, r0
     5c8:	25 9f       	mul	r18, r21
     5ca:	90 0d       	add	r25, r0
     5cc:	34 9f       	mul	r19, r20
     5ce:	90 0d       	add	r25, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	89 2f       	mov	r24, r25
     5d4:	99 27       	eor	r25, r25
     5d6:	86 95       	lsr	r24
     5d8:	86 95       	lsr	r24
     5da:	86 95       	lsr	r24
     5dc:	89 83       	std	Y+1, r24	; 0x01
  *o_remaind = x - (y * 10);
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	88 2f       	mov	r24, r24
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	9c 01       	movw	r18, r24
     5e6:	22 0f       	add	r18, r18
     5e8:	33 1f       	adc	r19, r19
     5ea:	c9 01       	movw	r24, r18
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	82 0f       	add	r24, r18
     5f6:	93 1f       	adc	r25, r19
     5f8:	90 95       	com	r25
     5fa:	81 95       	neg	r24
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	98 2f       	mov	r25, r24
     600:	8a 81       	ldd	r24, Y+2	; 0x02
     602:	89 0f       	add	r24, r25
     604:	eb 81       	ldd	r30, Y+3	; 0x03
     606:	fc 81       	ldd	r31, Y+4	; 0x04
     608:	80 83       	st	Z, r24
  return y;
     60a:	89 81       	ldd	r24, Y+1	; 0x01
}
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	08 95       	ret

0000061a <i2c_rtc_get_status>:
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */

uint8_t
i2c_rtc_get_status(void)
{
     61a:	df 93       	push	r29
     61c:	cf 93       	push	r28
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
  return i2c_rtc_status;
     622:	80 91 8f 03 	lds	r24, 0x038F
}
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <i2c_rtc_write>:
 *  @return    TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_write(const DATETIME * datetime)
{
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	2a 97       	sbiw	r28, 0x0a	; 10
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	9a 87       	std	Y+10, r25	; 0x0a
     642:	89 87       	std	Y+9, r24	; 0x09
  uint8_t rtcbuf[7];
  uint8_t rtc = false;
     644:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
     646:	80 91 8c 03 	lds	r24, 0x038C
     64a:	88 23       	and	r24, r24
     64c:	b9 f1       	breq	.+110    	; 0x6bc <i2c_rtc_write+0x90>
  {
    rtcbuf[0] = itobcd(datetime->ss); // seconds    00-59
     64e:	e9 85       	ldd	r30, Y+9	; 0x09
     650:	fa 85       	ldd	r31, Y+10	; 0x0a
     652:	85 81       	ldd	r24, Z+5	; 0x05
     654:	0e 94 b7 02 	call	0x56e	; 0x56e <itobcd>
     658:	8a 83       	std	Y+2, r24	; 0x02
    rtcbuf[1] = itobcd(datetime->mm); // minutes    00-59
     65a:	e9 85       	ldd	r30, Y+9	; 0x09
     65c:	fa 85       	ldd	r31, Y+10	; 0x0a
     65e:	84 81       	ldd	r24, Z+4	; 0x04
     660:	0e 94 b7 02 	call	0x56e	; 0x56e <itobcd>
     664:	8b 83       	std	Y+3, r24	; 0x03
    rtcbuf[2] = itobcd(datetime->hh); // hours    00-23
     666:	e9 85       	ldd	r30, Y+9	; 0x09
     668:	fa 85       	ldd	r31, Y+10	; 0x0a
     66a:	83 81       	ldd	r24, Z+3	; 0x03
     66c:	0e 94 b7 02 	call	0x56e	; 0x56e <itobcd>
     670:	8c 83       	std	Y+4, r24	; 0x04
    rtcbuf[3] = itobcd(datetime->wd) + 1; // weekday     1-7
     672:	e9 85       	ldd	r30, Y+9	; 0x09
     674:	fa 85       	ldd	r31, Y+10	; 0x0a
     676:	86 81       	ldd	r24, Z+6	; 0x06
     678:	0e 94 b7 02 	call	0x56e	; 0x56e <itobcd>
     67c:	8f 5f       	subi	r24, 0xFF	; 255
     67e:	8d 83       	std	Y+5, r24	; 0x05
    rtcbuf[4] = itobcd(datetime->DD); // day of month  00-31
     680:	e9 85       	ldd	r30, Y+9	; 0x09
     682:	fa 85       	ldd	r31, Y+10	; 0x0a
     684:	82 81       	ldd	r24, Z+2	; 0x02
     686:	0e 94 b7 02 	call	0x56e	; 0x56e <itobcd>
     68a:	8e 83       	std	Y+6, r24	; 0x06
    rtcbuf[5] = itobcd(datetime->MM); // month    00-12
     68c:	e9 85       	ldd	r30, Y+9	; 0x09
     68e:	fa 85       	ldd	r31, Y+10	; 0x0a
     690:	81 81       	ldd	r24, Z+1	; 0x01
     692:	0e 94 b7 02 	call	0x56e	; 0x56e <itobcd>
     696:	8f 83       	std	Y+7, r24	; 0x07
    rtcbuf[6] = itobcd(datetime->YY); // year      00-99
     698:	e9 85       	ldd	r30, Y+9	; 0x09
     69a:	fa 85       	ldd	r31, Y+10	; 0x0a
     69c:	80 81       	ld	r24, Z
     69e:	0e 94 b7 02 	call	0x56e	; 0x56e <itobcd>
     6a2:	88 87       	std	Y+8, r24	; 0x08

    if (i2c_rtc_sram_write(0x00, rtcbuf, 7))
     6a4:	9e 01       	movw	r18, r28
     6a6:	2e 5f       	subi	r18, 0xFE	; 254
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	b9 01       	movw	r22, r18
     6ae:	47 e0       	ldi	r20, 0x07	; 7
     6b0:	0e 94 05 08 	call	0x100a	; 0x100a <i2c_rtc_sram_write>
     6b4:	88 23       	and	r24, r24
     6b6:	11 f0       	breq	.+4      	; 0x6bc <i2c_rtc_write+0x90>
    {
      rtc = true;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	89 83       	std	Y+1, r24	; 0x01
    }
  }
  return rtc;
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
}
     6be:	2a 96       	adiw	r28, 0x0a	; 10
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	cf 91       	pop	r28
     6cc:	df 91       	pop	r29
     6ce:	08 95       	ret

000006d0 <add_year>:

void
add_year(DATETIME * datetime)
{
     6d0:	df 93       	push	r29
     6d2:	cf 93       	push	r28
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <add_year+0x6>
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	89 83       	std	Y+1, r24	; 0x01
  datetime->YY++;
     6de:	e9 81       	ldd	r30, Y+1	; 0x01
     6e0:	fa 81       	ldd	r31, Y+2	; 0x02
     6e2:	80 81       	ld	r24, Z
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
     6e6:	e9 81       	ldd	r30, Y+1	; 0x01
     6e8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ea:	80 83       	st	Z, r24
}
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	cf 91       	pop	r28
     6f2:	df 91       	pop	r29
     6f4:	08 95       	ret

000006f6 <sub_year>:

void
sub_year(DATETIME * datetime)
{
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <sub_year+0x6>
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
  datetime->YY--;
     704:	e9 81       	ldd	r30, Y+1	; 0x01
     706:	fa 81       	ldd	r31, Y+2	; 0x02
     708:	80 81       	ld	r24, Z
     70a:	81 50       	subi	r24, 0x01	; 1
     70c:	e9 81       	ldd	r30, Y+1	; 0x01
     70e:	fa 81       	ldd	r31, Y+2	; 0x02
     710:	80 83       	st	Z, r24
}
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	cf 91       	pop	r28
     718:	df 91       	pop	r29
     71a:	08 95       	ret

0000071c <add_month>:

void
add_month(DATETIME * datetime)
{
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	00 d0       	rcall	.+0      	; 0x722 <add_month+0x6>
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	9a 83       	std	Y+2, r25	; 0x02
     728:	89 83       	std	Y+1, r24	; 0x01
  datetime->MM++;
     72a:	e9 81       	ldd	r30, Y+1	; 0x01
     72c:	fa 81       	ldd	r31, Y+2	; 0x02
     72e:	81 81       	ldd	r24, Z+1	; 0x01
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	e9 81       	ldd	r30, Y+1	; 0x01
     734:	fa 81       	ldd	r31, Y+2	; 0x02
     736:	81 83       	std	Z+1, r24	; 0x01
  if (datetime->MM > 12)
     738:	e9 81       	ldd	r30, Y+1	; 0x01
     73a:	fa 81       	ldd	r31, Y+2	; 0x02
     73c:	81 81       	ldd	r24, Z+1	; 0x01
     73e:	8d 30       	cpi	r24, 0x0D	; 13
     740:	40 f0       	brcs	.+16     	; 0x752 <add_month+0x36>
  {
    datetime->MM = 1;
     742:	e9 81       	ldd	r30, Y+1	; 0x01
     744:	fa 81       	ldd	r31, Y+2	; 0x02
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	81 83       	std	Z+1, r24	; 0x01
    add_year(datetime);
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <add_year>
  }
}
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	cf 91       	pop	r28
     758:	df 91       	pop	r29
     75a:	08 95       	ret

0000075c <sub_month>:

void
sub_month(DATETIME * datetime)
{
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	00 d0       	rcall	.+0      	; 0x762 <sub_month+0x6>
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	9a 83       	std	Y+2, r25	; 0x02
     768:	89 83       	std	Y+1, r24	; 0x01
  datetime->MM--;
     76a:	e9 81       	ldd	r30, Y+1	; 0x01
     76c:	fa 81       	ldd	r31, Y+2	; 0x02
     76e:	81 81       	ldd	r24, Z+1	; 0x01
     770:	81 50       	subi	r24, 0x01	; 1
     772:	e9 81       	ldd	r30, Y+1	; 0x01
     774:	fa 81       	ldd	r31, Y+2	; 0x02
     776:	81 83       	std	Z+1, r24	; 0x01
  if (datetime->MM < 1)
     778:	e9 81       	ldd	r30, Y+1	; 0x01
     77a:	fa 81       	ldd	r31, Y+2	; 0x02
     77c:	81 81       	ldd	r24, Z+1	; 0x01
     77e:	88 23       	and	r24, r24
     780:	41 f4       	brne	.+16     	; 0x792 <sub_month+0x36>
  {
    datetime->MM = 12;
     782:	e9 81       	ldd	r30, Y+1	; 0x01
     784:	fa 81       	ldd	r31, Y+2	; 0x02
     786:	8c e0       	ldi	r24, 0x0C	; 12
     788:	81 83       	std	Z+1, r24	; 0x01
    sub_year(datetime);
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	9a 81       	ldd	r25, Y+2	; 0x02
     78e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sub_year>
  }
}
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	cf 91       	pop	r28
     798:	df 91       	pop	r29
     79a:	08 95       	ret

0000079c <add_day>:

void
add_day(DATETIME * datetime)
{
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <add_day+0x6>
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <add_day+0x8>
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <add_day+0xa>
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	9b 83       	std	Y+3, r25	; 0x03
     7ac:	8a 83       	std	Y+2, r24	; 0x02
  datetime->DD++;
     7ae:	ea 81       	ldd	r30, Y+2	; 0x02
     7b0:	fb 81       	ldd	r31, Y+3	; 0x03
     7b2:	82 81       	ldd	r24, Z+2	; 0x02
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	ea 81       	ldd	r30, Y+2	; 0x02
     7b8:	fb 81       	ldd	r31, Y+3	; 0x03
     7ba:	82 83       	std	Z+2, r24	; 0x02
  uint8_t days = 31;
     7bc:	8f e1       	ldi	r24, 0x1F	; 31
     7be:	89 83       	std	Y+1, r24	; 0x01
  switch (datetime->MM)
     7c0:	ea 81       	ldd	r30, Y+2	; 0x02
     7c2:	fb 81       	ldd	r31, Y+3	; 0x03
     7c4:	81 81       	ldd	r24, Z+1	; 0x01
     7c6:	28 2f       	mov	r18, r24
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	3e 83       	std	Y+6, r19	; 0x06
     7cc:	2d 83       	std	Y+5, r18	; 0x05
     7ce:	8d 81       	ldd	r24, Y+5	; 0x05
     7d0:	9e 81       	ldd	r25, Y+6	; 0x06
     7d2:	86 30       	cpi	r24, 0x06	; 6
     7d4:	91 05       	cpc	r25, r1
     7d6:	d1 f0       	breq	.+52     	; 0x80c <add_day+0x70>
     7d8:	2d 81       	ldd	r18, Y+5	; 0x05
     7da:	3e 81       	ldd	r19, Y+6	; 0x06
     7dc:	27 30       	cpi	r18, 0x07	; 7
     7de:	31 05       	cpc	r19, r1
     7e0:	5c f4       	brge	.+22     	; 0x7f8 <add_day+0x5c>
     7e2:	8d 81       	ldd	r24, Y+5	; 0x05
     7e4:	9e 81       	ldd	r25, Y+6	; 0x06
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	91 05       	cpc	r25, r1
     7ea:	99 f0       	breq	.+38     	; 0x812 <add_day+0x76>
     7ec:	2d 81       	ldd	r18, Y+5	; 0x05
     7ee:	3e 81       	ldd	r19, Y+6	; 0x06
     7f0:	24 30       	cpi	r18, 0x04	; 4
     7f2:	31 05       	cpc	r19, r1
     7f4:	59 f0       	breq	.+22     	; 0x80c <add_day+0x70>
     7f6:	27 c0       	rjmp	.+78     	; 0x846 <add_day+0xaa>
     7f8:	8d 81       	ldd	r24, Y+5	; 0x05
     7fa:	9e 81       	ldd	r25, Y+6	; 0x06
     7fc:	89 30       	cpi	r24, 0x09	; 9
     7fe:	91 05       	cpc	r25, r1
     800:	29 f0       	breq	.+10     	; 0x80c <add_day+0x70>
     802:	2d 81       	ldd	r18, Y+5	; 0x05
     804:	3e 81       	ldd	r19, Y+6	; 0x06
     806:	2b 30       	cpi	r18, 0x0B	; 11
     808:	31 05       	cpc	r19, r1
     80a:	e9 f4       	brne	.+58     	; 0x846 <add_day+0xaa>
  {
  case 4:
  case 6:
  case 9:
  case 11:
    days = 30;
     80c:	8e e1       	ldi	r24, 0x1E	; 30
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	1a c0       	rjmp	.+52     	; 0x846 <add_day+0xaa>
    break;
  case 2:
    days = ((datetime->YY % 4 == 0) && (!(datetime->YY % 100 == 0))) ? 29 : 28;
     812:	ea 81       	ldd	r30, Y+2	; 0x02
     814:	fb 81       	ldd	r31, Y+3	; 0x03
     816:	80 81       	ld	r24, Z
     818:	88 2f       	mov	r24, r24
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	83 70       	andi	r24, 0x03	; 3
     81e:	90 70       	andi	r25, 0x00	; 0
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	69 f4       	brne	.+26     	; 0x83e <add_day+0xa2>
     824:	ea 81       	ldd	r30, Y+2	; 0x02
     826:	fb 81       	ldd	r31, Y+3	; 0x03
     828:	80 81       	ld	r24, Z
     82a:	94 e6       	ldi	r25, 0x64	; 100
     82c:	69 2f       	mov	r22, r25
     82e:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <__udivmodqi4>
     832:	89 2f       	mov	r24, r25
     834:	88 23       	and	r24, r24
     836:	19 f0       	breq	.+6      	; 0x83e <add_day+0xa2>
     838:	3d e1       	ldi	r19, 0x1D	; 29
     83a:	3c 83       	std	Y+4, r19	; 0x04
     83c:	02 c0       	rjmp	.+4      	; 0x842 <add_day+0xa6>
     83e:	8c e1       	ldi	r24, 0x1C	; 28
     840:	8c 83       	std	Y+4, r24	; 0x04
     842:	9c 81       	ldd	r25, Y+4	; 0x04
     844:	99 83       	std	Y+1, r25	; 0x01
    break;
  }
  if (datetime->DD > days)
     846:	ea 81       	ldd	r30, Y+2	; 0x02
     848:	fb 81       	ldd	r31, Y+3	; 0x03
     84a:	92 81       	ldd	r25, Z+2	; 0x02
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	89 17       	cp	r24, r25
     850:	40 f4       	brcc	.+16     	; 0x862 <__stack+0x3>
  {
    datetime->DD = 1;
     852:	ea 81       	ldd	r30, Y+2	; 0x02
     854:	fb 81       	ldd	r31, Y+3	; 0x03
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	82 83       	std	Z+2, r24	; 0x02
    add_month(datetime);
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	9b 81       	ldd	r25, Y+3	; 0x03
     85e:	0e 94 8e 03 	call	0x71c	; 0x71c <add_month>
  }
}
     862:	26 96       	adiw	r28, 0x06	; 6
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	08 95       	ret

00000874 <sub_day>:

void
sub_day(DATETIME * datetime)
{
     874:	df 93       	push	r29
     876:	cf 93       	push	r28
     878:	00 d0       	rcall	.+0      	; 0x87a <sub_day+0x6>
     87a:	00 d0       	rcall	.+0      	; 0x87c <sub_day+0x8>
     87c:	00 d0       	rcall	.+0      	; 0x87e <sub_day+0xa>
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	9b 83       	std	Y+3, r25	; 0x03
     884:	8a 83       	std	Y+2, r24	; 0x02
  datetime->DD--;
     886:	ea 81       	ldd	r30, Y+2	; 0x02
     888:	fb 81       	ldd	r31, Y+3	; 0x03
     88a:	82 81       	ldd	r24, Z+2	; 0x02
     88c:	81 50       	subi	r24, 0x01	; 1
     88e:	ea 81       	ldd	r30, Y+2	; 0x02
     890:	fb 81       	ldd	r31, Y+3	; 0x03
     892:	82 83       	std	Z+2, r24	; 0x02
  uint8_t days = 31;
     894:	8f e1       	ldi	r24, 0x1F	; 31
     896:	89 83       	std	Y+1, r24	; 0x01
  switch (datetime->MM - 1)
     898:	ea 81       	ldd	r30, Y+2	; 0x02
     89a:	fb 81       	ldd	r31, Y+3	; 0x03
     89c:	81 81       	ldd	r24, Z+1	; 0x01
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	9c 01       	movw	r18, r24
     8a4:	21 50       	subi	r18, 0x01	; 1
     8a6:	30 40       	sbci	r19, 0x00	; 0
     8a8:	3e 83       	std	Y+6, r19	; 0x06
     8aa:	2d 83       	std	Y+5, r18	; 0x05
     8ac:	8d 81       	ldd	r24, Y+5	; 0x05
     8ae:	9e 81       	ldd	r25, Y+6	; 0x06
     8b0:	86 30       	cpi	r24, 0x06	; 6
     8b2:	91 05       	cpc	r25, r1
     8b4:	d1 f0       	breq	.+52     	; 0x8ea <sub_day+0x76>
     8b6:	2d 81       	ldd	r18, Y+5	; 0x05
     8b8:	3e 81       	ldd	r19, Y+6	; 0x06
     8ba:	27 30       	cpi	r18, 0x07	; 7
     8bc:	31 05       	cpc	r19, r1
     8be:	5c f4       	brge	.+22     	; 0x8d6 <sub_day+0x62>
     8c0:	8d 81       	ldd	r24, Y+5	; 0x05
     8c2:	9e 81       	ldd	r25, Y+6	; 0x06
     8c4:	82 30       	cpi	r24, 0x02	; 2
     8c6:	91 05       	cpc	r25, r1
     8c8:	99 f0       	breq	.+38     	; 0x8f0 <sub_day+0x7c>
     8ca:	2d 81       	ldd	r18, Y+5	; 0x05
     8cc:	3e 81       	ldd	r19, Y+6	; 0x06
     8ce:	24 30       	cpi	r18, 0x04	; 4
     8d0:	31 05       	cpc	r19, r1
     8d2:	59 f0       	breq	.+22     	; 0x8ea <sub_day+0x76>
     8d4:	27 c0       	rjmp	.+78     	; 0x924 <sub_day+0xb0>
     8d6:	8d 81       	ldd	r24, Y+5	; 0x05
     8d8:	9e 81       	ldd	r25, Y+6	; 0x06
     8da:	89 30       	cpi	r24, 0x09	; 9
     8dc:	91 05       	cpc	r25, r1
     8de:	29 f0       	breq	.+10     	; 0x8ea <sub_day+0x76>
     8e0:	2d 81       	ldd	r18, Y+5	; 0x05
     8e2:	3e 81       	ldd	r19, Y+6	; 0x06
     8e4:	2b 30       	cpi	r18, 0x0B	; 11
     8e6:	31 05       	cpc	r19, r1
     8e8:	e9 f4       	brne	.+58     	; 0x924 <sub_day+0xb0>
  {
  case 4:
  case 6:
  case 9:
  case 11:
    days = 30;
     8ea:	8e e1       	ldi	r24, 0x1E	; 30
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	1a c0       	rjmp	.+52     	; 0x924 <sub_day+0xb0>
    break;
  case 2:
    days = ((datetime->YY % 4 == 0) && (!(datetime->YY % 100 == 0))) ? 29 : 28;
     8f0:	ea 81       	ldd	r30, Y+2	; 0x02
     8f2:	fb 81       	ldd	r31, Y+3	; 0x03
     8f4:	80 81       	ld	r24, Z
     8f6:	88 2f       	mov	r24, r24
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	83 70       	andi	r24, 0x03	; 3
     8fc:	90 70       	andi	r25, 0x00	; 0
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	69 f4       	brne	.+26     	; 0x91c <sub_day+0xa8>
     902:	ea 81       	ldd	r30, Y+2	; 0x02
     904:	fb 81       	ldd	r31, Y+3	; 0x03
     906:	80 81       	ld	r24, Z
     908:	94 e6       	ldi	r25, 0x64	; 100
     90a:	69 2f       	mov	r22, r25
     90c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <__udivmodqi4>
     910:	89 2f       	mov	r24, r25
     912:	88 23       	and	r24, r24
     914:	19 f0       	breq	.+6      	; 0x91c <sub_day+0xa8>
     916:	3d e1       	ldi	r19, 0x1D	; 29
     918:	3c 83       	std	Y+4, r19	; 0x04
     91a:	02 c0       	rjmp	.+4      	; 0x920 <sub_day+0xac>
     91c:	8c e1       	ldi	r24, 0x1C	; 28
     91e:	8c 83       	std	Y+4, r24	; 0x04
     920:	9c 81       	ldd	r25, Y+4	; 0x04
     922:	99 83       	std	Y+1, r25	; 0x01
    break;
  }
  if (datetime->DD < 1)
     924:	ea 81       	ldd	r30, Y+2	; 0x02
     926:	fb 81       	ldd	r31, Y+3	; 0x03
     928:	82 81       	ldd	r24, Z+2	; 0x02
     92a:	88 23       	and	r24, r24
     92c:	41 f4       	brne	.+16     	; 0x93e <sub_day+0xca>
  {
    datetime->DD = days;
     92e:	ea 81       	ldd	r30, Y+2	; 0x02
     930:	fb 81       	ldd	r31, Y+3	; 0x03
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	82 83       	std	Z+2, r24	; 0x02
    sub_month(datetime);
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	9b 81       	ldd	r25, Y+3	; 0x03
     93a:	0e 94 ae 03 	call	0x75c	; 0x75c <sub_month>
  }
}
     93e:	26 96       	adiw	r28, 0x06	; 6
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	cf 91       	pop	r28
     94c:	df 91       	pop	r29
     94e:	08 95       	ret

00000950 <add_hour>:

void
add_hour(DATETIME * datetime)
{
     950:	df 93       	push	r29
     952:	cf 93       	push	r28
     954:	00 d0       	rcall	.+0      	; 0x956 <add_hour+0x6>
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	9a 83       	std	Y+2, r25	; 0x02
     95c:	89 83       	std	Y+1, r24	; 0x01
  datetime->hh++;
     95e:	e9 81       	ldd	r30, Y+1	; 0x01
     960:	fa 81       	ldd	r31, Y+2	; 0x02
     962:	83 81       	ldd	r24, Z+3	; 0x03
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	e9 81       	ldd	r30, Y+1	; 0x01
     968:	fa 81       	ldd	r31, Y+2	; 0x02
     96a:	83 83       	std	Z+3, r24	; 0x03
  if (datetime->hh > 23)
     96c:	e9 81       	ldd	r30, Y+1	; 0x01
     96e:	fa 81       	ldd	r31, Y+2	; 0x02
     970:	83 81       	ldd	r24, Z+3	; 0x03
     972:	88 31       	cpi	r24, 0x18	; 24
     974:	38 f0       	brcs	.+14     	; 0x984 <add_hour+0x34>
  {
    datetime->hh = 0;
     976:	e9 81       	ldd	r30, Y+1	; 0x01
     978:	fa 81       	ldd	r31, Y+2	; 0x02
     97a:	13 82       	std	Z+3, r1	; 0x03
    add_day(datetime);
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	9a 81       	ldd	r25, Y+2	; 0x02
     980:	0e 94 ce 03 	call	0x79c	; 0x79c <add_day>
  }
}
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	cf 91       	pop	r28
     98a:	df 91       	pop	r29
     98c:	08 95       	ret

0000098e <sub_hour>:

void
sub_hour(DATETIME * datetime)
{
     98e:	df 93       	push	r29
     990:	cf 93       	push	r28
     992:	00 d0       	rcall	.+0      	; 0x994 <sub_hour+0x6>
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
  if (datetime->hh < 1)
     99c:	e9 81       	ldd	r30, Y+1	; 0x01
     99e:	fa 81       	ldd	r31, Y+2	; 0x02
     9a0:	83 81       	ldd	r24, Z+3	; 0x03
     9a2:	88 23       	and	r24, r24
     9a4:	49 f4       	brne	.+18     	; 0x9b8 <sub_hour+0x2a>
  {
    datetime->hh = 23;
     9a6:	e9 81       	ldd	r30, Y+1	; 0x01
     9a8:	fa 81       	ldd	r31, Y+2	; 0x02
     9aa:	87 e1       	ldi	r24, 0x17	; 23
     9ac:	83 83       	std	Z+3, r24	; 0x03
    sub_day(datetime);
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	9a 81       	ldd	r25, Y+2	; 0x02
     9b2:	0e 94 3a 04 	call	0x874	; 0x874 <sub_day>
     9b6:	07 c0       	rjmp	.+14     	; 0x9c6 <sub_hour+0x38>
  }
  else
  {
    datetime->hh--;
     9b8:	e9 81       	ldd	r30, Y+1	; 0x01
     9ba:	fa 81       	ldd	r31, Y+2	; 0x02
     9bc:	83 81       	ldd	r24, Z+3	; 0x03
     9be:	81 50       	subi	r24, 0x01	; 1
     9c0:	e9 81       	ldd	r30, Y+1	; 0x01
     9c2:	fa 81       	ldd	r31, Y+2	; 0x02
     9c4:	83 83       	std	Z+3, r24	; 0x03
  }
}
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	cf 91       	pop	r28
     9cc:	df 91       	pop	r29
     9ce:	08 95       	ret

000009d0 <add_minute>:

void
add_minute(DATETIME * datetime)
{
     9d0:	df 93       	push	r29
     9d2:	cf 93       	push	r28
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <add_minute+0x6>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	9a 83       	std	Y+2, r25	; 0x02
     9dc:	89 83       	std	Y+1, r24	; 0x01
  datetime->mm++;
     9de:	e9 81       	ldd	r30, Y+1	; 0x01
     9e0:	fa 81       	ldd	r31, Y+2	; 0x02
     9e2:	84 81       	ldd	r24, Z+4	; 0x04
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	e9 81       	ldd	r30, Y+1	; 0x01
     9e8:	fa 81       	ldd	r31, Y+2	; 0x02
     9ea:	84 83       	std	Z+4, r24	; 0x04
  if (datetime->mm > 59)
     9ec:	e9 81       	ldd	r30, Y+1	; 0x01
     9ee:	fa 81       	ldd	r31, Y+2	; 0x02
     9f0:	84 81       	ldd	r24, Z+4	; 0x04
     9f2:	8c 33       	cpi	r24, 0x3C	; 60
     9f4:	38 f0       	brcs	.+14     	; 0xa04 <add_minute+0x34>
  {
    datetime->mm = 0;
     9f6:	e9 81       	ldd	r30, Y+1	; 0x01
     9f8:	fa 81       	ldd	r31, Y+2	; 0x02
     9fa:	14 82       	std	Z+4, r1	; 0x04
    add_hour(datetime);
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	9a 81       	ldd	r25, Y+2	; 0x02
     a00:	0e 94 a8 04 	call	0x950	; 0x950 <add_hour>
  }
}
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	cf 91       	pop	r28
     a0a:	df 91       	pop	r29
     a0c:	08 95       	ret

00000a0e <sub_minute>:

void
sub_minute(DATETIME * datetime)
{
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	00 d0       	rcall	.+0      	; 0xa14 <sub_minute+0x6>
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
     a18:	9a 83       	std	Y+2, r25	; 0x02
     a1a:	89 83       	std	Y+1, r24	; 0x01
  if (datetime->mm < 1)
     a1c:	e9 81       	ldd	r30, Y+1	; 0x01
     a1e:	fa 81       	ldd	r31, Y+2	; 0x02
     a20:	84 81       	ldd	r24, Z+4	; 0x04
     a22:	88 23       	and	r24, r24
     a24:	49 f4       	brne	.+18     	; 0xa38 <sub_minute+0x2a>
  {
    datetime->mm = 59;
     a26:	e9 81       	ldd	r30, Y+1	; 0x01
     a28:	fa 81       	ldd	r31, Y+2	; 0x02
     a2a:	8b e3       	ldi	r24, 0x3B	; 59
     a2c:	84 83       	std	Z+4, r24	; 0x04
    sub_hour(datetime);
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	0e 94 c7 04 	call	0x98e	; 0x98e <sub_hour>
     a36:	07 c0       	rjmp	.+14     	; 0xa46 <sub_minute+0x38>
  }
  else
  {
    datetime->mm--;
     a38:	e9 81       	ldd	r30, Y+1	; 0x01
     a3a:	fa 81       	ldd	r31, Y+2	; 0x02
     a3c:	84 81       	ldd	r24, Z+4	; 0x04
     a3e:	81 50       	subi	r24, 0x01	; 1
     a40:	e9 81       	ldd	r30, Y+1	; 0x01
     a42:	fa 81       	ldd	r31, Y+2	; 0x02
     a44:	84 83       	std	Z+4, r24	; 0x04
  }
}
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <i2c_rtc_read>:
const int afall[] =
{ 1530, 1620, 1700, 1800, 1880, 1970, 1990, 1920, 1820, 1700, 1600, 1530, 1540 };

uint8_t
i2c_rtc_read(DATETIME * datetime, uint8_t bLocal)
{
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	df 93       	push	r29
     a56:	cf 93       	push	r28
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	a0 97       	sbiw	r28, 0x20	; 32
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	9f 8f       	std	Y+31, r25	; 0x1f
     a6a:	8e 8f       	std	Y+30, r24	; 0x1e
     a6c:	68 a3       	std	Y+32, r22	; 0x20
  uint8_t rtcbuf[7];
  uint8_t rtc = 0;
     a6e:	1e 8a       	std	Y+22, r1	; 0x16

  if (rtc_initialized)
     a70:	80 91 8c 03 	lds	r24, 0x038C
     a74:	88 23       	and	r24, r24
     a76:	09 f4       	brne	.+2      	; 0xa7a <i2c_rtc_read+0x2a>
     a78:	bc c2       	rjmp	.+1400   	; 0xff2 <i2c_rtc_read+0x5a2>
  {
    if (i2c_rtc_sram_read(0x00, rtcbuf, 7))
     a7a:	9e 01       	movw	r18, r28
     a7c:	29 5e       	subi	r18, 0xE9	; 233
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	b9 01       	movw	r22, r18
     a84:	47 e0       	ldi	r20, 0x07	; 7
     a86:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_rtc_sram_read>
     a8a:	88 23       	and	r24, r24
     a8c:	09 f4       	brne	.+2      	; 0xa90 <i2c_rtc_read+0x40>
     a8e:	75 c0       	rjmp	.+234    	; 0xb7a <i2c_rtc_read+0x12a>
    {
      datetime->YY = bcdtoi(rtcbuf[6]); // year
     a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a92:	0e 94 97 02 	call	0x52e	; 0x52e <bcdtoi>
     a96:	ee 8d       	ldd	r30, Y+30	; 0x1e
     a98:	ff 8d       	ldd	r31, Y+31	; 0x1f
     a9a:	80 83       	st	Z, r24
      datetime->MM = bcdtoi(rtcbuf[5]); // month
     a9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a9e:	0e 94 97 02 	call	0x52e	; 0x52e <bcdtoi>
     aa2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     aa4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     aa6:	81 83       	std	Z+1, r24	; 0x01
      datetime->DD = bcdtoi(rtcbuf[4]); // day of month
     aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aaa:	0e 94 97 02 	call	0x52e	; 0x52e <bcdtoi>
     aae:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ab0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ab2:	82 83       	std	Z+2, r24	; 0x02
      //       = bcdtoi(rtcbuf[3]) - 1; // weekday 0-6
      datetime->hh = bcdtoi(rtcbuf[2]); // hours
     ab4:	89 8d       	ldd	r24, Y+25	; 0x19
     ab6:	0e 94 97 02 	call	0x52e	; 0x52e <bcdtoi>
     aba:	ee 8d       	ldd	r30, Y+30	; 0x1e
     abc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     abe:	83 83       	std	Z+3, r24	; 0x03
      datetime->mm = bcdtoi(rtcbuf[1]); // minutes
     ac0:	88 8d       	ldd	r24, Y+24	; 0x18
     ac2:	0e 94 97 02 	call	0x52e	; 0x52e <bcdtoi>
     ac6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ac8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     aca:	84 83       	std	Z+4, r24	; 0x04
      datetime->ss = bcdtoi(rtcbuf[0]); // seconds
     acc:	8f 89       	ldd	r24, Y+23	; 0x17
     ace:	0e 94 97 02 	call	0x52e	; 0x52e <bcdtoi>
     ad2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ad4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ad6:	85 83       	std	Z+5, r24	; 0x05

      uint8_t tziffer = datetime->DD % 7;
     ad8:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ada:	ff 8d       	ldd	r31, Y+31	; 0x1f
     adc:	82 81       	ldd	r24, Z+2	; 0x02
     ade:	97 e0       	ldi	r25, 0x07	; 7
     ae0:	69 2f       	mov	r22, r25
     ae2:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <__udivmodqi4>
     ae6:	89 2f       	mov	r24, r25
     ae8:	8d 8b       	std	Y+21, r24	; 0x15
      uint8_t mziffer = amziffer[datetime->MM - 1];
     aea:	ee 8d       	ldd	r30, Y+30	; 0x1e
     aec:	ff 8d       	ldd	r31, Y+31	; 0x1f
     aee:	81 81       	ldd	r24, Z+1	; 0x01
     af0:	88 2f       	mov	r24, r24
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	fc 01       	movw	r30, r24
     af8:	e5 56       	subi	r30, 0x65	; 101
     afa:	ff 4f       	sbci	r31, 0xFF	; 255
     afc:	80 81       	ld	r24, Z
     afe:	8c 8b       	std	Y+20, r24	; 0x14
      uint8_t jziffer = (datetime->YY + (datetime->YY / 4)) % 7;
     b00:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b02:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b04:	80 81       	ld	r24, Z
     b06:	28 2f       	mov	r18, r24
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b0c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b0e:	80 81       	ld	r24, Z
     b10:	86 95       	lsr	r24
     b12:	86 95       	lsr	r24
     b14:	88 2f       	mov	r24, r24
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	82 0f       	add	r24, r18
     b1a:	93 1f       	adc	r25, r19
     b1c:	27 e0       	ldi	r18, 0x07	; 7
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	b9 01       	movw	r22, r18
     b22:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     b26:	8b 8b       	std	Y+19, r24	; 0x13
      if (datetime->YY % 4 == 0 && datetime->MM < 3)
     b28:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b2a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b2c:	80 81       	ld	r24, Z
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	83 70       	andi	r24, 0x03	; 3
     b34:	90 70       	andi	r25, 0x00	; 0
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	41 f4       	brne	.+16     	; 0xb4a <i2c_rtc_read+0xfa>
     b3a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b3c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b3e:	81 81       	ldd	r24, Z+1	; 0x01
     b40:	83 30       	cpi	r24, 0x03	; 3
     b42:	18 f4       	brcc	.+6      	; 0xb4a <i2c_rtc_read+0xfa>
      {
        jziffer += 6;
     b44:	8b 89       	ldd	r24, Y+19	; 0x13
     b46:	8a 5f       	subi	r24, 0xFA	; 250
     b48:	8b 8b       	std	Y+19, r24	; 0x13
      }
      datetime->wd = (tziffer + mziffer + jziffer + 6) % 7;
     b4a:	8d 89       	ldd	r24, Y+21	; 0x15
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	8c 89       	ldd	r24, Y+20	; 0x14
     b52:	88 2f       	mov	r24, r24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	28 0f       	add	r18, r24
     b58:	39 1f       	adc	r19, r25
     b5a:	8b 89       	ldd	r24, Y+19	; 0x13
     b5c:	88 2f       	mov	r24, r24
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
     b64:	06 96       	adiw	r24, 0x06	; 6
     b66:	27 e0       	ldi	r18, 0x07	; 7
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	b9 01       	movw	r22, r18
     b6c:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     b70:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b72:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b74:	86 83       	std	Z+6, r24	; 0x06

      rtc = 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	8e 8b       	std	Y+22, r24	; 0x16
    }

    if (bLocal != 0)
     b7a:	88 a1       	ldd	r24, Y+32	; 0x20
     b7c:	88 23       	and	r24, r24
     b7e:	09 f4       	brne	.+2      	; 0xb82 <i2c_rtc_read+0x132>
     b80:	38 c2       	rjmp	.+1136   	; 0xff2 <i2c_rtc_read+0x5a2>
    {
      int riseduration = 100;
     b82:	84 e6       	ldi	r24, 0x64	; 100
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	9a 8b       	std	Y+18, r25	; 0x12
     b88:	89 8b       	std	Y+17, r24	; 0x11

      int mrise = arise[(int) datetime->MM];
     b8a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b8c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b8e:	81 81       	ldd	r24, Z+1	; 0x01
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	fc 01       	movw	r30, r24
     b9a:	e9 55       	subi	r30, 0x59	; 89
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	98 8b       	std	Y+16, r25	; 0x10
     ba4:	8f 87       	std	Y+15, r24	; 0x0f
      int mfall = afall[(int) datetime->MM];
     ba6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ba8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     baa:	81 81       	ldd	r24, Z+1	; 0x01
     bac:	88 2f       	mov	r24, r24
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	fc 01       	movw	r30, r24
     bb6:	ef 53       	subi	r30, 0x3F	; 63
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	9e 87       	std	Y+14, r25	; 0x0e
     bc0:	8d 87       	std	Y+13, r24	; 0x0d

      int nmrise = arise[datetime->MM + 1];
     bc2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     bc4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     bc6:	81 81       	ldd	r24, Z+1	; 0x01
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	fc 01       	movw	r30, r24
     bd4:	e9 55       	subi	r30, 0x59	; 89
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	80 81       	ld	r24, Z
     bda:	91 81       	ldd	r25, Z+1	; 0x01
     bdc:	9c 87       	std	Y+12, r25	; 0x0c
     bde:	8b 87       	std	Y+11, r24	; 0x0b
      int nmfall = afall[datetime->MM + 1];
     be0:	ee 8d       	ldd	r30, Y+30	; 0x1e
     be2:	ff 8d       	ldd	r31, Y+31	; 0x1f
     be4:	81 81       	ldd	r24, Z+1	; 0x01
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	fc 01       	movw	r30, r24
     bf2:	ef 53       	subi	r30, 0x3F	; 63
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	80 81       	ld	r24, Z
     bf8:	91 81       	ldd	r25, Z+1	; 0x01
     bfa:	9a 87       	std	Y+10, r25	; 0x0a
     bfc:	89 87       	std	Y+9, r24	; 0x09

      int rise = mrise + (((nmrise - mrise) * datetime->DD) / 31);
     bfe:	2b 85       	ldd	r18, Y+11	; 0x0b
     c00:	3c 85       	ldd	r19, Y+12	; 0x0c
     c02:	8f 85       	ldd	r24, Y+15	; 0x0f
     c04:	98 89       	ldd	r25, Y+16	; 0x10
     c06:	28 1b       	sub	r18, r24
     c08:	39 0b       	sbc	r19, r25
     c0a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c0c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c0e:	82 81       	ldd	r24, Z+2	; 0x02
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	ac 01       	movw	r20, r24
     c16:	24 9f       	mul	r18, r20
     c18:	c0 01       	movw	r24, r0
     c1a:	25 9f       	mul	r18, r21
     c1c:	90 0d       	add	r25, r0
     c1e:	34 9f       	mul	r19, r20
     c20:	90 0d       	add	r25, r0
     c22:	11 24       	eor	r1, r1
     c24:	2f e1       	ldi	r18, 0x1F	; 31
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	b9 01       	movw	r22, r18
     c2a:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     c2e:	cb 01       	movw	r24, r22
     c30:	9c 01       	movw	r18, r24
     c32:	8f 85       	ldd	r24, Y+15	; 0x0f
     c34:	98 89       	ldd	r25, Y+16	; 0x10
     c36:	82 0f       	add	r24, r18
     c38:	93 1f       	adc	r25, r19
     c3a:	98 87       	std	Y+8, r25	; 0x08
     c3c:	8f 83       	std	Y+7, r24	; 0x07
      int fall = mfall + (((nmfall - mfall) * datetime->DD) / 31);
     c3e:	29 85       	ldd	r18, Y+9	; 0x09
     c40:	3a 85       	ldd	r19, Y+10	; 0x0a
     c42:	8d 85       	ldd	r24, Y+13	; 0x0d
     c44:	9e 85       	ldd	r25, Y+14	; 0x0e
     c46:	28 1b       	sub	r18, r24
     c48:	39 0b       	sbc	r19, r25
     c4a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c4c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	88 2f       	mov	r24, r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	ac 01       	movw	r20, r24
     c56:	24 9f       	mul	r18, r20
     c58:	c0 01       	movw	r24, r0
     c5a:	25 9f       	mul	r18, r21
     c5c:	90 0d       	add	r25, r0
     c5e:	34 9f       	mul	r19, r20
     c60:	90 0d       	add	r25, r0
     c62:	11 24       	eor	r1, r1
     c64:	2f e1       	ldi	r18, 0x1F	; 31
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	b9 01       	movw	r22, r18
     c6a:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     c6e:	cb 01       	movw	r24, r22
     c70:	9c 01       	movw	r18, r24
     c72:	8d 85       	ldd	r24, Y+13	; 0x0d
     c74:	9e 85       	ldd	r25, Y+14	; 0x0e
     c76:	82 0f       	add	r24, r18
     c78:	93 1f       	adc	r25, r19
     c7a:	9e 83       	std	Y+6, r25	; 0x06
     c7c:	8d 83       	std	Y+5, r24	; 0x05

      datetime->sunrisehh = rise / 100;
     c7e:	8f 81       	ldd	r24, Y+7	; 0x07
     c80:	98 85       	ldd	r25, Y+8	; 0x08
     c82:	24 e6       	ldi	r18, 0x64	; 100
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	b9 01       	movw	r22, r18
     c88:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     c8c:	cb 01       	movw	r24, r22
     c8e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c90:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c92:	81 87       	std	Z+9, r24	; 0x09
      datetime->sunfallhh = fall / 100;
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	24 e6       	ldi	r18, 0x64	; 100
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	b9 01       	movw	r22, r18
     c9e:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     ca2:	cb 01       	movw	r24, r22
     ca4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ca6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ca8:	83 87       	std	Z+11, r24	; 0x0b
      datetime->sunrisemm = (rise % 100) * 60 / 100;
     caa:	8f 81       	ldd	r24, Y+7	; 0x07
     cac:	98 85       	ldd	r25, Y+8	; 0x08
     cae:	24 e6       	ldi	r18, 0x64	; 100
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	b9 01       	movw	r22, r18
     cb4:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     cb8:	9c 01       	movw	r18, r24
     cba:	8c e3       	ldi	r24, 0x3C	; 60
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	ac 01       	movw	r20, r24
     cc0:	24 9f       	mul	r18, r20
     cc2:	c0 01       	movw	r24, r0
     cc4:	25 9f       	mul	r18, r21
     cc6:	90 0d       	add	r25, r0
     cc8:	34 9f       	mul	r19, r20
     cca:	90 0d       	add	r25, r0
     ccc:	11 24       	eor	r1, r1
     cce:	24 e6       	ldi	r18, 0x64	; 100
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	b9 01       	movw	r22, r18
     cd4:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     cd8:	cb 01       	movw	r24, r22
     cda:	ee 8d       	ldd	r30, Y+30	; 0x1e
     cdc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     cde:	82 87       	std	Z+10, r24	; 0x0a
      datetime->sunfallmm = (fall % 100) * 60 / 100;
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
     ce2:	9e 81       	ldd	r25, Y+6	; 0x06
     ce4:	24 e6       	ldi	r18, 0x64	; 100
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	b9 01       	movw	r22, r18
     cea:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     cee:	9c 01       	movw	r18, r24
     cf0:	8c e3       	ldi	r24, 0x3C	; 60
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	ac 01       	movw	r20, r24
     cf6:	24 9f       	mul	r18, r20
     cf8:	c0 01       	movw	r24, r0
     cfa:	25 9f       	mul	r18, r21
     cfc:	90 0d       	add	r25, r0
     cfe:	34 9f       	mul	r19, r20
     d00:	90 0d       	add	r25, r0
     d02:	11 24       	eor	r1, r1
     d04:	24 e6       	ldi	r18, 0x64	; 100
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	b9 01       	movw	r22, r18
     d0a:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     d0e:	cb 01       	movw	r24, r22
     d10:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d12:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d14:	84 87       	std	Z+12, r24	; 0x0c

      int now = (datetime->hh * 100) + ((datetime->mm * 100) / 60);
     d16:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d18:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d1a:	83 81       	ldd	r24, Z+3	; 0x03
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	84 e6       	ldi	r24, 0x64	; 100
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	28 9f       	mul	r18, r24
     d26:	80 01       	movw	r16, r0
     d28:	29 9f       	mul	r18, r25
     d2a:	10 0d       	add	r17, r0
     d2c:	38 9f       	mul	r19, r24
     d2e:	10 0d       	add	r17, r0
     d30:	11 24       	eor	r1, r1
     d32:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d34:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d36:	84 81       	ldd	r24, Z+4	; 0x04
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	84 e6       	ldi	r24, 0x64	; 100
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	ac 01       	movw	r20, r24
     d42:	24 9f       	mul	r18, r20
     d44:	c0 01       	movw	r24, r0
     d46:	25 9f       	mul	r18, r21
     d48:	90 0d       	add	r25, r0
     d4a:	34 9f       	mul	r19, r20
     d4c:	90 0d       	add	r25, r0
     d4e:	11 24       	eor	r1, r1
     d50:	2c e3       	ldi	r18, 0x3C	; 60
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     d5a:	cb 01       	movw	r24, r22
     d5c:	80 0f       	add	r24, r16
     d5e:	91 1f       	adc	r25, r17
     d60:	9c 83       	std	Y+4, r25	; 0x04
     d62:	8b 83       	std	Y+3, r24	; 0x03

      if (now < rise)
     d64:	2b 81       	ldd	r18, Y+3	; 0x03
     d66:	3c 81       	ldd	r19, Y+4	; 0x04
     d68:	8f 81       	ldd	r24, Y+7	; 0x07
     d6a:	98 85       	ldd	r25, Y+8	; 0x08
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	24 f4       	brge	.+8      	; 0xd7a <i2c_rtc_read+0x32a>
      {
        datetime->sunrise = 0;
     d72:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d74:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d76:	10 86       	std	Z+8, r1	; 0x08
     d78:	72 c0       	rjmp	.+228    	; 0xe5e <i2c_rtc_read+0x40e>
      }
      else if (now >= rise && now < rise + riseduration)
     d7a:	2b 81       	ldd	r18, Y+3	; 0x03
     d7c:	3c 81       	ldd	r19, Y+4	; 0x04
     d7e:	8f 81       	ldd	r24, Y+7	; 0x07
     d80:	98 85       	ldd	r25, Y+8	; 0x08
     d82:	28 17       	cp	r18, r24
     d84:	39 07       	cpc	r19, r25
     d86:	2c f1       	brlt	.+74     	; 0xdd2 <i2c_rtc_read+0x382>
     d88:	2f 81       	ldd	r18, Y+7	; 0x07
     d8a:	38 85       	ldd	r19, Y+8	; 0x08
     d8c:	89 89       	ldd	r24, Y+17	; 0x11
     d8e:	9a 89       	ldd	r25, Y+18	; 0x12
     d90:	28 0f       	add	r18, r24
     d92:	39 1f       	adc	r19, r25
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	82 17       	cp	r24, r18
     d9a:	93 07       	cpc	r25, r19
     d9c:	d4 f4       	brge	.+52     	; 0xdd2 <i2c_rtc_read+0x382>
      {
        datetime->sunrise = ((now - rise) * 100 / riseduration);
     d9e:	2b 81       	ldd	r18, Y+3	; 0x03
     da0:	3c 81       	ldd	r19, Y+4	; 0x04
     da2:	8f 81       	ldd	r24, Y+7	; 0x07
     da4:	98 85       	ldd	r25, Y+8	; 0x08
     da6:	28 1b       	sub	r18, r24
     da8:	39 0b       	sbc	r19, r25
     daa:	84 e6       	ldi	r24, 0x64	; 100
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	ac 01       	movw	r20, r24
     db0:	24 9f       	mul	r18, r20
     db2:	c0 01       	movw	r24, r0
     db4:	25 9f       	mul	r18, r21
     db6:	90 0d       	add	r25, r0
     db8:	34 9f       	mul	r19, r20
     dba:	90 0d       	add	r25, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	29 89       	ldd	r18, Y+17	; 0x11
     dc0:	3a 89       	ldd	r19, Y+18	; 0x12
     dc2:	b9 01       	movw	r22, r18
     dc4:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     dc8:	cb 01       	movw	r24, r22
     dca:	ee 8d       	ldd	r30, Y+30	; 0x1e
     dcc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dce:	80 87       	std	Z+8, r24	; 0x08
     dd0:	46 c0       	rjmp	.+140    	; 0xe5e <i2c_rtc_read+0x40e>
      }
      else if (now >= rise + riseduration && now < fall)
     dd2:	2f 81       	ldd	r18, Y+7	; 0x07
     dd4:	38 85       	ldd	r19, Y+8	; 0x08
     dd6:	89 89       	ldd	r24, Y+17	; 0x11
     dd8:	9a 89       	ldd	r25, Y+18	; 0x12
     dda:	28 0f       	add	r18, r24
     ddc:	39 1f       	adc	r19, r25
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	82 17       	cp	r24, r18
     de4:	93 07       	cpc	r25, r19
     de6:	64 f0       	brlt	.+24     	; 0xe00 <i2c_rtc_read+0x3b0>
     de8:	2b 81       	ldd	r18, Y+3	; 0x03
     dea:	3c 81       	ldd	r19, Y+4	; 0x04
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	28 17       	cp	r18, r24
     df2:	39 07       	cpc	r19, r25
     df4:	2c f4       	brge	.+10     	; 0xe00 <i2c_rtc_read+0x3b0>
      {
        datetime->sunrise = 100;
     df6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     df8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dfa:	84 e6       	ldi	r24, 0x64	; 100
     dfc:	80 87       	std	Z+8, r24	; 0x08
     dfe:	2f c0       	rjmp	.+94     	; 0xe5e <i2c_rtc_read+0x40e>
      }
      else if (now >= fall && now < fall + riseduration)
     e00:	2b 81       	ldd	r18, Y+3	; 0x03
     e02:	3c 81       	ldd	r19, Y+4	; 0x04
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	28 17       	cp	r18, r24
     e0a:	39 07       	cpc	r19, r25
     e0c:	2c f1       	brlt	.+74     	; 0xe58 <i2c_rtc_read+0x408>
     e0e:	2d 81       	ldd	r18, Y+5	; 0x05
     e10:	3e 81       	ldd	r19, Y+6	; 0x06
     e12:	89 89       	ldd	r24, Y+17	; 0x11
     e14:	9a 89       	ldd	r25, Y+18	; 0x12
     e16:	28 0f       	add	r18, r24
     e18:	39 1f       	adc	r19, r25
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	82 17       	cp	r24, r18
     e20:	93 07       	cpc	r25, r19
     e22:	d4 f4       	brge	.+52     	; 0xe58 <i2c_rtc_read+0x408>
      {
        datetime->sunrise = ((now - fall) * 100 / riseduration);
     e24:	2b 81       	ldd	r18, Y+3	; 0x03
     e26:	3c 81       	ldd	r19, Y+4	; 0x04
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	28 1b       	sub	r18, r24
     e2e:	39 0b       	sbc	r19, r25
     e30:	84 e6       	ldi	r24, 0x64	; 100
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	ac 01       	movw	r20, r24
     e36:	24 9f       	mul	r18, r20
     e38:	c0 01       	movw	r24, r0
     e3a:	25 9f       	mul	r18, r21
     e3c:	90 0d       	add	r25, r0
     e3e:	34 9f       	mul	r19, r20
     e40:	90 0d       	add	r25, r0
     e42:	11 24       	eor	r1, r1
     e44:	29 89       	ldd	r18, Y+17	; 0x11
     e46:	3a 89       	ldd	r19, Y+18	; 0x12
     e48:	b9 01       	movw	r22, r18
     e4a:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
     e4e:	cb 01       	movw	r24, r22
     e50:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e52:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e54:	80 87       	std	Z+8, r24	; 0x08
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <i2c_rtc_read+0x40e>
      }
      else
      {
        datetime->sunrise = 0;
     e58:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e5a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e5c:	10 86       	std	Z+8, r1	; 0x08
      }

      for (int x = 0; x != rtc_offset;)
     e5e:	1a 82       	std	Y+2, r1	; 0x02
     e60:	19 82       	std	Y+1, r1	; 0x01
     e62:	33 c0       	rjmp	.+102    	; 0xeca <i2c_rtc_read+0x47a>
      {
        if (rtc_offset > 0)
     e64:	80 91 8b 03 	lds	r24, 0x038B
     e68:	18 16       	cp	r1, r24
     e6a:	c4 f4       	brge	.+48     	; 0xe9c <i2c_rtc_read+0x44c>
        {
          add_hour(datetime);
     e6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e70:	0e 94 a8 04 	call	0x950	; 0x950 <add_hour>
          datetime->sunrisehh++;
     e74:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e76:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e78:	81 85       	ldd	r24, Z+9	; 0x09
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e7e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e80:	81 87       	std	Z+9, r24	; 0x09
          datetime->sunfallhh++;
     e82:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e84:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e86:	83 85       	ldd	r24, Z+11	; 0x0b
     e88:	8f 5f       	subi	r24, 0xFF	; 255
     e8a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e8c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e8e:	83 87       	std	Z+11, r24	; 0x0b
          x++;
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	17 c0       	rjmp	.+46     	; 0xeca <i2c_rtc_read+0x47a>
        }
        else
        {
          sub_hour(datetime);
     e9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ea0:	0e 94 c7 04 	call	0x98e	; 0x98e <sub_hour>
          datetime->sunrisehh--;
     ea4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ea6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ea8:	81 85       	ldd	r24, Z+9	; 0x09
     eaa:	81 50       	subi	r24, 0x01	; 1
     eac:	ee 8d       	ldd	r30, Y+30	; 0x1e
     eae:	ff 8d       	ldd	r31, Y+31	; 0x1f
     eb0:	81 87       	std	Z+9, r24	; 0x09
          datetime->sunfallhh--;
     eb2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     eb4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     eb6:	83 85       	ldd	r24, Z+11	; 0x0b
     eb8:	81 50       	subi	r24, 0x01	; 1
     eba:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ebc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ebe:	83 87       	std	Z+11, r24	; 0x0b
          x--;
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
      else
      {
        datetime->sunrise = 0;
      }

      for (int x = 0; x != rtc_offset;)
     eca:	80 91 8b 03 	lds	r24, 0x038B
     ece:	28 2f       	mov	r18, r24
     ed0:	33 27       	eor	r19, r19
     ed2:	27 fd       	sbrc	r18, 7
     ed4:	30 95       	com	r19
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	11 f6       	brne	.-124    	; 0xe64 <i2c_rtc_read+0x414>
          datetime->sunrisehh--;
          datetime->sunfallhh--;
          x--;
        }
      }
      if (datetime->MM < 3 || datetime->MM > 10)
     ee0:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ee2:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	28 f0       	brcs	.+10     	; 0xef4 <i2c_rtc_read+0x4a4>
     eea:	ee 8d       	ldd	r30, Y+30	; 0x1e
     eec:	ff 8d       	ldd	r31, Y+31	; 0x1f
     eee:	81 81       	ldd	r24, Z+1	; 0x01
     ef0:	8b 30       	cpi	r24, 0x0B	; 11
     ef2:	20 f0       	brcs	.+8      	; 0xefc <i2c_rtc_read+0x4ac>
      {
        datetime->dst = 0;
     ef4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ef6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ef8:	17 82       	std	Z+7, r1	; 0x07
     efa:	7b c0       	rjmp	.+246    	; 0xff2 <i2c_rtc_read+0x5a2>
      }
      else if (datetime->MM > 3 && datetime->MM < 10)
     efc:	ee 8d       	ldd	r30, Y+30	; 0x1e
     efe:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f00:	81 81       	ldd	r24, Z+1	; 0x01
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	e0 f0       	brcs	.+56     	; 0xf3e <i2c_rtc_read+0x4ee>
     f06:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f08:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	8a 30       	cpi	r24, 0x0A	; 10
     f0e:	b8 f4       	brcc	.+46     	; 0xf3e <i2c_rtc_read+0x4ee>
      {
        datetime->sunrisehh++;
     f10:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f12:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f14:	81 85       	ldd	r24, Z+9	; 0x09
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f1a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f1c:	81 87       	std	Z+9, r24	; 0x09
        datetime->sunfallhh++;
     f1e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f20:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f22:	83 85       	ldd	r24, Z+11	; 0x0b
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f28:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f2a:	83 87       	std	Z+11, r24	; 0x0b
        add_hour(datetime);
     f2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f30:	0e 94 a8 04 	call	0x950	; 0x950 <add_hour>
        datetime->dst = 1;
     f34:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f36:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	87 83       	std	Z+7, r24	; 0x07
     f3c:	5a c0       	rjmp	.+180    	; 0xff2 <i2c_rtc_read+0x5a2>
      }
      else
      {
        if (datetime->DD - datetime->wd >= 25 && (datetime->wd || datetime->hh > 2))
     f3e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f40:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f4a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f4c:	86 81       	ldd	r24, Z+6	; 0x06
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	a9 01       	movw	r20, r18
     f54:	48 1b       	sub	r20, r24
     f56:	59 0b       	sbc	r21, r25
     f58:	ca 01       	movw	r24, r20
     f5a:	89 31       	cpi	r24, 0x19	; 25
     f5c:	91 05       	cpc	r25, r1
     f5e:	54 f1       	brlt	.+84     	; 0xfb4 <i2c_rtc_read+0x564>
     f60:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f62:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f64:	86 81       	ldd	r24, Z+6	; 0x06
     f66:	88 23       	and	r24, r24
     f68:	29 f4       	brne	.+10     	; 0xf74 <i2c_rtc_read+0x524>
     f6a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f6c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f6e:	83 81       	ldd	r24, Z+3	; 0x03
     f70:	83 30       	cpi	r24, 0x03	; 3
     f72:	00 f1       	brcs	.+64     	; 0xfb4 <i2c_rtc_read+0x564>
        {
          if (datetime->MM == 10)
     f74:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f76:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f78:	81 81       	ldd	r24, Z+1	; 0x01
     f7a:	8a 30       	cpi	r24, 0x0A	; 10
     f7c:	21 f4       	brne	.+8      	; 0xf86 <i2c_rtc_read+0x536>
          {
            datetime->dst = 0;
     f7e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f80:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f82:	17 82       	std	Z+7, r1	; 0x07
     f84:	36 c0       	rjmp	.+108    	; 0xff2 <i2c_rtc_read+0x5a2>
          }
          else
          {
            datetime->sunrisehh++;
     f86:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f88:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f8a:	81 85       	ldd	r24, Z+9	; 0x09
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f90:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f92:	81 87       	std	Z+9, r24	; 0x09
            datetime->sunfallhh++;
     f94:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f96:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f98:	83 85       	ldd	r24, Z+11	; 0x0b
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f9e:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fa0:	83 87       	std	Z+11, r24	; 0x0b
            add_hour(datetime);
     fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fa6:	0e 94 a8 04 	call	0x950	; 0x950 <add_hour>
            datetime->dst = 1;
     faa:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fac:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	87 83       	std	Z+7, r24	; 0x07
     fb2:	1f c0       	rjmp	.+62     	; 0xff2 <i2c_rtc_read+0x5a2>
          }
        }
        else
        {
          if (datetime->MM == 3)
     fb4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fb6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fb8:	81 81       	ldd	r24, Z+1	; 0x01
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <i2c_rtc_read+0x576>
          {
            datetime->dst = 0;
     fbe:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fc0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fc2:	17 82       	std	Z+7, r1	; 0x07
     fc4:	16 c0       	rjmp	.+44     	; 0xff2 <i2c_rtc_read+0x5a2>
          }
          else
          {
            datetime->sunrisehh++;
     fc6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fc8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fca:	81 85       	ldd	r24, Z+9	; 0x09
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fd0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fd2:	81 87       	std	Z+9, r24	; 0x09
            datetime->sunfallhh++;
     fd4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fd6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fd8:	83 85       	ldd	r24, Z+11	; 0x0b
     fda:	8f 5f       	subi	r24, 0xFF	; 255
     fdc:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fde:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fe0:	83 87       	std	Z+11, r24	; 0x0b
            add_hour(datetime);
     fe2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fe4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fe6:	0e 94 a8 04 	call	0x950	; 0x950 <add_hour>
            datetime->dst = 1;
     fea:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fec:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	87 83       	std	Z+7, r24	; 0x07
          }
        }
      }
    }
  }
  return rtc;
     ff2:	8e 89       	ldd	r24, Y+22	; 0x16
}
     ff4:	a0 96       	adiw	r28, 0x20	; 32
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <i2c_rtc_sram_write>:
 *  @return    TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_sram_write(uint8_t addr, void * void_valuep, uint8_t length)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	28 97       	sbiw	r28, 0x08	; 8
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	8c 83       	std	Y+4, r24	; 0x04
    1020:	7e 83       	std	Y+6, r23	; 0x06
    1022:	6d 83       	std	Y+5, r22	; 0x05
    1024:	4f 83       	std	Y+7, r20	; 0x07
  unsigned char * valuep = void_valuep;
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	9b 83       	std	Y+3, r25	; 0x03
    102c:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t rtc = 0;
    102e:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
    1030:	80 91 8c 03 	lds	r24, 0x038C
    1034:	88 23       	and	r24, r24
    1036:	09 f4       	brne	.+2      	; 0x103a <i2c_rtc_sram_write+0x30>
    1038:	3d c0       	rjmp	.+122    	; 0x10b4 <i2c_rtc_sram_write+0xaa>
  {
    if (length && addr + length <= 64)
    103a:	8f 81       	ldd	r24, Y+7	; 0x07
    103c:	88 23       	and	r24, r24
    103e:	d1 f1       	breq	.+116    	; 0x10b4 <i2c_rtc_sram_write+0xaa>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	8f 81       	ldd	r24, Y+7	; 0x07
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	82 0f       	add	r24, r18
    104e:	93 1f       	adc	r25, r19
    1050:	81 34       	cpi	r24, 0x41	; 65
    1052:	91 05       	cpc	r25, r1
    1054:	7c f5       	brge	.+94     	; 0x10b4 <i2c_rtc_sram_write+0xaa>
    {
      i2c_master_start_wait(DEVRTC + I2C_WRITE); // set device address and write mode
    1056:	80 ed       	ldi	r24, 0xD0	; 208
    1058:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_master_start_wait>

      if (i2c_master_write(addr, &i2c_rtc_status) == 0) // write address
    105c:	2f e8       	ldi	r18, 0x8F	; 143
    105e:	33 e0       	ldi	r19, 0x03	; 3
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	b9 01       	movw	r22, r18
    1064:	0e 94 bd 01 	call	0x37a	; 0x37a <i2c_master_write>
    1068:	88 23       	and	r24, r24
    106a:	11 f5       	brne	.+68     	; 0x10b0 <i2c_rtc_sram_write+0xa6>
      {
        rtc = true; // indicate success
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <i2c_rtc_sram_write+0x8c>

        while (length--)
        {
          if (i2c_master_write(*valuep++, &i2c_rtc_status) != 0) // write value
    1072:	ea 81       	ldd	r30, Y+2	; 0x02
    1074:	fb 81       	ldd	r31, Y+3	; 0x03
    1076:	40 81       	ld	r20, Z
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	9b 81       	ldd	r25, Y+3	; 0x03
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	9b 83       	std	Y+3, r25	; 0x03
    1080:	8a 83       	std	Y+2, r24	; 0x02
    1082:	2f e8       	ldi	r18, 0x8F	; 143
    1084:	33 e0       	ldi	r19, 0x03	; 3
    1086:	84 2f       	mov	r24, r20
    1088:	b9 01       	movw	r22, r18
    108a:	0e 94 bd 01 	call	0x37a	; 0x37a <i2c_master_write>
    108e:	88 23       	and	r24, r24
    1090:	11 f0       	breq	.+4      	; 0x1096 <i2c_rtc_sram_write+0x8c>
          {
            rtc = false; // indicate errror
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	0d c0       	rjmp	.+26     	; 0x10b0 <i2c_rtc_sram_write+0xa6>

      if (i2c_master_write(addr, &i2c_rtc_status) == 0) // write address
      {
        rtc = true; // indicate success

        while (length--)
    1096:	8f 81       	ldd	r24, Y+7	; 0x07
    1098:	88 87       	std	Y+8, r24	; 0x08
    109a:	88 85       	ldd	r24, Y+8	; 0x08
    109c:	88 23       	and	r24, r24
    109e:	11 f0       	breq	.+4      	; 0x10a4 <i2c_rtc_sram_write+0x9a>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	88 87       	std	Y+8, r24	; 0x08
    10a4:	88 85       	ldd	r24, Y+8	; 0x08
    10a6:	9f 81       	ldd	r25, Y+7	; 0x07
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	9f 83       	std	Y+7, r25	; 0x07
    10ac:	88 23       	and	r24, r24
    10ae:	09 f7       	brne	.-62     	; 0x1072 <i2c_rtc_sram_write+0x68>
            break;
          }
        }
      }

      i2c_master_stop(); // set stop conditon = release bus
    10b0:	0e 94 a9 01 	call	0x352	; 0x352 <i2c_master_stop>
    }
  }
  return rtc;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b6:	28 96       	adiw	r28, 0x08	; 8
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <i2c_rtc_sram_read>:
 *  @return   TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_sram_read(uint8_t addr, void * void_valuep, uint8_t length)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	27 97       	sbiw	r28, 0x07	; 7
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	8c 83       	std	Y+4, r24	; 0x04
    10de:	7e 83       	std	Y+6, r23	; 0x06
    10e0:	6d 83       	std	Y+5, r22	; 0x05
    10e2:	4f 83       	std	Y+7, r20	; 0x07
  unsigned char * valuep = void_valuep;
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	9b 83       	std	Y+3, r25	; 0x03
    10ea:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t rtc = false;
    10ec:	19 82       	std	Y+1, r1	; 0x01

  if (rtc_initialized)
    10ee:	80 91 8c 03 	lds	r24, 0x038C
    10f2:	88 23       	and	r24, r24
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <i2c_rtc_sram_read+0x30>
    10f6:	40 c0       	rjmp	.+128    	; 0x1178 <i2c_rtc_sram_read+0xb0>
  {
    if (length && addr + length <= 64)
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	88 23       	and	r24, r24
    10fc:	e9 f1       	breq	.+122    	; 0x1178 <i2c_rtc_sram_read+0xb0>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	82 0f       	add	r24, r18
    110c:	93 1f       	adc	r25, r19
    110e:	81 34       	cpi	r24, 0x41	; 65
    1110:	91 05       	cpc	r25, r1
    1112:	94 f5       	brge	.+100    	; 0x1178 <i2c_rtc_sram_read+0xb0>
    {
      i2c_master_start_wait(DEVRTC + I2C_WRITE); // set device address and write mode
    1114:	80 ed       	ldi	r24, 0xD0	; 208
    1116:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_master_start_wait>

      if (i2c_master_write(addr, &i2c_rtc_status) == 0) // write address
    111a:	2f e8       	ldi	r18, 0x8F	; 143
    111c:	33 e0       	ldi	r19, 0x03	; 3
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	b9 01       	movw	r22, r18
    1122:	0e 94 bd 01 	call	0x37a	; 0x37a <i2c_master_write>
    1126:	88 23       	and	r24, r24
    1128:	29 f5       	brne	.+74     	; 0x1174 <i2c_rtc_sram_read+0xac>
      {
        if (i2c_master_rep_start(DEVRTC + I2C_READ, &i2c_rtc_status) == 0) // set device address and read mode
    112a:	2f e8       	ldi	r18, 0x8F	; 143
    112c:	33 e0       	ldi	r19, 0x03	; 3
    112e:	81 ed       	ldi	r24, 0xD1	; 209
    1130:	b9 01       	movw	r22, r18
    1132:	0e 94 94 01 	call	0x328	; 0x328 <i2c_master_rep_start>
    1136:	88 23       	and	r24, r24
    1138:	e9 f4       	brne	.+58     	; 0x1174 <i2c_rtc_sram_read+0xac>
        {
          rtc = true; // indicate success
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	0a c0       	rjmp	.+20     	; 0x1154 <i2c_rtc_sram_read+0x8c>

          while (--length)
          {
            *valuep++ = i2c_master_read_ack(); // read n'th byte
    1140:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_master_read_ack>
    1144:	ea 81       	ldd	r30, Y+2	; 0x02
    1146:	fb 81       	ldd	r31, Y+3	; 0x03
    1148:	80 83       	st	Z, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	9b 83       	std	Y+3, r25	; 0x03
    1152:	8a 83       	std	Y+2, r24	; 0x02
      {
        if (i2c_master_rep_start(DEVRTC + I2C_READ, &i2c_rtc_status) == 0) // set device address and read mode
        {
          rtc = true; // indicate success

          while (--length)
    1154:	8f 81       	ldd	r24, Y+7	; 0x07
    1156:	81 50       	subi	r24, 0x01	; 1
    1158:	8f 83       	std	Y+7, r24	; 0x07
    115a:	8f 81       	ldd	r24, Y+7	; 0x07
    115c:	88 23       	and	r24, r24
    115e:	81 f7       	brne	.-32     	; 0x1140 <i2c_rtc_sram_read+0x78>
          {
            *valuep++ = i2c_master_read_ack(); // read n'th byte
          }
          *valuep++ = i2c_master_read_nak(); // read last byte
    1160:	0e 94 00 02 	call	0x400	; 0x400 <i2c_master_read_nak>
    1164:	ea 81       	ldd	r30, Y+2	; 0x02
    1166:	fb 81       	ldd	r31, Y+3	; 0x03
    1168:	80 83       	st	Z, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	9b 81       	ldd	r25, Y+3	; 0x03
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	9b 83       	std	Y+3, r25	; 0x03
    1172:	8a 83       	std	Y+2, r24	; 0x02
        }
      }

      i2c_master_stop(); // set stop conditon = release bus
    1174:	0e 94 a9 01 	call	0x352	; 0x352 <i2c_master_stop>
    }
  }
  return rtc;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
}
    117a:	27 96       	adiw	r28, 0x07	; 7
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <i2c_write_ctrlreg>:
 *  @return     TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static uint8_t
i2c_write_ctrlreg(void)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <i2c_write_ctrlreg+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
  uint8_t value[1];
  uint8_t rtc = 0;
    1196:	19 82       	std	Y+1, r1	; 0x01

  value[0] = ctrlreg;
    1198:	80 91 90 03 	lds	r24, 0x0390
    119c:	8a 83       	std	Y+2, r24	; 0x02

  if (i2c_rtc_sram_write(0x07, value, 1))
    119e:	9e 01       	movw	r18, r28
    11a0:	2e 5f       	subi	r18, 0xFE	; 254
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	87 e0       	ldi	r24, 0x07	; 7
    11a6:	b9 01       	movw	r22, r18
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	0e 94 05 08 	call	0x100a	; 0x100a <i2c_rtc_sram_write>
    11ae:	88 23       	and	r24, r24
    11b0:	11 f0       	breq	.+4      	; 0x11b6 <i2c_write_ctrlreg+0x2a>
  {
    rtc = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
  }
  return rtc;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <i2c_rtc_init>:
 *  @return   TRUE = successful, FALSE = failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
i2c_rtc_init(uint8_t * errorcode_p, uint8_t * status_p)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <i2c_rtc_init+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <i2c_rtc_init+0x8>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <i2c_rtc_init+0xa>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	9c 83       	std	Y+4, r25	; 0x04
    11d2:	8b 83       	std	Y+3, r24	; 0x03
    11d4:	7e 83       	std	Y+6, r23	; 0x06
    11d6:	6d 83       	std	Y+5, r22	; 0x05
  uint8_t rtc = false;
    11d8:	19 82       	std	Y+1, r1	; 0x01
  uint8_t seconds;

  *status_p = 0xFF;
    11da:	ed 81       	ldd	r30, Y+5	; 0x05
    11dc:	fe 81       	ldd	r31, Y+6	; 0x06
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	80 83       	st	Z, r24
  *errorcode_p = i2c_master_init(); // init I2C interface
    11e2:	0e 94 90 00 	call	0x120	; 0x120 <i2c_master_init>
    11e6:	eb 81       	ldd	r30, Y+3	; 0x03
    11e8:	fc 81       	ldd	r31, Y+4	; 0x04
    11ea:	80 83       	st	Z, r24


  if (*errorcode_p == 0)
    11ec:	eb 81       	ldd	r30, Y+3	; 0x03
    11ee:	fc 81       	ldd	r31, Y+4	; 0x04
    11f0:	80 81       	ld	r24, Z
    11f2:	88 23       	and	r24, r24
    11f4:	a1 f5       	brne	.+104    	; 0x125e <i2c_rtc_init+0x9c>
  {
    rtc_initialized = true;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	80 93 8c 03 	sts	0x038C, r24
    ctrlreg = CTRL_REG_OUT; // set SQWE pin to output and set it to high (deactivated, active low!)
    11fc:	80 e8       	ldi	r24, 0x80	; 128
    11fe:	80 93 90 03 	sts	0x0390, r24

    if (i2c_write_ctrlreg())
    1202:	0e 94 c6 08 	call	0x118c	; 0x118c <i2c_write_ctrlreg>
    1206:	88 23       	and	r24, r24
    1208:	09 f1       	breq	.+66     	; 0x124c <i2c_rtc_init+0x8a>
    {
      rtc = true;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	89 83       	std	Y+1, r24	; 0x01

      if (i2c_rtc_sram_read(0x00, &seconds, 1))
    120e:	9e 01       	movw	r18, r28
    1210:	2e 5f       	subi	r18, 0xFE	; 254
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	b9 01       	movw	r22, r18
    1218:	41 e0       	ldi	r20, 0x01	; 1
    121a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_rtc_sram_read>
    121e:	88 23       	and	r24, r24
    1220:	71 f0       	breq	.+28     	; 0x123e <i2c_rtc_init+0x7c>
      {
        if (seconds & 0x80) // clock stopped?
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	88 23       	and	r24, r24
    1226:	5c f4       	brge	.+22     	; 0x123e <i2c_rtc_init+0x7c>
        {
          seconds &= ~0x80;
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	8f 77       	andi	r24, 0x7F	; 127
    122c:	8a 83       	std	Y+2, r24	; 0x02
          (void) i2c_rtc_sram_write(0x00, &seconds, 1);
    122e:	9e 01       	movw	r18, r28
    1230:	2e 5f       	subi	r18, 0xFE	; 254
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	b9 01       	movw	r22, r18
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	0e 94 05 08 	call	0x100a	; 0x100a <i2c_rtc_sram_write>
        }
      }
      read_byte(cRTCOffset, &rtc_offset);
    123e:	2b e8       	ldi	r18, 0x8B	; 139
    1240:	33 e0       	ldi	r19, 0x03	; 3
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	b9 01       	movw	r22, r18
    1246:	0e 94 28 02 	call	0x450	; 0x450 <read_byte>
    124a:	09 c0       	rjmp	.+18     	; 0x125e <i2c_rtc_init+0x9c>
    }
    else
    {
      *errorcode_p = I2C_ERROR_SLAVE_NOT_FOUND;
    124c:	eb 81       	ldd	r30, Y+3	; 0x03
    124e:	fc 81       	ldd	r31, Y+4	; 0x04
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	80 83       	st	Z, r24
      *status_p = i2c_rtc_status;
    1254:	80 91 8f 03 	lds	r24, 0x038F
    1258:	ed 81       	ldd	r30, Y+5	; 0x05
    125a:	fe 81       	ldd	r31, Y+6	; 0x06
    125c:	80 83       	st	Z, r24
    }
  }

  return rtc;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1260:	26 96       	adiw	r28, 0x06	; 6
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <ldr_init>:
 * ldr_init: initialize adc for ldr
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ldr_init (void)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <ldr_init+0x6>
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t result;
 
  ADMUX = 0                       // ADC0
    127e:	e7 e2       	ldi	r30, 0x27	; 39
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 e6       	ldi	r24, 0x60	; 96
    1284:	80 83       	st	Z, r24
        | (1<<REFS0)              // use Avcc
        | (1<<ADLAR);             // left justify result in ADCH
 
  ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);      // prescaler to 32 / in our case sampling frequence of 250kHz
    1286:	e6 e2       	ldi	r30, 0x26	; 38
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	85 e8       	ldi	r24, 0x85	; 133
    128c:	80 83       	st	Z, r24
                                                     // and activate ADC

  ADCSRA |= (1<<ADSC);                      // ADC start 
    128e:	a6 e2       	ldi	r26, 0x26	; 38
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e6 e2       	ldi	r30, 0x26	; 38
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 64       	ori	r24, 0x40	; 64
    129a:	8c 93       	st	X, r24
  while ( ADCSRA & (1<<ADSC) ) {
    129c:	e6 e2       	ldi	r30, 0x26	; 38
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	80 74       	andi	r24, 0x40	; 64
    12a8:	90 70       	andi	r25, 0x00	; 0
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	b9 f7       	brne	.-18     	; 0x129c <ldr_init+0x2a>
    ;     
  }

  result = ADCH;  // read out the value and init the summary array
    12ae:	e5 e2       	ldi	r30, 0x25	; 37
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8b 83       	std	Y+3, r24	; 0x03
  for (int i = 0; i < LDR_ARRAY_SIZE; array[i++] = result);
    12b6:	1a 82       	std	Y+2, r1	; 0x02
    12b8:	19 82       	std	Y+1, r1	; 0x01
    12ba:	0c c0       	rjmp	.+24     	; 0x12d4 <ldr_init+0x62>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	2b 81       	ldd	r18, Y+3	; 0x03
    12c2:	fc 01       	movw	r30, r24
    12c4:	ee 56       	subi	r30, 0x6E	; 110
    12c6:	fc 4f       	sbci	r31, 0xFC	; 252
    12c8:	20 83       	st	Z, r18
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	80 34       	cpi	r24, 0x40	; 64
    12da:	91 05       	cpc	r25, r1
    12dc:	7c f3       	brlt	.-34     	; 0x12bc <ldr_init+0x4a>

  curr_sum = result;              // also init the sum
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	90 93 d3 03 	sts	0x03D3, r25
    12e8:	80 93 d2 03 	sts	0x03D2, r24
  curr_sum *= LDR_ARRAY_SIZE;     //
    12ec:	80 91 d2 03 	lds	r24, 0x03D2
    12f0:	90 91 d3 03 	lds	r25, 0x03D3
    12f4:	00 24       	eor	r0, r0
    12f6:	96 95       	lsr	r25
    12f8:	87 95       	ror	r24
    12fa:	07 94       	ror	r0
    12fc:	96 95       	lsr	r25
    12fe:	87 95       	ror	r24
    1300:	07 94       	ror	r0
    1302:	98 2f       	mov	r25, r24
    1304:	80 2d       	mov	r24, r0
    1306:	90 93 d3 03 	sts	0x03D3, r25
    130a:	80 93 d2 03 	sts	0x03D2, r24

  ADCSRA |= (1<<ADSC);     // start next measurement (will be read in 1Hz Interupt)
    130e:	a6 e2       	ldi	r26, 0x26	; 38
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e6 e2       	ldi	r30, 0x26	; 38
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	80 64       	ori	r24, 0x40	; 64
    131a:	8c 93       	st	X, r24

  return;
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <ldr_get_brightness>:
 * ldr_get_brightness: returns the average of brightness 
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
ldr_get_brightness (void)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
  return ( 255-(curr_sum / LDR_ARRAY_SIZE)); 
    1330:	80 91 d2 03 	lds	r24, 0x03D2
    1334:	90 91 d3 03 	lds	r25, 0x03D3
    1338:	00 24       	eor	r0, r0
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	00 1c       	adc	r0, r0
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	00 1c       	adc	r0, r0
    1346:	89 2f       	mov	r24, r25
    1348:	90 2d       	mov	r25, r0
    134a:	80 95       	com	r24
}
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <ldr_read>:
 * recalculate our new summary and start a new conversion
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
ldr_read (void)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	0f 92       	push	r0
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
  static uint8_t   curr_index = 0;

  if ( (ADCSRA & (1<<ADSC)) == 0) {
    135c:	e6 e2       	ldi	r30, 0x26	; 38
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	80 74       	andi	r24, 0x40	; 64
    1368:	90 70       	andi	r25, 0x00	; 0
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	09 f0       	breq	.+2      	; 0x1370 <ldr_read+0x1e>
    136e:	41 c0       	rjmp	.+130    	; 0x13f2 <ldr_read+0xa0>
    uint8_t measurement = ADCH;
    1370:	e5 e2       	ldi	r30, 0x25	; 37
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	89 83       	std	Y+1, r24	; 0x01

    curr_sum -= array[curr_index];
    1378:	20 91 d2 03 	lds	r18, 0x03D2
    137c:	30 91 d3 03 	lds	r19, 0x03D3
    1380:	80 91 91 03 	lds	r24, 0x0391
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	fc 01       	movw	r30, r24
    138a:	ee 56       	subi	r30, 0x6E	; 110
    138c:	fc 4f       	sbci	r31, 0xFC	; 252
    138e:	80 81       	ld	r24, Z
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	48 1b       	sub	r20, r24
    1398:	59 0b       	sbc	r21, r25
    139a:	ca 01       	movw	r24, r20
    139c:	90 93 d3 03 	sts	0x03D3, r25
    13a0:	80 93 d2 03 	sts	0x03D2, r24
    array[curr_index] = measurement;
    13a4:	80 91 91 03 	lds	r24, 0x0391
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	fc 01       	movw	r30, r24
    13ae:	ee 56       	subi	r30, 0x6E	; 110
    13b0:	fc 4f       	sbci	r31, 0xFC	; 252
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	80 83       	st	Z, r24
    curr_sum += measurement;
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	80 91 d2 03 	lds	r24, 0x03D2
    13c0:	90 91 d3 03 	lds	r25, 0x03D3
    13c4:	82 0f       	add	r24, r18
    13c6:	93 1f       	adc	r25, r19
    13c8:	90 93 d3 03 	sts	0x03D3, r25
    13cc:	80 93 d2 03 	sts	0x03D2, r24
    curr_index++;
    13d0:	80 91 91 03 	lds	r24, 0x0391
    13d4:	8f 5f       	subi	r24, 0xFF	; 255
    13d6:	80 93 91 03 	sts	0x0391, r24

    curr_index %= LDR_ARRAY_SIZE;
    13da:	80 91 91 03 	lds	r24, 0x0391
    13de:	8f 73       	andi	r24, 0x3F	; 63
    13e0:	80 93 91 03 	sts	0x0391, r24

    // start next ADC converting
    ADCSRA |= (1<<ADSC); 
    13e4:	a6 e2       	ldi	r26, 0x26	; 38
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e6 e2       	ldi	r30, 0x26	; 38
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	80 64       	ori	r24, 0x40	; 64
    13f0:	8c 93       	st	X, r24
  } 

  return;
}
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <InitPWM>:

#define BIT(a) (1 << a)

void
InitPWM()
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
  DDRD = 0xfc; //(1 << PD4) || (1 << PD5) || (1 << PD7);
    1402:	e1 e3       	ldi	r30, 0x31	; 49
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8c ef       	ldi	r24, 0xFC	; 252
    1408:	80 83       	st	Z, r24


  TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
    140a:	ef e4       	ldi	r30, 0x4F	; 79
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	81 ea       	ldi	r24, 0xA1	; 161
    1410:	80 83       	st	Z, r24
  TCCR1B = (1 << CS10);
    1412:	ee e4       	ldi	r30, 0x4E	; 78
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	80 83       	st	Z, r24
  TCCR2 = (1 << CS20) | (1 << WGM20) | (1 << COM21);
    141a:	e5 e4       	ldi	r30, 0x45	; 69
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	81 e6       	ldi	r24, 0x61	; 97
    1420:	80 83       	st	Z, r24
  TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (01 << COM00) | (1 << CS00) | (1 << CS02);
    1422:	e3 e5       	ldi	r30, 0x53	; 83
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	8d e7       	ldi	r24, 0x7D	; 125
    1428:	80 83       	st	Z, r24

  TIMSK &= ~0x3c;
    142a:	a9 e5       	ldi	r26, 0x59	; 89
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e9 e5       	ldi	r30, 0x59	; 89
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	83 7c       	andi	r24, 0xC3	; 195
    1436:	8c 93       	st	X, r24
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <SetPWMOutput>:

void
SetPWMOutput(uint8_t duty)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	0f 92       	push	r0
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	89 83       	std	Y+1, r24	; 0x01
  OCR1AL = duty;
    144a:	ea e4       	ldi	r30, 0x4A	; 74
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	80 83       	st	Z, r24
  OCR1BL = 255 - duty;
    1452:	e8 e4       	ldi	r30, 0x48	; 72
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	80 95       	com	r24
    145a:	80 83       	st	Z, r24
  OCR0 = duty;
    145c:	ec e5       	ldi	r30, 0x5C	; 92
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	80 83       	st	Z, r24
  OCR2 = duty;
    1464:	e3 e4       	ldi	r30, 0x43	; 67
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 83       	st	Z, r24
}
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <SetColor>:

void
SetColor(uint8_t bright, uint8_t uiR, uint8_t uiG, uint8_t uiB)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	27 97       	sbiw	r28, 0x07	; 7
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	8c 83       	std	Y+4, r24	; 0x04
    148a:	6d 83       	std	Y+5, r22	; 0x05
    148c:	4e 83       	std	Y+6, r20	; 0x06
    148e:	2f 83       	std	Y+7, r18	; 0x07
  char r = ((((uint16_t) bright) * uiR) / 255);
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	ac 01       	movw	r20, r24
    149e:	24 9f       	mul	r18, r20
    14a0:	c0 01       	movw	r24, r0
    14a2:	25 9f       	mul	r18, r21
    14a4:	90 0d       	add	r25, r0
    14a6:	34 9f       	mul	r19, r20
    14a8:	90 0d       	add	r25, r0
    14aa:	11 24       	eor	r1, r1
    14ac:	2f ef       	ldi	r18, 0xFF	; 255
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	b9 01       	movw	r22, r18
    14b2:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <__udivmodhi4>
    14b6:	cb 01       	movw	r24, r22
    14b8:	8b 83       	std	Y+3, r24	; 0x03
  char g = ((((uint16_t) bright) * uiG) / 255);
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	ac 01       	movw	r20, r24
    14c8:	24 9f       	mul	r18, r20
    14ca:	c0 01       	movw	r24, r0
    14cc:	25 9f       	mul	r18, r21
    14ce:	90 0d       	add	r25, r0
    14d0:	34 9f       	mul	r19, r20
    14d2:	90 0d       	add	r25, r0
    14d4:	11 24       	eor	r1, r1
    14d6:	2f ef       	ldi	r18, 0xFF	; 255
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	b9 01       	movw	r22, r18
    14dc:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <__udivmodhi4>
    14e0:	cb 01       	movw	r24, r22
    14e2:	8a 83       	std	Y+2, r24	; 0x02
  char b = ((((uint16_t) bright) * uiB) / 255);
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8f 81       	ldd	r24, Y+7	; 0x07
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	ac 01       	movw	r20, r24
    14f2:	24 9f       	mul	r18, r20
    14f4:	c0 01       	movw	r24, r0
    14f6:	25 9f       	mul	r18, r21
    14f8:	90 0d       	add	r25, r0
    14fa:	34 9f       	mul	r19, r20
    14fc:	90 0d       	add	r25, r0
    14fe:	11 24       	eor	r1, r1
    1500:	2f ef       	ldi	r18, 0xFF	; 255
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	b9 01       	movw	r22, r18
    1506:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <__udivmodhi4>
    150a:	cb 01       	movw	r24, r22
    150c:	89 83       	std	Y+1, r24	; 0x01
  OCR1BL = r;
    150e:	e8 e4       	ldi	r30, 0x48	; 72
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	80 83       	st	Z, r24
  OCR1AL = g;
    1516:	ea e4       	ldi	r30, 0x4A	; 74
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	80 83       	st	Z, r24
  OCR2 = b;
    151e:	e3 e4       	ldi	r30, 0x43	; 67
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	80 83       	st	Z, r24
}
    1526:	27 96       	adiw	r28, 0x07	; 7
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <uartPutc>:
#define sbi(sfr, bit)     (_SFR_BYTE(sfr) |= _BV(bit))
#endif

void
uartPutc(char c)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	0f 92       	push	r0
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	89 83       	std	Y+1, r24	; 0x01
  while (!(UCSRA & (1 << UDRE)))
    1544:	eb e2       	ldi	r30, 0x2B	; 43
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	80 72       	andi	r24, 0x20	; 32
    1550:	90 70       	andi	r25, 0x00	; 0
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	b9 f3       	breq	.-18     	; 0x1544 <uartPutc+0xc>
    ;
  UDR = c;
    1556:	ec e2       	ldi	r30, 0x2C	; 44
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	80 83       	st	Z, r24
}
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <uartPuts>:

void
uartPuts(char *s)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <uartPuts+0x6>
    156c:	00 d0       	rcall	.+0      	; 0x156e <uartPuts+0x8>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	8b 83       	std	Y+3, r24	; 0x03
  int x = 0;
    1576:	1a 82       	std	Y+2, r1	; 0x02
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	0f c0       	rjmp	.+30     	; 0x159a <uartPuts+0x34>
  while (s[x])
  {
    uartPutc(s[x]);
    157c:	29 81       	ldd	r18, Y+1	; 0x01
    157e:	3a 81       	ldd	r19, Y+2	; 0x02
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	fc 01       	movw	r30, r24
    1586:	e2 0f       	add	r30, r18
    1588:	f3 1f       	adc	r31, r19
    158a:	80 81       	ld	r24, Z
    158c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <uartPutc>
    x++;
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01

void
uartPuts(char *s)
{
  int x = 0;
  while (s[x])
    159a:	29 81       	ldd	r18, Y+1	; 0x01
    159c:	3a 81       	ldd	r19, Y+2	; 0x02
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	fc 01       	movw	r30, r24
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	39 f7       	brne	.-50     	; 0x157c <uartPuts+0x16>
  {
    uartPutc(s[x]);
    x++;
  }
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <shift32_output>:
#define SHIFT_SR_SPI_RCLK PIN4
#define SHIFT_SR_SPI_SCK  PIN7

void
shift32_output(uint32_t value)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	28 97       	sbiw	r28, 0x08	; 8
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	6d 83       	std	Y+5, r22	; 0x05
    15d2:	7e 83       	std	Y+6, r23	; 0x06
    15d4:	8f 83       	std	Y+7, r24	; 0x07
    15d6:	98 87       	std	Y+8, r25	; 0x08
  uint8_t u0 = (uint8_t) (value);
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	8c 83       	std	Y+4, r24	; 0x04
  uint8_t u1 = (uint8_t) (value >> 8);
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	9e 81       	ldd	r25, Y+6	; 0x06
    15e0:	af 81       	ldd	r26, Y+7	; 0x07
    15e2:	b8 85       	ldd	r27, Y+8	; 0x08
    15e4:	89 2f       	mov	r24, r25
    15e6:	9a 2f       	mov	r25, r26
    15e8:	ab 2f       	mov	r26, r27
    15ea:	bb 27       	eor	r27, r27
    15ec:	8b 83       	std	Y+3, r24	; 0x03
  uint8_t u2 = (uint8_t) (value >> 16);
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	af 81       	ldd	r26, Y+7	; 0x07
    15f4:	b8 85       	ldd	r27, Y+8	; 0x08
    15f6:	cd 01       	movw	r24, r26
    15f8:	aa 27       	eor	r26, r26
    15fa:	bb 27       	eor	r27, r27
    15fc:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t u3 = (uint8_t) (value >> 24);
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	af 81       	ldd	r26, Y+7	; 0x07
    1604:	b8 85       	ldd	r27, Y+8	; 0x08
    1606:	8b 2f       	mov	r24, r27
    1608:	99 27       	eor	r25, r25
    160a:	aa 27       	eor	r26, r26
    160c:	bb 27       	eor	r27, r27
    160e:	89 83       	std	Y+1, r24	; 0x01

  SPDR = u3;
    1610:	ef e2       	ldi	r30, 0x2F	; 47
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	80 83       	st	Z, r24
  while (!(SPSR & (1 << SPIF)))
    1618:	ee e2       	ldi	r30, 0x2E	; 46
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	88 23       	and	r24, r24
    1620:	dc f7       	brge	.-10     	; 0x1618 <shift32_output+0x5c>
    ;

  SPDR = u2;
    1622:	ef e2       	ldi	r30, 0x2F	; 47
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	80 83       	st	Z, r24
  while (!(SPSR & (1 << SPIF)))
    162a:	ee e2       	ldi	r30, 0x2E	; 46
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	88 23       	and	r24, r24
    1632:	dc f7       	brge	.-10     	; 0x162a <shift32_output+0x6e>
    ;

  SPDR = u1;
    1634:	ef e2       	ldi	r30, 0x2F	; 47
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	80 83       	st	Z, r24
  while (!(SPSR & (1 << SPIF)))
    163c:	ee e2       	ldi	r30, 0x2E	; 46
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	88 23       	and	r24, r24
    1644:	dc f7       	brge	.-10     	; 0x163c <shift32_output+0x80>
    ;

  SPDR = u0;
    1646:	ef e2       	ldi	r30, 0x2F	; 47
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	80 83       	st	Z, r24
  while (!(SPSR & (1 << SPIF)))
    164e:	ee e2       	ldi	r30, 0x2E	; 46
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	88 23       	and	r24, r24
    1656:	dc f7       	brge	.-10     	; 0x164e <shift32_output+0x92>
    ;

  /* latch data */
  SHIFT_SR_SPI_PORT &= ~(1 << SHIFT_SR_SPI_RCLK);
    1658:	a8 e3       	ldi	r26, 0x38	; 56
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e8 e3       	ldi	r30, 0x38	; 56
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8f 7e       	andi	r24, 0xEF	; 239
    1664:	8c 93       	st	X, r24
  SHIFT_SR_SPI_PORT |= (1 << SHIFT_SR_SPI_RCLK);
    1666:	a8 e3       	ldi	r26, 0x38	; 56
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e8 e3       	ldi	r30, 0x38	; 56
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	80 61       	ori	r24, 0x10	; 16
    1672:	8c 93       	st	X, r24
}
    1674:	28 96       	adiw	r28, 0x08	; 8
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <shift_init>:

void
shift_init(void)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
  SHIFT_SR_SPI_DDR |= (1 << SHIFT_SR_SPI_MOSI) | (1 << SHIFT_SR_SPI_RCLK) | (1 << SHIFT_SR_SPI_SCK);
    168e:	a7 e3       	ldi	r26, 0x37	; 55
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e7 e3       	ldi	r30, 0x37	; 55
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	80 6b       	ori	r24, 0xB0	; 176
    169a:	8c 93       	st	X, r24
  SHIFT_SR_SPI_DDR &= ~(1 << SHIFT_SR_SPI_MISO); /* MISO muss eingang sein */
    169c:	a7 e3       	ldi	r26, 0x37	; 55
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e7 e3       	ldi	r30, 0x37	; 55
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 7b       	andi	r24, 0xBF	; 191
    16a8:	8c 93       	st	X, r24
  SHIFT_SR_SPI_PORT |= (1 << SHIFT_SR_SPI_RCLK) | (1 << SHIFT_SR_SPI_MISO);
    16aa:	a8 e3       	ldi	r26, 0x38	; 56
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	80 65       	ori	r24, 0x50	; 80
    16b6:	8c 93       	st	X, r24

  SPCR = (1 << SPE) | (1 << MSTR) | (1 << CPOL) | (1 << SPR0) | (1 << SPR1);
    16b8:	ed e2       	ldi	r30, 0x2D	; 45
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	8b e5       	ldi	r24, 0x5B	; 91
    16be:	80 83       	st	Z, r24

  SPSR |= (1 << SPI2X);
    16c0:	ae e2       	ldi	r26, 0x2E	; 46
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ee e2       	ldi	r30, 0x2E	; 46
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	81 60       	ori	r24, 0x01	; 1
    16cc:	8c 93       	st	X, r24

  shift32_output(0); /* send dummybytes to intialize */
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <shift32_output>
}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <__vector_13>:
volatile uint8_t uart_str_complete = 0;
volatile uint8_t uart_str_count = 0;
volatile char uart_string[UART_MAXSTRLEN + 1] = "";

ISR(SIG_UART_RECV)
{
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	8f 93       	push	r24
    16ec:	9f 93       	push	r25
    16ee:	ef 93       	push	r30
    16f0:	ff 93       	push	r31
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	0f 92       	push	r0
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
  unsigned char nextChar;

  nextChar = UDR;
    16fc:	ec e2       	ldi	r30, 0x2C	; 44
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	89 83       	std	Y+1, r24	; 0x01
  if (uart_str_complete == 0)
    1704:	80 91 d4 03 	lds	r24, 0x03D4
    1708:	88 23       	and	r24, r24
    170a:	31 f5       	brne	.+76     	; 0x1758 <__vector_13+0x78>
  {

    if (nextChar != '\n' && nextChar != '\r' && uart_str_count < UART_MAXSTRLEN - 1)
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	8a 30       	cpi	r24, 0x0A	; 10
    1710:	b1 f0       	breq	.+44     	; 0x173e <__vector_13+0x5e>
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	8d 30       	cpi	r24, 0x0D	; 13
    1716:	99 f0       	breq	.+38     	; 0x173e <__vector_13+0x5e>
    1718:	80 91 d5 03 	lds	r24, 0x03D5
    171c:	83 36       	cpi	r24, 0x63	; 99
    171e:	78 f4       	brcc	.+30     	; 0x173e <__vector_13+0x5e>
    {
      uart_string[uart_str_count] = nextChar;
    1720:	80 91 d5 03 	lds	r24, 0x03D5
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	fc 01       	movw	r30, r24
    172a:	e5 52       	subi	r30, 0x25	; 37
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	80 83       	st	Z, r24
      uart_str_count++;
    1732:	80 91 d5 03 	lds	r24, 0x03D5
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	80 93 d5 03 	sts	0x03D5, r24
    173c:	0d c0       	rjmp	.+26     	; 0x1758 <__vector_13+0x78>
    }
    else
    {
      uart_string[uart_str_count] = '\0';
    173e:	80 91 d5 03 	lds	r24, 0x03D5
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	fc 01       	movw	r30, r24
    1748:	e5 52       	subi	r30, 0x25	; 37
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	10 82       	st	Z, r1
      uart_str_count = 0;
    174e:	10 92 d5 03 	sts	0x03D5, r1
      uart_str_complete = 1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	80 93 d4 03 	sts	0x03D4, r24
    }
  }
}
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	ff 91       	pop	r31
    1760:	ef 91       	pop	r30
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <hex2dez_c>:

int
hex2dez_c(char h)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <hex2dez_c+0x6>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	8b 83       	std	Y+3, r24	; 0x03
  int res = -1;
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	9f ef       	ldi	r25, 0xFF	; 255
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	89 83       	std	Y+1, r24	; 0x01
  if (h >= '0' && h <= '9')
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	80 33       	cpi	r24, 0x30	; 48
    178a:	50 f0       	brcs	.+20     	; 0x17a0 <hex2dez_c+0x30>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	8a 33       	cpi	r24, 0x3A	; 58
    1790:	38 f4       	brcc	.+14     	; 0x17a0 <hex2dez_c+0x30>
  {
    res = (h - '0');
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	c0 97       	sbiw	r24, 0x30	; 48
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	1a c0       	rjmp	.+52     	; 0x17d4 <hex2dez_c+0x64>
  }
  else if (h >= 'A' && h <= 'F')
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	81 34       	cpi	r24, 0x41	; 65
    17a4:	50 f0       	brcs	.+20     	; 0x17ba <hex2dez_c+0x4a>
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	87 34       	cpi	r24, 0x47	; 71
    17aa:	38 f4       	brcc	.+14     	; 0x17ba <hex2dez_c+0x4a>
  {
    res = (h - 'A' + 10);
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	c7 97       	sbiw	r24, 0x37	; 55
    17b4:	9a 83       	std	Y+2, r25	; 0x02
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <hex2dez_c+0x64>
  }
  else if (h >= 'a' && h <= 'f')
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	81 36       	cpi	r24, 0x61	; 97
    17be:	50 f0       	brcs	.+20     	; 0x17d4 <hex2dez_c+0x64>
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	87 36       	cpi	r24, 0x67	; 103
    17c4:	38 f4       	brcc	.+14     	; 0x17d4 <hex2dez_c+0x64>
  {
    res = (h - 'a' + 10);
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	87 55       	subi	r24, 0x57	; 87
    17ce:	90 40       	sbci	r25, 0x00	; 0
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
  }
  return res;
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <hex2dez>:

int
hex2dez(char *h)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	28 97       	sbiw	r28, 0x08	; 8
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
  int res1 = hex2dez_c(h[0]);
    17fc:	ed 81       	ldd	r30, Y+5	; 0x05
    17fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1800:	80 81       	ld	r24, Z
    1802:	0e 94 b8 0b 	call	0x1770	; 0x1770 <hex2dez_c>
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
  int res2 = hex2dez_c(h[1]);
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	fc 01       	movw	r30, r24
    1810:	31 96       	adiw	r30, 0x01	; 1
    1812:	80 81       	ld	r24, Z
    1814:	0e 94 b8 0b 	call	0x1770	; 0x1770 <hex2dez_c>
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
  if (res1 < 0 || res2 < 0)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	99 23       	and	r25, r25
    1822:	24 f0       	brlt	.+8      	; 0x182c <hex2dez+0x48>
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	99 23       	and	r25, r25
    182a:	2c f4       	brge	.+10     	; 0x1836 <hex2dez+0x52>
    return -1;
    182c:	4f ef       	ldi	r20, 0xFF	; 255
    182e:	5f ef       	ldi	r21, 0xFF	; 255
    1830:	58 87       	std	Y+8, r21	; 0x08
    1832:	4f 83       	std	Y+7, r20	; 0x07
    1834:	10 c0       	rjmp	.+32     	; 0x1856 <hex2dez+0x72>
  return (res1 << 4) + res2;
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	9c 01       	movw	r18, r24
    183c:	22 95       	swap	r18
    183e:	32 95       	swap	r19
    1840:	30 7f       	andi	r19, 0xF0	; 240
    1842:	32 27       	eor	r19, r18
    1844:	20 7f       	andi	r18, 0xF0	; 240
    1846:	32 27       	eor	r19, r18
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	a9 01       	movw	r20, r18
    184e:	48 0f       	add	r20, r24
    1850:	59 1f       	adc	r21, r25
    1852:	58 87       	std	Y+8, r21	; 0x08
    1854:	4f 83       	std	Y+7, r20	; 0x07
    1856:	8f 81       	ldd	r24, Y+7	; 0x07
    1858:	98 85       	ldd	r25, Y+8	; 0x08
}
    185a:	28 96       	adiw	r28, 0x08	; 8
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <TimeInfo>:
0b00000000000000000000000000000010 //
    };

void
TimeInfo(DATETIME time)
{
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	c1 58       	subi	r28, 0x81	; 129
    1882:	d0 40       	sbci	r29, 0x00	; 0
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	fe 01       	movw	r30, r28
    1890:	eb 59       	subi	r30, 0x9B	; 155
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	c0 82       	st	Z, r12
    1896:	d1 82       	std	Z+1, r13	; 0x01
    1898:	e2 82       	std	Z+2, r14	; 0x02
    189a:	f3 82       	std	Z+3, r15	; 0x03
    189c:	04 83       	std	Z+4, r16	; 0x04
    189e:	15 83       	std	Z+5, r17	; 0x05
    18a0:	26 83       	std	Z+6, r18	; 0x06
    18a2:	37 83       	std	Z+7, r19	; 0x07
    18a4:	40 87       	std	Z+8, r20	; 0x08
    18a6:	51 87       	std	Z+9, r21	; 0x09
    18a8:	62 87       	std	Z+10, r22	; 0x0a
    18aa:	73 87       	std	Z+11, r23	; 0x0b
    18ac:	84 87       	std	Z+12, r24	; 0x0c
  char s[100];
  sprintf(s, "time :  %02d:%02d:%02d %s %02d.%02d.%4d UTC%+d %s\r\n", time.hh, time.mm, time.ss, "x", time.DD, time.MM, time.YY + 2000, rtc_offset, time.dst != 0 ? "DST" : "");
    18ae:	fe 01       	movw	r30, r28
    18b0:	eb 59       	subi	r30, 0x9B	; 155
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	83 81       	ldd	r24, Z+3	; 0x03
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	c0 58       	subi	r28, 0x80	; 128
    18bc:	df 4f       	sbci	r29, 0xFF	; 255
    18be:	39 83       	std	Y+1, r19	; 0x01
    18c0:	28 83       	st	Y, r18
    18c2:	c0 58       	subi	r28, 0x80	; 128
    18c4:	d0 40       	sbci	r29, 0x00	; 0
    18c6:	fe 01       	movw	r30, r28
    18c8:	eb 59       	subi	r30, 0x9B	; 155
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	84 81       	ldd	r24, Z+4	; 0x04
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	c2 58       	subi	r28, 0x82	; 130
    18d4:	df 4f       	sbci	r29, 0xFF	; 255
    18d6:	39 83       	std	Y+1, r19	; 0x01
    18d8:	28 83       	st	Y, r18
    18da:	ce 57       	subi	r28, 0x7E	; 126
    18dc:	d0 40       	sbci	r29, 0x00	; 0
    18de:	fe 01       	movw	r30, r28
    18e0:	eb 59       	subi	r30, 0x9B	; 155
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	85 81       	ldd	r24, Z+5	; 0x05
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	ee 96       	adiw	r28, 0x3e	; 62
    18ec:	3f af       	std	Y+63, r19	; 0x3f
    18ee:	2e af       	std	Y+62, r18	; 0x3e
    18f0:	ee 97       	sbiw	r28, 0x3e	; 62
    18f2:	fe 01       	movw	r30, r28
    18f4:	eb 59       	subi	r30, 0x9B	; 155
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	ec 96       	adiw	r28, 0x3c	; 60
    1900:	3f af       	std	Y+63, r19	; 0x3f
    1902:	2e af       	std	Y+62, r18	; 0x3e
    1904:	ec 97       	sbiw	r28, 0x3c	; 60
    1906:	fe 01       	movw	r30, r28
    1908:	eb 59       	subi	r30, 0x9B	; 155
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	81 81       	ldd	r24, Z+1	; 0x01
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	ea 96       	adiw	r28, 0x3a	; 58
    1914:	3f af       	std	Y+63, r19	; 0x3f
    1916:	2e af       	std	Y+62, r18	; 0x3e
    1918:	ea 97       	sbiw	r28, 0x3a	; 58
    191a:	fe 01       	movw	r30, r28
    191c:	eb 59       	subi	r30, 0x9B	; 155
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 81       	ld	r24, Z
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9c 01       	movw	r18, r24
    1928:	20 53       	subi	r18, 0x30	; 48
    192a:	38 4f       	sbci	r19, 0xF8	; 248
    192c:	e8 96       	adiw	r28, 0x38	; 56
    192e:	3f af       	std	Y+63, r19	; 0x3f
    1930:	2e af       	std	Y+62, r18	; 0x3e
    1932:	e8 97       	sbiw	r28, 0x38	; 56
    1934:	80 91 8b 03 	lds	r24, 0x038B
    1938:	28 2f       	mov	r18, r24
    193a:	33 27       	eor	r19, r19
    193c:	27 fd       	sbrc	r18, 7
    193e:	30 95       	com	r19
    1940:	e6 96       	adiw	r28, 0x36	; 54
    1942:	3f af       	std	Y+63, r19	; 0x3f
    1944:	2e af       	std	Y+62, r18	; 0x3e
    1946:	e6 97       	sbiw	r28, 0x36	; 54
    1948:	fe 01       	movw	r30, r28
    194a:	eb 59       	subi	r30, 0x9B	; 155
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	87 81       	ldd	r24, Z+7	; 0x07
    1950:	88 23       	and	r24, r24
    1952:	39 f0       	breq	.+14     	; 0x1962 <TimeInfo+0xf6>
    1954:	80 e4       	ldi	r24, 0x40	; 64
    1956:	91 e0       	ldi	r25, 0x01	; 1
    1958:	e4 96       	adiw	r28, 0x34	; 52
    195a:	9f af       	std	Y+63, r25	; 0x3f
    195c:	8e af       	std	Y+62, r24	; 0x3e
    195e:	e4 97       	sbiw	r28, 0x34	; 52
    1960:	06 c0       	rjmp	.+12     	; 0x196e <TimeInfo+0x102>
    1962:	24 e4       	ldi	r18, 0x44	; 68
    1964:	31 e0       	ldi	r19, 0x01	; 1
    1966:	e4 96       	adiw	r28, 0x34	; 52
    1968:	3f af       	std	Y+63, r19	; 0x3f
    196a:	2e af       	std	Y+62, r18	; 0x3e
    196c:	e4 97       	sbiw	r28, 0x34	; 52
    196e:	8d b7       	in	r24, 0x3d	; 61
    1970:	9e b7       	in	r25, 0x3e	; 62
    1972:	46 97       	sbiw	r24, 0x16	; 22
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	9e bf       	out	0x3e, r25	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	8d bf       	out	0x3d, r24	; 61
    197e:	ed b7       	in	r30, 0x3d	; 61
    1980:	fe b7       	in	r31, 0x3e	; 62
    1982:	31 96       	adiw	r30, 0x01	; 1
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
    198c:	85 e4       	ldi	r24, 0x45	; 69
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	93 83       	std	Z+3, r25	; 0x03
    1992:	82 83       	std	Z+2, r24	; 0x02
    1994:	c0 58       	subi	r28, 0x80	; 128
    1996:	df 4f       	sbci	r29, 0xFF	; 255
    1998:	28 81       	ld	r18, Y
    199a:	39 81       	ldd	r19, Y+1	; 0x01
    199c:	c0 58       	subi	r28, 0x80	; 128
    199e:	d0 40       	sbci	r29, 0x00	; 0
    19a0:	35 83       	std	Z+5, r19	; 0x05
    19a2:	24 83       	std	Z+4, r18	; 0x04
    19a4:	c2 58       	subi	r28, 0x82	; 130
    19a6:	df 4f       	sbci	r29, 0xFF	; 255
    19a8:	88 81       	ld	r24, Y
    19aa:	99 81       	ldd	r25, Y+1	; 0x01
    19ac:	ce 57       	subi	r28, 0x7E	; 126
    19ae:	d0 40       	sbci	r29, 0x00	; 0
    19b0:	97 83       	std	Z+7, r25	; 0x07
    19b2:	86 83       	std	Z+6, r24	; 0x06
    19b4:	ee 96       	adiw	r28, 0x3e	; 62
    19b6:	2e ad       	ldd	r18, Y+62	; 0x3e
    19b8:	3f ad       	ldd	r19, Y+63	; 0x3f
    19ba:	ee 97       	sbiw	r28, 0x3e	; 62
    19bc:	31 87       	std	Z+9, r19	; 0x09
    19be:	20 87       	std	Z+8, r18	; 0x08
    19c0:	89 e7       	ldi	r24, 0x79	; 121
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	93 87       	std	Z+11, r25	; 0x0b
    19c6:	82 87       	std	Z+10, r24	; 0x0a
    19c8:	ec 96       	adiw	r28, 0x3c	; 60
    19ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    19cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    19ce:	ec 97       	sbiw	r28, 0x3c	; 60
    19d0:	95 87       	std	Z+13, r25	; 0x0d
    19d2:	84 87       	std	Z+12, r24	; 0x0c
    19d4:	ea 96       	adiw	r28, 0x3a	; 58
    19d6:	2e ad       	ldd	r18, Y+62	; 0x3e
    19d8:	3f ad       	ldd	r19, Y+63	; 0x3f
    19da:	ea 97       	sbiw	r28, 0x3a	; 58
    19dc:	37 87       	std	Z+15, r19	; 0x0f
    19de:	26 87       	std	Z+14, r18	; 0x0e
    19e0:	e8 96       	adiw	r28, 0x38	; 56
    19e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    19e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    19e6:	e8 97       	sbiw	r28, 0x38	; 56
    19e8:	91 8b       	std	Z+17, r25	; 0x11
    19ea:	80 8b       	std	Z+16, r24	; 0x10
    19ec:	e6 96       	adiw	r28, 0x36	; 54
    19ee:	2e ad       	ldd	r18, Y+62	; 0x3e
    19f0:	3f ad       	ldd	r19, Y+63	; 0x3f
    19f2:	e6 97       	sbiw	r28, 0x36	; 54
    19f4:	33 8b       	std	Z+19, r19	; 0x13
    19f6:	22 8b       	std	Z+18, r18	; 0x12
    19f8:	e4 96       	adiw	r28, 0x34	; 52
    19fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    19fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    19fe:	e4 97       	sbiw	r28, 0x34	; 52
    1a00:	95 8b       	std	Z+21, r25	; 0x15
    1a02:	84 8b       	std	Z+20, r24	; 0x14
    1a04:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    1a08:	2d b7       	in	r18, 0x3d	; 61
    1a0a:	3e b7       	in	r19, 0x3e	; 62
    1a0c:	2a 5e       	subi	r18, 0xEA	; 234
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	3e bf       	out	0x3e, r19	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	2d bf       	out	0x3d, r18	; 61
  uartPuts(s);
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
  sprintf(s, "Sun: %%%d %02d:%02d - %02d:%02d\r\n", time.sunrise, time.sunrisehh, time.sunrisemm, time.sunfallhh, time.sunfallmm);
    1a22:	fe 01       	movw	r30, r28
    1a24:	eb 59       	subi	r30, 0x9B	; 155
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 85       	ldd	r24, Z+8	; 0x08
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	fe 01       	movw	r30, r28
    1a30:	eb 59       	subi	r30, 0x9B	; 155
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	81 85       	ldd	r24, Z+9	; 0x09
    1a36:	48 2f       	mov	r20, r24
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	eb 59       	subi	r30, 0x9B	; 155
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	82 85       	ldd	r24, Z+10	; 0x0a
    1a42:	68 2f       	mov	r22, r24
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	fe 01       	movw	r30, r28
    1a48:	eb 59       	subi	r30, 0x9B	; 155
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a4e:	a8 2f       	mov	r26, r24
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	fe 01       	movw	r30, r28
    1a54:	eb 59       	subi	r30, 0x9B	; 155
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	84 85       	ldd	r24, Z+12	; 0x0c
    1a5a:	08 2f       	mov	r16, r24
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
    1a5e:	8d b7       	in	r24, 0x3d	; 61
    1a60:	9e b7       	in	r25, 0x3e	; 62
    1a62:	0e 97       	sbiw	r24, 0x0e	; 14
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	9e bf       	out	0x3e, r25	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	8d bf       	out	0x3d, r24	; 61
    1a6e:	ed b7       	in	r30, 0x3d	; 61
    1a70:	fe b7       	in	r31, 0x3e	; 62
    1a72:	31 96       	adiw	r30, 0x01	; 1
    1a74:	ce 01       	movw	r24, r28
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
    1a7c:	8b e7       	ldi	r24, 0x7B	; 123
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	93 83       	std	Z+3, r25	; 0x03
    1a82:	82 83       	std	Z+2, r24	; 0x02
    1a84:	35 83       	std	Z+5, r19	; 0x05
    1a86:	24 83       	std	Z+4, r18	; 0x04
    1a88:	57 83       	std	Z+7, r21	; 0x07
    1a8a:	46 83       	std	Z+6, r20	; 0x06
    1a8c:	71 87       	std	Z+9, r23	; 0x09
    1a8e:	60 87       	std	Z+8, r22	; 0x08
    1a90:	b3 87       	std	Z+11, r27	; 0x0b
    1a92:	a2 87       	std	Z+10, r26	; 0x0a
    1a94:	15 87       	std	Z+13, r17	; 0x0d
    1a96:	04 87       	std	Z+12, r16	; 0x0c
    1a98:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    1a9c:	2d b7       	in	r18, 0x3d	; 61
    1a9e:	3e b7       	in	r19, 0x3e	; 62
    1aa0:	22 5f       	subi	r18, 0xF2	; 242
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	3e bf       	out	0x3e, r19	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	2d bf       	out	0x3d, r18	; 61
  uartPuts(s);
    1aae:	ce 01       	movw	r24, r28
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
}
    1ab6:	cf 57       	subi	r28, 0x7F	; 127
    1ab8:	df 4f       	sbci	r29, 0xFF	; 255
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	08 95       	ret

00001ad6 <main>:

int
main()
{
    1ad6:	cf 92       	push	r12
    1ad8:	df 92       	push	r13
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	cb 51       	subi	r28, 0x1B	; 27
    1aec:	d2 40       	sbci	r29, 0x02	; 2
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
  cli();
    1af8:	f8 94       	cli

  UCSRB |= (1 << TXEN) | (1 << RXEN) | (1 << RXCIE);
    1afa:	aa e2       	ldi	r26, 0x2A	; 42
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	ea e2       	ldi	r30, 0x2A	; 42
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	88 69       	ori	r24, 0x98	; 152
    1b06:	8c 93       	st	X, r24
  UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
    1b08:	a0 e4       	ldi	r26, 0x40	; 64
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e0 e4       	ldi	r30, 0x40	; 64
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	86 68       	ori	r24, 0x86	; 134
    1b14:	8c 93       	st	X, r24

  UBRRH = 0x00;
    1b16:	e0 e4       	ldi	r30, 0x40	; 64
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	10 82       	st	Z, r1
  UBRRL = 0x08;
    1b1c:	e9 e2       	ldi	r30, 0x29	; 41
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	88 e0       	ldi	r24, 0x08	; 8
    1b22:	80 83       	st	Z, r24

  uartPuts("WordClock V0.1 initializing...\r\n");
    1b24:	8f ec       	ldi	r24, 0xCF	; 207
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>

  uartPuts("\r\n... PWM");
    1b2c:	80 ef       	ldi	r24, 0xF0	; 240
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
  InitPWM();
    1b34:	0e 94 fd 09 	call	0x13fa	; 0x13fa <InitPWM>
  SetColor(0xFF, 0xFF, 0x00, 0x00);
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	6f ef       	ldi	r22, 0xFF	; 255
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>

  uartPuts("\r\n... Shifter");
    1b44:	8a ef       	ldi	r24, 0xFA	; 250
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
  shift_init();
    1b4c:	0e 94 43 0b 	call	0x1686	; 0x1686 <shift_init>
  SetColor(0xFF, 0xFF, 0xFF, 0x00);
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	6f ef       	ldi	r22, 0xFF	; 255
    1b54:	4f ef       	ldi	r20, 0xFF	; 255
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>
  shift32_output(0xffffffff);
    1b5c:	6f ef       	ldi	r22, 0xFF	; 255
    1b5e:	7f ef       	ldi	r23, 0xFF	; 255
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	9f ef       	ldi	r25, 0xFF	; 255
    1b64:	0e 94 de 0a 	call	0x15bc	; 0x15bc <shift32_output>

  uartPuts("\r\n... LDR ADC");
    1b68:	88 e0       	ldi	r24, 0x08	; 8
    1b6a:	92 e0       	ldi	r25, 0x02	; 2
    1b6c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
  ldr_init();
    1b70:	0e 94 39 09 	call	0x1272	; 0x1272 <ldr_init>
  SetColor(0xFF, 0x00, 0xFF, 0xFF);
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	4f ef       	ldi	r20, 0xFF	; 255
    1b7a:	2f ef       	ldi	r18, 0xFF	; 255
    1b7c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>

  uartPuts("\r\n... RTC");
    1b80:	86 e1       	ldi	r24, 0x16	; 22
    1b82:	92 e0       	ldi	r25, 0x02	; 2
    1b84:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
  DATETIME time;
  DATETIME utctime;
  uint8_t i2c_errorcode;
  uint8_t i2c_status;
  if (!i2c_rtc_init(&i2c_errorcode, &i2c_status)) // initialize rtc
    1b88:	ce 01       	movw	r24, r28
    1b8a:	8b 59       	subi	r24, 0x9B	; 155
    1b8c:	9e 4f       	sbci	r25, 0xFE	; 254
    1b8e:	9e 01       	movw	r18, r28
    1b90:	2a 59       	subi	r18, 0x9A	; 154
    1b92:	3e 4f       	sbci	r19, 0xFE	; 254
    1b94:	b9 01       	movw	r22, r18
    1b96:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <i2c_rtc_init>
    1b9a:	88 23       	and	r24, r24
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <main+0xca>
    1b9e:	22 c1       	rjmp	.+580    	; 0x1de4 <main+0x30e>
  {
    uartPuts(" FAILED !!!\r\n");
    1ba0:	80 e2       	ldi	r24, 0x20	; 32
    1ba2:	92 e0       	ldi	r25, 0x02	; 2
    1ba4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    for (int uiCount = 0; uiCount < 10; uiCount++)
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ed 5c       	subi	r30, 0xCD	; 205
    1bac:	fe 4f       	sbci	r31, 0xFE	; 254
    1bae:	11 82       	std	Z+1, r1	; 0x01
    1bb0:	10 82       	st	Z, r1
    1bb2:	0f c1       	rjmp	.+542    	; 0x1dd2 <main+0x2fc>
    {
      SetColor(0xFF, 0x00, 0x00, 0x00);
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	ed 5b       	subi	r30, 0xBD	; 189
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a0 ea       	ldi	r26, 0xA0	; 160
    1bcc:	b1 e4       	ldi	r27, 0x41	; 65
    1bce:	80 83       	st	Z, r24
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	a2 83       	std	Z+2, r26	; 0x02
    1bd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd6:	8e 01       	movw	r16, r28
    1bd8:	01 5c       	subi	r16, 0xC1	; 193
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	fe 01       	movw	r30, r28
    1bde:	ed 5b       	subi	r30, 0xBD	; 189
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	60 81       	ld	r22, Z
    1be4:	71 81       	ldd	r23, Z+1	; 0x01
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	93 81       	ldd	r25, Z+3	; 0x03
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a e7       	ldi	r20, 0x7A	; 122
    1bf0:	55 e4       	ldi	r21, 0x45	; 69
    1bf2:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	80 83       	st	Z, r24
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	a2 83       	std	Z+2, r26	; 0x02
    1c02:	b3 83       	std	Z+3, r27	; 0x03
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
    1c04:	fe 01       	movw	r30, r28
    1c06:	ff 96       	adiw	r30, 0x3f	; 63
    1c08:	60 81       	ld	r22, Z
    1c0a:	71 81       	ldd	r23, Z+1	; 0x01
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <main+0x154>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9e af       	std	Y+62, r25	; 0x3e
    1c26:	8d af       	std	Y+61, r24	; 0x3d
    1c28:	46 c0       	rjmp	.+140    	; 0x1cb6 <main+0x1e0>
	else if (__tmp > 65535)
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	ff 96       	adiw	r30, 0x3f	; 63
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 9d 23 	call	0x473a	; 0x473a <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	64 f5       	brge	.+88     	; 0x1c9e <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c46:	fe 01       	movw	r30, r28
    1c48:	ed 5b       	subi	r30, 0xBD	; 189
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	60 81       	ld	r22, Z
    1c4e:	71 81       	ldd	r23, Z+1	; 0x01
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e af       	std	Y+62, r25	; 0x3e
    1c72:	8d af       	std	Y+61, r24	; 0x3d
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <main+0x1be>
    1c76:	80 e9       	ldi	r24, 0x90	; 144
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	9c af       	std	Y+60, r25	; 0x3c
    1c7c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c7e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c80:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <main+0x1ac>
    1c86:	9c af       	std	Y+60, r25	; 0x3c
    1c88:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	9e af       	std	Y+62, r25	; 0x3e
    1c92:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c94:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	69 f7       	brne	.-38     	; 0x1c76 <main+0x1a0>
    1c9c:	16 c0       	rjmp	.+44     	; 0x1cca <main+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ff 96       	adiw	r30, 0x3f	; 63
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9e af       	std	Y+62, r25	; 0x3e
    1cb4:	8d af       	std	Y+61, r24	; 0x3d
    1cb6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cba:	9a af       	std	Y+58, r25	; 0x3a
    1cbc:	89 af       	std	Y+57, r24	; 0x39
    1cbe:	89 ad       	ldd	r24, Y+57	; 0x39
    1cc0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <main+0x1ec>
    1cc6:	9a af       	std	Y+58, r25	; 0x3a
    1cc8:	89 af       	std	Y+57, r24	; 0x39
      _delay_ms(20);
      SetColor(0xFF, 0xff, 0xff, 0xff);
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	6f ef       	ldi	r22, 0xFF	; 255
    1cce:	4f ef       	ldi	r20, 0xFF	; 255
    1cd0:	2f ef       	ldi	r18, 0xFF	; 255
    1cd2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 ea       	ldi	r26, 0xA0	; 160
    1cdc:	b1 e4       	ldi	r27, 0x41	; 65
    1cde:	8d ab       	std	Y+53, r24	; 0x35
    1ce0:	9e ab       	std	Y+54, r25	; 0x36
    1ce2:	af ab       	std	Y+55, r26	; 0x37
    1ce4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cea:	8f a9       	ldd	r24, Y+55	; 0x37
    1cec:	98 ad       	ldd	r25, Y+56	; 0x38
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a e7       	ldi	r20, 0x7A	; 122
    1cf4:	55 e4       	ldi	r21, 0x45	; 69
    1cf6:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	89 ab       	std	Y+49, r24	; 0x31
    1d00:	9a ab       	std	Y+50, r25	; 0x32
    1d02:	ab ab       	std	Y+51, r26	; 0x33
    1d04:	bc ab       	std	Y+52, r27	; 0x34
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
    1d06:	69 a9       	ldd	r22, Y+49	; 0x31
    1d08:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <main+0x252>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	98 ab       	std	Y+48, r25	; 0x30
    1d24:	8f a7       	std	Y+47, r24	; 0x2f
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <main+0x2d0>
	else if (__tmp > 65535)
    1d28:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 9d 23 	call	0x473a	; 0x473a <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <main+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	6d a9       	ldd	r22, Y+53	; 0x35
    1d42:	7e a9       	ldd	r23, Y+54	; 0x36
    1d44:	8f a9       	ldd	r24, Y+55	; 0x37
    1d46:	98 ad       	ldd	r25, Y+56	; 0x38
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	98 ab       	std	Y+48, r25	; 0x30
    1d66:	8f a7       	std	Y+47, r24	; 0x2f
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <main+0x2b2>
    1d6a:	80 e9       	ldi	r24, 0x90	; 144
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	9e a7       	std	Y+46, r25	; 0x2e
    1d70:	8d a7       	std	Y+45, r24	; 0x2d
    1d72:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d74:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <main+0x2a0>
    1d7a:	9e a7       	std	Y+46, r25	; 0x2e
    1d7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d80:	98 a9       	ldd	r25, Y+48	; 0x30
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	98 ab       	std	Y+48, r25	; 0x30
    1d86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <main+0x294>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <main+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	69 a9       	ldd	r22, Y+49	; 0x31
    1d94:	7a a9       	ldd	r23, Y+50	; 0x32
    1d96:	8b a9       	ldd	r24, Y+51	; 0x33
    1d98:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9a:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	98 ab       	std	Y+48, r25	; 0x30
    1da4:	8f a7       	std	Y+47, r24	; 0x2f
    1da6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da8:	98 a9       	ldd	r25, Y+48	; 0x30
    1daa:	9c a7       	std	Y+44, r25	; 0x2c
    1dac:	8b a7       	std	Y+43, r24	; 0x2b
    1dae:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <main+0x2dc>
    1db6:	9c a7       	std	Y+44, r25	; 0x2c
    1db8:	8b a7       	std	Y+43, r24	; 0x2b
  uint8_t i2c_errorcode;
  uint8_t i2c_status;
  if (!i2c_rtc_init(&i2c_errorcode, &i2c_status)) // initialize rtc
  {
    uartPuts(" FAILED !!!\r\n");
    for (int uiCount = 0; uiCount < 10; uiCount++)
    1dba:	de 01       	movw	r26, r28
    1dbc:	ad 5c       	subi	r26, 0xCD	; 205
    1dbe:	be 4f       	sbci	r27, 0xFE	; 254
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ed 5c       	subi	r30, 0xCD	; 205
    1dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc6:	80 81       	ld	r24, Z
    1dc8:	91 81       	ldd	r25, Z+1	; 0x01
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	11 96       	adiw	r26, 0x01	; 1
    1dce:	9c 93       	st	X, r25
    1dd0:	8e 93       	st	-X, r24
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ed 5c       	subi	r30, 0xCD	; 205
    1dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	8a 30       	cpi	r24, 0x0A	; 10
    1dde:	91 05       	cpc	r25, r1
    1de0:	0c f4       	brge	.+2      	; 0x1de4 <main+0x30e>
    1de2:	e8 ce       	rjmp	.-560    	; 0x1bb4 <main+0xde>
      SetColor(0xFF, 0xff, 0xff, 0xff);
      _delay_ms(20);
    }
  }

  SetColor(0xFF, 0xFF, 0xFF, 0xFF);
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	6f ef       	ldi	r22, 0xFF	; 255
    1de8:	4f ef       	ldi	r20, 0xFF	; 255
    1dea:	2f ef       	ldi	r18, 0xFF	; 255
    1dec:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>
  sei();
    1df0:	78 94       	sei

  uartPuts("\r\nReady...\r\n");
    1df2:	8e e2       	ldi	r24, 0x2E	; 46
    1df4:	92 e0       	ldi	r25, 0x02	; 2
    1df6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>

  int uiR = 0x00;
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e7 5b       	subi	r30, 0xB7	; 183
    1dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1e00:	11 82       	std	Z+1, r1	; 0x01
    1e02:	10 82       	st	Z, r1
  int uiG = 0x00;
    1e04:	fe 01       	movw	r30, r28
    1e06:	e9 5b       	subi	r30, 0xB9	; 185
    1e08:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0a:	11 82       	std	Z+1, r1	; 0x01
    1e0c:	10 82       	st	Z, r1
  int uiB = 0x00;
    1e0e:	fe 01       	movw	r30, r28
    1e10:	eb 5b       	subi	r30, 0xBB	; 187
    1e12:	fe 4f       	sbci	r31, 0xFE	; 254
    1e14:	11 82       	std	Z+1, r1	; 0x01
    1e16:	10 82       	st	Z, r1
  int uiRGB = 1;
    1e18:	fe 01       	movw	r30, r28
    1e1a:	ed 5b       	subi	r30, 0xBD	; 189
    1e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24

  uint8_t uiBrightControl = 1;
    1e26:	fe 01       	movw	r30, r28
    1e28:	e9 59       	subi	r30, 0x99	; 153
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	80 83       	st	Z, r24
  read_byte(cBrightControl, &uiBrightControl);
    1e30:	9e 01       	movw	r18, r28
    1e32:	29 59       	subi	r18, 0x99	; 153
    1e34:	3e 4f       	sbci	r19, 0xFE	; 254
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	b9 01       	movw	r22, r18
    1e3a:	0e 94 28 02 	call	0x450	; 0x450 <read_byte>

  unsigned long lLEDs_LastValue = 0;
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e1 5c       	subi	r30, 0xC1	; 193
    1e42:	fe 4f       	sbci	r31, 0xFE	; 254
    1e44:	10 82       	st	Z, r1
    1e46:	11 82       	std	Z+1, r1	; 0x01
    1e48:	12 82       	std	Z+2, r1	; 0x02
    1e4a:	13 82       	std	Z+3, r1	; 0x03

  int uiCount = 0;
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e3 5c       	subi	r30, 0xC3	; 195
    1e50:	fe 4f       	sbci	r31, 0xFE	; 254
    1e52:	11 82       	std	Z+1, r1	; 0x01
    1e54:	10 82       	st	Z, r1

  uint16_t Button1 = 0;
    1e56:	fe 01       	movw	r30, r28
    1e58:	e5 5c       	subi	r30, 0xC5	; 197
    1e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5c:	11 82       	std	Z+1, r1	; 0x01
    1e5e:	10 82       	st	Z, r1
  uint16_t Button2 = 0;
    1e60:	fe 01       	movw	r30, r28
    1e62:	e7 5c       	subi	r30, 0xC7	; 199
    1e64:	fe 4f       	sbci	r31, 0xFE	; 254
    1e66:	11 82       	std	Z+1, r1	; 0x01
    1e68:	10 82       	st	Z, r1

  unsigned long XXX = 0xaaaaaaaa;
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	eb 5c       	subi	r30, 0xCB	; 203
    1e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e70:	8a ea       	ldi	r24, 0xAA	; 170
    1e72:	9a ea       	ldi	r25, 0xAA	; 170
    1e74:	aa ea       	ldi	r26, 0xAA	; 170
    1e76:	ba ea       	ldi	r27, 0xAA	; 170
    1e78:	80 83       	st	Z, r24
    1e7a:	91 83       	std	Z+1, r25	; 0x01
    1e7c:	a2 83       	std	Z+2, r26	; 0x02
    1e7e:	b3 83       	std	Z+3, r27	; 0x03
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e2       	ldi	r26, 0x20	; 32
    1e86:	b1 e4       	ldi	r27, 0x41	; 65
    1e88:	8f a3       	std	Y+39, r24	; 0x27
    1e8a:	98 a7       	std	Y+40, r25	; 0x28
    1e8c:	a9 a7       	std	Y+41, r26	; 0x29
    1e8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6f a1       	ldd	r22, Y+39	; 0x27
    1e92:	78 a5       	ldd	r23, Y+40	; 0x28
    1e94:	89 a5       	ldd	r24, Y+41	; 0x29
    1e96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a e7       	ldi	r20, 0x7A	; 122
    1e9e:	55 e4       	ldi	r21, 0x45	; 69
    1ea0:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8b a3       	std	Y+35, r24	; 0x23
    1eaa:	9c a3       	std	Y+36, r25	; 0x24
    1eac:	ad a3       	std	Y+37, r26	; 0x25
    1eae:	be a3       	std	Y+38, r27	; 0x26
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
    1eb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <main+0x3fc>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9a a3       	std	Y+34, r25	; 0x22
    1ece:	89 a3       	std	Y+33, r24	; 0x21
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <main+0x47a>
	else if (__tmp > 65535)
    1ed2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 9d 23 	call	0x473a	; 0x473a <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	4c f5       	brge	.+82     	; 0x1f3c <main+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	6f a1       	ldd	r22, Y+39	; 0x27
    1eec:	78 a5       	ldd	r23, Y+40	; 0x28
    1eee:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9a a3       	std	Y+34, r25	; 0x22
    1f10:	89 a3       	std	Y+33, r24	; 0x21
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <main+0x45c>
    1f14:	80 e9       	ldi	r24, 0x90	; 144
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	98 a3       	std	Y+32, r25	; 0x20
    1f1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <main+0x44a>
    1f24:	98 a3       	std	Y+32, r25	; 0x20
    1f26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9a a3       	std	Y+34, r25	; 0x22
    1f30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	89 a1       	ldd	r24, Y+33	; 0x21
    1f34:	9a a1       	ldd	r25, Y+34	; 0x22
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <main+0x43e>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <main+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f40:	8d a1       	ldd	r24, Y+37	; 0x25
    1f42:	9e a1       	ldd	r25, Y+38	; 0x26
    1f44:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
    1f50:	89 a1       	ldd	r24, Y+33	; 0x21
    1f52:	9a a1       	ldd	r25, Y+34	; 0x22
    1f54:	9e 8f       	std	Y+30, r25	; 0x1e
    1f56:	8d 8f       	std	Y+29, r24	; 0x1d
    1f58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <main+0x486>
    1f60:	9e 8f       	std	Y+30, r25	; 0x1e
    1f62:	8d 8f       	std	Y+29, r24	; 0x1d

  while (1)
  {

    _delay_ms(10);
    uiCount++;
    1f64:	de 01       	movw	r26, r28
    1f66:	a3 5c       	subi	r26, 0xC3	; 195
    1f68:	be 4f       	sbci	r27, 0xFE	; 254
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e3 5c       	subi	r30, 0xC3	; 195
    1f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f70:	80 81       	ld	r24, Z
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	01 96       	adiw	r24, 0x01	; 1
    1f76:	8d 93       	st	X+, r24
    1f78:	9c 93       	st	X, r25

    ldr_read();
    1f7a:	0e 94 a9 09 	call	0x1352	; 0x1352 <ldr_read>

    uint8_t uiBright = 0xff;
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ee 5c       	subi	r30, 0xCE	; 206
    1f82:	fe 4f       	sbci	r31, 0xFE	; 254
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	80 83       	st	Z, r24
    if (uiBrightControl != 0)
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e9 59       	subi	r30, 0x99	; 153
    1f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8e:	80 81       	ld	r24, Z
    1f90:	88 23       	and	r24, r24
    1f92:	31 f0       	breq	.+12     	; 0x1fa0 <main+0x4ca>
    {
      uiBright = ldr_get_brightness();
    1f94:	0e 94 94 09 	call	0x1328	; 0x1328 <ldr_get_brightness>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ee 5c       	subi	r30, 0xCE	; 206
    1f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9e:	80 83       	st	Z, r24
    }
    if (uiBright < 64)
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ee 5c       	subi	r30, 0xCE	; 206
    1fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 34       	cpi	r24, 0x40	; 64
    1faa:	50 f4       	brcc	.+20     	; 0x1fc0 <main+0x4ea>
    {
      uiBright = (uiBright >> 1) + 32;
    1fac:	fe 01       	movw	r30, r28
    1fae:	ee 5c       	subi	r30, 0xCE	; 206
    1fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb2:	80 81       	ld	r24, Z
    1fb4:	86 95       	lsr	r24
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	ee 5c       	subi	r30, 0xCE	; 206
    1fba:	fe 4f       	sbci	r31, 0xFE	; 254
    1fbc:	80 5e       	subi	r24, 0xE0	; 224
    1fbe:	80 83       	st	Z, r24
    }
    SetColor(uiBright, uiR, uiG, uiB);
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e7 5b       	subi	r30, 0xB7	; 183
    1fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc6:	20 81       	ld	r18, Z
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e9 5b       	subi	r30, 0xB9	; 185
    1fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fce:	30 81       	ld	r19, Z
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	eb 5b       	subi	r30, 0xBB	; 187
    1fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd6:	90 81       	ld	r25, Z
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ee 5c       	subi	r30, 0xCE	; 206
    1fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fde:	80 81       	ld	r24, Z
    1fe0:	62 2f       	mov	r22, r18
    1fe2:	43 2f       	mov	r20, r19
    1fe4:	29 2f       	mov	r18, r25
    1fe6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>

    if (uiCount % 10)
    1fea:	fe 01       	movw	r30, r28
    1fec:	e3 5c       	subi	r30, 0xC3	; 195
    1fee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	2a e0       	ldi	r18, 0x0A	; 10
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	b9 01       	movw	r22, r18
    1ffa:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	09 f0       	breq	.+2      	; 0x2004 <main+0x52e>
    2002:	3e cf       	rjmp	.-388    	; 0x1e80 <main+0x3aa>
    {
      continue;
    }

    if (uart_str_complete)
    2004:	80 91 d4 03 	lds	r24, 0x03D4
    2008:	88 23       	and	r24, r24
    200a:	09 f4       	brne	.+2      	; 0x200e <main+0x538>
    200c:	89 c5       	rjmp	.+2834   	; 0x2b20 <main+0x104a>
    {
      switch (uart_string[0])
    200e:	80 91 db 00 	lds	r24, 0x00DB
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	cb 5e       	subi	r28, 0xEB	; 235
    2018:	dd 4f       	sbci	r29, 0xFD	; 253
    201a:	39 83       	std	Y+1, r19	; 0x01
    201c:	28 83       	st	Y, r18
    201e:	c5 51       	subi	r28, 0x15	; 21
    2020:	d2 40       	sbci	r29, 0x02	; 2
    2022:	cb 5e       	subi	r28, 0xEB	; 235
    2024:	dd 4f       	sbci	r29, 0xFD	; 253
    2026:	88 81       	ld	r24, Y
    2028:	99 81       	ldd	r25, Y+1	; 0x01
    202a:	c5 51       	subi	r28, 0x15	; 21
    202c:	d2 40       	sbci	r29, 0x02	; 2
    202e:	82 36       	cpi	r24, 0x62	; 98
    2030:	91 05       	cpc	r25, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <main+0x560>
    2034:	84 c0       	rjmp	.+264    	; 0x213e <main+0x668>
    2036:	cb 5e       	subi	r28, 0xEB	; 235
    2038:	dd 4f       	sbci	r29, 0xFD	; 253
    203a:	e8 81       	ld	r30, Y
    203c:	f9 81       	ldd	r31, Y+1	; 0x01
    203e:	c5 51       	subi	r28, 0x15	; 21
    2040:	d2 40       	sbci	r29, 0x02	; 2
    2042:	e3 36       	cpi	r30, 0x63	; 99
    2044:	f1 05       	cpc	r31, r1
    2046:	0c f0       	brlt	.+2      	; 0x204a <main+0x574>
    2048:	47 c0       	rjmp	.+142    	; 0x20d8 <main+0x602>
    204a:	cb 5e       	subi	r28, 0xEB	; 235
    204c:	dd 4f       	sbci	r29, 0xFD	; 253
    204e:	28 81       	ld	r18, Y
    2050:	39 81       	ldd	r19, Y+1	; 0x01
    2052:	c5 51       	subi	r28, 0x15	; 21
    2054:	d2 40       	sbci	r29, 0x02	; 2
    2056:	24 34       	cpi	r18, 0x44	; 68
    2058:	31 05       	cpc	r19, r1
    205a:	09 f4       	brne	.+2      	; 0x205e <main+0x588>
    205c:	8f c3       	rjmp	.+1822   	; 0x277c <main+0xca6>
    205e:	cb 5e       	subi	r28, 0xEB	; 235
    2060:	dd 4f       	sbci	r29, 0xFD	; 253
    2062:	88 81       	ld	r24, Y
    2064:	99 81       	ldd	r25, Y+1	; 0x01
    2066:	c5 51       	subi	r28, 0x15	; 21
    2068:	d2 40       	sbci	r29, 0x02	; 2
    206a:	85 34       	cpi	r24, 0x45	; 69
    206c:	91 05       	cpc	r25, r1
    206e:	fc f4       	brge	.+62     	; 0x20ae <main+0x5d8>
    2070:	cb 5e       	subi	r28, 0xEB	; 235
    2072:	dd 4f       	sbci	r29, 0xFD	; 253
    2074:	e8 81       	ld	r30, Y
    2076:	f9 81       	ldd	r31, Y+1	; 0x01
    2078:	c5 51       	subi	r28, 0x15	; 21
    207a:	d2 40       	sbci	r29, 0x02	; 2
    207c:	ed 32       	cpi	r30, 0x2D	; 45
    207e:	f1 05       	cpc	r31, r1
    2080:	09 f4       	brne	.+2      	; 0x2084 <main+0x5ae>
    2082:	00 c2       	rjmp	.+1024   	; 0x2484 <main+0x9ae>
    2084:	cb 5e       	subi	r28, 0xEB	; 235
    2086:	dd 4f       	sbci	r29, 0xFD	; 253
    2088:	28 81       	ld	r18, Y
    208a:	39 81       	ldd	r19, Y+1	; 0x01
    208c:	c5 51       	subi	r28, 0x15	; 21
    208e:	d2 40       	sbci	r29, 0x02	; 2
    2090:	2f 33       	cpi	r18, 0x3F	; 63
    2092:	31 05       	cpc	r19, r1
    2094:	09 f4       	brne	.+2      	; 0x2098 <main+0x5c2>
    2096:	16 c5       	rjmp	.+2604   	; 0x2ac4 <main+0xfee>
    2098:	cb 5e       	subi	r28, 0xEB	; 235
    209a:	dd 4f       	sbci	r29, 0xFD	; 253
    209c:	88 81       	ld	r24, Y
    209e:	99 81       	ldd	r25, Y+1	; 0x01
    20a0:	c5 51       	subi	r28, 0x15	; 21
    20a2:	d2 40       	sbci	r29, 0x02	; 2
    20a4:	8b 32       	cpi	r24, 0x2B	; 43
    20a6:	91 05       	cpc	r25, r1
    20a8:	09 f4       	brne	.+2      	; 0x20ac <main+0x5d6>
    20aa:	cd c1       	rjmp	.+922    	; 0x2446 <main+0x970>
    20ac:	e9 c4       	rjmp	.+2514   	; 0x2a80 <main+0xfaa>
    20ae:	cb 5e       	subi	r28, 0xEB	; 235
    20b0:	dd 4f       	sbci	r29, 0xFD	; 253
    20b2:	e8 81       	ld	r30, Y
    20b4:	f9 81       	ldd	r31, Y+1	; 0x01
    20b6:	c5 51       	subi	r28, 0x15	; 21
    20b8:	d2 40       	sbci	r29, 0x02	; 2
    20ba:	ed 34       	cpi	r30, 0x4D	; 77
    20bc:	f1 05       	cpc	r31, r1
    20be:	09 f4       	brne	.+2      	; 0x20c2 <main+0x5ec>
    20c0:	de c3       	rjmp	.+1980   	; 0x287e <main+0xda8>
    20c2:	cb 5e       	subi	r28, 0xEB	; 235
    20c4:	dd 4f       	sbci	r29, 0xFD	; 253
    20c6:	28 81       	ld	r18, Y
    20c8:	39 81       	ldd	r19, Y+1	; 0x01
    20ca:	c5 51       	subi	r28, 0x15	; 21
    20cc:	d2 40       	sbci	r29, 0x02	; 2
    20ce:	29 35       	cpi	r18, 0x59	; 89
    20d0:	31 05       	cpc	r19, r1
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <main+0x600>
    20d4:	54 c4       	rjmp	.+2216   	; 0x297e <main+0xea8>
    20d6:	d4 c4       	rjmp	.+2472   	; 0x2a80 <main+0xfaa>
    20d8:	cb 5e       	subi	r28, 0xEB	; 235
    20da:	dd 4f       	sbci	r29, 0xFD	; 253
    20dc:	88 81       	ld	r24, Y
    20de:	99 81       	ldd	r25, Y+1	; 0x01
    20e0:	c5 51       	subi	r28, 0x15	; 21
    20e2:	d2 40       	sbci	r29, 0x02	; 2
    20e4:	88 36       	cpi	r24, 0x68	; 104
    20e6:	91 05       	cpc	r25, r1
    20e8:	09 f4       	brne	.+2      	; 0x20ec <main+0x616>
    20ea:	47 c2       	rjmp	.+1166   	; 0x257a <main+0xaa4>
    20ec:	cb 5e       	subi	r28, 0xEB	; 235
    20ee:	dd 4f       	sbci	r29, 0xFD	; 253
    20f0:	e8 81       	ld	r30, Y
    20f2:	f9 81       	ldd	r31, Y+1	; 0x01
    20f4:	c5 51       	subi	r28, 0x15	; 21
    20f6:	d2 40       	sbci	r29, 0x02	; 2
    20f8:	e9 36       	cpi	r30, 0x69	; 105
    20fa:	f1 05       	cpc	r31, r1
    20fc:	5c f4       	brge	.+22     	; 0x2114 <main+0x63e>
    20fe:	cb 5e       	subi	r28, 0xEB	; 235
    2100:	dd 4f       	sbci	r29, 0xFD	; 253
    2102:	28 81       	ld	r18, Y
    2104:	39 81       	ldd	r19, Y+1	; 0x01
    2106:	c5 51       	subi	r28, 0x15	; 21
    2108:	d2 40       	sbci	r29, 0x02	; 2
    210a:	23 36       	cpi	r18, 0x63	; 99
    210c:	31 05       	cpc	r19, r1
    210e:	09 f4       	brne	.+2      	; 0x2112 <main+0x63c>
    2110:	29 c1       	rjmp	.+594    	; 0x2364 <main+0x88e>
    2112:	b6 c4       	rjmp	.+2412   	; 0x2a80 <main+0xfaa>
    2114:	cb 5e       	subi	r28, 0xEB	; 235
    2116:	dd 4f       	sbci	r29, 0xFD	; 253
    2118:	88 81       	ld	r24, Y
    211a:	99 81       	ldd	r25, Y+1	; 0x01
    211c:	c5 51       	subi	r28, 0x15	; 21
    211e:	d2 40       	sbci	r29, 0x02	; 2
    2120:	8d 36       	cpi	r24, 0x6D	; 109
    2122:	91 05       	cpc	r25, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <main+0x652>
    2126:	aa c2       	rjmp	.+1364   	; 0x267c <main+0xba6>
    2128:	cb 5e       	subi	r28, 0xEB	; 235
    212a:	dd 4f       	sbci	r29, 0xFD	; 253
    212c:	e8 81       	ld	r30, Y
    212e:	f9 81       	ldd	r31, Y+1	; 0x01
    2130:	c5 51       	subi	r28, 0x15	; 21
    2132:	d2 40       	sbci	r29, 0x02	; 2
    2134:	ea 37       	cpi	r30, 0x7A	; 122
    2136:	f1 05       	cpc	r31, r1
    2138:	09 f4       	brne	.+2      	; 0x213c <main+0x666>
    213a:	c3 c1       	rjmp	.+902    	; 0x24c2 <main+0x9ec>
    213c:	a1 c4       	rjmp	.+2370   	; 0x2a80 <main+0xfaa>
//          TimeInfo(time);
        }
        break;
      case 'b':
        {
            switch (uart_string[1])
    213e:	80 91 dc 00 	lds	r24, 0x00DC
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	cd 5e       	subi	r28, 0xED	; 237
    2148:	dd 4f       	sbci	r29, 0xFD	; 253
    214a:	39 83       	std	Y+1, r19	; 0x01
    214c:	28 83       	st	Y, r18
    214e:	c3 51       	subi	r28, 0x13	; 19
    2150:	d2 40       	sbci	r29, 0x02	; 2
    2152:	cd 5e       	subi	r28, 0xED	; 237
    2154:	dd 4f       	sbci	r29, 0xFD	; 253
    2156:	88 81       	ld	r24, Y
    2158:	99 81       	ldd	r25, Y+1	; 0x01
    215a:	c3 51       	subi	r28, 0x13	; 19
    215c:	d2 40       	sbci	r29, 0x02	; 2
    215e:	8b 32       	cpi	r24, 0x2B	; 43
    2160:	91 05       	cpc	r25, r1
    2162:	59 f0       	breq	.+22     	; 0x217a <main+0x6a4>
    2164:	cd 5e       	subi	r28, 0xED	; 237
    2166:	dd 4f       	sbci	r29, 0xFD	; 253
    2168:	e8 81       	ld	r30, Y
    216a:	f9 81       	ldd	r31, Y+1	; 0x01
    216c:	c3 51       	subi	r28, 0x13	; 19
    216e:	d2 40       	sbci	r29, 0x02	; 2
    2170:	ed 32       	cpi	r30, 0x2D	; 45
    2172:	f1 05       	cpc	r31, r1
    2174:	09 f4       	brne	.+2      	; 0x2178 <main+0x6a2>
    2176:	4c c0       	rjmp	.+152    	; 0x2210 <main+0x73a>
    2178:	95 c0       	rjmp	.+298    	; 0x22a4 <main+0x7ce>
            {
            case '+':
              {
                  uiBrightControl = 1;
    217a:	fe 01       	movw	r30, r28
    217c:	e9 59       	subi	r30, 0x99	; 153
    217e:	fe 4f       	sbci	r31, 0xFE	; 254
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	80 83       	st	Z, r24
                  save_byte(cBrightControl, uiBrightControl);
    2184:	fe 01       	movw	r30, r28
    2186:	e9 59       	subi	r30, 0x99	; 153
    2188:	fe 4f       	sbci	r31, 0xFE	; 254
    218a:	90 81       	ld	r25, Z
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	69 2f       	mov	r22, r25
    2190:	0e 94 13 02 	call	0x426	; 0x426 <save_byte>
                  char s[100];
                  sprintf(s, "brightness control is %s\r\n", uiBrightControl != 0 ? "active" : "inactive");
    2194:	fe 01       	movw	r30, r28
    2196:	e9 59       	subi	r30, 0x99	; 153
    2198:	fe 4f       	sbci	r31, 0xFE	; 254
    219a:	80 81       	ld	r24, Z
    219c:	88 23       	and	r24, r24
    219e:	49 f0       	breq	.+18     	; 0x21b2 <main+0x6dc>
    21a0:	2b e3       	ldi	r18, 0x3B	; 59
    21a2:	32 e0       	ldi	r19, 0x02	; 2
    21a4:	cf 5e       	subi	r28, 0xEF	; 239
    21a6:	dd 4f       	sbci	r29, 0xFD	; 253
    21a8:	39 83       	std	Y+1, r19	; 0x01
    21aa:	28 83       	st	Y, r18
    21ac:	c1 51       	subi	r28, 0x11	; 17
    21ae:	d2 40       	sbci	r29, 0x02	; 2
    21b0:	08 c0       	rjmp	.+16     	; 0x21c2 <main+0x6ec>
    21b2:	82 e4       	ldi	r24, 0x42	; 66
    21b4:	92 e0       	ldi	r25, 0x02	; 2
    21b6:	cf 5e       	subi	r28, 0xEF	; 239
    21b8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ba:	99 83       	std	Y+1, r25	; 0x01
    21bc:	88 83       	st	Y, r24
    21be:	c1 51       	subi	r28, 0x11	; 17
    21c0:	d2 40       	sbci	r29, 0x02	; 2
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <main+0x6ee>
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <main+0x6f0>
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <main+0x6f2>
    21c8:	ed b7       	in	r30, 0x3d	; 61
    21ca:	fe b7       	in	r31, 0x3e	; 62
    21cc:	31 96       	adiw	r30, 0x01	; 1
    21ce:	ce 01       	movw	r24, r28
    21d0:	86 56       	subi	r24, 0x66	; 102
    21d2:	9e 4f       	sbci	r25, 0xFE	; 254
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
    21d8:	8b e4       	ldi	r24, 0x4B	; 75
    21da:	92 e0       	ldi	r25, 0x02	; 2
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	cf 5e       	subi	r28, 0xEF	; 239
    21e2:	dd 4f       	sbci	r29, 0xFD	; 253
    21e4:	28 81       	ld	r18, Y
    21e6:	39 81       	ldd	r19, Y+1	; 0x01
    21e8:	c1 51       	subi	r28, 0x11	; 17
    21ea:	d2 40       	sbci	r29, 0x02	; 2
    21ec:	35 83       	std	Z+5, r19	; 0x05
    21ee:	24 83       	std	Z+4, r18	; 0x04
    21f0:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    21f4:	8d b7       	in	r24, 0x3d	; 61
    21f6:	9e b7       	in	r25, 0x3e	; 62
    21f8:	06 96       	adiw	r24, 0x06	; 6
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	9e bf       	out	0x3e, r25	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	8d bf       	out	0x3d, r24	; 61
                  uartPuts(s);
    2204:	ce 01       	movw	r24, r28
    2206:	86 56       	subi	r24, 0x66	; 102
    2208:	9e 4f       	sbci	r25, 0xFE	; 254
    220a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    220e:	5a c4       	rjmp	.+2228   	; 0x2ac4 <main+0xfee>
              }
              break;
            case '-':
              {
                  uiBrightControl = 0;
    2210:	fe 01       	movw	r30, r28
    2212:	e9 59       	subi	r30, 0x99	; 153
    2214:	fe 4f       	sbci	r31, 0xFE	; 254
    2216:	10 82       	st	Z, r1
                  save_byte(cBrightControl, uiBrightControl);
    2218:	fe 01       	movw	r30, r28
    221a:	e9 59       	subi	r30, 0x99	; 153
    221c:	fe 4f       	sbci	r31, 0xFE	; 254
    221e:	90 81       	ld	r25, Z
    2220:	82 e0       	ldi	r24, 0x02	; 2
    2222:	69 2f       	mov	r22, r25
    2224:	0e 94 13 02 	call	0x426	; 0x426 <save_byte>
                  char s[100];
                  sprintf(s, "brightness control is %s\r\n", uiBrightControl != 0 ? "active" : "inactive");
    2228:	fe 01       	movw	r30, r28
    222a:	e9 59       	subi	r30, 0x99	; 153
    222c:	fe 4f       	sbci	r31, 0xFE	; 254
    222e:	80 81       	ld	r24, Z
    2230:	88 23       	and	r24, r24
    2232:	49 f0       	breq	.+18     	; 0x2246 <main+0x770>
    2234:	eb e3       	ldi	r30, 0x3B	; 59
    2236:	f2 e0       	ldi	r31, 0x02	; 2
    2238:	c1 5f       	subi	r28, 0xF1	; 241
    223a:	dd 4f       	sbci	r29, 0xFD	; 253
    223c:	f9 83       	std	Y+1, r31	; 0x01
    223e:	e8 83       	st	Y, r30
    2240:	cf 50       	subi	r28, 0x0F	; 15
    2242:	d2 40       	sbci	r29, 0x02	; 2
    2244:	08 c0       	rjmp	.+16     	; 0x2256 <main+0x780>
    2246:	22 e4       	ldi	r18, 0x42	; 66
    2248:	32 e0       	ldi	r19, 0x02	; 2
    224a:	c1 5f       	subi	r28, 0xF1	; 241
    224c:	dd 4f       	sbci	r29, 0xFD	; 253
    224e:	39 83       	std	Y+1, r19	; 0x01
    2250:	28 83       	st	Y, r18
    2252:	cf 50       	subi	r28, 0x0F	; 15
    2254:	d2 40       	sbci	r29, 0x02	; 2
    2256:	00 d0       	rcall	.+0      	; 0x2258 <main+0x782>
    2258:	00 d0       	rcall	.+0      	; 0x225a <main+0x784>
    225a:	00 d0       	rcall	.+0      	; 0x225c <main+0x786>
    225c:	ed b7       	in	r30, 0x3d	; 61
    225e:	fe b7       	in	r31, 0x3e	; 62
    2260:	31 96       	adiw	r30, 0x01	; 1
    2262:	ce 01       	movw	r24, r28
    2264:	86 56       	subi	r24, 0x66	; 102
    2266:	9e 4f       	sbci	r25, 0xFE	; 254
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
    226c:	8b e4       	ldi	r24, 0x4B	; 75
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	93 83       	std	Z+3, r25	; 0x03
    2272:	82 83       	std	Z+2, r24	; 0x02
    2274:	c1 5f       	subi	r28, 0xF1	; 241
    2276:	dd 4f       	sbci	r29, 0xFD	; 253
    2278:	88 81       	ld	r24, Y
    227a:	99 81       	ldd	r25, Y+1	; 0x01
    227c:	cf 50       	subi	r28, 0x0F	; 15
    227e:	d2 40       	sbci	r29, 0x02	; 2
    2280:	95 83       	std	Z+5, r25	; 0x05
    2282:	84 83       	std	Z+4, r24	; 0x04
    2284:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    2288:	ed b7       	in	r30, 0x3d	; 61
    228a:	fe b7       	in	r31, 0x3e	; 62
    228c:	36 96       	adiw	r30, 0x06	; 6
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	fe bf       	out	0x3e, r31	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	ed bf       	out	0x3d, r30	; 61
                  uartPuts(s);
    2298:	ce 01       	movw	r24, r28
    229a:	86 56       	subi	r24, 0x66	; 102
    229c:	9e 4f       	sbci	r25, 0xFE	; 254
    229e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    22a2:	10 c4       	rjmp	.+2080   	; 0x2ac4 <main+0xfee>
              }
              break;
            default:
              {
                  uiBrightControl = uiBrightControl != 0 ? 0 : 1;
    22a4:	fe 01       	movw	r30, r28
    22a6:	e9 59       	subi	r30, 0x99	; 153
    22a8:	fe 4f       	sbci	r31, 0xFE	; 254
    22aa:	80 81       	ld	r24, Z
    22ac:	c2 5f       	subi	r28, 0xF2	; 242
    22ae:	dd 4f       	sbci	r29, 0xFD	; 253
    22b0:	18 82       	st	Y, r1
    22b2:	ce 50       	subi	r28, 0x0E	; 14
    22b4:	d2 40       	sbci	r29, 0x02	; 2
    22b6:	88 23       	and	r24, r24
    22b8:	31 f4       	brne	.+12     	; 0x22c6 <main+0x7f0>
    22ba:	f1 e0       	ldi	r31, 0x01	; 1
    22bc:	c2 5f       	subi	r28, 0xF2	; 242
    22be:	dd 4f       	sbci	r29, 0xFD	; 253
    22c0:	f8 83       	st	Y, r31
    22c2:	ce 50       	subi	r28, 0x0E	; 14
    22c4:	d2 40       	sbci	r29, 0x02	; 2
    22c6:	fe 01       	movw	r30, r28
    22c8:	e9 59       	subi	r30, 0x99	; 153
    22ca:	fe 4f       	sbci	r31, 0xFE	; 254
    22cc:	c2 5f       	subi	r28, 0xF2	; 242
    22ce:	dd 4f       	sbci	r29, 0xFD	; 253
    22d0:	28 81       	ld	r18, Y
    22d2:	ce 50       	subi	r28, 0x0E	; 14
    22d4:	d2 40       	sbci	r29, 0x02	; 2
    22d6:	20 83       	st	Z, r18
                  save_byte(cBrightControl, uiBrightControl);
    22d8:	fe 01       	movw	r30, r28
    22da:	e9 59       	subi	r30, 0x99	; 153
    22dc:	fe 4f       	sbci	r31, 0xFE	; 254
    22de:	90 81       	ld	r25, Z
    22e0:	82 e0       	ldi	r24, 0x02	; 2
    22e2:	69 2f       	mov	r22, r25
    22e4:	0e 94 13 02 	call	0x426	; 0x426 <save_byte>
                  char s[100];
                  sprintf(s, "brightness control is %s\r\n", uiBrightControl != 0 ? "active" : "inactive");
    22e8:	fe 01       	movw	r30, r28
    22ea:	e9 59       	subi	r30, 0x99	; 153
    22ec:	fe 4f       	sbci	r31, 0xFE	; 254
    22ee:	80 81       	ld	r24, Z
    22f0:	88 23       	and	r24, r24
    22f2:	49 f0       	breq	.+18     	; 0x2306 <main+0x830>
    22f4:	8b e3       	ldi	r24, 0x3B	; 59
    22f6:	92 e0       	ldi	r25, 0x02	; 2
    22f8:	c4 5f       	subi	r28, 0xF4	; 244
    22fa:	dd 4f       	sbci	r29, 0xFD	; 253
    22fc:	99 83       	std	Y+1, r25	; 0x01
    22fe:	88 83       	st	Y, r24
    2300:	cc 50       	subi	r28, 0x0C	; 12
    2302:	d2 40       	sbci	r29, 0x02	; 2
    2304:	08 c0       	rjmp	.+16     	; 0x2316 <main+0x840>
    2306:	e2 e4       	ldi	r30, 0x42	; 66
    2308:	f2 e0       	ldi	r31, 0x02	; 2
    230a:	c4 5f       	subi	r28, 0xF4	; 244
    230c:	dd 4f       	sbci	r29, 0xFD	; 253
    230e:	f9 83       	std	Y+1, r31	; 0x01
    2310:	e8 83       	st	Y, r30
    2312:	cc 50       	subi	r28, 0x0C	; 12
    2314:	d2 40       	sbci	r29, 0x02	; 2
    2316:	00 d0       	rcall	.+0      	; 0x2318 <main+0x842>
    2318:	00 d0       	rcall	.+0      	; 0x231a <main+0x844>
    231a:	00 d0       	rcall	.+0      	; 0x231c <main+0x846>
    231c:	ed b7       	in	r30, 0x3d	; 61
    231e:	fe b7       	in	r31, 0x3e	; 62
    2320:	31 96       	adiw	r30, 0x01	; 1
    2322:	ce 01       	movw	r24, r28
    2324:	86 56       	subi	r24, 0x66	; 102
    2326:	9e 4f       	sbci	r25, 0xFE	; 254
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	8b e4       	ldi	r24, 0x4B	; 75
    232e:	92 e0       	ldi	r25, 0x02	; 2
    2330:	93 83       	std	Z+3, r25	; 0x03
    2332:	82 83       	std	Z+2, r24	; 0x02
    2334:	c4 5f       	subi	r28, 0xF4	; 244
    2336:	dd 4f       	sbci	r29, 0xFD	; 253
    2338:	28 81       	ld	r18, Y
    233a:	39 81       	ldd	r19, Y+1	; 0x01
    233c:	cc 50       	subi	r28, 0x0C	; 12
    233e:	d2 40       	sbci	r29, 0x02	; 2
    2340:	35 83       	std	Z+5, r19	; 0x05
    2342:	24 83       	std	Z+4, r18	; 0x04
    2344:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    2348:	8d b7       	in	r24, 0x3d	; 61
    234a:	9e b7       	in	r25, 0x3e	; 62
    234c:	06 96       	adiw	r24, 0x06	; 6
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	9e bf       	out	0x3e, r25	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	8d bf       	out	0x3d, r24	; 61
                  uartPuts(s);
    2358:	ce 01       	movw	r24, r28
    235a:	86 56       	subi	r24, 0x66	; 102
    235c:	9e 4f       	sbci	r25, 0xFE	; 254
    235e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    2362:	b0 c3       	rjmp	.+1888   	; 0x2ac4 <main+0xfee>
            }
        }
        break;
      case 'c':
        {
          int r = hex2dez((char*) &uart_string[1]);
    2364:	8c ed       	ldi	r24, 0xDC	; 220
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <hex2dez>
    236c:	fe 01       	movw	r30, r28
    236e:	ed 5d       	subi	r30, 0xDD	; 221
    2370:	fe 4f       	sbci	r31, 0xFE	; 254
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	80 83       	st	Z, r24
          int g = hex2dez((char*) &uart_string[3]);
    2376:	8e ed       	ldi	r24, 0xDE	; 222
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <hex2dez>
    237e:	fe 01       	movw	r30, r28
    2380:	ef 5d       	subi	r30, 0xDF	; 223
    2382:	fe 4f       	sbci	r31, 0xFE	; 254
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	80 83       	st	Z, r24
          int b = hex2dez((char*) &uart_string[5]);
    2388:	80 ee       	ldi	r24, 0xE0	; 224
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <hex2dez>
    2390:	fe 01       	movw	r30, r28
    2392:	e1 5e       	subi	r30, 0xE1	; 225
    2394:	fe 4f       	sbci	r31, 0xFE	; 254
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
          if (r < 0 || g < 0 || b < 0)
    239a:	fe 01       	movw	r30, r28
    239c:	ed 5d       	subi	r30, 0xDD	; 221
    239e:	fe 4f       	sbci	r31, 0xFE	; 254
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
    23a4:	99 23       	and	r25, r25
    23a6:	74 f0       	brlt	.+28     	; 0x23c4 <main+0x8ee>
    23a8:	fe 01       	movw	r30, r28
    23aa:	ef 5d       	subi	r30, 0xDF	; 223
    23ac:	fe 4f       	sbci	r31, 0xFE	; 254
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	99 23       	and	r25, r25
    23b4:	3c f0       	brlt	.+14     	; 0x23c4 <main+0x8ee>
    23b6:	fe 01       	movw	r30, r28
    23b8:	e1 5e       	subi	r30, 0xE1	; 225
    23ba:	fe 4f       	sbci	r31, 0xFE	; 254
    23bc:	80 81       	ld	r24, Z
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	99 23       	and	r25, r25
    23c2:	44 f4       	brge	.+16     	; 0x23d4 <main+0x8fe>
          {
            uiRGB = 1;
    23c4:	fe 01       	movw	r30, r28
    23c6:	ed 5b       	subi	r30, 0xBD	; 189
    23c8:	fe 4f       	sbci	r31, 0xFE	; 254
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	91 83       	std	Z+1, r25	; 0x01
    23d0:	80 83       	st	Z, r24
    23d2:	78 c3       	rjmp	.+1776   	; 0x2ac4 <main+0xfee>
            break;
          }
          uiRGB = 0;
    23d4:	fe 01       	movw	r30, r28
    23d6:	ed 5b       	subi	r30, 0xBD	; 189
    23d8:	fe 4f       	sbci	r31, 0xFE	; 254
    23da:	11 82       	std	Z+1, r1	; 0x01
    23dc:	10 82       	st	Z, r1
          uiR = r;
    23de:	de 01       	movw	r26, r28
    23e0:	a7 5b       	subi	r26, 0xB7	; 183
    23e2:	be 4f       	sbci	r27, 0xFE	; 254
    23e4:	fe 01       	movw	r30, r28
    23e6:	ed 5d       	subi	r30, 0xDD	; 221
    23e8:	fe 4f       	sbci	r31, 0xFE	; 254
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	8d 93       	st	X+, r24
    23f0:	9c 93       	st	X, r25
          uiG = g;
    23f2:	de 01       	movw	r26, r28
    23f4:	a9 5b       	subi	r26, 0xB9	; 185
    23f6:	be 4f       	sbci	r27, 0xFE	; 254
    23f8:	fe 01       	movw	r30, r28
    23fa:	ef 5d       	subi	r30, 0xDF	; 223
    23fc:	fe 4f       	sbci	r31, 0xFE	; 254
    23fe:	80 81       	ld	r24, Z
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	8d 93       	st	X+, r24
    2404:	9c 93       	st	X, r25
          uiB = b;
    2406:	de 01       	movw	r26, r28
    2408:	ab 5b       	subi	r26, 0xBB	; 187
    240a:	be 4f       	sbci	r27, 0xFE	; 254
    240c:	fe 01       	movw	r30, r28
    240e:	e1 5e       	subi	r30, 0xE1	; 225
    2410:	fe 4f       	sbci	r31, 0xFE	; 254
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	8d 93       	st	X+, r24
    2418:	9c 93       	st	X, r25
          SetColor(uiBright, uiR, uiG, uiB);
    241a:	fe 01       	movw	r30, r28
    241c:	e7 5b       	subi	r30, 0xB7	; 183
    241e:	fe 4f       	sbci	r31, 0xFE	; 254
    2420:	20 81       	ld	r18, Z
    2422:	fe 01       	movw	r30, r28
    2424:	e9 5b       	subi	r30, 0xB9	; 185
    2426:	fe 4f       	sbci	r31, 0xFE	; 254
    2428:	30 81       	ld	r19, Z
    242a:	fe 01       	movw	r30, r28
    242c:	eb 5b       	subi	r30, 0xBB	; 187
    242e:	fe 4f       	sbci	r31, 0xFE	; 254
    2430:	90 81       	ld	r25, Z
    2432:	fe 01       	movw	r30, r28
    2434:	ee 5c       	subi	r30, 0xCE	; 206
    2436:	fe 4f       	sbci	r31, 0xFE	; 254
    2438:	80 81       	ld	r24, Z
    243a:	62 2f       	mov	r22, r18
    243c:	43 2f       	mov	r20, r19
    243e:	29 2f       	mov	r18, r25
    2440:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>
    2444:	3f c3       	rjmp	.+1662   	; 0x2ac4 <main+0xfee>
        }
        break;
      case '+':
        {
          int res = i2c_rtc_read(&time, 0);
    2446:	ce 01       	movw	r24, r28
    2448:	85 5b       	subi	r24, 0xB5	; 181
    244a:	9e 4f       	sbci	r25, 0xFE	; 254
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2452:	fe 01       	movw	r30, r28
    2454:	e3 5e       	subi	r30, 0xE3	; 227
    2456:	fe 4f       	sbci	r31, 0xFE	; 254
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
          add_minute(&time);
    2460:	ce 01       	movw	r24, r28
    2462:	85 5b       	subi	r24, 0xB5	; 181
    2464:	9e 4f       	sbci	r25, 0xFE	; 254
    2466:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <add_minute>
          res = i2c_rtc_write(&time);
    246a:	ce 01       	movw	r24, r28
    246c:	85 5b       	subi	r24, 0xB5	; 181
    246e:	9e 4f       	sbci	r25, 0xFE	; 254
    2470:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    2474:	fe 01       	movw	r30, r28
    2476:	e3 5e       	subi	r30, 0xE3	; 227
    2478:	fe 4f       	sbci	r31, 0xFE	; 254
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	80 83       	st	Z, r24
    2482:	20 c3       	rjmp	.+1600   	; 0x2ac4 <main+0xfee>
        }
        break;
      case '-':
        {
          int res = i2c_rtc_read(&time, 0);
    2484:	ce 01       	movw	r24, r28
    2486:	85 5b       	subi	r24, 0xB5	; 181
    2488:	9e 4f       	sbci	r25, 0xFE	; 254
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2490:	fe 01       	movw	r30, r28
    2492:	e5 5e       	subi	r30, 0xE5	; 229
    2494:	fe 4f       	sbci	r31, 0xFE	; 254
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
          sub_minute(&time);
    249e:	ce 01       	movw	r24, r28
    24a0:	85 5b       	subi	r24, 0xB5	; 181
    24a2:	9e 4f       	sbci	r25, 0xFE	; 254
    24a4:	0e 94 07 05 	call	0xa0e	; 0xa0e <sub_minute>
          res = i2c_rtc_write(&time);
    24a8:	ce 01       	movw	r24, r28
    24aa:	85 5b       	subi	r24, 0xB5	; 181
    24ac:	9e 4f       	sbci	r25, 0xFE	; 254
    24ae:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e5 5e       	subi	r30, 0xE5	; 229
    24b6:	fe 4f       	sbci	r31, 0xFE	; 254
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
    24c0:	01 c3       	rjmp	.+1538   	; 0x2ac4 <main+0xfee>
        }
        break;
      case 'z':
        switch (uart_string[1])
    24c2:	80 91 dc 00 	lds	r24, 0x00DC
    24c6:	e8 2f       	mov	r30, r24
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	c6 5f       	subi	r28, 0xF6	; 246
    24cc:	dd 4f       	sbci	r29, 0xFD	; 253
    24ce:	f9 83       	std	Y+1, r31	; 0x01
    24d0:	e8 83       	st	Y, r30
    24d2:	ca 50       	subi	r28, 0x0A	; 10
    24d4:	d2 40       	sbci	r29, 0x02	; 2
    24d6:	c6 5f       	subi	r28, 0xF6	; 246
    24d8:	dd 4f       	sbci	r29, 0xFD	; 253
    24da:	28 81       	ld	r18, Y
    24dc:	39 81       	ldd	r19, Y+1	; 0x01
    24de:	ca 50       	subi	r28, 0x0A	; 10
    24e0:	d2 40       	sbci	r29, 0x02	; 2
    24e2:	2b 32       	cpi	r18, 0x2B	; 43
    24e4:	31 05       	cpc	r19, r1
    24e6:	51 f0       	breq	.+20     	; 0x24fc <main+0xa26>
    24e8:	c6 5f       	subi	r28, 0xF6	; 246
    24ea:	dd 4f       	sbci	r29, 0xFD	; 253
    24ec:	88 81       	ld	r24, Y
    24ee:	99 81       	ldd	r25, Y+1	; 0x01
    24f0:	ca 50       	subi	r28, 0x0A	; 10
    24f2:	d2 40       	sbci	r29, 0x02	; 2
    24f4:	8d 32       	cpi	r24, 0x2D	; 45
    24f6:	91 05       	cpc	r25, r1
    24f8:	71 f0       	breq	.+28     	; 0x2516 <main+0xa40>
    24fa:	1a c0       	rjmp	.+52     	; 0x2530 <main+0xa5a>
        {
        case '+':
          {
            if (rtc_offset > 11)
    24fc:	80 91 8b 03 	lds	r24, 0x038B
    2500:	8c 30       	cpi	r24, 0x0C	; 12
    2502:	1c f0       	brlt	.+6      	; 0x250a <main+0xa34>
              rtc_offset = -13;
    2504:	83 ef       	ldi	r24, 0xF3	; 243
    2506:	80 93 8b 03 	sts	0x038B, r24
            set_offset(rtc_offset + 1);
    250a:	80 91 8b 03 	lds	r24, 0x038B
    250e:	8f 5f       	subi	r24, 0xFF	; 255
    2510:	0e 94 3f 02 	call	0x47e	; 0x47e <set_offset>
    2514:	d7 c2       	rjmp	.+1454   	; 0x2ac4 <main+0xfee>
          }
          break;
        case '-':
          {
            if (rtc_offset < 11)
    2516:	80 91 8b 03 	lds	r24, 0x038B
    251a:	8b 30       	cpi	r24, 0x0B	; 11
    251c:	1c f4       	brge	.+6      	; 0x2524 <main+0xa4e>
              rtc_offset = 13;
    251e:	8d e0       	ldi	r24, 0x0D	; 13
    2520:	80 93 8b 03 	sts	0x038B, r24
            set_offset(rtc_offset - 1);
    2524:	80 91 8b 03 	lds	r24, 0x038B
    2528:	81 50       	subi	r24, 0x01	; 1
    252a:	0e 94 3f 02 	call	0x47e	; 0x47e <set_offset>
    252e:	ca c2       	rjmp	.+1428   	; 0x2ac4 <main+0xfee>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "z macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    2530:	80 91 dc 00 	lds	r24, 0x00DC
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	00 d0       	rcall	.+0      	; 0x253a <main+0xa64>
    253a:	00 d0       	rcall	.+0      	; 0x253c <main+0xa66>
    253c:	00 d0       	rcall	.+0      	; 0x253e <main+0xa68>
    253e:	ed b7       	in	r30, 0x3d	; 61
    2540:	fe b7       	in	r31, 0x3e	; 62
    2542:	31 96       	adiw	r30, 0x01	; 1
    2544:	ce 01       	movw	r24, r28
    2546:	86 56       	subi	r24, 0x66	; 102
    2548:	9e 4f       	sbci	r25, 0xFE	; 254
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    254e:	86 e6       	ldi	r24, 0x66	; 102
    2550:	92 e0       	ldi	r25, 0x02	; 2
    2552:	93 83       	std	Z+3, r25	; 0x03
    2554:	82 83       	std	Z+2, r24	; 0x02
    2556:	35 83       	std	Z+5, r19	; 0x05
    2558:	24 83       	std	Z+4, r18	; 0x04
    255a:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    255e:	ed b7       	in	r30, 0x3d	; 61
    2560:	fe b7       	in	r31, 0x3e	; 62
    2562:	36 96       	adiw	r30, 0x06	; 6
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	fe bf       	out	0x3e, r31	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	ed bf       	out	0x3d, r30	; 61
            uartPuts(s);
    256e:	ce 01       	movw	r24, r28
    2570:	86 56       	subi	r24, 0x66	; 102
    2572:	9e 4f       	sbci	r25, 0xFE	; 254
    2574:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    2578:	a5 c2       	rjmp	.+1354   	; 0x2ac4 <main+0xfee>
          }
          break;
        }
        break;
      case 'h':
        switch (uart_string[1])
    257a:	80 91 dc 00 	lds	r24, 0x00DC
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	c8 5f       	subi	r28, 0xF8	; 248
    2584:	dd 4f       	sbci	r29, 0xFD	; 253
    2586:	39 83       	std	Y+1, r19	; 0x01
    2588:	28 83       	st	Y, r18
    258a:	c8 50       	subi	r28, 0x08	; 8
    258c:	d2 40       	sbci	r29, 0x02	; 2
    258e:	c8 5f       	subi	r28, 0xF8	; 248
    2590:	dd 4f       	sbci	r29, 0xFD	; 253
    2592:	88 81       	ld	r24, Y
    2594:	99 81       	ldd	r25, Y+1	; 0x01
    2596:	c8 50       	subi	r28, 0x08	; 8
    2598:	d2 40       	sbci	r29, 0x02	; 2
    259a:	8b 32       	cpi	r24, 0x2B	; 43
    259c:	91 05       	cpc	r25, r1
    259e:	51 f0       	breq	.+20     	; 0x25b4 <main+0xade>
    25a0:	c8 5f       	subi	r28, 0xF8	; 248
    25a2:	dd 4f       	sbci	r29, 0xFD	; 253
    25a4:	e8 81       	ld	r30, Y
    25a6:	f9 81       	ldd	r31, Y+1	; 0x01
    25a8:	c8 50       	subi	r28, 0x08	; 8
    25aa:	d2 40       	sbci	r29, 0x02	; 2
    25ac:	ed 32       	cpi	r30, 0x2D	; 45
    25ae:	f1 05       	cpc	r31, r1
    25b0:	01 f1       	breq	.+64     	; 0x25f2 <main+0xb1c>
    25b2:	3e c0       	rjmp	.+124    	; 0x2630 <main+0xb5a>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    25b4:	ce 01       	movw	r24, r28
    25b6:	85 5b       	subi	r24, 0xB5	; 181
    25b8:	9e 4f       	sbci	r25, 0xFE	; 254
    25ba:	60 e0       	ldi	r22, 0x00	; 0
    25bc:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    25c0:	fe 01       	movw	r30, r28
    25c2:	e7 5e       	subi	r30, 0xE7	; 231
    25c4:	fe 4f       	sbci	r31, 0xFE	; 254
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
            add_hour(&time);
    25ce:	ce 01       	movw	r24, r28
    25d0:	85 5b       	subi	r24, 0xB5	; 181
    25d2:	9e 4f       	sbci	r25, 0xFE	; 254
    25d4:	0e 94 a8 04 	call	0x950	; 0x950 <add_hour>
            res = i2c_rtc_write(&time);
    25d8:	ce 01       	movw	r24, r28
    25da:	85 5b       	subi	r24, 0xB5	; 181
    25dc:	9e 4f       	sbci	r25, 0xFE	; 254
    25de:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    25e2:	fe 01       	movw	r30, r28
    25e4:	e7 5e       	subi	r30, 0xE7	; 231
    25e6:	fe 4f       	sbci	r31, 0xFE	; 254
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
    25f0:	69 c2       	rjmp	.+1234   	; 0x2ac4 <main+0xfee>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    25f2:	ce 01       	movw	r24, r28
    25f4:	85 5b       	subi	r24, 0xB5	; 181
    25f6:	9e 4f       	sbci	r25, 0xFE	; 254
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    25fe:	fe 01       	movw	r30, r28
    2600:	e9 5e       	subi	r30, 0xE9	; 233
    2602:	fe 4f       	sbci	r31, 0xFE	; 254
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	80 83       	st	Z, r24
            sub_hour(&time);
    260c:	ce 01       	movw	r24, r28
    260e:	85 5b       	subi	r24, 0xB5	; 181
    2610:	9e 4f       	sbci	r25, 0xFE	; 254
    2612:	0e 94 c7 04 	call	0x98e	; 0x98e <sub_hour>
            res = i2c_rtc_write(&time);
    2616:	ce 01       	movw	r24, r28
    2618:	85 5b       	subi	r24, 0xB5	; 181
    261a:	9e 4f       	sbci	r25, 0xFE	; 254
    261c:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    2620:	fe 01       	movw	r30, r28
    2622:	e9 5e       	subi	r30, 0xE9	; 233
    2624:	fe 4f       	sbci	r31, 0xFE	; 254
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
    262e:	4a c2       	rjmp	.+1172   	; 0x2ac4 <main+0xfee>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "h macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    2630:	80 91 dc 00 	lds	r24, 0x00DC
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	00 d0       	rcall	.+0      	; 0x263a <main+0xb64>
    263a:	00 d0       	rcall	.+0      	; 0x263c <main+0xb66>
    263c:	00 d0       	rcall	.+0      	; 0x263e <main+0xb68>
    263e:	ed b7       	in	r30, 0x3d	; 61
    2640:	fe b7       	in	r31, 0x3e	; 62
    2642:	31 96       	adiw	r30, 0x01	; 1
    2644:	ce 01       	movw	r24, r28
    2646:	86 56       	subi	r24, 0x66	; 102
    2648:	9e 4f       	sbci	r25, 0xFE	; 254
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	80 83       	st	Z, r24
    264e:	88 e8       	ldi	r24, 0x88	; 136
    2650:	92 e0       	ldi	r25, 0x02	; 2
    2652:	93 83       	std	Z+3, r25	; 0x03
    2654:	82 83       	std	Z+2, r24	; 0x02
    2656:	35 83       	std	Z+5, r19	; 0x05
    2658:	24 83       	std	Z+4, r18	; 0x04
    265a:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    265e:	2d b7       	in	r18, 0x3d	; 61
    2660:	3e b7       	in	r19, 0x3e	; 62
    2662:	2a 5f       	subi	r18, 0xFA	; 250
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	3e bf       	out	0x3e, r19	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	2d bf       	out	0x3d, r18	; 61
            uartPuts(s);
    2670:	ce 01       	movw	r24, r28
    2672:	86 56       	subi	r24, 0x66	; 102
    2674:	9e 4f       	sbci	r25, 0xFE	; 254
    2676:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    267a:	24 c2       	rjmp	.+1096   	; 0x2ac4 <main+0xfee>
          }
          break;
        }
        break;
      case 'm':
        switch (uart_string[1])
    267c:	80 91 dc 00 	lds	r24, 0x00DC
    2680:	e8 2f       	mov	r30, r24
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	ca 5f       	subi	r28, 0xFA	; 250
    2686:	dd 4f       	sbci	r29, 0xFD	; 253
    2688:	f9 83       	std	Y+1, r31	; 0x01
    268a:	e8 83       	st	Y, r30
    268c:	c6 50       	subi	r28, 0x06	; 6
    268e:	d2 40       	sbci	r29, 0x02	; 2
    2690:	ca 5f       	subi	r28, 0xFA	; 250
    2692:	dd 4f       	sbci	r29, 0xFD	; 253
    2694:	28 81       	ld	r18, Y
    2696:	39 81       	ldd	r19, Y+1	; 0x01
    2698:	c6 50       	subi	r28, 0x06	; 6
    269a:	d2 40       	sbci	r29, 0x02	; 2
    269c:	2b 32       	cpi	r18, 0x2B	; 43
    269e:	31 05       	cpc	r19, r1
    26a0:	51 f0       	breq	.+20     	; 0x26b6 <main+0xbe0>
    26a2:	ca 5f       	subi	r28, 0xFA	; 250
    26a4:	dd 4f       	sbci	r29, 0xFD	; 253
    26a6:	88 81       	ld	r24, Y
    26a8:	99 81       	ldd	r25, Y+1	; 0x01
    26aa:	c6 50       	subi	r28, 0x06	; 6
    26ac:	d2 40       	sbci	r29, 0x02	; 2
    26ae:	8d 32       	cpi	r24, 0x2D	; 45
    26b0:	91 05       	cpc	r25, r1
    26b2:	01 f1       	breq	.+64     	; 0x26f4 <main+0xc1e>
    26b4:	3e c0       	rjmp	.+124    	; 0x2732 <main+0xc5c>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    26b6:	ce 01       	movw	r24, r28
    26b8:	85 5b       	subi	r24, 0xB5	; 181
    26ba:	9e 4f       	sbci	r25, 0xFE	; 254
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    26c2:	fe 01       	movw	r30, r28
    26c4:	eb 5e       	subi	r30, 0xEB	; 235
    26c6:	fe 4f       	sbci	r31, 0xFE	; 254
    26c8:	88 2f       	mov	r24, r24
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	80 83       	st	Z, r24
            add_minute(&time);
    26d0:	ce 01       	movw	r24, r28
    26d2:	85 5b       	subi	r24, 0xB5	; 181
    26d4:	9e 4f       	sbci	r25, 0xFE	; 254
    26d6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <add_minute>
            res = i2c_rtc_write(&time);
    26da:	ce 01       	movw	r24, r28
    26dc:	85 5b       	subi	r24, 0xB5	; 181
    26de:	9e 4f       	sbci	r25, 0xFE	; 254
    26e0:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    26e4:	fe 01       	movw	r30, r28
    26e6:	eb 5e       	subi	r30, 0xEB	; 235
    26e8:	fe 4f       	sbci	r31, 0xFE	; 254
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
    26f2:	e8 c1       	rjmp	.+976    	; 0x2ac4 <main+0xfee>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    26f4:	ce 01       	movw	r24, r28
    26f6:	85 5b       	subi	r24, 0xB5	; 181
    26f8:	9e 4f       	sbci	r25, 0xFE	; 254
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2700:	fe 01       	movw	r30, r28
    2702:	ed 5e       	subi	r30, 0xED	; 237
    2704:	fe 4f       	sbci	r31, 0xFE	; 254
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
            sub_minute(&time);
    270e:	ce 01       	movw	r24, r28
    2710:	85 5b       	subi	r24, 0xB5	; 181
    2712:	9e 4f       	sbci	r25, 0xFE	; 254
    2714:	0e 94 07 05 	call	0xa0e	; 0xa0e <sub_minute>
            res = i2c_rtc_write(&time);
    2718:	ce 01       	movw	r24, r28
    271a:	85 5b       	subi	r24, 0xB5	; 181
    271c:	9e 4f       	sbci	r25, 0xFE	; 254
    271e:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    2722:	fe 01       	movw	r30, r28
    2724:	ed 5e       	subi	r30, 0xED	; 237
    2726:	fe 4f       	sbci	r31, 0xFE	; 254
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	80 83       	st	Z, r24
    2730:	c9 c1       	rjmp	.+914    	; 0x2ac4 <main+0xfee>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "m macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    2732:	80 91 dc 00 	lds	r24, 0x00DC
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	00 d0       	rcall	.+0      	; 0x273c <main+0xc66>
    273c:	00 d0       	rcall	.+0      	; 0x273e <main+0xc68>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <main+0xc6a>
    2740:	ed b7       	in	r30, 0x3d	; 61
    2742:	fe b7       	in	r31, 0x3e	; 62
    2744:	31 96       	adiw	r30, 0x01	; 1
    2746:	ce 01       	movw	r24, r28
    2748:	86 56       	subi	r24, 0x66	; 102
    274a:	9e 4f       	sbci	r25, 0xFE	; 254
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	80 83       	st	Z, r24
    2750:	8a ea       	ldi	r24, 0xAA	; 170
    2752:	92 e0       	ldi	r25, 0x02	; 2
    2754:	93 83       	std	Z+3, r25	; 0x03
    2756:	82 83       	std	Z+2, r24	; 0x02
    2758:	35 83       	std	Z+5, r19	; 0x05
    275a:	24 83       	std	Z+4, r18	; 0x04
    275c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    2760:	ed b7       	in	r30, 0x3d	; 61
    2762:	fe b7       	in	r31, 0x3e	; 62
    2764:	36 96       	adiw	r30, 0x06	; 6
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	fe bf       	out	0x3e, r31	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	ed bf       	out	0x3d, r30	; 61
            uartPuts(s);
    2770:	ce 01       	movw	r24, r28
    2772:	86 56       	subi	r24, 0x66	; 102
    2774:	9e 4f       	sbci	r25, 0xFE	; 254
    2776:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    277a:	a4 c1       	rjmp	.+840    	; 0x2ac4 <main+0xfee>
          }
          break;
        }
        break;
      case 'D':
        switch (uart_string[1])
    277c:	80 91 dc 00 	lds	r24, 0x00DC
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	cc 5f       	subi	r28, 0xFC	; 252
    2786:	dd 4f       	sbci	r29, 0xFD	; 253
    2788:	39 83       	std	Y+1, r19	; 0x01
    278a:	28 83       	st	Y, r18
    278c:	c4 50       	subi	r28, 0x04	; 4
    278e:	d2 40       	sbci	r29, 0x02	; 2
    2790:	cc 5f       	subi	r28, 0xFC	; 252
    2792:	dd 4f       	sbci	r29, 0xFD	; 253
    2794:	88 81       	ld	r24, Y
    2796:	99 81       	ldd	r25, Y+1	; 0x01
    2798:	c4 50       	subi	r28, 0x04	; 4
    279a:	d2 40       	sbci	r29, 0x02	; 2
    279c:	8b 32       	cpi	r24, 0x2B	; 43
    279e:	91 05       	cpc	r25, r1
    27a0:	51 f0       	breq	.+20     	; 0x27b6 <main+0xce0>
    27a2:	cc 5f       	subi	r28, 0xFC	; 252
    27a4:	dd 4f       	sbci	r29, 0xFD	; 253
    27a6:	e8 81       	ld	r30, Y
    27a8:	f9 81       	ldd	r31, Y+1	; 0x01
    27aa:	c4 50       	subi	r28, 0x04	; 4
    27ac:	d2 40       	sbci	r29, 0x02	; 2
    27ae:	ed 32       	cpi	r30, 0x2D	; 45
    27b0:	f1 05       	cpc	r31, r1
    27b2:	01 f1       	breq	.+64     	; 0x27f4 <main+0xd1e>
    27b4:	3e c0       	rjmp	.+124    	; 0x2832 <main+0xd5c>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    27b6:	ce 01       	movw	r24, r28
    27b8:	85 5b       	subi	r24, 0xB5	; 181
    27ba:	9e 4f       	sbci	r25, 0xFE	; 254
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    27c2:	fe 01       	movw	r30, r28
    27c4:	ef 5e       	subi	r30, 0xEF	; 239
    27c6:	fe 4f       	sbci	r31, 0xFE	; 254
    27c8:	88 2f       	mov	r24, r24
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
            add_day(&time);
    27d0:	ce 01       	movw	r24, r28
    27d2:	85 5b       	subi	r24, 0xB5	; 181
    27d4:	9e 4f       	sbci	r25, 0xFE	; 254
    27d6:	0e 94 ce 03 	call	0x79c	; 0x79c <add_day>
            res = i2c_rtc_write(&time);
    27da:	ce 01       	movw	r24, r28
    27dc:	85 5b       	subi	r24, 0xB5	; 181
    27de:	9e 4f       	sbci	r25, 0xFE	; 254
    27e0:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    27e4:	fe 01       	movw	r30, r28
    27e6:	ef 5e       	subi	r30, 0xEF	; 239
    27e8:	fe 4f       	sbci	r31, 0xFE	; 254
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	68 c1       	rjmp	.+720    	; 0x2ac4 <main+0xfee>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    27f4:	ce 01       	movw	r24, r28
    27f6:	85 5b       	subi	r24, 0xB5	; 181
    27f8:	9e 4f       	sbci	r25, 0xFE	; 254
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2800:	fe 01       	movw	r30, r28
    2802:	e1 5f       	subi	r30, 0xF1	; 241
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	88 2f       	mov	r24, r24
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
            sub_day(&time);
    280e:	ce 01       	movw	r24, r28
    2810:	85 5b       	subi	r24, 0xB5	; 181
    2812:	9e 4f       	sbci	r25, 0xFE	; 254
    2814:	0e 94 3a 04 	call	0x874	; 0x874 <sub_day>
            res = i2c_rtc_write(&time);
    2818:	ce 01       	movw	r24, r28
    281a:	85 5b       	subi	r24, 0xB5	; 181
    281c:	9e 4f       	sbci	r25, 0xFE	; 254
    281e:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    2822:	fe 01       	movw	r30, r28
    2824:	e1 5f       	subi	r30, 0xF1	; 241
    2826:	fe 4f       	sbci	r31, 0xFE	; 254
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
    2830:	49 c1       	rjmp	.+658    	; 0x2ac4 <main+0xfee>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "D macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    2832:	80 91 dc 00 	lds	r24, 0x00DC
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	00 d0       	rcall	.+0      	; 0x283c <main+0xd66>
    283c:	00 d0       	rcall	.+0      	; 0x283e <main+0xd68>
    283e:	00 d0       	rcall	.+0      	; 0x2840 <main+0xd6a>
    2840:	ed b7       	in	r30, 0x3d	; 61
    2842:	fe b7       	in	r31, 0x3e	; 62
    2844:	31 96       	adiw	r30, 0x01	; 1
    2846:	ce 01       	movw	r24, r28
    2848:	86 56       	subi	r24, 0x66	; 102
    284a:	9e 4f       	sbci	r25, 0xFE	; 254
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
    2850:	8c ec       	ldi	r24, 0xCC	; 204
    2852:	92 e0       	ldi	r25, 0x02	; 2
    2854:	93 83       	std	Z+3, r25	; 0x03
    2856:	82 83       	std	Z+2, r24	; 0x02
    2858:	35 83       	std	Z+5, r19	; 0x05
    285a:	24 83       	std	Z+4, r18	; 0x04
    285c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    2860:	2d b7       	in	r18, 0x3d	; 61
    2862:	3e b7       	in	r19, 0x3e	; 62
    2864:	2a 5f       	subi	r18, 0xFA	; 250
    2866:	3f 4f       	sbci	r19, 0xFF	; 255
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	3e bf       	out	0x3e, r19	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	2d bf       	out	0x3d, r18	; 61
            uartPuts(s);
    2872:	ce 01       	movw	r24, r28
    2874:	86 56       	subi	r24, 0x66	; 102
    2876:	9e 4f       	sbci	r25, 0xFE	; 254
    2878:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    287c:	23 c1       	rjmp	.+582    	; 0x2ac4 <main+0xfee>
          }
          break;
        }
        break;
      case 'M':
        switch (uart_string[1])
    287e:	80 91 dc 00 	lds	r24, 0x00DC
    2882:	e8 2f       	mov	r30, r24
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	ce 5f       	subi	r28, 0xFE	; 254
    2888:	dd 4f       	sbci	r29, 0xFD	; 253
    288a:	f9 83       	std	Y+1, r31	; 0x01
    288c:	e8 83       	st	Y, r30
    288e:	c2 50       	subi	r28, 0x02	; 2
    2890:	d2 40       	sbci	r29, 0x02	; 2
    2892:	ce 5f       	subi	r28, 0xFE	; 254
    2894:	dd 4f       	sbci	r29, 0xFD	; 253
    2896:	28 81       	ld	r18, Y
    2898:	39 81       	ldd	r19, Y+1	; 0x01
    289a:	c2 50       	subi	r28, 0x02	; 2
    289c:	d2 40       	sbci	r29, 0x02	; 2
    289e:	2b 32       	cpi	r18, 0x2B	; 43
    28a0:	31 05       	cpc	r19, r1
    28a2:	51 f0       	breq	.+20     	; 0x28b8 <main+0xde2>
    28a4:	ce 5f       	subi	r28, 0xFE	; 254
    28a6:	dd 4f       	sbci	r29, 0xFD	; 253
    28a8:	88 81       	ld	r24, Y
    28aa:	99 81       	ldd	r25, Y+1	; 0x01
    28ac:	c2 50       	subi	r28, 0x02	; 2
    28ae:	d2 40       	sbci	r29, 0x02	; 2
    28b0:	8d 32       	cpi	r24, 0x2D	; 45
    28b2:	91 05       	cpc	r25, r1
    28b4:	01 f1       	breq	.+64     	; 0x28f6 <main+0xe20>
    28b6:	3e c0       	rjmp	.+124    	; 0x2934 <main+0xe5e>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    28b8:	ce 01       	movw	r24, r28
    28ba:	85 5b       	subi	r24, 0xB5	; 181
    28bc:	9e 4f       	sbci	r25, 0xFE	; 254
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    28c4:	fe 01       	movw	r30, r28
    28c6:	e3 5f       	subi	r30, 0xF3	; 243
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	80 83       	st	Z, r24
            add_month(&time);
    28d2:	ce 01       	movw	r24, r28
    28d4:	85 5b       	subi	r24, 0xB5	; 181
    28d6:	9e 4f       	sbci	r25, 0xFE	; 254
    28d8:	0e 94 8e 03 	call	0x71c	; 0x71c <add_month>
            res = i2c_rtc_write(&time);
    28dc:	ce 01       	movw	r24, r28
    28de:	85 5b       	subi	r24, 0xB5	; 181
    28e0:	9e 4f       	sbci	r25, 0xFE	; 254
    28e2:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    28e6:	fe 01       	movw	r30, r28
    28e8:	e3 5f       	subi	r30, 0xF3	; 243
    28ea:	fe 4f       	sbci	r31, 0xFE	; 254
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	80 83       	st	Z, r24
    28f4:	e7 c0       	rjmp	.+462    	; 0x2ac4 <main+0xfee>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    28f6:	ce 01       	movw	r24, r28
    28f8:	85 5b       	subi	r24, 0xB5	; 181
    28fa:	9e 4f       	sbci	r25, 0xFE	; 254
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2902:	fe 01       	movw	r30, r28
    2904:	e5 5f       	subi	r30, 0xF5	; 245
    2906:	fe 4f       	sbci	r31, 0xFE	; 254
    2908:	88 2f       	mov	r24, r24
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
            sub_month(&time);
    2910:	ce 01       	movw	r24, r28
    2912:	85 5b       	subi	r24, 0xB5	; 181
    2914:	9e 4f       	sbci	r25, 0xFE	; 254
    2916:	0e 94 ae 03 	call	0x75c	; 0x75c <sub_month>
            res = i2c_rtc_write(&time);
    291a:	ce 01       	movw	r24, r28
    291c:	85 5b       	subi	r24, 0xB5	; 181
    291e:	9e 4f       	sbci	r25, 0xFE	; 254
    2920:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    2924:	fe 01       	movw	r30, r28
    2926:	e5 5f       	subi	r30, 0xF5	; 245
    2928:	fe 4f       	sbci	r31, 0xFE	; 254
    292a:	88 2f       	mov	r24, r24
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	80 83       	st	Z, r24
    2932:	c8 c0       	rjmp	.+400    	; 0x2ac4 <main+0xfee>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "M macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    2934:	80 91 dc 00 	lds	r24, 0x00DC
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	00 d0       	rcall	.+0      	; 0x293e <main+0xe68>
    293e:	00 d0       	rcall	.+0      	; 0x2940 <main+0xe6a>
    2940:	00 d0       	rcall	.+0      	; 0x2942 <main+0xe6c>
    2942:	ed b7       	in	r30, 0x3d	; 61
    2944:	fe b7       	in	r31, 0x3e	; 62
    2946:	31 96       	adiw	r30, 0x01	; 1
    2948:	ce 01       	movw	r24, r28
    294a:	86 56       	subi	r24, 0x66	; 102
    294c:	9e 4f       	sbci	r25, 0xFE	; 254
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
    2952:	8e ee       	ldi	r24, 0xEE	; 238
    2954:	92 e0       	ldi	r25, 0x02	; 2
    2956:	93 83       	std	Z+3, r25	; 0x03
    2958:	82 83       	std	Z+2, r24	; 0x02
    295a:	35 83       	std	Z+5, r19	; 0x05
    295c:	24 83       	std	Z+4, r18	; 0x04
    295e:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    2962:	ed b7       	in	r30, 0x3d	; 61
    2964:	fe b7       	in	r31, 0x3e	; 62
    2966:	36 96       	adiw	r30, 0x06	; 6
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	fe bf       	out	0x3e, r31	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	ed bf       	out	0x3d, r30	; 61
            uartPuts(s);
    2972:	ce 01       	movw	r24, r28
    2974:	86 56       	subi	r24, 0x66	; 102
    2976:	9e 4f       	sbci	r25, 0xFE	; 254
    2978:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    297c:	a3 c0       	rjmp	.+326    	; 0x2ac4 <main+0xfee>
          }
          break;
        }
        break;
      case 'Y':
        switch (uart_string[1])
    297e:	80 91 dc 00 	lds	r24, 0x00DC
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	c0 50       	subi	r28, 0x00	; 0
    2988:	de 4f       	sbci	r29, 0xFE	; 254
    298a:	39 83       	std	Y+1, r19	; 0x01
    298c:	28 83       	st	Y, r18
    298e:	c0 50       	subi	r28, 0x00	; 0
    2990:	d2 40       	sbci	r29, 0x02	; 2
    2992:	c0 50       	subi	r28, 0x00	; 0
    2994:	de 4f       	sbci	r29, 0xFE	; 254
    2996:	88 81       	ld	r24, Y
    2998:	99 81       	ldd	r25, Y+1	; 0x01
    299a:	c0 50       	subi	r28, 0x00	; 0
    299c:	d2 40       	sbci	r29, 0x02	; 2
    299e:	8b 32       	cpi	r24, 0x2B	; 43
    29a0:	91 05       	cpc	r25, r1
    29a2:	51 f0       	breq	.+20     	; 0x29b8 <main+0xee2>
    29a4:	c0 50       	subi	r28, 0x00	; 0
    29a6:	de 4f       	sbci	r29, 0xFE	; 254
    29a8:	e8 81       	ld	r30, Y
    29aa:	f9 81       	ldd	r31, Y+1	; 0x01
    29ac:	c0 50       	subi	r28, 0x00	; 0
    29ae:	d2 40       	sbci	r29, 0x02	; 2
    29b0:	ed 32       	cpi	r30, 0x2D	; 45
    29b2:	f1 05       	cpc	r31, r1
    29b4:	01 f1       	breq	.+64     	; 0x29f6 <main+0xf20>
    29b6:	3e c0       	rjmp	.+124    	; 0x2a34 <main+0xf5e>
        {
        case '+':
          {
            int res = i2c_rtc_read(&time, 0);
    29b8:	ce 01       	movw	r24, r28
    29ba:	85 5b       	subi	r24, 0xB5	; 181
    29bc:	9e 4f       	sbci	r25, 0xFE	; 254
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    29c4:	fe 01       	movw	r30, r28
    29c6:	e7 5f       	subi	r30, 0xF7	; 247
    29c8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ca:	88 2f       	mov	r24, r24
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
            add_year(&time);
    29d2:	ce 01       	movw	r24, r28
    29d4:	85 5b       	subi	r24, 0xB5	; 181
    29d6:	9e 4f       	sbci	r25, 0xFE	; 254
    29d8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <add_year>
            res = i2c_rtc_write(&time);
    29dc:	ce 01       	movw	r24, r28
    29de:	85 5b       	subi	r24, 0xB5	; 181
    29e0:	9e 4f       	sbci	r25, 0xFE	; 254
    29e2:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    29e6:	fe 01       	movw	r30, r28
    29e8:	e7 5f       	subi	r30, 0xF7	; 247
    29ea:	fe 4f       	sbci	r31, 0xFE	; 254
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24
    29f4:	67 c0       	rjmp	.+206    	; 0x2ac4 <main+0xfee>
          }
          break;
        case '-':
          {
            int res = i2c_rtc_read(&time, 0);
    29f6:	ce 01       	movw	r24, r28
    29f8:	85 5b       	subi	r24, 0xB5	; 181
    29fa:	9e 4f       	sbci	r25, 0xFE	; 254
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2a02:	fe 01       	movw	r30, r28
    2a04:	e9 5f       	subi	r30, 0xF9	; 249
    2a06:	fe 4f       	sbci	r31, 0xFE	; 254
    2a08:	88 2f       	mov	r24, r24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	80 83       	st	Z, r24
            sub_year(&time);
    2a10:	ce 01       	movw	r24, r28
    2a12:	85 5b       	subi	r24, 0xB5	; 181
    2a14:	9e 4f       	sbci	r25, 0xFE	; 254
    2a16:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sub_year>
            res = i2c_rtc_write(&time);
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	85 5b       	subi	r24, 0xB5	; 181
    2a1e:	9e 4f       	sbci	r25, 0xFE	; 254
    2a20:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    2a24:	fe 01       	movw	r30, r28
    2a26:	e9 5f       	subi	r30, 0xF9	; 249
    2a28:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2a:	88 2f       	mov	r24, r24
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
    2a32:	48 c0       	rjmp	.+144    	; 0x2ac4 <main+0xfee>
          }
          break;
        default:
          {
            char s[100];
            sprintf(s, "Y macht keinen sinn mit '%c'...\r\n", uart_string[1]);
    2a34:	80 91 dc 00 	lds	r24, 0x00DC
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <main+0xf68>
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <main+0xf6a>
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <main+0xf6c>
    2a42:	ed b7       	in	r30, 0x3d	; 61
    2a44:	fe b7       	in	r31, 0x3e	; 62
    2a46:	31 96       	adiw	r30, 0x01	; 1
    2a48:	ce 01       	movw	r24, r28
    2a4a:	86 56       	subi	r24, 0x66	; 102
    2a4c:	9e 4f       	sbci	r25, 0xFE	; 254
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	80 e1       	ldi	r24, 0x10	; 16
    2a54:	93 e0       	ldi	r25, 0x03	; 3
    2a56:	93 83       	std	Z+3, r25	; 0x03
    2a58:	82 83       	std	Z+2, r24	; 0x02
    2a5a:	35 83       	std	Z+5, r19	; 0x05
    2a5c:	24 83       	std	Z+4, r18	; 0x04
    2a5e:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    2a62:	2d b7       	in	r18, 0x3d	; 61
    2a64:	3e b7       	in	r19, 0x3e	; 62
    2a66:	2a 5f       	subi	r18, 0xFA	; 250
    2a68:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	3e bf       	out	0x3e, r19	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	2d bf       	out	0x3d, r18	; 61
            uartPuts(s);
    2a74:	ce 01       	movw	r24, r28
    2a76:	86 56       	subi	r24, 0x66	; 102
    2a78:	9e 4f       	sbci	r25, 0xFE	; 254
    2a7a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    2a7e:	22 c0       	rjmp	.+68     	; 0x2ac4 <main+0xfee>
        }
        break;
      default:
        {
          char s[100];
          sprintf(s, "was soll ich mit '%s' anfangen?\r\n", uart_string);
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <main+0xfac>
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <main+0xfae>
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <main+0xfb0>
    2a86:	ed b7       	in	r30, 0x3d	; 61
    2a88:	fe b7       	in	r31, 0x3e	; 62
    2a8a:	31 96       	adiw	r30, 0x01	; 1
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	86 56       	subi	r24, 0x66	; 102
    2a90:	9e 4f       	sbci	r25, 0xFE	; 254
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	80 83       	st	Z, r24
    2a96:	82 e3       	ldi	r24, 0x32	; 50
    2a98:	93 e0       	ldi	r25, 0x03	; 3
    2a9a:	93 83       	std	Z+3, r25	; 0x03
    2a9c:	82 83       	std	Z+2, r24	; 0x02
    2a9e:	8b ed       	ldi	r24, 0xDB	; 219
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	95 83       	std	Z+5, r25	; 0x05
    2aa4:	84 83       	std	Z+4, r24	; 0x04
    2aa6:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    2aaa:	8d b7       	in	r24, 0x3d	; 61
    2aac:	9e b7       	in	r25, 0x3e	; 62
    2aae:	06 96       	adiw	r24, 0x06	; 6
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	9e bf       	out	0x3e, r25	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	8d bf       	out	0x3d, r24	; 61
          uartPuts(s);
    2aba:	ce 01       	movw	r24, r28
    2abc:	86 56       	subi	r24, 0x66	; 102
    2abe:	9e 4f       	sbci	r25, 0xFE	; 254
    2ac0:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>

        }
      }
      int res1 = i2c_rtc_read(&time, 1);
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	85 5b       	subi	r24, 0xB5	; 181
    2ac8:	9e 4f       	sbci	r25, 0xFE	; 254
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e9 5d       	subi	r30, 0xD9	; 217
    2ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad6:	88 2f       	mov	r24, r24
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	91 83       	std	Z+1, r25	; 0x01
    2adc:	80 83       	st	Z, r24
      int res2 = i2c_rtc_read(&utctime, 0);
    2ade:	ce 01       	movw	r24, r28
    2ae0:	88 5a       	subi	r24, 0xA8	; 168
    2ae2:	9e 4f       	sbci	r25, 0xFE	; 254
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2aea:	fe 01       	movw	r30, r28
    2aec:	eb 5d       	subi	r30, 0xDB	; 219
    2aee:	fe 4f       	sbci	r31, 0xFE	; 254
    2af0:	88 2f       	mov	r24, r24
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
      TimeInfo(time);
    2af8:	fe 01       	movw	r30, r28
    2afa:	e5 5b       	subi	r30, 0xB5	; 181
    2afc:	fe 4f       	sbci	r31, 0xFE	; 254
    2afe:	c0 80       	ld	r12, Z
    2b00:	d1 80       	ldd	r13, Z+1	; 0x01
    2b02:	e2 80       	ldd	r14, Z+2	; 0x02
    2b04:	f3 80       	ldd	r15, Z+3	; 0x03
    2b06:	04 81       	ldd	r16, Z+4	; 0x04
    2b08:	15 81       	ldd	r17, Z+5	; 0x05
    2b0a:	26 81       	ldd	r18, Z+6	; 0x06
    2b0c:	37 81       	ldd	r19, Z+7	; 0x07
    2b0e:	40 85       	ldd	r20, Z+8	; 0x08
    2b10:	51 85       	ldd	r21, Z+9	; 0x09
    2b12:	62 85       	ldd	r22, Z+10	; 0x0a
    2b14:	73 85       	ldd	r23, Z+11	; 0x0b
    2b16:	84 85       	ldd	r24, Z+12	; 0x0c
    2b18:	0e 94 36 0c 	call	0x186c	; 0x186c <TimeInfo>
      uart_str_complete = 0;
    2b1c:	10 92 d4 03 	sts	0x03D4, r1
    }

    if (!(PINA & (1 << PA7)))
    2b20:	e9 e3       	ldi	r30, 0x39	; 57
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	88 23       	and	r24, r24
    2b28:	6c f0       	brlt	.+26     	; 0x2b44 <main+0x106e>
    {
      Button1++;
    2b2a:	de 01       	movw	r26, r28
    2b2c:	a5 5c       	subi	r26, 0xC5	; 197
    2b2e:	be 4f       	sbci	r27, 0xFE	; 254
    2b30:	fe 01       	movw	r30, r28
    2b32:	e5 5c       	subi	r30, 0xC5	; 197
    2b34:	fe 4f       	sbci	r31, 0xFE	; 254
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	11 96       	adiw	r26, 0x01	; 1
    2b3e:	9c 93       	st	X, r25
    2b40:	8e 93       	st	-X, r24
    2b42:	05 c0       	rjmp	.+10     	; 0x2b4e <main+0x1078>
    }
    else
    {
      Button1 = 0;
    2b44:	fe 01       	movw	r30, r28
    2b46:	e5 5c       	subi	r30, 0xC5	; 197
    2b48:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4a:	11 82       	std	Z+1, r1	; 0x01
    2b4c:	10 82       	st	Z, r1
    }

    if (!(PINA & (1 << PA6)))
    2b4e:	e9 e3       	ldi	r30, 0x39	; 57
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	88 2f       	mov	r24, r24
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	80 74       	andi	r24, 0x40	; 64
    2b5a:	90 70       	andi	r25, 0x00	; 0
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	69 f4       	brne	.+26     	; 0x2b7a <main+0x10a4>
    {
      Button2++;
    2b60:	de 01       	movw	r26, r28
    2b62:	a7 5c       	subi	r26, 0xC7	; 199
    2b64:	be 4f       	sbci	r27, 0xFE	; 254
    2b66:	fe 01       	movw	r30, r28
    2b68:	e7 5c       	subi	r30, 0xC7	; 199
    2b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	11 96       	adiw	r26, 0x01	; 1
    2b74:	9c 93       	st	X, r25
    2b76:	8e 93       	st	-X, r24
    2b78:	05 c0       	rjmp	.+10     	; 0x2b84 <main+0x10ae>
    }
    else
    {
      Button2 = 0;
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e7 5c       	subi	r30, 0xC7	; 199
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	11 82       	std	Z+1, r1	; 0x01
    2b82:	10 82       	st	Z, r1
    }

    if (Button1 > 1)
    2b84:	fe 01       	movw	r30, r28
    2b86:	e5 5c       	subi	r30, 0xC5	; 197
    2b88:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	82 30       	cpi	r24, 0x02	; 2
    2b90:	91 05       	cpc	r25, r1
    2b92:	08 f4       	brcc	.+2      	; 0x2b96 <main+0x10c0>
    2b94:	74 c0       	rjmp	.+232    	; 0x2c7e <main+0x11a8>
    {
      if (((Button1 + 10) % 12) == 0 || Button1 > 36)
    2b96:	fe 01       	movw	r30, r28
    2b98:	e5 5c       	subi	r30, 0xC5	; 197
    2b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	0a 96       	adiw	r24, 0x0a	; 10
    2ba2:	2c e0       	ldi	r18, 0x0C	; 12
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	b9 01       	movw	r22, r18
    2ba8:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <__udivmodhi4>
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	49 f0       	breq	.+18     	; 0x2bc2 <main+0x10ec>
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e5 5c       	subi	r30, 0xC5	; 197
    2bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	85 32       	cpi	r24, 0x25	; 37
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	08 f4       	brcc	.+2      	; 0x2bc2 <main+0x10ec>
    2bc0:	5e c0       	rjmp	.+188    	; 0x2c7e <main+0x11a8>
      {
        uartPuts("Hour++\r\n");
    2bc2:	84 e5       	ldi	r24, 0x54	; 84
    2bc4:	93 e0       	ldi	r25, 0x03	; 3
    2bc6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
        int res = i2c_rtc_read(&time, 0);
    2bca:	ce 01       	movw	r24, r28
    2bcc:	85 5b       	subi	r24, 0xB5	; 181
    2bce:	9e 4f       	sbci	r25, 0xFE	; 254
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	eb 5f       	subi	r30, 0xFB	; 251
    2bda:	fe 4f       	sbci	r31, 0xFE	; 254
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
        add_hour(&time);
    2be4:	ce 01       	movw	r24, r28
    2be6:	85 5b       	subi	r24, 0xB5	; 181
    2be8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bea:	0e 94 a8 04 	call	0x950	; 0x950 <add_hour>
        res = i2c_rtc_write(&time);
    2bee:	ce 01       	movw	r24, r28
    2bf0:	85 5b       	subi	r24, 0xB5	; 181
    2bf2:	9e 4f       	sbci	r25, 0xFE	; 254
    2bf4:	0e 94 16 03 	call	0x62c	; 0x62c <i2c_rtc_write>
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	eb 5f       	subi	r30, 0xFB	; 251
    2bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfe:	88 2f       	mov	r24, r24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
        char s[100];
        sprintf(s, "time : %02d:%02d:%02d\r\n", time.hh, time.mm, time.ss);
    2c06:	fe 01       	movw	r30, r28
    2c08:	e5 5b       	subi	r30, 0xB5	; 181
    2c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c0c:	83 81       	ldd	r24, Z+3	; 0x03
    2c0e:	48 2f       	mov	r20, r24
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	fe 01       	movw	r30, r28
    2c14:	e5 5b       	subi	r30, 0xB5	; 181
    2c16:	fe 4f       	sbci	r31, 0xFE	; 254
    2c18:	84 81       	ldd	r24, Z+4	; 0x04
    2c1a:	68 2f       	mov	r22, r24
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e5 5b       	subi	r30, 0xB5	; 181
    2c22:	fe 4f       	sbci	r31, 0xFE	; 254
    2c24:	85 81       	ldd	r24, Z+5	; 0x05
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	ed b7       	in	r30, 0x3d	; 61
    2c2c:	fe b7       	in	r31, 0x3e	; 62
    2c2e:	3a 97       	sbiw	r30, 0x0a	; 10
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	fe bf       	out	0x3e, r31	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	ed bf       	out	0x3d, r30	; 61
    2c3a:	ed b7       	in	r30, 0x3d	; 61
    2c3c:	fe b7       	in	r31, 0x3e	; 62
    2c3e:	31 96       	adiw	r30, 0x01	; 1
    2c40:	ce 01       	movw	r24, r28
    2c42:	86 56       	subi	r24, 0x66	; 102
    2c44:	9e 4f       	sbci	r25, 0xFE	; 254
    2c46:	91 83       	std	Z+1, r25	; 0x01
    2c48:	80 83       	st	Z, r24
    2c4a:	8d e5       	ldi	r24, 0x5D	; 93
    2c4c:	93 e0       	ldi	r25, 0x03	; 3
    2c4e:	93 83       	std	Z+3, r25	; 0x03
    2c50:	82 83       	std	Z+2, r24	; 0x02
    2c52:	55 83       	std	Z+5, r21	; 0x05
    2c54:	44 83       	std	Z+4, r20	; 0x04
    2c56:	77 83       	std	Z+7, r23	; 0x07
    2c58:	66 83       	std	Z+6, r22	; 0x06
    2c5a:	31 87       	std	Z+9, r19	; 0x09
    2c5c:	20 87       	std	Z+8, r18	; 0x08
    2c5e:	0e 94 ed 26 	call	0x4dda	; 0x4dda <sprintf>
    2c62:	2d b7       	in	r18, 0x3d	; 61
    2c64:	3e b7       	in	r19, 0x3e	; 62
    2c66:	26 5f       	subi	r18, 0xF6	; 246
    2c68:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	3e bf       	out	0x3e, r19	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	2d bf       	out	0x3d, r18	; 61
        uartPuts(s);
    2c74:	ce 01       	movw	r24, r28
    2c76:	86 56       	subi	r24, 0x66	; 102
    2c78:	9e 4f       	sbci	r25, 0xFE	; 254
    2c7a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
    //		else
    //		{
    //			uartPuts("0\r\n");
    //		}

    if (uiCount % 100)
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e3 5c       	subi	r30, 0xC3	; 195
    2c82:	fe 4f       	sbci	r31, 0xFE	; 254
    2c84:	80 81       	ld	r24, Z
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	24 e6       	ldi	r18, 0x64	; 100
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	b9 01       	movw	r22, r18
    2c8e:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	09 f0       	breq	.+2      	; 0x2c98 <main+0x11c2>
    2c96:	f4 c8       	rjmp	.-3608   	; 0x1e80 <main+0x3aa>
    {
      continue;
    }

    int res1 = i2c_rtc_read(&time, 1);
    2c98:	ce 01       	movw	r24, r28
    2c9a:	85 5b       	subi	r24, 0xB5	; 181
    2c9c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c9e:	61 e0       	ldi	r22, 0x01	; 1
    2ca0:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e0 5d       	subi	r30, 0xD0	; 208
    2ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
    int res2 = i2c_rtc_read(&utctime, 0);
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	88 5a       	subi	r24, 0xA8	; 168
    2cb6:	9e 4f       	sbci	r25, 0xFE	; 254
    2cb8:	60 e0       	ldi	r22, 0x00	; 0
    2cba:	0e 94 28 05 	call	0xa50	; 0xa50 <i2c_rtc_read>
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e2 5d       	subi	r30, 0xD2	; 210
    2cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc4:	88 2f       	mov	r24, r24
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	80 83       	st	Z, r24
    SetColor(uiBright, uiR, uiG, uiB);
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e7 5b       	subi	r30, 0xB7	; 183
    2cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd2:	20 81       	ld	r18, Z
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e9 5b       	subi	r30, 0xB9	; 185
    2cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cda:	30 81       	ld	r19, Z
    2cdc:	fe 01       	movw	r30, r28
    2cde:	eb 5b       	subi	r30, 0xBB	; 187
    2ce0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce2:	90 81       	ld	r25, Z
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ee 5c       	subi	r30, 0xCE	; 206
    2ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cea:	80 81       	ld	r24, Z
    2cec:	62 2f       	mov	r22, r18
    2cee:	43 2f       	mov	r20, r19
    2cf0:	29 2f       	mov	r18, r25
    2cf2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>
    if (!res1 || !res2)
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e0 5d       	subi	r30, 0xD0	; 208
    2cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	41 f0       	breq	.+16     	; 0x2d14 <main+0x123e>
    2d04:	fe 01       	movw	r30, r28
    2d06:	e2 5d       	subi	r30, 0xD2	; 210
    2d08:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	09 f0       	breq	.+2      	; 0x2d14 <main+0x123e>
    2d12:	11 c1       	rjmp	.+546    	; 0x2f36 <main+0x1460>
    {
      uartPuts("RTC error\r\n");
    2d14:	85 e7       	ldi	r24, 0x75	; 117
    2d16:	93 e0       	ldi	r25, 0x03	; 3
    2d18:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uartPuts>
      for (uiCount = 0; uiCount < 40; uiCount++)
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e3 5c       	subi	r30, 0xC3	; 195
    2d20:	fe 4f       	sbci	r31, 0xFE	; 254
    2d22:	11 82       	std	Z+1, r1	; 0x01
    2d24:	10 82       	st	Z, r1
    2d26:	fc c0       	rjmp	.+504    	; 0x2f20 <main+0x144a>
      {
        SetColor(0x01, 0x01, 0x01, 0x01);
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	61 e0       	ldi	r22, 0x01	; 1
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	21 e0       	ldi	r18, 0x01	; 1
    2d30:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	a8 e4       	ldi	r26, 0x48	; 72
    2d3a:	b2 e4       	ldi	r27, 0x42	; 66
    2d3c:	89 8f       	std	Y+25, r24	; 0x19
    2d3e:	9a 8f       	std	Y+26, r25	; 0x1a
    2d40:	ab 8f       	std	Y+27, r26	; 0x1b
    2d42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d44:	69 8d       	ldd	r22, Y+25	; 0x19
    2d46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	4a e7       	ldi	r20, 0x7A	; 122
    2d52:	55 e4       	ldi	r21, 0x45	; 69
    2d54:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	8d 8b       	std	Y+21, r24	; 0x15
    2d5e:	9e 8b       	std	Y+22, r25	; 0x16
    2d60:	af 8b       	std	Y+23, r26	; 0x17
    2d62:	b8 8f       	std	Y+24, r27	; 0x18
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
    2d64:	6d 89       	ldd	r22, Y+21	; 0x15
    2d66:	7e 89       	ldd	r23, Y+22	; 0x16
    2d68:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e8       	ldi	r20, 0x80	; 128
    2d72:	5f e3       	ldi	r21, 0x3F	; 63
    2d74:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__ltsf2>
    2d78:	88 23       	and	r24, r24
    2d7a:	2c f4       	brge	.+10     	; 0x2d86 <main+0x12b0>
		__ticks = 1;
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	9c 8b       	std	Y+20, r25	; 0x14
    2d82:	8b 8b       	std	Y+19, r24	; 0x13
    2d84:	3f c0       	rjmp	.+126    	; 0x2e04 <main+0x132e>
	else if (__tmp > 65535)
    2d86:	6d 89       	ldd	r22, Y+21	; 0x15
    2d88:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	3f ef       	ldi	r19, 0xFF	; 255
    2d92:	4f e7       	ldi	r20, 0x7F	; 127
    2d94:	57 e4       	ldi	r21, 0x47	; 71
    2d96:	0e 94 9d 23 	call	0x473a	; 0x473a <__gtsf2>
    2d9a:	18 16       	cp	r1, r24
    2d9c:	4c f5       	brge	.+82     	; 0x2df0 <main+0x131a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	40 e2       	ldi	r20, 0x20	; 32
    2dac:	51 e4       	ldi	r21, 0x41	; 65
    2dae:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	bc 01       	movw	r22, r24
    2db8:	cd 01       	movw	r24, r26
    2dba:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	9c 8b       	std	Y+20, r25	; 0x14
    2dc4:	8b 8b       	std	Y+19, r24	; 0x13
    2dc6:	0f c0       	rjmp	.+30     	; 0x2de6 <main+0x1310>
    2dc8:	80 e9       	ldi	r24, 0x90	; 144
    2dca:	91 e0       	ldi	r25, 0x01	; 1
    2dcc:	9a 8b       	std	Y+18, r25	; 0x12
    2dce:	89 8b       	std	Y+17, r24	; 0x11
    2dd0:	89 89       	ldd	r24, Y+17	; 0x11
    2dd2:	9a 89       	ldd	r25, Y+18	; 0x12
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	f1 f7       	brne	.-4      	; 0x2dd4 <main+0x12fe>
    2dd8:	9a 8b       	std	Y+18, r25	; 0x12
    2dda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ddc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dde:	9c 89       	ldd	r25, Y+20	; 0x14
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	9c 8b       	std	Y+20, r25	; 0x14
    2de4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de6:	8b 89       	ldd	r24, Y+19	; 0x13
    2de8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	69 f7       	brne	.-38     	; 0x2dc8 <main+0x12f2>
    2dee:	14 c0       	rjmp	.+40     	; 0x2e18 <main+0x1342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df0:	6d 89       	ldd	r22, Y+21	; 0x15
    2df2:	7e 89       	ldd	r23, Y+22	; 0x16
    2df4:	8f 89       	ldd	r24, Y+23	; 0x17
    2df6:	98 8d       	ldd	r25, Y+24	; 0x18
    2df8:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	9c 8b       	std	Y+20, r25	; 0x14
    2e02:	8b 8b       	std	Y+19, r24	; 0x13
    2e04:	8b 89       	ldd	r24, Y+19	; 0x13
    2e06:	9c 89       	ldd	r25, Y+20	; 0x14
    2e08:	98 8b       	std	Y+16, r25	; 0x10
    2e0a:	8f 87       	std	Y+15, r24	; 0x0f
    2e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e0e:	98 89       	ldd	r25, Y+16	; 0x10
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	f1 f7       	brne	.-4      	; 0x2e10 <main+0x133a>
    2e14:	98 8b       	std	Y+16, r25	; 0x10
    2e16:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(50);
        SetColor(0xff, 0xff, 0xff, 0xff);
    2e18:	8f ef       	ldi	r24, 0xFF	; 255
    2e1a:	6f ef       	ldi	r22, 0xFF	; 255
    2e1c:	4f ef       	ldi	r20, 0xFF	; 255
    2e1e:	2f ef       	ldi	r18, 0xFF	; 255
    2e20:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SetColor>
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	a8 e4       	ldi	r26, 0x48	; 72
    2e2a:	b2 e4       	ldi	r27, 0x42	; 66
    2e2c:	8b 87       	std	Y+11, r24	; 0x0b
    2e2e:	9c 87       	std	Y+12, r25	; 0x0c
    2e30:	ad 87       	std	Y+13, r26	; 0x0d
    2e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	4a e7       	ldi	r20, 0x7A	; 122
    2e42:	55 e4       	ldi	r21, 0x45	; 69
    2e44:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	8f 83       	std	Y+7, r24	; 0x07
    2e4e:	98 87       	std	Y+8, r25	; 0x08
    2e50:	a9 87       	std	Y+9, r26	; 0x09
    2e52:	ba 87       	std	Y+10, r27	; 0x0a
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
#else
	if (__tmp < 1.0)
    2e54:	6f 81       	ldd	r22, Y+7	; 0x07
    2e56:	78 85       	ldd	r23, Y+8	; 0x08
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e8       	ldi	r20, 0x80	; 128
    2e62:	5f e3       	ldi	r21, 0x3F	; 63
    2e64:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__ltsf2>
    2e68:	88 23       	and	r24, r24
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <main+0x13a0>
		__ticks = 1;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
    2e74:	3f c0       	rjmp	.+126    	; 0x2ef4 <main+0x141e>
	else if (__tmp > 65535)
    2e76:	6f 81       	ldd	r22, Y+7	; 0x07
    2e78:	78 85       	ldd	r23, Y+8	; 0x08
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	3f ef       	ldi	r19, 0xFF	; 255
    2e82:	4f e7       	ldi	r20, 0x7F	; 127
    2e84:	57 e4       	ldi	r21, 0x47	; 71
    2e86:	0e 94 9d 23 	call	0x473a	; 0x473a <__gtsf2>
    2e8a:	18 16       	cp	r1, r24
    2e8c:	4c f5       	brge	.+82     	; 0x2ee0 <main+0x140a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e2       	ldi	r20, 0x20	; 32
    2e9c:	51 e4       	ldi	r21, 0x41	; 65
    2e9e:	0e 94 a3 22 	call	0x4546	; 0x4546 <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	9e 83       	std	Y+6, r25	; 0x06
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
    2eb6:	0f c0       	rjmp	.+30     	; 0x2ed6 <main+0x1400>
    2eb8:	80 e9       	ldi	r24, 0x90	; 144
    2eba:	91 e0       	ldi	r25, 0x01	; 1
    2ebc:	9c 83       	std	Y+4, r25	; 0x04
    2ebe:	8b 83       	std	Y+3, r24	; 0x03
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <main+0x13ee>
    2ec8:	9c 83       	std	Y+4, r25	; 0x04
    2eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ece:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	69 f7       	brne	.-38     	; 0x2eb8 <main+0x13e2>
    2ede:	14 c0       	rjmp	.+40     	; 0x2f08 <main+0x1432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee2:	78 85       	ldd	r23, Y+8	; 0x08
    2ee4:	89 85       	ldd	r24, Y+9	; 0x09
    2ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee8:	0e 94 cd 20 	call	0x419a	; 0x419a <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	9a 81       	ldd	r25, Y+2	; 0x02
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <main+0x142a>
    2f04:	9a 83       	std	Y+2, r25	; 0x02
    2f06:	89 83       	std	Y+1, r24	; 0x01
    int res2 = i2c_rtc_read(&utctime, 0);
    SetColor(uiBright, uiR, uiG, uiB);
    if (!res1 || !res2)
    {
      uartPuts("RTC error\r\n");
      for (uiCount = 0; uiCount < 40; uiCount++)
    2f08:	de 01       	movw	r26, r28
    2f0a:	a3 5c       	subi	r26, 0xC3	; 195
    2f0c:	be 4f       	sbci	r27, 0xFE	; 254
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e3 5c       	subi	r30, 0xC3	; 195
    2f12:	fe 4f       	sbci	r31, 0xFE	; 254
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	11 96       	adiw	r26, 0x01	; 1
    2f1c:	9c 93       	st	X, r25
    2f1e:	8e 93       	st	-X, r24
    2f20:	fe 01       	movw	r30, r28
    2f22:	e3 5c       	subi	r30, 0xC3	; 195
    2f24:	fe 4f       	sbci	r31, 0xFE	; 254
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	88 32       	cpi	r24, 0x28	; 40
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	0c f4       	brge	.+2      	; 0x2f32 <main+0x145c>
    2f30:	fb ce       	rjmp	.-522    	; 0x2d28 <main+0x1252>
    2f32:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <main+0x3aa>
        _delay_ms(50);
      }
      continue;
    }

    long lLEDs = 0;
    2f36:	fe 01       	movw	r30, r28
    2f38:	e6 5d       	subi	r30, 0xD6	; 214
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	10 82       	st	Z, r1
    2f3e:	11 82       	std	Z+1, r1	; 0x01
    2f40:	12 82       	std	Z+2, r1	; 0x02
    2f42:	13 82       	std	Z+3, r1	; 0x03
    lLEDs |= pgm_read_dword(words+def_es);
    2f44:	fe 01       	movw	r30, r28
    2f46:	ed 5f       	subi	r30, 0xFD	; 253
    2f48:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4a:	84 e5       	ldi	r24, 0x54	; 84
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
    2f52:	fe 01       	movw	r30, r28
    2f54:	ed 5f       	subi	r30, 0xFD	; 253
    2f56:	fe 4f       	sbci	r31, 0xFE	; 254
    2f58:	80 81       	ld	r24, Z
    2f5a:	91 81       	ldd	r25, Z+1	; 0x01
    2f5c:	9c 01       	movw	r18, r24
    2f5e:	f9 01       	movw	r30, r18
    2f60:	85 91       	lpm	r24, Z+
    2f62:	95 91       	lpm	r25, Z+
    2f64:	a5 91       	lpm	r26, Z+
    2f66:	b4 91       	lpm	r27, Z+
    2f68:	9f 01       	movw	r18, r30
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e1 50       	subi	r30, 0x01	; 1
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 83       	st	Z, r24
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	a2 83       	std	Z+2, r26	; 0x02
    2f76:	b3 83       	std	Z+3, r27	; 0x03
    2f78:	fe 01       	movw	r30, r28
    2f7a:	ed 5f       	subi	r30, 0xFD	; 253
    2f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7e:	31 83       	std	Z+1, r19	; 0x01
    2f80:	20 83       	st	Z, r18
    2f82:	fe 01       	movw	r30, r28
    2f84:	e1 50       	subi	r30, 0x01	; 1
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	20 81       	ld	r18, Z
    2f8a:	31 81       	ldd	r19, Z+1	; 0x01
    2f8c:	42 81       	ldd	r20, Z+2	; 0x02
    2f8e:	53 81       	ldd	r21, Z+3	; 0x03
    2f90:	fe 01       	movw	r30, r28
    2f92:	e6 5d       	subi	r30, 0xD6	; 214
    2f94:	fe 4f       	sbci	r31, 0xFE	; 254
    2f96:	80 81       	ld	r24, Z
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
    2f9a:	a2 81       	ldd	r26, Z+2	; 0x02
    2f9c:	b3 81       	ldd	r27, Z+3	; 0x03
    2f9e:	82 2b       	or	r24, r18
    2fa0:	93 2b       	or	r25, r19
    2fa2:	a4 2b       	or	r26, r20
    2fa4:	b5 2b       	or	r27, r21
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e6 5d       	subi	r30, 0xD6	; 214
    2faa:	fe 4f       	sbci	r31, 0xFE	; 254
    2fac:	80 83       	st	Z, r24
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	a2 83       	std	Z+2, r26	; 0x02
    2fb2:	b3 83       	std	Z+3, r27	; 0x03
    lLEDs |= pgm_read_dword(words+def_ist);
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e3 50       	subi	r30, 0x03	; 3
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	88 e5       	ldi	r24, 0x58	; 88
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e3 50       	subi	r30, 0x03	; 3
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	9c 01       	movw	r18, r24
    2fce:	f9 01       	movw	r30, r18
    2fd0:	85 91       	lpm	r24, Z+
    2fd2:	95 91       	lpm	r25, Z+
    2fd4:	a5 91       	lpm	r26, Z+
    2fd6:	b4 91       	lpm	r27, Z+
    2fd8:	9f 01       	movw	r18, r30
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e7 50       	subi	r30, 0x07	; 7
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 83       	st	Z, r24
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	a2 83       	std	Z+2, r26	; 0x02
    2fe6:	b3 83       	std	Z+3, r27	; 0x03
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e3 50       	subi	r30, 0x03	; 3
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	31 83       	std	Z+1, r19	; 0x01
    2ff0:	20 83       	st	Z, r18
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	e7 50       	subi	r30, 0x07	; 7
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	20 81       	ld	r18, Z
    2ffa:	31 81       	ldd	r19, Z+1	; 0x01
    2ffc:	42 81       	ldd	r20, Z+2	; 0x02
    2ffe:	53 81       	ldd	r21, Z+3	; 0x03
    3000:	fe 01       	movw	r30, r28
    3002:	e6 5d       	subi	r30, 0xD6	; 214
    3004:	fe 4f       	sbci	r31, 0xFE	; 254
    3006:	80 81       	ld	r24, Z
    3008:	91 81       	ldd	r25, Z+1	; 0x01
    300a:	a2 81       	ldd	r26, Z+2	; 0x02
    300c:	b3 81       	ldd	r27, Z+3	; 0x03
    300e:	82 2b       	or	r24, r18
    3010:	93 2b       	or	r25, r19
    3012:	a4 2b       	or	r26, r20
    3014:	b5 2b       	or	r27, r21
    3016:	fe 01       	movw	r30, r28
    3018:	e6 5d       	subi	r30, 0xD6	; 214
    301a:	fe 4f       	sbci	r31, 0xFE	; 254
    301c:	80 83       	st	Z, r24
    301e:	91 83       	std	Z+1, r25	; 0x01
    3020:	a2 83       	std	Z+2, r26	; 0x02
    3022:	b3 83       	std	Z+3, r27	; 0x03
    lLEDs |= pgm_read_dword(words+def_uhr);
    3024:	fe 01       	movw	r30, r28
    3026:	e9 50       	subi	r30, 0x09	; 9
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	8c ea       	ldi	r24, 0xAC	; 172
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
    3032:	fe 01       	movw	r30, r28
    3034:	e9 50       	subi	r30, 0x09	; 9
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	9c 01       	movw	r18, r24
    303e:	f9 01       	movw	r30, r18
    3040:	85 91       	lpm	r24, Z+
    3042:	95 91       	lpm	r25, Z+
    3044:	a5 91       	lpm	r26, Z+
    3046:	b4 91       	lpm	r27, Z+
    3048:	9f 01       	movw	r18, r30
    304a:	fe 01       	movw	r30, r28
    304c:	ed 50       	subi	r30, 0x0D	; 13
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	80 83       	st	Z, r24
    3052:	91 83       	std	Z+1, r25	; 0x01
    3054:	a2 83       	std	Z+2, r26	; 0x02
    3056:	b3 83       	std	Z+3, r27	; 0x03
    3058:	fe 01       	movw	r30, r28
    305a:	e9 50       	subi	r30, 0x09	; 9
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	31 83       	std	Z+1, r19	; 0x01
    3060:	20 83       	st	Z, r18
    3062:	fe 01       	movw	r30, r28
    3064:	ed 50       	subi	r30, 0x0D	; 13
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	20 81       	ld	r18, Z
    306a:	31 81       	ldd	r19, Z+1	; 0x01
    306c:	42 81       	ldd	r20, Z+2	; 0x02
    306e:	53 81       	ldd	r21, Z+3	; 0x03
    3070:	fe 01       	movw	r30, r28
    3072:	e6 5d       	subi	r30, 0xD6	; 214
    3074:	fe 4f       	sbci	r31, 0xFE	; 254
    3076:	80 81       	ld	r24, Z
    3078:	91 81       	ldd	r25, Z+1	; 0x01
    307a:	a2 81       	ldd	r26, Z+2	; 0x02
    307c:	b3 81       	ldd	r27, Z+3	; 0x03
    307e:	82 2b       	or	r24, r18
    3080:	93 2b       	or	r25, r19
    3082:	a4 2b       	or	r26, r20
    3084:	b5 2b       	or	r27, r21
    3086:	fe 01       	movw	r30, r28
    3088:	e6 5d       	subi	r30, 0xD6	; 214
    308a:	fe 4f       	sbci	r31, 0xFE	; 254
    308c:	80 83       	st	Z, r24
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	a2 83       	std	Z+2, r26	; 0x02
    3092:	b3 83       	std	Z+3, r27	; 0x03

    switch (time.mm % 5)
    3094:	fe 01       	movw	r30, r28
    3096:	e5 5b       	subi	r30, 0xB5	; 181
    3098:	fe 4f       	sbci	r31, 0xFE	; 254
    309a:	84 81       	ldd	r24, Z+4	; 0x04
    309c:	95 e0       	ldi	r25, 0x05	; 5
    309e:	69 2f       	mov	r22, r25
    30a0:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <__udivmodqi4>
    30a4:	89 2f       	mov	r24, r25
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	c2 50       	subi	r28, 0x02	; 2
    30ac:	de 4f       	sbci	r29, 0xFE	; 254
    30ae:	39 83       	std	Y+1, r19	; 0x01
    30b0:	28 83       	st	Y, r18
    30b2:	ce 5f       	subi	r28, 0xFE	; 254
    30b4:	d1 40       	sbci	r29, 0x01	; 1
    30b6:	c2 50       	subi	r28, 0x02	; 2
    30b8:	de 4f       	sbci	r29, 0xFE	; 254
    30ba:	88 81       	ld	r24, Y
    30bc:	99 81       	ldd	r25, Y+1	; 0x01
    30be:	ce 5f       	subi	r28, 0xFE	; 254
    30c0:	d1 40       	sbci	r29, 0x01	; 1
    30c2:	82 30       	cpi	r24, 0x02	; 2
    30c4:	91 05       	cpc	r25, r1
    30c6:	09 f4       	brne	.+2      	; 0x30ca <main+0x15f4>
    30c8:	6b c0       	rjmp	.+214    	; 0x31a0 <main+0x16ca>
    30ca:	c2 50       	subi	r28, 0x02	; 2
    30cc:	de 4f       	sbci	r29, 0xFE	; 254
    30ce:	e8 81       	ld	r30, Y
    30d0:	f9 81       	ldd	r31, Y+1	; 0x01
    30d2:	ce 5f       	subi	r28, 0xFE	; 254
    30d4:	d1 40       	sbci	r29, 0x01	; 1
    30d6:	e3 30       	cpi	r30, 0x03	; 3
    30d8:	f1 05       	cpc	r31, r1
    30da:	a4 f4       	brge	.+40     	; 0x3104 <main+0x162e>
    30dc:	c2 50       	subi	r28, 0x02	; 2
    30de:	de 4f       	sbci	r29, 0xFE	; 254
    30e0:	28 81       	ld	r18, Y
    30e2:	39 81       	ldd	r19, Y+1	; 0x01
    30e4:	ce 5f       	subi	r28, 0xFE	; 254
    30e6:	d1 40       	sbci	r29, 0x01	; 1
    30e8:	21 15       	cp	r18, r1
    30ea:	31 05       	cpc	r19, r1
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <main+0x161a>
    30ee:	02 c1       	rjmp	.+516    	; 0x32f4 <main+0x181e>
    30f0:	c2 50       	subi	r28, 0x02	; 2
    30f2:	de 4f       	sbci	r29, 0xFE	; 254
    30f4:	88 81       	ld	r24, Y
    30f6:	99 81       	ldd	r25, Y+1	; 0x01
    30f8:	ce 5f       	subi	r28, 0xFE	; 254
    30fa:	d1 40       	sbci	r29, 0x01	; 1
    30fc:	81 30       	cpi	r24, 0x01	; 1
    30fe:	91 05       	cpc	r25, r1
    3100:	b1 f0       	breq	.+44     	; 0x312e <main+0x1658>
    3102:	f8 c0       	rjmp	.+496    	; 0x32f4 <main+0x181e>
    3104:	c2 50       	subi	r28, 0x02	; 2
    3106:	de 4f       	sbci	r29, 0xFE	; 254
    3108:	e8 81       	ld	r30, Y
    310a:	f9 81       	ldd	r31, Y+1	; 0x01
    310c:	ce 5f       	subi	r28, 0xFE	; 254
    310e:	d1 40       	sbci	r29, 0x01	; 1
    3110:	e3 30       	cpi	r30, 0x03	; 3
    3112:	f1 05       	cpc	r31, r1
    3114:	09 f4       	brne	.+2      	; 0x3118 <main+0x1642>
    3116:	7d c0       	rjmp	.+250    	; 0x3212 <main+0x173c>
    3118:	c2 50       	subi	r28, 0x02	; 2
    311a:	de 4f       	sbci	r29, 0xFE	; 254
    311c:	28 81       	ld	r18, Y
    311e:	39 81       	ldd	r19, Y+1	; 0x01
    3120:	ce 5f       	subi	r28, 0xFE	; 254
    3122:	d1 40       	sbci	r29, 0x01	; 1
    3124:	24 30       	cpi	r18, 0x04	; 4
    3126:	31 05       	cpc	r19, r1
    3128:	09 f4       	brne	.+2      	; 0x312c <main+0x1656>
    312a:	ac c0       	rjmp	.+344    	; 0x3284 <main+0x17ae>
    312c:	e3 c0       	rjmp	.+454    	; 0x32f4 <main+0x181e>
    {
    case 0:
      break;
    case 1:
      lLEDs |= pgm_read_dword(words+def_mp1);
    312e:	fe 01       	movw	r30, r28
    3130:	ef 50       	subi	r30, 0x0F	; 15
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 eb       	ldi	r24, 0xB0	; 176
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	80 83       	st	Z, r24
    313c:	fe 01       	movw	r30, r28
    313e:	ef 50       	subi	r30, 0x0F	; 15
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	9c 01       	movw	r18, r24
    3148:	f9 01       	movw	r30, r18
    314a:	85 91       	lpm	r24, Z+
    314c:	95 91       	lpm	r25, Z+
    314e:	a5 91       	lpm	r26, Z+
    3150:	b4 91       	lpm	r27, Z+
    3152:	9f 01       	movw	r18, r30
    3154:	fe 01       	movw	r30, r28
    3156:	e3 51       	subi	r30, 0x13	; 19
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	80 83       	st	Z, r24
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	a2 83       	std	Z+2, r26	; 0x02
    3160:	b3 83       	std	Z+3, r27	; 0x03
    3162:	fe 01       	movw	r30, r28
    3164:	ef 50       	subi	r30, 0x0F	; 15
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	31 83       	std	Z+1, r19	; 0x01
    316a:	20 83       	st	Z, r18
    316c:	fe 01       	movw	r30, r28
    316e:	e3 51       	subi	r30, 0x13	; 19
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	20 81       	ld	r18, Z
    3174:	31 81       	ldd	r19, Z+1	; 0x01
    3176:	42 81       	ldd	r20, Z+2	; 0x02
    3178:	53 81       	ldd	r21, Z+3	; 0x03
    317a:	fe 01       	movw	r30, r28
    317c:	e6 5d       	subi	r30, 0xD6	; 214
    317e:	fe 4f       	sbci	r31, 0xFE	; 254
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	a2 81       	ldd	r26, Z+2	; 0x02
    3186:	b3 81       	ldd	r27, Z+3	; 0x03
    3188:	82 2b       	or	r24, r18
    318a:	93 2b       	or	r25, r19
    318c:	a4 2b       	or	r26, r20
    318e:	b5 2b       	or	r27, r21
    3190:	fe 01       	movw	r30, r28
    3192:	e6 5d       	subi	r30, 0xD6	; 214
    3194:	fe 4f       	sbci	r31, 0xFE	; 254
    3196:	80 83       	st	Z, r24
    3198:	91 83       	std	Z+1, r25	; 0x01
    319a:	a2 83       	std	Z+2, r26	; 0x02
    319c:	b3 83       	std	Z+3, r27	; 0x03
    319e:	aa c0       	rjmp	.+340    	; 0x32f4 <main+0x181e>
      break;
    case 2:
      lLEDs |= pgm_read_dword(words+def_mp2);
    31a0:	fe 01       	movw	r30, r28
    31a2:	e5 51       	subi	r30, 0x15	; 21
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	84 eb       	ldi	r24, 0xB4	; 180
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	91 83       	std	Z+1, r25	; 0x01
    31ac:	80 83       	st	Z, r24
    31ae:	fe 01       	movw	r30, r28
    31b0:	e5 51       	subi	r30, 0x15	; 21
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	80 81       	ld	r24, Z
    31b6:	91 81       	ldd	r25, Z+1	; 0x01
    31b8:	9c 01       	movw	r18, r24
    31ba:	f9 01       	movw	r30, r18
    31bc:	85 91       	lpm	r24, Z+
    31be:	95 91       	lpm	r25, Z+
    31c0:	a5 91       	lpm	r26, Z+
    31c2:	b4 91       	lpm	r27, Z+
    31c4:	9f 01       	movw	r18, r30
    31c6:	fe 01       	movw	r30, r28
    31c8:	e9 51       	subi	r30, 0x19	; 25
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	80 83       	st	Z, r24
    31ce:	91 83       	std	Z+1, r25	; 0x01
    31d0:	a2 83       	std	Z+2, r26	; 0x02
    31d2:	b3 83       	std	Z+3, r27	; 0x03
    31d4:	fe 01       	movw	r30, r28
    31d6:	e5 51       	subi	r30, 0x15	; 21
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	31 83       	std	Z+1, r19	; 0x01
    31dc:	20 83       	st	Z, r18
    31de:	fe 01       	movw	r30, r28
    31e0:	e9 51       	subi	r30, 0x19	; 25
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	20 81       	ld	r18, Z
    31e6:	31 81       	ldd	r19, Z+1	; 0x01
    31e8:	42 81       	ldd	r20, Z+2	; 0x02
    31ea:	53 81       	ldd	r21, Z+3	; 0x03
    31ec:	fe 01       	movw	r30, r28
    31ee:	e6 5d       	subi	r30, 0xD6	; 214
    31f0:	fe 4f       	sbci	r31, 0xFE	; 254
    31f2:	80 81       	ld	r24, Z
    31f4:	91 81       	ldd	r25, Z+1	; 0x01
    31f6:	a2 81       	ldd	r26, Z+2	; 0x02
    31f8:	b3 81       	ldd	r27, Z+3	; 0x03
    31fa:	82 2b       	or	r24, r18
    31fc:	93 2b       	or	r25, r19
    31fe:	a4 2b       	or	r26, r20
    3200:	b5 2b       	or	r27, r21
    3202:	fe 01       	movw	r30, r28
    3204:	e6 5d       	subi	r30, 0xD6	; 214
    3206:	fe 4f       	sbci	r31, 0xFE	; 254
    3208:	80 83       	st	Z, r24
    320a:	91 83       	std	Z+1, r25	; 0x01
    320c:	a2 83       	std	Z+2, r26	; 0x02
    320e:	b3 83       	std	Z+3, r27	; 0x03
    3210:	71 c0       	rjmp	.+226    	; 0x32f4 <main+0x181e>
      break;
    case 3:
      lLEDs |= pgm_read_dword(words+def_mp3);
    3212:	fe 01       	movw	r30, r28
    3214:	eb 51       	subi	r30, 0x1B	; 27
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	88 eb       	ldi	r24, 0xB8	; 184
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	91 83       	std	Z+1, r25	; 0x01
    321e:	80 83       	st	Z, r24
    3220:	fe 01       	movw	r30, r28
    3222:	eb 51       	subi	r30, 0x1B	; 27
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	80 81       	ld	r24, Z
    3228:	91 81       	ldd	r25, Z+1	; 0x01
    322a:	9c 01       	movw	r18, r24
    322c:	f9 01       	movw	r30, r18
    322e:	85 91       	lpm	r24, Z+
    3230:	95 91       	lpm	r25, Z+
    3232:	a5 91       	lpm	r26, Z+
    3234:	b4 91       	lpm	r27, Z+
    3236:	9f 01       	movw	r18, r30
    3238:	fe 01       	movw	r30, r28
    323a:	ef 51       	subi	r30, 0x1F	; 31
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 83       	st	Z, r24
    3240:	91 83       	std	Z+1, r25	; 0x01
    3242:	a2 83       	std	Z+2, r26	; 0x02
    3244:	b3 83       	std	Z+3, r27	; 0x03
    3246:	fe 01       	movw	r30, r28
    3248:	eb 51       	subi	r30, 0x1B	; 27
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	31 83       	std	Z+1, r19	; 0x01
    324e:	20 83       	st	Z, r18
    3250:	fe 01       	movw	r30, r28
    3252:	ef 51       	subi	r30, 0x1F	; 31
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	20 81       	ld	r18, Z
    3258:	31 81       	ldd	r19, Z+1	; 0x01
    325a:	42 81       	ldd	r20, Z+2	; 0x02
    325c:	53 81       	ldd	r21, Z+3	; 0x03
    325e:	fe 01       	movw	r30, r28
    3260:	e6 5d       	subi	r30, 0xD6	; 214
    3262:	fe 4f       	sbci	r31, 0xFE	; 254
    3264:	80 81       	ld	r24, Z
    3266:	91 81       	ldd	r25, Z+1	; 0x01
    3268:	a2 81       	ldd	r26, Z+2	; 0x02
    326a:	b3 81       	ldd	r27, Z+3	; 0x03
    326c:	82 2b       	or	r24, r18
    326e:	93 2b       	or	r25, r19
    3270:	a4 2b       	or	r26, r20
    3272:	b5 2b       	or	r27, r21
    3274:	fe 01       	movw	r30, r28
    3276:	e6 5d       	subi	r30, 0xD6	; 214
    3278:	fe 4f       	sbci	r31, 0xFE	; 254
    327a:	80 83       	st	Z, r24
    327c:	91 83       	std	Z+1, r25	; 0x01
    327e:	a2 83       	std	Z+2, r26	; 0x02
    3280:	b3 83       	std	Z+3, r27	; 0x03
    3282:	38 c0       	rjmp	.+112    	; 0x32f4 <main+0x181e>
      break;
    case 4:
      lLEDs |= pgm_read_dword(words+def_mp4);
    3284:	fe 01       	movw	r30, r28
    3286:	e1 52       	subi	r30, 0x21	; 33
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	8c eb       	ldi	r24, 0xBC	; 188
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	91 83       	std	Z+1, r25	; 0x01
    3290:	80 83       	st	Z, r24
    3292:	fe 01       	movw	r30, r28
    3294:	e1 52       	subi	r30, 0x21	; 33
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	80 81       	ld	r24, Z
    329a:	91 81       	ldd	r25, Z+1	; 0x01
    329c:	9c 01       	movw	r18, r24
    329e:	f9 01       	movw	r30, r18
    32a0:	85 91       	lpm	r24, Z+
    32a2:	95 91       	lpm	r25, Z+
    32a4:	a5 91       	lpm	r26, Z+
    32a6:	b4 91       	lpm	r27, Z+
    32a8:	9f 01       	movw	r18, r30
    32aa:	fe 01       	movw	r30, r28
    32ac:	e5 52       	subi	r30, 0x25	; 37
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	80 83       	st	Z, r24
    32b2:	91 83       	std	Z+1, r25	; 0x01
    32b4:	a2 83       	std	Z+2, r26	; 0x02
    32b6:	b3 83       	std	Z+3, r27	; 0x03
    32b8:	fe 01       	movw	r30, r28
    32ba:	e1 52       	subi	r30, 0x21	; 33
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	31 83       	std	Z+1, r19	; 0x01
    32c0:	20 83       	st	Z, r18
    32c2:	fe 01       	movw	r30, r28
    32c4:	e5 52       	subi	r30, 0x25	; 37
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	20 81       	ld	r18, Z
    32ca:	31 81       	ldd	r19, Z+1	; 0x01
    32cc:	42 81       	ldd	r20, Z+2	; 0x02
    32ce:	53 81       	ldd	r21, Z+3	; 0x03
    32d0:	fe 01       	movw	r30, r28
    32d2:	e6 5d       	subi	r30, 0xD6	; 214
    32d4:	fe 4f       	sbci	r31, 0xFE	; 254
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	a2 81       	ldd	r26, Z+2	; 0x02
    32dc:	b3 81       	ldd	r27, Z+3	; 0x03
    32de:	82 2b       	or	r24, r18
    32e0:	93 2b       	or	r25, r19
    32e2:	a4 2b       	or	r26, r20
    32e4:	b5 2b       	or	r27, r21
    32e6:	fe 01       	movw	r30, r28
    32e8:	e6 5d       	subi	r30, 0xD6	; 214
    32ea:	fe 4f       	sbci	r31, 0xFE	; 254
    32ec:	80 83       	st	Z, r24
    32ee:	91 83       	std	Z+1, r25	; 0x01
    32f0:	a2 83       	std	Z+2, r26	; 0x02
    32f2:	b3 83       	std	Z+3, r27	; 0x03
      break;
    }
    uint8_t hoffset = 0;
    32f4:	fe 01       	movw	r30, r28
    32f6:	e7 5d       	subi	r30, 0xD7	; 215
    32f8:	fe 4f       	sbci	r31, 0xFE	; 254
    32fa:	10 82       	st	Z, r1
    if (time.mm < 5)
    32fc:	fe 01       	movw	r30, r28
    32fe:	e5 5b       	subi	r30, 0xB5	; 181
    3300:	fe 4f       	sbci	r31, 0xFE	; 254
    3302:	84 81       	ldd	r24, Z+4	; 0x04
    3304:	85 30       	cpi	r24, 0x05	; 5
    3306:	08 f4       	brcc	.+2      	; 0x330a <main+0x1834>
    3308:	82 c5       	rjmp	.+2820   	; 0x3e0e <main+0x2338>
    {
    }
    else if (time.mm < 10)
    330a:	fe 01       	movw	r30, r28
    330c:	e5 5b       	subi	r30, 0xB5	; 181
    330e:	fe 4f       	sbci	r31, 0xFE	; 254
    3310:	84 81       	ldd	r24, Z+4	; 0x04
    3312:	8a 30       	cpi	r24, 0x0A	; 10
    3314:	08 f0       	brcs	.+2      	; 0x3318 <main+0x1842>
    3316:	71 c0       	rjmp	.+226    	; 0x33fa <main+0x1924>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    3318:	fe 01       	movw	r30, r28
    331a:	e7 52       	subi	r30, 0x27	; 39
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	8c e5       	ldi	r24, 0x5C	; 92
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	91 83       	std	Z+1, r25	; 0x01
    3324:	80 83       	st	Z, r24
    3326:	fe 01       	movw	r30, r28
    3328:	e7 52       	subi	r30, 0x27	; 39
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	80 81       	ld	r24, Z
    332e:	91 81       	ldd	r25, Z+1	; 0x01
    3330:	9c 01       	movw	r18, r24
    3332:	f9 01       	movw	r30, r18
    3334:	85 91       	lpm	r24, Z+
    3336:	95 91       	lpm	r25, Z+
    3338:	a5 91       	lpm	r26, Z+
    333a:	b4 91       	lpm	r27, Z+
    333c:	9f 01       	movw	r18, r30
    333e:	fe 01       	movw	r30, r28
    3340:	eb 52       	subi	r30, 0x2B	; 43
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	80 83       	st	Z, r24
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	a2 83       	std	Z+2, r26	; 0x02
    334a:	b3 83       	std	Z+3, r27	; 0x03
    334c:	fe 01       	movw	r30, r28
    334e:	e7 52       	subi	r30, 0x27	; 39
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	31 83       	std	Z+1, r19	; 0x01
    3354:	20 83       	st	Z, r18
    3356:	fe 01       	movw	r30, r28
    3358:	eb 52       	subi	r30, 0x2B	; 43
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	20 81       	ld	r18, Z
    335e:	31 81       	ldd	r19, Z+1	; 0x01
    3360:	42 81       	ldd	r20, Z+2	; 0x02
    3362:	53 81       	ldd	r21, Z+3	; 0x03
    3364:	fe 01       	movw	r30, r28
    3366:	e6 5d       	subi	r30, 0xD6	; 214
    3368:	fe 4f       	sbci	r31, 0xFE	; 254
    336a:	80 81       	ld	r24, Z
    336c:	91 81       	ldd	r25, Z+1	; 0x01
    336e:	a2 81       	ldd	r26, Z+2	; 0x02
    3370:	b3 81       	ldd	r27, Z+3	; 0x03
    3372:	82 2b       	or	r24, r18
    3374:	93 2b       	or	r25, r19
    3376:	a4 2b       	or	r26, r20
    3378:	b5 2b       	or	r27, r21
    337a:	fe 01       	movw	r30, r28
    337c:	e6 5d       	subi	r30, 0xD6	; 214
    337e:	fe 4f       	sbci	r31, 0xFE	; 254
    3380:	80 83       	st	Z, r24
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	a2 83       	std	Z+2, r26	; 0x02
    3386:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    3388:	fe 01       	movw	r30, r28
    338a:	ed 52       	subi	r30, 0x2D	; 45
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 e7       	ldi	r24, 0x70	; 112
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	80 83       	st	Z, r24
    3396:	fe 01       	movw	r30, r28
    3398:	ed 52       	subi	r30, 0x2D	; 45
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	80 81       	ld	r24, Z
    339e:	91 81       	ldd	r25, Z+1	; 0x01
    33a0:	9c 01       	movw	r18, r24
    33a2:	f9 01       	movw	r30, r18
    33a4:	85 91       	lpm	r24, Z+
    33a6:	95 91       	lpm	r25, Z+
    33a8:	a5 91       	lpm	r26, Z+
    33aa:	b4 91       	lpm	r27, Z+
    33ac:	9f 01       	movw	r18, r30
    33ae:	fe 01       	movw	r30, r28
    33b0:	e1 53       	subi	r30, 0x31	; 49
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	80 83       	st	Z, r24
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	a2 83       	std	Z+2, r26	; 0x02
    33ba:	b3 83       	std	Z+3, r27	; 0x03
    33bc:	fe 01       	movw	r30, r28
    33be:	ed 52       	subi	r30, 0x2D	; 45
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	31 83       	std	Z+1, r19	; 0x01
    33c4:	20 83       	st	Z, r18
    33c6:	fe 01       	movw	r30, r28
    33c8:	e1 53       	subi	r30, 0x31	; 49
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	20 81       	ld	r18, Z
    33ce:	31 81       	ldd	r19, Z+1	; 0x01
    33d0:	42 81       	ldd	r20, Z+2	; 0x02
    33d2:	53 81       	ldd	r21, Z+3	; 0x03
    33d4:	fe 01       	movw	r30, r28
    33d6:	e6 5d       	subi	r30, 0xD6	; 214
    33d8:	fe 4f       	sbci	r31, 0xFE	; 254
    33da:	80 81       	ld	r24, Z
    33dc:	91 81       	ldd	r25, Z+1	; 0x01
    33de:	a2 81       	ldd	r26, Z+2	; 0x02
    33e0:	b3 81       	ldd	r27, Z+3	; 0x03
    33e2:	82 2b       	or	r24, r18
    33e4:	93 2b       	or	r25, r19
    33e6:	a4 2b       	or	r26, r20
    33e8:	b5 2b       	or	r27, r21
    33ea:	fe 01       	movw	r30, r28
    33ec:	e6 5d       	subi	r30, 0xD6	; 214
    33ee:	fe 4f       	sbci	r31, 0xFE	; 254
    33f0:	80 83       	st	Z, r24
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	a2 83       	std	Z+2, r26	; 0x02
    33f6:	b3 83       	std	Z+3, r27	; 0x03
    33f8:	0a c5       	rjmp	.+2580   	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 15)
    33fa:	fe 01       	movw	r30, r28
    33fc:	e5 5b       	subi	r30, 0xB5	; 181
    33fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3400:	84 81       	ldd	r24, Z+4	; 0x04
    3402:	8f 30       	cpi	r24, 0x0F	; 15
    3404:	08 f0       	brcs	.+2      	; 0x3408 <main+0x1932>
    3406:	71 c0       	rjmp	.+226    	; 0x34ea <main+0x1a14>
    {
      lLEDs |= pgm_read_dword(words+def_zehnM);
    3408:	fe 01       	movw	r30, r28
    340a:	e3 53       	subi	r30, 0x33	; 51
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	80 e6       	ldi	r24, 0x60	; 96
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	80 83       	st	Z, r24
    3416:	fe 01       	movw	r30, r28
    3418:	e3 53       	subi	r30, 0x33	; 51
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	9c 01       	movw	r18, r24
    3422:	f9 01       	movw	r30, r18
    3424:	85 91       	lpm	r24, Z+
    3426:	95 91       	lpm	r25, Z+
    3428:	a5 91       	lpm	r26, Z+
    342a:	b4 91       	lpm	r27, Z+
    342c:	9f 01       	movw	r18, r30
    342e:	fe 01       	movw	r30, r28
    3430:	e7 53       	subi	r30, 0x37	; 55
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 83       	st	Z, r24
    3436:	91 83       	std	Z+1, r25	; 0x01
    3438:	a2 83       	std	Z+2, r26	; 0x02
    343a:	b3 83       	std	Z+3, r27	; 0x03
    343c:	fe 01       	movw	r30, r28
    343e:	e3 53       	subi	r30, 0x33	; 51
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	31 83       	std	Z+1, r19	; 0x01
    3444:	20 83       	st	Z, r18
    3446:	fe 01       	movw	r30, r28
    3448:	e7 53       	subi	r30, 0x37	; 55
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	20 81       	ld	r18, Z
    344e:	31 81       	ldd	r19, Z+1	; 0x01
    3450:	42 81       	ldd	r20, Z+2	; 0x02
    3452:	53 81       	ldd	r21, Z+3	; 0x03
    3454:	fe 01       	movw	r30, r28
    3456:	e6 5d       	subi	r30, 0xD6	; 214
    3458:	fe 4f       	sbci	r31, 0xFE	; 254
    345a:	80 81       	ld	r24, Z
    345c:	91 81       	ldd	r25, Z+1	; 0x01
    345e:	a2 81       	ldd	r26, Z+2	; 0x02
    3460:	b3 81       	ldd	r27, Z+3	; 0x03
    3462:	82 2b       	or	r24, r18
    3464:	93 2b       	or	r25, r19
    3466:	a4 2b       	or	r26, r20
    3468:	b5 2b       	or	r27, r21
    346a:	fe 01       	movw	r30, r28
    346c:	e6 5d       	subi	r30, 0xD6	; 214
    346e:	fe 4f       	sbci	r31, 0xFE	; 254
    3470:	80 83       	st	Z, r24
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	a2 83       	std	Z+2, r26	; 0x02
    3476:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    3478:	fe 01       	movw	r30, r28
    347a:	e9 53       	subi	r30, 0x39	; 57
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	80 e7       	ldi	r24, 0x70	; 112
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	80 83       	st	Z, r24
    3486:	fe 01       	movw	r30, r28
    3488:	e9 53       	subi	r30, 0x39	; 57
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	91 81       	ldd	r25, Z+1	; 0x01
    3490:	9c 01       	movw	r18, r24
    3492:	f9 01       	movw	r30, r18
    3494:	85 91       	lpm	r24, Z+
    3496:	95 91       	lpm	r25, Z+
    3498:	a5 91       	lpm	r26, Z+
    349a:	b4 91       	lpm	r27, Z+
    349c:	9f 01       	movw	r18, r30
    349e:	fe 01       	movw	r30, r28
    34a0:	ed 53       	subi	r30, 0x3D	; 61
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 83       	st	Z, r24
    34a6:	91 83       	std	Z+1, r25	; 0x01
    34a8:	a2 83       	std	Z+2, r26	; 0x02
    34aa:	b3 83       	std	Z+3, r27	; 0x03
    34ac:	fe 01       	movw	r30, r28
    34ae:	e9 53       	subi	r30, 0x39	; 57
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	31 83       	std	Z+1, r19	; 0x01
    34b4:	20 83       	st	Z, r18
    34b6:	fe 01       	movw	r30, r28
    34b8:	ed 53       	subi	r30, 0x3D	; 61
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	20 81       	ld	r18, Z
    34be:	31 81       	ldd	r19, Z+1	; 0x01
    34c0:	42 81       	ldd	r20, Z+2	; 0x02
    34c2:	53 81       	ldd	r21, Z+3	; 0x03
    34c4:	fe 01       	movw	r30, r28
    34c6:	e6 5d       	subi	r30, 0xD6	; 214
    34c8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ca:	80 81       	ld	r24, Z
    34cc:	91 81       	ldd	r25, Z+1	; 0x01
    34ce:	a2 81       	ldd	r26, Z+2	; 0x02
    34d0:	b3 81       	ldd	r27, Z+3	; 0x03
    34d2:	82 2b       	or	r24, r18
    34d4:	93 2b       	or	r25, r19
    34d6:	a4 2b       	or	r26, r20
    34d8:	b5 2b       	or	r27, r21
    34da:	fe 01       	movw	r30, r28
    34dc:	e6 5d       	subi	r30, 0xD6	; 214
    34de:	fe 4f       	sbci	r31, 0xFE	; 254
    34e0:	80 83       	st	Z, r24
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	a2 83       	std	Z+2, r26	; 0x02
    34e6:	b3 83       	std	Z+3, r27	; 0x03
    34e8:	92 c4       	rjmp	.+2340   	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 20)
    34ea:	fe 01       	movw	r30, r28
    34ec:	e5 5b       	subi	r30, 0xB5	; 181
    34ee:	fe 4f       	sbci	r31, 0xFE	; 254
    34f0:	84 81       	ldd	r24, Z+4	; 0x04
    34f2:	84 31       	cpi	r24, 0x14	; 20
    34f4:	08 f0       	brcs	.+2      	; 0x34f8 <main+0x1a22>
    34f6:	71 c0       	rjmp	.+226    	; 0x35da <main+0x1b04>
    {
      lLEDs |= pgm_read_dword(words+def_viertelM);
    34f8:	fe 01       	movw	r30, r28
    34fa:	ef 53       	subi	r30, 0x3F	; 63
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	8c e6       	ldi	r24, 0x6C	; 108
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	80 83       	st	Z, r24
    3506:	fe 01       	movw	r30, r28
    3508:	ef 53       	subi	r30, 0x3F	; 63
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	9c 01       	movw	r18, r24
    3512:	f9 01       	movw	r30, r18
    3514:	85 91       	lpm	r24, Z+
    3516:	95 91       	lpm	r25, Z+
    3518:	a5 91       	lpm	r26, Z+
    351a:	b4 91       	lpm	r27, Z+
    351c:	9f 01       	movw	r18, r30
    351e:	fe 01       	movw	r30, r28
    3520:	e3 54       	subi	r30, 0x43	; 67
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	80 83       	st	Z, r24
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	a2 83       	std	Z+2, r26	; 0x02
    352a:	b3 83       	std	Z+3, r27	; 0x03
    352c:	fe 01       	movw	r30, r28
    352e:	ef 53       	subi	r30, 0x3F	; 63
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	31 83       	std	Z+1, r19	; 0x01
    3534:	20 83       	st	Z, r18
    3536:	fe 01       	movw	r30, r28
    3538:	e3 54       	subi	r30, 0x43	; 67
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	20 81       	ld	r18, Z
    353e:	31 81       	ldd	r19, Z+1	; 0x01
    3540:	42 81       	ldd	r20, Z+2	; 0x02
    3542:	53 81       	ldd	r21, Z+3	; 0x03
    3544:	fe 01       	movw	r30, r28
    3546:	e6 5d       	subi	r30, 0xD6	; 214
    3548:	fe 4f       	sbci	r31, 0xFE	; 254
    354a:	80 81       	ld	r24, Z
    354c:	91 81       	ldd	r25, Z+1	; 0x01
    354e:	a2 81       	ldd	r26, Z+2	; 0x02
    3550:	b3 81       	ldd	r27, Z+3	; 0x03
    3552:	82 2b       	or	r24, r18
    3554:	93 2b       	or	r25, r19
    3556:	a4 2b       	or	r26, r20
    3558:	b5 2b       	or	r27, r21
    355a:	fe 01       	movw	r30, r28
    355c:	e6 5d       	subi	r30, 0xD6	; 214
    355e:	fe 4f       	sbci	r31, 0xFE	; 254
    3560:	80 83       	st	Z, r24
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	a2 83       	std	Z+2, r26	; 0x02
    3566:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    3568:	fe 01       	movw	r30, r28
    356a:	e5 54       	subi	r30, 0x45	; 69
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	80 e7       	ldi	r24, 0x70	; 112
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	91 83       	std	Z+1, r25	; 0x01
    3574:	80 83       	st	Z, r24
    3576:	fe 01       	movw	r30, r28
    3578:	e5 54       	subi	r30, 0x45	; 69
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	9c 01       	movw	r18, r24
    3582:	f9 01       	movw	r30, r18
    3584:	85 91       	lpm	r24, Z+
    3586:	95 91       	lpm	r25, Z+
    3588:	a5 91       	lpm	r26, Z+
    358a:	b4 91       	lpm	r27, Z+
    358c:	9f 01       	movw	r18, r30
    358e:	fe 01       	movw	r30, r28
    3590:	e9 54       	subi	r30, 0x49	; 73
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	80 83       	st	Z, r24
    3596:	91 83       	std	Z+1, r25	; 0x01
    3598:	a2 83       	std	Z+2, r26	; 0x02
    359a:	b3 83       	std	Z+3, r27	; 0x03
    359c:	fe 01       	movw	r30, r28
    359e:	e5 54       	subi	r30, 0x45	; 69
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	31 83       	std	Z+1, r19	; 0x01
    35a4:	20 83       	st	Z, r18
    35a6:	fe 01       	movw	r30, r28
    35a8:	e9 54       	subi	r30, 0x49	; 73
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	20 81       	ld	r18, Z
    35ae:	31 81       	ldd	r19, Z+1	; 0x01
    35b0:	42 81       	ldd	r20, Z+2	; 0x02
    35b2:	53 81       	ldd	r21, Z+3	; 0x03
    35b4:	fe 01       	movw	r30, r28
    35b6:	e6 5d       	subi	r30, 0xD6	; 214
    35b8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ba:	80 81       	ld	r24, Z
    35bc:	91 81       	ldd	r25, Z+1	; 0x01
    35be:	a2 81       	ldd	r26, Z+2	; 0x02
    35c0:	b3 81       	ldd	r27, Z+3	; 0x03
    35c2:	82 2b       	or	r24, r18
    35c4:	93 2b       	or	r25, r19
    35c6:	a4 2b       	or	r26, r20
    35c8:	b5 2b       	or	r27, r21
    35ca:	fe 01       	movw	r30, r28
    35cc:	e6 5d       	subi	r30, 0xD6	; 214
    35ce:	fe 4f       	sbci	r31, 0xFE	; 254
    35d0:	80 83       	st	Z, r24
    35d2:	91 83       	std	Z+1, r25	; 0x01
    35d4:	a2 83       	std	Z+2, r26	; 0x02
    35d6:	b3 83       	std	Z+3, r27	; 0x03
    35d8:	1a c4       	rjmp	.+2100   	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 25)
    35da:	fe 01       	movw	r30, r28
    35dc:	e5 5b       	subi	r30, 0xB5	; 181
    35de:	fe 4f       	sbci	r31, 0xFE	; 254
    35e0:	84 81       	ldd	r24, Z+4	; 0x04
    35e2:	89 31       	cpi	r24, 0x19	; 25
    35e4:	08 f0       	brcs	.+2      	; 0x35e8 <main+0x1b12>
    35e6:	71 c0       	rjmp	.+226    	; 0x36ca <main+0x1bf4>
    {
      lLEDs |= pgm_read_dword(words+def_zwanzigM);
    35e8:	fe 01       	movw	r30, r28
    35ea:	eb 54       	subi	r30, 0x4B	; 75
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	84 e6       	ldi	r24, 0x64	; 100
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	80 83       	st	Z, r24
    35f6:	fe 01       	movw	r30, r28
    35f8:	eb 54       	subi	r30, 0x4B	; 75
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	9c 01       	movw	r18, r24
    3602:	f9 01       	movw	r30, r18
    3604:	85 91       	lpm	r24, Z+
    3606:	95 91       	lpm	r25, Z+
    3608:	a5 91       	lpm	r26, Z+
    360a:	b4 91       	lpm	r27, Z+
    360c:	9f 01       	movw	r18, r30
    360e:	fe 01       	movw	r30, r28
    3610:	ef 54       	subi	r30, 0x4F	; 79
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 83       	st	Z, r24
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	a2 83       	std	Z+2, r26	; 0x02
    361a:	b3 83       	std	Z+3, r27	; 0x03
    361c:	fe 01       	movw	r30, r28
    361e:	eb 54       	subi	r30, 0x4B	; 75
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	31 83       	std	Z+1, r19	; 0x01
    3624:	20 83       	st	Z, r18
    3626:	fe 01       	movw	r30, r28
    3628:	ef 54       	subi	r30, 0x4F	; 79
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	20 81       	ld	r18, Z
    362e:	31 81       	ldd	r19, Z+1	; 0x01
    3630:	42 81       	ldd	r20, Z+2	; 0x02
    3632:	53 81       	ldd	r21, Z+3	; 0x03
    3634:	fe 01       	movw	r30, r28
    3636:	e6 5d       	subi	r30, 0xD6	; 214
    3638:	fe 4f       	sbci	r31, 0xFE	; 254
    363a:	80 81       	ld	r24, Z
    363c:	91 81       	ldd	r25, Z+1	; 0x01
    363e:	a2 81       	ldd	r26, Z+2	; 0x02
    3640:	b3 81       	ldd	r27, Z+3	; 0x03
    3642:	82 2b       	or	r24, r18
    3644:	93 2b       	or	r25, r19
    3646:	a4 2b       	or	r26, r20
    3648:	b5 2b       	or	r27, r21
    364a:	fe 01       	movw	r30, r28
    364c:	e6 5d       	subi	r30, 0xD6	; 214
    364e:	fe 4f       	sbci	r31, 0xFE	; 254
    3650:	80 83       	st	Z, r24
    3652:	91 83       	std	Z+1, r25	; 0x01
    3654:	a2 83       	std	Z+2, r26	; 0x02
    3656:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    3658:	fe 01       	movw	r30, r28
    365a:	e1 55       	subi	r30, 0x51	; 81
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	80 e7       	ldi	r24, 0x70	; 112
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	91 83       	std	Z+1, r25	; 0x01
    3664:	80 83       	st	Z, r24
    3666:	fe 01       	movw	r30, r28
    3668:	e1 55       	subi	r30, 0x51	; 81
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	80 81       	ld	r24, Z
    366e:	91 81       	ldd	r25, Z+1	; 0x01
    3670:	9c 01       	movw	r18, r24
    3672:	f9 01       	movw	r30, r18
    3674:	85 91       	lpm	r24, Z+
    3676:	95 91       	lpm	r25, Z+
    3678:	a5 91       	lpm	r26, Z+
    367a:	b4 91       	lpm	r27, Z+
    367c:	9f 01       	movw	r18, r30
    367e:	fe 01       	movw	r30, r28
    3680:	e5 55       	subi	r30, 0x55	; 85
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	80 83       	st	Z, r24
    3686:	91 83       	std	Z+1, r25	; 0x01
    3688:	a2 83       	std	Z+2, r26	; 0x02
    368a:	b3 83       	std	Z+3, r27	; 0x03
    368c:	fe 01       	movw	r30, r28
    368e:	e1 55       	subi	r30, 0x51	; 81
    3690:	ff 4f       	sbci	r31, 0xFF	; 255
    3692:	31 83       	std	Z+1, r19	; 0x01
    3694:	20 83       	st	Z, r18
    3696:	fe 01       	movw	r30, r28
    3698:	e5 55       	subi	r30, 0x55	; 85
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	20 81       	ld	r18, Z
    369e:	31 81       	ldd	r19, Z+1	; 0x01
    36a0:	42 81       	ldd	r20, Z+2	; 0x02
    36a2:	53 81       	ldd	r21, Z+3	; 0x03
    36a4:	fe 01       	movw	r30, r28
    36a6:	e6 5d       	subi	r30, 0xD6	; 214
    36a8:	fe 4f       	sbci	r31, 0xFE	; 254
    36aa:	80 81       	ld	r24, Z
    36ac:	91 81       	ldd	r25, Z+1	; 0x01
    36ae:	a2 81       	ldd	r26, Z+2	; 0x02
    36b0:	b3 81       	ldd	r27, Z+3	; 0x03
    36b2:	82 2b       	or	r24, r18
    36b4:	93 2b       	or	r25, r19
    36b6:	a4 2b       	or	r26, r20
    36b8:	b5 2b       	or	r27, r21
    36ba:	fe 01       	movw	r30, r28
    36bc:	e6 5d       	subi	r30, 0xD6	; 214
    36be:	fe 4f       	sbci	r31, 0xFE	; 254
    36c0:	80 83       	st	Z, r24
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	a2 83       	std	Z+2, r26	; 0x02
    36c6:	b3 83       	std	Z+3, r27	; 0x03
    36c8:	a2 c3       	rjmp	.+1860   	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 30)
    36ca:	fe 01       	movw	r30, r28
    36cc:	e5 5b       	subi	r30, 0xB5	; 181
    36ce:	fe 4f       	sbci	r31, 0xFE	; 254
    36d0:	84 81       	ldd	r24, Z+4	; 0x04
    36d2:	8e 31       	cpi	r24, 0x1E	; 30
    36d4:	08 f0       	brcs	.+2      	; 0x36d8 <main+0x1c02>
    36d6:	ae c0       	rjmp	.+348    	; 0x3834 <main+0x1d5e>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    36d8:	fe 01       	movw	r30, r28
    36da:	e7 55       	subi	r30, 0x57	; 87
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	8c e5       	ldi	r24, 0x5C	; 92
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	91 83       	std	Z+1, r25	; 0x01
    36e4:	80 83       	st	Z, r24
    36e6:	fe 01       	movw	r30, r28
    36e8:	e7 55       	subi	r30, 0x57	; 87
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 81       	ld	r24, Z
    36ee:	91 81       	ldd	r25, Z+1	; 0x01
    36f0:	9c 01       	movw	r18, r24
    36f2:	f9 01       	movw	r30, r18
    36f4:	85 91       	lpm	r24, Z+
    36f6:	95 91       	lpm	r25, Z+
    36f8:	a5 91       	lpm	r26, Z+
    36fa:	b4 91       	lpm	r27, Z+
    36fc:	9f 01       	movw	r18, r30
    36fe:	fe 01       	movw	r30, r28
    3700:	eb 55       	subi	r30, 0x5B	; 91
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	80 83       	st	Z, r24
    3706:	91 83       	std	Z+1, r25	; 0x01
    3708:	a2 83       	std	Z+2, r26	; 0x02
    370a:	b3 83       	std	Z+3, r27	; 0x03
    370c:	fe 01       	movw	r30, r28
    370e:	e7 55       	subi	r30, 0x57	; 87
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	31 83       	std	Z+1, r19	; 0x01
    3714:	20 83       	st	Z, r18
    3716:	fe 01       	movw	r30, r28
    3718:	eb 55       	subi	r30, 0x5B	; 91
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	20 81       	ld	r18, Z
    371e:	31 81       	ldd	r19, Z+1	; 0x01
    3720:	42 81       	ldd	r20, Z+2	; 0x02
    3722:	53 81       	ldd	r21, Z+3	; 0x03
    3724:	fe 01       	movw	r30, r28
    3726:	e6 5d       	subi	r30, 0xD6	; 214
    3728:	fe 4f       	sbci	r31, 0xFE	; 254
    372a:	80 81       	ld	r24, Z
    372c:	91 81       	ldd	r25, Z+1	; 0x01
    372e:	a2 81       	ldd	r26, Z+2	; 0x02
    3730:	b3 81       	ldd	r27, Z+3	; 0x03
    3732:	82 2b       	or	r24, r18
    3734:	93 2b       	or	r25, r19
    3736:	a4 2b       	or	r26, r20
    3738:	b5 2b       	or	r27, r21
    373a:	fe 01       	movw	r30, r28
    373c:	e6 5d       	subi	r30, 0xD6	; 214
    373e:	fe 4f       	sbci	r31, 0xFE	; 254
    3740:	80 83       	st	Z, r24
    3742:	91 83       	std	Z+1, r25	; 0x01
    3744:	a2 83       	std	Z+2, r26	; 0x02
    3746:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    3748:	fe 01       	movw	r30, r28
    374a:	ed 55       	subi	r30, 0x5D	; 93
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	84 e7       	ldi	r24, 0x74	; 116
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	91 83       	std	Z+1, r25	; 0x01
    3754:	80 83       	st	Z, r24
    3756:	fe 01       	movw	r30, r28
    3758:	ed 55       	subi	r30, 0x5D	; 93
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	80 81       	ld	r24, Z
    375e:	91 81       	ldd	r25, Z+1	; 0x01
    3760:	9c 01       	movw	r18, r24
    3762:	f9 01       	movw	r30, r18
    3764:	85 91       	lpm	r24, Z+
    3766:	95 91       	lpm	r25, Z+
    3768:	a5 91       	lpm	r26, Z+
    376a:	b4 91       	lpm	r27, Z+
    376c:	9f 01       	movw	r18, r30
    376e:	fe 01       	movw	r30, r28
    3770:	e1 56       	subi	r30, 0x61	; 97
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	80 83       	st	Z, r24
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	a2 83       	std	Z+2, r26	; 0x02
    377a:	b3 83       	std	Z+3, r27	; 0x03
    377c:	fe 01       	movw	r30, r28
    377e:	ed 55       	subi	r30, 0x5D	; 93
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	31 83       	std	Z+1, r19	; 0x01
    3784:	20 83       	st	Z, r18
    3786:	fe 01       	movw	r30, r28
    3788:	e1 56       	subi	r30, 0x61	; 97
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	20 81       	ld	r18, Z
    378e:	31 81       	ldd	r19, Z+1	; 0x01
    3790:	42 81       	ldd	r20, Z+2	; 0x02
    3792:	53 81       	ldd	r21, Z+3	; 0x03
    3794:	fe 01       	movw	r30, r28
    3796:	e6 5d       	subi	r30, 0xD6	; 214
    3798:	fe 4f       	sbci	r31, 0xFE	; 254
    379a:	80 81       	ld	r24, Z
    379c:	91 81       	ldd	r25, Z+1	; 0x01
    379e:	a2 81       	ldd	r26, Z+2	; 0x02
    37a0:	b3 81       	ldd	r27, Z+3	; 0x03
    37a2:	82 2b       	or	r24, r18
    37a4:	93 2b       	or	r25, r19
    37a6:	a4 2b       	or	r26, r20
    37a8:	b5 2b       	or	r27, r21
    37aa:	fe 01       	movw	r30, r28
    37ac:	e6 5d       	subi	r30, 0xD6	; 214
    37ae:	fe 4f       	sbci	r31, 0xFE	; 254
    37b0:	80 83       	st	Z, r24
    37b2:	91 83       	std	Z+1, r25	; 0x01
    37b4:	a2 83       	std	Z+2, r26	; 0x02
    37b6:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_halb);
    37b8:	fe 01       	movw	r30, r28
    37ba:	e3 56       	subi	r30, 0x63	; 99
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	88 e7       	ldi	r24, 0x78	; 120
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	91 83       	std	Z+1, r25	; 0x01
    37c4:	80 83       	st	Z, r24
    37c6:	fe 01       	movw	r30, r28
    37c8:	e3 56       	subi	r30, 0x63	; 99
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 81       	ld	r24, Z
    37ce:	91 81       	ldd	r25, Z+1	; 0x01
    37d0:	9c 01       	movw	r18, r24
    37d2:	f9 01       	movw	r30, r18
    37d4:	85 91       	lpm	r24, Z+
    37d6:	95 91       	lpm	r25, Z+
    37d8:	a5 91       	lpm	r26, Z+
    37da:	b4 91       	lpm	r27, Z+
    37dc:	9f 01       	movw	r18, r30
    37de:	fe 01       	movw	r30, r28
    37e0:	e7 56       	subi	r30, 0x67	; 103
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 83       	st	Z, r24
    37e6:	91 83       	std	Z+1, r25	; 0x01
    37e8:	a2 83       	std	Z+2, r26	; 0x02
    37ea:	b3 83       	std	Z+3, r27	; 0x03
    37ec:	fe 01       	movw	r30, r28
    37ee:	e3 56       	subi	r30, 0x63	; 99
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	31 83       	std	Z+1, r19	; 0x01
    37f4:	20 83       	st	Z, r18
    37f6:	fe 01       	movw	r30, r28
    37f8:	e7 56       	subi	r30, 0x67	; 103
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	20 81       	ld	r18, Z
    37fe:	31 81       	ldd	r19, Z+1	; 0x01
    3800:	42 81       	ldd	r20, Z+2	; 0x02
    3802:	53 81       	ldd	r21, Z+3	; 0x03
    3804:	fe 01       	movw	r30, r28
    3806:	e6 5d       	subi	r30, 0xD6	; 214
    3808:	fe 4f       	sbci	r31, 0xFE	; 254
    380a:	80 81       	ld	r24, Z
    380c:	91 81       	ldd	r25, Z+1	; 0x01
    380e:	a2 81       	ldd	r26, Z+2	; 0x02
    3810:	b3 81       	ldd	r27, Z+3	; 0x03
    3812:	82 2b       	or	r24, r18
    3814:	93 2b       	or	r25, r19
    3816:	a4 2b       	or	r26, r20
    3818:	b5 2b       	or	r27, r21
    381a:	fe 01       	movw	r30, r28
    381c:	e6 5d       	subi	r30, 0xD6	; 214
    381e:	fe 4f       	sbci	r31, 0xFE	; 254
    3820:	80 83       	st	Z, r24
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	a2 83       	std	Z+2, r26	; 0x02
    3826:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    3828:	fe 01       	movw	r30, r28
    382a:	e7 5d       	subi	r30, 0xD7	; 215
    382c:	fe 4f       	sbci	r31, 0xFE	; 254
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	80 83       	st	Z, r24
    3832:	ed c2       	rjmp	.+1498   	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 35)
    3834:	fe 01       	movw	r30, r28
    3836:	e5 5b       	subi	r30, 0xB5	; 181
    3838:	fe 4f       	sbci	r31, 0xFE	; 254
    383a:	84 81       	ldd	r24, Z+4	; 0x04
    383c:	83 32       	cpi	r24, 0x23	; 35
    383e:	08 f0       	brcs	.+2      	; 0x3842 <main+0x1d6c>
    3840:	3e c0       	rjmp	.+124    	; 0x38be <main+0x1de8>
    {
      lLEDs |= pgm_read_dword(words+def_halb);
    3842:	fe 01       	movw	r30, r28
    3844:	e9 56       	subi	r30, 0x69	; 105
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	88 e7       	ldi	r24, 0x78	; 120
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	91 83       	std	Z+1, r25	; 0x01
    384e:	80 83       	st	Z, r24
    3850:	fe 01       	movw	r30, r28
    3852:	e9 56       	subi	r30, 0x69	; 105
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 81       	ld	r24, Z
    3858:	91 81       	ldd	r25, Z+1	; 0x01
    385a:	9c 01       	movw	r18, r24
    385c:	f9 01       	movw	r30, r18
    385e:	85 91       	lpm	r24, Z+
    3860:	95 91       	lpm	r25, Z+
    3862:	a5 91       	lpm	r26, Z+
    3864:	b4 91       	lpm	r27, Z+
    3866:	9f 01       	movw	r18, r30
    3868:	fe 01       	movw	r30, r28
    386a:	ed 56       	subi	r30, 0x6D	; 109
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	80 83       	st	Z, r24
    3870:	91 83       	std	Z+1, r25	; 0x01
    3872:	a2 83       	std	Z+2, r26	; 0x02
    3874:	b3 83       	std	Z+3, r27	; 0x03
    3876:	fe 01       	movw	r30, r28
    3878:	e9 56       	subi	r30, 0x69	; 105
    387a:	ff 4f       	sbci	r31, 0xFF	; 255
    387c:	31 83       	std	Z+1, r19	; 0x01
    387e:	20 83       	st	Z, r18
    3880:	fe 01       	movw	r30, r28
    3882:	ed 56       	subi	r30, 0x6D	; 109
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	20 81       	ld	r18, Z
    3888:	31 81       	ldd	r19, Z+1	; 0x01
    388a:	42 81       	ldd	r20, Z+2	; 0x02
    388c:	53 81       	ldd	r21, Z+3	; 0x03
    388e:	fe 01       	movw	r30, r28
    3890:	e6 5d       	subi	r30, 0xD6	; 214
    3892:	fe 4f       	sbci	r31, 0xFE	; 254
    3894:	80 81       	ld	r24, Z
    3896:	91 81       	ldd	r25, Z+1	; 0x01
    3898:	a2 81       	ldd	r26, Z+2	; 0x02
    389a:	b3 81       	ldd	r27, Z+3	; 0x03
    389c:	82 2b       	or	r24, r18
    389e:	93 2b       	or	r25, r19
    38a0:	a4 2b       	or	r26, r20
    38a2:	b5 2b       	or	r27, r21
    38a4:	fe 01       	movw	r30, r28
    38a6:	e6 5d       	subi	r30, 0xD6	; 214
    38a8:	fe 4f       	sbci	r31, 0xFE	; 254
    38aa:	80 83       	st	Z, r24
    38ac:	91 83       	std	Z+1, r25	; 0x01
    38ae:	a2 83       	std	Z+2, r26	; 0x02
    38b0:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    38b2:	fe 01       	movw	r30, r28
    38b4:	e7 5d       	subi	r30, 0xD7	; 215
    38b6:	fe 4f       	sbci	r31, 0xFE	; 254
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	80 83       	st	Z, r24
    38bc:	a8 c2       	rjmp	.+1360   	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 40)
    38be:	fe 01       	movw	r30, r28
    38c0:	e5 5b       	subi	r30, 0xB5	; 181
    38c2:	fe 4f       	sbci	r31, 0xFE	; 254
    38c4:	84 81       	ldd	r24, Z+4	; 0x04
    38c6:	88 32       	cpi	r24, 0x28	; 40
    38c8:	08 f0       	brcs	.+2      	; 0x38cc <main+0x1df6>
    38ca:	ae c0       	rjmp	.+348    	; 0x3a28 <main+0x1f52>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    38cc:	fe 01       	movw	r30, r28
    38ce:	ef 56       	subi	r30, 0x6F	; 111
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	8c e5       	ldi	r24, 0x5C	; 92
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	91 83       	std	Z+1, r25	; 0x01
    38d8:	80 83       	st	Z, r24
    38da:	fe 01       	movw	r30, r28
    38dc:	ef 56       	subi	r30, 0x6F	; 111
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	80 81       	ld	r24, Z
    38e2:	91 81       	ldd	r25, Z+1	; 0x01
    38e4:	9c 01       	movw	r18, r24
    38e6:	f9 01       	movw	r30, r18
    38e8:	85 91       	lpm	r24, Z+
    38ea:	95 91       	lpm	r25, Z+
    38ec:	a5 91       	lpm	r26, Z+
    38ee:	b4 91       	lpm	r27, Z+
    38f0:	9f 01       	movw	r18, r30
    38f2:	fe 01       	movw	r30, r28
    38f4:	e3 57       	subi	r30, 0x73	; 115
    38f6:	ff 4f       	sbci	r31, 0xFF	; 255
    38f8:	80 83       	st	Z, r24
    38fa:	91 83       	std	Z+1, r25	; 0x01
    38fc:	a2 83       	std	Z+2, r26	; 0x02
    38fe:	b3 83       	std	Z+3, r27	; 0x03
    3900:	fe 01       	movw	r30, r28
    3902:	ef 56       	subi	r30, 0x6F	; 111
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	31 83       	std	Z+1, r19	; 0x01
    3908:	20 83       	st	Z, r18
    390a:	fe 01       	movw	r30, r28
    390c:	e3 57       	subi	r30, 0x73	; 115
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	20 81       	ld	r18, Z
    3912:	31 81       	ldd	r19, Z+1	; 0x01
    3914:	42 81       	ldd	r20, Z+2	; 0x02
    3916:	53 81       	ldd	r21, Z+3	; 0x03
    3918:	fe 01       	movw	r30, r28
    391a:	e6 5d       	subi	r30, 0xD6	; 214
    391c:	fe 4f       	sbci	r31, 0xFE	; 254
    391e:	80 81       	ld	r24, Z
    3920:	91 81       	ldd	r25, Z+1	; 0x01
    3922:	a2 81       	ldd	r26, Z+2	; 0x02
    3924:	b3 81       	ldd	r27, Z+3	; 0x03
    3926:	82 2b       	or	r24, r18
    3928:	93 2b       	or	r25, r19
    392a:	a4 2b       	or	r26, r20
    392c:	b5 2b       	or	r27, r21
    392e:	fe 01       	movw	r30, r28
    3930:	e6 5d       	subi	r30, 0xD6	; 214
    3932:	fe 4f       	sbci	r31, 0xFE	; 254
    3934:	80 83       	st	Z, r24
    3936:	91 83       	std	Z+1, r25	; 0x01
    3938:	a2 83       	std	Z+2, r26	; 0x02
    393a:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_nach);
    393c:	fe 01       	movw	r30, r28
    393e:	e5 57       	subi	r30, 0x75	; 117
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	80 e7       	ldi	r24, 0x70	; 112
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	80 83       	st	Z, r24
    394a:	fe 01       	movw	r30, r28
    394c:	e5 57       	subi	r30, 0x75	; 117
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	80 81       	ld	r24, Z
    3952:	91 81       	ldd	r25, Z+1	; 0x01
    3954:	9c 01       	movw	r18, r24
    3956:	f9 01       	movw	r30, r18
    3958:	85 91       	lpm	r24, Z+
    395a:	95 91       	lpm	r25, Z+
    395c:	a5 91       	lpm	r26, Z+
    395e:	b4 91       	lpm	r27, Z+
    3960:	9f 01       	movw	r18, r30
    3962:	fe 01       	movw	r30, r28
    3964:	e9 57       	subi	r30, 0x79	; 121
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 83       	st	Z, r24
    396a:	91 83       	std	Z+1, r25	; 0x01
    396c:	a2 83       	std	Z+2, r26	; 0x02
    396e:	b3 83       	std	Z+3, r27	; 0x03
    3970:	fe 01       	movw	r30, r28
    3972:	e5 57       	subi	r30, 0x75	; 117
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	31 83       	std	Z+1, r19	; 0x01
    3978:	20 83       	st	Z, r18
    397a:	fe 01       	movw	r30, r28
    397c:	e9 57       	subi	r30, 0x79	; 121
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	20 81       	ld	r18, Z
    3982:	31 81       	ldd	r19, Z+1	; 0x01
    3984:	42 81       	ldd	r20, Z+2	; 0x02
    3986:	53 81       	ldd	r21, Z+3	; 0x03
    3988:	fe 01       	movw	r30, r28
    398a:	e6 5d       	subi	r30, 0xD6	; 214
    398c:	fe 4f       	sbci	r31, 0xFE	; 254
    398e:	80 81       	ld	r24, Z
    3990:	91 81       	ldd	r25, Z+1	; 0x01
    3992:	a2 81       	ldd	r26, Z+2	; 0x02
    3994:	b3 81       	ldd	r27, Z+3	; 0x03
    3996:	82 2b       	or	r24, r18
    3998:	93 2b       	or	r25, r19
    399a:	a4 2b       	or	r26, r20
    399c:	b5 2b       	or	r27, r21
    399e:	fe 01       	movw	r30, r28
    39a0:	e6 5d       	subi	r30, 0xD6	; 214
    39a2:	fe 4f       	sbci	r31, 0xFE	; 254
    39a4:	80 83       	st	Z, r24
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	a2 83       	std	Z+2, r26	; 0x02
    39aa:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_halb);
    39ac:	fe 01       	movw	r30, r28
    39ae:	eb 57       	subi	r30, 0x7B	; 123
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	88 e7       	ldi	r24, 0x78	; 120
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	91 83       	std	Z+1, r25	; 0x01
    39b8:	80 83       	st	Z, r24
    39ba:	fe 01       	movw	r30, r28
    39bc:	eb 57       	subi	r30, 0x7B	; 123
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	9c 01       	movw	r18, r24
    39c6:	f9 01       	movw	r30, r18
    39c8:	85 91       	lpm	r24, Z+
    39ca:	95 91       	lpm	r25, Z+
    39cc:	a5 91       	lpm	r26, Z+
    39ce:	b4 91       	lpm	r27, Z+
    39d0:	9f 01       	movw	r18, r30
    39d2:	fe 01       	movw	r30, r28
    39d4:	ef 57       	subi	r30, 0x7F	; 127
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 83       	st	Z, r24
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	a2 83       	std	Z+2, r26	; 0x02
    39de:	b3 83       	std	Z+3, r27	; 0x03
    39e0:	fe 01       	movw	r30, r28
    39e2:	eb 57       	subi	r30, 0x7B	; 123
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	31 83       	std	Z+1, r19	; 0x01
    39e8:	20 83       	st	Z, r18
    39ea:	fe 01       	movw	r30, r28
    39ec:	ef 57       	subi	r30, 0x7F	; 127
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	20 81       	ld	r18, Z
    39f2:	31 81       	ldd	r19, Z+1	; 0x01
    39f4:	42 81       	ldd	r20, Z+2	; 0x02
    39f6:	53 81       	ldd	r21, Z+3	; 0x03
    39f8:	fe 01       	movw	r30, r28
    39fa:	e6 5d       	subi	r30, 0xD6	; 214
    39fc:	fe 4f       	sbci	r31, 0xFE	; 254
    39fe:	80 81       	ld	r24, Z
    3a00:	91 81       	ldd	r25, Z+1	; 0x01
    3a02:	a2 81       	ldd	r26, Z+2	; 0x02
    3a04:	b3 81       	ldd	r27, Z+3	; 0x03
    3a06:	82 2b       	or	r24, r18
    3a08:	93 2b       	or	r25, r19
    3a0a:	a4 2b       	or	r26, r20
    3a0c:	b5 2b       	or	r27, r21
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e6 5d       	subi	r30, 0xD6	; 214
    3a12:	fe 4f       	sbci	r31, 0xFE	; 254
    3a14:	80 83       	st	Z, r24
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	a2 83       	std	Z+2, r26	; 0x02
    3a1a:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e7 5d       	subi	r30, 0xD7	; 215
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	80 83       	st	Z, r24
    3a26:	f3 c1       	rjmp	.+998    	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 45)
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e5 5b       	subi	r30, 0xB5	; 181
    3a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2e:	84 81       	ldd	r24, Z+4	; 0x04
    3a30:	8d 32       	cpi	r24, 0x2D	; 45
    3a32:	08 f0       	brcs	.+2      	; 0x3a36 <main+0x1f60>
    3a34:	76 c0       	rjmp	.+236    	; 0x3b22 <main+0x204c>
    {
      lLEDs |= pgm_read_dword(words+def_zwanzigM);
    3a36:	fe 01       	movw	r30, r28
    3a38:	e1 58       	subi	r30, 0x81	; 129
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	84 e6       	ldi	r24, 0x64	; 100
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	91 83       	std	Z+1, r25	; 0x01
    3a42:	80 83       	st	Z, r24
    3a44:	fe 01       	movw	r30, r28
    3a46:	e1 58       	subi	r30, 0x81	; 129
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	80 81       	ld	r24, Z
    3a4c:	91 81       	ldd	r25, Z+1	; 0x01
    3a4e:	9c 01       	movw	r18, r24
    3a50:	f9 01       	movw	r30, r18
    3a52:	85 91       	lpm	r24, Z+
    3a54:	95 91       	lpm	r25, Z+
    3a56:	a5 91       	lpm	r26, Z+
    3a58:	b4 91       	lpm	r27, Z+
    3a5a:	9f 01       	movw	r18, r30
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	e5 58       	subi	r30, 0x85	; 133
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	80 83       	st	Z, r24
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	a2 83       	std	Z+2, r26	; 0x02
    3a68:	b3 83       	std	Z+3, r27	; 0x03
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	e1 58       	subi	r30, 0x81	; 129
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	31 83       	std	Z+1, r19	; 0x01
    3a72:	20 83       	st	Z, r18
    3a74:	fe 01       	movw	r30, r28
    3a76:	e5 58       	subi	r30, 0x85	; 133
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	20 81       	ld	r18, Z
    3a7c:	31 81       	ldd	r19, Z+1	; 0x01
    3a7e:	42 81       	ldd	r20, Z+2	; 0x02
    3a80:	53 81       	ldd	r21, Z+3	; 0x03
    3a82:	fe 01       	movw	r30, r28
    3a84:	e6 5d       	subi	r30, 0xD6	; 214
    3a86:	fe 4f       	sbci	r31, 0xFE	; 254
    3a88:	80 81       	ld	r24, Z
    3a8a:	91 81       	ldd	r25, Z+1	; 0x01
    3a8c:	a2 81       	ldd	r26, Z+2	; 0x02
    3a8e:	b3 81       	ldd	r27, Z+3	; 0x03
    3a90:	82 2b       	or	r24, r18
    3a92:	93 2b       	or	r25, r19
    3a94:	a4 2b       	or	r26, r20
    3a96:	b5 2b       	or	r27, r21
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e6 5d       	subi	r30, 0xD6	; 214
    3a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a9e:	80 83       	st	Z, r24
    3aa0:	91 83       	std	Z+1, r25	; 0x01
    3aa2:	a2 83       	std	Z+2, r26	; 0x02
    3aa4:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	e7 58       	subi	r30, 0x87	; 135
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	84 e7       	ldi	r24, 0x74	; 116
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	91 83       	std	Z+1, r25	; 0x01
    3ab2:	80 83       	st	Z, r24
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e7 58       	subi	r30, 0x87	; 135
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	80 81       	ld	r24, Z
    3abc:	91 81       	ldd	r25, Z+1	; 0x01
    3abe:	9c 01       	movw	r18, r24
    3ac0:	f9 01       	movw	r30, r18
    3ac2:	85 91       	lpm	r24, Z+
    3ac4:	95 91       	lpm	r25, Z+
    3ac6:	a5 91       	lpm	r26, Z+
    3ac8:	b4 91       	lpm	r27, Z+
    3aca:	9f 01       	movw	r18, r30
    3acc:	fe 01       	movw	r30, r28
    3ace:	eb 58       	subi	r30, 0x8B	; 139
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	80 83       	st	Z, r24
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	a2 83       	std	Z+2, r26	; 0x02
    3ad8:	b3 83       	std	Z+3, r27	; 0x03
    3ada:	fe 01       	movw	r30, r28
    3adc:	e7 58       	subi	r30, 0x87	; 135
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	31 83       	std	Z+1, r19	; 0x01
    3ae2:	20 83       	st	Z, r18
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	eb 58       	subi	r30, 0x8B	; 139
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	20 81       	ld	r18, Z
    3aec:	31 81       	ldd	r19, Z+1	; 0x01
    3aee:	42 81       	ldd	r20, Z+2	; 0x02
    3af0:	53 81       	ldd	r21, Z+3	; 0x03
    3af2:	fe 01       	movw	r30, r28
    3af4:	e6 5d       	subi	r30, 0xD6	; 214
    3af6:	fe 4f       	sbci	r31, 0xFE	; 254
    3af8:	80 81       	ld	r24, Z
    3afa:	91 81       	ldd	r25, Z+1	; 0x01
    3afc:	a2 81       	ldd	r26, Z+2	; 0x02
    3afe:	b3 81       	ldd	r27, Z+3	; 0x03
    3b00:	82 2b       	or	r24, r18
    3b02:	93 2b       	or	r25, r19
    3b04:	a4 2b       	or	r26, r20
    3b06:	b5 2b       	or	r27, r21
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e6 5d       	subi	r30, 0xD6	; 214
    3b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b0e:	80 83       	st	Z, r24
    3b10:	91 83       	std	Z+1, r25	; 0x01
    3b12:	a2 83       	std	Z+2, r26	; 0x02
    3b14:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    3b16:	fe 01       	movw	r30, r28
    3b18:	e7 5d       	subi	r30, 0xD7	; 215
    3b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	80 83       	st	Z, r24
    3b20:	76 c1       	rjmp	.+748    	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 50)
    3b22:	fe 01       	movw	r30, r28
    3b24:	e5 5b       	subi	r30, 0xB5	; 181
    3b26:	fe 4f       	sbci	r31, 0xFE	; 254
    3b28:	84 81       	ldd	r24, Z+4	; 0x04
    3b2a:	82 33       	cpi	r24, 0x32	; 50
    3b2c:	08 f0       	brcs	.+2      	; 0x3b30 <main+0x205a>
    3b2e:	76 c0       	rjmp	.+236    	; 0x3c1c <main+0x2146>
    {
      lLEDs |= pgm_read_dword(words+def_viertelM);
    3b30:	fe 01       	movw	r30, r28
    3b32:	ed 58       	subi	r30, 0x8D	; 141
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	8c e6       	ldi	r24, 0x6C	; 108
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
    3b3e:	fe 01       	movw	r30, r28
    3b40:	ed 58       	subi	r30, 0x8D	; 141
    3b42:	ff 4f       	sbci	r31, 0xFF	; 255
    3b44:	80 81       	ld	r24, Z
    3b46:	91 81       	ldd	r25, Z+1	; 0x01
    3b48:	9c 01       	movw	r18, r24
    3b4a:	f9 01       	movw	r30, r18
    3b4c:	85 91       	lpm	r24, Z+
    3b4e:	95 91       	lpm	r25, Z+
    3b50:	a5 91       	lpm	r26, Z+
    3b52:	b4 91       	lpm	r27, Z+
    3b54:	9f 01       	movw	r18, r30
    3b56:	fe 01       	movw	r30, r28
    3b58:	e1 59       	subi	r30, 0x91	; 145
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 83       	st	Z, r24
    3b5e:	91 83       	std	Z+1, r25	; 0x01
    3b60:	a2 83       	std	Z+2, r26	; 0x02
    3b62:	b3 83       	std	Z+3, r27	; 0x03
    3b64:	fe 01       	movw	r30, r28
    3b66:	ed 58       	subi	r30, 0x8D	; 141
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	31 83       	std	Z+1, r19	; 0x01
    3b6c:	20 83       	st	Z, r18
    3b6e:	fe 01       	movw	r30, r28
    3b70:	e1 59       	subi	r30, 0x91	; 145
    3b72:	ff 4f       	sbci	r31, 0xFF	; 255
    3b74:	20 81       	ld	r18, Z
    3b76:	31 81       	ldd	r19, Z+1	; 0x01
    3b78:	42 81       	ldd	r20, Z+2	; 0x02
    3b7a:	53 81       	ldd	r21, Z+3	; 0x03
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e6 5d       	subi	r30, 0xD6	; 214
    3b80:	fe 4f       	sbci	r31, 0xFE	; 254
    3b82:	80 81       	ld	r24, Z
    3b84:	91 81       	ldd	r25, Z+1	; 0x01
    3b86:	a2 81       	ldd	r26, Z+2	; 0x02
    3b88:	b3 81       	ldd	r27, Z+3	; 0x03
    3b8a:	82 2b       	or	r24, r18
    3b8c:	93 2b       	or	r25, r19
    3b8e:	a4 2b       	or	r26, r20
    3b90:	b5 2b       	or	r27, r21
    3b92:	fe 01       	movw	r30, r28
    3b94:	e6 5d       	subi	r30, 0xD6	; 214
    3b96:	fe 4f       	sbci	r31, 0xFE	; 254
    3b98:	80 83       	st	Z, r24
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	a2 83       	std	Z+2, r26	; 0x02
    3b9e:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	e3 59       	subi	r30, 0x93	; 147
    3ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba6:	84 e7       	ldi	r24, 0x74	; 116
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e3 59       	subi	r30, 0x93	; 147
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	9c 01       	movw	r18, r24
    3bba:	f9 01       	movw	r30, r18
    3bbc:	85 91       	lpm	r24, Z+
    3bbe:	95 91       	lpm	r25, Z+
    3bc0:	a5 91       	lpm	r26, Z+
    3bc2:	b4 91       	lpm	r27, Z+
    3bc4:	9f 01       	movw	r18, r30
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	e7 59       	subi	r30, 0x97	; 151
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	80 83       	st	Z, r24
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	a2 83       	std	Z+2, r26	; 0x02
    3bd2:	b3 83       	std	Z+3, r27	; 0x03
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	e3 59       	subi	r30, 0x93	; 147
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	31 83       	std	Z+1, r19	; 0x01
    3bdc:	20 83       	st	Z, r18
    3bde:	fe 01       	movw	r30, r28
    3be0:	e7 59       	subi	r30, 0x97	; 151
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	20 81       	ld	r18, Z
    3be6:	31 81       	ldd	r19, Z+1	; 0x01
    3be8:	42 81       	ldd	r20, Z+2	; 0x02
    3bea:	53 81       	ldd	r21, Z+3	; 0x03
    3bec:	fe 01       	movw	r30, r28
    3bee:	e6 5d       	subi	r30, 0xD6	; 214
    3bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf2:	80 81       	ld	r24, Z
    3bf4:	91 81       	ldd	r25, Z+1	; 0x01
    3bf6:	a2 81       	ldd	r26, Z+2	; 0x02
    3bf8:	b3 81       	ldd	r27, Z+3	; 0x03
    3bfa:	82 2b       	or	r24, r18
    3bfc:	93 2b       	or	r25, r19
    3bfe:	a4 2b       	or	r26, r20
    3c00:	b5 2b       	or	r27, r21
    3c02:	fe 01       	movw	r30, r28
    3c04:	e6 5d       	subi	r30, 0xD6	; 214
    3c06:	fe 4f       	sbci	r31, 0xFE	; 254
    3c08:	80 83       	st	Z, r24
    3c0a:	91 83       	std	Z+1, r25	; 0x01
    3c0c:	a2 83       	std	Z+2, r26	; 0x02
    3c0e:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    3c10:	fe 01       	movw	r30, r28
    3c12:	e7 5d       	subi	r30, 0xD7	; 215
    3c14:	fe 4f       	sbci	r31, 0xFE	; 254
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	80 83       	st	Z, r24
    3c1a:	f9 c0       	rjmp	.+498    	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 55)
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e5 5b       	subi	r30, 0xB5	; 181
    3c20:	fe 4f       	sbci	r31, 0xFE	; 254
    3c22:	84 81       	ldd	r24, Z+4	; 0x04
    3c24:	87 33       	cpi	r24, 0x37	; 55
    3c26:	08 f0       	brcs	.+2      	; 0x3c2a <main+0x2154>
    3c28:	76 c0       	rjmp	.+236    	; 0x3d16 <main+0x2240>
    {
      lLEDs |= pgm_read_dword(words+def_zehnM);
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e9 59       	subi	r30, 0x99	; 153
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	80 e6       	ldi	r24, 0x60	; 96
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	80 83       	st	Z, r24
    3c38:	fe 01       	movw	r30, r28
    3c3a:	e9 59       	subi	r30, 0x99	; 153
    3c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3e:	80 81       	ld	r24, Z
    3c40:	91 81       	ldd	r25, Z+1	; 0x01
    3c42:	9c 01       	movw	r18, r24
    3c44:	f9 01       	movw	r30, r18
    3c46:	85 91       	lpm	r24, Z+
    3c48:	95 91       	lpm	r25, Z+
    3c4a:	a5 91       	lpm	r26, Z+
    3c4c:	b4 91       	lpm	r27, Z+
    3c4e:	9f 01       	movw	r18, r30
    3c50:	fe 01       	movw	r30, r28
    3c52:	ed 59       	subi	r30, 0x9D	; 157
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	80 83       	st	Z, r24
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	a2 83       	std	Z+2, r26	; 0x02
    3c5c:	b3 83       	std	Z+3, r27	; 0x03
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e9 59       	subi	r30, 0x99	; 153
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	31 83       	std	Z+1, r19	; 0x01
    3c66:	20 83       	st	Z, r18
    3c68:	fe 01       	movw	r30, r28
    3c6a:	ed 59       	subi	r30, 0x9D	; 157
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	20 81       	ld	r18, Z
    3c70:	31 81       	ldd	r19, Z+1	; 0x01
    3c72:	42 81       	ldd	r20, Z+2	; 0x02
    3c74:	53 81       	ldd	r21, Z+3	; 0x03
    3c76:	fe 01       	movw	r30, r28
    3c78:	e6 5d       	subi	r30, 0xD6	; 214
    3c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c7c:	80 81       	ld	r24, Z
    3c7e:	91 81       	ldd	r25, Z+1	; 0x01
    3c80:	a2 81       	ldd	r26, Z+2	; 0x02
    3c82:	b3 81       	ldd	r27, Z+3	; 0x03
    3c84:	82 2b       	or	r24, r18
    3c86:	93 2b       	or	r25, r19
    3c88:	a4 2b       	or	r26, r20
    3c8a:	b5 2b       	or	r27, r21
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e6 5d       	subi	r30, 0xD6	; 214
    3c90:	fe 4f       	sbci	r31, 0xFE	; 254
    3c92:	80 83       	st	Z, r24
    3c94:	91 83       	std	Z+1, r25	; 0x01
    3c96:	a2 83       	std	Z+2, r26	; 0x02
    3c98:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	ef 59       	subi	r30, 0x9F	; 159
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	84 e7       	ldi	r24, 0x74	; 116
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	91 83       	std	Z+1, r25	; 0x01
    3ca6:	80 83       	st	Z, r24
    3ca8:	fe 01       	movw	r30, r28
    3caa:	ef 59       	subi	r30, 0x9F	; 159
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	80 81       	ld	r24, Z
    3cb0:	91 81       	ldd	r25, Z+1	; 0x01
    3cb2:	9c 01       	movw	r18, r24
    3cb4:	f9 01       	movw	r30, r18
    3cb6:	85 91       	lpm	r24, Z+
    3cb8:	95 91       	lpm	r25, Z+
    3cba:	a5 91       	lpm	r26, Z+
    3cbc:	b4 91       	lpm	r27, Z+
    3cbe:	9f 01       	movw	r18, r30
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	e3 5a       	subi	r30, 0xA3	; 163
    3cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc6:	80 83       	st	Z, r24
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	a2 83       	std	Z+2, r26	; 0x02
    3ccc:	b3 83       	std	Z+3, r27	; 0x03
    3cce:	fe 01       	movw	r30, r28
    3cd0:	ef 59       	subi	r30, 0x9F	; 159
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	31 83       	std	Z+1, r19	; 0x01
    3cd6:	20 83       	st	Z, r18
    3cd8:	fe 01       	movw	r30, r28
    3cda:	e3 5a       	subi	r30, 0xA3	; 163
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	20 81       	ld	r18, Z
    3ce0:	31 81       	ldd	r19, Z+1	; 0x01
    3ce2:	42 81       	ldd	r20, Z+2	; 0x02
    3ce4:	53 81       	ldd	r21, Z+3	; 0x03
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	e6 5d       	subi	r30, 0xD6	; 214
    3cea:	fe 4f       	sbci	r31, 0xFE	; 254
    3cec:	80 81       	ld	r24, Z
    3cee:	91 81       	ldd	r25, Z+1	; 0x01
    3cf0:	a2 81       	ldd	r26, Z+2	; 0x02
    3cf2:	b3 81       	ldd	r27, Z+3	; 0x03
    3cf4:	82 2b       	or	r24, r18
    3cf6:	93 2b       	or	r25, r19
    3cf8:	a4 2b       	or	r26, r20
    3cfa:	b5 2b       	or	r27, r21
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	e6 5d       	subi	r30, 0xD6	; 214
    3d00:	fe 4f       	sbci	r31, 0xFE	; 254
    3d02:	80 83       	st	Z, r24
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	a2 83       	std	Z+2, r26	; 0x02
    3d08:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	e7 5d       	subi	r30, 0xD7	; 215
    3d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	80 83       	st	Z, r24
    3d14:	7c c0       	rjmp	.+248    	; 0x3e0e <main+0x2338>
    }
    else if (time.mm < 60)
    3d16:	fe 01       	movw	r30, r28
    3d18:	e5 5b       	subi	r30, 0xB5	; 181
    3d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d1c:	84 81       	ldd	r24, Z+4	; 0x04
    3d1e:	8c 33       	cpi	r24, 0x3C	; 60
    3d20:	08 f0       	brcs	.+2      	; 0x3d24 <main+0x224e>
    3d22:	75 c0       	rjmp	.+234    	; 0x3e0e <main+0x2338>
    {
      lLEDs |= pgm_read_dword(words+def_fuenfM);
    3d24:	fe 01       	movw	r30, r28
    3d26:	e5 5a       	subi	r30, 0xA5	; 165
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	8c e5       	ldi	r24, 0x5C	; 92
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	91 83       	std	Z+1, r25	; 0x01
    3d30:	80 83       	st	Z, r24
    3d32:	fe 01       	movw	r30, r28
    3d34:	e5 5a       	subi	r30, 0xA5	; 165
    3d36:	ff 4f       	sbci	r31, 0xFF	; 255
    3d38:	80 81       	ld	r24, Z
    3d3a:	91 81       	ldd	r25, Z+1	; 0x01
    3d3c:	9c 01       	movw	r18, r24
    3d3e:	f9 01       	movw	r30, r18
    3d40:	85 91       	lpm	r24, Z+
    3d42:	95 91       	lpm	r25, Z+
    3d44:	a5 91       	lpm	r26, Z+
    3d46:	b4 91       	lpm	r27, Z+
    3d48:	9f 01       	movw	r18, r30
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e9 5a       	subi	r30, 0xA9	; 169
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	80 83       	st	Z, r24
    3d52:	91 83       	std	Z+1, r25	; 0x01
    3d54:	a2 83       	std	Z+2, r26	; 0x02
    3d56:	b3 83       	std	Z+3, r27	; 0x03
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e5 5a       	subi	r30, 0xA5	; 165
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	31 83       	std	Z+1, r19	; 0x01
    3d60:	20 83       	st	Z, r18
    3d62:	fe 01       	movw	r30, r28
    3d64:	e9 5a       	subi	r30, 0xA9	; 169
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	20 81       	ld	r18, Z
    3d6a:	31 81       	ldd	r19, Z+1	; 0x01
    3d6c:	42 81       	ldd	r20, Z+2	; 0x02
    3d6e:	53 81       	ldd	r21, Z+3	; 0x03
    3d70:	fe 01       	movw	r30, r28
    3d72:	e6 5d       	subi	r30, 0xD6	; 214
    3d74:	fe 4f       	sbci	r31, 0xFE	; 254
    3d76:	80 81       	ld	r24, Z
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	a2 81       	ldd	r26, Z+2	; 0x02
    3d7c:	b3 81       	ldd	r27, Z+3	; 0x03
    3d7e:	82 2b       	or	r24, r18
    3d80:	93 2b       	or	r25, r19
    3d82:	a4 2b       	or	r26, r20
    3d84:	b5 2b       	or	r27, r21
    3d86:	fe 01       	movw	r30, r28
    3d88:	e6 5d       	subi	r30, 0xD6	; 214
    3d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d8c:	80 83       	st	Z, r24
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	a2 83       	std	Z+2, r26	; 0x02
    3d92:	b3 83       	std	Z+3, r27	; 0x03
      lLEDs |= pgm_read_dword(words+def_vor);
    3d94:	fe 01       	movw	r30, r28
    3d96:	eb 5a       	subi	r30, 0xAB	; 171
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	84 e7       	ldi	r24, 0x74	; 116
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	91 83       	std	Z+1, r25	; 0x01
    3da0:	80 83       	st	Z, r24
    3da2:	fe 01       	movw	r30, r28
    3da4:	eb 5a       	subi	r30, 0xAB	; 171
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	80 81       	ld	r24, Z
    3daa:	91 81       	ldd	r25, Z+1	; 0x01
    3dac:	9c 01       	movw	r18, r24
    3dae:	f9 01       	movw	r30, r18
    3db0:	85 91       	lpm	r24, Z+
    3db2:	95 91       	lpm	r25, Z+
    3db4:	a5 91       	lpm	r26, Z+
    3db6:	b4 91       	lpm	r27, Z+
    3db8:	9f 01       	movw	r18, r30
    3dba:	fe 01       	movw	r30, r28
    3dbc:	ef 5a       	subi	r30, 0xAF	; 175
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	80 83       	st	Z, r24
    3dc2:	91 83       	std	Z+1, r25	; 0x01
    3dc4:	a2 83       	std	Z+2, r26	; 0x02
    3dc6:	b3 83       	std	Z+3, r27	; 0x03
    3dc8:	fe 01       	movw	r30, r28
    3dca:	eb 5a       	subi	r30, 0xAB	; 171
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	31 83       	std	Z+1, r19	; 0x01
    3dd0:	20 83       	st	Z, r18
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	ef 5a       	subi	r30, 0xAF	; 175
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	20 81       	ld	r18, Z
    3dda:	31 81       	ldd	r19, Z+1	; 0x01
    3ddc:	42 81       	ldd	r20, Z+2	; 0x02
    3dde:	53 81       	ldd	r21, Z+3	; 0x03
    3de0:	fe 01       	movw	r30, r28
    3de2:	e6 5d       	subi	r30, 0xD6	; 214
    3de4:	fe 4f       	sbci	r31, 0xFE	; 254
    3de6:	80 81       	ld	r24, Z
    3de8:	91 81       	ldd	r25, Z+1	; 0x01
    3dea:	a2 81       	ldd	r26, Z+2	; 0x02
    3dec:	b3 81       	ldd	r27, Z+3	; 0x03
    3dee:	82 2b       	or	r24, r18
    3df0:	93 2b       	or	r25, r19
    3df2:	a4 2b       	or	r26, r20
    3df4:	b5 2b       	or	r27, r21
    3df6:	fe 01       	movw	r30, r28
    3df8:	e6 5d       	subi	r30, 0xD6	; 214
    3dfa:	fe 4f       	sbci	r31, 0xFE	; 254
    3dfc:	80 83       	st	Z, r24
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	a2 83       	std	Z+2, r26	; 0x02
    3e02:	b3 83       	std	Z+3, r27	; 0x03
      hoffset = 1;
    3e04:	fe 01       	movw	r30, r28
    3e06:	e7 5d       	subi	r30, 0xD7	; 215
    3e08:	fe 4f       	sbci	r31, 0xFE	; 254
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	80 83       	st	Z, r24
    }

    int
        def_h[25] =
        { def_zwoelfH, def_einsH, def_zweiH, def_dreiH, def_vierH, def_fuenfH, def_sechsH, def_siebenH, def_achtH, def_neunH, def_zehnH, def_elfH, def_zwoelfH, def_einsH, def_zweiH, def_dreiH, def_vierH, def_fuenfH, def_sechsH, def_siebenH, def_achtH, def_neunH, def_zehnH, def_elfH, def_zwoelfH };
    3e0e:	ce 01       	movw	r24, r28
    3e10:	88 59       	subi	r24, 0x98	; 152
    3e12:	9e 4f       	sbci	r25, 0xFE	; 254
    3e14:	c9 5e       	subi	r28, 0xE9	; 233
    3e16:	dd 4f       	sbci	r29, 0xFD	; 253
    3e18:	99 83       	std	Y+1, r25	; 0x01
    3e1a:	88 83       	st	Y, r24
    3e1c:	c7 51       	subi	r28, 0x17	; 23
    3e1e:	d2 40       	sbci	r29, 0x02	; 2
    3e20:	2d e9       	ldi	r18, 0x9D	; 157
    3e22:	31 e0       	ldi	r19, 0x01	; 1
    3e24:	c7 5e       	subi	r28, 0xE7	; 231
    3e26:	dd 4f       	sbci	r29, 0xFD	; 253
    3e28:	39 83       	std	Y+1, r19	; 0x01
    3e2a:	28 83       	st	Y, r18
    3e2c:	c9 51       	subi	r28, 0x19	; 25
    3e2e:	d2 40       	sbci	r29, 0x02	; 2
    3e30:	32 e3       	ldi	r19, 0x32	; 50
    3e32:	c5 5e       	subi	r28, 0xE5	; 229
    3e34:	dd 4f       	sbci	r29, 0xFD	; 253
    3e36:	38 83       	st	Y, r19
    3e38:	cb 51       	subi	r28, 0x1B	; 27
    3e3a:	d2 40       	sbci	r29, 0x02	; 2
    3e3c:	c7 5e       	subi	r28, 0xE7	; 231
    3e3e:	dd 4f       	sbci	r29, 0xFD	; 253
    3e40:	e8 81       	ld	r30, Y
    3e42:	f9 81       	ldd	r31, Y+1	; 0x01
    3e44:	c9 51       	subi	r28, 0x19	; 25
    3e46:	d2 40       	sbci	r29, 0x02	; 2
    3e48:	00 80       	ld	r0, Z
    3e4a:	c7 5e       	subi	r28, 0xE7	; 231
    3e4c:	dd 4f       	sbci	r29, 0xFD	; 253
    3e4e:	28 81       	ld	r18, Y
    3e50:	39 81       	ldd	r19, Y+1	; 0x01
    3e52:	c9 51       	subi	r28, 0x19	; 25
    3e54:	d2 40       	sbci	r29, 0x02	; 2
    3e56:	2f 5f       	subi	r18, 0xFF	; 255
    3e58:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5a:	c7 5e       	subi	r28, 0xE7	; 231
    3e5c:	dd 4f       	sbci	r29, 0xFD	; 253
    3e5e:	39 83       	std	Y+1, r19	; 0x01
    3e60:	28 83       	st	Y, r18
    3e62:	c9 51       	subi	r28, 0x19	; 25
    3e64:	d2 40       	sbci	r29, 0x02	; 2
    3e66:	c9 5e       	subi	r28, 0xE9	; 233
    3e68:	dd 4f       	sbci	r29, 0xFD	; 253
    3e6a:	e8 81       	ld	r30, Y
    3e6c:	f9 81       	ldd	r31, Y+1	; 0x01
    3e6e:	c7 51       	subi	r28, 0x17	; 23
    3e70:	d2 40       	sbci	r29, 0x02	; 2
    3e72:	00 82       	st	Z, r0
    3e74:	c9 5e       	subi	r28, 0xE9	; 233
    3e76:	dd 4f       	sbci	r29, 0xFD	; 253
    3e78:	28 81       	ld	r18, Y
    3e7a:	39 81       	ldd	r19, Y+1	; 0x01
    3e7c:	c7 51       	subi	r28, 0x17	; 23
    3e7e:	d2 40       	sbci	r29, 0x02	; 2
    3e80:	2f 5f       	subi	r18, 0xFF	; 255
    3e82:	3f 4f       	sbci	r19, 0xFF	; 255
    3e84:	c9 5e       	subi	r28, 0xE9	; 233
    3e86:	dd 4f       	sbci	r29, 0xFD	; 253
    3e88:	39 83       	std	Y+1, r19	; 0x01
    3e8a:	28 83       	st	Y, r18
    3e8c:	c7 51       	subi	r28, 0x17	; 23
    3e8e:	d2 40       	sbci	r29, 0x02	; 2
    3e90:	c5 5e       	subi	r28, 0xE5	; 229
    3e92:	dd 4f       	sbci	r29, 0xFD	; 253
    3e94:	38 81       	ld	r19, Y
    3e96:	cb 51       	subi	r28, 0x1B	; 27
    3e98:	d2 40       	sbci	r29, 0x02	; 2
    3e9a:	31 50       	subi	r19, 0x01	; 1
    3e9c:	c5 5e       	subi	r28, 0xE5	; 229
    3e9e:	dd 4f       	sbci	r29, 0xFD	; 253
    3ea0:	38 83       	st	Y, r19
    3ea2:	cb 51       	subi	r28, 0x1B	; 27
    3ea4:	d2 40       	sbci	r29, 0x02	; 2
    3ea6:	c5 5e       	subi	r28, 0xE5	; 229
    3ea8:	dd 4f       	sbci	r29, 0xFD	; 253
    3eaa:	88 81       	ld	r24, Y
    3eac:	cb 51       	subi	r28, 0x1B	; 27
    3eae:	d2 40       	sbci	r29, 0x02	; 2
    3eb0:	88 23       	and	r24, r24
    3eb2:	21 f6       	brne	.-120    	; 0x3e3c <main+0x2366>
    lLEDs |= pgm_read_dword(words + def_h[time.hh + hoffset]);
    3eb4:	fe 01       	movw	r30, r28
    3eb6:	e5 5b       	subi	r30, 0xB5	; 181
    3eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eba:	83 81       	ldd	r24, Z+3	; 0x03
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	e7 5d       	subi	r30, 0xD7	; 215
    3ec4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec6:	80 81       	ld	r24, Z
    3ec8:	88 2f       	mov	r24, r24
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	82 0f       	add	r24, r18
    3ece:	93 1f       	adc	r25, r19
    3ed0:	9e 01       	movw	r18, r28
    3ed2:	28 59       	subi	r18, 0x98	; 152
    3ed4:	3e 4f       	sbci	r19, 0xFE	; 254
    3ed6:	88 0f       	add	r24, r24
    3ed8:	99 1f       	adc	r25, r25
    3eda:	f9 01       	movw	r30, r18
    3edc:	e8 0f       	add	r30, r24
    3ede:	f9 1f       	adc	r31, r25
    3ee0:	80 81       	ld	r24, Z
    3ee2:	91 81       	ldd	r25, Z+1	; 0x01
    3ee4:	88 0f       	add	r24, r24
    3ee6:	99 1f       	adc	r25, r25
    3ee8:	88 0f       	add	r24, r24
    3eea:	99 1f       	adc	r25, r25
    3eec:	8c 5a       	subi	r24, 0xAC	; 172
    3eee:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	e1 5b       	subi	r30, 0xB1	; 177
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	80 83       	st	Z, r24
    3efa:	fe 01       	movw	r30, r28
    3efc:	e1 5b       	subi	r30, 0xB1	; 177
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 81       	ld	r24, Z
    3f02:	91 81       	ldd	r25, Z+1	; 0x01
    3f04:	9c 01       	movw	r18, r24
    3f06:	f9 01       	movw	r30, r18
    3f08:	85 91       	lpm	r24, Z+
    3f0a:	95 91       	lpm	r25, Z+
    3f0c:	a5 91       	lpm	r26, Z+
    3f0e:	b4 91       	lpm	r27, Z+
    3f10:	9f 01       	movw	r18, r30
    3f12:	fe 01       	movw	r30, r28
    3f14:	e5 5b       	subi	r30, 0xB5	; 181
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	80 83       	st	Z, r24
    3f1a:	91 83       	std	Z+1, r25	; 0x01
    3f1c:	a2 83       	std	Z+2, r26	; 0x02
    3f1e:	b3 83       	std	Z+3, r27	; 0x03
    3f20:	fe 01       	movw	r30, r28
    3f22:	e1 5b       	subi	r30, 0xB1	; 177
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	31 83       	std	Z+1, r19	; 0x01
    3f28:	20 83       	st	Z, r18
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e5 5b       	subi	r30, 0xB5	; 181
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	20 81       	ld	r18, Z
    3f32:	31 81       	ldd	r19, Z+1	; 0x01
    3f34:	42 81       	ldd	r20, Z+2	; 0x02
    3f36:	53 81       	ldd	r21, Z+3	; 0x03
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e6 5d       	subi	r30, 0xD6	; 214
    3f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f3e:	80 81       	ld	r24, Z
    3f40:	91 81       	ldd	r25, Z+1	; 0x01
    3f42:	a2 81       	ldd	r26, Z+2	; 0x02
    3f44:	b3 81       	ldd	r27, Z+3	; 0x03
    3f46:	82 2b       	or	r24, r18
    3f48:	93 2b       	or	r25, r19
    3f4a:	a4 2b       	or	r26, r20
    3f4c:	b5 2b       	or	r27, r21
    3f4e:	fe 01       	movw	r30, r28
    3f50:	e6 5d       	subi	r30, 0xD6	; 214
    3f52:	fe 4f       	sbci	r31, 0xFE	; 254
    3f54:	80 83       	st	Z, r24
    3f56:	91 83       	std	Z+1, r25	; 0x01
    3f58:	a2 83       	std	Z+2, r26	; 0x02
    3f5a:	b3 83       	std	Z+3, r27	; 0x03

    XXX ^= 0xffffffff;
    3f5c:	9e 01       	movw	r18, r28
    3f5e:	2b 5c       	subi	r18, 0xCB	; 203
    3f60:	3e 4f       	sbci	r19, 0xFE	; 254
    3f62:	fe 01       	movw	r30, r28
    3f64:	eb 5c       	subi	r30, 0xCB	; 203
    3f66:	fe 4f       	sbci	r31, 0xFE	; 254
    3f68:	80 81       	ld	r24, Z
    3f6a:	91 81       	ldd	r25, Z+1	; 0x01
    3f6c:	a2 81       	ldd	r26, Z+2	; 0x02
    3f6e:	b3 81       	ldd	r27, Z+3	; 0x03
    3f70:	80 95       	com	r24
    3f72:	90 95       	com	r25
    3f74:	a0 95       	com	r26
    3f76:	b0 95       	com	r27
    3f78:	f9 01       	movw	r30, r18
    3f7a:	80 83       	st	Z, r24
    3f7c:	91 83       	std	Z+1, r25	; 0x01
    3f7e:	a2 83       	std	Z+2, r26	; 0x02
    3f80:	b3 83       	std	Z+3, r27	; 0x03
    shift32_output(XXX);
    3f82:	fe 01       	movw	r30, r28
    3f84:	eb 5c       	subi	r30, 0xCB	; 203
    3f86:	fe 4f       	sbci	r31, 0xFE	; 254
    3f88:	80 81       	ld	r24, Z
    3f8a:	91 81       	ldd	r25, Z+1	; 0x01
    3f8c:	a2 81       	ldd	r26, Z+2	; 0x02
    3f8e:	b3 81       	ldd	r27, Z+3	; 0x03
    3f90:	bc 01       	movw	r22, r24
    3f92:	cd 01       	movw	r24, r26
    3f94:	0e 94 de 0a 	call	0x15bc	; 0x15bc <shift32_output>
//    {
//      shift32_output(lLEDs);
//      lLEDs_LastValue = lLEDs;
//    }

    if (time.ss == 0)
    3f98:	fe 01       	movw	r30, r28
    3f9a:	e5 5b       	subi	r30, 0xB5	; 181
    3f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9e:	85 81       	ldd	r24, Z+5	; 0x05
    3fa0:	88 23       	and	r24, r24
    3fa2:	91 f4       	brne	.+36     	; 0x3fc8 <main+0x24f2>
    {
      TimeInfo(time);
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e5 5b       	subi	r30, 0xB5	; 181
    3fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    3faa:	c0 80       	ld	r12, Z
    3fac:	d1 80       	ldd	r13, Z+1	; 0x01
    3fae:	e2 80       	ldd	r14, Z+2	; 0x02
    3fb0:	f3 80       	ldd	r15, Z+3	; 0x03
    3fb2:	04 81       	ldd	r16, Z+4	; 0x04
    3fb4:	15 81       	ldd	r17, Z+5	; 0x05
    3fb6:	26 81       	ldd	r18, Z+6	; 0x06
    3fb8:	37 81       	ldd	r19, Z+7	; 0x07
    3fba:	40 85       	ldd	r20, Z+8	; 0x08
    3fbc:	51 85       	ldd	r21, Z+9	; 0x09
    3fbe:	62 85       	ldd	r22, Z+10	; 0x0a
    3fc0:	73 85       	ldd	r23, Z+11	; 0x0b
    3fc2:	84 85       	ldd	r24, Z+12	; 0x0c
    3fc4:	0e 94 36 0c 	call	0x186c	; 0x186c <TimeInfo>
    }

    if (uiRGB)
    3fc8:	fe 01       	movw	r30, r28
    3fca:	ed 5b       	subi	r30, 0xBD	; 189
    3fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    3fce:	80 81       	ld	r24, Z
    3fd0:	91 81       	ldd	r25, Z+1	; 0x01
    3fd2:	00 97       	sbiw	r24, 0x00	; 0
    3fd4:	09 f4       	brne	.+2      	; 0x3fd8 <main+0x2502>
    3fd6:	cc c0       	rjmp	.+408    	; 0x4170 <main+0x269a>
    {
      if (time.sunrise == 0)
    3fd8:	fe 01       	movw	r30, r28
    3fda:	e5 5b       	subi	r30, 0xB5	; 181
    3fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    3fde:	80 85       	ldd	r24, Z+8	; 0x08
    3fe0:	88 23       	and	r24, r24
    3fe2:	b1 f4       	brne	.+44     	; 0x4010 <main+0x253a>
      {
        uiR = 0x01;
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e7 5b       	subi	r30, 0xB7	; 183
    3fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	91 83       	std	Z+1, r25	; 0x01
    3ff0:	80 83       	st	Z, r24
        uiG = 0x01;
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	e9 5b       	subi	r30, 0xB9	; 185
    3ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	91 83       	std	Z+1, r25	; 0x01
    3ffe:	80 83       	st	Z, r24
        uiB = 0x33;
    4000:	fe 01       	movw	r30, r28
    4002:	eb 5b       	subi	r30, 0xBB	; 187
    4004:	fe 4f       	sbci	r31, 0xFE	; 254
    4006:	83 e3       	ldi	r24, 0x33	; 51
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	91 83       	std	Z+1, r25	; 0x01
    400c:	80 83       	st	Z, r24
    400e:	b0 c0       	rjmp	.+352    	; 0x4170 <main+0x269a>
      }
      else if (time.sunrise >= 100)
    4010:	fe 01       	movw	r30, r28
    4012:	e5 5b       	subi	r30, 0xB5	; 181
    4014:	fe 4f       	sbci	r31, 0xFE	; 254
    4016:	80 85       	ldd	r24, Z+8	; 0x08
    4018:	84 36       	cpi	r24, 0x64	; 100
    401a:	b0 f0       	brcs	.+44     	; 0x4048 <main+0x2572>
      {
        uiR = 0xff;
    401c:	fe 01       	movw	r30, r28
    401e:	e7 5b       	subi	r30, 0xB7	; 183
    4020:	fe 4f       	sbci	r31, 0xFE	; 254
    4022:	8f ef       	ldi	r24, 0xFF	; 255
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	91 83       	std	Z+1, r25	; 0x01
    4028:	80 83       	st	Z, r24
        uiG = 0xff;
    402a:	fe 01       	movw	r30, r28
    402c:	e9 5b       	subi	r30, 0xB9	; 185
    402e:	fe 4f       	sbci	r31, 0xFE	; 254
    4030:	8f ef       	ldi	r24, 0xFF	; 255
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	80 83       	st	Z, r24
        uiB = 0xc0;
    4038:	fe 01       	movw	r30, r28
    403a:	eb 5b       	subi	r30, 0xBB	; 187
    403c:	fe 4f       	sbci	r31, 0xFE	; 254
    403e:	80 ec       	ldi	r24, 0xC0	; 192
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	91 83       	std	Z+1, r25	; 0x01
    4044:	80 83       	st	Z, r24
    4046:	94 c0       	rjmp	.+296    	; 0x4170 <main+0x269a>
      }
      else if (time.sunrise < 50)
    4048:	fe 01       	movw	r30, r28
    404a:	e5 5b       	subi	r30, 0xB5	; 181
    404c:	fe 4f       	sbci	r31, 0xFE	; 254
    404e:	80 85       	ldd	r24, Z+8	; 0x08
    4050:	82 33       	cpi	r24, 0x32	; 50
    4052:	60 f5       	brcc	.+88     	; 0x40ac <main+0x25d6>
      {
        uiR = 0x01 + (time.sunrise * 0xfe) / 50;
    4054:	fe 01       	movw	r30, r28
    4056:	e5 5b       	subi	r30, 0xB5	; 181
    4058:	fe 4f       	sbci	r31, 0xFE	; 254
    405a:	80 85       	ldd	r24, Z+8	; 0x08
    405c:	88 2f       	mov	r24, r24
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	9c 01       	movw	r18, r24
    4062:	22 0f       	add	r18, r18
    4064:	33 1f       	adc	r19, r19
    4066:	c9 01       	movw	r24, r18
    4068:	96 95       	lsr	r25
    406a:	98 2f       	mov	r25, r24
    406c:	88 27       	eor	r24, r24
    406e:	97 95       	ror	r25
    4070:	87 95       	ror	r24
    4072:	82 1b       	sub	r24, r18
    4074:	93 0b       	sbc	r25, r19
    4076:	22 e3       	ldi	r18, 0x32	; 50
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	b9 01       	movw	r22, r18
    407c:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
    4080:	cb 01       	movw	r24, r22
    4082:	fe 01       	movw	r30, r28
    4084:	e7 5b       	subi	r30, 0xB7	; 183
    4086:	fe 4f       	sbci	r31, 0xFE	; 254
    4088:	01 96       	adiw	r24, 0x01	; 1
    408a:	91 83       	std	Z+1, r25	; 0x01
    408c:	80 83       	st	Z, r24
        uiG = 0x01;
    408e:	fe 01       	movw	r30, r28
    4090:	e9 5b       	subi	r30, 0xB9	; 185
    4092:	fe 4f       	sbci	r31, 0xFE	; 254
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
        uiB = 0x33;
    409c:	fe 01       	movw	r30, r28
    409e:	eb 5b       	subi	r30, 0xBB	; 187
    40a0:	fe 4f       	sbci	r31, 0xFE	; 254
    40a2:	83 e3       	ldi	r24, 0x33	; 51
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	91 83       	std	Z+1, r25	; 0x01
    40a8:	80 83       	st	Z, r24
    40aa:	62 c0       	rjmp	.+196    	; 0x4170 <main+0x269a>
      }
      else if (time.sunrise > 50)
    40ac:	fe 01       	movw	r30, r28
    40ae:	e5 5b       	subi	r30, 0xB5	; 181
    40b0:	fe 4f       	sbci	r31, 0xFE	; 254
    40b2:	80 85       	ldd	r24, Z+8	; 0x08
    40b4:	83 33       	cpi	r24, 0x33	; 51
    40b6:	08 f4       	brcc	.+2      	; 0x40ba <main+0x25e4>
    40b8:	5b c0       	rjmp	.+182    	; 0x4170 <main+0x269a>
      {
        uiR = 0xff;
    40ba:	fe 01       	movw	r30, r28
    40bc:	e7 5b       	subi	r30, 0xB7	; 183
    40be:	fe 4f       	sbci	r31, 0xFE	; 254
    40c0:	8f ef       	ldi	r24, 0xFF	; 255
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	91 83       	std	Z+1, r25	; 0x01
    40c6:	80 83       	st	Z, r24
        long x = (time.sunrise - 50);
    40c8:	fe 01       	movw	r30, r28
    40ca:	e5 5b       	subi	r30, 0xB5	; 181
    40cc:	fe 4f       	sbci	r31, 0xFE	; 254
    40ce:	80 85       	ldd	r24, Z+8	; 0x08
    40d0:	88 2f       	mov	r24, r24
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	c2 97       	sbiw	r24, 0x32	; 50
    40d6:	fe 01       	movw	r30, r28
    40d8:	e9 5b       	subi	r30, 0xB9	; 185
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	aa 27       	eor	r26, r26
    40de:	97 fd       	sbrc	r25, 7
    40e0:	a0 95       	com	r26
    40e2:	ba 2f       	mov	r27, r26
    40e4:	80 83       	st	Z, r24
    40e6:	91 83       	std	Z+1, r25	; 0x01
    40e8:	a2 83       	std	Z+2, r26	; 0x02
    40ea:	b3 83       	std	Z+3, r27	; 0x03
        uiG = 0x33 + ((0xcc * (x)) / 50);
    40ec:	fe 01       	movw	r30, r28
    40ee:	e9 5b       	subi	r30, 0xB9	; 185
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	80 81       	ld	r24, Z
    40f4:	91 81       	ldd	r25, Z+1	; 0x01
    40f6:	a2 81       	ldd	r26, Z+2	; 0x02
    40f8:	b3 81       	ldd	r27, Z+3	; 0x03
    40fa:	2c ec       	ldi	r18, 0xCC	; 204
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	40 e0       	ldi	r20, 0x00	; 0
    4100:	50 e0       	ldi	r21, 0x00	; 0
    4102:	bc 01       	movw	r22, r24
    4104:	cd 01       	movw	r24, r26
    4106:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <__mulsi3>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	22 e3       	ldi	r18, 0x32	; 50
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	50 e0       	ldi	r21, 0x00	; 0
    4116:	bc 01       	movw	r22, r24
    4118:	cd 01       	movw	r24, r26
    411a:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__divmodsi4>
    411e:	da 01       	movw	r26, r20
    4120:	c9 01       	movw	r24, r18
    4122:	c3 96       	adiw	r24, 0x33	; 51
    4124:	fe 01       	movw	r30, r28
    4126:	e9 5b       	subi	r30, 0xB9	; 185
    4128:	fe 4f       	sbci	r31, 0xFE	; 254
    412a:	91 83       	std	Z+1, r25	; 0x01
    412c:	80 83       	st	Z, r24
        uiB = 0x33 + ((0xac * (x)) / 50);
    412e:	fe 01       	movw	r30, r28
    4130:	e9 5b       	subi	r30, 0xB9	; 185
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	a2 81       	ldd	r26, Z+2	; 0x02
    413a:	b3 81       	ldd	r27, Z+3	; 0x03
    413c:	2c ea       	ldi	r18, 0xAC	; 172
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e0       	ldi	r20, 0x00	; 0
    4142:	50 e0       	ldi	r21, 0x00	; 0
    4144:	bc 01       	movw	r22, r24
    4146:	cd 01       	movw	r24, r26
    4148:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <__mulsi3>
    414c:	dc 01       	movw	r26, r24
    414e:	cb 01       	movw	r24, r22
    4150:	22 e3       	ldi	r18, 0x32	; 50
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e0       	ldi	r20, 0x00	; 0
    4156:	50 e0       	ldi	r21, 0x00	; 0
    4158:	bc 01       	movw	r22, r24
    415a:	cd 01       	movw	r24, r26
    415c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__divmodsi4>
    4160:	da 01       	movw	r26, r20
    4162:	c9 01       	movw	r24, r18
    4164:	c3 96       	adiw	r24, 0x33	; 51
    4166:	fe 01       	movw	r30, r28
    4168:	eb 5b       	subi	r30, 0xBB	; 187
    416a:	fe 4f       	sbci	r31, 0xFE	; 254
    416c:	91 83       	std	Z+1, r25	; 0x01
    416e:	80 83       	st	Z, r24
      }
    }

    if (uiCount % 1000)
    4170:	fe 01       	movw	r30, r28
    4172:	e3 5c       	subi	r30, 0xC3	; 195
    4174:	fe 4f       	sbci	r31, 0xFE	; 254
    4176:	80 81       	ld	r24, Z
    4178:	91 81       	ldd	r25, Z+1	; 0x01
    417a:	28 ee       	ldi	r18, 0xE8	; 232
    417c:	33 e0       	ldi	r19, 0x03	; 3
    417e:	b9 01       	movw	r22, r18
    4180:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__divmodhi4>
    4184:	00 97       	sbiw	r24, 0x00	; 0
    4186:	11 f4       	brne	.+4      	; 0x418c <main+0x26b6>
    4188:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <main+0x3aa>
    {
      uiCount = 0;
    418c:	fe 01       	movw	r30, r28
    418e:	e3 5c       	subi	r30, 0xC3	; 195
    4190:	fe 4f       	sbci	r31, 0xFE	; 254
    4192:	11 82       	std	Z+1, r1	; 0x01
    4194:	10 82       	st	Z, r1
    4196:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <main+0x3aa>

0000419a <__fixunssfsi>:
    419a:	ef 92       	push	r14
    419c:	ff 92       	push	r15
    419e:	0f 93       	push	r16
    41a0:	1f 93       	push	r17
    41a2:	7b 01       	movw	r14, r22
    41a4:	8c 01       	movw	r16, r24
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e0       	ldi	r20, 0x00	; 0
    41ac:	5f e4       	ldi	r21, 0x4F	; 79
    41ae:	0e 94 cd 23 	call	0x479a	; 0x479a <__gesf2>
    41b2:	88 23       	and	r24, r24
    41b4:	8c f0       	brlt	.+34     	; 0x41d8 <__fixunssfsi+0x3e>
    41b6:	c8 01       	movw	r24, r16
    41b8:	b7 01       	movw	r22, r14
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	40 e0       	ldi	r20, 0x00	; 0
    41c0:	5f e4       	ldi	r21, 0x4F	; 79
    41c2:	0e 94 45 22 	call	0x448a	; 0x448a <__subsf3>
    41c6:	0e 94 2d 24 	call	0x485a	; 0x485a <__fixsfsi>
    41ca:	9b 01       	movw	r18, r22
    41cc:	ac 01       	movw	r20, r24
    41ce:	20 50       	subi	r18, 0x00	; 0
    41d0:	30 40       	sbci	r19, 0x00	; 0
    41d2:	40 40       	sbci	r20, 0x00	; 0
    41d4:	50 48       	sbci	r21, 0x80	; 128
    41d6:	06 c0       	rjmp	.+12     	; 0x41e4 <__fixunssfsi+0x4a>
    41d8:	c8 01       	movw	r24, r16
    41da:	b7 01       	movw	r22, r14
    41dc:	0e 94 2d 24 	call	0x485a	; 0x485a <__fixsfsi>
    41e0:	9b 01       	movw	r18, r22
    41e2:	ac 01       	movw	r20, r24
    41e4:	b9 01       	movw	r22, r18
    41e6:	ca 01       	movw	r24, r20
    41e8:	1f 91       	pop	r17
    41ea:	0f 91       	pop	r16
    41ec:	ff 90       	pop	r15
    41ee:	ef 90       	pop	r14
    41f0:	08 95       	ret

000041f2 <_fpadd_parts>:
    41f2:	a0 e0       	ldi	r26, 0x00	; 0
    41f4:	b0 e0       	ldi	r27, 0x00	; 0
    41f6:	ef ef       	ldi	r30, 0xFF	; 255
    41f8:	f0 e2       	ldi	r31, 0x20	; 32
    41fa:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__prologue_saves__>
    41fe:	dc 01       	movw	r26, r24
    4200:	2b 01       	movw	r4, r22
    4202:	fa 01       	movw	r30, r20
    4204:	9c 91       	ld	r25, X
    4206:	92 30       	cpi	r25, 0x02	; 2
    4208:	08 f4       	brcc	.+2      	; 0x420c <_fpadd_parts+0x1a>
    420a:	39 c1       	rjmp	.+626    	; 0x447e <_fpadd_parts+0x28c>
    420c:	eb 01       	movw	r28, r22
    420e:	88 81       	ld	r24, Y
    4210:	82 30       	cpi	r24, 0x02	; 2
    4212:	08 f4       	brcc	.+2      	; 0x4216 <_fpadd_parts+0x24>
    4214:	33 c1       	rjmp	.+614    	; 0x447c <_fpadd_parts+0x28a>
    4216:	94 30       	cpi	r25, 0x04	; 4
    4218:	69 f4       	brne	.+26     	; 0x4234 <_fpadd_parts+0x42>
    421a:	84 30       	cpi	r24, 0x04	; 4
    421c:	09 f0       	breq	.+2      	; 0x4220 <_fpadd_parts+0x2e>
    421e:	2f c1       	rjmp	.+606    	; 0x447e <_fpadd_parts+0x28c>
    4220:	11 96       	adiw	r26, 0x01	; 1
    4222:	9c 91       	ld	r25, X
    4224:	11 97       	sbiw	r26, 0x01	; 1
    4226:	89 81       	ldd	r24, Y+1	; 0x01
    4228:	98 17       	cp	r25, r24
    422a:	09 f4       	brne	.+2      	; 0x422e <_fpadd_parts+0x3c>
    422c:	28 c1       	rjmp	.+592    	; 0x447e <_fpadd_parts+0x28c>
    422e:	a1 e8       	ldi	r26, 0x81	; 129
    4230:	b3 e0       	ldi	r27, 0x03	; 3
    4232:	25 c1       	rjmp	.+586    	; 0x447e <_fpadd_parts+0x28c>
    4234:	84 30       	cpi	r24, 0x04	; 4
    4236:	09 f4       	brne	.+2      	; 0x423a <_fpadd_parts+0x48>
    4238:	21 c1       	rjmp	.+578    	; 0x447c <_fpadd_parts+0x28a>
    423a:	82 30       	cpi	r24, 0x02	; 2
    423c:	a9 f4       	brne	.+42     	; 0x4268 <_fpadd_parts+0x76>
    423e:	92 30       	cpi	r25, 0x02	; 2
    4240:	09 f0       	breq	.+2      	; 0x4244 <_fpadd_parts+0x52>
    4242:	1d c1       	rjmp	.+570    	; 0x447e <_fpadd_parts+0x28c>
    4244:	9a 01       	movw	r18, r20
    4246:	ad 01       	movw	r20, r26
    4248:	88 e0       	ldi	r24, 0x08	; 8
    424a:	ea 01       	movw	r28, r20
    424c:	09 90       	ld	r0, Y+
    424e:	ae 01       	movw	r20, r28
    4250:	e9 01       	movw	r28, r18
    4252:	09 92       	st	Y+, r0
    4254:	9e 01       	movw	r18, r28
    4256:	81 50       	subi	r24, 0x01	; 1
    4258:	c1 f7       	brne	.-16     	; 0x424a <_fpadd_parts+0x58>
    425a:	e2 01       	movw	r28, r4
    425c:	89 81       	ldd	r24, Y+1	; 0x01
    425e:	11 96       	adiw	r26, 0x01	; 1
    4260:	9c 91       	ld	r25, X
    4262:	89 23       	and	r24, r25
    4264:	81 83       	std	Z+1, r24	; 0x01
    4266:	08 c1       	rjmp	.+528    	; 0x4478 <_fpadd_parts+0x286>
    4268:	92 30       	cpi	r25, 0x02	; 2
    426a:	09 f4       	brne	.+2      	; 0x426e <_fpadd_parts+0x7c>
    426c:	07 c1       	rjmp	.+526    	; 0x447c <_fpadd_parts+0x28a>
    426e:	12 96       	adiw	r26, 0x02	; 2
    4270:	2d 90       	ld	r2, X+
    4272:	3c 90       	ld	r3, X
    4274:	13 97       	sbiw	r26, 0x03	; 3
    4276:	eb 01       	movw	r28, r22
    4278:	8a 81       	ldd	r24, Y+2	; 0x02
    427a:	9b 81       	ldd	r25, Y+3	; 0x03
    427c:	14 96       	adiw	r26, 0x04	; 4
    427e:	ad 90       	ld	r10, X+
    4280:	bd 90       	ld	r11, X+
    4282:	cd 90       	ld	r12, X+
    4284:	dc 90       	ld	r13, X
    4286:	17 97       	sbiw	r26, 0x07	; 7
    4288:	ec 80       	ldd	r14, Y+4	; 0x04
    428a:	fd 80       	ldd	r15, Y+5	; 0x05
    428c:	0e 81       	ldd	r16, Y+6	; 0x06
    428e:	1f 81       	ldd	r17, Y+7	; 0x07
    4290:	91 01       	movw	r18, r2
    4292:	28 1b       	sub	r18, r24
    4294:	39 0b       	sbc	r19, r25
    4296:	b9 01       	movw	r22, r18
    4298:	37 ff       	sbrs	r19, 7
    429a:	04 c0       	rjmp	.+8      	; 0x42a4 <_fpadd_parts+0xb2>
    429c:	66 27       	eor	r22, r22
    429e:	77 27       	eor	r23, r23
    42a0:	62 1b       	sub	r22, r18
    42a2:	73 0b       	sbc	r23, r19
    42a4:	60 32       	cpi	r22, 0x20	; 32
    42a6:	71 05       	cpc	r23, r1
    42a8:	0c f0       	brlt	.+2      	; 0x42ac <_fpadd_parts+0xba>
    42aa:	61 c0       	rjmp	.+194    	; 0x436e <_fpadd_parts+0x17c>
    42ac:	12 16       	cp	r1, r18
    42ae:	13 06       	cpc	r1, r19
    42b0:	6c f5       	brge	.+90     	; 0x430c <_fpadd_parts+0x11a>
    42b2:	37 01       	movw	r6, r14
    42b4:	48 01       	movw	r8, r16
    42b6:	06 2e       	mov	r0, r22
    42b8:	04 c0       	rjmp	.+8      	; 0x42c2 <_fpadd_parts+0xd0>
    42ba:	96 94       	lsr	r9
    42bc:	87 94       	ror	r8
    42be:	77 94       	ror	r7
    42c0:	67 94       	ror	r6
    42c2:	0a 94       	dec	r0
    42c4:	d2 f7       	brpl	.-12     	; 0x42ba <_fpadd_parts+0xc8>
    42c6:	21 e0       	ldi	r18, 0x01	; 1
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	50 e0       	ldi	r21, 0x00	; 0
    42ce:	04 c0       	rjmp	.+8      	; 0x42d8 <_fpadd_parts+0xe6>
    42d0:	22 0f       	add	r18, r18
    42d2:	33 1f       	adc	r19, r19
    42d4:	44 1f       	adc	r20, r20
    42d6:	55 1f       	adc	r21, r21
    42d8:	6a 95       	dec	r22
    42da:	d2 f7       	brpl	.-12     	; 0x42d0 <_fpadd_parts+0xde>
    42dc:	21 50       	subi	r18, 0x01	; 1
    42de:	30 40       	sbci	r19, 0x00	; 0
    42e0:	40 40       	sbci	r20, 0x00	; 0
    42e2:	50 40       	sbci	r21, 0x00	; 0
    42e4:	2e 21       	and	r18, r14
    42e6:	3f 21       	and	r19, r15
    42e8:	40 23       	and	r20, r16
    42ea:	51 23       	and	r21, r17
    42ec:	21 15       	cp	r18, r1
    42ee:	31 05       	cpc	r19, r1
    42f0:	41 05       	cpc	r20, r1
    42f2:	51 05       	cpc	r21, r1
    42f4:	21 f0       	breq	.+8      	; 0x42fe <_fpadd_parts+0x10c>
    42f6:	21 e0       	ldi	r18, 0x01	; 1
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	40 e0       	ldi	r20, 0x00	; 0
    42fc:	50 e0       	ldi	r21, 0x00	; 0
    42fe:	79 01       	movw	r14, r18
    4300:	8a 01       	movw	r16, r20
    4302:	e6 28       	or	r14, r6
    4304:	f7 28       	or	r15, r7
    4306:	08 29       	or	r16, r8
    4308:	19 29       	or	r17, r9
    430a:	3c c0       	rjmp	.+120    	; 0x4384 <_fpadd_parts+0x192>
    430c:	23 2b       	or	r18, r19
    430e:	d1 f1       	breq	.+116    	; 0x4384 <_fpadd_parts+0x192>
    4310:	26 0e       	add	r2, r22
    4312:	37 1e       	adc	r3, r23
    4314:	35 01       	movw	r6, r10
    4316:	46 01       	movw	r8, r12
    4318:	06 2e       	mov	r0, r22
    431a:	04 c0       	rjmp	.+8      	; 0x4324 <_fpadd_parts+0x132>
    431c:	96 94       	lsr	r9
    431e:	87 94       	ror	r8
    4320:	77 94       	ror	r7
    4322:	67 94       	ror	r6
    4324:	0a 94       	dec	r0
    4326:	d2 f7       	brpl	.-12     	; 0x431c <_fpadd_parts+0x12a>
    4328:	21 e0       	ldi	r18, 0x01	; 1
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	40 e0       	ldi	r20, 0x00	; 0
    432e:	50 e0       	ldi	r21, 0x00	; 0
    4330:	04 c0       	rjmp	.+8      	; 0x433a <_fpadd_parts+0x148>
    4332:	22 0f       	add	r18, r18
    4334:	33 1f       	adc	r19, r19
    4336:	44 1f       	adc	r20, r20
    4338:	55 1f       	adc	r21, r21
    433a:	6a 95       	dec	r22
    433c:	d2 f7       	brpl	.-12     	; 0x4332 <_fpadd_parts+0x140>
    433e:	21 50       	subi	r18, 0x01	; 1
    4340:	30 40       	sbci	r19, 0x00	; 0
    4342:	40 40       	sbci	r20, 0x00	; 0
    4344:	50 40       	sbci	r21, 0x00	; 0
    4346:	2a 21       	and	r18, r10
    4348:	3b 21       	and	r19, r11
    434a:	4c 21       	and	r20, r12
    434c:	5d 21       	and	r21, r13
    434e:	21 15       	cp	r18, r1
    4350:	31 05       	cpc	r19, r1
    4352:	41 05       	cpc	r20, r1
    4354:	51 05       	cpc	r21, r1
    4356:	21 f0       	breq	.+8      	; 0x4360 <_fpadd_parts+0x16e>
    4358:	21 e0       	ldi	r18, 0x01	; 1
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	40 e0       	ldi	r20, 0x00	; 0
    435e:	50 e0       	ldi	r21, 0x00	; 0
    4360:	59 01       	movw	r10, r18
    4362:	6a 01       	movw	r12, r20
    4364:	a6 28       	or	r10, r6
    4366:	b7 28       	or	r11, r7
    4368:	c8 28       	or	r12, r8
    436a:	d9 28       	or	r13, r9
    436c:	0b c0       	rjmp	.+22     	; 0x4384 <_fpadd_parts+0x192>
    436e:	82 15       	cp	r24, r2
    4370:	93 05       	cpc	r25, r3
    4372:	2c f0       	brlt	.+10     	; 0x437e <_fpadd_parts+0x18c>
    4374:	1c 01       	movw	r2, r24
    4376:	aa 24       	eor	r10, r10
    4378:	bb 24       	eor	r11, r11
    437a:	65 01       	movw	r12, r10
    437c:	03 c0       	rjmp	.+6      	; 0x4384 <_fpadd_parts+0x192>
    437e:	ee 24       	eor	r14, r14
    4380:	ff 24       	eor	r15, r15
    4382:	87 01       	movw	r16, r14
    4384:	11 96       	adiw	r26, 0x01	; 1
    4386:	9c 91       	ld	r25, X
    4388:	d2 01       	movw	r26, r4
    438a:	11 96       	adiw	r26, 0x01	; 1
    438c:	8c 91       	ld	r24, X
    438e:	98 17       	cp	r25, r24
    4390:	09 f4       	brne	.+2      	; 0x4394 <_fpadd_parts+0x1a2>
    4392:	45 c0       	rjmp	.+138    	; 0x441e <_fpadd_parts+0x22c>
    4394:	99 23       	and	r25, r25
    4396:	39 f0       	breq	.+14     	; 0x43a6 <_fpadd_parts+0x1b4>
    4398:	a8 01       	movw	r20, r16
    439a:	97 01       	movw	r18, r14
    439c:	2a 19       	sub	r18, r10
    439e:	3b 09       	sbc	r19, r11
    43a0:	4c 09       	sbc	r20, r12
    43a2:	5d 09       	sbc	r21, r13
    43a4:	06 c0       	rjmp	.+12     	; 0x43b2 <_fpadd_parts+0x1c0>
    43a6:	a6 01       	movw	r20, r12
    43a8:	95 01       	movw	r18, r10
    43aa:	2e 19       	sub	r18, r14
    43ac:	3f 09       	sbc	r19, r15
    43ae:	40 0b       	sbc	r20, r16
    43b0:	51 0b       	sbc	r21, r17
    43b2:	57 fd       	sbrc	r21, 7
    43b4:	08 c0       	rjmp	.+16     	; 0x43c6 <_fpadd_parts+0x1d4>
    43b6:	11 82       	std	Z+1, r1	; 0x01
    43b8:	33 82       	std	Z+3, r3	; 0x03
    43ba:	22 82       	std	Z+2, r2	; 0x02
    43bc:	24 83       	std	Z+4, r18	; 0x04
    43be:	35 83       	std	Z+5, r19	; 0x05
    43c0:	46 83       	std	Z+6, r20	; 0x06
    43c2:	57 83       	std	Z+7, r21	; 0x07
    43c4:	1d c0       	rjmp	.+58     	; 0x4400 <_fpadd_parts+0x20e>
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	81 83       	std	Z+1, r24	; 0x01
    43ca:	33 82       	std	Z+3, r3	; 0x03
    43cc:	22 82       	std	Z+2, r2	; 0x02
    43ce:	88 27       	eor	r24, r24
    43d0:	99 27       	eor	r25, r25
    43d2:	dc 01       	movw	r26, r24
    43d4:	82 1b       	sub	r24, r18
    43d6:	93 0b       	sbc	r25, r19
    43d8:	a4 0b       	sbc	r26, r20
    43da:	b5 0b       	sbc	r27, r21
    43dc:	84 83       	std	Z+4, r24	; 0x04
    43de:	95 83       	std	Z+5, r25	; 0x05
    43e0:	a6 83       	std	Z+6, r26	; 0x06
    43e2:	b7 83       	std	Z+7, r27	; 0x07
    43e4:	0d c0       	rjmp	.+26     	; 0x4400 <_fpadd_parts+0x20e>
    43e6:	22 0f       	add	r18, r18
    43e8:	33 1f       	adc	r19, r19
    43ea:	44 1f       	adc	r20, r20
    43ec:	55 1f       	adc	r21, r21
    43ee:	24 83       	std	Z+4, r18	; 0x04
    43f0:	35 83       	std	Z+5, r19	; 0x05
    43f2:	46 83       	std	Z+6, r20	; 0x06
    43f4:	57 83       	std	Z+7, r21	; 0x07
    43f6:	82 81       	ldd	r24, Z+2	; 0x02
    43f8:	93 81       	ldd	r25, Z+3	; 0x03
    43fa:	01 97       	sbiw	r24, 0x01	; 1
    43fc:	93 83       	std	Z+3, r25	; 0x03
    43fe:	82 83       	std	Z+2, r24	; 0x02
    4400:	24 81       	ldd	r18, Z+4	; 0x04
    4402:	35 81       	ldd	r19, Z+5	; 0x05
    4404:	46 81       	ldd	r20, Z+6	; 0x06
    4406:	57 81       	ldd	r21, Z+7	; 0x07
    4408:	da 01       	movw	r26, r20
    440a:	c9 01       	movw	r24, r18
    440c:	01 97       	sbiw	r24, 0x01	; 1
    440e:	a1 09       	sbc	r26, r1
    4410:	b1 09       	sbc	r27, r1
    4412:	8f 5f       	subi	r24, 0xFF	; 255
    4414:	9f 4f       	sbci	r25, 0xFF	; 255
    4416:	af 4f       	sbci	r26, 0xFF	; 255
    4418:	bf 43       	sbci	r27, 0x3F	; 63
    441a:	28 f3       	brcs	.-54     	; 0x43e6 <_fpadd_parts+0x1f4>
    441c:	0b c0       	rjmp	.+22     	; 0x4434 <_fpadd_parts+0x242>
    441e:	91 83       	std	Z+1, r25	; 0x01
    4420:	33 82       	std	Z+3, r3	; 0x03
    4422:	22 82       	std	Z+2, r2	; 0x02
    4424:	ea 0c       	add	r14, r10
    4426:	fb 1c       	adc	r15, r11
    4428:	0c 1d       	adc	r16, r12
    442a:	1d 1d       	adc	r17, r13
    442c:	e4 82       	std	Z+4, r14	; 0x04
    442e:	f5 82       	std	Z+5, r15	; 0x05
    4430:	06 83       	std	Z+6, r16	; 0x06
    4432:	17 83       	std	Z+7, r17	; 0x07
    4434:	83 e0       	ldi	r24, 0x03	; 3
    4436:	80 83       	st	Z, r24
    4438:	24 81       	ldd	r18, Z+4	; 0x04
    443a:	35 81       	ldd	r19, Z+5	; 0x05
    443c:	46 81       	ldd	r20, Z+6	; 0x06
    443e:	57 81       	ldd	r21, Z+7	; 0x07
    4440:	57 ff       	sbrs	r21, 7
    4442:	1a c0       	rjmp	.+52     	; 0x4478 <_fpadd_parts+0x286>
    4444:	c9 01       	movw	r24, r18
    4446:	aa 27       	eor	r26, r26
    4448:	97 fd       	sbrc	r25, 7
    444a:	a0 95       	com	r26
    444c:	ba 2f       	mov	r27, r26
    444e:	81 70       	andi	r24, 0x01	; 1
    4450:	90 70       	andi	r25, 0x00	; 0
    4452:	a0 70       	andi	r26, 0x00	; 0
    4454:	b0 70       	andi	r27, 0x00	; 0
    4456:	56 95       	lsr	r21
    4458:	47 95       	ror	r20
    445a:	37 95       	ror	r19
    445c:	27 95       	ror	r18
    445e:	82 2b       	or	r24, r18
    4460:	93 2b       	or	r25, r19
    4462:	a4 2b       	or	r26, r20
    4464:	b5 2b       	or	r27, r21
    4466:	84 83       	std	Z+4, r24	; 0x04
    4468:	95 83       	std	Z+5, r25	; 0x05
    446a:	a6 83       	std	Z+6, r26	; 0x06
    446c:	b7 83       	std	Z+7, r27	; 0x07
    446e:	82 81       	ldd	r24, Z+2	; 0x02
    4470:	93 81       	ldd	r25, Z+3	; 0x03
    4472:	01 96       	adiw	r24, 0x01	; 1
    4474:	93 83       	std	Z+3, r25	; 0x03
    4476:	82 83       	std	Z+2, r24	; 0x02
    4478:	df 01       	movw	r26, r30
    447a:	01 c0       	rjmp	.+2      	; 0x447e <_fpadd_parts+0x28c>
    447c:	d2 01       	movw	r26, r4
    447e:	cd 01       	movw	r24, r26
    4480:	cd b7       	in	r28, 0x3d	; 61
    4482:	de b7       	in	r29, 0x3e	; 62
    4484:	e2 e1       	ldi	r30, 0x12	; 18
    4486:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__epilogue_restores__>

0000448a <__subsf3>:
    448a:	a0 e2       	ldi	r26, 0x20	; 32
    448c:	b0 e0       	ldi	r27, 0x00	; 0
    448e:	eb e4       	ldi	r30, 0x4B	; 75
    4490:	f2 e2       	ldi	r31, 0x22	; 34
    4492:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__prologue_saves__+0x18>
    4496:	69 83       	std	Y+1, r22	; 0x01
    4498:	7a 83       	std	Y+2, r23	; 0x02
    449a:	8b 83       	std	Y+3, r24	; 0x03
    449c:	9c 83       	std	Y+4, r25	; 0x04
    449e:	2d 83       	std	Y+5, r18	; 0x05
    44a0:	3e 83       	std	Y+6, r19	; 0x06
    44a2:	4f 83       	std	Y+7, r20	; 0x07
    44a4:	58 87       	std	Y+8, r21	; 0x08
    44a6:	e9 e0       	ldi	r30, 0x09	; 9
    44a8:	ee 2e       	mov	r14, r30
    44aa:	f1 2c       	mov	r15, r1
    44ac:	ec 0e       	add	r14, r28
    44ae:	fd 1e       	adc	r15, r29
    44b0:	ce 01       	movw	r24, r28
    44b2:	01 96       	adiw	r24, 0x01	; 1
    44b4:	b7 01       	movw	r22, r14
    44b6:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    44ba:	8e 01       	movw	r16, r28
    44bc:	0f 5e       	subi	r16, 0xEF	; 239
    44be:	1f 4f       	sbci	r17, 0xFF	; 255
    44c0:	ce 01       	movw	r24, r28
    44c2:	05 96       	adiw	r24, 0x05	; 5
    44c4:	b8 01       	movw	r22, r16
    44c6:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    44ca:	8a 89       	ldd	r24, Y+18	; 0x12
    44cc:	91 e0       	ldi	r25, 0x01	; 1
    44ce:	89 27       	eor	r24, r25
    44d0:	8a 8b       	std	Y+18, r24	; 0x12
    44d2:	c7 01       	movw	r24, r14
    44d4:	b8 01       	movw	r22, r16
    44d6:	ae 01       	movw	r20, r28
    44d8:	47 5e       	subi	r20, 0xE7	; 231
    44da:	5f 4f       	sbci	r21, 0xFF	; 255
    44dc:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <_fpadd_parts>
    44e0:	0e 94 81 24 	call	0x4902	; 0x4902 <__pack_f>
    44e4:	a0 96       	adiw	r28, 0x20	; 32
    44e6:	e6 e0       	ldi	r30, 0x06	; 6
    44e8:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__epilogue_restores__+0x18>

000044ec <__addsf3>:
    44ec:	a0 e2       	ldi	r26, 0x20	; 32
    44ee:	b0 e0       	ldi	r27, 0x00	; 0
    44f0:	ec e7       	ldi	r30, 0x7C	; 124
    44f2:	f2 e2       	ldi	r31, 0x22	; 34
    44f4:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__prologue_saves__+0x18>
    44f8:	69 83       	std	Y+1, r22	; 0x01
    44fa:	7a 83       	std	Y+2, r23	; 0x02
    44fc:	8b 83       	std	Y+3, r24	; 0x03
    44fe:	9c 83       	std	Y+4, r25	; 0x04
    4500:	2d 83       	std	Y+5, r18	; 0x05
    4502:	3e 83       	std	Y+6, r19	; 0x06
    4504:	4f 83       	std	Y+7, r20	; 0x07
    4506:	58 87       	std	Y+8, r21	; 0x08
    4508:	f9 e0       	ldi	r31, 0x09	; 9
    450a:	ef 2e       	mov	r14, r31
    450c:	f1 2c       	mov	r15, r1
    450e:	ec 0e       	add	r14, r28
    4510:	fd 1e       	adc	r15, r29
    4512:	ce 01       	movw	r24, r28
    4514:	01 96       	adiw	r24, 0x01	; 1
    4516:	b7 01       	movw	r22, r14
    4518:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    451c:	8e 01       	movw	r16, r28
    451e:	0f 5e       	subi	r16, 0xEF	; 239
    4520:	1f 4f       	sbci	r17, 0xFF	; 255
    4522:	ce 01       	movw	r24, r28
    4524:	05 96       	adiw	r24, 0x05	; 5
    4526:	b8 01       	movw	r22, r16
    4528:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    452c:	c7 01       	movw	r24, r14
    452e:	b8 01       	movw	r22, r16
    4530:	ae 01       	movw	r20, r28
    4532:	47 5e       	subi	r20, 0xE7	; 231
    4534:	5f 4f       	sbci	r21, 0xFF	; 255
    4536:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <_fpadd_parts>
    453a:	0e 94 81 24 	call	0x4902	; 0x4902 <__pack_f>
    453e:	a0 96       	adiw	r28, 0x20	; 32
    4540:	e6 e0       	ldi	r30, 0x06	; 6
    4542:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__epilogue_restores__+0x18>

00004546 <__mulsf3>:
    4546:	a0 e2       	ldi	r26, 0x20	; 32
    4548:	b0 e0       	ldi	r27, 0x00	; 0
    454a:	e9 ea       	ldi	r30, 0xA9	; 169
    454c:	f2 e2       	ldi	r31, 0x22	; 34
    454e:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__prologue_saves__>
    4552:	69 83       	std	Y+1, r22	; 0x01
    4554:	7a 83       	std	Y+2, r23	; 0x02
    4556:	8b 83       	std	Y+3, r24	; 0x03
    4558:	9c 83       	std	Y+4, r25	; 0x04
    455a:	2d 83       	std	Y+5, r18	; 0x05
    455c:	3e 83       	std	Y+6, r19	; 0x06
    455e:	4f 83       	std	Y+7, r20	; 0x07
    4560:	58 87       	std	Y+8, r21	; 0x08
    4562:	ce 01       	movw	r24, r28
    4564:	01 96       	adiw	r24, 0x01	; 1
    4566:	be 01       	movw	r22, r28
    4568:	67 5f       	subi	r22, 0xF7	; 247
    456a:	7f 4f       	sbci	r23, 0xFF	; 255
    456c:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    4570:	ce 01       	movw	r24, r28
    4572:	05 96       	adiw	r24, 0x05	; 5
    4574:	be 01       	movw	r22, r28
    4576:	6f 5e       	subi	r22, 0xEF	; 239
    4578:	7f 4f       	sbci	r23, 0xFF	; 255
    457a:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    457e:	99 85       	ldd	r25, Y+9	; 0x09
    4580:	92 30       	cpi	r25, 0x02	; 2
    4582:	88 f0       	brcs	.+34     	; 0x45a6 <__mulsf3+0x60>
    4584:	89 89       	ldd	r24, Y+17	; 0x11
    4586:	82 30       	cpi	r24, 0x02	; 2
    4588:	c8 f0       	brcs	.+50     	; 0x45bc <__mulsf3+0x76>
    458a:	94 30       	cpi	r25, 0x04	; 4
    458c:	19 f4       	brne	.+6      	; 0x4594 <__mulsf3+0x4e>
    458e:	82 30       	cpi	r24, 0x02	; 2
    4590:	51 f4       	brne	.+20     	; 0x45a6 <__mulsf3+0x60>
    4592:	04 c0       	rjmp	.+8      	; 0x459c <__mulsf3+0x56>
    4594:	84 30       	cpi	r24, 0x04	; 4
    4596:	29 f4       	brne	.+10     	; 0x45a2 <__mulsf3+0x5c>
    4598:	92 30       	cpi	r25, 0x02	; 2
    459a:	81 f4       	brne	.+32     	; 0x45bc <__mulsf3+0x76>
    459c:	81 e8       	ldi	r24, 0x81	; 129
    459e:	93 e0       	ldi	r25, 0x03	; 3
    45a0:	c6 c0       	rjmp	.+396    	; 0x472e <__mulsf3+0x1e8>
    45a2:	92 30       	cpi	r25, 0x02	; 2
    45a4:	49 f4       	brne	.+18     	; 0x45b8 <__mulsf3+0x72>
    45a6:	20 e0       	ldi	r18, 0x00	; 0
    45a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45aa:	8a 89       	ldd	r24, Y+18	; 0x12
    45ac:	98 13       	cpse	r25, r24
    45ae:	21 e0       	ldi	r18, 0x01	; 1
    45b0:	2a 87       	std	Y+10, r18	; 0x0a
    45b2:	ce 01       	movw	r24, r28
    45b4:	09 96       	adiw	r24, 0x09	; 9
    45b6:	bb c0       	rjmp	.+374    	; 0x472e <__mulsf3+0x1e8>
    45b8:	82 30       	cpi	r24, 0x02	; 2
    45ba:	49 f4       	brne	.+18     	; 0x45ce <__mulsf3+0x88>
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c0:	8a 89       	ldd	r24, Y+18	; 0x12
    45c2:	98 13       	cpse	r25, r24
    45c4:	21 e0       	ldi	r18, 0x01	; 1
    45c6:	2a 8b       	std	Y+18, r18	; 0x12
    45c8:	ce 01       	movw	r24, r28
    45ca:	41 96       	adiw	r24, 0x11	; 17
    45cc:	b0 c0       	rjmp	.+352    	; 0x472e <__mulsf3+0x1e8>
    45ce:	2d 84       	ldd	r2, Y+13	; 0x0d
    45d0:	3e 84       	ldd	r3, Y+14	; 0x0e
    45d2:	4f 84       	ldd	r4, Y+15	; 0x0f
    45d4:	58 88       	ldd	r5, Y+16	; 0x10
    45d6:	6d 88       	ldd	r6, Y+21	; 0x15
    45d8:	7e 88       	ldd	r7, Y+22	; 0x16
    45da:	8f 88       	ldd	r8, Y+23	; 0x17
    45dc:	98 8c       	ldd	r9, Y+24	; 0x18
    45de:	ee 24       	eor	r14, r14
    45e0:	ff 24       	eor	r15, r15
    45e2:	87 01       	movw	r16, r14
    45e4:	aa 24       	eor	r10, r10
    45e6:	bb 24       	eor	r11, r11
    45e8:	65 01       	movw	r12, r10
    45ea:	40 e0       	ldi	r20, 0x00	; 0
    45ec:	50 e0       	ldi	r21, 0x00	; 0
    45ee:	60 e0       	ldi	r22, 0x00	; 0
    45f0:	70 e0       	ldi	r23, 0x00	; 0
    45f2:	e0 e0       	ldi	r30, 0x00	; 0
    45f4:	f0 e0       	ldi	r31, 0x00	; 0
    45f6:	c1 01       	movw	r24, r2
    45f8:	81 70       	andi	r24, 0x01	; 1
    45fa:	90 70       	andi	r25, 0x00	; 0
    45fc:	89 2b       	or	r24, r25
    45fe:	e9 f0       	breq	.+58     	; 0x463a <__mulsf3+0xf4>
    4600:	e6 0c       	add	r14, r6
    4602:	f7 1c       	adc	r15, r7
    4604:	08 1d       	adc	r16, r8
    4606:	19 1d       	adc	r17, r9
    4608:	9a 01       	movw	r18, r20
    460a:	ab 01       	movw	r20, r22
    460c:	2a 0d       	add	r18, r10
    460e:	3b 1d       	adc	r19, r11
    4610:	4c 1d       	adc	r20, r12
    4612:	5d 1d       	adc	r21, r13
    4614:	80 e0       	ldi	r24, 0x00	; 0
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	a0 e0       	ldi	r26, 0x00	; 0
    461a:	b0 e0       	ldi	r27, 0x00	; 0
    461c:	e6 14       	cp	r14, r6
    461e:	f7 04       	cpc	r15, r7
    4620:	08 05       	cpc	r16, r8
    4622:	19 05       	cpc	r17, r9
    4624:	20 f4       	brcc	.+8      	; 0x462e <__mulsf3+0xe8>
    4626:	81 e0       	ldi	r24, 0x01	; 1
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	a0 e0       	ldi	r26, 0x00	; 0
    462c:	b0 e0       	ldi	r27, 0x00	; 0
    462e:	ba 01       	movw	r22, r20
    4630:	a9 01       	movw	r20, r18
    4632:	48 0f       	add	r20, r24
    4634:	59 1f       	adc	r21, r25
    4636:	6a 1f       	adc	r22, r26
    4638:	7b 1f       	adc	r23, r27
    463a:	aa 0c       	add	r10, r10
    463c:	bb 1c       	adc	r11, r11
    463e:	cc 1c       	adc	r12, r12
    4640:	dd 1c       	adc	r13, r13
    4642:	97 fe       	sbrs	r9, 7
    4644:	08 c0       	rjmp	.+16     	; 0x4656 <__mulsf3+0x110>
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	a0 e0       	ldi	r26, 0x00	; 0
    464c:	b0 e0       	ldi	r27, 0x00	; 0
    464e:	a8 2a       	or	r10, r24
    4650:	b9 2a       	or	r11, r25
    4652:	ca 2a       	or	r12, r26
    4654:	db 2a       	or	r13, r27
    4656:	31 96       	adiw	r30, 0x01	; 1
    4658:	e0 32       	cpi	r30, 0x20	; 32
    465a:	f1 05       	cpc	r31, r1
    465c:	49 f0       	breq	.+18     	; 0x4670 <__mulsf3+0x12a>
    465e:	66 0c       	add	r6, r6
    4660:	77 1c       	adc	r7, r7
    4662:	88 1c       	adc	r8, r8
    4664:	99 1c       	adc	r9, r9
    4666:	56 94       	lsr	r5
    4668:	47 94       	ror	r4
    466a:	37 94       	ror	r3
    466c:	27 94       	ror	r2
    466e:	c3 cf       	rjmp	.-122    	; 0x45f6 <__mulsf3+0xb0>
    4670:	fa 85       	ldd	r31, Y+10	; 0x0a
    4672:	ea 89       	ldd	r30, Y+18	; 0x12
    4674:	2b 89       	ldd	r18, Y+19	; 0x13
    4676:	3c 89       	ldd	r19, Y+20	; 0x14
    4678:	8b 85       	ldd	r24, Y+11	; 0x0b
    467a:	9c 85       	ldd	r25, Y+12	; 0x0c
    467c:	28 0f       	add	r18, r24
    467e:	39 1f       	adc	r19, r25
    4680:	2e 5f       	subi	r18, 0xFE	; 254
    4682:	3f 4f       	sbci	r19, 0xFF	; 255
    4684:	17 c0       	rjmp	.+46     	; 0x46b4 <__mulsf3+0x16e>
    4686:	ca 01       	movw	r24, r20
    4688:	81 70       	andi	r24, 0x01	; 1
    468a:	90 70       	andi	r25, 0x00	; 0
    468c:	89 2b       	or	r24, r25
    468e:	61 f0       	breq	.+24     	; 0x46a8 <__mulsf3+0x162>
    4690:	16 95       	lsr	r17
    4692:	07 95       	ror	r16
    4694:	f7 94       	ror	r15
    4696:	e7 94       	ror	r14
    4698:	80 e0       	ldi	r24, 0x00	; 0
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	a0 e0       	ldi	r26, 0x00	; 0
    469e:	b0 e8       	ldi	r27, 0x80	; 128
    46a0:	e8 2a       	or	r14, r24
    46a2:	f9 2a       	or	r15, r25
    46a4:	0a 2b       	or	r16, r26
    46a6:	1b 2b       	or	r17, r27
    46a8:	76 95       	lsr	r23
    46aa:	67 95       	ror	r22
    46ac:	57 95       	ror	r21
    46ae:	47 95       	ror	r20
    46b0:	2f 5f       	subi	r18, 0xFF	; 255
    46b2:	3f 4f       	sbci	r19, 0xFF	; 255
    46b4:	77 fd       	sbrc	r23, 7
    46b6:	e7 cf       	rjmp	.-50     	; 0x4686 <__mulsf3+0x140>
    46b8:	0c c0       	rjmp	.+24     	; 0x46d2 <__mulsf3+0x18c>
    46ba:	44 0f       	add	r20, r20
    46bc:	55 1f       	adc	r21, r21
    46be:	66 1f       	adc	r22, r22
    46c0:	77 1f       	adc	r23, r23
    46c2:	17 fd       	sbrc	r17, 7
    46c4:	41 60       	ori	r20, 0x01	; 1
    46c6:	ee 0c       	add	r14, r14
    46c8:	ff 1c       	adc	r15, r15
    46ca:	00 1f       	adc	r16, r16
    46cc:	11 1f       	adc	r17, r17
    46ce:	21 50       	subi	r18, 0x01	; 1
    46d0:	30 40       	sbci	r19, 0x00	; 0
    46d2:	40 30       	cpi	r20, 0x00	; 0
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	59 07       	cpc	r21, r25
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	69 07       	cpc	r22, r25
    46dc:	90 e4       	ldi	r25, 0x40	; 64
    46de:	79 07       	cpc	r23, r25
    46e0:	60 f3       	brcs	.-40     	; 0x46ba <__mulsf3+0x174>
    46e2:	2b 8f       	std	Y+27, r18	; 0x1b
    46e4:	3c 8f       	std	Y+28, r19	; 0x1c
    46e6:	db 01       	movw	r26, r22
    46e8:	ca 01       	movw	r24, r20
    46ea:	8f 77       	andi	r24, 0x7F	; 127
    46ec:	90 70       	andi	r25, 0x00	; 0
    46ee:	a0 70       	andi	r26, 0x00	; 0
    46f0:	b0 70       	andi	r27, 0x00	; 0
    46f2:	80 34       	cpi	r24, 0x40	; 64
    46f4:	91 05       	cpc	r25, r1
    46f6:	a1 05       	cpc	r26, r1
    46f8:	b1 05       	cpc	r27, r1
    46fa:	61 f4       	brne	.+24     	; 0x4714 <__mulsf3+0x1ce>
    46fc:	47 fd       	sbrc	r20, 7
    46fe:	0a c0       	rjmp	.+20     	; 0x4714 <__mulsf3+0x1ce>
    4700:	e1 14       	cp	r14, r1
    4702:	f1 04       	cpc	r15, r1
    4704:	01 05       	cpc	r16, r1
    4706:	11 05       	cpc	r17, r1
    4708:	29 f0       	breq	.+10     	; 0x4714 <__mulsf3+0x1ce>
    470a:	40 5c       	subi	r20, 0xC0	; 192
    470c:	5f 4f       	sbci	r21, 0xFF	; 255
    470e:	6f 4f       	sbci	r22, 0xFF	; 255
    4710:	7f 4f       	sbci	r23, 0xFF	; 255
    4712:	40 78       	andi	r20, 0x80	; 128
    4714:	1a 8e       	std	Y+26, r1	; 0x1a
    4716:	fe 17       	cp	r31, r30
    4718:	11 f0       	breq	.+4      	; 0x471e <__mulsf3+0x1d8>
    471a:	81 e0       	ldi	r24, 0x01	; 1
    471c:	8a 8f       	std	Y+26, r24	; 0x1a
    471e:	4d 8f       	std	Y+29, r20	; 0x1d
    4720:	5e 8f       	std	Y+30, r21	; 0x1e
    4722:	6f 8f       	std	Y+31, r22	; 0x1f
    4724:	78 a3       	std	Y+32, r23	; 0x20
    4726:	83 e0       	ldi	r24, 0x03	; 3
    4728:	89 8f       	std	Y+25, r24	; 0x19
    472a:	ce 01       	movw	r24, r28
    472c:	49 96       	adiw	r24, 0x19	; 25
    472e:	0e 94 81 24 	call	0x4902	; 0x4902 <__pack_f>
    4732:	a0 96       	adiw	r28, 0x20	; 32
    4734:	e2 e1       	ldi	r30, 0x12	; 18
    4736:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__epilogue_restores__>

0000473a <__gtsf2>:
    473a:	a8 e1       	ldi	r26, 0x18	; 24
    473c:	b0 e0       	ldi	r27, 0x00	; 0
    473e:	e3 ea       	ldi	r30, 0xA3	; 163
    4740:	f3 e2       	ldi	r31, 0x23	; 35
    4742:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__prologue_saves__+0x18>
    4746:	69 83       	std	Y+1, r22	; 0x01
    4748:	7a 83       	std	Y+2, r23	; 0x02
    474a:	8b 83       	std	Y+3, r24	; 0x03
    474c:	9c 83       	std	Y+4, r25	; 0x04
    474e:	2d 83       	std	Y+5, r18	; 0x05
    4750:	3e 83       	std	Y+6, r19	; 0x06
    4752:	4f 83       	std	Y+7, r20	; 0x07
    4754:	58 87       	std	Y+8, r21	; 0x08
    4756:	89 e0       	ldi	r24, 0x09	; 9
    4758:	e8 2e       	mov	r14, r24
    475a:	f1 2c       	mov	r15, r1
    475c:	ec 0e       	add	r14, r28
    475e:	fd 1e       	adc	r15, r29
    4760:	ce 01       	movw	r24, r28
    4762:	01 96       	adiw	r24, 0x01	; 1
    4764:	b7 01       	movw	r22, r14
    4766:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    476a:	8e 01       	movw	r16, r28
    476c:	0f 5e       	subi	r16, 0xEF	; 239
    476e:	1f 4f       	sbci	r17, 0xFF	; 255
    4770:	ce 01       	movw	r24, r28
    4772:	05 96       	adiw	r24, 0x05	; 5
    4774:	b8 01       	movw	r22, r16
    4776:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    477a:	89 85       	ldd	r24, Y+9	; 0x09
    477c:	82 30       	cpi	r24, 0x02	; 2
    477e:	40 f0       	brcs	.+16     	; 0x4790 <__gtsf2+0x56>
    4780:	89 89       	ldd	r24, Y+17	; 0x11
    4782:	82 30       	cpi	r24, 0x02	; 2
    4784:	28 f0       	brcs	.+10     	; 0x4790 <__gtsf2+0x56>
    4786:	c7 01       	movw	r24, r14
    4788:	b8 01       	movw	r22, r16
    478a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__fpcmp_parts_f>
    478e:	01 c0       	rjmp	.+2      	; 0x4792 <__gtsf2+0x58>
    4790:	8f ef       	ldi	r24, 0xFF	; 255
    4792:	68 96       	adiw	r28, 0x18	; 24
    4794:	e6 e0       	ldi	r30, 0x06	; 6
    4796:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__epilogue_restores__+0x18>

0000479a <__gesf2>:
    479a:	a8 e1       	ldi	r26, 0x18	; 24
    479c:	b0 e0       	ldi	r27, 0x00	; 0
    479e:	e3 ed       	ldi	r30, 0xD3	; 211
    47a0:	f3 e2       	ldi	r31, 0x23	; 35
    47a2:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__prologue_saves__+0x18>
    47a6:	69 83       	std	Y+1, r22	; 0x01
    47a8:	7a 83       	std	Y+2, r23	; 0x02
    47aa:	8b 83       	std	Y+3, r24	; 0x03
    47ac:	9c 83       	std	Y+4, r25	; 0x04
    47ae:	2d 83       	std	Y+5, r18	; 0x05
    47b0:	3e 83       	std	Y+6, r19	; 0x06
    47b2:	4f 83       	std	Y+7, r20	; 0x07
    47b4:	58 87       	std	Y+8, r21	; 0x08
    47b6:	89 e0       	ldi	r24, 0x09	; 9
    47b8:	e8 2e       	mov	r14, r24
    47ba:	f1 2c       	mov	r15, r1
    47bc:	ec 0e       	add	r14, r28
    47be:	fd 1e       	adc	r15, r29
    47c0:	ce 01       	movw	r24, r28
    47c2:	01 96       	adiw	r24, 0x01	; 1
    47c4:	b7 01       	movw	r22, r14
    47c6:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    47ca:	8e 01       	movw	r16, r28
    47cc:	0f 5e       	subi	r16, 0xEF	; 239
    47ce:	1f 4f       	sbci	r17, 0xFF	; 255
    47d0:	ce 01       	movw	r24, r28
    47d2:	05 96       	adiw	r24, 0x05	; 5
    47d4:	b8 01       	movw	r22, r16
    47d6:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    47da:	89 85       	ldd	r24, Y+9	; 0x09
    47dc:	82 30       	cpi	r24, 0x02	; 2
    47de:	40 f0       	brcs	.+16     	; 0x47f0 <__gesf2+0x56>
    47e0:	89 89       	ldd	r24, Y+17	; 0x11
    47e2:	82 30       	cpi	r24, 0x02	; 2
    47e4:	28 f0       	brcs	.+10     	; 0x47f0 <__gesf2+0x56>
    47e6:	c7 01       	movw	r24, r14
    47e8:	b8 01       	movw	r22, r16
    47ea:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__fpcmp_parts_f>
    47ee:	01 c0       	rjmp	.+2      	; 0x47f2 <__gesf2+0x58>
    47f0:	8f ef       	ldi	r24, 0xFF	; 255
    47f2:	68 96       	adiw	r28, 0x18	; 24
    47f4:	e6 e0       	ldi	r30, 0x06	; 6
    47f6:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__epilogue_restores__+0x18>

000047fa <__ltsf2>:
    47fa:	a8 e1       	ldi	r26, 0x18	; 24
    47fc:	b0 e0       	ldi	r27, 0x00	; 0
    47fe:	e3 e0       	ldi	r30, 0x03	; 3
    4800:	f4 e2       	ldi	r31, 0x24	; 36
    4802:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__prologue_saves__+0x18>
    4806:	69 83       	std	Y+1, r22	; 0x01
    4808:	7a 83       	std	Y+2, r23	; 0x02
    480a:	8b 83       	std	Y+3, r24	; 0x03
    480c:	9c 83       	std	Y+4, r25	; 0x04
    480e:	2d 83       	std	Y+5, r18	; 0x05
    4810:	3e 83       	std	Y+6, r19	; 0x06
    4812:	4f 83       	std	Y+7, r20	; 0x07
    4814:	58 87       	std	Y+8, r21	; 0x08
    4816:	89 e0       	ldi	r24, 0x09	; 9
    4818:	e8 2e       	mov	r14, r24
    481a:	f1 2c       	mov	r15, r1
    481c:	ec 0e       	add	r14, r28
    481e:	fd 1e       	adc	r15, r29
    4820:	ce 01       	movw	r24, r28
    4822:	01 96       	adiw	r24, 0x01	; 1
    4824:	b7 01       	movw	r22, r14
    4826:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    482a:	8e 01       	movw	r16, r28
    482c:	0f 5e       	subi	r16, 0xEF	; 239
    482e:	1f 4f       	sbci	r17, 0xFF	; 255
    4830:	ce 01       	movw	r24, r28
    4832:	05 96       	adiw	r24, 0x05	; 5
    4834:	b8 01       	movw	r22, r16
    4836:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    483a:	89 85       	ldd	r24, Y+9	; 0x09
    483c:	82 30       	cpi	r24, 0x02	; 2
    483e:	40 f0       	brcs	.+16     	; 0x4850 <__ltsf2+0x56>
    4840:	89 89       	ldd	r24, Y+17	; 0x11
    4842:	82 30       	cpi	r24, 0x02	; 2
    4844:	28 f0       	brcs	.+10     	; 0x4850 <__ltsf2+0x56>
    4846:	c7 01       	movw	r24, r14
    4848:	b8 01       	movw	r22, r16
    484a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__fpcmp_parts_f>
    484e:	01 c0       	rjmp	.+2      	; 0x4852 <__ltsf2+0x58>
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	68 96       	adiw	r28, 0x18	; 24
    4854:	e6 e0       	ldi	r30, 0x06	; 6
    4856:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__epilogue_restores__+0x18>

0000485a <__fixsfsi>:
    485a:	ac e0       	ldi	r26, 0x0C	; 12
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	e3 e3       	ldi	r30, 0x33	; 51
    4860:	f4 e2       	ldi	r31, 0x24	; 36
    4862:	0c 94 c6 26 	jmp	0x4d8c	; 0x4d8c <__prologue_saves__+0x20>
    4866:	69 83       	std	Y+1, r22	; 0x01
    4868:	7a 83       	std	Y+2, r23	; 0x02
    486a:	8b 83       	std	Y+3, r24	; 0x03
    486c:	9c 83       	std	Y+4, r25	; 0x04
    486e:	ce 01       	movw	r24, r28
    4870:	01 96       	adiw	r24, 0x01	; 1
    4872:	be 01       	movw	r22, r28
    4874:	6b 5f       	subi	r22, 0xFB	; 251
    4876:	7f 4f       	sbci	r23, 0xFF	; 255
    4878:	0e 94 56 25 	call	0x4aac	; 0x4aac <__unpack_f>
    487c:	8d 81       	ldd	r24, Y+5	; 0x05
    487e:	82 30       	cpi	r24, 0x02	; 2
    4880:	61 f1       	breq	.+88     	; 0x48da <__fixsfsi+0x80>
    4882:	82 30       	cpi	r24, 0x02	; 2
    4884:	50 f1       	brcs	.+84     	; 0x48da <__fixsfsi+0x80>
    4886:	84 30       	cpi	r24, 0x04	; 4
    4888:	21 f4       	brne	.+8      	; 0x4892 <__fixsfsi+0x38>
    488a:	8e 81       	ldd	r24, Y+6	; 0x06
    488c:	88 23       	and	r24, r24
    488e:	51 f1       	breq	.+84     	; 0x48e4 <__fixsfsi+0x8a>
    4890:	2e c0       	rjmp	.+92     	; 0x48ee <__fixsfsi+0x94>
    4892:	2f 81       	ldd	r18, Y+7	; 0x07
    4894:	38 85       	ldd	r19, Y+8	; 0x08
    4896:	37 fd       	sbrc	r19, 7
    4898:	20 c0       	rjmp	.+64     	; 0x48da <__fixsfsi+0x80>
    489a:	6e 81       	ldd	r22, Y+6	; 0x06
    489c:	2f 31       	cpi	r18, 0x1F	; 31
    489e:	31 05       	cpc	r19, r1
    48a0:	1c f0       	brlt	.+6      	; 0x48a8 <__fixsfsi+0x4e>
    48a2:	66 23       	and	r22, r22
    48a4:	f9 f0       	breq	.+62     	; 0x48e4 <__fixsfsi+0x8a>
    48a6:	23 c0       	rjmp	.+70     	; 0x48ee <__fixsfsi+0x94>
    48a8:	8e e1       	ldi	r24, 0x1E	; 30
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	82 1b       	sub	r24, r18
    48ae:	93 0b       	sbc	r25, r19
    48b0:	29 85       	ldd	r18, Y+9	; 0x09
    48b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    48b4:	4b 85       	ldd	r20, Y+11	; 0x0b
    48b6:	5c 85       	ldd	r21, Y+12	; 0x0c
    48b8:	04 c0       	rjmp	.+8      	; 0x48c2 <__fixsfsi+0x68>
    48ba:	56 95       	lsr	r21
    48bc:	47 95       	ror	r20
    48be:	37 95       	ror	r19
    48c0:	27 95       	ror	r18
    48c2:	8a 95       	dec	r24
    48c4:	d2 f7       	brpl	.-12     	; 0x48ba <__fixsfsi+0x60>
    48c6:	66 23       	and	r22, r22
    48c8:	b1 f0       	breq	.+44     	; 0x48f6 <__fixsfsi+0x9c>
    48ca:	50 95       	com	r21
    48cc:	40 95       	com	r20
    48ce:	30 95       	com	r19
    48d0:	21 95       	neg	r18
    48d2:	3f 4f       	sbci	r19, 0xFF	; 255
    48d4:	4f 4f       	sbci	r20, 0xFF	; 255
    48d6:	5f 4f       	sbci	r21, 0xFF	; 255
    48d8:	0e c0       	rjmp	.+28     	; 0x48f6 <__fixsfsi+0x9c>
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	40 e0       	ldi	r20, 0x00	; 0
    48e0:	50 e0       	ldi	r21, 0x00	; 0
    48e2:	09 c0       	rjmp	.+18     	; 0x48f6 <__fixsfsi+0x9c>
    48e4:	2f ef       	ldi	r18, 0xFF	; 255
    48e6:	3f ef       	ldi	r19, 0xFF	; 255
    48e8:	4f ef       	ldi	r20, 0xFF	; 255
    48ea:	5f e7       	ldi	r21, 0x7F	; 127
    48ec:	04 c0       	rjmp	.+8      	; 0x48f6 <__fixsfsi+0x9c>
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	40 e0       	ldi	r20, 0x00	; 0
    48f4:	50 e8       	ldi	r21, 0x80	; 128
    48f6:	b9 01       	movw	r22, r18
    48f8:	ca 01       	movw	r24, r20
    48fa:	2c 96       	adiw	r28, 0x0c	; 12
    48fc:	e2 e0       	ldi	r30, 0x02	; 2
    48fe:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__epilogue_restores__+0x20>

00004902 <__pack_f>:
    4902:	df 92       	push	r13
    4904:	ef 92       	push	r14
    4906:	ff 92       	push	r15
    4908:	0f 93       	push	r16
    490a:	1f 93       	push	r17
    490c:	fc 01       	movw	r30, r24
    490e:	e4 80       	ldd	r14, Z+4	; 0x04
    4910:	f5 80       	ldd	r15, Z+5	; 0x05
    4912:	06 81       	ldd	r16, Z+6	; 0x06
    4914:	17 81       	ldd	r17, Z+7	; 0x07
    4916:	d1 80       	ldd	r13, Z+1	; 0x01
    4918:	80 81       	ld	r24, Z
    491a:	82 30       	cpi	r24, 0x02	; 2
    491c:	48 f4       	brcc	.+18     	; 0x4930 <__pack_f+0x2e>
    491e:	80 e0       	ldi	r24, 0x00	; 0
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	a0 e1       	ldi	r26, 0x10	; 16
    4924:	b0 e0       	ldi	r27, 0x00	; 0
    4926:	e8 2a       	or	r14, r24
    4928:	f9 2a       	or	r15, r25
    492a:	0a 2b       	or	r16, r26
    492c:	1b 2b       	or	r17, r27
    492e:	a5 c0       	rjmp	.+330    	; 0x4a7a <__pack_f+0x178>
    4930:	84 30       	cpi	r24, 0x04	; 4
    4932:	09 f4       	brne	.+2      	; 0x4936 <__pack_f+0x34>
    4934:	9f c0       	rjmp	.+318    	; 0x4a74 <__pack_f+0x172>
    4936:	82 30       	cpi	r24, 0x02	; 2
    4938:	21 f4       	brne	.+8      	; 0x4942 <__pack_f+0x40>
    493a:	ee 24       	eor	r14, r14
    493c:	ff 24       	eor	r15, r15
    493e:	87 01       	movw	r16, r14
    4940:	05 c0       	rjmp	.+10     	; 0x494c <__pack_f+0x4a>
    4942:	e1 14       	cp	r14, r1
    4944:	f1 04       	cpc	r15, r1
    4946:	01 05       	cpc	r16, r1
    4948:	11 05       	cpc	r17, r1
    494a:	19 f4       	brne	.+6      	; 0x4952 <__pack_f+0x50>
    494c:	e0 e0       	ldi	r30, 0x00	; 0
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	96 c0       	rjmp	.+300    	; 0x4a7e <__pack_f+0x17c>
    4952:	62 81       	ldd	r22, Z+2	; 0x02
    4954:	73 81       	ldd	r23, Z+3	; 0x03
    4956:	9f ef       	ldi	r25, 0xFF	; 255
    4958:	62 38       	cpi	r22, 0x82	; 130
    495a:	79 07       	cpc	r23, r25
    495c:	0c f0       	brlt	.+2      	; 0x4960 <__pack_f+0x5e>
    495e:	5b c0       	rjmp	.+182    	; 0x4a16 <__pack_f+0x114>
    4960:	22 e8       	ldi	r18, 0x82	; 130
    4962:	3f ef       	ldi	r19, 0xFF	; 255
    4964:	26 1b       	sub	r18, r22
    4966:	37 0b       	sbc	r19, r23
    4968:	2a 31       	cpi	r18, 0x1A	; 26
    496a:	31 05       	cpc	r19, r1
    496c:	2c f0       	brlt	.+10     	; 0x4978 <__pack_f+0x76>
    496e:	20 e0       	ldi	r18, 0x00	; 0
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	40 e0       	ldi	r20, 0x00	; 0
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	2a c0       	rjmp	.+84     	; 0x49cc <__pack_f+0xca>
    4978:	b8 01       	movw	r22, r16
    497a:	a7 01       	movw	r20, r14
    497c:	02 2e       	mov	r0, r18
    497e:	04 c0       	rjmp	.+8      	; 0x4988 <__pack_f+0x86>
    4980:	76 95       	lsr	r23
    4982:	67 95       	ror	r22
    4984:	57 95       	ror	r21
    4986:	47 95       	ror	r20
    4988:	0a 94       	dec	r0
    498a:	d2 f7       	brpl	.-12     	; 0x4980 <__pack_f+0x7e>
    498c:	81 e0       	ldi	r24, 0x01	; 1
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	a0 e0       	ldi	r26, 0x00	; 0
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	04 c0       	rjmp	.+8      	; 0x499e <__pack_f+0x9c>
    4996:	88 0f       	add	r24, r24
    4998:	99 1f       	adc	r25, r25
    499a:	aa 1f       	adc	r26, r26
    499c:	bb 1f       	adc	r27, r27
    499e:	2a 95       	dec	r18
    49a0:	d2 f7       	brpl	.-12     	; 0x4996 <__pack_f+0x94>
    49a2:	01 97       	sbiw	r24, 0x01	; 1
    49a4:	a1 09       	sbc	r26, r1
    49a6:	b1 09       	sbc	r27, r1
    49a8:	8e 21       	and	r24, r14
    49aa:	9f 21       	and	r25, r15
    49ac:	a0 23       	and	r26, r16
    49ae:	b1 23       	and	r27, r17
    49b0:	00 97       	sbiw	r24, 0x00	; 0
    49b2:	a1 05       	cpc	r26, r1
    49b4:	b1 05       	cpc	r27, r1
    49b6:	21 f0       	breq	.+8      	; 0x49c0 <__pack_f+0xbe>
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	a0 e0       	ldi	r26, 0x00	; 0
    49be:	b0 e0       	ldi	r27, 0x00	; 0
    49c0:	9a 01       	movw	r18, r20
    49c2:	ab 01       	movw	r20, r22
    49c4:	28 2b       	or	r18, r24
    49c6:	39 2b       	or	r19, r25
    49c8:	4a 2b       	or	r20, r26
    49ca:	5b 2b       	or	r21, r27
    49cc:	da 01       	movw	r26, r20
    49ce:	c9 01       	movw	r24, r18
    49d0:	8f 77       	andi	r24, 0x7F	; 127
    49d2:	90 70       	andi	r25, 0x00	; 0
    49d4:	a0 70       	andi	r26, 0x00	; 0
    49d6:	b0 70       	andi	r27, 0x00	; 0
    49d8:	80 34       	cpi	r24, 0x40	; 64
    49da:	91 05       	cpc	r25, r1
    49dc:	a1 05       	cpc	r26, r1
    49de:	b1 05       	cpc	r27, r1
    49e0:	39 f4       	brne	.+14     	; 0x49f0 <__pack_f+0xee>
    49e2:	27 ff       	sbrs	r18, 7
    49e4:	09 c0       	rjmp	.+18     	; 0x49f8 <__pack_f+0xf6>
    49e6:	20 5c       	subi	r18, 0xC0	; 192
    49e8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ea:	4f 4f       	sbci	r20, 0xFF	; 255
    49ec:	5f 4f       	sbci	r21, 0xFF	; 255
    49ee:	04 c0       	rjmp	.+8      	; 0x49f8 <__pack_f+0xf6>
    49f0:	21 5c       	subi	r18, 0xC1	; 193
    49f2:	3f 4f       	sbci	r19, 0xFF	; 255
    49f4:	4f 4f       	sbci	r20, 0xFF	; 255
    49f6:	5f 4f       	sbci	r21, 0xFF	; 255
    49f8:	e0 e0       	ldi	r30, 0x00	; 0
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
    49fc:	20 30       	cpi	r18, 0x00	; 0
    49fe:	a0 e0       	ldi	r26, 0x00	; 0
    4a00:	3a 07       	cpc	r19, r26
    4a02:	a0 e0       	ldi	r26, 0x00	; 0
    4a04:	4a 07       	cpc	r20, r26
    4a06:	a0 e4       	ldi	r26, 0x40	; 64
    4a08:	5a 07       	cpc	r21, r26
    4a0a:	10 f0       	brcs	.+4      	; 0x4a10 <__pack_f+0x10e>
    4a0c:	e1 e0       	ldi	r30, 0x01	; 1
    4a0e:	f0 e0       	ldi	r31, 0x00	; 0
    4a10:	79 01       	movw	r14, r18
    4a12:	8a 01       	movw	r16, r20
    4a14:	27 c0       	rjmp	.+78     	; 0x4a64 <__pack_f+0x162>
    4a16:	60 38       	cpi	r22, 0x80	; 128
    4a18:	71 05       	cpc	r23, r1
    4a1a:	64 f5       	brge	.+88     	; 0x4a74 <__pack_f+0x172>
    4a1c:	fb 01       	movw	r30, r22
    4a1e:	e1 58       	subi	r30, 0x81	; 129
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	d8 01       	movw	r26, r16
    4a24:	c7 01       	movw	r24, r14
    4a26:	8f 77       	andi	r24, 0x7F	; 127
    4a28:	90 70       	andi	r25, 0x00	; 0
    4a2a:	a0 70       	andi	r26, 0x00	; 0
    4a2c:	b0 70       	andi	r27, 0x00	; 0
    4a2e:	80 34       	cpi	r24, 0x40	; 64
    4a30:	91 05       	cpc	r25, r1
    4a32:	a1 05       	cpc	r26, r1
    4a34:	b1 05       	cpc	r27, r1
    4a36:	39 f4       	brne	.+14     	; 0x4a46 <__pack_f+0x144>
    4a38:	e7 fe       	sbrs	r14, 7
    4a3a:	0d c0       	rjmp	.+26     	; 0x4a56 <__pack_f+0x154>
    4a3c:	80 e4       	ldi	r24, 0x40	; 64
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	a0 e0       	ldi	r26, 0x00	; 0
    4a42:	b0 e0       	ldi	r27, 0x00	; 0
    4a44:	04 c0       	rjmp	.+8      	; 0x4a4e <__pack_f+0x14c>
    4a46:	8f e3       	ldi	r24, 0x3F	; 63
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	a0 e0       	ldi	r26, 0x00	; 0
    4a4c:	b0 e0       	ldi	r27, 0x00	; 0
    4a4e:	e8 0e       	add	r14, r24
    4a50:	f9 1e       	adc	r15, r25
    4a52:	0a 1f       	adc	r16, r26
    4a54:	1b 1f       	adc	r17, r27
    4a56:	17 ff       	sbrs	r17, 7
    4a58:	05 c0       	rjmp	.+10     	; 0x4a64 <__pack_f+0x162>
    4a5a:	16 95       	lsr	r17
    4a5c:	07 95       	ror	r16
    4a5e:	f7 94       	ror	r15
    4a60:	e7 94       	ror	r14
    4a62:	31 96       	adiw	r30, 0x01	; 1
    4a64:	87 e0       	ldi	r24, 0x07	; 7
    4a66:	16 95       	lsr	r17
    4a68:	07 95       	ror	r16
    4a6a:	f7 94       	ror	r15
    4a6c:	e7 94       	ror	r14
    4a6e:	8a 95       	dec	r24
    4a70:	d1 f7       	brne	.-12     	; 0x4a66 <__pack_f+0x164>
    4a72:	05 c0       	rjmp	.+10     	; 0x4a7e <__pack_f+0x17c>
    4a74:	ee 24       	eor	r14, r14
    4a76:	ff 24       	eor	r15, r15
    4a78:	87 01       	movw	r16, r14
    4a7a:	ef ef       	ldi	r30, 0xFF	; 255
    4a7c:	f0 e0       	ldi	r31, 0x00	; 0
    4a7e:	6e 2f       	mov	r22, r30
    4a80:	67 95       	ror	r22
    4a82:	66 27       	eor	r22, r22
    4a84:	67 95       	ror	r22
    4a86:	90 2f       	mov	r25, r16
    4a88:	9f 77       	andi	r25, 0x7F	; 127
    4a8a:	d7 94       	ror	r13
    4a8c:	dd 24       	eor	r13, r13
    4a8e:	d7 94       	ror	r13
    4a90:	8e 2f       	mov	r24, r30
    4a92:	86 95       	lsr	r24
    4a94:	49 2f       	mov	r20, r25
    4a96:	46 2b       	or	r20, r22
    4a98:	58 2f       	mov	r21, r24
    4a9a:	5d 29       	or	r21, r13
    4a9c:	b7 01       	movw	r22, r14
    4a9e:	ca 01       	movw	r24, r20
    4aa0:	1f 91       	pop	r17
    4aa2:	0f 91       	pop	r16
    4aa4:	ff 90       	pop	r15
    4aa6:	ef 90       	pop	r14
    4aa8:	df 90       	pop	r13
    4aaa:	08 95       	ret

00004aac <__unpack_f>:
    4aac:	fc 01       	movw	r30, r24
    4aae:	db 01       	movw	r26, r22
    4ab0:	40 81       	ld	r20, Z
    4ab2:	51 81       	ldd	r21, Z+1	; 0x01
    4ab4:	22 81       	ldd	r18, Z+2	; 0x02
    4ab6:	62 2f       	mov	r22, r18
    4ab8:	6f 77       	andi	r22, 0x7F	; 127
    4aba:	70 e0       	ldi	r23, 0x00	; 0
    4abc:	22 1f       	adc	r18, r18
    4abe:	22 27       	eor	r18, r18
    4ac0:	22 1f       	adc	r18, r18
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	89 2f       	mov	r24, r25
    4ac6:	88 0f       	add	r24, r24
    4ac8:	82 2b       	or	r24, r18
    4aca:	28 2f       	mov	r18, r24
    4acc:	30 e0       	ldi	r19, 0x00	; 0
    4ace:	99 1f       	adc	r25, r25
    4ad0:	99 27       	eor	r25, r25
    4ad2:	99 1f       	adc	r25, r25
    4ad4:	11 96       	adiw	r26, 0x01	; 1
    4ad6:	9c 93       	st	X, r25
    4ad8:	11 97       	sbiw	r26, 0x01	; 1
    4ada:	21 15       	cp	r18, r1
    4adc:	31 05       	cpc	r19, r1
    4ade:	a9 f5       	brne	.+106    	; 0x4b4a <__unpack_f+0x9e>
    4ae0:	41 15       	cp	r20, r1
    4ae2:	51 05       	cpc	r21, r1
    4ae4:	61 05       	cpc	r22, r1
    4ae6:	71 05       	cpc	r23, r1
    4ae8:	11 f4       	brne	.+4      	; 0x4aee <__unpack_f+0x42>
    4aea:	82 e0       	ldi	r24, 0x02	; 2
    4aec:	37 c0       	rjmp	.+110    	; 0x4b5c <__unpack_f+0xb0>
    4aee:	82 e8       	ldi	r24, 0x82	; 130
    4af0:	9f ef       	ldi	r25, 0xFF	; 255
    4af2:	13 96       	adiw	r26, 0x03	; 3
    4af4:	9c 93       	st	X, r25
    4af6:	8e 93       	st	-X, r24
    4af8:	12 97       	sbiw	r26, 0x02	; 2
    4afa:	9a 01       	movw	r18, r20
    4afc:	ab 01       	movw	r20, r22
    4afe:	67 e0       	ldi	r22, 0x07	; 7
    4b00:	22 0f       	add	r18, r18
    4b02:	33 1f       	adc	r19, r19
    4b04:	44 1f       	adc	r20, r20
    4b06:	55 1f       	adc	r21, r21
    4b08:	6a 95       	dec	r22
    4b0a:	d1 f7       	brne	.-12     	; 0x4b00 <__unpack_f+0x54>
    4b0c:	83 e0       	ldi	r24, 0x03	; 3
    4b0e:	8c 93       	st	X, r24
    4b10:	0d c0       	rjmp	.+26     	; 0x4b2c <__unpack_f+0x80>
    4b12:	22 0f       	add	r18, r18
    4b14:	33 1f       	adc	r19, r19
    4b16:	44 1f       	adc	r20, r20
    4b18:	55 1f       	adc	r21, r21
    4b1a:	12 96       	adiw	r26, 0x02	; 2
    4b1c:	8d 91       	ld	r24, X+
    4b1e:	9c 91       	ld	r25, X
    4b20:	13 97       	sbiw	r26, 0x03	; 3
    4b22:	01 97       	sbiw	r24, 0x01	; 1
    4b24:	13 96       	adiw	r26, 0x03	; 3
    4b26:	9c 93       	st	X, r25
    4b28:	8e 93       	st	-X, r24
    4b2a:	12 97       	sbiw	r26, 0x02	; 2
    4b2c:	20 30       	cpi	r18, 0x00	; 0
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	38 07       	cpc	r19, r24
    4b32:	80 e0       	ldi	r24, 0x00	; 0
    4b34:	48 07       	cpc	r20, r24
    4b36:	80 e4       	ldi	r24, 0x40	; 64
    4b38:	58 07       	cpc	r21, r24
    4b3a:	58 f3       	brcs	.-42     	; 0x4b12 <__unpack_f+0x66>
    4b3c:	14 96       	adiw	r26, 0x04	; 4
    4b3e:	2d 93       	st	X+, r18
    4b40:	3d 93       	st	X+, r19
    4b42:	4d 93       	st	X+, r20
    4b44:	5c 93       	st	X, r21
    4b46:	17 97       	sbiw	r26, 0x07	; 7
    4b48:	08 95       	ret
    4b4a:	2f 3f       	cpi	r18, 0xFF	; 255
    4b4c:	31 05       	cpc	r19, r1
    4b4e:	79 f4       	brne	.+30     	; 0x4b6e <__unpack_f+0xc2>
    4b50:	41 15       	cp	r20, r1
    4b52:	51 05       	cpc	r21, r1
    4b54:	61 05       	cpc	r22, r1
    4b56:	71 05       	cpc	r23, r1
    4b58:	19 f4       	brne	.+6      	; 0x4b60 <__unpack_f+0xb4>
    4b5a:	84 e0       	ldi	r24, 0x04	; 4
    4b5c:	8c 93       	st	X, r24
    4b5e:	08 95       	ret
    4b60:	64 ff       	sbrs	r22, 4
    4b62:	03 c0       	rjmp	.+6      	; 0x4b6a <__unpack_f+0xbe>
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	8c 93       	st	X, r24
    4b68:	12 c0       	rjmp	.+36     	; 0x4b8e <__unpack_f+0xe2>
    4b6a:	1c 92       	st	X, r1
    4b6c:	10 c0       	rjmp	.+32     	; 0x4b8e <__unpack_f+0xe2>
    4b6e:	2f 57       	subi	r18, 0x7F	; 127
    4b70:	30 40       	sbci	r19, 0x00	; 0
    4b72:	13 96       	adiw	r26, 0x03	; 3
    4b74:	3c 93       	st	X, r19
    4b76:	2e 93       	st	-X, r18
    4b78:	12 97       	sbiw	r26, 0x02	; 2
    4b7a:	83 e0       	ldi	r24, 0x03	; 3
    4b7c:	8c 93       	st	X, r24
    4b7e:	87 e0       	ldi	r24, 0x07	; 7
    4b80:	44 0f       	add	r20, r20
    4b82:	55 1f       	adc	r21, r21
    4b84:	66 1f       	adc	r22, r22
    4b86:	77 1f       	adc	r23, r23
    4b88:	8a 95       	dec	r24
    4b8a:	d1 f7       	brne	.-12     	; 0x4b80 <__unpack_f+0xd4>
    4b8c:	70 64       	ori	r23, 0x40	; 64
    4b8e:	14 96       	adiw	r26, 0x04	; 4
    4b90:	4d 93       	st	X+, r20
    4b92:	5d 93       	st	X+, r21
    4b94:	6d 93       	st	X+, r22
    4b96:	7c 93       	st	X, r23
    4b98:	17 97       	sbiw	r26, 0x07	; 7
    4b9a:	08 95       	ret

00004b9c <__fpcmp_parts_f>:
    4b9c:	1f 93       	push	r17
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	fb 01       	movw	r30, r22
    4ba2:	9c 91       	ld	r25, X
    4ba4:	92 30       	cpi	r25, 0x02	; 2
    4ba6:	08 f4       	brcc	.+2      	; 0x4baa <__fpcmp_parts_f+0xe>
    4ba8:	47 c0       	rjmp	.+142    	; 0x4c38 <__fpcmp_parts_f+0x9c>
    4baa:	80 81       	ld	r24, Z
    4bac:	82 30       	cpi	r24, 0x02	; 2
    4bae:	08 f4       	brcc	.+2      	; 0x4bb2 <__fpcmp_parts_f+0x16>
    4bb0:	43 c0       	rjmp	.+134    	; 0x4c38 <__fpcmp_parts_f+0x9c>
    4bb2:	94 30       	cpi	r25, 0x04	; 4
    4bb4:	51 f4       	brne	.+20     	; 0x4bca <__fpcmp_parts_f+0x2e>
    4bb6:	11 96       	adiw	r26, 0x01	; 1
    4bb8:	1c 91       	ld	r17, X
    4bba:	84 30       	cpi	r24, 0x04	; 4
    4bbc:	99 f5       	brne	.+102    	; 0x4c24 <__fpcmp_parts_f+0x88>
    4bbe:	81 81       	ldd	r24, Z+1	; 0x01
    4bc0:	68 2f       	mov	r22, r24
    4bc2:	70 e0       	ldi	r23, 0x00	; 0
    4bc4:	61 1b       	sub	r22, r17
    4bc6:	71 09       	sbc	r23, r1
    4bc8:	3f c0       	rjmp	.+126    	; 0x4c48 <__fpcmp_parts_f+0xac>
    4bca:	84 30       	cpi	r24, 0x04	; 4
    4bcc:	21 f0       	breq	.+8      	; 0x4bd6 <__fpcmp_parts_f+0x3a>
    4bce:	92 30       	cpi	r25, 0x02	; 2
    4bd0:	31 f4       	brne	.+12     	; 0x4bde <__fpcmp_parts_f+0x42>
    4bd2:	82 30       	cpi	r24, 0x02	; 2
    4bd4:	b9 f1       	breq	.+110    	; 0x4c44 <__fpcmp_parts_f+0xa8>
    4bd6:	81 81       	ldd	r24, Z+1	; 0x01
    4bd8:	88 23       	and	r24, r24
    4bda:	89 f1       	breq	.+98     	; 0x4c3e <__fpcmp_parts_f+0xa2>
    4bdc:	2d c0       	rjmp	.+90     	; 0x4c38 <__fpcmp_parts_f+0x9c>
    4bde:	11 96       	adiw	r26, 0x01	; 1
    4be0:	1c 91       	ld	r17, X
    4be2:	11 97       	sbiw	r26, 0x01	; 1
    4be4:	82 30       	cpi	r24, 0x02	; 2
    4be6:	f1 f0       	breq	.+60     	; 0x4c24 <__fpcmp_parts_f+0x88>
    4be8:	81 81       	ldd	r24, Z+1	; 0x01
    4bea:	18 17       	cp	r17, r24
    4bec:	d9 f4       	brne	.+54     	; 0x4c24 <__fpcmp_parts_f+0x88>
    4bee:	12 96       	adiw	r26, 0x02	; 2
    4bf0:	2d 91       	ld	r18, X+
    4bf2:	3c 91       	ld	r19, X
    4bf4:	13 97       	sbiw	r26, 0x03	; 3
    4bf6:	82 81       	ldd	r24, Z+2	; 0x02
    4bf8:	93 81       	ldd	r25, Z+3	; 0x03
    4bfa:	82 17       	cp	r24, r18
    4bfc:	93 07       	cpc	r25, r19
    4bfe:	94 f0       	brlt	.+36     	; 0x4c24 <__fpcmp_parts_f+0x88>
    4c00:	28 17       	cp	r18, r24
    4c02:	39 07       	cpc	r19, r25
    4c04:	bc f0       	brlt	.+46     	; 0x4c34 <__fpcmp_parts_f+0x98>
    4c06:	14 96       	adiw	r26, 0x04	; 4
    4c08:	8d 91       	ld	r24, X+
    4c0a:	9d 91       	ld	r25, X+
    4c0c:	0d 90       	ld	r0, X+
    4c0e:	bc 91       	ld	r27, X
    4c10:	a0 2d       	mov	r26, r0
    4c12:	24 81       	ldd	r18, Z+4	; 0x04
    4c14:	35 81       	ldd	r19, Z+5	; 0x05
    4c16:	46 81       	ldd	r20, Z+6	; 0x06
    4c18:	57 81       	ldd	r21, Z+7	; 0x07
    4c1a:	28 17       	cp	r18, r24
    4c1c:	39 07       	cpc	r19, r25
    4c1e:	4a 07       	cpc	r20, r26
    4c20:	5b 07       	cpc	r21, r27
    4c22:	18 f4       	brcc	.+6      	; 0x4c2a <__fpcmp_parts_f+0x8e>
    4c24:	11 23       	and	r17, r17
    4c26:	41 f0       	breq	.+16     	; 0x4c38 <__fpcmp_parts_f+0x9c>
    4c28:	0a c0       	rjmp	.+20     	; 0x4c3e <__fpcmp_parts_f+0xa2>
    4c2a:	82 17       	cp	r24, r18
    4c2c:	93 07       	cpc	r25, r19
    4c2e:	a4 07       	cpc	r26, r20
    4c30:	b5 07       	cpc	r27, r21
    4c32:	40 f4       	brcc	.+16     	; 0x4c44 <__fpcmp_parts_f+0xa8>
    4c34:	11 23       	and	r17, r17
    4c36:	19 f0       	breq	.+6      	; 0x4c3e <__fpcmp_parts_f+0xa2>
    4c38:	61 e0       	ldi	r22, 0x01	; 1
    4c3a:	70 e0       	ldi	r23, 0x00	; 0
    4c3c:	05 c0       	rjmp	.+10     	; 0x4c48 <__fpcmp_parts_f+0xac>
    4c3e:	6f ef       	ldi	r22, 0xFF	; 255
    4c40:	7f ef       	ldi	r23, 0xFF	; 255
    4c42:	02 c0       	rjmp	.+4      	; 0x4c48 <__fpcmp_parts_f+0xac>
    4c44:	60 e0       	ldi	r22, 0x00	; 0
    4c46:	70 e0       	ldi	r23, 0x00	; 0
    4c48:	cb 01       	movw	r24, r22
    4c4a:	1f 91       	pop	r17
    4c4c:	08 95       	ret

00004c4e <__mulsi3>:
    4c4e:	62 9f       	mul	r22, r18
    4c50:	d0 01       	movw	r26, r0
    4c52:	73 9f       	mul	r23, r19
    4c54:	f0 01       	movw	r30, r0
    4c56:	82 9f       	mul	r24, r18
    4c58:	e0 0d       	add	r30, r0
    4c5a:	f1 1d       	adc	r31, r1
    4c5c:	64 9f       	mul	r22, r20
    4c5e:	e0 0d       	add	r30, r0
    4c60:	f1 1d       	adc	r31, r1
    4c62:	92 9f       	mul	r25, r18
    4c64:	f0 0d       	add	r31, r0
    4c66:	83 9f       	mul	r24, r19
    4c68:	f0 0d       	add	r31, r0
    4c6a:	74 9f       	mul	r23, r20
    4c6c:	f0 0d       	add	r31, r0
    4c6e:	65 9f       	mul	r22, r21
    4c70:	f0 0d       	add	r31, r0
    4c72:	99 27       	eor	r25, r25
    4c74:	72 9f       	mul	r23, r18
    4c76:	b0 0d       	add	r27, r0
    4c78:	e1 1d       	adc	r30, r1
    4c7a:	f9 1f       	adc	r31, r25
    4c7c:	63 9f       	mul	r22, r19
    4c7e:	b0 0d       	add	r27, r0
    4c80:	e1 1d       	adc	r30, r1
    4c82:	f9 1f       	adc	r31, r25
    4c84:	bd 01       	movw	r22, r26
    4c86:	cf 01       	movw	r24, r30
    4c88:	11 24       	eor	r1, r1
    4c8a:	08 95       	ret

00004c8c <__udivmodqi4>:
    4c8c:	99 1b       	sub	r25, r25
    4c8e:	79 e0       	ldi	r23, 0x09	; 9
    4c90:	04 c0       	rjmp	.+8      	; 0x4c9a <__udivmodqi4_ep>

00004c92 <__udivmodqi4_loop>:
    4c92:	99 1f       	adc	r25, r25
    4c94:	96 17       	cp	r25, r22
    4c96:	08 f0       	brcs	.+2      	; 0x4c9a <__udivmodqi4_ep>
    4c98:	96 1b       	sub	r25, r22

00004c9a <__udivmodqi4_ep>:
    4c9a:	88 1f       	adc	r24, r24
    4c9c:	7a 95       	dec	r23
    4c9e:	c9 f7       	brne	.-14     	; 0x4c92 <__udivmodqi4_loop>
    4ca0:	80 95       	com	r24
    4ca2:	08 95       	ret

00004ca4 <__udivmodhi4>:
    4ca4:	aa 1b       	sub	r26, r26
    4ca6:	bb 1b       	sub	r27, r27
    4ca8:	51 e1       	ldi	r21, 0x11	; 17
    4caa:	07 c0       	rjmp	.+14     	; 0x4cba <__udivmodhi4_ep>

00004cac <__udivmodhi4_loop>:
    4cac:	aa 1f       	adc	r26, r26
    4cae:	bb 1f       	adc	r27, r27
    4cb0:	a6 17       	cp	r26, r22
    4cb2:	b7 07       	cpc	r27, r23
    4cb4:	10 f0       	brcs	.+4      	; 0x4cba <__udivmodhi4_ep>
    4cb6:	a6 1b       	sub	r26, r22
    4cb8:	b7 0b       	sbc	r27, r23

00004cba <__udivmodhi4_ep>:
    4cba:	88 1f       	adc	r24, r24
    4cbc:	99 1f       	adc	r25, r25
    4cbe:	5a 95       	dec	r21
    4cc0:	a9 f7       	brne	.-22     	; 0x4cac <__udivmodhi4_loop>
    4cc2:	80 95       	com	r24
    4cc4:	90 95       	com	r25
    4cc6:	bc 01       	movw	r22, r24
    4cc8:	cd 01       	movw	r24, r26
    4cca:	08 95       	ret

00004ccc <__divmodhi4>:
    4ccc:	97 fb       	bst	r25, 7
    4cce:	09 2e       	mov	r0, r25
    4cd0:	07 26       	eor	r0, r23
    4cd2:	0a d0       	rcall	.+20     	; 0x4ce8 <__divmodhi4_neg1>
    4cd4:	77 fd       	sbrc	r23, 7
    4cd6:	04 d0       	rcall	.+8      	; 0x4ce0 <__divmodhi4_neg2>
    4cd8:	e5 df       	rcall	.-54     	; 0x4ca4 <__udivmodhi4>
    4cda:	06 d0       	rcall	.+12     	; 0x4ce8 <__divmodhi4_neg1>
    4cdc:	00 20       	and	r0, r0
    4cde:	1a f4       	brpl	.+6      	; 0x4ce6 <__divmodhi4_exit>

00004ce0 <__divmodhi4_neg2>:
    4ce0:	70 95       	com	r23
    4ce2:	61 95       	neg	r22
    4ce4:	7f 4f       	sbci	r23, 0xFF	; 255

00004ce6 <__divmodhi4_exit>:
    4ce6:	08 95       	ret

00004ce8 <__divmodhi4_neg1>:
    4ce8:	f6 f7       	brtc	.-4      	; 0x4ce6 <__divmodhi4_exit>
    4cea:	90 95       	com	r25
    4cec:	81 95       	neg	r24
    4cee:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf0:	08 95       	ret

00004cf2 <__divmodsi4>:
    4cf2:	97 fb       	bst	r25, 7
    4cf4:	09 2e       	mov	r0, r25
    4cf6:	05 26       	eor	r0, r21
    4cf8:	0e d0       	rcall	.+28     	; 0x4d16 <__divmodsi4_neg1>
    4cfa:	57 fd       	sbrc	r21, 7
    4cfc:	04 d0       	rcall	.+8      	; 0x4d06 <__divmodsi4_neg2>
    4cfe:	14 d0       	rcall	.+40     	; 0x4d28 <__udivmodsi4>
    4d00:	0a d0       	rcall	.+20     	; 0x4d16 <__divmodsi4_neg1>
    4d02:	00 1c       	adc	r0, r0
    4d04:	38 f4       	brcc	.+14     	; 0x4d14 <__divmodsi4_exit>

00004d06 <__divmodsi4_neg2>:
    4d06:	50 95       	com	r21
    4d08:	40 95       	com	r20
    4d0a:	30 95       	com	r19
    4d0c:	21 95       	neg	r18
    4d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d10:	4f 4f       	sbci	r20, 0xFF	; 255
    4d12:	5f 4f       	sbci	r21, 0xFF	; 255

00004d14 <__divmodsi4_exit>:
    4d14:	08 95       	ret

00004d16 <__divmodsi4_neg1>:
    4d16:	f6 f7       	brtc	.-4      	; 0x4d14 <__divmodsi4_exit>
    4d18:	90 95       	com	r25
    4d1a:	80 95       	com	r24
    4d1c:	70 95       	com	r23
    4d1e:	61 95       	neg	r22
    4d20:	7f 4f       	sbci	r23, 0xFF	; 255
    4d22:	8f 4f       	sbci	r24, 0xFF	; 255
    4d24:	9f 4f       	sbci	r25, 0xFF	; 255
    4d26:	08 95       	ret

00004d28 <__udivmodsi4>:
    4d28:	a1 e2       	ldi	r26, 0x21	; 33
    4d2a:	1a 2e       	mov	r1, r26
    4d2c:	aa 1b       	sub	r26, r26
    4d2e:	bb 1b       	sub	r27, r27
    4d30:	fd 01       	movw	r30, r26
    4d32:	0d c0       	rjmp	.+26     	; 0x4d4e <__udivmodsi4_ep>

00004d34 <__udivmodsi4_loop>:
    4d34:	aa 1f       	adc	r26, r26
    4d36:	bb 1f       	adc	r27, r27
    4d38:	ee 1f       	adc	r30, r30
    4d3a:	ff 1f       	adc	r31, r31
    4d3c:	a2 17       	cp	r26, r18
    4d3e:	b3 07       	cpc	r27, r19
    4d40:	e4 07       	cpc	r30, r20
    4d42:	f5 07       	cpc	r31, r21
    4d44:	20 f0       	brcs	.+8      	; 0x4d4e <__udivmodsi4_ep>
    4d46:	a2 1b       	sub	r26, r18
    4d48:	b3 0b       	sbc	r27, r19
    4d4a:	e4 0b       	sbc	r30, r20
    4d4c:	f5 0b       	sbc	r31, r21

00004d4e <__udivmodsi4_ep>:
    4d4e:	66 1f       	adc	r22, r22
    4d50:	77 1f       	adc	r23, r23
    4d52:	88 1f       	adc	r24, r24
    4d54:	99 1f       	adc	r25, r25
    4d56:	1a 94       	dec	r1
    4d58:	69 f7       	brne	.-38     	; 0x4d34 <__udivmodsi4_loop>
    4d5a:	60 95       	com	r22
    4d5c:	70 95       	com	r23
    4d5e:	80 95       	com	r24
    4d60:	90 95       	com	r25
    4d62:	9b 01       	movw	r18, r22
    4d64:	ac 01       	movw	r20, r24
    4d66:	bd 01       	movw	r22, r26
    4d68:	cf 01       	movw	r24, r30
    4d6a:	08 95       	ret

00004d6c <__prologue_saves__>:
    4d6c:	2f 92       	push	r2
    4d6e:	3f 92       	push	r3
    4d70:	4f 92       	push	r4
    4d72:	5f 92       	push	r5
    4d74:	6f 92       	push	r6
    4d76:	7f 92       	push	r7
    4d78:	8f 92       	push	r8
    4d7a:	9f 92       	push	r9
    4d7c:	af 92       	push	r10
    4d7e:	bf 92       	push	r11
    4d80:	cf 92       	push	r12
    4d82:	df 92       	push	r13
    4d84:	ef 92       	push	r14
    4d86:	ff 92       	push	r15
    4d88:	0f 93       	push	r16
    4d8a:	1f 93       	push	r17
    4d8c:	cf 93       	push	r28
    4d8e:	df 93       	push	r29
    4d90:	cd b7       	in	r28, 0x3d	; 61
    4d92:	de b7       	in	r29, 0x3e	; 62
    4d94:	ca 1b       	sub	r28, r26
    4d96:	db 0b       	sbc	r29, r27
    4d98:	0f b6       	in	r0, 0x3f	; 63
    4d9a:	f8 94       	cli
    4d9c:	de bf       	out	0x3e, r29	; 62
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	cd bf       	out	0x3d, r28	; 61
    4da2:	09 94       	ijmp

00004da4 <__epilogue_restores__>:
    4da4:	2a 88       	ldd	r2, Y+18	; 0x12
    4da6:	39 88       	ldd	r3, Y+17	; 0x11
    4da8:	48 88       	ldd	r4, Y+16	; 0x10
    4daa:	5f 84       	ldd	r5, Y+15	; 0x0f
    4dac:	6e 84       	ldd	r6, Y+14	; 0x0e
    4dae:	7d 84       	ldd	r7, Y+13	; 0x0d
    4db0:	8c 84       	ldd	r8, Y+12	; 0x0c
    4db2:	9b 84       	ldd	r9, Y+11	; 0x0b
    4db4:	aa 84       	ldd	r10, Y+10	; 0x0a
    4db6:	b9 84       	ldd	r11, Y+9	; 0x09
    4db8:	c8 84       	ldd	r12, Y+8	; 0x08
    4dba:	df 80       	ldd	r13, Y+7	; 0x07
    4dbc:	ee 80       	ldd	r14, Y+6	; 0x06
    4dbe:	fd 80       	ldd	r15, Y+5	; 0x05
    4dc0:	0c 81       	ldd	r16, Y+4	; 0x04
    4dc2:	1b 81       	ldd	r17, Y+3	; 0x03
    4dc4:	aa 81       	ldd	r26, Y+2	; 0x02
    4dc6:	b9 81       	ldd	r27, Y+1	; 0x01
    4dc8:	ce 0f       	add	r28, r30
    4dca:	d1 1d       	adc	r29, r1
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
    4dd6:	ed 01       	movw	r28, r26
    4dd8:	08 95       	ret

00004dda <sprintf>:
    4dda:	ae e0       	ldi	r26, 0x0E	; 14
    4ddc:	b0 e0       	ldi	r27, 0x00	; 0
    4dde:	e3 ef       	ldi	r30, 0xF3	; 243
    4de0:	f6 e2       	ldi	r31, 0x26	; 38
    4de2:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__prologue_saves__+0x1c>
    4de6:	0d 89       	ldd	r16, Y+21	; 0x15
    4de8:	1e 89       	ldd	r17, Y+22	; 0x16
    4dea:	86 e0       	ldi	r24, 0x06	; 6
    4dec:	8c 83       	std	Y+4, r24	; 0x04
    4dee:	1a 83       	std	Y+2, r17	; 0x02
    4df0:	09 83       	std	Y+1, r16	; 0x01
    4df2:	8f ef       	ldi	r24, 0xFF	; 255
    4df4:	9f e7       	ldi	r25, 0x7F	; 127
    4df6:	9e 83       	std	Y+6, r25	; 0x06
    4df8:	8d 83       	std	Y+5, r24	; 0x05
    4dfa:	9e 01       	movw	r18, r28
    4dfc:	27 5e       	subi	r18, 0xE7	; 231
    4dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    4e00:	ce 01       	movw	r24, r28
    4e02:	01 96       	adiw	r24, 0x01	; 1
    4e04:	6f 89       	ldd	r22, Y+23	; 0x17
    4e06:	78 8d       	ldd	r23, Y+24	; 0x18
    4e08:	a9 01       	movw	r20, r18
    4e0a:	0e 94 11 27 	call	0x4e22	; 0x4e22 <vfprintf>
    4e0e:	2f 81       	ldd	r18, Y+7	; 0x07
    4e10:	38 85       	ldd	r19, Y+8	; 0x08
    4e12:	02 0f       	add	r16, r18
    4e14:	13 1f       	adc	r17, r19
    4e16:	f8 01       	movw	r30, r16
    4e18:	10 82       	st	Z, r1
    4e1a:	2e 96       	adiw	r28, 0x0e	; 14
    4e1c:	e4 e0       	ldi	r30, 0x04	; 4
    4e1e:	0c 94 e0 26 	jmp	0x4dc0	; 0x4dc0 <__epilogue_restores__+0x1c>

00004e22 <vfprintf>:
    4e22:	ab e0       	ldi	r26, 0x0B	; 11
    4e24:	b0 e0       	ldi	r27, 0x00	; 0
    4e26:	e7 e1       	ldi	r30, 0x17	; 23
    4e28:	f7 e2       	ldi	r31, 0x27	; 39
    4e2a:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__prologue_saves__>
    4e2e:	3c 01       	movw	r6, r24
    4e30:	2b 01       	movw	r4, r22
    4e32:	5a 01       	movw	r10, r20
    4e34:	fc 01       	movw	r30, r24
    4e36:	17 82       	std	Z+7, r1	; 0x07
    4e38:	16 82       	std	Z+6, r1	; 0x06
    4e3a:	83 81       	ldd	r24, Z+3	; 0x03
    4e3c:	81 fd       	sbrc	r24, 1
    4e3e:	03 c0       	rjmp	.+6      	; 0x4e46 <vfprintf+0x24>
    4e40:	6f ef       	ldi	r22, 0xFF	; 255
    4e42:	7f ef       	ldi	r23, 0xFF	; 255
    4e44:	c6 c1       	rjmp	.+908    	; 0x51d2 <vfprintf+0x3b0>
    4e46:	9a e0       	ldi	r25, 0x0A	; 10
    4e48:	89 2e       	mov	r8, r25
    4e4a:	1e 01       	movw	r2, r28
    4e4c:	08 94       	sec
    4e4e:	21 1c       	adc	r2, r1
    4e50:	31 1c       	adc	r3, r1
    4e52:	f3 01       	movw	r30, r6
    4e54:	23 81       	ldd	r18, Z+3	; 0x03
    4e56:	f2 01       	movw	r30, r4
    4e58:	23 fd       	sbrc	r18, 3
    4e5a:	85 91       	lpm	r24, Z+
    4e5c:	23 ff       	sbrs	r18, 3
    4e5e:	81 91       	ld	r24, Z+
    4e60:	2f 01       	movw	r4, r30
    4e62:	88 23       	and	r24, r24
    4e64:	09 f4       	brne	.+2      	; 0x4e68 <vfprintf+0x46>
    4e66:	b2 c1       	rjmp	.+868    	; 0x51cc <vfprintf+0x3aa>
    4e68:	85 32       	cpi	r24, 0x25	; 37
    4e6a:	39 f4       	brne	.+14     	; 0x4e7a <vfprintf+0x58>
    4e6c:	23 fd       	sbrc	r18, 3
    4e6e:	85 91       	lpm	r24, Z+
    4e70:	23 ff       	sbrs	r18, 3
    4e72:	81 91       	ld	r24, Z+
    4e74:	2f 01       	movw	r4, r30
    4e76:	85 32       	cpi	r24, 0x25	; 37
    4e78:	29 f4       	brne	.+10     	; 0x4e84 <vfprintf+0x62>
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	b3 01       	movw	r22, r6
    4e7e:	0e 94 04 29 	call	0x5208	; 0x5208 <fputc>
    4e82:	e7 cf       	rjmp	.-50     	; 0x4e52 <vfprintf+0x30>
    4e84:	98 2f       	mov	r25, r24
    4e86:	ff 24       	eor	r15, r15
    4e88:	ee 24       	eor	r14, r14
    4e8a:	99 24       	eor	r9, r9
    4e8c:	ff e1       	ldi	r31, 0x1F	; 31
    4e8e:	ff 15       	cp	r31, r15
    4e90:	d0 f0       	brcs	.+52     	; 0x4ec6 <vfprintf+0xa4>
    4e92:	9b 32       	cpi	r25, 0x2B	; 43
    4e94:	69 f0       	breq	.+26     	; 0x4eb0 <vfprintf+0x8e>
    4e96:	9c 32       	cpi	r25, 0x2C	; 44
    4e98:	28 f4       	brcc	.+10     	; 0x4ea4 <vfprintf+0x82>
    4e9a:	90 32       	cpi	r25, 0x20	; 32
    4e9c:	59 f0       	breq	.+22     	; 0x4eb4 <vfprintf+0x92>
    4e9e:	93 32       	cpi	r25, 0x23	; 35
    4ea0:	91 f4       	brne	.+36     	; 0x4ec6 <vfprintf+0xa4>
    4ea2:	0e c0       	rjmp	.+28     	; 0x4ec0 <vfprintf+0x9e>
    4ea4:	9d 32       	cpi	r25, 0x2D	; 45
    4ea6:	49 f0       	breq	.+18     	; 0x4eba <vfprintf+0x98>
    4ea8:	90 33       	cpi	r25, 0x30	; 48
    4eaa:	69 f4       	brne	.+26     	; 0x4ec6 <vfprintf+0xa4>
    4eac:	41 e0       	ldi	r20, 0x01	; 1
    4eae:	24 c0       	rjmp	.+72     	; 0x4ef8 <vfprintf+0xd6>
    4eb0:	52 e0       	ldi	r21, 0x02	; 2
    4eb2:	f5 2a       	or	r15, r21
    4eb4:	84 e0       	ldi	r24, 0x04	; 4
    4eb6:	f8 2a       	or	r15, r24
    4eb8:	28 c0       	rjmp	.+80     	; 0x4f0a <vfprintf+0xe8>
    4eba:	98 e0       	ldi	r25, 0x08	; 8
    4ebc:	f9 2a       	or	r15, r25
    4ebe:	25 c0       	rjmp	.+74     	; 0x4f0a <vfprintf+0xe8>
    4ec0:	e0 e1       	ldi	r30, 0x10	; 16
    4ec2:	fe 2a       	or	r15, r30
    4ec4:	22 c0       	rjmp	.+68     	; 0x4f0a <vfprintf+0xe8>
    4ec6:	f7 fc       	sbrc	r15, 7
    4ec8:	29 c0       	rjmp	.+82     	; 0x4f1c <vfprintf+0xfa>
    4eca:	89 2f       	mov	r24, r25
    4ecc:	80 53       	subi	r24, 0x30	; 48
    4ece:	8a 30       	cpi	r24, 0x0A	; 10
    4ed0:	70 f4       	brcc	.+28     	; 0x4eee <vfprintf+0xcc>
    4ed2:	f6 fe       	sbrs	r15, 6
    4ed4:	05 c0       	rjmp	.+10     	; 0x4ee0 <vfprintf+0xbe>
    4ed6:	98 9c       	mul	r9, r8
    4ed8:	90 2c       	mov	r9, r0
    4eda:	11 24       	eor	r1, r1
    4edc:	98 0e       	add	r9, r24
    4ede:	15 c0       	rjmp	.+42     	; 0x4f0a <vfprintf+0xe8>
    4ee0:	e8 9c       	mul	r14, r8
    4ee2:	e0 2c       	mov	r14, r0
    4ee4:	11 24       	eor	r1, r1
    4ee6:	e8 0e       	add	r14, r24
    4ee8:	f0 e2       	ldi	r31, 0x20	; 32
    4eea:	ff 2a       	or	r15, r31
    4eec:	0e c0       	rjmp	.+28     	; 0x4f0a <vfprintf+0xe8>
    4eee:	9e 32       	cpi	r25, 0x2E	; 46
    4ef0:	29 f4       	brne	.+10     	; 0x4efc <vfprintf+0xda>
    4ef2:	f6 fc       	sbrc	r15, 6
    4ef4:	6b c1       	rjmp	.+726    	; 0x51cc <vfprintf+0x3aa>
    4ef6:	40 e4       	ldi	r20, 0x40	; 64
    4ef8:	f4 2a       	or	r15, r20
    4efa:	07 c0       	rjmp	.+14     	; 0x4f0a <vfprintf+0xe8>
    4efc:	9c 36       	cpi	r25, 0x6C	; 108
    4efe:	19 f4       	brne	.+6      	; 0x4f06 <vfprintf+0xe4>
    4f00:	50 e8       	ldi	r21, 0x80	; 128
    4f02:	f5 2a       	or	r15, r21
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <vfprintf+0xe8>
    4f06:	98 36       	cpi	r25, 0x68	; 104
    4f08:	49 f4       	brne	.+18     	; 0x4f1c <vfprintf+0xfa>
    4f0a:	f2 01       	movw	r30, r4
    4f0c:	23 fd       	sbrc	r18, 3
    4f0e:	95 91       	lpm	r25, Z+
    4f10:	23 ff       	sbrs	r18, 3
    4f12:	91 91       	ld	r25, Z+
    4f14:	2f 01       	movw	r4, r30
    4f16:	99 23       	and	r25, r25
    4f18:	09 f0       	breq	.+2      	; 0x4f1c <vfprintf+0xfa>
    4f1a:	b8 cf       	rjmp	.-144    	; 0x4e8c <vfprintf+0x6a>
    4f1c:	89 2f       	mov	r24, r25
    4f1e:	85 54       	subi	r24, 0x45	; 69
    4f20:	83 30       	cpi	r24, 0x03	; 3
    4f22:	18 f0       	brcs	.+6      	; 0x4f2a <vfprintf+0x108>
    4f24:	80 52       	subi	r24, 0x20	; 32
    4f26:	83 30       	cpi	r24, 0x03	; 3
    4f28:	38 f4       	brcc	.+14     	; 0x4f38 <vfprintf+0x116>
    4f2a:	44 e0       	ldi	r20, 0x04	; 4
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	a4 0e       	add	r10, r20
    4f30:	b5 1e       	adc	r11, r21
    4f32:	5f e3       	ldi	r21, 0x3F	; 63
    4f34:	59 83       	std	Y+1, r21	; 0x01
    4f36:	0f c0       	rjmp	.+30     	; 0x4f56 <vfprintf+0x134>
    4f38:	93 36       	cpi	r25, 0x63	; 99
    4f3a:	31 f0       	breq	.+12     	; 0x4f48 <vfprintf+0x126>
    4f3c:	93 37       	cpi	r25, 0x73	; 115
    4f3e:	79 f0       	breq	.+30     	; 0x4f5e <vfprintf+0x13c>
    4f40:	93 35       	cpi	r25, 0x53	; 83
    4f42:	09 f0       	breq	.+2      	; 0x4f46 <vfprintf+0x124>
    4f44:	56 c0       	rjmp	.+172    	; 0x4ff2 <vfprintf+0x1d0>
    4f46:	20 c0       	rjmp	.+64     	; 0x4f88 <vfprintf+0x166>
    4f48:	f5 01       	movw	r30, r10
    4f4a:	80 81       	ld	r24, Z
    4f4c:	89 83       	std	Y+1, r24	; 0x01
    4f4e:	42 e0       	ldi	r20, 0x02	; 2
    4f50:	50 e0       	ldi	r21, 0x00	; 0
    4f52:	a4 0e       	add	r10, r20
    4f54:	b5 1e       	adc	r11, r21
    4f56:	61 01       	movw	r12, r2
    4f58:	01 e0       	ldi	r16, 0x01	; 1
    4f5a:	10 e0       	ldi	r17, 0x00	; 0
    4f5c:	12 c0       	rjmp	.+36     	; 0x4f82 <vfprintf+0x160>
    4f5e:	f5 01       	movw	r30, r10
    4f60:	c0 80       	ld	r12, Z
    4f62:	d1 80       	ldd	r13, Z+1	; 0x01
    4f64:	f6 fc       	sbrc	r15, 6
    4f66:	03 c0       	rjmp	.+6      	; 0x4f6e <vfprintf+0x14c>
    4f68:	6f ef       	ldi	r22, 0xFF	; 255
    4f6a:	7f ef       	ldi	r23, 0xFF	; 255
    4f6c:	02 c0       	rjmp	.+4      	; 0x4f72 <vfprintf+0x150>
    4f6e:	69 2d       	mov	r22, r9
    4f70:	70 e0       	ldi	r23, 0x00	; 0
    4f72:	42 e0       	ldi	r20, 0x02	; 2
    4f74:	50 e0       	ldi	r21, 0x00	; 0
    4f76:	a4 0e       	add	r10, r20
    4f78:	b5 1e       	adc	r11, r21
    4f7a:	c6 01       	movw	r24, r12
    4f7c:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <strnlen>
    4f80:	8c 01       	movw	r16, r24
    4f82:	5f e7       	ldi	r21, 0x7F	; 127
    4f84:	f5 22       	and	r15, r21
    4f86:	14 c0       	rjmp	.+40     	; 0x4fb0 <vfprintf+0x18e>
    4f88:	f5 01       	movw	r30, r10
    4f8a:	c0 80       	ld	r12, Z
    4f8c:	d1 80       	ldd	r13, Z+1	; 0x01
    4f8e:	f6 fc       	sbrc	r15, 6
    4f90:	03 c0       	rjmp	.+6      	; 0x4f98 <vfprintf+0x176>
    4f92:	6f ef       	ldi	r22, 0xFF	; 255
    4f94:	7f ef       	ldi	r23, 0xFF	; 255
    4f96:	02 c0       	rjmp	.+4      	; 0x4f9c <vfprintf+0x17a>
    4f98:	69 2d       	mov	r22, r9
    4f9a:	70 e0       	ldi	r23, 0x00	; 0
    4f9c:	42 e0       	ldi	r20, 0x02	; 2
    4f9e:	50 e0       	ldi	r21, 0x00	; 0
    4fa0:	a4 0e       	add	r10, r20
    4fa2:	b5 1e       	adc	r11, r21
    4fa4:	c6 01       	movw	r24, r12
    4fa6:	0e 94 ee 28 	call	0x51dc	; 0x51dc <strnlen_P>
    4faa:	8c 01       	movw	r16, r24
    4fac:	50 e8       	ldi	r21, 0x80	; 128
    4fae:	f5 2a       	or	r15, r21
    4fb0:	f3 fe       	sbrs	r15, 3
    4fb2:	07 c0       	rjmp	.+14     	; 0x4fc2 <vfprintf+0x1a0>
    4fb4:	1a c0       	rjmp	.+52     	; 0x4fea <vfprintf+0x1c8>
    4fb6:	80 e2       	ldi	r24, 0x20	; 32
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	b3 01       	movw	r22, r6
    4fbc:	0e 94 04 29 	call	0x5208	; 0x5208 <fputc>
    4fc0:	ea 94       	dec	r14
    4fc2:	8e 2d       	mov	r24, r14
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	08 17       	cp	r16, r24
    4fc8:	19 07       	cpc	r17, r25
    4fca:	a8 f3       	brcs	.-22     	; 0x4fb6 <vfprintf+0x194>
    4fcc:	0e c0       	rjmp	.+28     	; 0x4fea <vfprintf+0x1c8>
    4fce:	f6 01       	movw	r30, r12
    4fd0:	f7 fc       	sbrc	r15, 7
    4fd2:	85 91       	lpm	r24, Z+
    4fd4:	f7 fe       	sbrs	r15, 7
    4fd6:	81 91       	ld	r24, Z+
    4fd8:	6f 01       	movw	r12, r30
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	b3 01       	movw	r22, r6
    4fde:	0e 94 04 29 	call	0x5208	; 0x5208 <fputc>
    4fe2:	e1 10       	cpse	r14, r1
    4fe4:	ea 94       	dec	r14
    4fe6:	01 50       	subi	r16, 0x01	; 1
    4fe8:	10 40       	sbci	r17, 0x00	; 0
    4fea:	01 15       	cp	r16, r1
    4fec:	11 05       	cpc	r17, r1
    4fee:	79 f7       	brne	.-34     	; 0x4fce <vfprintf+0x1ac>
    4ff0:	ea c0       	rjmp	.+468    	; 0x51c6 <vfprintf+0x3a4>
    4ff2:	94 36       	cpi	r25, 0x64	; 100
    4ff4:	11 f0       	breq	.+4      	; 0x4ffa <vfprintf+0x1d8>
    4ff6:	99 36       	cpi	r25, 0x69	; 105
    4ff8:	69 f5       	brne	.+90     	; 0x5054 <vfprintf+0x232>
    4ffa:	f7 fe       	sbrs	r15, 7
    4ffc:	08 c0       	rjmp	.+16     	; 0x500e <vfprintf+0x1ec>
    4ffe:	f5 01       	movw	r30, r10
    5000:	20 81       	ld	r18, Z
    5002:	31 81       	ldd	r19, Z+1	; 0x01
    5004:	42 81       	ldd	r20, Z+2	; 0x02
    5006:	53 81       	ldd	r21, Z+3	; 0x03
    5008:	84 e0       	ldi	r24, 0x04	; 4
    500a:	90 e0       	ldi	r25, 0x00	; 0
    500c:	0a c0       	rjmp	.+20     	; 0x5022 <vfprintf+0x200>
    500e:	f5 01       	movw	r30, r10
    5010:	80 81       	ld	r24, Z
    5012:	91 81       	ldd	r25, Z+1	; 0x01
    5014:	9c 01       	movw	r18, r24
    5016:	44 27       	eor	r20, r20
    5018:	37 fd       	sbrc	r19, 7
    501a:	40 95       	com	r20
    501c:	54 2f       	mov	r21, r20
    501e:	82 e0       	ldi	r24, 0x02	; 2
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	a8 0e       	add	r10, r24
    5024:	b9 1e       	adc	r11, r25
    5026:	9f e6       	ldi	r25, 0x6F	; 111
    5028:	f9 22       	and	r15, r25
    502a:	57 ff       	sbrs	r21, 7
    502c:	09 c0       	rjmp	.+18     	; 0x5040 <vfprintf+0x21e>
    502e:	50 95       	com	r21
    5030:	40 95       	com	r20
    5032:	30 95       	com	r19
    5034:	21 95       	neg	r18
    5036:	3f 4f       	sbci	r19, 0xFF	; 255
    5038:	4f 4f       	sbci	r20, 0xFF	; 255
    503a:	5f 4f       	sbci	r21, 0xFF	; 255
    503c:	e0 e8       	ldi	r30, 0x80	; 128
    503e:	fe 2a       	or	r15, r30
    5040:	ca 01       	movw	r24, r20
    5042:	b9 01       	movw	r22, r18
    5044:	a1 01       	movw	r20, r2
    5046:	2a e0       	ldi	r18, 0x0A	; 10
    5048:	30 e0       	ldi	r19, 0x00	; 0
    504a:	0e 94 30 29 	call	0x5260	; 0x5260 <__ultoa_invert>
    504e:	d8 2e       	mov	r13, r24
    5050:	d2 18       	sub	r13, r2
    5052:	40 c0       	rjmp	.+128    	; 0x50d4 <vfprintf+0x2b2>
    5054:	95 37       	cpi	r25, 0x75	; 117
    5056:	29 f4       	brne	.+10     	; 0x5062 <vfprintf+0x240>
    5058:	1f 2d       	mov	r17, r15
    505a:	1f 7e       	andi	r17, 0xEF	; 239
    505c:	2a e0       	ldi	r18, 0x0A	; 10
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	1d c0       	rjmp	.+58     	; 0x509c <vfprintf+0x27a>
    5062:	1f 2d       	mov	r17, r15
    5064:	19 7f       	andi	r17, 0xF9	; 249
    5066:	9f 36       	cpi	r25, 0x6F	; 111
    5068:	61 f0       	breq	.+24     	; 0x5082 <vfprintf+0x260>
    506a:	90 37       	cpi	r25, 0x70	; 112
    506c:	20 f4       	brcc	.+8      	; 0x5076 <vfprintf+0x254>
    506e:	98 35       	cpi	r25, 0x58	; 88
    5070:	09 f0       	breq	.+2      	; 0x5074 <vfprintf+0x252>
    5072:	ac c0       	rjmp	.+344    	; 0x51cc <vfprintf+0x3aa>
    5074:	0f c0       	rjmp	.+30     	; 0x5094 <vfprintf+0x272>
    5076:	90 37       	cpi	r25, 0x70	; 112
    5078:	39 f0       	breq	.+14     	; 0x5088 <vfprintf+0x266>
    507a:	98 37       	cpi	r25, 0x78	; 120
    507c:	09 f0       	breq	.+2      	; 0x5080 <vfprintf+0x25e>
    507e:	a6 c0       	rjmp	.+332    	; 0x51cc <vfprintf+0x3aa>
    5080:	04 c0       	rjmp	.+8      	; 0x508a <vfprintf+0x268>
    5082:	28 e0       	ldi	r18, 0x08	; 8
    5084:	30 e0       	ldi	r19, 0x00	; 0
    5086:	0a c0       	rjmp	.+20     	; 0x509c <vfprintf+0x27a>
    5088:	10 61       	ori	r17, 0x10	; 16
    508a:	14 fd       	sbrc	r17, 4
    508c:	14 60       	ori	r17, 0x04	; 4
    508e:	20 e1       	ldi	r18, 0x10	; 16
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	04 c0       	rjmp	.+8      	; 0x509c <vfprintf+0x27a>
    5094:	14 fd       	sbrc	r17, 4
    5096:	16 60       	ori	r17, 0x06	; 6
    5098:	20 e1       	ldi	r18, 0x10	; 16
    509a:	32 e0       	ldi	r19, 0x02	; 2
    509c:	17 ff       	sbrs	r17, 7
    509e:	08 c0       	rjmp	.+16     	; 0x50b0 <vfprintf+0x28e>
    50a0:	f5 01       	movw	r30, r10
    50a2:	60 81       	ld	r22, Z
    50a4:	71 81       	ldd	r23, Z+1	; 0x01
    50a6:	82 81       	ldd	r24, Z+2	; 0x02
    50a8:	93 81       	ldd	r25, Z+3	; 0x03
    50aa:	44 e0       	ldi	r20, 0x04	; 4
    50ac:	50 e0       	ldi	r21, 0x00	; 0
    50ae:	08 c0       	rjmp	.+16     	; 0x50c0 <vfprintf+0x29e>
    50b0:	f5 01       	movw	r30, r10
    50b2:	80 81       	ld	r24, Z
    50b4:	91 81       	ldd	r25, Z+1	; 0x01
    50b6:	bc 01       	movw	r22, r24
    50b8:	80 e0       	ldi	r24, 0x00	; 0
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	42 e0       	ldi	r20, 0x02	; 2
    50be:	50 e0       	ldi	r21, 0x00	; 0
    50c0:	a4 0e       	add	r10, r20
    50c2:	b5 1e       	adc	r11, r21
    50c4:	a1 01       	movw	r20, r2
    50c6:	0e 94 30 29 	call	0x5260	; 0x5260 <__ultoa_invert>
    50ca:	d8 2e       	mov	r13, r24
    50cc:	d2 18       	sub	r13, r2
    50ce:	8f e7       	ldi	r24, 0x7F	; 127
    50d0:	f8 2e       	mov	r15, r24
    50d2:	f1 22       	and	r15, r17
    50d4:	f6 fe       	sbrs	r15, 6
    50d6:	0b c0       	rjmp	.+22     	; 0x50ee <vfprintf+0x2cc>
    50d8:	5e ef       	ldi	r21, 0xFE	; 254
    50da:	f5 22       	and	r15, r21
    50dc:	d9 14       	cp	r13, r9
    50de:	38 f4       	brcc	.+14     	; 0x50ee <vfprintf+0x2cc>
    50e0:	f4 fe       	sbrs	r15, 4
    50e2:	07 c0       	rjmp	.+14     	; 0x50f2 <vfprintf+0x2d0>
    50e4:	f2 fc       	sbrc	r15, 2
    50e6:	05 c0       	rjmp	.+10     	; 0x50f2 <vfprintf+0x2d0>
    50e8:	8f ee       	ldi	r24, 0xEF	; 239
    50ea:	f8 22       	and	r15, r24
    50ec:	02 c0       	rjmp	.+4      	; 0x50f2 <vfprintf+0x2d0>
    50ee:	1d 2d       	mov	r17, r13
    50f0:	01 c0       	rjmp	.+2      	; 0x50f4 <vfprintf+0x2d2>
    50f2:	19 2d       	mov	r17, r9
    50f4:	f4 fe       	sbrs	r15, 4
    50f6:	0d c0       	rjmp	.+26     	; 0x5112 <vfprintf+0x2f0>
    50f8:	fe 01       	movw	r30, r28
    50fa:	ed 0d       	add	r30, r13
    50fc:	f1 1d       	adc	r31, r1
    50fe:	80 81       	ld	r24, Z
    5100:	80 33       	cpi	r24, 0x30	; 48
    5102:	19 f4       	brne	.+6      	; 0x510a <vfprintf+0x2e8>
    5104:	99 ee       	ldi	r25, 0xE9	; 233
    5106:	f9 22       	and	r15, r25
    5108:	08 c0       	rjmp	.+16     	; 0x511a <vfprintf+0x2f8>
    510a:	1f 5f       	subi	r17, 0xFF	; 255
    510c:	f2 fe       	sbrs	r15, 2
    510e:	05 c0       	rjmp	.+10     	; 0x511a <vfprintf+0x2f8>
    5110:	03 c0       	rjmp	.+6      	; 0x5118 <vfprintf+0x2f6>
    5112:	8f 2d       	mov	r24, r15
    5114:	86 78       	andi	r24, 0x86	; 134
    5116:	09 f0       	breq	.+2      	; 0x511a <vfprintf+0x2f8>
    5118:	1f 5f       	subi	r17, 0xFF	; 255
    511a:	0f 2d       	mov	r16, r15
    511c:	f3 fc       	sbrc	r15, 3
    511e:	14 c0       	rjmp	.+40     	; 0x5148 <vfprintf+0x326>
    5120:	f0 fe       	sbrs	r15, 0
    5122:	0f c0       	rjmp	.+30     	; 0x5142 <vfprintf+0x320>
    5124:	1e 15       	cp	r17, r14
    5126:	10 f0       	brcs	.+4      	; 0x512c <vfprintf+0x30a>
    5128:	9d 2c       	mov	r9, r13
    512a:	0b c0       	rjmp	.+22     	; 0x5142 <vfprintf+0x320>
    512c:	9d 2c       	mov	r9, r13
    512e:	9e 0c       	add	r9, r14
    5130:	91 1a       	sub	r9, r17
    5132:	1e 2d       	mov	r17, r14
    5134:	06 c0       	rjmp	.+12     	; 0x5142 <vfprintf+0x320>
    5136:	80 e2       	ldi	r24, 0x20	; 32
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	b3 01       	movw	r22, r6
    513c:	0e 94 04 29 	call	0x5208	; 0x5208 <fputc>
    5140:	1f 5f       	subi	r17, 0xFF	; 255
    5142:	1e 15       	cp	r17, r14
    5144:	c0 f3       	brcs	.-16     	; 0x5136 <vfprintf+0x314>
    5146:	04 c0       	rjmp	.+8      	; 0x5150 <vfprintf+0x32e>
    5148:	1e 15       	cp	r17, r14
    514a:	10 f4       	brcc	.+4      	; 0x5150 <vfprintf+0x32e>
    514c:	e1 1a       	sub	r14, r17
    514e:	01 c0       	rjmp	.+2      	; 0x5152 <vfprintf+0x330>
    5150:	ee 24       	eor	r14, r14
    5152:	04 ff       	sbrs	r16, 4
    5154:	0f c0       	rjmp	.+30     	; 0x5174 <vfprintf+0x352>
    5156:	80 e3       	ldi	r24, 0x30	; 48
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	b3 01       	movw	r22, r6
    515c:	0e 94 04 29 	call	0x5208	; 0x5208 <fputc>
    5160:	02 ff       	sbrs	r16, 2
    5162:	1d c0       	rjmp	.+58     	; 0x519e <vfprintf+0x37c>
    5164:	01 fd       	sbrc	r16, 1
    5166:	03 c0       	rjmp	.+6      	; 0x516e <vfprintf+0x34c>
    5168:	88 e7       	ldi	r24, 0x78	; 120
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	0e c0       	rjmp	.+28     	; 0x518a <vfprintf+0x368>
    516e:	88 e5       	ldi	r24, 0x58	; 88
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	0b c0       	rjmp	.+22     	; 0x518a <vfprintf+0x368>
    5174:	80 2f       	mov	r24, r16
    5176:	86 78       	andi	r24, 0x86	; 134
    5178:	91 f0       	breq	.+36     	; 0x519e <vfprintf+0x37c>
    517a:	01 ff       	sbrs	r16, 1
    517c:	02 c0       	rjmp	.+4      	; 0x5182 <vfprintf+0x360>
    517e:	8b e2       	ldi	r24, 0x2B	; 43
    5180:	01 c0       	rjmp	.+2      	; 0x5184 <vfprintf+0x362>
    5182:	80 e2       	ldi	r24, 0x20	; 32
    5184:	f7 fc       	sbrc	r15, 7
    5186:	8d e2       	ldi	r24, 0x2D	; 45
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	b3 01       	movw	r22, r6
    518c:	0e 94 04 29 	call	0x5208	; 0x5208 <fputc>
    5190:	06 c0       	rjmp	.+12     	; 0x519e <vfprintf+0x37c>
    5192:	80 e3       	ldi	r24, 0x30	; 48
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	b3 01       	movw	r22, r6
    5198:	0e 94 04 29 	call	0x5208	; 0x5208 <fputc>
    519c:	9a 94       	dec	r9
    519e:	d9 14       	cp	r13, r9
    51a0:	c0 f3       	brcs	.-16     	; 0x5192 <vfprintf+0x370>
    51a2:	da 94       	dec	r13
    51a4:	f1 01       	movw	r30, r2
    51a6:	ed 0d       	add	r30, r13
    51a8:	f1 1d       	adc	r31, r1
    51aa:	80 81       	ld	r24, Z
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	b3 01       	movw	r22, r6
    51b0:	0e 94 04 29 	call	0x5208	; 0x5208 <fputc>
    51b4:	dd 20       	and	r13, r13
    51b6:	a9 f7       	brne	.-22     	; 0x51a2 <vfprintf+0x380>
    51b8:	06 c0       	rjmp	.+12     	; 0x51c6 <vfprintf+0x3a4>
    51ba:	80 e2       	ldi	r24, 0x20	; 32
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	b3 01       	movw	r22, r6
    51c0:	0e 94 04 29 	call	0x5208	; 0x5208 <fputc>
    51c4:	ea 94       	dec	r14
    51c6:	ee 20       	and	r14, r14
    51c8:	c1 f7       	brne	.-16     	; 0x51ba <vfprintf+0x398>
    51ca:	43 ce       	rjmp	.-890    	; 0x4e52 <vfprintf+0x30>
    51cc:	f3 01       	movw	r30, r6
    51ce:	66 81       	ldd	r22, Z+6	; 0x06
    51d0:	77 81       	ldd	r23, Z+7	; 0x07
    51d2:	cb 01       	movw	r24, r22
    51d4:	2b 96       	adiw	r28, 0x0b	; 11
    51d6:	e2 e1       	ldi	r30, 0x12	; 18
    51d8:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__epilogue_restores__>

000051dc <strnlen_P>:
    51dc:	fc 01       	movw	r30, r24
    51de:	05 90       	lpm	r0, Z+
    51e0:	61 50       	subi	r22, 0x01	; 1
    51e2:	70 40       	sbci	r23, 0x00	; 0
    51e4:	01 10       	cpse	r0, r1
    51e6:	d8 f7       	brcc	.-10     	; 0x51de <strnlen_P+0x2>
    51e8:	80 95       	com	r24
    51ea:	90 95       	com	r25
    51ec:	8e 0f       	add	r24, r30
    51ee:	9f 1f       	adc	r25, r31
    51f0:	08 95       	ret

000051f2 <strnlen>:
    51f2:	fc 01       	movw	r30, r24
    51f4:	61 50       	subi	r22, 0x01	; 1
    51f6:	70 40       	sbci	r23, 0x00	; 0
    51f8:	01 90       	ld	r0, Z+
    51fa:	01 10       	cpse	r0, r1
    51fc:	d8 f7       	brcc	.-10     	; 0x51f4 <strnlen+0x2>
    51fe:	80 95       	com	r24
    5200:	90 95       	com	r25
    5202:	8e 0f       	add	r24, r30
    5204:	9f 1f       	adc	r25, r31
    5206:	08 95       	ret

00005208 <fputc>:
    5208:	0f 93       	push	r16
    520a:	1f 93       	push	r17
    520c:	cf 93       	push	r28
    520e:	df 93       	push	r29
    5210:	8c 01       	movw	r16, r24
    5212:	eb 01       	movw	r28, r22
    5214:	8b 81       	ldd	r24, Y+3	; 0x03
    5216:	81 ff       	sbrs	r24, 1
    5218:	1b c0       	rjmp	.+54     	; 0x5250 <fputc+0x48>
    521a:	82 ff       	sbrs	r24, 2
    521c:	0d c0       	rjmp	.+26     	; 0x5238 <fputc+0x30>
    521e:	2e 81       	ldd	r18, Y+6	; 0x06
    5220:	3f 81       	ldd	r19, Y+7	; 0x07
    5222:	8c 81       	ldd	r24, Y+4	; 0x04
    5224:	9d 81       	ldd	r25, Y+5	; 0x05
    5226:	28 17       	cp	r18, r24
    5228:	39 07       	cpc	r19, r25
    522a:	64 f4       	brge	.+24     	; 0x5244 <fputc+0x3c>
    522c:	e8 81       	ld	r30, Y
    522e:	f9 81       	ldd	r31, Y+1	; 0x01
    5230:	01 93       	st	Z+, r16
    5232:	f9 83       	std	Y+1, r31	; 0x01
    5234:	e8 83       	st	Y, r30
    5236:	06 c0       	rjmp	.+12     	; 0x5244 <fputc+0x3c>
    5238:	e8 85       	ldd	r30, Y+8	; 0x08
    523a:	f9 85       	ldd	r31, Y+9	; 0x09
    523c:	80 2f       	mov	r24, r16
    523e:	09 95       	icall
    5240:	89 2b       	or	r24, r25
    5242:	31 f4       	brne	.+12     	; 0x5250 <fputc+0x48>
    5244:	8e 81       	ldd	r24, Y+6	; 0x06
    5246:	9f 81       	ldd	r25, Y+7	; 0x07
    5248:	01 96       	adiw	r24, 0x01	; 1
    524a:	9f 83       	std	Y+7, r25	; 0x07
    524c:	8e 83       	std	Y+6, r24	; 0x06
    524e:	02 c0       	rjmp	.+4      	; 0x5254 <fputc+0x4c>
    5250:	0f ef       	ldi	r16, 0xFF	; 255
    5252:	1f ef       	ldi	r17, 0xFF	; 255
    5254:	c8 01       	movw	r24, r16
    5256:	df 91       	pop	r29
    5258:	cf 91       	pop	r28
    525a:	1f 91       	pop	r17
    525c:	0f 91       	pop	r16
    525e:	08 95       	ret

00005260 <__ultoa_invert>:
    5260:	fa 01       	movw	r30, r20
    5262:	aa 27       	eor	r26, r26
    5264:	28 30       	cpi	r18, 0x08	; 8
    5266:	51 f1       	breq	.+84     	; 0x52bc <__ultoa_invert+0x5c>
    5268:	20 31       	cpi	r18, 0x10	; 16
    526a:	81 f1       	breq	.+96     	; 0x52cc <__ultoa_invert+0x6c>
    526c:	e8 94       	clt
    526e:	6f 93       	push	r22
    5270:	6e 7f       	andi	r22, 0xFE	; 254
    5272:	6e 5f       	subi	r22, 0xFE	; 254
    5274:	7f 4f       	sbci	r23, 0xFF	; 255
    5276:	8f 4f       	sbci	r24, 0xFF	; 255
    5278:	9f 4f       	sbci	r25, 0xFF	; 255
    527a:	af 4f       	sbci	r26, 0xFF	; 255
    527c:	b1 e0       	ldi	r27, 0x01	; 1
    527e:	3e d0       	rcall	.+124    	; 0x52fc <__ultoa_invert+0x9c>
    5280:	b4 e0       	ldi	r27, 0x04	; 4
    5282:	3c d0       	rcall	.+120    	; 0x52fc <__ultoa_invert+0x9c>
    5284:	67 0f       	add	r22, r23
    5286:	78 1f       	adc	r23, r24
    5288:	89 1f       	adc	r24, r25
    528a:	9a 1f       	adc	r25, r26
    528c:	a1 1d       	adc	r26, r1
    528e:	68 0f       	add	r22, r24
    5290:	79 1f       	adc	r23, r25
    5292:	8a 1f       	adc	r24, r26
    5294:	91 1d       	adc	r25, r1
    5296:	a1 1d       	adc	r26, r1
    5298:	6a 0f       	add	r22, r26
    529a:	71 1d       	adc	r23, r1
    529c:	81 1d       	adc	r24, r1
    529e:	91 1d       	adc	r25, r1
    52a0:	a1 1d       	adc	r26, r1
    52a2:	20 d0       	rcall	.+64     	; 0x52e4 <__ultoa_invert+0x84>
    52a4:	09 f4       	brne	.+2      	; 0x52a8 <__ultoa_invert+0x48>
    52a6:	68 94       	set
    52a8:	3f 91       	pop	r19
    52aa:	2a e0       	ldi	r18, 0x0A	; 10
    52ac:	26 9f       	mul	r18, r22
    52ae:	11 24       	eor	r1, r1
    52b0:	30 19       	sub	r19, r0
    52b2:	30 5d       	subi	r19, 0xD0	; 208
    52b4:	31 93       	st	Z+, r19
    52b6:	de f6       	brtc	.-74     	; 0x526e <__ultoa_invert+0xe>
    52b8:	cf 01       	movw	r24, r30
    52ba:	08 95       	ret
    52bc:	46 2f       	mov	r20, r22
    52be:	47 70       	andi	r20, 0x07	; 7
    52c0:	40 5d       	subi	r20, 0xD0	; 208
    52c2:	41 93       	st	Z+, r20
    52c4:	b3 e0       	ldi	r27, 0x03	; 3
    52c6:	0f d0       	rcall	.+30     	; 0x52e6 <__ultoa_invert+0x86>
    52c8:	c9 f7       	brne	.-14     	; 0x52bc <__ultoa_invert+0x5c>
    52ca:	f6 cf       	rjmp	.-20     	; 0x52b8 <__ultoa_invert+0x58>
    52cc:	46 2f       	mov	r20, r22
    52ce:	4f 70       	andi	r20, 0x0F	; 15
    52d0:	40 5d       	subi	r20, 0xD0	; 208
    52d2:	4a 33       	cpi	r20, 0x3A	; 58
    52d4:	18 f0       	brcs	.+6      	; 0x52dc <__ultoa_invert+0x7c>
    52d6:	49 5d       	subi	r20, 0xD9	; 217
    52d8:	31 fd       	sbrc	r19, 1
    52da:	40 52       	subi	r20, 0x20	; 32
    52dc:	41 93       	st	Z+, r20
    52de:	02 d0       	rcall	.+4      	; 0x52e4 <__ultoa_invert+0x84>
    52e0:	a9 f7       	brne	.-22     	; 0x52cc <__ultoa_invert+0x6c>
    52e2:	ea cf       	rjmp	.-44     	; 0x52b8 <__ultoa_invert+0x58>
    52e4:	b4 e0       	ldi	r27, 0x04	; 4
    52e6:	a6 95       	lsr	r26
    52e8:	97 95       	ror	r25
    52ea:	87 95       	ror	r24
    52ec:	77 95       	ror	r23
    52ee:	67 95       	ror	r22
    52f0:	ba 95       	dec	r27
    52f2:	c9 f7       	brne	.-14     	; 0x52e6 <__ultoa_invert+0x86>
    52f4:	00 97       	sbiw	r24, 0x00	; 0
    52f6:	61 05       	cpc	r22, r1
    52f8:	71 05       	cpc	r23, r1
    52fa:	08 95       	ret
    52fc:	9b 01       	movw	r18, r22
    52fe:	ac 01       	movw	r20, r24
    5300:	0a 2e       	mov	r0, r26
    5302:	06 94       	lsr	r0
    5304:	57 95       	ror	r21
    5306:	47 95       	ror	r20
    5308:	37 95       	ror	r19
    530a:	27 95       	ror	r18
    530c:	ba 95       	dec	r27
    530e:	c9 f7       	brne	.-14     	; 0x5302 <__ultoa_invert+0xa2>
    5310:	62 0f       	add	r22, r18
    5312:	73 1f       	adc	r23, r19
    5314:	84 1f       	adc	r24, r20
    5316:	95 1f       	adc	r25, r21
    5318:	a0 1d       	adc	r26, r0
    531a:	08 95       	ret

0000531c <_exit>:
    531c:	f8 94       	cli

0000531e <__stop_program>:
    531e:	ff cf       	rjmp	.-2      	; 0x531e <__stop_program>
